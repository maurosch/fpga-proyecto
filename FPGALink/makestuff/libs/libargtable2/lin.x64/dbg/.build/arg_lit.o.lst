   1              		.file	"arg_lit.c"
   2              		.text
   3              	.Ltext0:
   4              		.file 0 "/home/pong/FPGALink/makestuff/libs/libargtable2" "arg_lit.c"
   6              	resetfn:
   7              	.LFB0:
   8              		.file 1 "arg_lit.c"
   1:arg_lit.c     **** /*********************************************************************
   2:arg_lit.c     **** This file is part of the argtable2 library.
   3:arg_lit.c     **** Copyright (C) 1998-2001,2003-2011 Stewart Heitmann
   4:arg_lit.c     **** sheitmann@users.sourceforge.net
   5:arg_lit.c     **** 
   6:arg_lit.c     **** The argtable2 library is free software; you can redistribute it and/or
   7:arg_lit.c     **** modify it under the terms of the GNU Library General Public License as
   8:arg_lit.c     **** published by the Free Software Foundation; either version 2 of the
   9:arg_lit.c     **** License, or (at your option) any later version.
  10:arg_lit.c     **** 
  11:arg_lit.c     **** This software is distributed in the hope that it will be useful,
  12:arg_lit.c     **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:arg_lit.c     **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  14:arg_lit.c     **** Library General Public License for more details.
  15:arg_lit.c     **** 
  16:arg_lit.c     **** You should have received a copy of the GNU Library General Public
  17:arg_lit.c     **** License along with this library; if not, write to the Free Software
  18:arg_lit.c     **** Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
  19:arg_lit.c     **** USA.
  20:arg_lit.c     **** **********************************************************************/
  21:arg_lit.c     **** 
  22:arg_lit.c     **** /* config.h must be included before anything else */
  23:arg_lit.c     **** #ifdef HAVE_CONFIG_H
  24:arg_lit.c     **** #include "config.h"
  25:arg_lit.c     **** #endif
  26:arg_lit.c     **** 
  27:arg_lit.c     **** #ifdef HAVE_STDLIB_H
  28:arg_lit.c     **** #include <stdlib.h>
  29:arg_lit.c     **** #endif
  30:arg_lit.c     **** 
  31:arg_lit.c     **** #include "argtable2.h"
  32:arg_lit.c     **** 
  33:arg_lit.c     **** /* local error codes */
  34:arg_lit.c     **** enum {EMINCOUNT=1,EMAXCOUNT};
  35:arg_lit.c     **** 
  36:arg_lit.c     **** static void resetfn(struct arg_lit *parent)
  37:arg_lit.c     ****     {
   9              		.loc 1 37 5
  10              		.cfi_startproc
  11 0000 F30F1EFA 		endbr64
  12 0004 55       		pushq	%rbp
  13              		.cfi_def_cfa_offset 16
  14              		.cfi_offset 6, -16
  15 0005 4889E5   		movq	%rsp, %rbp
  16              		.cfi_def_cfa_register 6
  17 0008 48897DF8 		movq	%rdi, -8(%rbp)
  38:arg_lit.c     ****     /*printf("%s:resetfn(%p)\n",__FILE__,parent);*/
  39:arg_lit.c     ****     parent->count = 0;
  18              		.loc 1 39 19
  19 000c 488B45F8 		movq	-8(%rbp), %rax
  20 0010 C7406000 		movl	$0, 96(%rax)
  20      000000
  40:arg_lit.c     ****     }
  21              		.loc 1 40 5
  22 0017 90       		nop
  23 0018 5D       		popq	%rbp
  24              		.cfi_def_cfa 7, 8
  25 0019 C3       		ret
  26              		.cfi_endproc
  27              	.LFE0:
  30              	scanfn:
  31              	.LFB1:
  41:arg_lit.c     **** 
  42:arg_lit.c     **** static int scanfn(struct arg_lit *parent, const char *argval)
  43:arg_lit.c     ****     {
  32              		.loc 1 43 5
  33              		.cfi_startproc
  34 001a F30F1EFA 		endbr64
  35 001e 55       		pushq	%rbp
  36              		.cfi_def_cfa_offset 16
  37              		.cfi_offset 6, -16
  38 001f 4889E5   		movq	%rsp, %rbp
  39              		.cfi_def_cfa_register 6
  40 0022 48897DE8 		movq	%rdi, -24(%rbp)
  41 0026 488975E0 		movq	%rsi, -32(%rbp)
  44:arg_lit.c     ****     int errorcode = 0;
  42              		.loc 1 44 9
  43 002a C745FC00 		movl	$0, -4(%rbp)
  43      000000
  45:arg_lit.c     ****     if (parent->count < parent->hdr.maxcount )
  44              		.loc 1 45 15
  45 0031 488B45E8 		movq	-24(%rbp), %rax
  46 0035 8B5060   		movl	96(%rax), %edx
  47              		.loc 1 45 36
  48 0038 488B45E8 		movq	-24(%rbp), %rax
  49 003c 8B402C   		movl	44(%rax), %eax
  50              		.loc 1 45 8
  51 003f 39C2     		cmpl	%eax, %edx
  52 0041 7D13     		jge	.L3
  46:arg_lit.c     ****         parent->count++;
  53              		.loc 1 46 15
  54 0043 488B45E8 		movq	-24(%rbp), %rax
  55 0047 8B4060   		movl	96(%rax), %eax
  56              		.loc 1 46 22
  57 004a 8D5001   		leal	1(%rax), %edx
  58 004d 488B45E8 		movq	-24(%rbp), %rax
  59 0051 895060   		movl	%edx, 96(%rax)
  60 0054 EB07     		jmp	.L4
  61              	.L3:
  47:arg_lit.c     ****     else
  48:arg_lit.c     ****         errorcode = EMAXCOUNT;
  62              		.loc 1 48 19
  63 0056 C745FC02 		movl	$2, -4(%rbp)
  63      000000
  64              	.L4:
  49:arg_lit.c     ****     /*printf("%s:scanfn(%p,%s) returns %d\n",__FILE__,parent,argval,errorcode);*/
  50:arg_lit.c     ****     return errorcode;
  65              		.loc 1 50 12
  66 005d 8B45FC   		movl	-4(%rbp), %eax
  51:arg_lit.c     ****     }
  67              		.loc 1 51 5
  68 0060 5D       		popq	%rbp
  69              		.cfi_def_cfa 7, 8
  70 0061 C3       		ret
  71              		.cfi_endproc
  72              	.LFE1:
  75              	checkfn:
  76              	.LFB2:
  52:arg_lit.c     **** 
  53:arg_lit.c     **** static int checkfn(struct arg_lit *parent)
  54:arg_lit.c     ****     {
  77              		.loc 1 54 5
  78              		.cfi_startproc
  79 0062 F30F1EFA 		endbr64
  80 0066 55       		pushq	%rbp
  81              		.cfi_def_cfa_offset 16
  82              		.cfi_offset 6, -16
  83 0067 4889E5   		movq	%rsp, %rbp
  84              		.cfi_def_cfa_register 6
  85 006a 48897DE8 		movq	%rdi, -24(%rbp)
  55:arg_lit.c     ****     int errorcode = (parent->count < parent->hdr.mincount) ? EMINCOUNT : 0;
  86              		.loc 1 55 28
  87 006e 488B45E8 		movq	-24(%rbp), %rax
  88 0072 8B5060   		movl	96(%rax), %edx
  89              		.loc 1 55 49
  90 0075 488B45E8 		movq	-24(%rbp), %rax
  91 0079 8B4028   		movl	40(%rax), %eax
  92              		.loc 1 55 72
  93 007c 39C2     		cmpl	%eax, %edx
  94 007e 0F9CC0   		setl	%al
  95              		.loc 1 55 9
  96 0081 0FB6C0   		movzbl	%al, %eax
  97 0084 8945FC   		movl	%eax, -4(%rbp)
  56:arg_lit.c     ****     /*printf("%s:checkfn(%p) returns %d\n",__FILE__,parent,errorcode);*/
  57:arg_lit.c     ****     return errorcode;
  98              		.loc 1 57 12
  99 0087 8B45FC   		movl	-4(%rbp), %eax
  58:arg_lit.c     ****     }
 100              		.loc 1 58 5
 101 008a 5D       		popq	%rbp
 102              		.cfi_def_cfa 7, 8
 103 008b C3       		ret
 104              		.cfi_endproc
 105              	.LFE2:
 107              		.section	.rodata
 108              	.LC0:
 109 0000 25733A20 		.string	"%s: missing option "
 109      6D697373 
 109      696E6720 
 109      6F707469 
 109      6F6E2000 
 110              	.LC1:
 111 0014 0A00     		.string	"\n"
 112              	.LC2:
 113 0016 25733A20 		.string	"%s: extraneous option "
 113      65787472 
 113      616E656F 
 113      7573206F 
 113      7074696F 
 114              		.text
 116              	errorfn:
 117              	.LFB3:
  59:arg_lit.c     **** 
  60:arg_lit.c     **** static void errorfn(struct arg_lit *parent, FILE *fp, int errorcode, const char *argval, const char
  61:arg_lit.c     ****     {
 118              		.loc 1 61 5
 119              		.cfi_startproc
 120 008c F30F1EFA 		endbr64
 121 0090 55       		pushq	%rbp
 122              		.cfi_def_cfa_offset 16
 123              		.cfi_offset 6, -16
 124 0091 4889E5   		movq	%rsp, %rbp
 125              		.cfi_def_cfa_register 6
 126 0094 4883EC50 		subq	$80, %rsp
 127 0098 48897DD8 		movq	%rdi, -40(%rbp)
 128 009c 488975D0 		movq	%rsi, -48(%rbp)
 129 00a0 8955CC   		movl	%edx, -52(%rbp)
 130 00a3 48894DC0 		movq	%rcx, -64(%rbp)
 131 00a7 4C8945B8 		movq	%r8, -72(%rbp)
  62:arg_lit.c     ****     const char *shortopts = parent->hdr.shortopts;
 132              		.loc 1 62 17
 133 00ab 488B45D8 		movq	-40(%rbp), %rax
 134 00af 488B4008 		movq	8(%rax), %rax
 135 00b3 488945E8 		movq	%rax, -24(%rbp)
  63:arg_lit.c     ****     const char *longopts  = parent->hdr.longopts;
 136              		.loc 1 63 17
 137 00b7 488B45D8 		movq	-40(%rbp), %rax
 138 00bb 488B4010 		movq	16(%rax), %rax
 139 00bf 488945F0 		movq	%rax, -16(%rbp)
  64:arg_lit.c     ****     const char *datatype  = parent->hdr.datatype;
 140              		.loc 1 64 17
 141 00c3 488B45D8 		movq	-40(%rbp), %rax
 142 00c7 488B4018 		movq	24(%rax), %rax
 143 00cb 488945F8 		movq	%rax, -8(%rbp)
  65:arg_lit.c     **** 
  66:arg_lit.c     ****     switch(errorcode)
 144              		.loc 1 66 5
 145 00cf 837DCC01 		cmpl	$1, -52(%rbp)
 146 00d3 740B     		je	.L9
 147 00d5 837DCC02 		cmpl	$2, -52(%rbp)
 148 00d9 7456     		je	.L10
  67:arg_lit.c     ****         {
  68:arg_lit.c     ****         case EMINCOUNT:
  69:arg_lit.c     ****             fprintf(fp,"%s: missing option ",progname);
  70:arg_lit.c     ****             arg_print_option(fp,shortopts,longopts,datatype,"\n");
  71:arg_lit.c     ****             fprintf(fp,"\n");
  72:arg_lit.c     ****             break;
  73:arg_lit.c     **** 
  74:arg_lit.c     ****         case EMAXCOUNT:
  75:arg_lit.c     ****             fprintf(fp,"%s: extraneous option ",progname);
  76:arg_lit.c     ****             arg_print_option(fp,shortopts,longopts,datatype,"\n");
  77:arg_lit.c     ****             break;
  78:arg_lit.c     ****         }
  79:arg_lit.c     ****     }
 149              		.loc 1 79 5
 150 00db E9900000 		jmp	.L12
 150      00
 151              	.L9:
  69:arg_lit.c     ****             arg_print_option(fp,shortopts,longopts,datatype,"\n");
 152              		.loc 1 69 13
 153 00e0 488B55B8 		movq	-72(%rbp), %rdx
 154 00e4 488B45D0 		movq	-48(%rbp), %rax
 155 00e8 488D0D00 		leaq	.LC0(%rip), %rcx
 155      000000
 156 00ef 4889CE   		movq	%rcx, %rsi
 157 00f2 4889C7   		movq	%rax, %rdi
 158 00f5 B8000000 		movl	$0, %eax
 158      00
 159 00fa E8000000 		call	fprintf@PLT
 159      00
  70:arg_lit.c     ****             fprintf(fp,"\n");
 160              		.loc 1 70 13
 161 00ff 488B4DF8 		movq	-8(%rbp), %rcx
 162 0103 488B55F0 		movq	-16(%rbp), %rdx
 163 0107 488B75E8 		movq	-24(%rbp), %rsi
 164 010b 488B45D0 		movq	-48(%rbp), %rax
 165 010f 4C8D0500 		leaq	.LC1(%rip), %r8
 165      000000
 166 0116 4889C7   		movq	%rax, %rdi
 167 0119 E8000000 		call	arg_print_option@PLT
 167      00
  71:arg_lit.c     ****             break;
 168              		.loc 1 71 13
 169 011e 488B45D0 		movq	-48(%rbp), %rax
 170 0122 4889C6   		movq	%rax, %rsi
 171 0125 BF0A0000 		movl	$10, %edi
 171      00
 172 012a E8000000 		call	fputc@PLT
 172      00
  72:arg_lit.c     **** 
 173              		.loc 1 72 13
 174 012f EB3F     		jmp	.L11
 175              	.L10:
  75:arg_lit.c     ****             arg_print_option(fp,shortopts,longopts,datatype,"\n");
 176              		.loc 1 75 13
 177 0131 488B55B8 		movq	-72(%rbp), %rdx
 178 0135 488B45D0 		movq	-48(%rbp), %rax
 179 0139 488D0D00 		leaq	.LC2(%rip), %rcx
 179      000000
 180 0140 4889CE   		movq	%rcx, %rsi
 181 0143 4889C7   		movq	%rax, %rdi
 182 0146 B8000000 		movl	$0, %eax
 182      00
 183 014b E8000000 		call	fprintf@PLT
 183      00
  76:arg_lit.c     ****             break;
 184              		.loc 1 76 13
 185 0150 488B4DF8 		movq	-8(%rbp), %rcx
 186 0154 488B55F0 		movq	-16(%rbp), %rdx
 187 0158 488B75E8 		movq	-24(%rbp), %rsi
 188 015c 488B45D0 		movq	-48(%rbp), %rax
 189 0160 4C8D0500 		leaq	.LC1(%rip), %r8
 189      000000
 190 0167 4889C7   		movq	%rax, %rdi
 191 016a E8000000 		call	arg_print_option@PLT
 191      00
  77:arg_lit.c     ****         }
 192              		.loc 1 77 13
 193 016f 90       		nop
 194              	.L11:
 195              	.L12:
 196              		.loc 1 79 5
 197 0170 90       		nop
 198 0171 C9       		leave
 199              		.cfi_def_cfa 7, 8
 200 0172 C3       		ret
 201              		.cfi_endproc
 202              	.LFE3:
 204              		.globl	arg_lit0
 206              	arg_lit0:
 207              	.LFB4:
  80:arg_lit.c     **** 
  81:arg_lit.c     **** struct arg_lit* arg_lit0(const char* shortopts,
  82:arg_lit.c     ****                          const char* longopts,
  83:arg_lit.c     ****                          const char* glossary)
  84:arg_lit.c     ****     {return arg_litn(shortopts,longopts,0,1,glossary);}
 208              		.loc 1 84 5
 209              		.cfi_startproc
 210 0173 F30F1EFA 		endbr64
 211 0177 55       		pushq	%rbp
 212              		.cfi_def_cfa_offset 16
 213              		.cfi_offset 6, -16
 214 0178 4889E5   		movq	%rsp, %rbp
 215              		.cfi_def_cfa_register 6
 216 017b 4883EC20 		subq	$32, %rsp
 217 017f 48897DF8 		movq	%rdi, -8(%rbp)
 218 0183 488975F0 		movq	%rsi, -16(%rbp)
 219 0187 488955E8 		movq	%rdx, -24(%rbp)
 220              		.loc 1 84 13
 221 018b 488B55E8 		movq	-24(%rbp), %rdx
 222 018f 488B75F0 		movq	-16(%rbp), %rsi
 223 0193 488B45F8 		movq	-8(%rbp), %rax
 224 0197 4989D0   		movq	%rdx, %r8
 225 019a B9010000 		movl	$1, %ecx
 225      00
 226 019f BA000000 		movl	$0, %edx
 226      00
 227 01a4 4889C7   		movq	%rax, %rdi
 228 01a7 E8000000 		call	arg_litn@PLT
 228      00
 229              		.loc 1 84 55
 230 01ac C9       		leave
 231              		.cfi_def_cfa 7, 8
 232 01ad C3       		ret
 233              		.cfi_endproc
 234              	.LFE4:
 236              		.globl	arg_lit1
 238              	arg_lit1:
 239              	.LFB5:
  85:arg_lit.c     **** 
  86:arg_lit.c     **** struct arg_lit* arg_lit1(const char* shortopts,
  87:arg_lit.c     ****                          const char* longopts,
  88:arg_lit.c     ****                          const char* glossary)
  89:arg_lit.c     ****     {return arg_litn(shortopts,longopts,1,1,glossary);}
 240              		.loc 1 89 5
 241              		.cfi_startproc
 242 01ae F30F1EFA 		endbr64
 243 01b2 55       		pushq	%rbp
 244              		.cfi_def_cfa_offset 16
 245              		.cfi_offset 6, -16
 246 01b3 4889E5   		movq	%rsp, %rbp
 247              		.cfi_def_cfa_register 6
 248 01b6 4883EC20 		subq	$32, %rsp
 249 01ba 48897DF8 		movq	%rdi, -8(%rbp)
 250 01be 488975F0 		movq	%rsi, -16(%rbp)
 251 01c2 488955E8 		movq	%rdx, -24(%rbp)
 252              		.loc 1 89 13
 253 01c6 488B55E8 		movq	-24(%rbp), %rdx
 254 01ca 488B75F0 		movq	-16(%rbp), %rsi
 255 01ce 488B45F8 		movq	-8(%rbp), %rax
 256 01d2 4989D0   		movq	%rdx, %r8
 257 01d5 B9010000 		movl	$1, %ecx
 257      00
 258 01da BA010000 		movl	$1, %edx
 258      00
 259 01df 4889C7   		movq	%rax, %rdi
 260 01e2 E8000000 		call	arg_litn@PLT
 260      00
 261              		.loc 1 89 55
 262 01e7 C9       		leave
 263              		.cfi_def_cfa 7, 8
 264 01e8 C3       		ret
 265              		.cfi_endproc
 266              	.LFE5:
 268              		.globl	arg_litn
 270              	arg_litn:
 271              	.LFB6:
  90:arg_lit.c     **** 
  91:arg_lit.c     **** 
  92:arg_lit.c     **** struct arg_lit* arg_litn(const char* shortopts,
  93:arg_lit.c     ****                          const char* longopts,
  94:arg_lit.c     ****                          int mincount,
  95:arg_lit.c     ****                          int maxcount,
  96:arg_lit.c     ****                          const char *glossary)
  97:arg_lit.c     ****     {
 272              		.loc 1 97 5
 273              		.cfi_startproc
 274 01e9 F30F1EFA 		endbr64
 275 01ed 55       		pushq	%rbp
 276              		.cfi_def_cfa_offset 16
 277              		.cfi_offset 6, -16
 278 01ee 4889E5   		movq	%rsp, %rbp
 279              		.cfi_def_cfa_register 6
 280 01f1 4883EC30 		subq	$48, %rsp
 281 01f5 48897DE8 		movq	%rdi, -24(%rbp)
 282 01f9 488975E0 		movq	%rsi, -32(%rbp)
 283 01fd 8955DC   		movl	%edx, -36(%rbp)
 284 0200 894DD8   		movl	%ecx, -40(%rbp)
 285 0203 4C8945D0 		movq	%r8, -48(%rbp)
  98:arg_lit.c     **** 	struct arg_lit *result;
  99:arg_lit.c     **** 
 100:arg_lit.c     **** 	/* foolproof things by ensuring maxcount is not less than mincount */
 101:arg_lit.c     **** 	maxcount = (maxcount<mincount) ? mincount : maxcount;
 286              		.loc 1 101 11
 287 0207 8B55D8   		movl	-40(%rbp), %edx
 288 020a 8B45DC   		movl	-36(%rbp), %eax
 289 020d 39C2     		cmpl	%eax, %edx
 290 020f 0F4DC2   		cmovge	%edx, %eax
 291 0212 8945D8   		movl	%eax, -40(%rbp)
 102:arg_lit.c     **** 
 103:arg_lit.c     ****     result = (struct arg_lit*)malloc(sizeof(struct arg_lit));
 292              		.loc 1 103 31
 293 0215 BF680000 		movl	$104, %edi
 293      00
 294 021a E8000000 		call	malloc@PLT
 294      00
 295 021f 488945F8 		movq	%rax, -8(%rbp)
 104:arg_lit.c     ****     if (result)
 296              		.loc 1 104 8
 297 0223 48837DF8 		cmpq	$0, -8(%rbp)
 297      00
 298 0228 0F849E00 		je	.L18
 298      0000
 105:arg_lit.c     ****         {
 106:arg_lit.c     ****         /* init the arg_hdr struct */
 107:arg_lit.c     ****         result->hdr.flag      = 0;
 299              		.loc 1 107 31
 300 022e 488B45F8 		movq	-8(%rbp), %rax
 301 0232 C60000   		movb	$0, (%rax)
 108:arg_lit.c     ****         result->hdr.shortopts = shortopts;
 302              		.loc 1 108 31
 303 0235 488B45F8 		movq	-8(%rbp), %rax
 304 0239 488B55E8 		movq	-24(%rbp), %rdx
 305 023d 48895008 		movq	%rdx, 8(%rax)
 109:arg_lit.c     ****         result->hdr.longopts  = longopts;
 306              		.loc 1 109 31
 307 0241 488B45F8 		movq	-8(%rbp), %rax
 308 0245 488B55E0 		movq	-32(%rbp), %rdx
 309 0249 48895010 		movq	%rdx, 16(%rax)
 110:arg_lit.c     ****         result->hdr.datatype  = NULL;
 310              		.loc 1 110 31
 311 024d 488B45F8 		movq	-8(%rbp), %rax
 312 0251 48C74018 		movq	$0, 24(%rax)
 312      00000000 
 111:arg_lit.c     ****         result->hdr.glossary  = glossary;
 313              		.loc 1 111 31
 314 0259 488B45F8 		movq	-8(%rbp), %rax
 315 025d 488B55D0 		movq	-48(%rbp), %rdx
 316 0261 48895020 		movq	%rdx, 32(%rax)
 112:arg_lit.c     ****         result->hdr.mincount  = mincount;
 317              		.loc 1 112 31
 318 0265 488B45F8 		movq	-8(%rbp), %rax
 319 0269 8B55DC   		movl	-36(%rbp), %edx
 320 026c 895028   		movl	%edx, 40(%rax)
 113:arg_lit.c     ****         result->hdr.maxcount  = maxcount;
 321              		.loc 1 113 31
 322 026f 488B45F8 		movq	-8(%rbp), %rax
 323 0273 8B55D8   		movl	-40(%rbp), %edx
 324 0276 89502C   		movl	%edx, 44(%rax)
 114:arg_lit.c     ****         result->hdr.parent    = result;
 325              		.loc 1 114 31
 326 0279 488B45F8 		movq	-8(%rbp), %rax
 327 027d 488B55F8 		movq	-8(%rbp), %rdx
 328 0281 48895030 		movq	%rdx, 48(%rax)
 115:arg_lit.c     ****         result->hdr.resetfn   = (arg_resetfn*)resetfn;
 329              		.loc 1 115 31
 330 0285 488B45F8 		movq	-8(%rbp), %rax
 331 0289 488D1570 		leaq	resetfn(%rip), %rdx
 331      FDFFFF
 332 0290 48895038 		movq	%rdx, 56(%rax)
 116:arg_lit.c     ****         result->hdr.scanfn    = (arg_scanfn*)scanfn;
 333              		.loc 1 116 31
 334 0294 488B45F8 		movq	-8(%rbp), %rax
 335 0298 488D157B 		leaq	scanfn(%rip), %rdx
 335      FDFFFF
 336 029f 48895040 		movq	%rdx, 64(%rax)
 117:arg_lit.c     ****         result->hdr.checkfn   = (arg_checkfn*)checkfn;
 337              		.loc 1 117 31
 338 02a3 488B45F8 		movq	-8(%rbp), %rax
 339 02a7 488D15B4 		leaq	checkfn(%rip), %rdx
 339      FDFFFF
 340 02ae 48895048 		movq	%rdx, 72(%rax)
 118:arg_lit.c     ****         result->hdr.errorfn   = (arg_errorfn*)errorfn;
 341              		.loc 1 118 31
 342 02b2 488B45F8 		movq	-8(%rbp), %rax
 343 02b6 488D15CF 		leaq	errorfn(%rip), %rdx
 343      FDFFFF
 344 02bd 48895050 		movq	%rdx, 80(%rax)
 119:arg_lit.c     **** 
 120:arg_lit.c     ****         /* init local variables */
 121:arg_lit.c     ****         result->count = 0;
 345              		.loc 1 121 23
 346 02c1 488B45F8 		movq	-8(%rbp), %rax
 347 02c5 C7406000 		movl	$0, 96(%rax)
 347      000000
 348              	.L18:
 122:arg_lit.c     ****         }
 123:arg_lit.c     ****     /*printf("arg_litn() returns %p\n",result);*/
 124:arg_lit.c     ****     return result;
 349              		.loc 1 124 12
 350 02cc 488B45F8 		movq	-8(%rbp), %rax
 125:arg_lit.c     ****     }
 351              		.loc 1 125 5
 352 02d0 C9       		leave
 353              		.cfi_def_cfa 7, 8
 354 02d1 C3       		ret
 355              		.cfi_endproc
 356              	.LFE6:
 358              	.Letext0:
 359              		.file 2 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h"
 360              		.file 3 "/usr/include/x86_64-linux-gnu/bits/types.h"
 361              		.file 4 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h"
 362              		.file 5 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h"
 363              		.file 6 "argtable2.h"
 364              		.file 7 "/usr/include/stdlib.h"
 365              		.file 8 "/usr/include/stdio.h"
 1860              		.section	.note.gnu.property,"a"
 1861              		.align 8
 1862 0000 04000000 		.long	1f - 0f
 1863 0004 10000000 		.long	4f - 1f
 1864 0008 05000000 		.long	5
 1865              	0:
 1866 000c 474E5500 		.string	"GNU"
 1867              	1:
 1868              		.align 8
 1869 0010 020000C0 		.long	0xc0000002
 1870 0014 04000000 		.long	3f - 2f
 1871              	2:
 1872 0018 03000000 		.long	0x3
 1873              	3:
 1874 001c 00000000 		.align 8
 1875              	4:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 arg_lit.c
     /tmp/ccw5xF4F.s:6      .text:0000000000000000 resetfn
     /tmp/ccw5xF4F.s:30     .text:000000000000001a scanfn
     /tmp/ccw5xF4F.s:75     .text:0000000000000062 checkfn
     /tmp/ccw5xF4F.s:116    .text:000000000000008c errorfn
     /tmp/ccw5xF4F.s:206    .text:0000000000000173 arg_lit0
     /tmp/ccw5xF4F.s:270    .text:00000000000001e9 arg_litn
     /tmp/ccw5xF4F.s:238    .text:00000000000001ae arg_lit1

UNDEFINED SYMBOLS
fprintf
arg_print_option
fputc
malloc
