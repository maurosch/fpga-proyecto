   1              		.file	"arg_date.c"
   2              		.text
   3              	.Ltext0:
   4              		.file 0 "/home/pong/FPGALink/makestuff/libs/libargtable2" "arg_date.c"
   6              	resetfn:
   7              	.LFB0:
   8              		.file 1 "arg_date.c"
   1:arg_date.c    **** /*********************************************************************
   2:arg_date.c    **** This file is part of the argtable2 library.
   3:arg_date.c    **** Copyright (C) 1998-2001,2003-2011 Stewart Heitmann
   4:arg_date.c    **** sheitmann@users.sourceforge.net
   5:arg_date.c    **** 
   6:arg_date.c    **** The argtable2 library is free software; you can redistribute it and/or
   7:arg_date.c    **** modify it under the terms of the GNU Library General Public License as
   8:arg_date.c    **** published by the Free Software Foundation; either version 2 of the
   9:arg_date.c    **** License, or (at your option) any later version.
  10:arg_date.c    **** 
  11:arg_date.c    **** This software is distributed in the hope that it will be useful,
  12:arg_date.c    **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:arg_date.c    **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  14:arg_date.c    **** Library General Public License for more details.
  15:arg_date.c    **** 
  16:arg_date.c    **** You should have received a copy of the GNU Library General Public
  17:arg_date.c    **** License along with this library; if not, write to the Free Software
  18:arg_date.c    **** Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
  19:arg_date.c    **** USA.
  20:arg_date.c    **** **********************************************************************/
  21:arg_date.c    **** /* glibc2 needs this for strptime */
  22:arg_date.c    **** #define _XOPEN_SOURCE 
  23:arg_date.c    **** 
  24:arg_date.c    **** /* SunOS also requires this for strptime */
  25:arg_date.c    **** #define _XOPEN_VERSION 4 
  26:arg_date.c    **** 
  27:arg_date.c    **** /* config.h must be included before anything else */
  28:arg_date.c    **** #ifdef HAVE_CONFIG_H
  29:arg_date.c    **** #include "config.h"
  30:arg_date.c    **** #endif
  31:arg_date.c    **** 
  32:arg_date.c    **** #ifdef HAVE_STDLIB_H
  33:arg_date.c    **** #include <stdlib.h>
  34:arg_date.c    **** #endif
  35:arg_date.c    **** 
  36:arg_date.c    **** #ifdef HAVE_STRINGS_H
  37:arg_date.c    **** #include <strings.h>
  38:arg_date.c    **** #endif
  39:arg_date.c    **** 
  40:arg_date.c    **** #include "argtable2.h"
  41:arg_date.c    **** 
  42:arg_date.c    **** /* local error codes  */
  43:arg_date.c    **** enum {EMINCOUNT=1,EMAXCOUNT,EBADDATE};
  44:arg_date.c    **** 
  45:arg_date.c    **** static void resetfn(struct arg_date *parent)
  46:arg_date.c    ****     {
   9              		.loc 1 46 5
  10              		.cfi_startproc
  11 0000 F30F1EFA 		endbr64
  12 0004 55       		pushq	%rbp
  13              		.cfi_def_cfa_offset 16
  14              		.cfi_offset 6, -16
  15 0005 4889E5   		movq	%rsp, %rbp
  16              		.cfi_def_cfa_register 6
  17 0008 48897DF8 		movq	%rdi, -8(%rbp)
  47:arg_date.c    ****     /*printf("%s:resetfn(%p)\n",__FILE__,parent);*/
  48:arg_date.c    ****     parent->count=0;
  18              		.loc 1 48 18
  19 000c 488B45F8 		movq	-8(%rbp), %rax
  20 0010 C7406800 		movl	$0, 104(%rax)
  20      000000
  49:arg_date.c    ****     }
  21              		.loc 1 49 5
  22 0017 90       		nop
  23 0018 5D       		popq	%rbp
  24              		.cfi_def_cfa 7, 8
  25 0019 C3       		ret
  26              		.cfi_endproc
  27              	.LFE0:
  30              	scanfn:
  31              	.LFB1:
  50:arg_date.c    **** 
  51:arg_date.c    **** static int scanfn(struct arg_date *parent, const char *argval)
  52:arg_date.c    ****     {
  32              		.loc 1 52 5
  33              		.cfi_startproc
  34 001a F30F1EFA 		endbr64
  35 001e 55       		pushq	%rbp
  36              		.cfi_def_cfa_offset 16
  37              		.cfi_offset 6, -16
  38 001f 4889E5   		movq	%rsp, %rbp
  39              		.cfi_def_cfa_register 6
  40 0022 53       		pushq	%rbx
  41 0023 4883EC68 		subq	$104, %rsp
  42              		.cfi_offset 3, -24
  43 0027 48897D98 		movq	%rdi, -104(%rbp)
  44 002b 48897590 		movq	%rsi, -112(%rbp)
  45              		.loc 1 52 5
  46 002f 64488B04 		movq	%fs:40, %rax
  46      25280000 
  46      00
  47 0038 488945E8 		movq	%rax, -24(%rbp)
  48 003c 31C0     		xorl	%eax, %eax
  53:arg_date.c    ****     int errorcode = 0;
  49              		.loc 1 53 9
  50 003e C745A400 		movl	$0, -92(%rbp)
  50      000000
  54:arg_date.c    **** 
  55:arg_date.c    ****     if (parent->count == parent->hdr.maxcount )
  51              		.loc 1 55 15
  52 0045 488B4598 		movq	-104(%rbp), %rax
  53 0049 8B5068   		movl	104(%rax), %edx
  54              		.loc 1 55 37
  55 004c 488B4598 		movq	-104(%rbp), %rax
  56 0050 8B402C   		movl	44(%rax), %eax
  57              		.loc 1 55 8
  58 0053 39C2     		cmpl	%eax, %edx
  59 0055 750C     		jne	.L3
  56:arg_date.c    ****         errorcode = EMAXCOUNT;
  60              		.loc 1 56 19
  61 0057 C745A402 		movl	$2, -92(%rbp)
  61      000000
  62 005e E9150100 		jmp	.L4
  62      00
  63              	.L3:
  57:arg_date.c    ****     else if (!argval)
  64              		.loc 1 57 13
  65 0063 48837D90 		cmpq	$0, -112(%rbp)
  65      00
  66 0068 7516     		jne	.L5
  58:arg_date.c    ****         {
  59:arg_date.c    ****         /* no argument value was given, leave parent->tmval[] unaltered but still count it */
  60:arg_date.c    ****         parent->count++;
  67              		.loc 1 60 15
  68 006a 488B4598 		movq	-104(%rbp), %rax
  69 006e 8B4068   		movl	104(%rax), %eax
  70              		.loc 1 60 22
  71 0071 8D5001   		leal	1(%rax), %edx
  72 0074 488B4598 		movq	-104(%rbp), %rax
  73 0078 895068   		movl	%edx, 104(%rax)
  74 007b E9F80000 		jmp	.L4
  74      00
  75              	.L5:
  76              	.LBB2:
  61:arg_date.c    ****         }
  62:arg_date.c    ****     else 
  63:arg_date.c    ****         {
  64:arg_date.c    ****         const char *pend;
  65:arg_date.c    ****         struct tm tm = parent->tmval[parent->count];
  77              		.loc 1 65 30
  78 0080 488B4598 		movq	-104(%rbp), %rax
  79 0084 488B4870 		movq	112(%rax), %rcx
  80              		.loc 1 65 44
  81 0088 488B4598 		movq	-104(%rbp), %rax
  82 008c 8B4068   		movl	104(%rax), %eax
  83 008f 4863D0   		movslq	%eax, %rdx
  84              		.loc 1 65 37
  85 0092 4889D0   		movq	%rdx, %rax
  86 0095 48C1E003 		salq	$3, %rax
  87 0099 4829D0   		subq	%rdx, %rax
  88 009c 48C1E003 		salq	$3, %rax
  89 00a0 4801C8   		addq	%rcx, %rax
  90              		.loc 1 65 19
  91 00a3 488B08   		movq	(%rax), %rcx
  92 00a6 488B5808 		movq	8(%rax), %rbx
  93 00aa 48894DB0 		movq	%rcx, -80(%rbp)
  94 00ae 48895DB8 		movq	%rbx, -72(%rbp)
  95 00b2 488B4810 		movq	16(%rax), %rcx
  96 00b6 488B5818 		movq	24(%rax), %rbx
  97 00ba 48894DC0 		movq	%rcx, -64(%rbp)
  98 00be 48895DC8 		movq	%rbx, -56(%rbp)
  99 00c2 488B4820 		movq	32(%rax), %rcx
 100 00c6 488B5828 		movq	40(%rax), %rbx
 101 00ca 48894DD0 		movq	%rcx, -48(%rbp)
 102 00ce 48895DD8 		movq	%rbx, -40(%rbp)
 103 00d2 488B4030 		movq	48(%rax), %rax
 104 00d6 488945E0 		movq	%rax, -32(%rbp)
  66:arg_date.c    **** 
  67:arg_date.c    ****         /* parse the given argument value, store result in parent->tmval[] */
  68:arg_date.c    ****         pend = strptime(argval, parent->format, &tm);
 105              		.loc 1 68 16
 106 00da 488B4598 		movq	-104(%rbp), %rax
 107 00de 488B4860 		movq	96(%rax), %rcx
 108 00e2 488D55B0 		leaq	-80(%rbp), %rdx
 109 00e6 488B4590 		movq	-112(%rbp), %rax
 110 00ea 4889CE   		movq	%rcx, %rsi
 111 00ed 4889C7   		movq	%rax, %rdi
 112 00f0 E8000000 		call	strptime@PLT
 112      00
 113 00f5 488945A8 		movq	%rax, -88(%rbp)
  69:arg_date.c    ****         if (pend && pend[0]=='\0')
 114              		.loc 1 69 12
 115 00f9 48837DA8 		cmpq	$0, -88(%rbp)
 115      00
 116 00fe 7471     		je	.L6
 117              		.loc 1 69 25 discriminator 1
 118 0100 488B45A8 		movq	-88(%rbp), %rax
 119 0104 0FB600   		movzbl	(%rax), %eax
 120              		.loc 1 69 18 discriminator 1
 121 0107 84C0     		testb	%al, %al
 122 0109 7566     		jne	.L6
  70:arg_date.c    ****             parent->tmval[parent->count++] = tm;
 123              		.loc 1 70 19
 124 010b 488B4598 		movq	-104(%rbp), %rax
 125 010f 488B7070 		movq	112(%rax), %rsi
 126              		.loc 1 70 33
 127 0113 488B4598 		movq	-104(%rbp), %rax
 128 0117 8B4068   		movl	104(%rax), %eax
 129              		.loc 1 70 40
 130 011a 8D4801   		leal	1(%rax), %ecx
 131 011d 488B5598 		movq	-104(%rbp), %rdx
 132 0121 894A68   		movl	%ecx, 104(%rdx)
 133 0124 4863D0   		movslq	%eax, %rdx
 134              		.loc 1 70 26
 135 0127 4889D0   		movq	%rdx, %rax
 136 012a 48C1E003 		salq	$3, %rax
 137 012e 4829D0   		subq	%rdx, %rax
 138 0131 48C1E003 		salq	$3, %rax
 139 0135 4801F0   		addq	%rsi, %rax
 140              		.loc 1 70 44
 141 0138 488B4DB0 		movq	-80(%rbp), %rcx
 142 013c 488B5DB8 		movq	-72(%rbp), %rbx
 143 0140 488908   		movq	%rcx, (%rax)
 144 0143 48895808 		movq	%rbx, 8(%rax)
 145 0147 488B4DC0 		movq	-64(%rbp), %rcx
 146 014b 488B5DC8 		movq	-56(%rbp), %rbx
 147 014f 48894810 		movq	%rcx, 16(%rax)
 148 0153 48895818 		movq	%rbx, 24(%rax)
 149 0157 488B4DD0 		movq	-48(%rbp), %rcx
 150 015b 488B5DD8 		movq	-40(%rbp), %rbx
 151 015f 48894820 		movq	%rcx, 32(%rax)
 152 0163 48895828 		movq	%rbx, 40(%rax)
 153 0167 488B55E0 		movq	-32(%rbp), %rdx
 154 016b 48895030 		movq	%rdx, 48(%rax)
 155 016f EB07     		jmp	.L4
 156              	.L6:
  71:arg_date.c    ****         else
  72:arg_date.c    ****             errorcode = EBADDATE;
 157              		.loc 1 72 23
 158 0171 C745A403 		movl	$3, -92(%rbp)
 158      000000
 159              	.L4:
 160              	.LBE2:
  73:arg_date.c    ****         }
  74:arg_date.c    **** 
  75:arg_date.c    ****     /*printf("%s:scanfn(%p) returns %d\n",__FILE__,parent,errorcode);*/
  76:arg_date.c    ****     return errorcode;
 161              		.loc 1 76 12
 162 0178 8B45A4   		movl	-92(%rbp), %eax
  77:arg_date.c    ****     }
 163              		.loc 1 77 5
 164 017b 488B55E8 		movq	-24(%rbp), %rdx
 165 017f 64482B14 		subq	%fs:40, %rdx
 165      25280000 
 165      00
 166 0188 7405     		je	.L9
 167 018a E8000000 		call	__stack_chk_fail@PLT
 167      00
 168              	.L9:
 169 018f 488B5DF8 		movq	-8(%rbp), %rbx
 170 0193 C9       		leave
 171              		.cfi_def_cfa 7, 8
 172 0194 C3       		ret
 173              		.cfi_endproc
 174              	.LFE1:
 177              	checkfn:
 178              	.LFB2:
  78:arg_date.c    **** 
  79:arg_date.c    **** static int checkfn(struct arg_date *parent)
  80:arg_date.c    ****     {
 179              		.loc 1 80 5
 180              		.cfi_startproc
 181 0195 F30F1EFA 		endbr64
 182 0199 55       		pushq	%rbp
 183              		.cfi_def_cfa_offset 16
 184              		.cfi_offset 6, -16
 185 019a 4889E5   		movq	%rsp, %rbp
 186              		.cfi_def_cfa_register 6
 187 019d 48897DE8 		movq	%rdi, -24(%rbp)
  81:arg_date.c    ****     int errorcode = (parent->count < parent->hdr.mincount) ? EMINCOUNT : 0;
 188              		.loc 1 81 28
 189 01a1 488B45E8 		movq	-24(%rbp), %rax
 190 01a5 8B5068   		movl	104(%rax), %edx
 191              		.loc 1 81 49
 192 01a8 488B45E8 		movq	-24(%rbp), %rax
 193 01ac 8B4028   		movl	40(%rax), %eax
 194              		.loc 1 81 72
 195 01af 39C2     		cmpl	%eax, %edx
 196 01b1 0F9CC0   		setl	%al
 197              		.loc 1 81 9
 198 01b4 0FB6C0   		movzbl	%al, %eax
 199 01b7 8945FC   		movl	%eax, -4(%rbp)
  82:arg_date.c    ****      
  83:arg_date.c    ****     /*printf("%s:checkfn(%p) returns %d\n",__FILE__,parent,errorcode);*/
  84:arg_date.c    ****     return errorcode;
 200              		.loc 1 84 12
 201 01ba 8B45FC   		movl	-4(%rbp), %eax
  85:arg_date.c    ****     }
 202              		.loc 1 85 5
 203 01bd 5D       		popq	%rbp
 204              		.cfi_def_cfa 7, 8
 205 01be C3       		ret
 206              		.cfi_endproc
 207              	.LFE2:
 209              		.section	.rodata
 210              	.LC0:
 211 0000 00       		.string	""
 212              	.LC1:
 213 0001 25733A20 		.string	"%s: "
 213      00
 214              	.LC2:
 215 0006 6D697373 		.string	"missing option "
 215      696E6720 
 215      6F707469 
 215      6F6E2000 
 216              	.LC3:
 217 0016 0A00     		.string	"\n"
 218              	.LC4:
 219 0018 65786365 		.string	"excess option "
 219      7373206F 
 219      7074696F 
 219      6E2000
 220 0027 00       		.align 8
 221              	.LC5:
 222 0028 696C6C65 		.string	"illegal timestamp format \"%s\"\n"
 222      67616C20 
 222      74696D65 
 222      7374616D 
 222      7020666F 
 223              	.LC6:
 224 0047 25462025 		.string	"%F %H:%M:%S"
 224      483A254D 
 224      3A255300 
 225              	.LC7:
 226 0053 31393939 		.string	"1999-12-31 23:59:59"
 226      2D31322D 
 226      33312032 
 226      333A3539 
 226      3A353900 
 227              	.LC8:
 228 0067 636F7272 		.string	"correct format is \"%s\"\n"
 228      65637420 
 228      666F726D 
 228      61742069 
 228      73202225 
 229              		.text
 231              	errorfn:
 232              	.LFB3:
  86:arg_date.c    **** 
  87:arg_date.c    **** static void errorfn(struct arg_date *parent, FILE *fp, int errorcode, const char *argval, const cha
  88:arg_date.c    ****     {
 233              		.loc 1 88 5
 234              		.cfi_startproc
 235 01bf F30F1EFA 		endbr64
 236 01c3 55       		pushq	%rbp
 237              		.cfi_def_cfa_offset 16
 238              		.cfi_offset 6, -16
 239 01c4 4889E5   		movq	%rsp, %rbp
 240              		.cfi_def_cfa_register 6
 241 01c7 4881EC60 		subq	$352, %rsp
 241      010000
 242 01ce 4889BDC8 		movq	%rdi, -312(%rbp)
 242      FEFFFF
 243 01d5 4889B5C0 		movq	%rsi, -320(%rbp)
 243      FEFFFF
 244 01dc 8995BCFE 		movl	%edx, -324(%rbp)
 244      FFFF
 245 01e2 48898DB0 		movq	%rcx, -336(%rbp)
 245      FEFFFF
 246 01e9 4C8985A8 		movq	%r8, -344(%rbp)
 246      FEFFFF
 247              		.loc 1 88 5
 248 01f0 64488B04 		movq	%fs:40, %rax
 248      25280000 
 248      00
 249 01f9 488945F8 		movq	%rax, -8(%rbp)
 250 01fd 31C0     		xorl	%eax, %eax
  89:arg_date.c    ****     const char *shortopts = parent->hdr.shortopts;
 251              		.loc 1 89 17
 252 01ff 488B85C8 		movq	-312(%rbp), %rax
 252      FEFFFF
 253 0206 488B4008 		movq	8(%rax), %rax
 254 020a 488985D8 		movq	%rax, -296(%rbp)
 254      FEFFFF
  90:arg_date.c    ****     const char *longopts  = parent->hdr.longopts;
 255              		.loc 1 90 17
 256 0211 488B85C8 		movq	-312(%rbp), %rax
 256      FEFFFF
 257 0218 488B4010 		movq	16(%rax), %rax
 258 021c 488985E0 		movq	%rax, -288(%rbp)
 258      FEFFFF
  91:arg_date.c    ****     const char *datatype  = parent->hdr.datatype;
 259              		.loc 1 91 17
 260 0223 488B85C8 		movq	-312(%rbp), %rax
 260      FEFFFF
 261 022a 488B4018 		movq	24(%rax), %rax
 262 022e 488985E8 		movq	%rax, -280(%rbp)
 262      FEFFFF
  92:arg_date.c    **** 
  93:arg_date.c    ****     /* make argval NULL safe */
  94:arg_date.c    ****     argval = argval ? argval : "";
 263              		.loc 1 94 30
 264 0235 4883BDB0 		cmpq	$0, -336(%rbp)
 264      FEFFFF00 
 265 023d 7409     		je	.L13
 266              		.loc 1 94 30 is_stmt 0 discriminator 1
 267 023f 488B85B0 		movq	-336(%rbp), %rax
 267      FEFFFF
 268 0246 EB07     		jmp	.L14
 269              	.L13:
 270              		.loc 1 94 30 discriminator 2
 271 0248 488D0500 		leaq	.LC0(%rip), %rax
 271      000000
 272              	.L14:
 273              		.loc 1 94 12 is_stmt 1 discriminator 4
 274 024f 488985B0 		movq	%rax, -336(%rbp)
 274      FEFFFF
  95:arg_date.c    **** 
  96:arg_date.c    ****     fprintf(fp,"%s: ",progname);
 275              		.loc 1 96 5 discriminator 4
 276 0256 488B95A8 		movq	-344(%rbp), %rdx
 276      FEFFFF
 277 025d 488B85C0 		movq	-320(%rbp), %rax
 277      FEFFFF
 278 0264 488D0D00 		leaq	.LC1(%rip), %rcx
 278      000000
 279 026b 4889CE   		movq	%rcx, %rsi
 280 026e 4889C7   		movq	%rax, %rdi
 281 0271 B8000000 		movl	$0, %eax
 281      00
 282 0276 E8000000 		call	fprintf@PLT
 282      00
  97:arg_date.c    ****     switch(errorcode)
 283              		.loc 1 97 5 discriminator 4
 284 027b 83BDBCFE 		cmpl	$3, -324(%rbp)
 284      FFFF03
 285 0282 0F84CA00 		je	.L15
 285      0000
 286              		.loc 1 97 5 is_stmt 0
 287 0288 83BDBCFE 		cmpl	$3, -324(%rbp)
 287      FFFF03
 288 028f 0F8F5E01 		jg	.L20
 288      0000
 289 0295 83BDBCFE 		cmpl	$1, -324(%rbp)
 289      FFFF01
 290 029c 740E     		je	.L17
 291 029e 83BDBCFE 		cmpl	$2, -324(%rbp)
 291      FFFF02
 292 02a5 7458     		je	.L18
  98:arg_date.c    ****         {
  99:arg_date.c    ****         case EMINCOUNT:
 100:arg_date.c    ****             fputs("missing option ",fp);
 101:arg_date.c    ****             arg_print_option(fp,shortopts,longopts,datatype,"\n");
 102:arg_date.c    ****             break;
 103:arg_date.c    **** 
 104:arg_date.c    ****         case EMAXCOUNT:
 105:arg_date.c    ****             fputs("excess option ",fp);
 106:arg_date.c    ****             arg_print_option(fp,shortopts,longopts,argval,"\n");
 107:arg_date.c    ****             break;
 108:arg_date.c    **** 
 109:arg_date.c    ****         case EBADDATE:
 110:arg_date.c    ****             {
 111:arg_date.c    ****             struct tm tm;
 112:arg_date.c    ****             char buff[200];           
 113:arg_date.c    **** 
 114:arg_date.c    ****             fprintf(fp,"illegal timestamp format \"%s\"\n",argval);
 115:arg_date.c    ****             bzero(&tm,sizeof(tm));
 116:arg_date.c    ****             strptime("1999-12-31 23:59:59","%F %H:%M:%S",&tm);
 117:arg_date.c    ****             strftime(buff, sizeof(buff), parent->format, &tm);
 118:arg_date.c    ****             printf("correct format is \"%s\"\n", buff);                        
 119:arg_date.c    ****             break;
 120:arg_date.c    ****             }
 121:arg_date.c    ****         }
 122:arg_date.c    ****     }
 293              		.loc 1 122 5 is_stmt 1
 294 02a7 E9470100 		jmp	.L20
 294      00
 295              	.L17:
 100:arg_date.c    ****             arg_print_option(fp,shortopts,longopts,datatype,"\n");
 296              		.loc 1 100 13
 297 02ac 488B85C0 		movq	-320(%rbp), %rax
 297      FEFFFF
 298 02b3 4889C1   		movq	%rax, %rcx
 299 02b6 BA0F0000 		movl	$15, %edx
 299      00
 300 02bb BE010000 		movl	$1, %esi
 300      00
 301 02c0 488D0500 		leaq	.LC2(%rip), %rax
 301      000000
 302 02c7 4889C7   		movq	%rax, %rdi
 303 02ca E8000000 		call	fwrite@PLT
 303      00
 101:arg_date.c    ****             break;
 304              		.loc 1 101 13
 305 02cf 488B8DE8 		movq	-280(%rbp), %rcx
 305      FEFFFF
 306 02d6 488B95E0 		movq	-288(%rbp), %rdx
 306      FEFFFF
 307 02dd 488BB5D8 		movq	-296(%rbp), %rsi
 307      FEFFFF
 308 02e4 488B85C0 		movq	-320(%rbp), %rax
 308      FEFFFF
 309 02eb 4C8D0500 		leaq	.LC3(%rip), %r8
 309      000000
 310 02f2 4889C7   		movq	%rax, %rdi
 311 02f5 E8000000 		call	arg_print_option@PLT
 311      00
 102:arg_date.c    **** 
 312              		.loc 1 102 13
 313 02fa E9F40000 		jmp	.L16
 313      00
 314              	.L18:
 105:arg_date.c    ****             arg_print_option(fp,shortopts,longopts,argval,"\n");
 315              		.loc 1 105 13
 316 02ff 488B85C0 		movq	-320(%rbp), %rax
 316      FEFFFF
 317 0306 4889C1   		movq	%rax, %rcx
 318 0309 BA0E0000 		movl	$14, %edx
 318      00
 319 030e BE010000 		movl	$1, %esi
 319      00
 320 0313 488D0500 		leaq	.LC4(%rip), %rax
 320      000000
 321 031a 4889C7   		movq	%rax, %rdi
 322 031d E8000000 		call	fwrite@PLT
 322      00
 106:arg_date.c    ****             break;
 323              		.loc 1 106 13
 324 0322 488B8DB0 		movq	-336(%rbp), %rcx
 324      FEFFFF
 325 0329 488B95E0 		movq	-288(%rbp), %rdx
 325      FEFFFF
 326 0330 488BB5D8 		movq	-296(%rbp), %rsi
 326      FEFFFF
 327 0337 488B85C0 		movq	-320(%rbp), %rax
 327      FEFFFF
 328 033e 4C8D0500 		leaq	.LC3(%rip), %r8
 328      000000
 329 0345 4889C7   		movq	%rax, %rdi
 330 0348 E8000000 		call	arg_print_option@PLT
 330      00
 107:arg_date.c    **** 
 331              		.loc 1 107 13
 332 034d E9A10000 		jmp	.L16
 332      00
 333              	.L15:
 334              	.LBB3:
 114:arg_date.c    ****             bzero(&tm,sizeof(tm));
 335              		.loc 1 114 13
 336 0352 488B95B0 		movq	-336(%rbp), %rdx
 336      FEFFFF
 337 0359 488B85C0 		movq	-320(%rbp), %rax
 337      FEFFFF
 338 0360 488D0D00 		leaq	.LC5(%rip), %rcx
 338      000000
 339 0367 4889CE   		movq	%rcx, %rsi
 340 036a 4889C7   		movq	%rax, %rdi
 341 036d B8000000 		movl	$0, %eax
 341      00
 342 0372 E8000000 		call	fprintf@PLT
 342      00
 115:arg_date.c    ****             strptime("1999-12-31 23:59:59","%F %H:%M:%S",&tm);
 343              		.loc 1 115 13
 344 0377 488D85F0 		leaq	-272(%rbp), %rax
 344      FEFFFF
 345 037e BE380000 		movl	$56, %esi
 345      00
 346 0383 4889C7   		movq	%rax, %rdi
 347 0386 E8000000 		call	bzero@PLT
 347      00
 116:arg_date.c    ****             strftime(buff, sizeof(buff), parent->format, &tm);
 348              		.loc 1 116 13
 349 038b 488D85F0 		leaq	-272(%rbp), %rax
 349      FEFFFF
 350 0392 4889C2   		movq	%rax, %rdx
 351 0395 488D0500 		leaq	.LC6(%rip), %rax
 351      000000
 352 039c 4889C6   		movq	%rax, %rsi
 353 039f 488D0500 		leaq	.LC7(%rip), %rax
 353      000000
 354 03a6 4889C7   		movq	%rax, %rdi
 355 03a9 E8000000 		call	strptime@PLT
 355      00
 117:arg_date.c    ****             printf("correct format is \"%s\"\n", buff);                        
 356              		.loc 1 117 13
 357 03ae 488B85C8 		movq	-312(%rbp), %rax
 357      FEFFFF
 358 03b5 488B5060 		movq	96(%rax), %rdx
 359 03b9 488D8DF0 		leaq	-272(%rbp), %rcx
 359      FEFFFF
 360 03c0 488D8530 		leaq	-208(%rbp), %rax
 360      FFFFFF
 361 03c7 BEC80000 		movl	$200, %esi
 361      00
 362 03cc 4889C7   		movq	%rax, %rdi
 363 03cf E8000000 		call	strftime@PLT
 363      00
 118:arg_date.c    ****             break;
 364              		.loc 1 118 13
 365 03d4 488D8530 		leaq	-208(%rbp), %rax
 365      FFFFFF
 366 03db 4889C6   		movq	%rax, %rsi
 367 03de 488D0500 		leaq	.LC8(%rip), %rax
 367      000000
 368 03e5 4889C7   		movq	%rax, %rdi
 369 03e8 B8000000 		movl	$0, %eax
 369      00
 370 03ed E8000000 		call	printf@PLT
 370      00
 119:arg_date.c    ****             }
 371              		.loc 1 119 13
 372 03f2 90       		nop
 373              	.L16:
 374              	.L20:
 375              	.LBE3:
 376              		.loc 1 122 5
 377 03f3 90       		nop
 378 03f4 488B45F8 		movq	-8(%rbp), %rax
 379 03f8 64482B04 		subq	%fs:40, %rax
 379      25280000 
 379      00
 380 0401 7405     		je	.L19
 381 0403 E8000000 		call	__stack_chk_fail@PLT
 381      00
 382              	.L19:
 383 0408 C9       		leave
 384              		.cfi_def_cfa 7, 8
 385 0409 C3       		ret
 386              		.cfi_endproc
 387              	.LFE3:
 389              		.globl	arg_date0
 391              	arg_date0:
 392              	.LFB4:
 123:arg_date.c    ****  
 124:arg_date.c    **** 
 125:arg_date.c    **** struct arg_date* arg_date0(const char* shortopts,
 126:arg_date.c    ****                            const char* longopts,
 127:arg_date.c    ****                            const char* format,
 128:arg_date.c    ****                            const char *datatype,
 129:arg_date.c    ****                            const char *glossary)
 130:arg_date.c    ****     {
 393              		.loc 1 130 5
 394              		.cfi_startproc
 395 040a F30F1EFA 		endbr64
 396 040e 55       		pushq	%rbp
 397              		.cfi_def_cfa_offset 16
 398              		.cfi_offset 6, -16
 399 040f 4889E5   		movq	%rsp, %rbp
 400              		.cfi_def_cfa_register 6
 401 0412 4883EC30 		subq	$48, %rsp
 402 0416 48897DF8 		movq	%rdi, -8(%rbp)
 403 041a 488975F0 		movq	%rsi, -16(%rbp)
 404 041e 488955E8 		movq	%rdx, -24(%rbp)
 405 0422 48894DE0 		movq	%rcx, -32(%rbp)
 406 0426 4C8945D8 		movq	%r8, -40(%rbp)
 131:arg_date.c    ****     return arg_daten(shortopts,longopts,format,datatype,0,1,glossary);
 407              		.loc 1 131 12
 408 042a 488B4DE0 		movq	-32(%rbp), %rcx
 409 042e 488B55E8 		movq	-24(%rbp), %rdx
 410 0432 488B75F0 		movq	-16(%rbp), %rsi
 411 0436 488B45F8 		movq	-8(%rbp), %rax
 412 043a 4883EC08 		subq	$8, %rsp
 413 043e FF75D8   		pushq	-40(%rbp)
 414 0441 41B90100 		movl	$1, %r9d
 414      0000
 415 0447 41B80000 		movl	$0, %r8d
 415      0000
 416 044d 4889C7   		movq	%rax, %rdi
 417 0450 E8000000 		call	arg_daten@PLT
 417      00
 418 0455 4883C410 		addq	$16, %rsp
 132:arg_date.c    ****     }
 419              		.loc 1 132 5
 420 0459 C9       		leave
 421              		.cfi_def_cfa 7, 8
 422 045a C3       		ret
 423              		.cfi_endproc
 424              	.LFE4:
 426              		.globl	arg_date1
 428              	arg_date1:
 429              	.LFB5:
 133:arg_date.c    **** 
 134:arg_date.c    **** struct arg_date* arg_date1(const char* shortopts,
 135:arg_date.c    ****                            const char* longopts,
 136:arg_date.c    ****                            const char* format,
 137:arg_date.c    ****                            const char *datatype,
 138:arg_date.c    ****                            const char *glossary)
 139:arg_date.c    ****     {
 430              		.loc 1 139 5
 431              		.cfi_startproc
 432 045b F30F1EFA 		endbr64
 433 045f 55       		pushq	%rbp
 434              		.cfi_def_cfa_offset 16
 435              		.cfi_offset 6, -16
 436 0460 4889E5   		movq	%rsp, %rbp
 437              		.cfi_def_cfa_register 6
 438 0463 4883EC30 		subq	$48, %rsp
 439 0467 48897DF8 		movq	%rdi, -8(%rbp)
 440 046b 488975F0 		movq	%rsi, -16(%rbp)
 441 046f 488955E8 		movq	%rdx, -24(%rbp)
 442 0473 48894DE0 		movq	%rcx, -32(%rbp)
 443 0477 4C8945D8 		movq	%r8, -40(%rbp)
 140:arg_date.c    ****     return arg_daten(shortopts,longopts,format,datatype,1,1,glossary);
 444              		.loc 1 140 12
 445 047b 488B4DE0 		movq	-32(%rbp), %rcx
 446 047f 488B55E8 		movq	-24(%rbp), %rdx
 447 0483 488B75F0 		movq	-16(%rbp), %rsi
 448 0487 488B45F8 		movq	-8(%rbp), %rax
 449 048b 4883EC08 		subq	$8, %rsp
 450 048f FF75D8   		pushq	-40(%rbp)
 451 0492 41B90100 		movl	$1, %r9d
 451      0000
 452 0498 41B80100 		movl	$1, %r8d
 452      0000
 453 049e 4889C7   		movq	%rax, %rdi
 454 04a1 E8000000 		call	arg_daten@PLT
 454      00
 455 04a6 4883C410 		addq	$16, %rsp
 141:arg_date.c    ****     }
 456              		.loc 1 141 5
 457 04aa C9       		leave
 458              		.cfi_def_cfa 7, 8
 459 04ab C3       		ret
 460              		.cfi_endproc
 461              	.LFE5:
 463              		.section	.rodata
 464              	.LC9:
 465 007f 257800   		.string	"%x"
 466              		.text
 467              		.globl	arg_daten
 469              	arg_daten:
 470              	.LFB6:
 142:arg_date.c    **** 
 143:arg_date.c    **** 
 144:arg_date.c    **** struct arg_date* arg_daten(const char* shortopts,
 145:arg_date.c    ****                            const char* longopts,
 146:arg_date.c    ****                            const char* format,
 147:arg_date.c    ****                            const char *datatype,
 148:arg_date.c    ****                            int mincount,
 149:arg_date.c    ****                            int maxcount,
 150:arg_date.c    ****                            const char *glossary)
 151:arg_date.c    ****     {
 471              		.loc 1 151 5
 472              		.cfi_startproc
 473 04ac F30F1EFA 		endbr64
 474 04b0 55       		pushq	%rbp
 475              		.cfi_def_cfa_offset 16
 476              		.cfi_offset 6, -16
 477 04b1 4889E5   		movq	%rsp, %rbp
 478              		.cfi_def_cfa_register 6
 479 04b4 4883EC40 		subq	$64, %rsp
 480 04b8 48897DE8 		movq	%rdi, -24(%rbp)
 481 04bc 488975E0 		movq	%rsi, -32(%rbp)
 482 04c0 488955D8 		movq	%rdx, -40(%rbp)
 483 04c4 48894DD0 		movq	%rcx, -48(%rbp)
 484 04c8 448945CC 		movl	%r8d, -52(%rbp)
 485 04cc 44894DC8 		movl	%r9d, -56(%rbp)
 152:arg_date.c    ****     size_t nbytes;
 153:arg_date.c    ****     struct arg_date *result;
 154:arg_date.c    **** 
 155:arg_date.c    **** 	/* foolproof things by ensuring maxcount is not less than mincount */
 156:arg_date.c    **** 	maxcount = (maxcount<mincount) ? mincount : maxcount;
 486              		.loc 1 156 11
 487 04d0 8B55C8   		movl	-56(%rbp), %edx
 488 04d3 8B45CC   		movl	-52(%rbp), %eax
 489 04d6 39C2     		cmpl	%eax, %edx
 490 04d8 0F4DC2   		cmovge	%edx, %eax
 491 04db 8945C8   		movl	%eax, -56(%rbp)
 157:arg_date.c    **** 
 158:arg_date.c    ****     /* default time format is the national date format for the locale */
 159:arg_date.c    ****     if (!format)
 492              		.loc 1 159 8
 493 04de 48837DD8 		cmpq	$0, -40(%rbp)
 493      00
 494 04e3 750B     		jne	.L26
 160:arg_date.c    ****         format = "%x";
 495              		.loc 1 160 16
 496 04e5 488D0500 		leaq	.LC9(%rip), %rax
 496      000000
 497 04ec 488945D8 		movq	%rax, -40(%rbp)
 498              	.L26:
 161:arg_date.c    **** 
 162:arg_date.c    ****     nbytes = sizeof(struct arg_date)         /* storage for struct arg_date */
 163:arg_date.c    ****            + maxcount*sizeof(struct tm);     /* storage for tmval[maxcount] array */
 499              		.loc 1 163 22
 500 04f0 8B45C8   		movl	-56(%rbp), %eax
 501 04f3 4863D0   		movslq	%eax, %rdx
 502 04f6 4889D0   		movq	%rdx, %rax
 503 04f9 48C1E003 		salq	$3, %rax
 504 04fd 4829D0   		subq	%rdx, %rax
 505 0500 48C1E003 		salq	$3, %rax
 162:arg_date.c    ****            + maxcount*sizeof(struct tm);     /* storage for tmval[maxcount] array */
 506              		.loc 1 162 12
 507 0504 4883C078 		addq	$120, %rax
 508 0508 488945F0 		movq	%rax, -16(%rbp)
 164:arg_date.c    **** 
 165:arg_date.c    ****     /* allocate storage for the arg_date struct + tmval[] array.    */
 166:arg_date.c    ****     /* we use calloc because we want the tmval[] array zero filled. */
 167:arg_date.c    ****     result = (struct arg_date*)calloc(1,nbytes);
 509              		.loc 1 167 32
 510 050c 488B45F0 		movq	-16(%rbp), %rax
 511 0510 4889C6   		movq	%rax, %rsi
 512 0513 BF010000 		movl	$1, %edi
 512      00
 513 0518 E8000000 		call	calloc@PLT
 513      00
 514 051d 488945F8 		movq	%rax, -8(%rbp)
 168:arg_date.c    ****     if (result)
 515              		.loc 1 168 8
 516 0521 48837DF8 		cmpq	$0, -8(%rbp)
 516      00
 517 0526 0F84C700 		je	.L27
 517      0000
 169:arg_date.c    ****         {
 170:arg_date.c    ****         /* init the arg_hdr struct */
 171:arg_date.c    ****         result->hdr.flag      = ARG_HASVALUE;
 518              		.loc 1 171 31
 519 052c 488B45F8 		movq	-8(%rbp), %rax
 520 0530 C60002   		movb	$2, (%rax)
 172:arg_date.c    ****         result->hdr.shortopts = shortopts;
 521              		.loc 1 172 31
 522 0533 488B45F8 		movq	-8(%rbp), %rax
 523 0537 488B55E8 		movq	-24(%rbp), %rdx
 524 053b 48895008 		movq	%rdx, 8(%rax)
 173:arg_date.c    ****         result->hdr.longopts  = longopts;
 525              		.loc 1 173 31
 526 053f 488B45F8 		movq	-8(%rbp), %rax
 527 0543 488B55E0 		movq	-32(%rbp), %rdx
 528 0547 48895010 		movq	%rdx, 16(%rax)
 174:arg_date.c    ****         result->hdr.datatype  = datatype ? datatype : format;
 529              		.loc 1 174 53
 530 054b 48837DD0 		cmpq	$0, -48(%rbp)
 530      00
 531 0550 7406     		je	.L28
 532              		.loc 1 174 53 is_stmt 0 discriminator 1
 533 0552 488B45D0 		movq	-48(%rbp), %rax
 534 0556 EB04     		jmp	.L29
 535              	.L28:
 536              		.loc 1 174 53 discriminator 2
 537 0558 488B45D8 		movq	-40(%rbp), %rax
 538              	.L29:
 539              		.loc 1 174 31 is_stmt 1 discriminator 4
 540 055c 488B55F8 		movq	-8(%rbp), %rdx
 541 0560 48894218 		movq	%rax, 24(%rdx)
 175:arg_date.c    ****         result->hdr.glossary  = glossary;
 542              		.loc 1 175 31 discriminator 4
 543 0564 488B45F8 		movq	-8(%rbp), %rax
 544 0568 488B5510 		movq	16(%rbp), %rdx
 545 056c 48895020 		movq	%rdx, 32(%rax)
 176:arg_date.c    ****         result->hdr.mincount  = mincount;
 546              		.loc 1 176 31 discriminator 4
 547 0570 488B45F8 		movq	-8(%rbp), %rax
 548 0574 8B55CC   		movl	-52(%rbp), %edx
 549 0577 895028   		movl	%edx, 40(%rax)
 177:arg_date.c    ****         result->hdr.maxcount  = maxcount;
 550              		.loc 1 177 31 discriminator 4
 551 057a 488B45F8 		movq	-8(%rbp), %rax
 552 057e 8B55C8   		movl	-56(%rbp), %edx
 553 0581 89502C   		movl	%edx, 44(%rax)
 178:arg_date.c    ****         result->hdr.parent    = result;
 554              		.loc 1 178 31 discriminator 4
 555 0584 488B45F8 		movq	-8(%rbp), %rax
 556 0588 488B55F8 		movq	-8(%rbp), %rdx
 557 058c 48895030 		movq	%rdx, 48(%rax)
 179:arg_date.c    ****         result->hdr.resetfn   = (arg_resetfn*)resetfn;
 558              		.loc 1 179 31 discriminator 4
 559 0590 488B45F8 		movq	-8(%rbp), %rax
 560 0594 488D1565 		leaq	resetfn(%rip), %rdx
 560      FAFFFF
 561 059b 48895038 		movq	%rdx, 56(%rax)
 180:arg_date.c    ****         result->hdr.scanfn    = (arg_scanfn*)scanfn;
 562              		.loc 1 180 31 discriminator 4
 563 059f 488B45F8 		movq	-8(%rbp), %rax
 564 05a3 488D1570 		leaq	scanfn(%rip), %rdx
 564      FAFFFF
 565 05aa 48895040 		movq	%rdx, 64(%rax)
 181:arg_date.c    ****         result->hdr.checkfn   = (arg_checkfn*)checkfn;
 566              		.loc 1 181 31 discriminator 4
 567 05ae 488B45F8 		movq	-8(%rbp), %rax
 568 05b2 488D15DC 		leaq	checkfn(%rip), %rdx
 568      FBFFFF
 569 05b9 48895048 		movq	%rdx, 72(%rax)
 182:arg_date.c    ****         result->hdr.errorfn   = (arg_errorfn*)errorfn;
 570              		.loc 1 182 31 discriminator 4
 571 05bd 488B45F8 		movq	-8(%rbp), %rax
 572 05c1 488D15F7 		leaq	errorfn(%rip), %rdx
 572      FBFFFF
 573 05c8 48895050 		movq	%rdx, 80(%rax)
 183:arg_date.c    **** 
 184:arg_date.c    ****         /* store the tmval[maxcount] array immediately after the arg_date struct */
 185:arg_date.c    ****         result->tmval  = (struct tm*)(result+1);
 574              		.loc 1 185 45 discriminator 4
 575 05cc 488B45F8 		movq	-8(%rbp), %rax
 576 05d0 488D5078 		leaq	120(%rax), %rdx
 577              		.loc 1 185 24 discriminator 4
 578 05d4 488B45F8 		movq	-8(%rbp), %rax
 579 05d8 48895070 		movq	%rdx, 112(%rax)
 186:arg_date.c    **** 
 187:arg_date.c    ****         /* init the remaining arg_date member variables */
 188:arg_date.c    ****         result->count = 0;
 580              		.loc 1 188 23 discriminator 4
 581 05dc 488B45F8 		movq	-8(%rbp), %rax
 582 05e0 C7406800 		movl	$0, 104(%rax)
 582      000000
 189:arg_date.c    ****         result->format = format;
 583              		.loc 1 189 24 discriminator 4
 584 05e7 488B45F8 		movq	-8(%rbp), %rax
 585 05eb 488B55D8 		movq	-40(%rbp), %rdx
 586 05ef 48895060 		movq	%rdx, 96(%rax)
 587              	.L27:
 190:arg_date.c    ****         }
 191:arg_date.c    **** 
 192:arg_date.c    ****     /*printf("arg_daten() returns %p\n",result);*/
 193:arg_date.c    ****     return result;
 588              		.loc 1 193 12
 589 05f3 488B45F8 		movq	-8(%rbp), %rax
 194:arg_date.c    ****     }
 590              		.loc 1 194 5
 591 05f7 C9       		leave
 592              		.cfi_def_cfa 7, 8
 593 05f8 C3       		ret
 594              		.cfi_endproc
 595              	.LFE6:
 597              	.Letext0:
 598              		.file 2 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h"
 599              		.file 3 "/usr/include/x86_64-linux-gnu/bits/types.h"
 600              		.file 4 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h"
 601              		.file 5 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h"
 602              		.file 6 "/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h"
 603              		.file 7 "argtable2.h"
 604              		.file 8 "/usr/include/stdlib.h"
 605              		.file 9 "/usr/include/stdio.h"
 606              		.file 10 "/usr/include/time.h"
 607              		.file 11 "/usr/include/strings.h"
 2551              		.section	.note.gnu.property,"a"
 2552              		.align 8
 2553 0000 04000000 		.long	1f - 0f
 2554 0004 10000000 		.long	4f - 1f
 2555 0008 05000000 		.long	5
 2556              	0:
 2557 000c 474E5500 		.string	"GNU"
 2558              	1:
 2559              		.align 8
 2560 0010 020000C0 		.long	0xc0000002
 2561 0014 04000000 		.long	3f - 2f
 2562              	2:
 2563 0018 03000000 		.long	0x3
 2564              	3:
 2565 001c 00000000 		.align 8
 2566              	4:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 arg_date.c
     /tmp/cctp8Pa6.s:6      .text:0000000000000000 resetfn
     /tmp/cctp8Pa6.s:30     .text:000000000000001a scanfn
     /tmp/cctp8Pa6.s:177    .text:0000000000000195 checkfn
     /tmp/cctp8Pa6.s:231    .text:00000000000001bf errorfn
     /tmp/cctp8Pa6.s:391    .text:000000000000040a arg_date0
     /tmp/cctp8Pa6.s:469    .text:00000000000004ac arg_daten
     /tmp/cctp8Pa6.s:428    .text:000000000000045b arg_date1

UNDEFINED SYMBOLS
strptime
__stack_chk_fail
fprintf
fwrite
arg_print_option
bzero
strftime
printf
calloc
