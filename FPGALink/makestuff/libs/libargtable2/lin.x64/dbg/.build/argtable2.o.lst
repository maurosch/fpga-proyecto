   1              		.file	"argtable2.c"
   2              		.text
   3              	.Ltext0:
   4              		.file 0 "/home/pong/FPGALink/makestuff/libs/libargtable2" "argtable2.c"
   6              	arg_register_error:
   7              	.LFB0:
   8              		.file 1 "argtable2.c"
   1:argtable2.c   **** /*********************************************************************
   2:argtable2.c   **** This file is part of the argtable2 library.
   3:argtable2.c   **** Copyright (C) 1998-2001,2003-2011 Stewart Heitmann
   4:argtable2.c   **** sheitmann@users.sourceforge.net
   5:argtable2.c   **** 
   6:argtable2.c   **** The argtable2 library is free software; you can redistribute it and/or
   7:argtable2.c   **** modify it under the terms of the GNU Library General Public License as
   8:argtable2.c   **** published by the Free Software Foundation; either version 2 of the
   9:argtable2.c   **** License, or (at your option) any later version.
  10:argtable2.c   **** 
  11:argtable2.c   **** This software is distributed in the hope that it will be useful,
  12:argtable2.c   **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:argtable2.c   **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  14:argtable2.c   **** Library General Public License for more details.
  15:argtable2.c   **** 
  16:argtable2.c   **** You should have received a copy of the GNU Library General Public
  17:argtable2.c   **** License along with this library; if not, write to the Free Software
  18:argtable2.c   **** Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
  19:argtable2.c   **** USA.
  20:argtable2.c   **** **********************************************************************/
  21:argtable2.c   **** 
  22:argtable2.c   **** /* config.h must be included before anything else */
  23:argtable2.c   **** #ifdef HAVE_CONFIG_H
  24:argtable2.c   **** #include "config.h"
  25:argtable2.c   **** #endif
  26:argtable2.c   **** 
  27:argtable2.c   **** #ifdef STDC_HEADERS
  28:argtable2.c   **** #include <stdlib.h>
  29:argtable2.c   **** #include <string.h>
  30:argtable2.c   **** #include <stdlib.h>
  31:argtable2.c   **** #include <ctype.h>
  32:argtable2.c   **** #endif
  33:argtable2.c   **** 
  34:argtable2.c   **** #ifdef HAVE_STRINGS_H
  35:argtable2.c   **** #include <strings.h>
  36:argtable2.c   **** #endif
  37:argtable2.c   **** 
  38:argtable2.c   **** #ifdef HAVE_GETOPT_H
  39:argtable2.c   **** #include <getopt.h>
  40:argtable2.c   **** #else
  41:argtable2.c   **** #include "./getopt.h"
  42:argtable2.c   **** #endif
  43:argtable2.c   **** 
  44:argtable2.c   **** #ifdef HAVE_UNISTD_H
  45:argtable2.c   **** #include <unistd.h>
  46:argtable2.c   **** #endif
  47:argtable2.c   **** 
  48:argtable2.c   **** #include "argtable2.h"
  49:argtable2.c   **** #include "./getopt.h"
  50:argtable2.c   **** 
  51:argtable2.c   **** static
  52:argtable2.c   **** void arg_register_error(struct arg_end *end, void *parent, int error, const char *argval)
  53:argtable2.c   ****     {
   9              		.loc 1 53 5
  10              		.cfi_startproc
  11 0000 F30F1EFA 		endbr64
  12 0004 55       		pushq	%rbp
  13              		.cfi_def_cfa_offset 16
  14              		.cfi_offset 6, -16
  15 0005 4889E5   		movq	%rsp, %rbp
  16              		.cfi_def_cfa_register 6
  17 0008 48897DF8 		movq	%rdi, -8(%rbp)
  18 000c 488975F0 		movq	%rsi, -16(%rbp)
  19 0010 8955EC   		movl	%edx, -20(%rbp)
  20 0013 48894DE0 		movq	%rcx, -32(%rbp)
  54:argtable2.c   ****     /* printf("arg_register_error(%p,%p,%d,%s)\n",end,parent,error,argval); */
  55:argtable2.c   ****     if (end->count < end->hdr.maxcount)
  21              		.loc 1 55 12
  22 0017 488B45F8 		movq	-8(%rbp), %rax
  23 001b 8B5060   		movl	96(%rax), %edx
  24              		.loc 1 55 30
  25 001e 488B45F8 		movq	-8(%rbp), %rax
  26 0022 8B402C   		movl	44(%rax), %eax
  27              		.loc 1 55 8
  28 0025 39C2     		cmpl	%eax, %edx
  29 0027 7D6E     		jge	.L2
  56:argtable2.c   ****         {
  57:argtable2.c   ****         end->error[end->count] = error;
  30              		.loc 1 57 12
  31 0029 488B45F8 		movq	-8(%rbp), %rax
  32 002d 488B5068 		movq	104(%rax), %rdx
  33              		.loc 1 57 23
  34 0031 488B45F8 		movq	-8(%rbp), %rax
  35 0035 8B4060   		movl	96(%rax), %eax
  36 0038 4898     		cltq
  37              		.loc 1 57 19
  38 003a 48C1E002 		salq	$2, %rax
  39 003e 4801C2   		addq	%rax, %rdx
  40              		.loc 1 57 32
  41 0041 8B45EC   		movl	-20(%rbp), %eax
  42 0044 8902     		movl	%eax, (%rdx)
  58:argtable2.c   ****         end->parent[end->count] = parent;
  43              		.loc 1 58 12
  44 0046 488B45F8 		movq	-8(%rbp), %rax
  45 004a 488B5070 		movq	112(%rax), %rdx
  46              		.loc 1 58 24
  47 004e 488B45F8 		movq	-8(%rbp), %rax
  48 0052 8B4060   		movl	96(%rax), %eax
  49 0055 4898     		cltq
  50              		.loc 1 58 20
  51 0057 48C1E003 		salq	$3, %rax
  52 005b 4801C2   		addq	%rax, %rdx
  53              		.loc 1 58 33
  54 005e 488B45F0 		movq	-16(%rbp), %rax
  55 0062 488902   		movq	%rax, (%rdx)
  59:argtable2.c   ****         end->argval[end->count] = argval;
  56              		.loc 1 59 12
  57 0065 488B45F8 		movq	-8(%rbp), %rax
  58 0069 488B5078 		movq	120(%rax), %rdx
  59              		.loc 1 59 24
  60 006d 488B45F8 		movq	-8(%rbp), %rax
  61 0071 8B4060   		movl	96(%rax), %eax
  62 0074 4898     		cltq
  63              		.loc 1 59 20
  64 0076 48C1E003 		salq	$3, %rax
  65 007a 4801C2   		addq	%rax, %rdx
  66              		.loc 1 59 33
  67 007d 488B45E0 		movq	-32(%rbp), %rax
  68 0081 488902   		movq	%rax, (%rdx)
  60:argtable2.c   ****         end->count++;
  69              		.loc 1 60 12
  70 0084 488B45F8 		movq	-8(%rbp), %rax
  71 0088 8B4060   		movl	96(%rax), %eax
  72              		.loc 1 60 19
  73 008b 8D5001   		leal	1(%rax), %edx
  74 008e 488B45F8 		movq	-8(%rbp), %rax
  75 0092 895060   		movl	%edx, 96(%rax)
  61:argtable2.c   ****         }
  62:argtable2.c   ****     else
  63:argtable2.c   ****         {
  64:argtable2.c   ****         end->error[end->hdr.maxcount-1]  = ARG_ELIMIT;
  65:argtable2.c   ****         end->parent[end->hdr.maxcount-1] = end;
  66:argtable2.c   ****         end->argval[end->hdr.maxcount-1] = NULL;
  67:argtable2.c   ****         }
  68:argtable2.c   ****     }
  76              		.loc 1 68 5
  77 0095 EB68     		jmp	.L4
  78              	.L2:
  64:argtable2.c   ****         end->parent[end->hdr.maxcount-1] = end;
  79              		.loc 1 64 12
  80 0097 488B45F8 		movq	-8(%rbp), %rax
  81 009b 488B5068 		movq	104(%rax), %rdx
  64:argtable2.c   ****         end->parent[end->hdr.maxcount-1] = end;
  82              		.loc 1 64 28
  83 009f 488B45F8 		movq	-8(%rbp), %rax
  84 00a3 8B402C   		movl	44(%rax), %eax
  85 00a6 4898     		cltq
  64:argtable2.c   ****         end->parent[end->hdr.maxcount-1] = end;
  86              		.loc 1 64 19
  87 00a8 48C1E002 		salq	$2, %rax
  88 00ac 4883E804 		subq	$4, %rax
  89 00b0 4801D0   		addq	%rdx, %rax
  64:argtable2.c   ****         end->parent[end->hdr.maxcount-1] = end;
  90              		.loc 1 64 42
  91 00b3 C7000100 		movl	$1, (%rax)
  91      0000
  65:argtable2.c   ****         end->argval[end->hdr.maxcount-1] = NULL;
  92              		.loc 1 65 12
  93 00b9 488B45F8 		movq	-8(%rbp), %rax
  94 00bd 488B5070 		movq	112(%rax), %rdx
  65:argtable2.c   ****         end->argval[end->hdr.maxcount-1] = NULL;
  95              		.loc 1 65 29
  96 00c1 488B45F8 		movq	-8(%rbp), %rax
  97 00c5 8B402C   		movl	44(%rax), %eax
  98 00c8 4898     		cltq
  65:argtable2.c   ****         end->argval[end->hdr.maxcount-1] = NULL;
  99              		.loc 1 65 20
 100 00ca 48C1E003 		salq	$3, %rax
 101 00ce 4883E808 		subq	$8, %rax
 102 00d2 4801C2   		addq	%rax, %rdx
  65:argtable2.c   ****         end->argval[end->hdr.maxcount-1] = NULL;
 103              		.loc 1 65 42
 104 00d5 488B45F8 		movq	-8(%rbp), %rax
 105 00d9 488902   		movq	%rax, (%rdx)
  66:argtable2.c   ****         }
 106              		.loc 1 66 12
 107 00dc 488B45F8 		movq	-8(%rbp), %rax
 108 00e0 488B5078 		movq	120(%rax), %rdx
  66:argtable2.c   ****         }
 109              		.loc 1 66 29
 110 00e4 488B45F8 		movq	-8(%rbp), %rax
 111 00e8 8B402C   		movl	44(%rax), %eax
 112 00eb 4898     		cltq
  66:argtable2.c   ****         }
 113              		.loc 1 66 20
 114 00ed 48C1E003 		salq	$3, %rax
 115 00f1 4883E808 		subq	$8, %rax
 116 00f5 4801D0   		addq	%rdx, %rax
  66:argtable2.c   ****         }
 117              		.loc 1 66 42
 118 00f8 48C70000 		movq	$0, (%rax)
 118      000000
 119              	.L4:
 120              		.loc 1 68 5
 121 00ff 90       		nop
 122 0100 5D       		popq	%rbp
 123              		.cfi_def_cfa 7, 8
 124 0101 C3       		ret
 125              		.cfi_endproc
 126              	.LFE0:
 129              	find_shortoption:
 130              	.LFB1:
  69:argtable2.c   **** 
  70:argtable2.c   **** 
  71:argtable2.c   **** /*
  72:argtable2.c   ****  * Return index of first table entry with a matching short option
  73:argtable2.c   ****  * or -1 if no match was found.
  74:argtable2.c   ****  */
  75:argtable2.c   **** static
  76:argtable2.c   **** int find_shortoption(struct arg_hdr **table, char shortopt)
  77:argtable2.c   ****     {
 131              		.loc 1 77 5
 132              		.cfi_startproc
 133 0102 F30F1EFA 		endbr64
 134 0106 55       		pushq	%rbp
 135              		.cfi_def_cfa_offset 16
 136              		.cfi_offset 6, -16
 137 0107 4889E5   		movq	%rsp, %rbp
 138              		.cfi_def_cfa_register 6
 139 010a 4883EC20 		subq	$32, %rsp
 140 010e 48897DE8 		movq	%rdi, -24(%rbp)
 141 0112 89F0     		movl	%esi, %eax
 142 0114 8845E4   		movb	%al, -28(%rbp)
  78:argtable2.c   ****     int tabindex;
  79:argtable2.c   ****     for(tabindex=0; !(table[tabindex]->flag&ARG_TERMINATOR); tabindex++)
 143              		.loc 1 79 17
 144 0117 C745FC00 		movl	$0, -4(%rbp)
 144      000000
 145              		.loc 1 79 5
 146 011e EB57     		jmp	.L6
 147              	.L9:
  80:argtable2.c   ****         {
  81:argtable2.c   ****         if (table[tabindex]->shortopts && strchr(table[tabindex]->shortopts,shortopt))
 148              		.loc 1 81 18
 149 0120 8B45FC   		movl	-4(%rbp), %eax
 150 0123 4898     		cltq
 151 0125 488D14C5 		leaq	0(,%rax,8), %rdx
 151      00000000 
 152 012d 488B45E8 		movq	-24(%rbp), %rax
 153 0131 4801D0   		addq	%rdx, %rax
 154 0134 488B00   		movq	(%rax), %rax
 155              		.loc 1 81 28
 156 0137 488B4008 		movq	8(%rax), %rax
 157              		.loc 1 81 12
 158 013b 4885C0   		testq	%rax, %rax
 159 013e 7433     		je	.L7
 160              		.loc 1 81 43 discriminator 1
 161 0140 0FBE55E4 		movsbl	-28(%rbp), %edx
 162              		.loc 1 81 55 discriminator 1
 163 0144 8B45FC   		movl	-4(%rbp), %eax
 164 0147 4898     		cltq
 165 0149 488D0CC5 		leaq	0(,%rax,8), %rcx
 165      00000000 
 166 0151 488B45E8 		movq	-24(%rbp), %rax
 167 0155 4801C8   		addq	%rcx, %rax
 168 0158 488B00   		movq	(%rax), %rax
 169              		.loc 1 81 43 discriminator 1
 170 015b 488B4008 		movq	8(%rax), %rax
 171 015f 89D6     		movl	%edx, %esi
 172 0161 4889C7   		movq	%rax, %rdi
 173 0164 E8000000 		call	strchr@PLT
 173      00
 174              		.loc 1 81 40 discriminator 1
 175 0169 4885C0   		testq	%rax, %rax
 176 016c 7405     		je	.L7
  82:argtable2.c   ****             return tabindex;
 177              		.loc 1 82 20
 178 016e 8B45FC   		movl	-4(%rbp), %eax
 179 0171 EB2D     		jmp	.L8
 180              	.L7:
  79:argtable2.c   ****         {
 181              		.loc 1 79 70 discriminator 2
 182 0173 8345FC01 		addl	$1, -4(%rbp)
 183              	.L6:
  79:argtable2.c   ****         {
 184              		.loc 1 79 28 discriminator 1
 185 0177 8B45FC   		movl	-4(%rbp), %eax
 186 017a 4898     		cltq
 187 017c 488D14C5 		leaq	0(,%rax,8), %rdx
 187      00000000 
 188 0184 488B45E8 		movq	-24(%rbp), %rax
 189 0188 4801D0   		addq	%rdx, %rax
 190 018b 488B00   		movq	(%rax), %rax
  79:argtable2.c   ****         {
 191              		.loc 1 79 38 discriminator 1
 192 018e 0FB600   		movzbl	(%rax), %eax
  79:argtable2.c   ****         {
 193              		.loc 1 79 44 discriminator 1
 194 0191 0FBEC0   		movsbl	%al, %eax
 195 0194 83E001   		andl	$1, %eax
  79:argtable2.c   ****         {
 196              		.loc 1 79 21 discriminator 1
 197 0197 85C0     		testl	%eax, %eax
 198 0199 7485     		je	.L9
  83:argtable2.c   ****         }
  84:argtable2.c   ****     return -1;
 199              		.loc 1 84 12
 200 019b B8FFFFFF 		movl	$-1, %eax
 200      FF
 201              	.L8:
  85:argtable2.c   ****     }
 202              		.loc 1 85 5
 203 01a0 C9       		leave
 204              		.cfi_def_cfa 7, 8
 205 01a1 C3       		ret
 206              		.cfi_endproc
 207              	.LFE1:
 209              		.section	.rodata
 210              	.LC0:
 211 0000 6765746F 		.string	"getoptval = %d\n"
 211      70747661 
 211      6C203D20 
 211      25640A00 
 212              	.LC1:
 213 0010 6E6F7074 		.string	"noptions  = %d\n"
 213      696F6E73 
 213      20203D20 
 213      25640A00 
 214              	.LC2:
 215 0020 6F707469 		.string	"options[%d].name    = \"%s\"\n"
 215      6F6E735B 
 215      25645D2E 
 215      6E616D65 
 215      20202020 
 216              	.LC3:
 217 003c 6F707469 		.string	"options[%d].has_arg = %d\n"
 217      6F6E735B 
 217      25645D2E 
 217      6861735F 
 217      61726720 
 218              	.LC4:
 219 0056 6F707469 		.string	"options[%d].flag    = %p\n"
 219      6F6E735B 
 219      25645D2E 
 219      666C6167 
 219      20202020 
 220              	.LC5:
 221 0070 6F707469 		.string	"options[%d].val     = %d\n"
 221      6F6E735B 
 221      25645D2E 
 221      76616C20 
 221      20202020 
 222              		.text
 224              	dump_longoptions:
 225              	.LFB2:
  86:argtable2.c   **** 
  87:argtable2.c   **** 
  88:argtable2.c   **** struct longoptions
  89:argtable2.c   ****     {
  90:argtable2.c   ****     int getoptval;
  91:argtable2.c   ****     int noptions;
  92:argtable2.c   ****     struct option *options;
  93:argtable2.c   ****     };
  94:argtable2.c   **** 
  95:argtable2.c   **** #ifndef NDEBUG
  96:argtable2.c   **** static
  97:argtable2.c   **** void dump_longoptions(struct longoptions* longoptions)
  98:argtable2.c   ****     {
 226              		.loc 1 98 5
 227              		.cfi_startproc
 228 01a2 F30F1EFA 		endbr64
 229 01a6 55       		pushq	%rbp
 230              		.cfi_def_cfa_offset 16
 231              		.cfi_offset 6, -16
 232 01a7 4889E5   		movq	%rsp, %rbp
 233              		.cfi_def_cfa_register 6
 234 01aa 4883EC20 		subq	$32, %rsp
 235 01ae 48897DE8 		movq	%rdi, -24(%rbp)
  99:argtable2.c   ****     int i;
 100:argtable2.c   ****     printf("getoptval = %d\n", longoptions->getoptval);
 236              		.loc 1 100 5
 237 01b2 488B45E8 		movq	-24(%rbp), %rax
 238 01b6 8B00     		movl	(%rax), %eax
 239 01b8 89C6     		movl	%eax, %esi
 240 01ba 488D0500 		leaq	.LC0(%rip), %rax
 240      000000
 241 01c1 4889C7   		movq	%rax, %rdi
 242 01c4 B8000000 		movl	$0, %eax
 242      00
 243 01c9 E8000000 		call	printf@PLT
 243      00
 101:argtable2.c   ****     printf("noptions  = %d\n", longoptions->noptions);
 244              		.loc 1 101 5
 245 01ce 488B45E8 		movq	-24(%rbp), %rax
 246 01d2 8B4004   		movl	4(%rax), %eax
 247 01d5 89C6     		movl	%eax, %esi
 248 01d7 488D0500 		leaq	.LC1(%rip), %rax
 248      000000
 249 01de 4889C7   		movq	%rax, %rdi
 250 01e1 B8000000 		movl	$0, %eax
 250      00
 251 01e6 E8000000 		call	printf@PLT
 251      00
 102:argtable2.c   ****     for (i=0; i<longoptions->noptions; i++)
 252              		.loc 1 102 11
 253 01eb C745FC00 		movl	$0, -4(%rbp)
 253      000000
 254              		.loc 1 102 5
 255 01f2 E9C50000 		jmp	.L11
 255      00
 256              	.L12:
 103:argtable2.c   ****         {
 104:argtable2.c   ****         printf("options[%d].name    = \"%s\"\n", i, longoptions->options[i].name);
 257              		.loc 1 104 64 discriminator 3
 258 01f7 488B45E8 		movq	-24(%rbp), %rax
 259 01fb 488B5008 		movq	8(%rax), %rdx
 260              		.loc 1 104 73 discriminator 3
 261 01ff 8B45FC   		movl	-4(%rbp), %eax
 262 0202 4898     		cltq
 263 0204 48C1E005 		salq	$5, %rax
 264 0208 4801D0   		addq	%rdx, %rax
 265              		.loc 1 104 9 discriminator 3
 266 020b 488B10   		movq	(%rax), %rdx
 267 020e 8B45FC   		movl	-4(%rbp), %eax
 268 0211 89C6     		movl	%eax, %esi
 269 0213 488D0500 		leaq	.LC2(%rip), %rax
 269      000000
 270 021a 4889C7   		movq	%rax, %rdi
 271 021d B8000000 		movl	$0, %eax
 271      00
 272 0222 E8000000 		call	printf@PLT
 272      00
 105:argtable2.c   ****         printf("options[%d].has_arg = %d\n", i, longoptions->options[i].has_arg);
 273              		.loc 1 105 60 discriminator 3
 274 0227 488B45E8 		movq	-24(%rbp), %rax
 275 022b 488B5008 		movq	8(%rax), %rdx
 276              		.loc 1 105 69 discriminator 3
 277 022f 8B45FC   		movl	-4(%rbp), %eax
 278 0232 4898     		cltq
 279 0234 48C1E005 		salq	$5, %rax
 280 0238 4801D0   		addq	%rdx, %rax
 281              		.loc 1 105 9 discriminator 3
 282 023b 8B5008   		movl	8(%rax), %edx
 283 023e 8B45FC   		movl	-4(%rbp), %eax
 284 0241 89C6     		movl	%eax, %esi
 285 0243 488D0500 		leaq	.LC3(%rip), %rax
 285      000000
 286 024a 4889C7   		movq	%rax, %rdi
 287 024d B8000000 		movl	$0, %eax
 287      00
 288 0252 E8000000 		call	printf@PLT
 288      00
 106:argtable2.c   ****         printf("options[%d].flag    = %p\n", i, longoptions->options[i].flag);
 289              		.loc 1 106 60 discriminator 3
 290 0257 488B45E8 		movq	-24(%rbp), %rax
 291 025b 488B5008 		movq	8(%rax), %rdx
 292              		.loc 1 106 69 discriminator 3
 293 025f 8B45FC   		movl	-4(%rbp), %eax
 294 0262 4898     		cltq
 295 0264 48C1E005 		salq	$5, %rax
 296 0268 4801D0   		addq	%rdx, %rax
 297              		.loc 1 106 9 discriminator 3
 298 026b 488B5010 		movq	16(%rax), %rdx
 299 026f 8B45FC   		movl	-4(%rbp), %eax
 300 0272 89C6     		movl	%eax, %esi
 301 0274 488D0500 		leaq	.LC4(%rip), %rax
 301      000000
 302 027b 4889C7   		movq	%rax, %rdi
 303 027e B8000000 		movl	$0, %eax
 303      00
 304 0283 E8000000 		call	printf@PLT
 304      00
 107:argtable2.c   ****         printf("options[%d].val     = %d\n", i, longoptions->options[i].val);
 305              		.loc 1 107 60 discriminator 3
 306 0288 488B45E8 		movq	-24(%rbp), %rax
 307 028c 488B5008 		movq	8(%rax), %rdx
 308              		.loc 1 107 69 discriminator 3
 309 0290 8B45FC   		movl	-4(%rbp), %eax
 310 0293 4898     		cltq
 311 0295 48C1E005 		salq	$5, %rax
 312 0299 4801D0   		addq	%rdx, %rax
 313              		.loc 1 107 9 discriminator 3
 314 029c 8B5018   		movl	24(%rax), %edx
 315 029f 8B45FC   		movl	-4(%rbp), %eax
 316 02a2 89C6     		movl	%eax, %esi
 317 02a4 488D0500 		leaq	.LC5(%rip), %rax
 317      000000
 318 02ab 4889C7   		movq	%rax, %rdi
 319 02ae B8000000 		movl	$0, %eax
 319      00
 320 02b3 E8000000 		call	printf@PLT
 320      00
 102:argtable2.c   ****         {
 321              		.loc 1 102 41 discriminator 3
 322 02b8 8345FC01 		addl	$1, -4(%rbp)
 323              	.L11:
 102:argtable2.c   ****         {
 324              		.loc 1 102 28 discriminator 1
 325 02bc 488B45E8 		movq	-24(%rbp), %rax
 326 02c0 8B4004   		movl	4(%rax), %eax
 102:argtable2.c   ****         {
 327              		.loc 1 102 16 discriminator 1
 328 02c3 3945FC   		cmpl	%eax, -4(%rbp)
 329 02c6 0F8C2BFF 		jl	.L12
 329      FFFF
 108:argtable2.c   ****         }
 109:argtable2.c   ****     }
 330              		.loc 1 109 5
 331 02cc 90       		nop
 332 02cd 90       		nop
 333 02ce C9       		leave
 334              		.cfi_def_cfa 7, 8
 335 02cf C3       		ret
 336              		.cfi_endproc
 337              	.LFE2:
 340              	alloc_longoptions:
 341              	.LFB3:
 110:argtable2.c   **** #endif
 111:argtable2.c   **** 
 112:argtable2.c   **** static
 113:argtable2.c   **** struct longoptions* alloc_longoptions(struct arg_hdr **table)
 114:argtable2.c   ****     {
 342              		.loc 1 114 5
 343              		.cfi_startproc
 344 02d0 F30F1EFA 		endbr64
 345 02d4 55       		pushq	%rbp
 346              		.cfi_def_cfa_offset 16
 347              		.cfi_offset 6, -16
 348 02d5 4889E5   		movq	%rsp, %rbp
 349              		.cfi_def_cfa_register 6
 350 02d8 4883EC60 		subq	$96, %rsp
 351 02dc 48897DA8 		movq	%rdi, -88(%rbp)
 115:argtable2.c   ****     struct longoptions *result;
 116:argtable2.c   ****     size_t nbytes;
 117:argtable2.c   ****     int noptions = 1;
 352              		.loc 1 117 9
 353 02e0 C745BC01 		movl	$1, -68(%rbp)
 353      000000
 118:argtable2.c   ****     size_t longoptlen = 0;
 354              		.loc 1 118 12
 355 02e7 48C745C8 		movq	$0, -56(%rbp)
 355      00000000 
 119:argtable2.c   ****     int tabindex;
 120:argtable2.c   **** 
 121:argtable2.c   ****     /*
 122:argtable2.c   ****      * Determine the total number of option structs required
 123:argtable2.c   ****      * by counting the number of comma separated long options
 124:argtable2.c   ****      * in all table entries and return the count in noptions.
 125:argtable2.c   ****      * note: noptions starts at 1 not 0 because we getoptlong
 126:argtable2.c   ****      * requires a NULL option entry to terminate the option array.
 127:argtable2.c   ****      * While we are at it, count the number of chars required
 128:argtable2.c   ****      * to store private copies of all the longoption strings
 129:argtable2.c   ****      * and return that count in logoptlen.
 130:argtable2.c   ****      */
 131:argtable2.c   ****      tabindex=0;
 356              		.loc 1 131 14
 357 02ef C745C000 		movl	$0, -64(%rbp)
 357      000000
 358              	.L18:
 359              	.LBB2:
 132:argtable2.c   ****      do
 133:argtable2.c   ****         {
 134:argtable2.c   ****         const char *longopts = table[tabindex]->longopts;
 360              		.loc 1 134 37
 361 02f6 8B45C0   		movl	-64(%rbp), %eax
 362 02f9 4898     		cltq
 363 02fb 488D14C5 		leaq	0(,%rax,8), %rdx
 363      00000000 
 364 0303 488B45A8 		movq	-88(%rbp), %rax
 365 0307 4801D0   		addq	%rdx, %rax
 366 030a 488B00   		movq	(%rax), %rax
 367              		.loc 1 134 21
 368 030d 488B4010 		movq	16(%rax), %rax
 369 0311 488945D0 		movq	%rax, -48(%rbp)
 135:argtable2.c   ****         longoptlen += (longopts?strlen(longopts):0) + 1;
 370              		.loc 1 135 53
 371 0315 48837DD0 		cmpq	$0, -48(%rbp)
 371      00
 372 031a 7412     		je	.L14
 373              		.loc 1 135 33 discriminator 1
 374 031c 488B45D0 		movq	-48(%rbp), %rax
 375 0320 4889C7   		movq	%rax, %rdi
 376 0323 E8000000 		call	strlen@PLT
 376      00
 377              		.loc 1 135 53 discriminator 1
 378 0328 4883C001 		addq	$1, %rax
 379 032c EB05     		jmp	.L15
 380              	.L14:
 381              		.loc 1 135 53 is_stmt 0 discriminator 2
 382 032e B8010000 		movl	$1, %eax
 382      00
 383              	.L15:
 384              		.loc 1 135 20 is_stmt 1 discriminator 4
 385 0333 480145C8 		addq	%rax, -56(%rbp)
 136:argtable2.c   ****         while (longopts)
 386              		.loc 1 136 15 discriminator 4
 387 0337 EB1D     		jmp	.L16
 388              	.L17:
 137:argtable2.c   ****             {
 138:argtable2.c   ****             noptions++;
 389              		.loc 1 138 21
 390 0339 8345BC01 		addl	$1, -68(%rbp)
 139:argtable2.c   ****             longopts = strchr(longopts+1,',');
 391              		.loc 1 139 24
 392 033d 488B45D0 		movq	-48(%rbp), %rax
 393 0341 4883C001 		addq	$1, %rax
 394 0345 BE2C0000 		movl	$44, %esi
 394      00
 395 034a 4889C7   		movq	%rax, %rdi
 396 034d E8000000 		call	strchr@PLT
 396      00
 397 0352 488945D0 		movq	%rax, -48(%rbp)
 398              	.L16:
 136:argtable2.c   ****         while (longopts)
 399              		.loc 1 136 16
 400 0356 48837DD0 		cmpq	$0, -48(%rbp)
 400      00
 401 035b 75DC     		jne	.L17
 402              	.LBE2:
 140:argtable2.c   ****             }
 141:argtable2.c   ****         }while(!(table[tabindex++]->flag&ARG_TERMINATOR));
 403              		.loc 1 141 32
 404 035d 8B45C0   		movl	-64(%rbp), %eax
 405 0360 8D5001   		leal	1(%rax), %edx
 406 0363 8955C0   		movl	%edx, -64(%rbp)
 407 0366 4898     		cltq
 408              		.loc 1 141 23
 409 0368 488D14C5 		leaq	0(,%rax,8), %rdx
 409      00000000 
 410 0370 488B45A8 		movq	-88(%rbp), %rax
 411 0374 4801D0   		addq	%rdx, %rax
 412 0377 488B00   		movq	(%rax), %rax
 413              		.loc 1 141 35
 414 037a 0FB600   		movzbl	(%rax), %eax
 415              		.loc 1 141 41
 416 037d 0FBEC0   		movsbl	%al, %eax
 417 0380 83E001   		andl	$1, %eax
 418              		.loc 1 141 16
 419 0383 85C0     		testl	%eax, %eax
 420 0385 0F846BFF 		je	.L18
 420      FFFF
 142:argtable2.c   ****     /*printf("%d long options consuming %d chars in total\n",noptions,longoptlen);*/
 143:argtable2.c   **** 
 144:argtable2.c   **** 
 145:argtable2.c   ****     /* allocate storage for return data structure as: */
 146:argtable2.c   ****     /* (struct longoptions) + (struct options)[noptions] + char[longoptlen] */
 147:argtable2.c   ****     nbytes = sizeof(struct longoptions)
 148:argtable2.c   ****            + sizeof(struct option)*noptions
 421              		.loc 1 148 35
 422 038b 8B45BC   		movl	-68(%rbp), %eax
 423 038e 4898     		cltq
 424 0390 48C1E005 		salq	$5, %rax
 425 0394 4889C2   		movq	%rax, %rdx
 149:argtable2.c   ****            + longoptlen;
 426              		.loc 1 149 12
 427 0397 488B45C8 		movq	-56(%rbp), %rax
 428 039b 4801D0   		addq	%rdx, %rax
 147:argtable2.c   ****            + sizeof(struct option)*noptions
 429              		.loc 1 147 12
 430 039e 4883C010 		addq	$16, %rax
 431 03a2 488945E8 		movq	%rax, -24(%rbp)
 150:argtable2.c   ****     result = (struct longoptions*)malloc(nbytes);
 432              		.loc 1 150 35
 433 03a6 488B45E8 		movq	-24(%rbp), %rax
 434 03aa 4889C7   		movq	%rax, %rdi
 435 03ad E8000000 		call	malloc@PLT
 435      00
 436 03b2 488945F0 		movq	%rax, -16(%rbp)
 151:argtable2.c   ****     if (result)
 437              		.loc 1 151 8
 438 03b6 48837DF0 		cmpq	$0, -16(%rbp)
 438      00
 439 03bb 0F847002 		je	.L19
 439      0000
 440              	.LBB3:
 152:argtable2.c   ****         {
 153:argtable2.c   ****         int option_index=0;
 441              		.loc 1 153 13
 442 03c1 C745C400 		movl	$0, -60(%rbp)
 442      000000
 154:argtable2.c   ****         char *store;
 155:argtable2.c   **** 
 156:argtable2.c   ****         result->getoptval=0;
 443              		.loc 1 156 26
 444 03c8 488B45F0 		movq	-16(%rbp), %rax
 445 03cc C7000000 		movl	$0, (%rax)
 445      0000
 157:argtable2.c   ****         result->noptions = noptions;
 446              		.loc 1 157 26
 447 03d2 488B45F0 		movq	-16(%rbp), %rax
 448 03d6 8B55BC   		movl	-68(%rbp), %edx
 449 03d9 895004   		movl	%edx, 4(%rax)
 158:argtable2.c   ****         result->options = (struct option*)(result + 1);
 450              		.loc 1 158 51
 451 03dc 488B45F0 		movq	-16(%rbp), %rax
 452 03e0 488D5010 		leaq	16(%rax), %rdx
 453              		.loc 1 158 25
 454 03e4 488B45F0 		movq	-16(%rbp), %rax
 455 03e8 48895008 		movq	%rdx, 8(%rax)
 159:argtable2.c   ****         store = (char*)(result->options + noptions);
 456              		.loc 1 159 31
 457 03ec 488B45F0 		movq	-16(%rbp), %rax
 458 03f0 488B5008 		movq	8(%rax), %rdx
 459              		.loc 1 159 41
 460 03f4 8B45BC   		movl	-68(%rbp), %eax
 461 03f7 4898     		cltq
 462 03f9 48C1E005 		salq	$5, %rax
 463              		.loc 1 159 15
 464 03fd 4801D0   		addq	%rdx, %rax
 465 0400 488945D8 		movq	%rax, -40(%rbp)
 160:argtable2.c   **** 
 161:argtable2.c   ****         for(tabindex=0; !(table[tabindex]->flag&ARG_TERMINATOR); tabindex++)
 466              		.loc 1 161 21
 467 0404 C745C000 		movl	$0, -64(%rbp)
 467      000000
 468              		.loc 1 161 9
 469 040b E98C0100 		jmp	.L20
 469      00
 470              	.L31:
 471              	.LBB4:
 162:argtable2.c   ****             {
 163:argtable2.c   ****             const char *longopts = table[tabindex]->longopts;
 472              		.loc 1 163 41
 473 0410 8B45C0   		movl	-64(%rbp), %eax
 474 0413 4898     		cltq
 475 0415 488D14C5 		leaq	0(,%rax,8), %rdx
 475      00000000 
 476 041d 488B45A8 		movq	-88(%rbp), %rax
 477 0421 4801D0   		addq	%rdx, %rax
 478 0424 488B00   		movq	(%rax), %rax
 479              		.loc 1 163 25
 480 0427 488B4010 		movq	16(%rax), %rax
 481 042b 488945E0 		movq	%rax, -32(%rbp)
 164:argtable2.c   **** 
 165:argtable2.c   ****             while(longopts && *longopts)
 482              		.loc 1 165 18
 483 042f E94E0100 		jmp	.L21
 483      00
 484              	.L30:
 485              	.LBB5:
 166:argtable2.c   ****                 {
 167:argtable2.c   ****                 char *storestart = store;
 486              		.loc 1 167 23
 487 0434 488B45D8 		movq	-40(%rbp), %rax
 488 0438 488945F8 		movq	%rax, -8(%rbp)
 168:argtable2.c   **** 
 169:argtable2.c   ****                 /* copy progressive longopt strings into the store */
 170:argtable2.c   ****                 while (*longopts!=0 && *longopts!=',')
 489              		.loc 1 170 23
 490 043c EB1D     		jmp	.L22
 491              	.L24:
 171:argtable2.c   ****                     *store++ = *longopts++;
 492              		.loc 1 171 41
 493 043e 488B55E0 		movq	-32(%rbp), %rdx
 494 0442 488D4201 		leaq	1(%rdx), %rax
 495 0446 488945E0 		movq	%rax, -32(%rbp)
 496              		.loc 1 171 27
 497 044a 488B45D8 		movq	-40(%rbp), %rax
 498 044e 488D4801 		leaq	1(%rax), %rcx
 499 0452 48894DD8 		movq	%rcx, -40(%rbp)
 500              		.loc 1 171 32
 501 0456 0FB612   		movzbl	(%rdx), %edx
 502              		.loc 1 171 30
 503 0459 8810     		movb	%dl, (%rax)
 504              	.L22:
 170:argtable2.c   ****                     *store++ = *longopts++;
 505              		.loc 1 170 24
 506 045b 488B45E0 		movq	-32(%rbp), %rax
 507 045f 0FB600   		movzbl	(%rax), %eax
 170:argtable2.c   ****                     *store++ = *longopts++;
 508              		.loc 1 170 37
 509 0462 84C0     		testb	%al, %al
 510 0464 740B     		je	.L23
 170:argtable2.c   ****                     *store++ = *longopts++;
 511              		.loc 1 170 40 discriminator 1
 512 0466 488B45E0 		movq	-32(%rbp), %rax
 513 046a 0FB600   		movzbl	(%rax), %eax
 170:argtable2.c   ****                     *store++ = *longopts++;
 514              		.loc 1 170 37 discriminator 1
 515 046d 3C2C     		cmpb	$44, %al
 516 046f 75CD     		jne	.L24
 517              	.L23:
 172:argtable2.c   ****                 *store++ = 0;
 518              		.loc 1 172 23
 519 0471 488B45D8 		movq	-40(%rbp), %rax
 520 0475 488D5001 		leaq	1(%rax), %rdx
 521 0479 488955D8 		movq	%rdx, -40(%rbp)
 522              		.loc 1 172 26
 523 047d C60000   		movb	$0, (%rax)
 173:argtable2.c   ****                 if (*longopts==',')
 524              		.loc 1 173 21
 525 0480 488B45E0 		movq	-32(%rbp), %rax
 526 0484 0FB600   		movzbl	(%rax), %eax
 527              		.loc 1 173 20
 528 0487 3C2C     		cmpb	$44, %al
 529 0489 7505     		jne	.L25
 174:argtable2.c   ****                     longopts++;
 530              		.loc 1 174 29
 531 048b 488345E0 		addq	$1, -32(%rbp)
 531      01
 532              	.L25:
 175:argtable2.c   ****                 /*fprintf(stderr,"storestart=\"%s\"\n",storestart);*/
 176:argtable2.c   **** 
 177:argtable2.c   ****                 result->options[option_index].name    = storestart;
 533              		.loc 1 177 23
 534 0490 488B45F0 		movq	-16(%rbp), %rax
 535 0494 488B5008 		movq	8(%rax), %rdx
 536              		.loc 1 177 32
 537 0498 8B45C4   		movl	-60(%rbp), %eax
 538 049b 4898     		cltq
 539 049d 48C1E005 		salq	$5, %rax
 540 04a1 4801C2   		addq	%rax, %rdx
 541              		.loc 1 177 55
 542 04a4 488B45F8 		movq	-8(%rbp), %rax
 543 04a8 488902   		movq	%rax, (%rdx)
 178:argtable2.c   ****                 result->options[option_index].flag    = &(result->getoptval);
 544              		.loc 1 178 23
 545 04ab 488B45F0 		movq	-16(%rbp), %rax
 546 04af 488B5008 		movq	8(%rax), %rdx
 547              		.loc 1 178 32
 548 04b3 8B45C4   		movl	-60(%rbp), %eax
 549 04b6 4898     		cltq
 550 04b8 48C1E005 		salq	$5, %rax
 551 04bc 4801C2   		addq	%rax, %rdx
 552              		.loc 1 178 57
 553 04bf 488B45F0 		movq	-16(%rbp), %rax
 554              		.loc 1 178 55
 555 04c3 48894210 		movq	%rax, 16(%rdx)
 179:argtable2.c   ****                 result->options[option_index].val     = tabindex;
 556              		.loc 1 179 23
 557 04c7 488B45F0 		movq	-16(%rbp), %rax
 558 04cb 488B5008 		movq	8(%rax), %rdx
 559              		.loc 1 179 32
 560 04cf 8B45C4   		movl	-60(%rbp), %eax
 561 04d2 4898     		cltq
 562 04d4 48C1E005 		salq	$5, %rax
 563 04d8 4801C2   		addq	%rax, %rdx
 564              		.loc 1 179 55
 565 04db 8B45C0   		movl	-64(%rbp), %eax
 566 04de 894218   		movl	%eax, 24(%rdx)
 180:argtable2.c   ****                 if (table[tabindex]->flag & ARG_HASOPTVALUE)
 567              		.loc 1 180 26
 568 04e1 8B45C0   		movl	-64(%rbp), %eax
 569 04e4 4898     		cltq
 570 04e6 488D14C5 		leaq	0(,%rax,8), %rdx
 570      00000000 
 571 04ee 488B45A8 		movq	-88(%rbp), %rax
 572 04f2 4801D0   		addq	%rdx, %rax
 573 04f5 488B00   		movq	(%rax), %rax
 574              		.loc 1 180 36
 575 04f8 0FB600   		movzbl	(%rax), %eax
 576              		.loc 1 180 43
 577 04fb 0FBEC0   		movsbl	%al, %eax
 578 04fe 83E004   		andl	$4, %eax
 579              		.loc 1 180 20
 580 0501 85C0     		testl	%eax, %eax
 581 0503 741D     		je	.L26
 181:argtable2.c   ****                     result->options[option_index].has_arg = 2;
 582              		.loc 1 181 27
 583 0505 488B45F0 		movq	-16(%rbp), %rax
 584 0509 488B5008 		movq	8(%rax), %rdx
 585              		.loc 1 181 36
 586 050d 8B45C4   		movl	-60(%rbp), %eax
 587 0510 4898     		cltq
 588 0512 48C1E005 		salq	$5, %rax
 589 0516 4801D0   		addq	%rdx, %rax
 590              		.loc 1 181 59
 591 0519 C7400802 		movl	$2, 8(%rax)
 591      000000
 592 0520 EB5C     		jmp	.L27
 593              	.L26:
 182:argtable2.c   ****                 else if (table[tabindex]->flag & ARG_HASVALUE)
 594              		.loc 1 182 31
 595 0522 8B45C0   		movl	-64(%rbp), %eax
 596 0525 4898     		cltq
 597 0527 488D14C5 		leaq	0(,%rax,8), %rdx
 597      00000000 
 598 052f 488B45A8 		movq	-88(%rbp), %rax
 599 0533 4801D0   		addq	%rdx, %rax
 600 0536 488B00   		movq	(%rax), %rax
 601              		.loc 1 182 41
 602 0539 0FB600   		movzbl	(%rax), %eax
 603              		.loc 1 182 48
 604 053c 0FBEC0   		movsbl	%al, %eax
 605 053f 83E002   		andl	$2, %eax
 606              		.loc 1 182 25
 607 0542 85C0     		testl	%eax, %eax
 608 0544 741D     		je	.L28
 183:argtable2.c   ****                     result->options[option_index].has_arg = 1;
 609              		.loc 1 183 27
 610 0546 488B45F0 		movq	-16(%rbp), %rax
 611 054a 488B5008 		movq	8(%rax), %rdx
 612              		.loc 1 183 36
 613 054e 8B45C4   		movl	-60(%rbp), %eax
 614 0551 4898     		cltq
 615 0553 48C1E005 		salq	$5, %rax
 616 0557 4801D0   		addq	%rdx, %rax
 617              		.loc 1 183 59
 618 055a C7400801 		movl	$1, 8(%rax)
 618      000000
 619 0561 EB1B     		jmp	.L27
 620              	.L28:
 184:argtable2.c   ****                 else
 185:argtable2.c   ****                     result->options[option_index].has_arg = 0;
 621              		.loc 1 185 27
 622 0563 488B45F0 		movq	-16(%rbp), %rax
 623 0567 488B5008 		movq	8(%rax), %rdx
 624              		.loc 1 185 36
 625 056b 8B45C4   		movl	-60(%rbp), %eax
 626 056e 4898     		cltq
 627 0570 48C1E005 		salq	$5, %rax
 628 0574 4801D0   		addq	%rdx, %rax
 629              		.loc 1 185 59
 630 0577 C7400800 		movl	$0, 8(%rax)
 630      000000
 631              	.L27:
 186:argtable2.c   **** 
 187:argtable2.c   ****                 option_index++;
 632              		.loc 1 187 29
 633 057e 8345C401 		addl	$1, -60(%rbp)
 634              	.L21:
 635              	.LBE5:
 165:argtable2.c   ****                 {
 636              		.loc 1 165 28
 637 0582 48837DE0 		cmpq	$0, -32(%rbp)
 637      00
 638 0587 740F     		je	.L29
 165:argtable2.c   ****                 {
 639              		.loc 1 165 31 discriminator 1
 640 0589 488B45E0 		movq	-32(%rbp), %rax
 641 058d 0FB600   		movzbl	(%rax), %eax
 165:argtable2.c   ****                 {
 642              		.loc 1 165 28 discriminator 1
 643 0590 84C0     		testb	%al, %al
 644 0592 0F859CFE 		jne	.L30
 644      FFFF
 645              	.L29:
 646              	.LBE4:
 161:argtable2.c   ****             {
 647              		.loc 1 161 74 discriminator 2
 648 0598 8345C001 		addl	$1, -64(%rbp)
 649              	.L20:
 161:argtable2.c   ****             {
 650              		.loc 1 161 32 discriminator 1
 651 059c 8B45C0   		movl	-64(%rbp), %eax
 652 059f 4898     		cltq
 653 05a1 488D14C5 		leaq	0(,%rax,8), %rdx
 653      00000000 
 654 05a9 488B45A8 		movq	-88(%rbp), %rax
 655 05ad 4801D0   		addq	%rdx, %rax
 656 05b0 488B00   		movq	(%rax), %rax
 161:argtable2.c   ****             {
 657              		.loc 1 161 42 discriminator 1
 658 05b3 0FB600   		movzbl	(%rax), %eax
 161:argtable2.c   ****             {
 659              		.loc 1 161 48 discriminator 1
 660 05b6 0FBEC0   		movsbl	%al, %eax
 661 05b9 83E001   		andl	$1, %eax
 161:argtable2.c   ****             {
 662              		.loc 1 161 25 discriminator 1
 663 05bc 85C0     		testl	%eax, %eax
 664 05be 0F844CFE 		je	.L31
 664      FFFF
 188:argtable2.c   ****                 }
 189:argtable2.c   ****             }
 190:argtable2.c   ****         /* terminate the options array with a zero-filled entry */
 191:argtable2.c   ****         result->options[option_index].name    = 0;
 665              		.loc 1 191 15
 666 05c4 488B45F0 		movq	-16(%rbp), %rax
 667 05c8 488B5008 		movq	8(%rax), %rdx
 668              		.loc 1 191 24
 669 05cc 8B45C4   		movl	-60(%rbp), %eax
 670 05cf 4898     		cltq
 671 05d1 48C1E005 		salq	$5, %rax
 672 05d5 4801D0   		addq	%rdx, %rax
 673              		.loc 1 191 47
 674 05d8 48C70000 		movq	$0, (%rax)
 674      000000
 192:argtable2.c   ****         result->options[option_index].has_arg = 0;
 675              		.loc 1 192 15
 676 05df 488B45F0 		movq	-16(%rbp), %rax
 677 05e3 488B5008 		movq	8(%rax), %rdx
 678              		.loc 1 192 24
 679 05e7 8B45C4   		movl	-60(%rbp), %eax
 680 05ea 4898     		cltq
 681 05ec 48C1E005 		salq	$5, %rax
 682 05f0 4801D0   		addq	%rdx, %rax
 683              		.loc 1 192 47
 684 05f3 C7400800 		movl	$0, 8(%rax)
 684      000000
 193:argtable2.c   ****         result->options[option_index].flag    = 0;
 685              		.loc 1 193 15
 686 05fa 488B45F0 		movq	-16(%rbp), %rax
 687 05fe 488B5008 		movq	8(%rax), %rdx
 688              		.loc 1 193 24
 689 0602 8B45C4   		movl	-60(%rbp), %eax
 690 0605 4898     		cltq
 691 0607 48C1E005 		salq	$5, %rax
 692 060b 4801D0   		addq	%rdx, %rax
 693              		.loc 1 193 47
 694 060e 48C74010 		movq	$0, 16(%rax)
 694      00000000 
 194:argtable2.c   ****         result->options[option_index].val     = 0;
 695              		.loc 1 194 15
 696 0616 488B45F0 		movq	-16(%rbp), %rax
 697 061a 488B5008 		movq	8(%rax), %rdx
 698              		.loc 1 194 24
 699 061e 8B45C4   		movl	-60(%rbp), %eax
 700 0621 4898     		cltq
 701 0623 48C1E005 		salq	$5, %rax
 702 0627 4801D0   		addq	%rdx, %rax
 703              		.loc 1 194 47
 704 062a C7401800 		movl	$0, 24(%rax)
 704      000000
 705              	.L19:
 706              	.LBE3:
 195:argtable2.c   ****         }
 196:argtable2.c   **** 
 197:argtable2.c   ****     /*dump_longoptions(result);*/
 198:argtable2.c   ****     return result;
 707              		.loc 1 198 12
 708 0631 488B45F0 		movq	-16(%rbp), %rax
 199:argtable2.c   ****     }
 709              		.loc 1 199 5
 710 0635 C9       		leave
 711              		.cfi_def_cfa 7, 8
 712 0636 C3       		ret
 713              		.cfi_endproc
 714              	.LFE3:
 717              	alloc_shortoptions:
 718              	.LFB4:
 200:argtable2.c   **** 
 201:argtable2.c   **** static
 202:argtable2.c   **** char* alloc_shortoptions(struct arg_hdr **table)
 203:argtable2.c   ****    {
 719              		.loc 1 203 4
 720              		.cfi_startproc
 721 0637 F30F1EFA 		endbr64
 722 063b 55       		pushq	%rbp
 723              		.cfi_def_cfa_offset 16
 724              		.cfi_offset 6, -16
 725 063c 4889E5   		movq	%rsp, %rbp
 726              		.cfi_def_cfa_register 6
 727 063f 4883EC50 		subq	$80, %rsp
 728 0643 48897DB8 		movq	%rdi, -72(%rbp)
 204:argtable2.c   ****    char *result;
 205:argtable2.c   ****    size_t len = 2;
 729              		.loc 1 205 11
 730 0647 48C745D0 		movq	$2, -48(%rbp)
 730      02000000 
 206:argtable2.c   ****    int tabindex;
 207:argtable2.c   **** 
 208:argtable2.c   ****    /* determine the total number of option chars required */
 209:argtable2.c   ****    for(tabindex=0; !(table[tabindex]->flag&ARG_TERMINATOR); tabindex++)
 731              		.loc 1 209 16
 732 064f C745CC00 		movl	$0, -52(%rbp)
 732      000000
 733              		.loc 1 209 4
 734 0656 EB53     		jmp	.L34
 735              	.L37:
 736              	.LBB6:
 210:argtable2.c   ****        {
 211:argtable2.c   ****        struct arg_hdr *hdr = table[tabindex];
 737              		.loc 1 211 35
 738 0658 8B45CC   		movl	-52(%rbp), %eax
 739 065b 4898     		cltq
 740 065d 488D14C5 		leaq	0(,%rax,8), %rdx
 740      00000000 
 741 0665 488B45B8 		movq	-72(%rbp), %rax
 742 0669 4801D0   		addq	%rdx, %rax
 743              		.loc 1 211 24
 744 066c 488B00   		movq	(%rax), %rax
 745 066f 488945F8 		movq	%rax, -8(%rbp)
 212:argtable2.c   ****        len += 3 * (hdr->shortopts?strlen(hdr->shortopts):0);
 746              		.loc 1 212 23
 747 0673 488B45F8 		movq	-8(%rbp), %rax
 748 0677 488B4008 		movq	8(%rax), %rax
 749              		.loc 1 212 17
 750 067b 4885C0   		testq	%rax, %rax
 751 067e 741E     		je	.L35
 752              		.loc 1 212 35 discriminator 1
 753 0680 488B45F8 		movq	-8(%rbp), %rax
 754 0684 488B4008 		movq	8(%rax), %rax
 755 0688 4889C7   		movq	%rax, %rdi
 756 068b E8000000 		call	strlen@PLT
 756      00
 757 0690 4889C2   		movq	%rax, %rdx
 758              		.loc 1 212 17 discriminator 1
 759 0693 4889D0   		movq	%rdx, %rax
 760 0696 4801C0   		addq	%rax, %rax
 761 0699 4801D0   		addq	%rdx, %rax
 762 069c EB05     		jmp	.L36
 763              	.L35:
 764              		.loc 1 212 17 is_stmt 0 discriminator 2
 765 069e B8000000 		movl	$0, %eax
 765      00
 766              	.L36:
 767              		.loc 1 212 12 is_stmt 1 discriminator 4
 768 06a3 480145D0 		addq	%rax, -48(%rbp)
 769              	.LBE6:
 209:argtable2.c   ****        {
 770              		.loc 1 209 69 discriminator 4
 771 06a7 8345CC01 		addl	$1, -52(%rbp)
 772              	.L34:
 209:argtable2.c   ****        {
 773              		.loc 1 209 27 discriminator 2
 774 06ab 8B45CC   		movl	-52(%rbp), %eax
 775 06ae 4898     		cltq
 776 06b0 488D14C5 		leaq	0(,%rax,8), %rdx
 776      00000000 
 777 06b8 488B45B8 		movq	-72(%rbp), %rax
 778 06bc 4801D0   		addq	%rdx, %rax
 779 06bf 488B00   		movq	(%rax), %rax
 209:argtable2.c   ****        {
 780              		.loc 1 209 37 discriminator 2
 781 06c2 0FB600   		movzbl	(%rax), %eax
 209:argtable2.c   ****        {
 782              		.loc 1 209 43 discriminator 2
 783 06c5 0FBEC0   		movsbl	%al, %eax
 784 06c8 83E001   		andl	$1, %eax
 209:argtable2.c   ****        {
 785              		.loc 1 209 20 discriminator 2
 786 06cb 85C0     		testl	%eax, %eax
 787 06cd 7489     		je	.L37
 213:argtable2.c   ****        }
 214:argtable2.c   **** 
 215:argtable2.c   ****    result = malloc(len);
 788              		.loc 1 215 13
 789 06cf 488B45D0 		movq	-48(%rbp), %rax
 790 06d3 4889C7   		movq	%rax, %rdi
 791 06d6 E8000000 		call	malloc@PLT
 791      00
 792 06db 488945E8 		movq	%rax, -24(%rbp)
 216:argtable2.c   ****    if (result)
 793              		.loc 1 216 7
 794 06df 48837DE8 		cmpq	$0, -24(%rbp)
 794      00
 795 06e4 0F84EE00 		je	.L38
 795      0000
 796              	.LBB7:
 217:argtable2.c   ****         {
 218:argtable2.c   ****         char *res = result;
 797              		.loc 1 218 15
 798 06ea 488B45E8 		movq	-24(%rbp), %rax
 799 06ee 488945D8 		movq	%rax, -40(%rbp)
 219:argtable2.c   **** 
 220:argtable2.c   ****         /* add a leading ':' so getopt return codes distinguish    */
 221:argtable2.c   ****         /* unrecognised option and options missing argument values */
 222:argtable2.c   ****         *res++=':';
 800              		.loc 1 222 13
 801 06f2 488B45D8 		movq	-40(%rbp), %rax
 802 06f6 488D5001 		leaq	1(%rax), %rdx
 803 06fa 488955D8 		movq	%rdx, -40(%rbp)
 804              		.loc 1 222 15
 805 06fe C6003A   		movb	$58, (%rax)
 223:argtable2.c   **** 
 224:argtable2.c   ****         for(tabindex=0; !(table[tabindex]->flag&ARG_TERMINATOR); tabindex++)
 806              		.loc 1 224 21
 807 0701 C745CC00 		movl	$0, -52(%rbp)
 807      000000
 808              		.loc 1 224 9
 809 0708 E99C0000 		jmp	.L39
 809      00
 810              	.L44:
 811              	.LBB8:
 225:argtable2.c   ****             {
 226:argtable2.c   ****             struct arg_hdr *hdr = table[tabindex];
 812              		.loc 1 226 40
 813 070d 8B45CC   		movl	-52(%rbp), %eax
 814 0710 4898     		cltq
 815 0712 488D14C5 		leaq	0(,%rax,8), %rdx
 815      00000000 
 816 071a 488B45B8 		movq	-72(%rbp), %rax
 817 071e 4801D0   		addq	%rdx, %rax
 818              		.loc 1 226 29
 819 0721 488B00   		movq	(%rax), %rax
 820 0724 488945F0 		movq	%rax, -16(%rbp)
 227:argtable2.c   ****             const char *shortopts = hdr->shortopts;
 821              		.loc 1 227 25
 822 0728 488B45F0 		movq	-16(%rbp), %rax
 823 072c 488B4008 		movq	8(%rax), %rax
 824 0730 488945E0 		movq	%rax, -32(%rbp)
 228:argtable2.c   ****             while(shortopts && *shortopts)
 825              		.loc 1 228 18
 826 0734 EB5D     		jmp	.L40
 827              	.L43:
 229:argtable2.c   ****                 {
 230:argtable2.c   ****                 *res++ = *shortopts++;
 828              		.loc 1 230 36
 829 0736 488B55E0 		movq	-32(%rbp), %rdx
 830 073a 488D4201 		leaq	1(%rdx), %rax
 831 073e 488945E0 		movq	%rax, -32(%rbp)
 832              		.loc 1 230 21
 833 0742 488B45D8 		movq	-40(%rbp), %rax
 834 0746 488D4801 		leaq	1(%rax), %rcx
 835 074a 48894DD8 		movq	%rcx, -40(%rbp)
 836              		.loc 1 230 26
 837 074e 0FB612   		movzbl	(%rdx), %edx
 838              		.loc 1 230 24
 839 0751 8810     		movb	%dl, (%rax)
 231:argtable2.c   ****                 if (hdr->flag & ARG_HASVALUE)
 840              		.loc 1 231 24
 841 0753 488B45F0 		movq	-16(%rbp), %rax
 842 0757 0FB600   		movzbl	(%rax), %eax
 843              		.loc 1 231 31
 844 075a 0FBEC0   		movsbl	%al, %eax
 845 075d 83E002   		andl	$2, %eax
 846              		.loc 1 231 20
 847 0760 85C0     		testl	%eax, %eax
 848 0762 740F     		je	.L41
 232:argtable2.c   ****                     *res++=':';
 849              		.loc 1 232 25
 850 0764 488B45D8 		movq	-40(%rbp), %rax
 851 0768 488D5001 		leaq	1(%rax), %rdx
 852 076c 488955D8 		movq	%rdx, -40(%rbp)
 853              		.loc 1 232 27
 854 0770 C6003A   		movb	$58, (%rax)
 855              	.L41:
 233:argtable2.c   ****                 if (hdr->flag & ARG_HASOPTVALUE)
 856              		.loc 1 233 24
 857 0773 488B45F0 		movq	-16(%rbp), %rax
 858 0777 0FB600   		movzbl	(%rax), %eax
 859              		.loc 1 233 31
 860 077a 0FBEC0   		movsbl	%al, %eax
 861 077d 83E004   		andl	$4, %eax
 862              		.loc 1 233 20
 863 0780 85C0     		testl	%eax, %eax
 864 0782 740F     		je	.L40
 234:argtable2.c   ****                     *res++=':';
 865              		.loc 1 234 25
 866 0784 488B45D8 		movq	-40(%rbp), %rax
 867 0788 488D5001 		leaq	1(%rax), %rdx
 868 078c 488955D8 		movq	%rdx, -40(%rbp)
 869              		.loc 1 234 27
 870 0790 C6003A   		movb	$58, (%rax)
 871              	.L40:
 228:argtable2.c   ****                 {
 872              		.loc 1 228 29
 873 0793 48837DE0 		cmpq	$0, -32(%rbp)
 873      00
 874 0798 740B     		je	.L42
 228:argtable2.c   ****                 {
 875              		.loc 1 228 32 discriminator 1
 876 079a 488B45E0 		movq	-32(%rbp), %rax
 877 079e 0FB600   		movzbl	(%rax), %eax
 228:argtable2.c   ****                 {
 878              		.loc 1 228 29 discriminator 1
 879 07a1 84C0     		testb	%al, %al
 880 07a3 7591     		jne	.L43
 881              	.L42:
 882              	.LBE8:
 224:argtable2.c   ****             {
 883              		.loc 1 224 74 discriminator 2
 884 07a5 8345CC01 		addl	$1, -52(%rbp)
 885              	.L39:
 224:argtable2.c   ****             {
 886              		.loc 1 224 32 discriminator 1
 887 07a9 8B45CC   		movl	-52(%rbp), %eax
 888 07ac 4898     		cltq
 889 07ae 488D14C5 		leaq	0(,%rax,8), %rdx
 889      00000000 
 890 07b6 488B45B8 		movq	-72(%rbp), %rax
 891 07ba 4801D0   		addq	%rdx, %rax
 892 07bd 488B00   		movq	(%rax), %rax
 224:argtable2.c   ****             {
 893              		.loc 1 224 42 discriminator 1
 894 07c0 0FB600   		movzbl	(%rax), %eax
 224:argtable2.c   ****             {
 895              		.loc 1 224 48 discriminator 1
 896 07c3 0FBEC0   		movsbl	%al, %eax
 897 07c6 83E001   		andl	$1, %eax
 224:argtable2.c   ****             {
 898              		.loc 1 224 25 discriminator 1
 899 07c9 85C0     		testl	%eax, %eax
 900 07cb 0F843CFF 		je	.L44
 900      FFFF
 235:argtable2.c   ****                 }
 236:argtable2.c   ****             }
 237:argtable2.c   ****         /* null terminate the string */
 238:argtable2.c   ****         *res=0;
 901              		.loc 1 238 13
 902 07d1 488B45D8 		movq	-40(%rbp), %rax
 903 07d5 C60000   		movb	$0, (%rax)
 904              	.L38:
 905              	.LBE7:
 239:argtable2.c   ****         }
 240:argtable2.c   **** 
 241:argtable2.c   ****    /*printf("alloc_shortoptions() returns \"%s\"\n",(result?result:"NULL"));*/
 242:argtable2.c   ****    return result;
 906              		.loc 1 242 11
 907 07d8 488B45E8 		movq	-24(%rbp), %rax
 243:argtable2.c   ****    }
 908              		.loc 1 243 4
 909 07dc C9       		leave
 910              		.cfi_def_cfa 7, 8
 911 07dd C3       		ret
 912              		.cfi_endproc
 913              	.LFE4:
 916              	arg_endindex:
 917              	.LFB5:
 244:argtable2.c   **** 
 245:argtable2.c   **** 
 246:argtable2.c   **** /* return index of the table terminator entry */
 247:argtable2.c   **** static
 248:argtable2.c   **** int arg_endindex(struct arg_hdr **table)
 249:argtable2.c   ****     {
 918              		.loc 1 249 5
 919              		.cfi_startproc
 920 07de F30F1EFA 		endbr64
 921 07e2 55       		pushq	%rbp
 922              		.cfi_def_cfa_offset 16
 923              		.cfi_offset 6, -16
 924 07e3 4889E5   		movq	%rsp, %rbp
 925              		.cfi_def_cfa_register 6
 926 07e6 48897DE8 		movq	%rdi, -24(%rbp)
 250:argtable2.c   ****     int tabindex=0;
 927              		.loc 1 250 9
 928 07ea C745FC00 		movl	$0, -4(%rbp)
 928      000000
 251:argtable2.c   ****     while (!(table[tabindex]->flag&ARG_TERMINATOR))
 929              		.loc 1 251 11
 930 07f1 EB04     		jmp	.L47
 931              	.L48:
 252:argtable2.c   ****         tabindex++;
 932              		.loc 1 252 17
 933 07f3 8345FC01 		addl	$1, -4(%rbp)
 934              	.L47:
 251:argtable2.c   ****     while (!(table[tabindex]->flag&ARG_TERMINATOR))
 935              		.loc 1 251 19
 936 07f7 8B45FC   		movl	-4(%rbp), %eax
 937 07fa 4898     		cltq
 938 07fc 488D14C5 		leaq	0(,%rax,8), %rdx
 938      00000000 
 939 0804 488B45E8 		movq	-24(%rbp), %rax
 940 0808 4801D0   		addq	%rdx, %rax
 941 080b 488B00   		movq	(%rax), %rax
 251:argtable2.c   ****     while (!(table[tabindex]->flag&ARG_TERMINATOR))
 942              		.loc 1 251 29
 943 080e 0FB600   		movzbl	(%rax), %eax
 251:argtable2.c   ****     while (!(table[tabindex]->flag&ARG_TERMINATOR))
 944              		.loc 1 251 35
 945 0811 0FBEC0   		movsbl	%al, %eax
 946 0814 83E001   		andl	$1, %eax
 251:argtable2.c   ****     while (!(table[tabindex]->flag&ARG_TERMINATOR))
 947              		.loc 1 251 12
 948 0817 85C0     		testl	%eax, %eax
 949 0819 74D8     		je	.L48
 253:argtable2.c   ****     return tabindex;
 950              		.loc 1 253 12
 951 081b 8B45FC   		movl	-4(%rbp), %eax
 254:argtable2.c   ****     }
 952              		.loc 1 254 5
 953 081e 5D       		popq	%rbp
 954              		.cfi_def_cfa 7, 8
 955 081f C3       		ret
 956              		.cfi_endproc
 957              	.LFE5:
 960              	arg_parse_tagged:
 961              	.LFB6:
 255:argtable2.c   **** 
 256:argtable2.c   **** 
 257:argtable2.c   **** static
 258:argtable2.c   **** void arg_parse_tagged(int argc, char **argv, struct arg_hdr **table, struct arg_end *endtable)
 259:argtable2.c   ****     {
 962              		.loc 1 259 5
 963              		.cfi_startproc
 964 0820 F30F1EFA 		endbr64
 965 0824 55       		pushq	%rbp
 966              		.cfi_def_cfa_offset 16
 967              		.cfi_offset 6, -16
 968 0825 4889E5   		movq	%rsp, %rbp
 969              		.cfi_def_cfa_register 6
 970 0828 4883EC60 		subq	$96, %rsp
 971 082c 897DBC   		movl	%edi, -68(%rbp)
 972 082f 488975B0 		movq	%rsi, -80(%rbp)
 973 0833 488955A8 		movq	%rdx, -88(%rbp)
 974 0837 48894DA0 		movq	%rcx, -96(%rbp)
 260:argtable2.c   ****     struct longoptions *longoptions;
 261:argtable2.c   ****     char *shortoptions;
 262:argtable2.c   ****     int copt;
 263:argtable2.c   **** 
 264:argtable2.c   ****     /*printf("arg_parse_tagged(%d,%p,%p,%p)\n",argc,argv,table,endtable);*/
 265:argtable2.c   **** 
 266:argtable2.c   ****     /* allocate short and long option arrays for the given opttable[].   */
 267:argtable2.c   ****     /* if the allocs fail then put an error msg in the last table entry. */
 268:argtable2.c   ****     longoptions  = alloc_longoptions(table);
 975              		.loc 1 268 20
 976 083b 488B45A8 		movq	-88(%rbp), %rax
 977 083f 4889C7   		movq	%rax, %rdi
 978 0842 E889FAFF 		call	alloc_longoptions
 978      FF
 979 0847 488945E0 		movq	%rax, -32(%rbp)
 269:argtable2.c   ****     shortoptions = alloc_shortoptions(table);
 980              		.loc 1 269 20
 981 084b 488B45A8 		movq	-88(%rbp), %rax
 982 084f 4889C7   		movq	%rax, %rdi
 983 0852 E8E0FDFF 		call	alloc_shortoptions
 983      FF
 984 0857 488945E8 		movq	%rax, -24(%rbp)
 270:argtable2.c   ****     if (!longoptions || !shortoptions)
 985              		.loc 1 270 8
 986 085b 48837DE0 		cmpq	$0, -32(%rbp)
 986      00
 987 0860 7407     		je	.L51
 988              		.loc 1 270 22 discriminator 1
 989 0862 48837DE8 		cmpq	$0, -24(%rbp)
 989      00
 990 0867 7537     		jne	.L52
 991              	.L51:
 271:argtable2.c   ****         {
 272:argtable2.c   ****         /* one or both memory allocs failed */
 273:argtable2.c   ****         arg_register_error(endtable,endtable,ARG_EMALLOC,NULL);
 992              		.loc 1 273 9
 993 0869 488B75A0 		movq	-96(%rbp), %rsi
 994 086d 488B45A0 		movq	-96(%rbp), %rax
 995 0871 B9000000 		movl	$0, %ecx
 995      00
 996 0876 BA020000 		movl	$2, %edx
 996      00
 997 087b 4889C7   		movq	%rax, %rdi
 998 087e E87DF7FF 		call	arg_register_error
 998      FF
 274:argtable2.c   ****         /* free anything that was allocated (this is null safe) */
 275:argtable2.c   ****         free(shortoptions);
 999              		.loc 1 275 9
 1000 0883 488B45E8 		movq	-24(%rbp), %rax
 1001 0887 4889C7   		movq	%rax, %rdi
 1002 088a E8000000 		call	free@PLT
 1002      00
 276:argtable2.c   ****         free(longoptions);
 1003              		.loc 1 276 9
 1004 088f 488B45E0 		movq	-32(%rbp), %rax
 1005 0893 4889C7   		movq	%rax, %rdi
 1006 0896 E8000000 		call	free@PLT
 1006      00
 277:argtable2.c   ****         return;
 1007              		.loc 1 277 9
 1008 089b E9250300 		jmp	.L50
 1008      00
 1009              	.L52:
 278:argtable2.c   ****         }
 279:argtable2.c   **** 
 280:argtable2.c   ****     /*dump_longoptions(longoptions);*/
 281:argtable2.c   **** 
 282:argtable2.c   ****     /* reset getopts internal option-index to zero, and disable error reporting */
 283:argtable2.c   ****     optind = 0;
 1010              		.loc 1 283 12
 1011 08a0 488B0500 		movq	optind@GOTPCREL(%rip), %rax
 1011      000000
 1012 08a7 C7000000 		movl	$0, (%rax)
 1012      0000
 284:argtable2.c   ****     opterr = 0;
 1013              		.loc 1 284 12
 1014 08ad 488B0500 		movq	opterr@GOTPCREL(%rip), %rax
 1014      000000
 1015 08b4 C7000000 		movl	$0, (%rax)
 1015      0000
 285:argtable2.c   **** 
 286:argtable2.c   ****     /* fetch and process args using getopt_long */
 287:argtable2.c   ****     while( (copt=getopt_long(argc,argv,shortoptions,longoptions->options,NULL)) != -1)
 1016              		.loc 1 287 10
 1017 08ba E9C10200 		jmp	.L54
 1017      00
 1018              	.L65:
 288:argtable2.c   ****         {
 289:argtable2.c   ****         /*
 290:argtable2.c   ****         printf("optarg='%s'\n",optarg);
 291:argtable2.c   ****         printf("optind=%d\n",optind);
 292:argtable2.c   ****         printf("copt=%c\n",(char)copt);
 293:argtable2.c   ****         printf("optopt=%c (%d)\n",optopt, (int)(optopt));
 294:argtable2.c   ****         */
 295:argtable2.c   ****         switch(copt)
 1019              		.loc 1 295 9
 1020 08bf 837DCC3F 		cmpl	$63, -52(%rbp)
 1021 08c3 0F844401 		je	.L55
 1021      0000
 1022 08c9 837DCC3F 		cmpl	$63, -52(%rbp)
 1023 08cd 0F8FDC01 		jg	.L56
 1023      0000
 1024 08d3 837DCC00 		cmpl	$0, -52(%rbp)
 1025 08d7 740F     		je	.L57
 1026 08d9 837DCC3A 		cmpl	$58, -52(%rbp)
 1027 08dd 0F849201 		je	.L58
 1027      0000
 1028 08e3 E9C70100 		jmp	.L56
 1028      00
 1029              	.L57:
 1030              	.LBB9:
 296:argtable2.c   ****             {
 297:argtable2.c   ****             case 0:
 298:argtable2.c   ****                 {
 299:argtable2.c   ****                 int tabindex = longoptions->getoptval;
 1031              		.loc 1 299 21
 1032 08e8 488B45E0 		movq	-32(%rbp), %rax
 1033 08ec 8B00     		movl	(%rax), %eax
 1034 08ee 8945D0   		movl	%eax, -48(%rbp)
 300:argtable2.c   ****                 void *parent  = table[tabindex]->parent;
 1035              		.loc 1 300 38
 1036 08f1 8B45D0   		movl	-48(%rbp), %eax
 1037 08f4 4898     		cltq
 1038 08f6 488D14C5 		leaq	0(,%rax,8), %rdx
 1038      00000000 
 1039 08fe 488B45A8 		movq	-88(%rbp), %rax
 1040 0902 4801D0   		addq	%rdx, %rax
 1041 0905 488B00   		movq	(%rax), %rax
 1042              		.loc 1 300 23
 1043 0908 488B4030 		movq	48(%rax), %rax
 1044 090c 488945F0 		movq	%rax, -16(%rbp)
 301:argtable2.c   ****                 /*printf("long option detected from argtable[%d]\n", tabindex);*/
 302:argtable2.c   ****                 if (optarg && optarg[0]==0 && (table[tabindex]->flag & ARG_HASVALUE))
 1045              		.loc 1 302 21
 1046 0910 488B0500 		movq	optarg@GOTPCREL(%rip), %rax
 1046      000000
 1047 0917 488B00   		movq	(%rax), %rax
 1048              		.loc 1 302 20
 1049 091a 4885C0   		testq	%rax, %rax
 1050 091d 746A     		je	.L59
 1051              		.loc 1 302 37 discriminator 1
 1052 091f 488B0500 		movq	optarg@GOTPCREL(%rip), %rax
 1052      000000
 1053 0926 488B00   		movq	(%rax), %rax
 1054 0929 0FB600   		movzbl	(%rax), %eax
 1055              		.loc 1 302 28 discriminator 1
 1056 092c 84C0     		testb	%al, %al
 1057 092e 7559     		jne	.L59
 1058              		.loc 1 302 53 discriminator 2
 1059 0930 8B45D0   		movl	-48(%rbp), %eax
 1060 0933 4898     		cltq
 1061 0935 488D14C5 		leaq	0(,%rax,8), %rdx
 1061      00000000 
 1062 093d 488B45A8 		movq	-88(%rbp), %rax
 1063 0941 4801D0   		addq	%rdx, %rax
 1064 0944 488B00   		movq	(%rax), %rax
 1065              		.loc 1 302 63 discriminator 2
 1066 0947 0FB600   		movzbl	(%rax), %eax
 1067              		.loc 1 302 70 discriminator 2
 1068 094a 0FBEC0   		movsbl	%al, %eax
 1069 094d 83E002   		andl	$2, %eax
 1070              		.loc 1 302 44 discriminator 2
 1071 0950 85C0     		testl	%eax, %eax
 1072 0952 7435     		je	.L59
 303:argtable2.c   ****                     {
 304:argtable2.c   ****                     /* printf(": long option %s requires an argument\n",argv[optind-1]); */
 305:argtable2.c   ****                     arg_register_error(endtable,endtable,ARG_EMISSARG,argv[optind-1]);
 1073              		.loc 1 305 75
 1074 0954 488B0500 		movq	optind@GOTPCREL(%rip), %rax
 1074      000000
 1075 095b 8B00     		movl	(%rax), %eax
 1076 095d 4898     		cltq
 1077 095f 48C1E003 		salq	$3, %rax
 1078 0963 488D50F8 		leaq	-8(%rax), %rdx
 1079 0967 488B45B0 		movq	-80(%rbp), %rax
 1080 096b 4801D0   		addq	%rdx, %rax
 1081              		.loc 1 305 21
 1082 096e 488B10   		movq	(%rax), %rdx
 1083 0971 488B75A0 		movq	-96(%rbp), %rsi
 1084 0975 488B45A0 		movq	-96(%rbp), %rax
 1085 0979 4889D1   		movq	%rdx, %rcx
 1086 097c BA050000 		movl	$5, %edx
 1086      00
 1087 0981 4889C7   		movq	%rax, %rdi
 1088 0984 E877F6FF 		call	arg_register_error
 1088      FF
 1089              	.L59:
 306:argtable2.c   ****                     /* continue to scan the (empty) argument value to enforce argument count checki
 307:argtable2.c   ****                     }
 308:argtable2.c   ****                 if (table[tabindex]->scanfn)
 1090              		.loc 1 308 26
 1091 0989 8B45D0   		movl	-48(%rbp), %eax
 1092 098c 4898     		cltq
 1093 098e 488D14C5 		leaq	0(,%rax,8), %rdx
 1093      00000000 
 1094 0996 488B45A8 		movq	-88(%rbp), %rax
 1095 099a 4801D0   		addq	%rdx, %rax
 1096 099d 488B00   		movq	(%rax), %rax
 1097              		.loc 1 308 36
 1098 09a0 488B4040 		movq	64(%rax), %rax
 1099              		.loc 1 308 20
 1100 09a4 4885C0   		testq	%rax, %rax
 1101 09a7 0F84D301 		je	.L54
 1101      0000
 1102              	.LBB10:
 309:argtable2.c   ****                     {
 310:argtable2.c   ****                     int errorcode = table[tabindex]->scanfn(parent,optarg);
 1103              		.loc 1 310 42
 1104 09ad 8B45D0   		movl	-48(%rbp), %eax
 1105 09b0 4898     		cltq
 1106 09b2 488D14C5 		leaq	0(,%rax,8), %rdx
 1106      00000000 
 1107 09ba 488B45A8 		movq	-88(%rbp), %rax
 1108 09be 4801D0   		addq	%rdx, %rax
 1109 09c1 488B00   		movq	(%rax), %rax
 1110              		.loc 1 310 52
 1111 09c4 488B4840 		movq	64(%rax), %rcx
 1112              		.loc 1 310 37
 1113 09c8 488B0500 		movq	optarg@GOTPCREL(%rip), %rax
 1113      000000
 1114 09cf 488B10   		movq	(%rax), %rdx
 1115 09d2 488B45F0 		movq	-16(%rbp), %rax
 1116 09d6 4889D6   		movq	%rdx, %rsi
 1117 09d9 4889C7   		movq	%rax, %rdi
 1118 09dc FFD1     		call	*%rcx
 1119              	.LVL0:
 1120 09de 8945D4   		movl	%eax, -44(%rbp)
 311:argtable2.c   ****                     if (errorcode!=0)
 1121              		.loc 1 311 24
 1122 09e1 837DD400 		cmpl	$0, -44(%rbp)
 1123 09e5 0F849501 		je	.L54
 1123      0000
 312:argtable2.c   ****                         arg_register_error(endtable,parent,errorcode,optarg);
 1124              		.loc 1 312 25
 1125 09eb 488B0500 		movq	optarg@GOTPCREL(%rip), %rax
 1125      000000
 1126 09f2 488B08   		movq	(%rax), %rcx
 1127 09f5 8B55D4   		movl	-44(%rbp), %edx
 1128 09f8 488B75F0 		movq	-16(%rbp), %rsi
 1129 09fc 488B45A0 		movq	-96(%rbp), %rax
 1130 0a00 4889C7   		movq	%rax, %rdi
 1131 0a03 E8F8F5FF 		call	arg_register_error
 1131      FF
 1132              	.LBE10:
 1133              	.LBE9:
 313:argtable2.c   ****                     }
 314:argtable2.c   ****                 }
 315:argtable2.c   ****                 break;
 1134              		.loc 1 315 17
 1135 0a08 E9730100 		jmp	.L54
 1135      00
 1136              	.L55:
 316:argtable2.c   **** 
 317:argtable2.c   ****             case '?':
 318:argtable2.c   ****                 /*
 319:argtable2.c   ****                 * getopt_long() found an unrecognised short option.
 320:argtable2.c   ****                 * if it was a short option its value is in optopt
 321:argtable2.c   ****                 * if it was a long option then optopt=0
 322:argtable2.c   ****                 */
 323:argtable2.c   ****                 switch (optopt)
 1137              		.loc 1 323 17
 1138 0a0d 488B0500 		movq	optopt@GOTPCREL(%rip), %rax
 1138      000000
 1139 0a14 8B00     		movl	(%rax), %eax
 1140 0a16 85C0     		testl	%eax, %eax
 1141 0a18 7537     		jne	.L61
 324:argtable2.c   ****                     {
 325:argtable2.c   ****                     case 0:
 326:argtable2.c   ****                         /*printf("?0 unrecognised long option %s\n",argv[optind-1]);*/
 327:argtable2.c   ****                         arg_register_error(endtable,endtable,ARG_ELONGOPT,argv[optind-1]);
 1142              		.loc 1 327 79
 1143 0a1a 488B0500 		movq	optind@GOTPCREL(%rip), %rax
 1143      000000
 1144 0a21 8B00     		movl	(%rax), %eax
 1145 0a23 4898     		cltq
 1146 0a25 48C1E003 		salq	$3, %rax
 1147 0a29 488D50F8 		leaq	-8(%rax), %rdx
 1148 0a2d 488B45B0 		movq	-80(%rbp), %rax
 1149 0a31 4801D0   		addq	%rdx, %rax
 1150              		.loc 1 327 25
 1151 0a34 488B10   		movq	(%rax), %rdx
 1152 0a37 488B75A0 		movq	-96(%rbp), %rsi
 1153 0a3b 488B45A0 		movq	-96(%rbp), %rax
 1154 0a3f 4889D1   		movq	%rdx, %rcx
 1155 0a42 BA040000 		movl	$4, %edx
 1155      00
 1156 0a47 4889C7   		movq	%rax, %rdi
 1157 0a4a E8B1F5FF 		call	arg_register_error
 1157      FF
 328:argtable2.c   ****                         break;
 1158              		.loc 1 328 25
 1159 0a4f EB1F     		jmp	.L62
 1160              	.L61:
 329:argtable2.c   ****                     default:
 330:argtable2.c   ****                         /*printf("?* unrecognised short option '%c'\n",optopt);*/
 331:argtable2.c   ****                         arg_register_error(endtable,endtable,optopt,NULL);
 1161              		.loc 1 331 25
 1162 0a51 488B0500 		movq	optopt@GOTPCREL(%rip), %rax
 1162      000000
 1163 0a58 8B10     		movl	(%rax), %edx
 1164 0a5a 488B75A0 		movq	-96(%rbp), %rsi
 1165 0a5e 488B45A0 		movq	-96(%rbp), %rax
 1166 0a62 B9000000 		movl	$0, %ecx
 1166      00
 1167 0a67 4889C7   		movq	%rax, %rdi
 1168 0a6a E891F5FF 		call	arg_register_error
 1168      FF
 332:argtable2.c   ****                         break;
 1169              		.loc 1 332 25
 1170 0a6f 90       		nop
 1171              	.L62:
 333:argtable2.c   ****                     }
 334:argtable2.c   ****                 break;
 1172              		.loc 1 334 17
 1173 0a70 E90B0100 		jmp	.L54
 1173      00
 1174              	.L58:
 335:argtable2.c   **** 
 336:argtable2.c   ****             case':':
 337:argtable2.c   ****                 /*
 338:argtable2.c   ****                 * getopt_long() found an option with its argument missing.
 339:argtable2.c   ****                 */
 340:argtable2.c   ****                 /*printf(": option %s requires an argument\n",argv[optind-1]); */
 341:argtable2.c   ****                 arg_register_error(endtable,endtable,ARG_EMISSARG,argv[optind-1]); 
 1175              		.loc 1 341 71
 1176 0a75 488B0500 		movq	optind@GOTPCREL(%rip), %rax
 1176      000000
 1177 0a7c 8B00     		movl	(%rax), %eax
 1178 0a7e 4898     		cltq
 1179 0a80 48C1E003 		salq	$3, %rax
 1180 0a84 488D50F8 		leaq	-8(%rax), %rdx
 1181 0a88 488B45B0 		movq	-80(%rbp), %rax
 1182 0a8c 4801D0   		addq	%rdx, %rax
 1183              		.loc 1 341 17
 1184 0a8f 488B10   		movq	(%rax), %rdx
 1185 0a92 488B75A0 		movq	-96(%rbp), %rsi
 1186 0a96 488B45A0 		movq	-96(%rbp), %rax
 1187 0a9a 4889D1   		movq	%rdx, %rcx
 1188 0a9d BA050000 		movl	$5, %edx
 1188      00
 1189 0aa2 4889C7   		movq	%rax, %rdi
 1190 0aa5 E856F5FF 		call	arg_register_error
 1190      FF
 342:argtable2.c   ****                 break;
 1191              		.loc 1 342 17
 1192 0aaa E9D10000 		jmp	.L54
 1192      00
 1193              	.L56:
 1194              	.LBB11:
 343:argtable2.c   **** 
 344:argtable2.c   ****             default:
 345:argtable2.c   ****                 {
 346:argtable2.c   ****                 /* getopt_long() found a valid short option */
 347:argtable2.c   ****                 int tabindex = find_shortoption(table,(char)copt);
 1195              		.loc 1 347 55
 1196 0aaf 8B45CC   		movl	-52(%rbp), %eax
 1197              		.loc 1 347 32
 1198 0ab2 0FBED0   		movsbl	%al, %edx
 1199 0ab5 488B45A8 		movq	-88(%rbp), %rax
 1200 0ab9 89D6     		movl	%edx, %esi
 1201 0abb 4889C7   		movq	%rax, %rdi
 1202 0abe E83FF6FF 		call	find_shortoption
 1202      FF
 1203 0ac3 8945D8   		movl	%eax, -40(%rbp)
 348:argtable2.c   ****                 /*printf("short option detected from argtable[%d]\n", tabindex);*/
 349:argtable2.c   ****                 if (tabindex==-1)
 1204              		.loc 1 349 20
 1205 0ac6 837DD8FF 		cmpl	$-1, -40(%rbp)
 1206 0aca 751D     		jne	.L63
 350:argtable2.c   ****                     {
 351:argtable2.c   ****                     /* should never get here - but handle it just in case */
 352:argtable2.c   ****                     /*printf("unrecognised short option %d\n",copt);*/
 353:argtable2.c   ****                     arg_register_error(endtable,endtable,copt,NULL);
 1207              		.loc 1 353 21
 1208 0acc 8B55CC   		movl	-52(%rbp), %edx
 1209 0acf 488B75A0 		movq	-96(%rbp), %rsi
 1210 0ad3 488B45A0 		movq	-96(%rbp), %rax
 1211 0ad7 B9000000 		movl	$0, %ecx
 1211      00
 1212 0adc 4889C7   		movq	%rax, %rdi
 1213 0adf E81CF5FF 		call	arg_register_error
 1213      FF
 1214 0ae4 E9960000 		jmp	.L66
 1214      00
 1215              	.L63:
 354:argtable2.c   ****                     }
 355:argtable2.c   ****                 else
 356:argtable2.c   ****                     {
 357:argtable2.c   ****                     if (table[tabindex]->scanfn)
 1216              		.loc 1 357 30
 1217 0ae9 8B45D8   		movl	-40(%rbp), %eax
 1218 0aec 4898     		cltq
 1219 0aee 488D14C5 		leaq	0(,%rax,8), %rdx
 1219      00000000 
 1220 0af6 488B45A8 		movq	-88(%rbp), %rax
 1221 0afa 4801D0   		addq	%rdx, %rax
 1222 0afd 488B00   		movq	(%rax), %rax
 1223              		.loc 1 357 40
 1224 0b00 488B4040 		movq	64(%rax), %rax
 1225              		.loc 1 357 24
 1226 0b04 4885C0   		testq	%rax, %rax
 1227 0b07 7476     		je	.L66
 1228              	.LBB12:
 358:argtable2.c   ****                         {
 359:argtable2.c   ****                         void *parent  = table[tabindex]->parent;
 1229              		.loc 1 359 46
 1230 0b09 8B45D8   		movl	-40(%rbp), %eax
 1231 0b0c 4898     		cltq
 1232 0b0e 488D14C5 		leaq	0(,%rax,8), %rdx
 1232      00000000 
 1233 0b16 488B45A8 		movq	-88(%rbp), %rax
 1234 0b1a 4801D0   		addq	%rdx, %rax
 1235 0b1d 488B00   		movq	(%rax), %rax
 1236              		.loc 1 359 31
 1237 0b20 488B4030 		movq	48(%rax), %rax
 1238 0b24 488945F8 		movq	%rax, -8(%rbp)
 360:argtable2.c   ****                         int errorcode = table[tabindex]->scanfn(parent,optarg);
 1239              		.loc 1 360 46
 1240 0b28 8B45D8   		movl	-40(%rbp), %eax
 1241 0b2b 4898     		cltq
 1242 0b2d 488D14C5 		leaq	0(,%rax,8), %rdx
 1242      00000000 
 1243 0b35 488B45A8 		movq	-88(%rbp), %rax
 1244 0b39 4801D0   		addq	%rdx, %rax
 1245 0b3c 488B00   		movq	(%rax), %rax
 1246              		.loc 1 360 56
 1247 0b3f 488B4840 		movq	64(%rax), %rcx
 1248              		.loc 1 360 41
 1249 0b43 488B0500 		movq	optarg@GOTPCREL(%rip), %rax
 1249      000000
 1250 0b4a 488B10   		movq	(%rax), %rdx
 1251 0b4d 488B45F8 		movq	-8(%rbp), %rax
 1252 0b51 4889D6   		movq	%rdx, %rsi
 1253 0b54 4889C7   		movq	%rax, %rdi
 1254 0b57 FFD1     		call	*%rcx
 1255              	.LVL1:
 1256 0b59 8945DC   		movl	%eax, -36(%rbp)
 361:argtable2.c   ****                         if (errorcode!=0)
 1257              		.loc 1 361 28
 1258 0b5c 837DDC00 		cmpl	$0, -36(%rbp)
 1259 0b60 741D     		je	.L66
 362:argtable2.c   ****                             arg_register_error(endtable,parent,errorcode,optarg);
 1260              		.loc 1 362 29
 1261 0b62 488B0500 		movq	optarg@GOTPCREL(%rip), %rax
 1261      000000
 1262 0b69 488B08   		movq	(%rax), %rcx
 1263 0b6c 8B55DC   		movl	-36(%rbp), %edx
 1264 0b6f 488B75F8 		movq	-8(%rbp), %rsi
 1265 0b73 488B45A0 		movq	-96(%rbp), %rax
 1266 0b77 4889C7   		movq	%rax, %rdi
 1267 0b7a E881F4FF 		call	arg_register_error
 1267      FF
 1268              	.L66:
 1269              	.LBE12:
 363:argtable2.c   ****                         }
 364:argtable2.c   ****                     }
 365:argtable2.c   ****                 break;
 1270              		.loc 1 365 17
 1271 0b7f 90       		nop
 1272              	.L54:
 1273              	.LBE11:
 287:argtable2.c   ****         {
 1274              		.loc 1 287 64
 1275 0b80 488B45E0 		movq	-32(%rbp), %rax
 1276 0b84 488B4808 		movq	8(%rax), %rcx
 287:argtable2.c   ****         {
 1277              		.loc 1 287 18
 1278 0b88 488B55E8 		movq	-24(%rbp), %rdx
 1279 0b8c 488B75B0 		movq	-80(%rbp), %rsi
 1280 0b90 8B45BC   		movl	-68(%rbp), %eax
 1281 0b93 41B80000 		movl	$0, %r8d
 1281      0000
 1282 0b99 89C7     		movl	%eax, %edi
 1283 0b9b E8000000 		call	getopt_long@PLT
 1283      00
 1284 0ba0 8945CC   		movl	%eax, -52(%rbp)
 287:argtable2.c   ****         {
 1285              		.loc 1 287 81
 1286 0ba3 837DCCFF 		cmpl	$-1, -52(%rbp)
 1287 0ba7 0F8512FD 		jne	.L65
 1287      FFFF
 366:argtable2.c   ****                 }
 367:argtable2.c   ****             }
 368:argtable2.c   ****         }
 369:argtable2.c   **** 
 370:argtable2.c   ****     free(shortoptions);
 1288              		.loc 1 370 5
 1289 0bad 488B45E8 		movq	-24(%rbp), %rax
 1290 0bb1 4889C7   		movq	%rax, %rdi
 1291 0bb4 E8000000 		call	free@PLT
 1291      00
 371:argtable2.c   ****     free(longoptions);
 1292              		.loc 1 371 5
 1293 0bb9 488B45E0 		movq	-32(%rbp), %rax
 1294 0bbd 4889C7   		movq	%rax, %rdi
 1295 0bc0 E8000000 		call	free@PLT
 1295      00
 1296              	.L50:
 372:argtable2.c   ****     }
 1297              		.loc 1 372 5
 1298 0bc5 C9       		leave
 1299              		.cfi_def_cfa 7, 8
 1300 0bc6 C3       		ret
 1301              		.cfi_endproc
 1302              	.LFE6:
 1305              	arg_parse_untagged:
 1306              	.LFB7:
 373:argtable2.c   **** 
 374:argtable2.c   **** 
 375:argtable2.c   **** static
 376:argtable2.c   **** void arg_parse_untagged(int argc, char **argv, struct arg_hdr **table, struct arg_end *endtable)
 377:argtable2.c   ****     {
 1307              		.loc 1 377 5
 1308              		.cfi_startproc
 1309 0bc7 F30F1EFA 		endbr64
 1310 0bcb 55       		pushq	%rbp
 1311              		.cfi_def_cfa_offset 16
 1312              		.cfi_offset 6, -16
 1313 0bcc 4889E5   		movq	%rsp, %rbp
 1314              		.cfi_def_cfa_register 6
 1315 0bcf 4883EC50 		subq	$80, %rsp
 1316 0bd3 897DCC   		movl	%edi, -52(%rbp)
 1317 0bd6 488975C0 		movq	%rsi, -64(%rbp)
 1318 0bda 488955B8 		movq	%rdx, -72(%rbp)
 1319 0bde 48894DB0 		movq	%rcx, -80(%rbp)
 378:argtable2.c   ****     int tabindex=0;
 1320              		.loc 1 378 9
 1321 0be2 C745DC00 		movl	$0, -36(%rbp)
 1321      000000
 379:argtable2.c   ****     int errorlast=0;
 1322              		.loc 1 379 9
 1323 0be9 C745E000 		movl	$0, -32(%rbp)
 1323      000000
 380:argtable2.c   ****     const char *optarglast = NULL;
 1324              		.loc 1 380 17
 1325 0bf0 48C745E8 		movq	$0, -24(%rbp)
 1325      00000000 
 381:argtable2.c   ****     void *parentlast = NULL;
 1326              		.loc 1 381 11
 1327 0bf8 48C745F0 		movq	$0, -16(%rbp)
 1327      00000000 
 382:argtable2.c   **** 
 383:argtable2.c   ****     /*printf("arg_parse_untagged(%d,%p,%p,%p)\n",argc,argv,table,endtable);*/
 384:argtable2.c   ****     while (!(table[tabindex]->flag&ARG_TERMINATOR))
 1328              		.loc 1 384 11
 1329 0c00 E9410100 		jmp	.L68
 1329      00
 1330              	.L75:
 1331              	.LBB13:
 385:argtable2.c   ****         {
 386:argtable2.c   ****         void *parent;
 387:argtable2.c   ****         int errorcode;
 388:argtable2.c   **** 
 389:argtable2.c   ****         /* if we have exhausted our argv[optind] entries then we have finished */
 390:argtable2.c   ****         if (optind>=argc)
 1332              		.loc 1 390 19
 1333 0c05 488B0500 		movq	optind@GOTPCREL(%rip), %rax
 1333      000000
 1334 0c0c 8B00     		movl	(%rax), %eax
 1335              		.loc 1 390 12
 1336 0c0e 3945CC   		cmpl	%eax, -52(%rbp)
 1337 0c11 0F8EDC01 		jle	.L79
 1337      0000
 391:argtable2.c   ****             {
 392:argtable2.c   ****             /*printf("arg_parse_untagged(): argv[] exhausted\n");*/
 393:argtable2.c   ****             return;
 394:argtable2.c   ****             }
 395:argtable2.c   **** 
 396:argtable2.c   ****         /* skip table entries with non-null long or short options (they are not untagged entries) *
 397:argtable2.c   ****         if (table[tabindex]->longopts || table[tabindex]->shortopts)
 1338              		.loc 1 397 18
 1339 0c17 8B45DC   		movl	-36(%rbp), %eax
 1340 0c1a 4898     		cltq
 1341 0c1c 488D14C5 		leaq	0(,%rax,8), %rdx
 1341      00000000 
 1342 0c24 488B45B8 		movq	-72(%rbp), %rax
 1343 0c28 4801D0   		addq	%rdx, %rax
 1344 0c2b 488B00   		movq	(%rax), %rax
 1345              		.loc 1 397 28
 1346 0c2e 488B4010 		movq	16(%rax), %rax
 1347              		.loc 1 397 12
 1348 0c32 4885C0   		testq	%rax, %rax
 1349 0c35 7520     		jne	.L71
 1350              		.loc 1 397 47 discriminator 2
 1351 0c37 8B45DC   		movl	-36(%rbp), %eax
 1352 0c3a 4898     		cltq
 1353 0c3c 488D14C5 		leaq	0(,%rax,8), %rdx
 1353      00000000 
 1354 0c44 488B45B8 		movq	-72(%rbp), %rax
 1355 0c48 4801D0   		addq	%rdx, %rax
 1356 0c4b 488B00   		movq	(%rax), %rax
 1357              		.loc 1 397 57 discriminator 2
 1358 0c4e 488B4008 		movq	8(%rax), %rax
 1359              		.loc 1 397 39 discriminator 2
 1360 0c52 4885C0   		testq	%rax, %rax
 1361 0c55 7409     		je	.L72
 1362              	.L71:
 398:argtable2.c   ****             {
 399:argtable2.c   ****             /*printf("arg_parse_untagged(): skipping argtable[%d] (tagged argument)\n",tabindex);*/
 400:argtable2.c   ****             tabindex++;
 1363              		.loc 1 400 21 discriminator 3
 1364 0c57 8345DC01 		addl	$1, -36(%rbp)
 401:argtable2.c   ****             continue;
 1365              		.loc 1 401 13 discriminator 3
 1366 0c5b E9E60000 		jmp	.L68
 1366      00
 1367              	.L72:
 402:argtable2.c   ****             }
 403:argtable2.c   **** 
 404:argtable2.c   ****         /* skip table entries with NULL scanfn */
 405:argtable2.c   ****         if (!(table[tabindex]->scanfn))
 1368              		.loc 1 405 20
 1369 0c60 8B45DC   		movl	-36(%rbp), %eax
 1370 0c63 4898     		cltq
 1371 0c65 488D14C5 		leaq	0(,%rax,8), %rdx
 1371      00000000 
 1372 0c6d 488B45B8 		movq	-72(%rbp), %rax
 1373 0c71 4801D0   		addq	%rdx, %rax
 1374 0c74 488B00   		movq	(%rax), %rax
 1375              		.loc 1 405 30
 1376 0c77 488B4040 		movq	64(%rax), %rax
 1377              		.loc 1 405 12
 1378 0c7b 4885C0   		testq	%rax, %rax
 1379 0c7e 7509     		jne	.L73
 406:argtable2.c   ****             {
 407:argtable2.c   ****             /*printf("arg_parse_untagged(): skipping argtable[%d] (NULL scanfn)\n",tabindex);*/
 408:argtable2.c   ****             tabindex++;
 1380              		.loc 1 408 21 discriminator 1
 1381 0c80 8345DC01 		addl	$1, -36(%rbp)
 409:argtable2.c   ****             continue;
 1382              		.loc 1 409 13 discriminator 1
 1383 0c84 E9BD0000 		jmp	.L68
 1383      00
 1384              	.L73:
 410:argtable2.c   ****             }
 411:argtable2.c   **** 
 412:argtable2.c   ****         /* attempt to scan the current argv[optind] with the current     */
 413:argtable2.c   ****         /* table[tabindex] entry. If it succeeds then keep it, otherwise */
 414:argtable2.c   ****         /* try again with the next table[] entry.                        */
 415:argtable2.c   ****         parent = table[tabindex]->parent;
 1385              		.loc 1 415 23
 1386 0c89 8B45DC   		movl	-36(%rbp), %eax
 1387 0c8c 4898     		cltq
 1388 0c8e 488D14C5 		leaq	0(,%rax,8), %rdx
 1388      00000000 
 1389 0c96 488B45B8 		movq	-72(%rbp), %rax
 1390 0c9a 4801D0   		addq	%rdx, %rax
 1391 0c9d 488B00   		movq	(%rax), %rax
 1392              		.loc 1 415 16
 1393 0ca0 488B4030 		movq	48(%rax), %rax
 1394 0ca4 488945F8 		movq	%rax, -8(%rbp)
 416:argtable2.c   ****         errorcode = table[tabindex]->scanfn(parent,argv[optind]);
 1395              		.loc 1 416 26
 1396 0ca8 8B45DC   		movl	-36(%rbp), %eax
 1397 0cab 4898     		cltq
 1398 0cad 488D14C5 		leaq	0(,%rax,8), %rdx
 1398      00000000 
 1399 0cb5 488B45B8 		movq	-72(%rbp), %rax
 1400 0cb9 4801D0   		addq	%rdx, %rax
 1401 0cbc 488B00   		movq	(%rax), %rax
 1402              		.loc 1 416 36
 1403 0cbf 488B4840 		movq	64(%rax), %rcx
 1404              		.loc 1 416 56
 1405 0cc3 488B0500 		movq	optind@GOTPCREL(%rip), %rax
 1405      000000
 1406 0cca 8B00     		movl	(%rax), %eax
 1407 0ccc 4898     		cltq
 1408 0cce 488D14C5 		leaq	0(,%rax,8), %rdx
 1408      00000000 
 1409 0cd6 488B45C0 		movq	-64(%rbp), %rax
 1410 0cda 4801D0   		addq	%rdx, %rax
 1411              		.loc 1 416 21
 1412 0cdd 488B10   		movq	(%rax), %rdx
 1413 0ce0 488B45F8 		movq	-8(%rbp), %rax
 1414 0ce4 4889D6   		movq	%rdx, %rsi
 1415 0ce7 4889C7   		movq	%rax, %rdi
 1416 0cea FFD1     		call	*%rcx
 1417              	.LVL2:
 1418 0cec 8945E4   		movl	%eax, -28(%rbp)
 417:argtable2.c   ****         if (errorcode==0)
 1419              		.loc 1 417 12
 1420 0cef 837DE400 		cmpl	$0, -28(%rbp)
 1421 0cf3 751E     		jne	.L74
 418:argtable2.c   ****             {
 419:argtable2.c   ****             /* success, move onto next argv[optind] but stay with same table[tabindex] */
 420:argtable2.c   ****             /*printf("arg_parse_untagged(): argtable[%d] successfully matched\n",tabindex);*/
 421:argtable2.c   ****             optind++;
 1422              		.loc 1 421 19
 1423 0cf5 488B0500 		movq	optind@GOTPCREL(%rip), %rax
 1423      000000
 1424 0cfc 8B00     		movl	(%rax), %eax
 1425 0cfe 8D5001   		leal	1(%rax), %edx
 1426 0d01 488B0500 		movq	optind@GOTPCREL(%rip), %rax
 1426      000000
 1427 0d08 8910     		movl	%edx, (%rax)
 422:argtable2.c   **** 
 423:argtable2.c   ****             /* clear the last tentative error */
 424:argtable2.c   ****             errorlast = 0;
 1428              		.loc 1 424 23
 1429 0d0a C745E000 		movl	$0, -32(%rbp)
 1429      000000
 1430 0d11 EB33     		jmp	.L68
 1431              	.L74:
 425:argtable2.c   ****             }
 426:argtable2.c   ****         else
 427:argtable2.c   ****             {
 428:argtable2.c   ****             /* failure, try same argv[optind] with next table[tabindex] entry */
 429:argtable2.c   ****             /*printf("arg_parse_untagged(): argtable[%d] failed match\n",tabindex);*/
 430:argtable2.c   ****             tabindex++;
 1432              		.loc 1 430 21
 1433 0d13 8345DC01 		addl	$1, -36(%rbp)
 431:argtable2.c   **** 
 432:argtable2.c   ****             /* remember this as a tentative error we may wish to reinstate later */
 433:argtable2.c   ****             errorlast = errorcode;
 1434              		.loc 1 433 23
 1435 0d17 8B45E4   		movl	-28(%rbp), %eax
 1436 0d1a 8945E0   		movl	%eax, -32(%rbp)
 434:argtable2.c   ****             optarglast = argv[optind];
 1437              		.loc 1 434 30
 1438 0d1d 488B0500 		movq	optind@GOTPCREL(%rip), %rax
 1438      000000
 1439 0d24 8B00     		movl	(%rax), %eax
 1440 0d26 4898     		cltq
 1441 0d28 488D14C5 		leaq	0(,%rax,8), %rdx
 1441      00000000 
 1442 0d30 488B45C0 		movq	-64(%rbp), %rax
 1443 0d34 4801D0   		addq	%rdx, %rax
 1444              		.loc 1 434 24
 1445 0d37 488B00   		movq	(%rax), %rax
 1446 0d3a 488945E8 		movq	%rax, -24(%rbp)
 435:argtable2.c   ****             parentlast = parent;
 1447              		.loc 1 435 24
 1448 0d3e 488B45F8 		movq	-8(%rbp), %rax
 1449 0d42 488945F0 		movq	%rax, -16(%rbp)
 1450              	.L68:
 1451              	.LBE13:
 384:argtable2.c   ****         {
 1452              		.loc 1 384 19
 1453 0d46 8B45DC   		movl	-36(%rbp), %eax
 1454 0d49 4898     		cltq
 1455 0d4b 488D14C5 		leaq	0(,%rax,8), %rdx
 1455      00000000 
 1456 0d53 488B45B8 		movq	-72(%rbp), %rax
 1457 0d57 4801D0   		addq	%rdx, %rax
 1458 0d5a 488B00   		movq	(%rax), %rax
 384:argtable2.c   ****         {
 1459              		.loc 1 384 29
 1460 0d5d 0FB600   		movzbl	(%rax), %eax
 384:argtable2.c   ****         {
 1461              		.loc 1 384 35
 1462 0d60 0FBEC0   		movsbl	%al, %eax
 1463 0d63 83E001   		andl	$1, %eax
 384:argtable2.c   ****         {
 1464              		.loc 1 384 12
 1465 0d66 85C0     		testl	%eax, %eax
 1466 0d68 0F8497FE 		je	.L75
 1466      FFFF
 436:argtable2.c   ****             }
 437:argtable2.c   **** 
 438:argtable2.c   ****         }
 439:argtable2.c   **** 
 440:argtable2.c   ****     /* if a tenative error still remains at this point then register it as a proper error */
 441:argtable2.c   ****     if (errorlast)
 1467              		.loc 1 441 8
 1468 0d6e 837DE000 		cmpl	$0, -32(%rbp)
 1469 0d72 746F     		je	.L77
 442:argtable2.c   ****         {
 443:argtable2.c   ****         arg_register_error(endtable,parentlast,errorlast,optarglast);
 1470              		.loc 1 443 9
 1471 0d74 488B4DE8 		movq	-24(%rbp), %rcx
 1472 0d78 8B55E0   		movl	-32(%rbp), %edx
 1473 0d7b 488B75F0 		movq	-16(%rbp), %rsi
 1474 0d7f 488B45B0 		movq	-80(%rbp), %rax
 1475 0d83 4889C7   		movq	%rax, %rdi
 1476 0d86 E875F2FF 		call	arg_register_error
 1476      FF
 444:argtable2.c   ****         optind++;
 1477              		.loc 1 444 15
 1478 0d8b 488B0500 		movq	optind@GOTPCREL(%rip), %rax
 1478      000000
 1479 0d92 8B00     		movl	(%rax), %eax
 1480 0d94 8D5001   		leal	1(%rax), %edx
 1481 0d97 488B0500 		movq	optind@GOTPCREL(%rip), %rax
 1481      000000
 1482 0d9e 8910     		movl	%edx, (%rax)
 445:argtable2.c   ****         }
 446:argtable2.c   **** 
 447:argtable2.c   ****     /* only get here when not all argv[] entries were consumed */
 448:argtable2.c   ****     /* register an error for each unused argv[] entry */
 449:argtable2.c   ****     while (optind<argc)
 1483              		.loc 1 449 11
 1484 0da0 EB41     		jmp	.L77
 1485              	.L78:
 450:argtable2.c   ****         {
 451:argtable2.c   ****         /*printf("arg_parse_untagged(): argv[%d]=\"%s\" not consumed\n",optind,argv[optind]);*/
 452:argtable2.c   ****         arg_register_error(endtable,endtable,ARG_ENOMATCH,argv[optind++]);
 1486              		.loc 1 452 70
 1487 0da2 488B0500 		movq	optind@GOTPCREL(%rip), %rax
 1487      000000
 1488 0da9 8B00     		movl	(%rax), %eax
 1489 0dab 8D4801   		leal	1(%rax), %ecx
 1490 0dae 488B1500 		movq	optind@GOTPCREL(%rip), %rdx
 1490      000000
 1491 0db5 890A     		movl	%ecx, (%rdx)
 1492 0db7 4898     		cltq
 1493              		.loc 1 452 63
 1494 0db9 488D14C5 		leaq	0(,%rax,8), %rdx
 1494      00000000 
 1495 0dc1 488B45C0 		movq	-64(%rbp), %rax
 1496 0dc5 4801D0   		addq	%rdx, %rax
 1497              		.loc 1 452 9
 1498 0dc8 488B10   		movq	(%rax), %rdx
 1499 0dcb 488B75B0 		movq	-80(%rbp), %rsi
 1500 0dcf 488B45B0 		movq	-80(%rbp), %rax
 1501 0dd3 4889D1   		movq	%rdx, %rcx
 1502 0dd6 BA030000 		movl	$3, %edx
 1502      00
 1503 0ddb 4889C7   		movq	%rax, %rdi
 1504 0dde E81DF2FF 		call	arg_register_error
 1504      FF
 1505              	.L77:
 449:argtable2.c   ****         {
 1506              		.loc 1 449 18
 1507 0de3 488B0500 		movq	optind@GOTPCREL(%rip), %rax
 1507      000000
 1508 0dea 8B00     		movl	(%rax), %eax
 1509 0dec 3945CC   		cmpl	%eax, -52(%rbp)
 1510 0def 7FB1     		jg	.L78
 453:argtable2.c   ****         }
 454:argtable2.c   **** 
 455:argtable2.c   ****     return;
 1511              		.loc 1 455 5
 1512 0df1 EB01     		jmp	.L67
 1513              	.L79:
 1514              	.LBB14:
 393:argtable2.c   ****             }
 1515              		.loc 1 393 13
 1516 0df3 90       		nop
 1517              	.L67:
 1518              	.LBE14:
 456:argtable2.c   ****     }
 1519              		.loc 1 456 5
 1520 0df4 C9       		leave
 1521              		.cfi_def_cfa 7, 8
 1522 0df5 C3       		ret
 1523              		.cfi_endproc
 1524              	.LFE7:
 1527              	arg_parse_check:
 1528              	.LFB8:
 457:argtable2.c   **** 
 458:argtable2.c   **** 
 459:argtable2.c   **** static
 460:argtable2.c   **** void arg_parse_check(struct arg_hdr **table, struct arg_end *endtable)
 461:argtable2.c   ****     {
 1529              		.loc 1 461 5
 1530              		.cfi_startproc
 1531 0df6 F30F1EFA 		endbr64
 1532 0dfa 55       		pushq	%rbp
 1533              		.cfi_def_cfa_offset 16
 1534              		.cfi_offset 6, -16
 1535 0dfb 4889E5   		movq	%rsp, %rbp
 1536              		.cfi_def_cfa_register 6
 1537 0dfe 4883EC20 		subq	$32, %rsp
 1538 0e02 48897DE8 		movq	%rdi, -24(%rbp)
 1539 0e06 488975E0 		movq	%rsi, -32(%rbp)
 462:argtable2.c   ****     int tabindex=0;
 1540              		.loc 1 462 9
 1541 0e0a C745F000 		movl	$0, -16(%rbp)
 1541      000000
 1542              	.L82:
 463:argtable2.c   ****     /* printf("arg_parse_check()\n"); */
 464:argtable2.c   ****     do
 465:argtable2.c   ****         {
 466:argtable2.c   ****         if (table[tabindex]->checkfn)
 1543              		.loc 1 466 18
 1544 0e11 8B45F0   		movl	-16(%rbp), %eax
 1545 0e14 4898     		cltq
 1546 0e16 488D14C5 		leaq	0(,%rax,8), %rdx
 1546      00000000 
 1547 0e1e 488B45E8 		movq	-24(%rbp), %rax
 1548 0e22 4801D0   		addq	%rdx, %rax
 1549 0e25 488B00   		movq	(%rax), %rax
 1550              		.loc 1 466 28
 1551 0e28 488B4048 		movq	72(%rax), %rax
 1552              		.loc 1 466 12
 1553 0e2c 4885C0   		testq	%rax, %rax
 1554 0e2f 7464     		je	.L81
 1555              	.LBB15:
 467:argtable2.c   ****             {
 468:argtable2.c   ****             void *parent  = table[tabindex]->parent;
 1556              		.loc 1 468 34
 1557 0e31 8B45F0   		movl	-16(%rbp), %eax
 1558 0e34 4898     		cltq
 1559 0e36 488D14C5 		leaq	0(,%rax,8), %rdx
 1559      00000000 
 1560 0e3e 488B45E8 		movq	-24(%rbp), %rax
 1561 0e42 4801D0   		addq	%rdx, %rax
 1562 0e45 488B00   		movq	(%rax), %rax
 1563              		.loc 1 468 19
 1564 0e48 488B4030 		movq	48(%rax), %rax
 1565 0e4c 488945F8 		movq	%rax, -8(%rbp)
 469:argtable2.c   ****             int errorcode = table[tabindex]->checkfn(parent);
 1566              		.loc 1 469 34
 1567 0e50 8B45F0   		movl	-16(%rbp), %eax
 1568 0e53 4898     		cltq
 1569 0e55 488D14C5 		leaq	0(,%rax,8), %rdx
 1569      00000000 
 1570 0e5d 488B45E8 		movq	-24(%rbp), %rax
 1571 0e61 4801D0   		addq	%rdx, %rax
 1572 0e64 488B00   		movq	(%rax), %rax
 1573              		.loc 1 469 44
 1574 0e67 488B5048 		movq	72(%rax), %rdx
 1575              		.loc 1 469 29
 1576 0e6b 488B45F8 		movq	-8(%rbp), %rax
 1577 0e6f 4889C7   		movq	%rax, %rdi
 1578 0e72 FFD2     		call	*%rdx
 1579              	.LVL3:
 1580 0e74 8945F4   		movl	%eax, -12(%rbp)
 470:argtable2.c   ****             if (errorcode!=0)
 1581              		.loc 1 470 16
 1582 0e77 837DF400 		cmpl	$0, -12(%rbp)
 1583 0e7b 7418     		je	.L81
 471:argtable2.c   ****                 arg_register_error(endtable,parent,errorcode,NULL);
 1584              		.loc 1 471 17
 1585 0e7d 8B55F4   		movl	-12(%rbp), %edx
 1586 0e80 488B75F8 		movq	-8(%rbp), %rsi
 1587 0e84 488B45E0 		movq	-32(%rbp), %rax
 1588 0e88 B9000000 		movl	$0, %ecx
 1588      00
 1589 0e8d 4889C7   		movq	%rax, %rdi
 1590 0e90 E86BF1FF 		call	arg_register_error
 1590      FF
 1591              	.L81:
 1592              	.LBE15:
 472:argtable2.c   ****             }
 473:argtable2.c   ****         }while(!(table[tabindex++]->flag&ARG_TERMINATOR));
 1593              		.loc 1 473 32
 1594 0e95 8B45F0   		movl	-16(%rbp), %eax
 1595 0e98 8D5001   		leal	1(%rax), %edx
 1596 0e9b 8955F0   		movl	%edx, -16(%rbp)
 1597 0e9e 4898     		cltq
 1598              		.loc 1 473 23
 1599 0ea0 488D14C5 		leaq	0(,%rax,8), %rdx
 1599      00000000 
 1600 0ea8 488B45E8 		movq	-24(%rbp), %rax
 1601 0eac 4801D0   		addq	%rdx, %rax
 1602 0eaf 488B00   		movq	(%rax), %rax
 1603              		.loc 1 473 35
 1604 0eb2 0FB600   		movzbl	(%rax), %eax
 1605              		.loc 1 473 41
 1606 0eb5 0FBEC0   		movsbl	%al, %eax
 1607 0eb8 83E001   		andl	$1, %eax
 1608              		.loc 1 473 16
 1609 0ebb 85C0     		testl	%eax, %eax
 1610 0ebd 0F844EFF 		je	.L82
 1610      FFFF
 474:argtable2.c   ****     }
 1611              		.loc 1 474 5
 1612 0ec3 90       		nop
 1613 0ec4 90       		nop
 1614 0ec5 C9       		leave
 1615              		.cfi_def_cfa 7, 8
 1616 0ec6 C3       		ret
 1617              		.cfi_endproc
 1618              	.LFE8:
 1621              	arg_reset:
 1622              	.LFB9:
 475:argtable2.c   **** 
 476:argtable2.c   **** 
 477:argtable2.c   **** static
 478:argtable2.c   **** void arg_reset(void **argtable)
 479:argtable2.c   ****     {
 1623              		.loc 1 479 5
 1624              		.cfi_startproc
 1625 0ec7 F30F1EFA 		endbr64
 1626 0ecb 55       		pushq	%rbp
 1627              		.cfi_def_cfa_offset 16
 1628              		.cfi_offset 6, -16
 1629 0ecc 4889E5   		movq	%rsp, %rbp
 1630              		.cfi_def_cfa_register 6
 1631 0ecf 4883EC20 		subq	$32, %rsp
 1632 0ed3 48897DE8 		movq	%rdi, -24(%rbp)
 480:argtable2.c   ****     struct arg_hdr **table=(struct arg_hdr**)argtable;
 1633              		.loc 1 480 22
 1634 0ed7 488B45E8 		movq	-24(%rbp), %rax
 1635 0edb 488945F8 		movq	%rax, -8(%rbp)
 481:argtable2.c   ****     int tabindex=0;
 1636              		.loc 1 481 9
 1637 0edf C745F400 		movl	$0, -12(%rbp)
 1637      000000
 1638              	.L85:
 482:argtable2.c   ****     /*printf("arg_reset(%p)\n",argtable);*/
 483:argtable2.c   ****     do
 484:argtable2.c   ****         {
 485:argtable2.c   ****         if (table[tabindex]->resetfn)
 1639              		.loc 1 485 18
 1640 0ee6 8B45F4   		movl	-12(%rbp), %eax
 1641 0ee9 4898     		cltq
 1642 0eeb 488D14C5 		leaq	0(,%rax,8), %rdx
 1642      00000000 
 1643 0ef3 488B45F8 		movq	-8(%rbp), %rax
 1644 0ef7 4801D0   		addq	%rdx, %rax
 1645 0efa 488B00   		movq	(%rax), %rax
 1646              		.loc 1 485 28
 1647 0efd 488B4038 		movq	56(%rax), %rax
 1648              		.loc 1 485 12
 1649 0f01 4885C0   		testq	%rax, %rax
 1650 0f04 743B     		je	.L84
 486:argtable2.c   ****             table[tabindex]->resetfn(table[tabindex]->parent);
 1651              		.loc 1 486 18
 1652 0f06 8B45F4   		movl	-12(%rbp), %eax
 1653 0f09 4898     		cltq
 1654 0f0b 488D14C5 		leaq	0(,%rax,8), %rdx
 1654      00000000 
 1655 0f13 488B45F8 		movq	-8(%rbp), %rax
 1656 0f17 4801D0   		addq	%rdx, %rax
 1657 0f1a 488B00   		movq	(%rax), %rax
 1658              		.loc 1 486 28
 1659 0f1d 488B5038 		movq	56(%rax), %rdx
 1660              		.loc 1 486 43
 1661 0f21 8B45F4   		movl	-12(%rbp), %eax
 1662 0f24 4898     		cltq
 1663 0f26 488D0CC5 		leaq	0(,%rax,8), %rcx
 1663      00000000 
 1664 0f2e 488B45F8 		movq	-8(%rbp), %rax
 1665 0f32 4801C8   		addq	%rcx, %rax
 1666 0f35 488B00   		movq	(%rax), %rax
 1667              		.loc 1 486 13
 1668 0f38 488B4030 		movq	48(%rax), %rax
 1669 0f3c 4889C7   		movq	%rax, %rdi
 1670 0f3f FFD2     		call	*%rdx
 1671              	.LVL4:
 1672              	.L84:
 487:argtable2.c   ****         } while(!(table[tabindex++]->flag&ARG_TERMINATOR));
 1673              		.loc 1 487 33
 1674 0f41 8B45F4   		movl	-12(%rbp), %eax
 1675 0f44 8D5001   		leal	1(%rax), %edx
 1676 0f47 8955F4   		movl	%edx, -12(%rbp)
 1677 0f4a 4898     		cltq
 1678              		.loc 1 487 24
 1679 0f4c 488D14C5 		leaq	0(,%rax,8), %rdx
 1679      00000000 
 1680 0f54 488B45F8 		movq	-8(%rbp), %rax
 1681 0f58 4801D0   		addq	%rdx, %rax
 1682 0f5b 488B00   		movq	(%rax), %rax
 1683              		.loc 1 487 36
 1684 0f5e 0FB600   		movzbl	(%rax), %eax
 1685              		.loc 1 487 42
 1686 0f61 0FBEC0   		movsbl	%al, %eax
 1687 0f64 83E001   		andl	$1, %eax
 1688              		.loc 1 487 17
 1689 0f67 85C0     		testl	%eax, %eax
 1690 0f69 0F8477FF 		je	.L85
 1690      FFFF
 488:argtable2.c   ****     }
 1691              		.loc 1 488 5
 1692 0f6f 90       		nop
 1693 0f70 90       		nop
 1694 0f71 C9       		leave
 1695              		.cfi_def_cfa 7, 8
 1696 0f72 C3       		ret
 1697              		.cfi_endproc
 1698              	.LFE9:
 1700              		.globl	arg_parse
 1702              	arg_parse:
 1703              	.LFB10:
 489:argtable2.c   **** 
 490:argtable2.c   ****     
 491:argtable2.c   **** int arg_parse(int argc, char **argv, void **argtable)
 492:argtable2.c   ****     {
 1704              		.loc 1 492 5
 1705              		.cfi_startproc
 1706 0f73 F30F1EFA 		endbr64
 1707 0f77 55       		pushq	%rbp
 1708              		.cfi_def_cfa_offset 16
 1709              		.cfi_offset 6, -16
 1710 0f78 4889E5   		movq	%rsp, %rbp
 1711              		.cfi_def_cfa_register 6
 1712 0f7b 4883EC40 		subq	$64, %rsp
 1713 0f7f 897DDC   		movl	%edi, -36(%rbp)
 1714 0f82 488975D0 		movq	%rsi, -48(%rbp)
 1715 0f86 488955C8 		movq	%rdx, -56(%rbp)
 493:argtable2.c   ****     struct arg_hdr **table = (struct arg_hdr **)argtable;
 1716              		.loc 1 493 22
 1717 0f8a 488B45C8 		movq	-56(%rbp), %rax
 1718 0f8e 488945E8 		movq	%rax, -24(%rbp)
 494:argtable2.c   ****     struct arg_end *endtable;
 495:argtable2.c   ****     int endindex;
 496:argtable2.c   ****     char **argvcopy = NULL;
 1719              		.loc 1 496 12
 1720 0f92 48C745F0 		movq	$0, -16(%rbp)
 1720      00000000 
 497:argtable2.c   **** 
 498:argtable2.c   ****     /*printf("arg_parse(%d,%p,%p)\n",argc,argv,argtable);*/
 499:argtable2.c   **** 
 500:argtable2.c   ****     /* reset any argtable data from previous invocations */
 501:argtable2.c   ****     arg_reset(argtable);
 1721              		.loc 1 501 5
 1722 0f9a 488B45C8 		movq	-56(%rbp), %rax
 1723 0f9e 4889C7   		movq	%rax, %rdi
 1724 0fa1 E821FFFF 		call	arg_reset
 1724      FF
 502:argtable2.c   **** 
 503:argtable2.c   ****     /* locate the first end-of-table marker within the array */
 504:argtable2.c   ****     endindex = arg_endindex(table);
 1725              		.loc 1 504 16
 1726 0fa6 488B45E8 		movq	-24(%rbp), %rax
 1727 0faa 4889C7   		movq	%rax, %rdi
 1728 0fad E82CF8FF 		call	arg_endindex
 1728      FF
 1729 0fb2 8945E4   		movl	%eax, -28(%rbp)
 505:argtable2.c   ****     endtable = (struct arg_end*)table[endindex];
 1730              		.loc 1 505 38
 1731 0fb5 8B45E4   		movl	-28(%rbp), %eax
 1732 0fb8 4898     		cltq
 1733 0fba 488D14C5 		leaq	0(,%rax,8), %rdx
 1733      00000000 
 1734 0fc2 488B45E8 		movq	-24(%rbp), %rax
 1735 0fc6 4801D0   		addq	%rdx, %rax
 1736              		.loc 1 505 14
 1737 0fc9 488B00   		movq	(%rax), %rax
 1738 0fcc 488945F8 		movq	%rax, -8(%rbp)
 506:argtable2.c   **** 
 507:argtable2.c   ****     /* Special case of argc==0.  This can occur on Texas Instruments DSP. */
 508:argtable2.c   ****     /* Failure to trap this case results in an unwanted NULL result from  */
 509:argtable2.c   ****     /* the malloc for argvcopy (next code block).                         */
 510:argtable2.c   ****     if (argc==0)
 1739              		.loc 1 510 8
 1740 0fd0 837DDC00 		cmpl	$0, -36(%rbp)
 1741 0fd4 751F     		jne	.L87
 511:argtable2.c   ****         {
 512:argtable2.c   ****         /* We must still perform post-parse checks despite the absence of command line arguments */
 513:argtable2.c   ****         arg_parse_check(table,endtable);
 1742              		.loc 1 513 9
 1743 0fd6 488B55F8 		movq	-8(%rbp), %rdx
 1744 0fda 488B45E8 		movq	-24(%rbp), %rax
 1745 0fde 4889D6   		movq	%rdx, %rsi
 1746 0fe1 4889C7   		movq	%rax, %rdi
 1747 0fe4 E80DFEFF 		call	arg_parse_check
 1747      FF
 514:argtable2.c   **** 
 515:argtable2.c   ****         /* Now we are finished */
 516:argtable2.c   ****         return endtable->count;
 1748              		.loc 1 516 24
 1749 0fe9 488B45F8 		movq	-8(%rbp), %rax
 1750 0fed 8B4060   		movl	96(%rax), %eax
 1751 0ff0 E9DD0000 		jmp	.L88
 1751      00
 1752              	.L87:
 517:argtable2.c   ****         }
 518:argtable2.c   **** 
 519:argtable2.c   ****     argvcopy = malloc(sizeof(char *) * argc);
 1753              		.loc 1 519 16
 1754 0ff5 8B45DC   		movl	-36(%rbp), %eax
 1755 0ff8 4898     		cltq
 1756 0ffa 48C1E003 		salq	$3, %rax
 1757 0ffe 4889C7   		movq	%rax, %rdi
 1758 1001 E8000000 		call	malloc@PLT
 1758      00
 1759 1006 488945F0 		movq	%rax, -16(%rbp)
 520:argtable2.c   ****     if (argvcopy)
 1760              		.loc 1 520 8
 1761 100a 48837DF0 		cmpq	$0, -16(%rbp)
 1761      00
 1762 100f 0F849C00 		je	.L89
 1762      0000
 1763              	.LBB16:
 521:argtable2.c   ****         {
 522:argtable2.c   ****         int i;
 523:argtable2.c   **** 
 524:argtable2.c   ****         /*
 525:argtable2.c   ****         Fill in the local copy of argv[]. We need a local copy
 526:argtable2.c   ****         because getopt rearranges argv[] which adversely affects
 527:argtable2.c   ****         susbsequent parsing attempts.
 528:argtable2.c   ****         */
 529:argtable2.c   ****         for (i=0; i<argc; i++)
 1764              		.loc 1 529 15
 1765 1015 C745E000 		movl	$0, -32(%rbp)
 1765      000000
 1766              		.loc 1 529 9
 1767 101c EB33     		jmp	.L90
 1768              	.L91:
 530:argtable2.c   ****             argvcopy[i] = argv[i];
 1769              		.loc 1 530 31 discriminator 3
 1770 101e 8B45E0   		movl	-32(%rbp), %eax
 1771 1021 4898     		cltq
 1772 1023 488D14C5 		leaq	0(,%rax,8), %rdx
 1772      00000000 
 1773 102b 488B45D0 		movq	-48(%rbp), %rax
 1774 102f 4801D0   		addq	%rdx, %rax
 1775              		.loc 1 530 21 discriminator 3
 1776 1032 8B55E0   		movl	-32(%rbp), %edx
 1777 1035 4863D2   		movslq	%edx, %rdx
 1778 1038 488D0CD5 		leaq	0(,%rdx,8), %rcx
 1778      00000000 
 1779 1040 488B55F0 		movq	-16(%rbp), %rdx
 1780 1044 4801CA   		addq	%rcx, %rdx
 1781              		.loc 1 530 31 discriminator 3
 1782 1047 488B00   		movq	(%rax), %rax
 1783              		.loc 1 530 25 discriminator 3
 1784 104a 488902   		movq	%rax, (%rdx)
 529:argtable2.c   ****             argvcopy[i] = argv[i];
 1785              		.loc 1 529 28 discriminator 3
 1786 104d 8345E001 		addl	$1, -32(%rbp)
 1787              	.L90:
 529:argtable2.c   ****             argvcopy[i] = argv[i];
 1788              		.loc 1 529 20 discriminator 1
 1789 1051 8B45E0   		movl	-32(%rbp), %eax
 1790 1054 3B45DC   		cmpl	-36(%rbp), %eax
 1791 1057 7CC5     		jl	.L91
 531:argtable2.c   **** 
 532:argtable2.c   ****         /* parse the command line (local copy) for tagged options */
 533:argtable2.c   ****         arg_parse_tagged(argc,argvcopy,table,endtable);
 1792              		.loc 1 533 9
 1793 1059 488B4DF8 		movq	-8(%rbp), %rcx
 1794 105d 488B55E8 		movq	-24(%rbp), %rdx
 1795 1061 488B75F0 		movq	-16(%rbp), %rsi
 1796 1065 8B45DC   		movl	-36(%rbp), %eax
 1797 1068 89C7     		movl	%eax, %edi
 1798 106a E8B1F7FF 		call	arg_parse_tagged
 1798      FF
 534:argtable2.c   **** 
 535:argtable2.c   ****         /* parse the command line (local copy) for untagged options */
 536:argtable2.c   ****         arg_parse_untagged(argc,argvcopy,table,endtable);
 1799              		.loc 1 536 9
 1800 106f 488B4DF8 		movq	-8(%rbp), %rcx
 1801 1073 488B55E8 		movq	-24(%rbp), %rdx
 1802 1077 488B75F0 		movq	-16(%rbp), %rsi
 1803 107b 8B45DC   		movl	-36(%rbp), %eax
 1804 107e 89C7     		movl	%eax, %edi
 1805 1080 E842FBFF 		call	arg_parse_untagged
 1805      FF
 537:argtable2.c   **** 
 538:argtable2.c   ****         /* if no errors so far then perform post-parse checks otherwise dont bother */
 539:argtable2.c   ****         if (endtable->count==0)
 1806              		.loc 1 539 21
 1807 1085 488B45F8 		movq	-8(%rbp), %rax
 1808 1089 8B4060   		movl	96(%rax), %eax
 1809              		.loc 1 539 12
 1810 108c 85C0     		testl	%eax, %eax
 1811 108e 7513     		jne	.L92
 540:argtable2.c   ****             arg_parse_check(table,endtable);
 1812              		.loc 1 540 13
 1813 1090 488B55F8 		movq	-8(%rbp), %rdx
 1814 1094 488B45E8 		movq	-24(%rbp), %rax
 1815 1098 4889D6   		movq	%rdx, %rsi
 1816 109b 4889C7   		movq	%rax, %rdi
 1817 109e E853FDFF 		call	arg_parse_check
 1817      FF
 1818              	.L92:
 541:argtable2.c   **** 
 542:argtable2.c   ****         /* release the local copt of argv[] */
 543:argtable2.c   ****         free(argvcopy);
 1819              		.loc 1 543 9
 1820 10a3 488B45F0 		movq	-16(%rbp), %rax
 1821 10a7 4889C7   		movq	%rax, %rdi
 1822 10aa E8000000 		call	free@PLT
 1822      00
 1823              	.LBE16:
 1824 10af EB1A     		jmp	.L93
 1825              	.L89:
 544:argtable2.c   ****         }
 545:argtable2.c   ****     else
 546:argtable2.c   ****         {
 547:argtable2.c   ****         /* memory alloc failed */
 548:argtable2.c   ****         arg_register_error(endtable,endtable,ARG_EMALLOC,NULL);
 1826              		.loc 1 548 9
 1827 10b1 488B75F8 		movq	-8(%rbp), %rsi
 1828 10b5 488B45F8 		movq	-8(%rbp), %rax
 1829 10b9 B9000000 		movl	$0, %ecx
 1829      00
 1830 10be BA020000 		movl	$2, %edx
 1830      00
 1831 10c3 4889C7   		movq	%rax, %rdi
 1832 10c6 E835EFFF 		call	arg_register_error
 1832      FF
 1833              	.L93:
 549:argtable2.c   ****         }        
 550:argtable2.c   **** 
 551:argtable2.c   ****     return endtable->count;
 1834              		.loc 1 551 20
 1835 10cb 488B45F8 		movq	-8(%rbp), %rax
 1836 10cf 8B4060   		movl	96(%rax), %eax
 1837              	.L88:
 552:argtable2.c   ****     }
 1838              		.loc 1 552 5
 1839 10d2 C9       		leave
 1840              		.cfi_def_cfa 7, 8
 1841 10d3 C3       		ret
 1842              		.cfi_endproc
 1843              	.LFE10:
 1846              	arg_cat:
 1847              	.LFB11:
 553:argtable2.c   **** 
 554:argtable2.c   **** 
 555:argtable2.c   **** /*
 556:argtable2.c   ****  * Concatenate contents of src[] string onto *pdest[] string.
 557:argtable2.c   ****  * The *pdest pointer is altered to point to the end of the
 558:argtable2.c   ****  * target string and *pndest is decremented by the same number
 559:argtable2.c   ****  * of chars.
 560:argtable2.c   ****  * Does not append more than *pndest chars into *pdest[]
 561:argtable2.c   ****  * so as to prevent buffer overruns.
 562:argtable2.c   ****  * Its something like strncat() but more efficient for repeated
 563:argtable2.c   ****  * calls on the same destination string.
 564:argtable2.c   ****  * Example of use:
 565:argtable2.c   ****  *   char dest[30] = "good"
 566:argtable2.c   ****  *   size_t ndest = sizeof(dest);
 567:argtable2.c   ****  *   char *pdest = dest;
 568:argtable2.c   ****  *   arg_char(&pdest,"bye ",&ndest);
 569:argtable2.c   ****  *   arg_char(&pdest,"cruel ",&ndest);
 570:argtable2.c   ****  *   arg_char(&pdest,"world!",&ndest);
 571:argtable2.c   ****  * Results in:
 572:argtable2.c   ****  *   dest[] == "goodbye cruel world!"
 573:argtable2.c   ****  *   ndest  == 10
 574:argtable2.c   ****  */
 575:argtable2.c   **** static
 576:argtable2.c   **** void arg_cat(char **pdest, const char *src, size_t *pndest)
 577:argtable2.c   ****     {
 1848              		.loc 1 577 5
 1849              		.cfi_startproc
 1850 10d4 F30F1EFA 		endbr64
 1851 10d8 55       		pushq	%rbp
 1852              		.cfi_def_cfa_offset 16
 1853              		.cfi_offset 6, -16
 1854 10d9 4889E5   		movq	%rsp, %rbp
 1855              		.cfi_def_cfa_register 6
 1856 10dc 48897DE8 		movq	%rdi, -24(%rbp)
 1857 10e0 488975E0 		movq	%rsi, -32(%rbp)
 1858 10e4 488955D8 		movq	%rdx, -40(%rbp)
 578:argtable2.c   ****     char *dest = *pdest;
 1859              		.loc 1 578 11
 1860 10e8 488B45E8 		movq	-24(%rbp), %rax
 1861 10ec 488B00   		movq	(%rax), %rax
 1862 10ef 488945F0 		movq	%rax, -16(%rbp)
 579:argtable2.c   ****     char *end  = dest + *pndest;
 1863              		.loc 1 579 25
 1864 10f3 488B45D8 		movq	-40(%rbp), %rax
 1865 10f7 488B10   		movq	(%rax), %rdx
 1866              		.loc 1 579 11
 1867 10fa 488B45F0 		movq	-16(%rbp), %rax
 1868 10fe 4801D0   		addq	%rdx, %rax
 1869 1101 488945F8 		movq	%rax, -8(%rbp)
 580:argtable2.c   **** 
 581:argtable2.c   ****     /*locate null terminator of dest string */
 582:argtable2.c   ****     while(dest<end && *dest!=0)
 1870              		.loc 1 582 10
 1871 1105 EB05     		jmp	.L95
 1872              	.L97:
 583:argtable2.c   ****         dest++;
 1873              		.loc 1 583 13
 1874 1107 488345F0 		addq	$1, -16(%rbp)
 1874      01
 1875              	.L95:
 582:argtable2.c   ****         dest++;
 1876              		.loc 1 582 20
 1877 110c 488B45F0 		movq	-16(%rbp), %rax
 1878 1110 483B45F8 		cmpq	-8(%rbp), %rax
 1879 1114 732A     		jnb	.L98
 582:argtable2.c   ****         dest++;
 1880              		.loc 1 582 23 discriminator 1
 1881 1116 488B45F0 		movq	-16(%rbp), %rax
 1882 111a 0FB600   		movzbl	(%rax), %eax
 582:argtable2.c   ****         dest++;
 1883              		.loc 1 582 20 discriminator 1
 1884 111d 84C0     		testb	%al, %al
 1885 111f 75E6     		jne	.L97
 584:argtable2.c   **** 
 585:argtable2.c   ****     /* concat src string to dest string */
 586:argtable2.c   ****     while(dest<end && *src!=0)
 1886              		.loc 1 586 10
 1887 1121 EB1D     		jmp	.L98
 1888              	.L100:
 587:argtable2.c   ****         *dest++ = *src++;
 1889              		.loc 1 587 23
 1890 1123 488B55E0 		movq	-32(%rbp), %rdx
 1891 1127 488D4201 		leaq	1(%rdx), %rax
 1892 112b 488945E0 		movq	%rax, -32(%rbp)
 1893              		.loc 1 587 14
 1894 112f 488B45F0 		movq	-16(%rbp), %rax
 1895 1133 488D4801 		leaq	1(%rax), %rcx
 1896 1137 48894DF0 		movq	%rcx, -16(%rbp)
 1897              		.loc 1 587 19
 1898 113b 0FB612   		movzbl	(%rdx), %edx
 1899              		.loc 1 587 17
 1900 113e 8810     		movb	%dl, (%rax)
 1901              	.L98:
 586:argtable2.c   ****         *dest++ = *src++;
 1902              		.loc 1 586 20
 1903 1140 488B45F0 		movq	-16(%rbp), %rax
 1904 1144 483B45F8 		cmpq	-8(%rbp), %rax
 1905 1148 730B     		jnb	.L99
 586:argtable2.c   ****         *dest++ = *src++;
 1906              		.loc 1 586 23 discriminator 1
 1907 114a 488B45E0 		movq	-32(%rbp), %rax
 1908 114e 0FB600   		movzbl	(%rax), %eax
 586:argtable2.c   ****         *dest++ = *src++;
 1909              		.loc 1 586 20 discriminator 1
 1910 1151 84C0     		testb	%al, %al
 1911 1153 75CE     		jne	.L100
 1912              	.L99:
 588:argtable2.c   **** 
 589:argtable2.c   ****     /* null terminate dest string */
 590:argtable2.c   ****     *dest=0;
 1913              		.loc 1 590 10
 1914 1155 488B45F0 		movq	-16(%rbp), %rax
 1915 1159 C60000   		movb	$0, (%rax)
 591:argtable2.c   **** 
 592:argtable2.c   ****     /* update *pdest and *pndest */
 593:argtable2.c   ****     *pndest = end - dest;
 1916              		.loc 1 593 19
 1917 115c 488B45F8 		movq	-8(%rbp), %rax
 1918 1160 482B45F0 		subq	-16(%rbp), %rax
 1919 1164 4889C2   		movq	%rax, %rdx
 1920              		.loc 1 593 13
 1921 1167 488B45D8 		movq	-40(%rbp), %rax
 1922 116b 488910   		movq	%rdx, (%rax)
 594:argtable2.c   ****     *pdest  = dest;
 1923              		.loc 1 594 13
 1924 116e 488B45E8 		movq	-24(%rbp), %rax
 1925 1172 488B55F0 		movq	-16(%rbp), %rdx
 1926 1176 488910   		movq	%rdx, (%rax)
 595:argtable2.c   ****     }
 1927              		.loc 1 595 5
 1928 1179 90       		nop
 1929 117a 5D       		popq	%rbp
 1930              		.cfi_def_cfa 7, 8
 1931 117b C3       		ret
 1932              		.cfi_endproc
 1933              	.LFE11:
 1935              		.section	.rodata
 1936              	.LC6:
 1937 008a 2000     		.string	" "
 1938              	.LC7:
 1939 008c 5B00     		.string	"["
 1940              	.LC8:
 1941 008e 5D00     		.string	"]"
 1942              	.LC9:
 1943 0090 2D2D00   		.string	"--"
 1944              	.LC10:
 1945 0093 2C00     		.string	","
 1946              	.LC11:
 1947 0095 3D00     		.string	"="
 1948              		.text
 1950              	arg_cat_option:
 1951              	.LFB12:
 596:argtable2.c   **** 
 597:argtable2.c   **** 
 598:argtable2.c   **** static
 599:argtable2.c   **** void arg_cat_option(char *dest, size_t ndest, const char *shortopts, const char *longopts, const ch
 600:argtable2.c   ****     {
 1952              		.loc 1 600 5
 1953              		.cfi_startproc
 1954 117c F30F1EFA 		endbr64
 1955 1180 55       		pushq	%rbp
 1956              		.cfi_def_cfa_offset 16
 1957              		.cfi_offset 6, -16
 1958 1181 4889E5   		movq	%rsp, %rbp
 1959              		.cfi_def_cfa_register 6
 1960 1184 4883EC50 		subq	$80, %rsp
 1961 1188 48897DD8 		movq	%rdi, -40(%rbp)
 1962 118c 488975D0 		movq	%rsi, -48(%rbp)
 1963 1190 488955C8 		movq	%rdx, -56(%rbp)
 1964 1194 48894DC0 		movq	%rcx, -64(%rbp)
 1965 1198 4C8945B8 		movq	%r8, -72(%rbp)
 1966 119c 44894DB4 		movl	%r9d, -76(%rbp)
 1967              		.loc 1 600 5
 1968 11a0 64488B04 		movq	%fs:40, %rax
 1968      25280000 
 1968      00
 1969 11a9 488945F8 		movq	%rax, -8(%rbp)
 1970 11ad 31C0     		xorl	%eax, %eax
 601:argtable2.c   ****     if (shortopts)
 1971              		.loc 1 601 8
 1972 11af 48837DC8 		cmpq	$0, -56(%rbp)
 1972      00
 1973 11b4 0F84C000 		je	.L102
 1973      0000
 1974              	.LBB17:
 602:argtable2.c   ****         {
 603:argtable2.c   ****         char option[3];
 604:argtable2.c   ****         
 605:argtable2.c   ****         /* note: option array[] is initialiazed dynamically here to satisfy   */
 606:argtable2.c   ****         /* a deficiency in the watcom compiler wrt static array initializers. */
 607:argtable2.c   ****         option[0] = '-';
 1975              		.loc 1 607 19
 1976 11ba C645F52D 		movb	$45, -11(%rbp)
 608:argtable2.c   ****         option[1] = shortopts[0];
 1977              		.loc 1 608 30
 1978 11be 488B45C8 		movq	-56(%rbp), %rax
 1979 11c2 0FB600   		movzbl	(%rax), %eax
 1980              		.loc 1 608 19
 1981 11c5 8845F6   		movb	%al, -10(%rbp)
 609:argtable2.c   ****         option[2] = 0;
 1982              		.loc 1 609 19
 1983 11c8 C645F700 		movb	$0, -9(%rbp)
 610:argtable2.c   ****         
 611:argtable2.c   ****         arg_cat(&dest,option,&ndest);
 1984              		.loc 1 611 9
 1985 11cc 488D55D0 		leaq	-48(%rbp), %rdx
 1986 11d0 488D4DF5 		leaq	-11(%rbp), %rcx
 1987 11d4 488D45D8 		leaq	-40(%rbp), %rax
 1988 11d8 4889CE   		movq	%rcx, %rsi
 1989 11db 4889C7   		movq	%rax, %rdi
 1990 11de E8F1FEFF 		call	arg_cat
 1990      FF
 612:argtable2.c   ****         if (datatype)
 1991              		.loc 1 612 12
 1992 11e3 48837DB8 		cmpq	$0, -72(%rbp)
 1992      00
 1993 11e8 0F84F201 		je	.L110
 1993      0000
 613:argtable2.c   ****             {
 614:argtable2.c   ****             arg_cat(&dest," ",&ndest);
 1994              		.loc 1 614 13
 1995 11ee 488D55D0 		leaq	-48(%rbp), %rdx
 1996 11f2 488D45D8 		leaq	-40(%rbp), %rax
 1997 11f6 488D0D00 		leaq	.LC6(%rip), %rcx
 1997      000000
 1998 11fd 4889CE   		movq	%rcx, %rsi
 1999 1200 4889C7   		movq	%rax, %rdi
 2000 1203 E8CCFEFF 		call	arg_cat
 2000      FF
 615:argtable2.c   ****             if (optvalue)
 2001              		.loc 1 615 16
 2002 1208 837DB400 		cmpl	$0, -76(%rbp)
 2003 120c 7450     		je	.L104
 616:argtable2.c   ****                 {
 617:argtable2.c   ****                 arg_cat(&dest,"[",&ndest);
 2004              		.loc 1 617 17
 2005 120e 488D55D0 		leaq	-48(%rbp), %rdx
 2006 1212 488D45D8 		leaq	-40(%rbp), %rax
 2007 1216 488D0D00 		leaq	.LC7(%rip), %rcx
 2007      000000
 2008 121d 4889CE   		movq	%rcx, %rsi
 2009 1220 4889C7   		movq	%rax, %rdi
 2010 1223 E8ACFEFF 		call	arg_cat
 2010      FF
 618:argtable2.c   ****                 arg_cat(&dest,datatype,&ndest);
 2011              		.loc 1 618 17
 2012 1228 488D55D0 		leaq	-48(%rbp), %rdx
 2013 122c 488B4DB8 		movq	-72(%rbp), %rcx
 2014 1230 488D45D8 		leaq	-40(%rbp), %rax
 2015 1234 4889CE   		movq	%rcx, %rsi
 2016 1237 4889C7   		movq	%rax, %rdi
 2017 123a E895FEFF 		call	arg_cat
 2017      FF
 619:argtable2.c   ****                 arg_cat(&dest,"]",&ndest);
 2018              		.loc 1 619 17
 2019 123f 488D55D0 		leaq	-48(%rbp), %rdx
 2020 1243 488D45D8 		leaq	-40(%rbp), %rax
 2021 1247 488D0D00 		leaq	.LC8(%rip), %rcx
 2021      000000
 2022 124e 4889CE   		movq	%rcx, %rsi
 2023 1251 4889C7   		movq	%rax, %rdi
 2024 1254 E87BFEFF 		call	arg_cat
 2024      FF
 2025              	.LBE17:
 620:argtable2.c   ****                 }
 621:argtable2.c   ****             else
 622:argtable2.c   ****                 arg_cat(&dest,datatype,&ndest);
 623:argtable2.c   ****             }
 624:argtable2.c   ****         }
 625:argtable2.c   ****     else if (longopts)
 626:argtable2.c   ****         {
 627:argtable2.c   ****         size_t ncspn;
 628:argtable2.c   **** 
 629:argtable2.c   ****         /* add "--" tag prefix */
 630:argtable2.c   ****         arg_cat(&dest,"--",&ndest);
 631:argtable2.c   **** 
 632:argtable2.c   ****         /* add comma separated option tag */
 633:argtable2.c   ****         ncspn = strcspn(longopts,",");
 634:argtable2.c   ****         strncat(dest,longopts,(ncspn<ndest)?ncspn:ndest);
 635:argtable2.c   **** 
 636:argtable2.c   ****         if (datatype)
 637:argtable2.c   ****             {
 638:argtable2.c   ****             arg_cat(&dest,"=",&ndest);
 639:argtable2.c   ****             if (optvalue)
 640:argtable2.c   ****                 {
 641:argtable2.c   ****                 arg_cat(&dest,"[",&ndest);
 642:argtable2.c   ****                 arg_cat(&dest,datatype,&ndest);
 643:argtable2.c   ****                 arg_cat(&dest,"]",&ndest);
 644:argtable2.c   ****                 }
 645:argtable2.c   ****             else
 646:argtable2.c   ****                 arg_cat(&dest,datatype,&ndest);
 647:argtable2.c   ****             }
 648:argtable2.c   ****         }
 649:argtable2.c   ****     else if (datatype)
 650:argtable2.c   ****         {
 651:argtable2.c   ****         if (optvalue)
 652:argtable2.c   ****             {
 653:argtable2.c   ****             arg_cat(&dest,"[",&ndest);
 654:argtable2.c   ****             arg_cat(&dest,datatype,&ndest);
 655:argtable2.c   ****             arg_cat(&dest,"]",&ndest);
 656:argtable2.c   ****             }
 657:argtable2.c   ****         else
 658:argtable2.c   ****             arg_cat(&dest,datatype,&ndest);
 659:argtable2.c   ****         }
 660:argtable2.c   ****     }
 2026              		.loc 1 660 5
 2027 1259 E9820100 		jmp	.L110
 2027      00
 2028              	.L104:
 2029              	.LBB18:
 622:argtable2.c   ****             }
 2030              		.loc 1 622 17
 2031 125e 488D55D0 		leaq	-48(%rbp), %rdx
 2032 1262 488B4DB8 		movq	-72(%rbp), %rcx
 2033 1266 488D45D8 		leaq	-40(%rbp), %rax
 2034 126a 4889CE   		movq	%rcx, %rsi
 2035 126d 4889C7   		movq	%rax, %rdi
 2036 1270 E85FFEFF 		call	arg_cat
 2036      FF
 2037              	.LBE18:
 2038              		.loc 1 660 5
 2039 1275 E9660100 		jmp	.L110
 2039      00
 2040              	.L102:
 625:argtable2.c   ****         {
 2041              		.loc 1 625 13
 2042 127a 48837DC0 		cmpq	$0, -64(%rbp)
 2042      00
 2043 127f 0F84EA00 		je	.L106
 2043      0000
 2044              	.LBB19:
 630:argtable2.c   **** 
 2045              		.loc 1 630 9
 2046 1285 488D55D0 		leaq	-48(%rbp), %rdx
 2047 1289 488D45D8 		leaq	-40(%rbp), %rax
 2048 128d 488D0D00 		leaq	.LC9(%rip), %rcx
 2048      000000
 2049 1294 4889CE   		movq	%rcx, %rsi
 2050 1297 4889C7   		movq	%rax, %rdi
 2051 129a E835FEFF 		call	arg_cat
 2051      FF
 633:argtable2.c   ****         strncat(dest,longopts,(ncspn<ndest)?ncspn:ndest);
 2052              		.loc 1 633 17
 2053 129f 488B45C0 		movq	-64(%rbp), %rax
 2054 12a3 488D1500 		leaq	.LC10(%rip), %rdx
 2054      000000
 2055 12aa 4889D6   		movq	%rdx, %rsi
 2056 12ad 4889C7   		movq	%rax, %rdi
 2057 12b0 E8000000 		call	strcspn@PLT
 2057      00
 2058 12b5 488945E8 		movq	%rax, -24(%rbp)
 634:argtable2.c   **** 
 2059              		.loc 1 634 9
 2060 12b9 488B55D0 		movq	-48(%rbp), %rdx
 2061 12bd 488B45E8 		movq	-24(%rbp), %rax
 2062 12c1 4839C2   		cmpq	%rax, %rdx
 2063 12c4 480F47D0 		cmova	%rax, %rdx
 2064 12c8 488B45D8 		movq	-40(%rbp), %rax
 2065 12cc 488B4DC0 		movq	-64(%rbp), %rcx
 2066 12d0 4889CE   		movq	%rcx, %rsi
 2067 12d3 4889C7   		movq	%rax, %rdi
 2068 12d6 E8000000 		call	strncat@PLT
 2068      00
 636:argtable2.c   ****             {
 2069              		.loc 1 636 12
 2070 12db 48837DB8 		cmpq	$0, -72(%rbp)
 2070      00
 2071 12e0 0F84FA00 		je	.L110
 2071      0000
 638:argtable2.c   ****             if (optvalue)
 2072              		.loc 1 638 13
 2073 12e6 488D55D0 		leaq	-48(%rbp), %rdx
 2074 12ea 488D45D8 		leaq	-40(%rbp), %rax
 2075 12ee 488D0D00 		leaq	.LC11(%rip), %rcx
 2075      000000
 2076 12f5 4889CE   		movq	%rcx, %rsi
 2077 12f8 4889C7   		movq	%rax, %rdi
 2078 12fb E8D4FDFF 		call	arg_cat
 2078      FF
 639:argtable2.c   ****                 {
 2079              		.loc 1 639 16
 2080 1300 837DB400 		cmpl	$0, -76(%rbp)
 2081 1304 7450     		je	.L107
 641:argtable2.c   ****                 arg_cat(&dest,datatype,&ndest);
 2082              		.loc 1 641 17
 2083 1306 488D55D0 		leaq	-48(%rbp), %rdx
 2084 130a 488D45D8 		leaq	-40(%rbp), %rax
 2085 130e 488D0D00 		leaq	.LC7(%rip), %rcx
 2085      000000
 2086 1315 4889CE   		movq	%rcx, %rsi
 2087 1318 4889C7   		movq	%rax, %rdi
 2088 131b E8B4FDFF 		call	arg_cat
 2088      FF
 642:argtable2.c   ****                 arg_cat(&dest,"]",&ndest);
 2089              		.loc 1 642 17
 2090 1320 488D55D0 		leaq	-48(%rbp), %rdx
 2091 1324 488B4DB8 		movq	-72(%rbp), %rcx
 2092 1328 488D45D8 		leaq	-40(%rbp), %rax
 2093 132c 4889CE   		movq	%rcx, %rsi
 2094 132f 4889C7   		movq	%rax, %rdi
 2095 1332 E89DFDFF 		call	arg_cat
 2095      FF
 643:argtable2.c   ****                 }
 2096              		.loc 1 643 17
 2097 1337 488D55D0 		leaq	-48(%rbp), %rdx
 2098 133b 488D45D8 		leaq	-40(%rbp), %rax
 2099 133f 488D0D00 		leaq	.LC8(%rip), %rcx
 2099      000000
 2100 1346 4889CE   		movq	%rcx, %rsi
 2101 1349 4889C7   		movq	%rax, %rdi
 2102 134c E883FDFF 		call	arg_cat
 2102      FF
 2103              	.LBE19:
 2104              		.loc 1 660 5
 2105 1351 E98A0000 		jmp	.L110
 2105      00
 2106              	.L107:
 2107              	.LBB20:
 646:argtable2.c   ****             }
 2108              		.loc 1 646 17
 2109 1356 488D55D0 		leaq	-48(%rbp), %rdx
 2110 135a 488B4DB8 		movq	-72(%rbp), %rcx
 2111 135e 488D45D8 		leaq	-40(%rbp), %rax
 2112 1362 4889CE   		movq	%rcx, %rsi
 2113 1365 4889C7   		movq	%rax, %rdi
 2114 1368 E867FDFF 		call	arg_cat
 2114      FF
 2115              	.LBE20:
 2116              		.loc 1 660 5
 2117 136d EB71     		jmp	.L110
 2118              	.L106:
 649:argtable2.c   ****         {
 2119              		.loc 1 649 13
 2120 136f 48837DB8 		cmpq	$0, -72(%rbp)
 2120      00
 2121 1374 746A     		je	.L110
 651:argtable2.c   ****             {
 2122              		.loc 1 651 12
 2123 1376 837DB400 		cmpl	$0, -76(%rbp)
 2124 137a 744D     		je	.L108
 653:argtable2.c   ****             arg_cat(&dest,datatype,&ndest);
 2125              		.loc 1 653 13
 2126 137c 488D55D0 		leaq	-48(%rbp), %rdx
 2127 1380 488D45D8 		leaq	-40(%rbp), %rax
 2128 1384 488D0D00 		leaq	.LC7(%rip), %rcx
 2128      000000
 2129 138b 4889CE   		movq	%rcx, %rsi
 2130 138e 4889C7   		movq	%rax, %rdi
 2131 1391 E83EFDFF 		call	arg_cat
 2131      FF
 654:argtable2.c   ****             arg_cat(&dest,"]",&ndest);
 2132              		.loc 1 654 13
 2133 1396 488D55D0 		leaq	-48(%rbp), %rdx
 2134 139a 488B4DB8 		movq	-72(%rbp), %rcx
 2135 139e 488D45D8 		leaq	-40(%rbp), %rax
 2136 13a2 4889CE   		movq	%rcx, %rsi
 2137 13a5 4889C7   		movq	%rax, %rdi
 2138 13a8 E827FDFF 		call	arg_cat
 2138      FF
 655:argtable2.c   ****             }
 2139              		.loc 1 655 13
 2140 13ad 488D55D0 		leaq	-48(%rbp), %rdx
 2141 13b1 488D45D8 		leaq	-40(%rbp), %rax
 2142 13b5 488D0D00 		leaq	.LC8(%rip), %rcx
 2142      000000
 2143 13bc 4889CE   		movq	%rcx, %rsi
 2144 13bf 4889C7   		movq	%rax, %rdi
 2145 13c2 E80DFDFF 		call	arg_cat
 2145      FF
 2146              		.loc 1 660 5
 2147 13c7 EB17     		jmp	.L110
 2148              	.L108:
 658:argtable2.c   ****         }
 2149              		.loc 1 658 13
 2150 13c9 488D55D0 		leaq	-48(%rbp), %rdx
 2151 13cd 488B4DB8 		movq	-72(%rbp), %rcx
 2152 13d1 488D45D8 		leaq	-40(%rbp), %rax
 2153 13d5 4889CE   		movq	%rcx, %rsi
 2154 13d8 4889C7   		movq	%rax, %rdi
 2155 13db E8F4FCFF 		call	arg_cat
 2155      FF
 2156              	.L110:
 2157              		.loc 1 660 5
 2158 13e0 90       		nop
 2159 13e1 488B45F8 		movq	-8(%rbp), %rax
 2160 13e5 64482B04 		subq	%fs:40, %rax
 2160      25280000 
 2160      00
 2161 13ee 7405     		je	.L109
 2162 13f0 E8000000 		call	__stack_chk_fail@PLT
 2162      00
 2163              	.L109:
 2164 13f5 C9       		leave
 2165              		.cfi_def_cfa 7, 8
 2166 13f6 C3       		ret
 2167              		.cfi_endproc
 2168              	.LFE12:
 2170              		.section	.rodata
 2171              	.LC12:
 2172 0097 00       		.string	""
 2173              		.text
 2175              	arg_cat_optionv:
 2176              	.LFB13:
 661:argtable2.c   **** 
 662:argtable2.c   **** static
 663:argtable2.c   **** void arg_cat_optionv(char *dest, size_t ndest, const char *shortopts, const char *longopts, const c
 664:argtable2.c   ****     {
 2177              		.loc 1 664 5
 2178              		.cfi_startproc
 2179 13f7 F30F1EFA 		endbr64
 2180 13fb 55       		pushq	%rbp
 2181              		.cfi_def_cfa_offset 16
 2182              		.cfi_offset 6, -16
 2183 13fc 4889E5   		movq	%rsp, %rbp
 2184              		.cfi_def_cfa_register 6
 2185 13ff 4883EC70 		subq	$112, %rsp
 2186 1403 48897DC8 		movq	%rdi, -56(%rbp)
 2187 1407 488975C0 		movq	%rsi, -64(%rbp)
 2188 140b 488955B8 		movq	%rdx, -72(%rbp)
 2189 140f 48894DB0 		movq	%rcx, -80(%rbp)
 2190 1413 4C8945A8 		movq	%r8, -88(%rbp)
 2191 1417 44894DA4 		movl	%r9d, -92(%rbp)
 2192 141b 488B4510 		movq	16(%rbp), %rax
 2193 141f 48894598 		movq	%rax, -104(%rbp)
 2194              		.loc 1 664 5
 2195 1423 64488B04 		movq	%fs:40, %rax
 2195      25280000 
 2195      00
 2196 142c 488945F8 		movq	%rax, -8(%rbp)
 2197 1430 31C0     		xorl	%eax, %eax
 665:argtable2.c   ****     separator = separator ? separator : "";
 2198              		.loc 1 665 39
 2199 1432 48837D98 		cmpq	$0, -104(%rbp)
 2199      00
 2200 1437 7406     		je	.L112
 2201              		.loc 1 665 39 is_stmt 0 discriminator 1
 2202 1439 488B4598 		movq	-104(%rbp), %rax
 2203 143d EB07     		jmp	.L113
 2204              	.L112:
 2205              		.loc 1 665 39 discriminator 2
 2206 143f 488D0500 		leaq	.LC12(%rip), %rax
 2206      000000
 2207              	.L113:
 2208              		.loc 1 665 15 is_stmt 1 discriminator 4
 2209 1446 48894598 		movq	%rax, -104(%rbp)
 666:argtable2.c   **** 
 667:argtable2.c   ****     if (shortopts)
 2210              		.loc 1 667 8 discriminator 4
 2211 144a 48837DB8 		cmpq	$0, -72(%rbp)
 2211      00
 2212 144f 7465     		je	.L114
 2213              	.LBB21:
 668:argtable2.c   ****         {
 669:argtable2.c   ****         const char *c = shortopts;
 2214              		.loc 1 669 21
 2215 1451 488B45B8 		movq	-72(%rbp), %rax
 2216 1455 488945D8 		movq	%rax, -40(%rbp)
 670:argtable2.c   ****         while(*c)
 2217              		.loc 1 670 14
 2218 1459 EB50     		jmp	.L115
 2219              	.L117:
 2220              	.LBB22:
 671:argtable2.c   ****             {
 672:argtable2.c   ****             /* "-a|-b|-c" */
 673:argtable2.c   ****             char shortopt[3];
 674:argtable2.c   ****         
 675:argtable2.c   ****             /* note: shortopt array[] is initialiazed dynamically here to satisfy */
 676:argtable2.c   ****             /* a deficiency in the watcom compiler wrt static array initializers. */
 677:argtable2.c   ****             shortopt[0]='-';
 2221              		.loc 1 677 24
 2222 145b C645F52D 		movb	$45, -11(%rbp)
 678:argtable2.c   ****             shortopt[1]=*c;
 2223              		.loc 1 678 25
 2224 145f 488B45D8 		movq	-40(%rbp), %rax
 2225 1463 0FB600   		movzbl	(%rax), %eax
 2226              		.loc 1 678 24
 2227 1466 8845F6   		movb	%al, -10(%rbp)
 679:argtable2.c   ****             shortopt[2]=0;
 2228              		.loc 1 679 24
 2229 1469 C645F700 		movb	$0, -9(%rbp)
 680:argtable2.c   ****             
 681:argtable2.c   ****             arg_cat(&dest,shortopt,&ndest);
 2230              		.loc 1 681 13
 2231 146d 488D55C0 		leaq	-64(%rbp), %rdx
 2232 1471 488D4DF5 		leaq	-11(%rbp), %rcx
 2233 1475 488D45C8 		leaq	-56(%rbp), %rax
 2234 1479 4889CE   		movq	%rcx, %rsi
 2235 147c 4889C7   		movq	%rax, %rdi
 2236 147f E850FCFF 		call	arg_cat
 2236      FF
 682:argtable2.c   ****             if (*++c)
 2237              		.loc 1 682 16
 2238 1484 488345D8 		addq	$1, -40(%rbp)
 2238      01
 2239              		.loc 1 682 17
 2240 1489 488B45D8 		movq	-40(%rbp), %rax
 2241 148d 0FB600   		movzbl	(%rax), %eax
 2242              		.loc 1 682 16
 2243 1490 84C0     		testb	%al, %al
 2244 1492 7417     		je	.L115
 683:argtable2.c   ****                 arg_cat(&dest,separator,&ndest);
 2245              		.loc 1 683 17
 2246 1494 488D55C0 		leaq	-64(%rbp), %rdx
 2247 1498 488B4D98 		movq	-104(%rbp), %rcx
 2248 149c 488D45C8 		leaq	-56(%rbp), %rax
 2249 14a0 4889CE   		movq	%rcx, %rsi
 2250 14a3 4889C7   		movq	%rax, %rdi
 2251 14a6 E829FCFF 		call	arg_cat
 2251      FF
 2252              	.L115:
 2253              	.LBE22:
 670:argtable2.c   ****             {
 2254              		.loc 1 670 15
 2255 14ab 488B45D8 		movq	-40(%rbp), %rax
 2256 14af 0FB600   		movzbl	(%rax), %eax
 2257 14b2 84C0     		testb	%al, %al
 2258 14b4 75A5     		jne	.L117
 2259              	.L114:
 2260              	.LBE21:
 684:argtable2.c   ****             }
 685:argtable2.c   ****         }
 686:argtable2.c   **** 
 687:argtable2.c   ****     /* put separator between long opts and short opts */
 688:argtable2.c   ****     if (shortopts && longopts)
 2261              		.loc 1 688 8
 2262 14b6 48837DB8 		cmpq	$0, -72(%rbp)
 2262      00
 2263 14bb 741E     		je	.L118
 2264              		.loc 1 688 19 discriminator 1
 2265 14bd 48837DB0 		cmpq	$0, -80(%rbp)
 2265      00
 2266 14c2 7417     		je	.L118
 689:argtable2.c   ****         arg_cat(&dest,separator,&ndest);
 2267              		.loc 1 689 9
 2268 14c4 488D55C0 		leaq	-64(%rbp), %rdx
 2269 14c8 488B4D98 		movq	-104(%rbp), %rcx
 2270 14cc 488D45C8 		leaq	-56(%rbp), %rax
 2271 14d0 4889CE   		movq	%rcx, %rsi
 2272 14d3 4889C7   		movq	%rax, %rdi
 2273 14d6 E8F9FBFF 		call	arg_cat
 2273      FF
 2274              	.L118:
 690:argtable2.c   **** 
 691:argtable2.c   ****     if (longopts)
 2275              		.loc 1 691 8
 2276 14db 48837DB0 		cmpq	$0, -80(%rbp)
 2276      00
 2277 14e0 0F84A100 		je	.L119
 2277      0000
 2278              	.LBB23:
 692:argtable2.c   ****         {
 693:argtable2.c   ****         const char *c = longopts;
 2279              		.loc 1 693 21
 2280 14e6 488B45B0 		movq	-80(%rbp), %rax
 2281 14ea 488945E0 		movq	%rax, -32(%rbp)
 694:argtable2.c   ****         while(*c)
 2282              		.loc 1 694 14
 2283 14ee E9850000 		jmp	.L120
 2283      00
 2284              	.L121:
 2285              	.LBB24:
 695:argtable2.c   ****             {
 696:argtable2.c   ****             size_t ncspn;
 697:argtable2.c   **** 
 698:argtable2.c   ****             /* add "--" tag prefix */
 699:argtable2.c   ****             arg_cat(&dest,"--",&ndest);
 2286              		.loc 1 699 13
 2287 14f3 488D55C0 		leaq	-64(%rbp), %rdx
 2288 14f7 488D45C8 		leaq	-56(%rbp), %rax
 2289 14fb 488D0D00 		leaq	.LC9(%rip), %rcx
 2289      000000
 2290 1502 4889CE   		movq	%rcx, %rsi
 2291 1505 4889C7   		movq	%rax, %rdi
 2292 1508 E8C7FBFF 		call	arg_cat
 2292      FF
 700:argtable2.c   **** 
 701:argtable2.c   ****             /* add comma separated option tag */
 702:argtable2.c   ****             ncspn = strcspn(c,",");
 2293              		.loc 1 702 21
 2294 150d 488B45E0 		movq	-32(%rbp), %rax
 2295 1511 488D1500 		leaq	.LC10(%rip), %rdx
 2295      000000
 2296 1518 4889D6   		movq	%rdx, %rsi
 2297 151b 4889C7   		movq	%rax, %rdi
 2298 151e E8000000 		call	strcspn@PLT
 2298      00
 2299 1523 488945E8 		movq	%rax, -24(%rbp)
 703:argtable2.c   ****             strncat(dest,c,(ncspn<ndest)?ncspn:ndest);
 2300              		.loc 1 703 13
 2301 1527 488B55C0 		movq	-64(%rbp), %rdx
 2302 152b 488B45E8 		movq	-24(%rbp), %rax
 2303 152f 4839C2   		cmpq	%rax, %rdx
 2304 1532 480F47D0 		cmova	%rax, %rdx
 2305 1536 488B45C8 		movq	-56(%rbp), %rax
 2306 153a 488B4DE0 		movq	-32(%rbp), %rcx
 2307 153e 4889CE   		movq	%rcx, %rsi
 2308 1541 4889C7   		movq	%rax, %rdi
 2309 1544 E8000000 		call	strncat@PLT
 2309      00
 704:argtable2.c   ****             c+=ncspn;
 2310              		.loc 1 704 14
 2311 1549 488B45E8 		movq	-24(%rbp), %rax
 2312 154d 480145E0 		addq	%rax, -32(%rbp)
 705:argtable2.c   **** 
 706:argtable2.c   ****             /* add given separator in place of comma */
 707:argtable2.c   ****             if (*c==',')
 2313              		.loc 1 707 17
 2314 1551 488B45E0 		movq	-32(%rbp), %rax
 2315 1555 0FB600   		movzbl	(%rax), %eax
 2316              		.loc 1 707 16
 2317 1558 3C2C     		cmpb	$44, %al
 2318 155a 751C     		jne	.L120
 708:argtable2.c   ****                  {
 709:argtable2.c   ****                  arg_cat(&dest,separator,&ndest);
 2319              		.loc 1 709 18
 2320 155c 488D55C0 		leaq	-64(%rbp), %rdx
 2321 1560 488B4D98 		movq	-104(%rbp), %rcx
 2322 1564 488D45C8 		leaq	-56(%rbp), %rax
 2323 1568 4889CE   		movq	%rcx, %rsi
 2324 156b 4889C7   		movq	%rax, %rdi
 2325 156e E861FBFF 		call	arg_cat
 2325      FF
 710:argtable2.c   ****                  c++;
 2326              		.loc 1 710 19
 2327 1573 488345E0 		addq	$1, -32(%rbp)
 2327      01
 2328              	.L120:
 2329              	.LBE24:
 694:argtable2.c   ****             {
 2330              		.loc 1 694 15
 2331 1578 488B45E0 		movq	-32(%rbp), %rax
 2332 157c 0FB600   		movzbl	(%rax), %eax
 2333 157f 84C0     		testb	%al, %al
 2334 1581 0F856CFF 		jne	.L121
 2334      FFFF
 2335              	.L119:
 2336              	.LBE23:
 711:argtable2.c   ****                  }
 712:argtable2.c   ****             }
 713:argtable2.c   ****         }
 714:argtable2.c   **** 
 715:argtable2.c   ****     if (datatype)
 2337              		.loc 1 715 8
 2338 1587 48837DA8 		cmpq	$0, -88(%rbp)
 2338      00
 2339 158c 0F84AE00 		je	.L127
 2339      0000
 716:argtable2.c   ****         {
 717:argtable2.c   ****         if (longopts)
 2340              		.loc 1 717 12
 2341 1592 48837DB0 		cmpq	$0, -80(%rbp)
 2341      00
 2342 1597 741C     		je	.L123
 718:argtable2.c   ****             arg_cat(&dest,"=",&ndest);
 2343              		.loc 1 718 13
 2344 1599 488D55C0 		leaq	-64(%rbp), %rdx
 2345 159d 488D45C8 		leaq	-56(%rbp), %rax
 2346 15a1 488D0D00 		leaq	.LC11(%rip), %rcx
 2346      000000
 2347 15a8 4889CE   		movq	%rcx, %rsi
 2348 15ab 4889C7   		movq	%rax, %rdi
 2349 15ae E821FBFF 		call	arg_cat
 2349      FF
 2350 15b3 EB21     		jmp	.L124
 2351              	.L123:
 719:argtable2.c   ****         else if (shortopts)
 2352              		.loc 1 719 17
 2353 15b5 48837DB8 		cmpq	$0, -72(%rbp)
 2353      00
 2354 15ba 741A     		je	.L124
 720:argtable2.c   ****             arg_cat(&dest," ",&ndest);
 2355              		.loc 1 720 13
 2356 15bc 488D55C0 		leaq	-64(%rbp), %rdx
 2357 15c0 488D45C8 		leaq	-56(%rbp), %rax
 2358 15c4 488D0D00 		leaq	.LC6(%rip), %rcx
 2358      000000
 2359 15cb 4889CE   		movq	%rcx, %rsi
 2360 15ce 4889C7   		movq	%rax, %rdi
 2361 15d1 E8FEFAFF 		call	arg_cat
 2361      FF
 2362              	.L124:
 721:argtable2.c   **** 
 722:argtable2.c   ****         if (optvalue)
 2363              		.loc 1 722 12
 2364 15d6 837DA400 		cmpl	$0, -92(%rbp)
 2365 15da 744D     		je	.L125
 723:argtable2.c   ****             {
 724:argtable2.c   ****             arg_cat(&dest,"[",&ndest);
 2366              		.loc 1 724 13
 2367 15dc 488D55C0 		leaq	-64(%rbp), %rdx
 2368 15e0 488D45C8 		leaq	-56(%rbp), %rax
 2369 15e4 488D0D00 		leaq	.LC7(%rip), %rcx
 2369      000000
 2370 15eb 4889CE   		movq	%rcx, %rsi
 2371 15ee 4889C7   		movq	%rax, %rdi
 2372 15f1 E8DEFAFF 		call	arg_cat
 2372      FF
 725:argtable2.c   ****             arg_cat(&dest,datatype,&ndest);
 2373              		.loc 1 725 13
 2374 15f6 488D55C0 		leaq	-64(%rbp), %rdx
 2375 15fa 488B4DA8 		movq	-88(%rbp), %rcx
 2376 15fe 488D45C8 		leaq	-56(%rbp), %rax
 2377 1602 4889CE   		movq	%rcx, %rsi
 2378 1605 4889C7   		movq	%rax, %rdi
 2379 1608 E8C7FAFF 		call	arg_cat
 2379      FF
 726:argtable2.c   ****             arg_cat(&dest,"]",&ndest);
 2380              		.loc 1 726 13
 2381 160d 488D55C0 		leaq	-64(%rbp), %rdx
 2382 1611 488D45C8 		leaq	-56(%rbp), %rax
 2383 1615 488D0D00 		leaq	.LC8(%rip), %rcx
 2383      000000
 2384 161c 4889CE   		movq	%rcx, %rsi
 2385 161f 4889C7   		movq	%rax, %rdi
 2386 1622 E8ADFAFF 		call	arg_cat
 2386      FF
 727:argtable2.c   ****             }
 728:argtable2.c   ****         else
 729:argtable2.c   ****             arg_cat(&dest,datatype,&ndest);
 730:argtable2.c   ****         }
 731:argtable2.c   ****     }
 2387              		.loc 1 731 5
 2388 1627 EB17     		jmp	.L127
 2389              	.L125:
 729:argtable2.c   ****         }
 2390              		.loc 1 729 13
 2391 1629 488D55C0 		leaq	-64(%rbp), %rdx
 2392 162d 488B4DA8 		movq	-88(%rbp), %rcx
 2393 1631 488D45C8 		leaq	-56(%rbp), %rax
 2394 1635 4889CE   		movq	%rcx, %rsi
 2395 1638 4889C7   		movq	%rax, %rdi
 2396 163b E894FAFF 		call	arg_cat
 2396      FF
 2397              	.L127:
 2398              		.loc 1 731 5
 2399 1640 90       		nop
 2400 1641 488B45F8 		movq	-8(%rbp), %rax
 2401 1645 64482B04 		subq	%fs:40, %rax
 2401      25280000 
 2401      00
 2402 164e 7405     		je	.L126
 2403 1650 E8000000 		call	__stack_chk_fail@PLT
 2403      00
 2404              	.L126:
 2405 1655 C9       		leave
 2406              		.cfi_def_cfa 7, 8
 2407 1656 C3       		ret
 2408              		.cfi_endproc
 2409              	.LFE13:
 2411              		.section	.rodata
 2412              	.LC13:
 2413 0098 7C00     		.string	"|"
 2414              		.text
 2415              		.globl	arg_print_option
 2417              	arg_print_option:
 2418              	.LFB14:
 732:argtable2.c   **** 
 733:argtable2.c   **** 
 734:argtable2.c   **** /* this function should be deprecated because it doesnt consider optional argument values (ARG_HASO
 735:argtable2.c   **** void arg_print_option(FILE *fp, const char *shortopts, const char *longopts, const char *datatype, 
 736:argtable2.c   ****     {
 2419              		.loc 1 736 5
 2420              		.cfi_startproc
 2421 1657 F30F1EFA 		endbr64
 2422 165b 55       		pushq	%rbp
 2423              		.cfi_def_cfa_offset 16
 2424              		.cfi_offset 6, -16
 2425 165c 4889E5   		movq	%rsp, %rbp
 2426              		.cfi_def_cfa_register 6
 2427 165f 4881EC00 		subq	$256, %rsp
 2427      010000
 2428 1666 4889BD28 		movq	%rdi, -216(%rbp)
 2428      FFFFFF
 2429 166d 4889B520 		movq	%rsi, -224(%rbp)
 2429      FFFFFF
 2430 1674 48899518 		movq	%rdx, -232(%rbp)
 2430      FFFFFF
 2431 167b 48898D10 		movq	%rcx, -240(%rbp)
 2431      FFFFFF
 2432 1682 4C898508 		movq	%r8, -248(%rbp)
 2432      FFFFFF
 2433              		.loc 1 736 5
 2434 1689 64488B04 		movq	%fs:40, %rax
 2434      25280000 
 2434      00
 2435 1692 488945F8 		movq	%rax, -8(%rbp)
 2436 1696 31C0     		xorl	%eax, %eax
 737:argtable2.c   ****     char syntax[200]="";
 2437              		.loc 1 737 10
 2438 1698 48C78530 		movq	$0, -208(%rbp)
 2438      FFFFFF00 
 2438      000000
 2439 16a3 48C78538 		movq	$0, -200(%rbp)
 2439      FFFFFF00 
 2439      000000
 2440 16ae 48C78540 		movq	$0, -192(%rbp)
 2440      FFFFFF00 
 2440      000000
 2441 16b9 48C78548 		movq	$0, -184(%rbp)
 2441      FFFFFF00 
 2441      000000
 2442 16c4 48C78550 		movq	$0, -176(%rbp)
 2442      FFFFFF00 
 2442      000000
 2443 16cf 48C78558 		movq	$0, -168(%rbp)
 2443      FFFFFF00 
 2443      000000
 2444 16da 48C78560 		movq	$0, -160(%rbp)
 2444      FFFFFF00 
 2444      000000
 2445 16e5 48C78568 		movq	$0, -152(%rbp)
 2445      FFFFFF00 
 2445      000000
 2446 16f0 48C78570 		movq	$0, -144(%rbp)
 2446      FFFFFF00 
 2446      000000
 2447 16fb 48C78578 		movq	$0, -136(%rbp)
 2447      FFFFFF00 
 2447      000000
 2448 1706 48C74580 		movq	$0, -128(%rbp)
 2448      00000000 
 2449 170e 48C74588 		movq	$0, -120(%rbp)
 2449      00000000 
 2450 1716 48C74590 		movq	$0, -112(%rbp)
 2450      00000000 
 2451 171e 48C74598 		movq	$0, -104(%rbp)
 2451      00000000 
 2452 1726 48C745A0 		movq	$0, -96(%rbp)
 2452      00000000 
 2453 172e 48C745A8 		movq	$0, -88(%rbp)
 2453      00000000 
 2454 1736 48C745B0 		movq	$0, -80(%rbp)
 2454      00000000 
 2455 173e 48C745B8 		movq	$0, -72(%rbp)
 2455      00000000 
 2456 1746 48C745C0 		movq	$0, -64(%rbp)
 2456      00000000 
 2457 174e 48C745C8 		movq	$0, -56(%rbp)
 2457      00000000 
 2458 1756 48C745D0 		movq	$0, -48(%rbp)
 2458      00000000 
 2459 175e 48C745D8 		movq	$0, -40(%rbp)
 2459      00000000 
 2460 1766 48C745E0 		movq	$0, -32(%rbp)
 2460      00000000 
 2461 176e 48C745E8 		movq	$0, -24(%rbp)
 2461      00000000 
 2462 1776 48C745F0 		movq	$0, -16(%rbp)
 2462      00000000 
 738:argtable2.c   ****     suffix = suffix ? suffix : "";
 2463              		.loc 1 738 30
 2464 177e 4883BD08 		cmpq	$0, -248(%rbp)
 2464      FFFFFF00 
 2465 1786 7409     		je	.L129
 2466              		.loc 1 738 30 is_stmt 0 discriminator 1
 2467 1788 488B8508 		movq	-248(%rbp), %rax
 2467      FFFFFF
 2468 178f EB07     		jmp	.L130
 2469              	.L129:
 2470              		.loc 1 738 30 discriminator 2
 2471 1791 488D0500 		leaq	.LC12(%rip), %rax
 2471      000000
 2472              	.L130:
 2473              		.loc 1 738 12 is_stmt 1 discriminator 4
 2474 1798 48898508 		movq	%rax, -248(%rbp)
 2474      FFFFFF
 739:argtable2.c   **** 
 740:argtable2.c   ****     /* there is no way of passing the proper optvalue for optional argument values here, so we must
 741:argtable2.c   ****     arg_cat_optionv(syntax,sizeof(syntax),shortopts,longopts,datatype,0,"|");
 2475              		.loc 1 741 5 discriminator 4
 2476 179f 488BBD10 		movq	-240(%rbp), %rdi
 2476      FFFFFF
 2477 17a6 488B8D18 		movq	-232(%rbp), %rcx
 2477      FFFFFF
 2478 17ad 488B9520 		movq	-224(%rbp), %rdx
 2478      FFFFFF
 2479 17b4 488D8530 		leaq	-208(%rbp), %rax
 2479      FFFFFF
 2480 17bb 4883EC08 		subq	$8, %rsp
 2481 17bf 488D3500 		leaq	.LC13(%rip), %rsi
 2481      000000
 2482 17c6 56       		pushq	%rsi
 2483 17c7 41B90000 		movl	$0, %r9d
 2483      0000
 2484 17cd 4989F8   		movq	%rdi, %r8
 2485 17d0 BEC80000 		movl	$200, %esi
 2485      00
 2486 17d5 4889C7   		movq	%rax, %rdi
 2487 17d8 E81AFCFF 		call	arg_cat_optionv
 2487      FF
 2488 17dd 4883C410 		addq	$16, %rsp
 742:argtable2.c   **** 
 743:argtable2.c   ****     fputs(syntax,fp);
 2489              		.loc 1 743 5 discriminator 4
 2490 17e1 488B9528 		movq	-216(%rbp), %rdx
 2490      FFFFFF
 2491 17e8 488D8530 		leaq	-208(%rbp), %rax
 2491      FFFFFF
 2492 17ef 4889D6   		movq	%rdx, %rsi
 2493 17f2 4889C7   		movq	%rax, %rdi
 2494 17f5 E8000000 		call	fputs@PLT
 2494      00
 744:argtable2.c   ****     fputs(suffix,fp);
 2495              		.loc 1 744 5 discriminator 4
 2496 17fa 488B9528 		movq	-216(%rbp), %rdx
 2496      FFFFFF
 2497 1801 488B8508 		movq	-248(%rbp), %rax
 2497      FFFFFF
 2498 1808 4889D6   		movq	%rdx, %rsi
 2499 180b 4889C7   		movq	%rax, %rdi
 2500 180e E8000000 		call	fputs@PLT
 2500      00
 745:argtable2.c   ****     }
 2501              		.loc 1 745 5 discriminator 4
 2502 1813 90       		nop
 2503 1814 488B45F8 		movq	-8(%rbp), %rax
 2504 1818 64482B04 		subq	%fs:40, %rax
 2504      25280000 
 2504      00
 2505 1821 7405     		je	.L131
 2506              		.loc 1 745 5 is_stmt 0
 2507 1823 E8000000 		call	__stack_chk_fail@PLT
 2507      00
 2508              	.L131:
 2509 1828 C9       		leave
 2510              		.cfi_def_cfa 7, 8
 2511 1829 C3       		ret
 2512              		.cfi_endproc
 2513              	.LFE14:
 2515              		.section	.rodata
 2516              	.LC14:
 2517 009a 202D2563 		.string	" -%c"
 2517      00
 2518              	.LC15:
 2519 009f 205B2D25 		.string	" [-%c"
 2519      6300
 2520              	.LC16:
 2521 00a5 256300   		.string	"%c"
 2522              	.LC17:
 2523 00a8 5B256300 		.string	"[%c"
 2524              		.text
 2526              	arg_print_gnuswitch:
 2527              	.LFB15:
 746:argtable2.c   **** 
 747:argtable2.c   **** 
 748:argtable2.c   **** /*
 749:argtable2.c   ****  * Print a GNU style [OPTION] string in which all short options that
 750:argtable2.c   ****  * do not take argument values are presented in abbreviated form, as
 751:argtable2.c   ****  * in: -xvfsd, or -xvf[sd], or [-xvsfd]
 752:argtable2.c   ****  */
 753:argtable2.c   **** static
 754:argtable2.c   **** void arg_print_gnuswitch(FILE *fp, struct arg_hdr **table)
 755:argtable2.c   ****     {
 2528              		.loc 1 755 5 is_stmt 1
 2529              		.cfi_startproc
 2530 182a F30F1EFA 		endbr64
 2531 182e 55       		pushq	%rbp
 2532              		.cfi_def_cfa_offset 16
 2533              		.cfi_offset 6, -16
 2534 182f 4889E5   		movq	%rsp, %rbp
 2535              		.cfi_def_cfa_register 6
 2536 1832 4883EC30 		subq	$48, %rsp
 2537 1836 48897DD8 		movq	%rdi, -40(%rbp)
 2538 183a 488975D0 		movq	%rsi, -48(%rbp)
 756:argtable2.c   ****     int tabindex;
 757:argtable2.c   ****     char *format1=" -%c";
 2539              		.loc 1 757 11
 2540 183e 488D0500 		leaq	.LC14(%rip), %rax
 2540      000000
 2541 1845 488945E8 		movq	%rax, -24(%rbp)
 758:argtable2.c   ****     char *format2=" [-%c";
 2542              		.loc 1 758 11
 2543 1849 488D0500 		leaq	.LC15(%rip), %rax
 2543      000000
 2544 1850 488945F0 		movq	%rax, -16(%rbp)
 759:argtable2.c   ****     char *suffix="";
 2545              		.loc 1 759 11
 2546 1854 488D0500 		leaq	.LC12(%rip), %rax
 2546      000000
 2547 185b 488945F8 		movq	%rax, -8(%rbp)
 760:argtable2.c   **** 
 761:argtable2.c   ****     /* print all mandatory switches that are without argument values */
 762:argtable2.c   ****     for(tabindex=0; table[tabindex] && !(table[tabindex]->flag&ARG_TERMINATOR); tabindex++)
 2548              		.loc 1 762 17
 2549 185f C745E400 		movl	$0, -28(%rbp)
 2549      000000
 2550              		.loc 1 762 5
 2551 1866 E9C20000 		jmp	.L133
 2551      00
 2552              	.L139:
 763:argtable2.c   ****         {
 764:argtable2.c   ****         /* skip optional options */
 765:argtable2.c   ****         if (table[tabindex]->mincount<1)
 2553              		.loc 1 765 18
 2554 186b 8B45E4   		movl	-28(%rbp), %eax
 2555 186e 4898     		cltq
 2556 1870 488D14C5 		leaq	0(,%rax,8), %rdx
 2556      00000000 
 2557 1878 488B45D0 		movq	-48(%rbp), %rax
 2558 187c 4801D0   		addq	%rdx, %rax
 2559 187f 488B00   		movq	(%rax), %rax
 2560              		.loc 1 765 28
 2561 1882 8B4028   		movl	40(%rax), %eax
 2562              		.loc 1 765 12
 2563 1885 85C0     		testl	%eax, %eax
 2564 1887 0F8E9500 		jle	.L147
 2564      0000
 766:argtable2.c   ****             continue;
 767:argtable2.c   **** 
 768:argtable2.c   ****         /* skip non-short options */
 769:argtable2.c   ****         if (table[tabindex]->shortopts==NULL)
 2565              		.loc 1 769 18
 2566 188d 8B45E4   		movl	-28(%rbp), %eax
 2567 1890 4898     		cltq
 2568 1892 488D14C5 		leaq	0(,%rax,8), %rdx
 2568      00000000 
 2569 189a 488B45D0 		movq	-48(%rbp), %rax
 2570 189e 4801D0   		addq	%rdx, %rax
 2571 18a1 488B00   		movq	(%rax), %rax
 2572              		.loc 1 769 28
 2573 18a4 488B4008 		movq	8(%rax), %rax
 2574              		.loc 1 769 12
 2575 18a8 4885C0   		testq	%rax, %rax
 2576 18ab 7478     		je	.L148
 770:argtable2.c   ****             continue;
 771:argtable2.c   **** 
 772:argtable2.c   ****         /* skip options that take argument values */
 773:argtable2.c   ****         if (table[tabindex]->flag&ARG_HASVALUE)
 2577              		.loc 1 773 18
 2578 18ad 8B45E4   		movl	-28(%rbp), %eax
 2579 18b0 4898     		cltq
 2580 18b2 488D14C5 		leaq	0(,%rax,8), %rdx
 2580      00000000 
 2581 18ba 488B45D0 		movq	-48(%rbp), %rax
 2582 18be 4801D0   		addq	%rdx, %rax
 2583 18c1 488B00   		movq	(%rax), %rax
 2584              		.loc 1 773 28
 2585 18c4 0FB600   		movzbl	(%rax), %eax
 2586              		.loc 1 773 34
 2587 18c7 0FBEC0   		movsbl	%al, %eax
 2588 18ca 83E002   		andl	$2, %eax
 2589              		.loc 1 773 12
 2590 18cd 85C0     		testl	%eax, %eax
 2591 18cf 7557     		jne	.L149
 774:argtable2.c   ****             continue;
 775:argtable2.c   **** 
 776:argtable2.c   ****         /* print the short option (only the first short option char, ignore multiple choices)*/
 777:argtable2.c   ****         fprintf(fp,format1,table[tabindex]->shortopts[0]);
 2592              		.loc 1 777 33
 2593 18d1 8B45E4   		movl	-28(%rbp), %eax
 2594 18d4 4898     		cltq
 2595 18d6 488D14C5 		leaq	0(,%rax,8), %rdx
 2595      00000000 
 2596 18de 488B45D0 		movq	-48(%rbp), %rax
 2597 18e2 4801D0   		addq	%rdx, %rax
 2598 18e5 488B00   		movq	(%rax), %rax
 2599              		.loc 1 777 43
 2600 18e8 488B4008 		movq	8(%rax), %rax
 2601              		.loc 1 777 54
 2602 18ec 0FB600   		movzbl	(%rax), %eax
 2603              		.loc 1 777 9
 2604 18ef 0FBED0   		movsbl	%al, %edx
 2605 18f2 488B4DE8 		movq	-24(%rbp), %rcx
 2606 18f6 488B45D8 		movq	-40(%rbp), %rax
 2607 18fa 4889CE   		movq	%rcx, %rsi
 2608 18fd 4889C7   		movq	%rax, %rdi
 2609 1900 B8000000 		movl	$0, %eax
 2609      00
 2610 1905 E8000000 		call	fprintf@PLT
 2610      00
 778:argtable2.c   ****         format1="%c";
 2611              		.loc 1 778 16
 2612 190a 488D0500 		leaq	.LC16(%rip), %rax
 2612      000000
 2613 1911 488945E8 		movq	%rax, -24(%rbp)
 779:argtable2.c   ****         format2="[%c";
 2614              		.loc 1 779 16
 2615 1915 488D0500 		leaq	.LC17(%rip), %rax
 2615      000000
 2616 191c 488945F0 		movq	%rax, -16(%rbp)
 2617 1920 EB07     		jmp	.L135
 2618              	.L147:
 766:argtable2.c   **** 
 2619              		.loc 1 766 13
 2620 1922 90       		nop
 2621 1923 EB04     		jmp	.L135
 2622              	.L148:
 770:argtable2.c   **** 
 2623              		.loc 1 770 13
 2624 1925 90       		nop
 2625 1926 EB01     		jmp	.L135
 2626              	.L149:
 774:argtable2.c   **** 
 2627              		.loc 1 774 13
 2628 1928 90       		nop
 2629              	.L135:
 762:argtable2.c   ****         {
 2630              		.loc 1 762 89 discriminator 2
 2631 1929 8345E401 		addl	$1, -28(%rbp)
 2632              	.L133:
 762:argtable2.c   ****         {
 2633              		.loc 1 762 26 discriminator 1
 2634 192d 8B45E4   		movl	-28(%rbp), %eax
 2635 1930 4898     		cltq
 2636 1932 488D14C5 		leaq	0(,%rax,8), %rdx
 2636      00000000 
 2637 193a 488B45D0 		movq	-48(%rbp), %rax
 2638 193e 4801D0   		addq	%rdx, %rax
 2639 1941 488B00   		movq	(%rax), %rax
 762:argtable2.c   ****         {
 2640              		.loc 1 762 37 discriminator 1
 2641 1944 4885C0   		testq	%rax, %rax
 2642 1947 7428     		je	.L138
 762:argtable2.c   ****         {
 2643              		.loc 1 762 47 discriminator 3
 2644 1949 8B45E4   		movl	-28(%rbp), %eax
 2645 194c 4898     		cltq
 2646 194e 488D14C5 		leaq	0(,%rax,8), %rdx
 2646      00000000 
 2647 1956 488B45D0 		movq	-48(%rbp), %rax
 2648 195a 4801D0   		addq	%rdx, %rax
 2649 195d 488B00   		movq	(%rax), %rax
 762:argtable2.c   ****         {
 2650              		.loc 1 762 57 discriminator 3
 2651 1960 0FB600   		movzbl	(%rax), %eax
 762:argtable2.c   ****         {
 2652              		.loc 1 762 63 discriminator 3
 2653 1963 0FBEC0   		movsbl	%al, %eax
 2654 1966 83E001   		andl	$1, %eax
 762:argtable2.c   ****         {
 2655              		.loc 1 762 37 discriminator 3
 2656 1969 85C0     		testl	%eax, %eax
 2657 196b 0F84FAFE 		je	.L139
 2657      FFFF
 2658              	.L138:
 780:argtable2.c   ****         }
 781:argtable2.c   **** 
 782:argtable2.c   ****     /* print all optional switches that are without argument values */
 783:argtable2.c   ****     for(tabindex=0; table[tabindex] && !(table[tabindex]->flag&ARG_TERMINATOR); tabindex++)
 2659              		.loc 1 783 17
 2660 1971 C745E400 		movl	$0, -28(%rbp)
 2660      000000
 2661              		.loc 1 783 5
 2662 1978 E9C20000 		jmp	.L140
 2662      00
 2663              	.L146:
 784:argtable2.c   ****         {
 785:argtable2.c   ****         /* skip mandatory args */
 786:argtable2.c   ****         if (table[tabindex]->mincount>0)
 2664              		.loc 1 786 18
 2665 197d 8B45E4   		movl	-28(%rbp), %eax
 2666 1980 4898     		cltq
 2667 1982 488D14C5 		leaq	0(,%rax,8), %rdx
 2667      00000000 
 2668 198a 488B45D0 		movq	-48(%rbp), %rax
 2669 198e 4801D0   		addq	%rdx, %rax
 2670 1991 488B00   		movq	(%rax), %rax
 2671              		.loc 1 786 28
 2672 1994 8B4028   		movl	40(%rax), %eax
 2673              		.loc 1 786 12
 2674 1997 85C0     		testl	%eax, %eax
 2675 1999 0F8F9500 		jg	.L150
 2675      0000
 787:argtable2.c   ****             continue;
 788:argtable2.c   **** 
 789:argtable2.c   ****         /* skip args without short options */
 790:argtable2.c   ****         if (table[tabindex]->shortopts==NULL)
 2676              		.loc 1 790 18
 2677 199f 8B45E4   		movl	-28(%rbp), %eax
 2678 19a2 4898     		cltq
 2679 19a4 488D14C5 		leaq	0(,%rax,8), %rdx
 2679      00000000 
 2680 19ac 488B45D0 		movq	-48(%rbp), %rax
 2681 19b0 4801D0   		addq	%rdx, %rax
 2682 19b3 488B00   		movq	(%rax), %rax
 2683              		.loc 1 790 28
 2684 19b6 488B4008 		movq	8(%rax), %rax
 2685              		.loc 1 790 12
 2686 19ba 4885C0   		testq	%rax, %rax
 2687 19bd 7478     		je	.L151
 791:argtable2.c   ****             continue;
 792:argtable2.c   **** 
 793:argtable2.c   ****         /* skip args with values */
 794:argtable2.c   ****         if (table[tabindex]->flag&ARG_HASVALUE)
 2688              		.loc 1 794 18
 2689 19bf 8B45E4   		movl	-28(%rbp), %eax
 2690 19c2 4898     		cltq
 2691 19c4 488D14C5 		leaq	0(,%rax,8), %rdx
 2691      00000000 
 2692 19cc 488B45D0 		movq	-48(%rbp), %rax
 2693 19d0 4801D0   		addq	%rdx, %rax
 2694 19d3 488B00   		movq	(%rax), %rax
 2695              		.loc 1 794 28
 2696 19d6 0FB600   		movzbl	(%rax), %eax
 2697              		.loc 1 794 34
 2698 19d9 0FBEC0   		movsbl	%al, %eax
 2699 19dc 83E002   		andl	$2, %eax
 2700              		.loc 1 794 12
 2701 19df 85C0     		testl	%eax, %eax
 2702 19e1 7557     		jne	.L152
 795:argtable2.c   ****             continue;
 796:argtable2.c   **** 
 797:argtable2.c   ****         /* print first short option */
 798:argtable2.c   ****         fprintf(fp,format2,table[tabindex]->shortopts[0]);
 2703              		.loc 1 798 33
 2704 19e3 8B45E4   		movl	-28(%rbp), %eax
 2705 19e6 4898     		cltq
 2706 19e8 488D14C5 		leaq	0(,%rax,8), %rdx
 2706      00000000 
 2707 19f0 488B45D0 		movq	-48(%rbp), %rax
 2708 19f4 4801D0   		addq	%rdx, %rax
 2709 19f7 488B00   		movq	(%rax), %rax
 2710              		.loc 1 798 43
 2711 19fa 488B4008 		movq	8(%rax), %rax
 2712              		.loc 1 798 54
 2713 19fe 0FB600   		movzbl	(%rax), %eax
 2714              		.loc 1 798 9
 2715 1a01 0FBED0   		movsbl	%al, %edx
 2716 1a04 488B4DF0 		movq	-16(%rbp), %rcx
 2717 1a08 488B45D8 		movq	-40(%rbp), %rax
 2718 1a0c 4889CE   		movq	%rcx, %rsi
 2719 1a0f 4889C7   		movq	%rax, %rdi
 2720 1a12 B8000000 		movl	$0, %eax
 2720      00
 2721 1a17 E8000000 		call	fprintf@PLT
 2721      00
 799:argtable2.c   ****         format2="%c";
 2722              		.loc 1 799 16
 2723 1a1c 488D0500 		leaq	.LC16(%rip), %rax
 2723      000000
 2724 1a23 488945F0 		movq	%rax, -16(%rbp)
 800:argtable2.c   ****         suffix="]";
 2725              		.loc 1 800 15
 2726 1a27 488D0500 		leaq	.LC8(%rip), %rax
 2726      000000
 2727 1a2e 488945F8 		movq	%rax, -8(%rbp)
 2728 1a32 EB07     		jmp	.L142
 2729              	.L150:
 787:argtable2.c   **** 
 2730              		.loc 1 787 13
 2731 1a34 90       		nop
 2732 1a35 EB04     		jmp	.L142
 2733              	.L151:
 791:argtable2.c   **** 
 2734              		.loc 1 791 13
 2735 1a37 90       		nop
 2736 1a38 EB01     		jmp	.L142
 2737              	.L152:
 795:argtable2.c   **** 
 2738              		.loc 1 795 13
 2739 1a3a 90       		nop
 2740              	.L142:
 783:argtable2.c   ****         {
 2741              		.loc 1 783 89 discriminator 2
 2742 1a3b 8345E401 		addl	$1, -28(%rbp)
 2743              	.L140:
 783:argtable2.c   ****         {
 2744              		.loc 1 783 26 discriminator 1
 2745 1a3f 8B45E4   		movl	-28(%rbp), %eax
 2746 1a42 4898     		cltq
 2747 1a44 488D14C5 		leaq	0(,%rax,8), %rdx
 2747      00000000 
 2748 1a4c 488B45D0 		movq	-48(%rbp), %rax
 2749 1a50 4801D0   		addq	%rdx, %rax
 2750 1a53 488B00   		movq	(%rax), %rax
 783:argtable2.c   ****         {
 2751              		.loc 1 783 37 discriminator 1
 2752 1a56 4885C0   		testq	%rax, %rax
 2753 1a59 7428     		je	.L145
 783:argtable2.c   ****         {
 2754              		.loc 1 783 47 discriminator 3
 2755 1a5b 8B45E4   		movl	-28(%rbp), %eax
 2756 1a5e 4898     		cltq
 2757 1a60 488D14C5 		leaq	0(,%rax,8), %rdx
 2757      00000000 
 2758 1a68 488B45D0 		movq	-48(%rbp), %rax
 2759 1a6c 4801D0   		addq	%rdx, %rax
 2760 1a6f 488B00   		movq	(%rax), %rax
 783:argtable2.c   ****         {
 2761              		.loc 1 783 57 discriminator 3
 2762 1a72 0FB600   		movzbl	(%rax), %eax
 783:argtable2.c   ****         {
 2763              		.loc 1 783 63 discriminator 3
 2764 1a75 0FBEC0   		movsbl	%al, %eax
 2765 1a78 83E001   		andl	$1, %eax
 783:argtable2.c   ****         {
 2766              		.loc 1 783 37 discriminator 3
 2767 1a7b 85C0     		testl	%eax, %eax
 2768 1a7d 0F84FAFE 		je	.L146
 2768      FFFF
 2769              	.L145:
 801:argtable2.c   ****         }
 802:argtable2.c   **** 
 803:argtable2.c   ****     fprintf(fp,"%s",suffix);
 2770              		.loc 1 803 5
 2771 1a83 488B55D8 		movq	-40(%rbp), %rdx
 2772 1a87 488B45F8 		movq	-8(%rbp), %rax
 2773 1a8b 4889D6   		movq	%rdx, %rsi
 2774 1a8e 4889C7   		movq	%rax, %rdi
 2775 1a91 E8000000 		call	fputs@PLT
 2775      00
 804:argtable2.c   ****     }
 2776              		.loc 1 804 5
 2777 1a96 90       		nop
 2778 1a97 C9       		leave
 2779              		.cfi_def_cfa 7, 8
 2780 1a98 C3       		ret
 2781              		.cfi_endproc
 2782              	.LFE15:
 2784              		.section	.rodata
 2785              	.LC18:
 2786 00ac 20257300 		.string	" %s"
 2787              	.LC19:
 2788 00b0 205B2573 		.string	" [%s]"
 2788      5D00
 2789              	.LC20:
 2790 00b6 205B2573 		.string	" [%s] [%s]"
 2790      5D205B25 
 2790      735D00
 2791              	.LC21:
 2792 00c1 205B2573 		.string	" [%s]..."
 2792      5D2E2E2E 
 2792      00
 2793              		.text
 2794              		.globl	arg_print_syntax
 2796              	arg_print_syntax:
 2797              	.LFB16:
 805:argtable2.c   **** 
 806:argtable2.c   **** 
 807:argtable2.c   **** void arg_print_syntax(FILE *fp, void **argtable, const char *suffix)
 808:argtable2.c   ****     {
 2798              		.loc 1 808 5
 2799              		.cfi_startproc
 2800 1a99 F30F1EFA 		endbr64
 2801 1a9d 55       		pushq	%rbp
 2802              		.cfi_def_cfa_offset 16
 2803              		.cfi_offset 6, -16
 2804 1a9e 4889E5   		movq	%rsp, %rbp
 2805              		.cfi_def_cfa_register 6
 2806 1aa1 4881EC20 		subq	$288, %rsp
 2806      010000
 2807 1aa8 4889BDF8 		movq	%rdi, -264(%rbp)
 2807      FEFFFF
 2808 1aaf 4889B5F0 		movq	%rsi, -272(%rbp)
 2808      FEFFFF
 2809 1ab6 488995E8 		movq	%rdx, -280(%rbp)
 2809      FEFFFF
 2810              		.loc 1 808 5
 2811 1abd 64488B04 		movq	%fs:40, %rax
 2811      25280000 
 2811      00
 2812 1ac6 488945F8 		movq	%rax, -8(%rbp)
 2813 1aca 31C0     		xorl	%eax, %eax
 809:argtable2.c   ****     struct arg_hdr **table = (struct arg_hdr**)argtable;
 2814              		.loc 1 809 22
 2815 1acc 488B85F0 		movq	-272(%rbp), %rax
 2815      FEFFFF
 2816 1ad3 48898510 		movq	%rax, -240(%rbp)
 2816      FFFFFF
 810:argtable2.c   ****     int i,tabindex;
 811:argtable2.c   **** 
 812:argtable2.c   ****     /* print GNU style [OPTION] string */
 813:argtable2.c   ****     arg_print_gnuswitch(fp, table);
 2817              		.loc 1 813 5
 2818 1ada 488B9510 		movq	-240(%rbp), %rdx
 2818      FFFFFF
 2819 1ae1 488B85F8 		movq	-264(%rbp), %rax
 2819      FEFFFF
 2820 1ae8 4889D6   		movq	%rdx, %rsi
 2821 1aeb 4889C7   		movq	%rax, %rdi
 2822 1aee E837FDFF 		call	arg_print_gnuswitch
 2822      FF
 814:argtable2.c   **** 
 815:argtable2.c   ****     /* print remaining options in abbreviated style */
 816:argtable2.c   ****     for(tabindex=0; table[tabindex] && !(table[tabindex]->flag&ARG_TERMINATOR); tabindex++)
 2823              		.loc 1 816 17
 2824 1af3 C7850CFF 		movl	$0, -244(%rbp)
 2824      FFFF0000 
 2824      0000
 2825              		.loc 1 816 5
 2826 1afd E95A0300 		jmp	.L154
 2826      00
 2827              	.L165:
 2828              	.LBB25:
 817:argtable2.c   ****         {
 818:argtable2.c   ****         char syntax[200]="";
 2829              		.loc 1 818 14
 2830 1b02 48C78530 		movq	$0, -208(%rbp)
 2830      FFFFFF00 
 2830      000000
 2831 1b0d 48C78538 		movq	$0, -200(%rbp)
 2831      FFFFFF00 
 2831      000000
 2832 1b18 48C78540 		movq	$0, -192(%rbp)
 2832      FFFFFF00 
 2832      000000
 2833 1b23 48C78548 		movq	$0, -184(%rbp)
 2833      FFFFFF00 
 2833      000000
 2834 1b2e 48C78550 		movq	$0, -176(%rbp)
 2834      FFFFFF00 
 2834      000000
 2835 1b39 48C78558 		movq	$0, -168(%rbp)
 2835      FFFFFF00 
 2835      000000
 2836 1b44 48C78560 		movq	$0, -160(%rbp)
 2836      FFFFFF00 
 2836      000000
 2837 1b4f 48C78568 		movq	$0, -152(%rbp)
 2837      FFFFFF00 
 2837      000000
 2838 1b5a 48C78570 		movq	$0, -144(%rbp)
 2838      FFFFFF00 
 2838      000000
 2839 1b65 48C78578 		movq	$0, -136(%rbp)
 2839      FFFFFF00 
 2839      000000
 2840 1b70 48C74580 		movq	$0, -128(%rbp)
 2840      00000000 
 2841 1b78 48C74588 		movq	$0, -120(%rbp)
 2841      00000000 
 2842 1b80 48C74590 		movq	$0, -112(%rbp)
 2842      00000000 
 2843 1b88 48C74598 		movq	$0, -104(%rbp)
 2843      00000000 
 2844 1b90 48C745A0 		movq	$0, -96(%rbp)
 2844      00000000 
 2845 1b98 48C745A8 		movq	$0, -88(%rbp)
 2845      00000000 
 2846 1ba0 48C745B0 		movq	$0, -80(%rbp)
 2846      00000000 
 2847 1ba8 48C745B8 		movq	$0, -72(%rbp)
 2847      00000000 
 2848 1bb0 48C745C0 		movq	$0, -64(%rbp)
 2848      00000000 
 2849 1bb8 48C745C8 		movq	$0, -56(%rbp)
 2849      00000000 
 2850 1bc0 48C745D0 		movq	$0, -48(%rbp)
 2850      00000000 
 2851 1bc8 48C745D8 		movq	$0, -40(%rbp)
 2851      00000000 
 2852 1bd0 48C745E0 		movq	$0, -32(%rbp)
 2852      00000000 
 2853 1bd8 48C745E8 		movq	$0, -24(%rbp)
 2853      00000000 
 2854 1be0 48C745F0 		movq	$0, -16(%rbp)
 2854      00000000 
 819:argtable2.c   ****         const char *shortopts, *longopts, *datatype;
 820:argtable2.c   **** 
 821:argtable2.c   ****         /* skip short options without arg values (they were printed by arg_print_gnu_switch) */
 822:argtable2.c   ****         if (table[tabindex]->shortopts && !(table[tabindex]->flag&ARG_HASVALUE))
 2855              		.loc 1 822 18
 2856 1be8 8B850CFF 		movl	-244(%rbp), %eax
 2856      FFFF
 2857 1bee 4898     		cltq
 2858 1bf0 488D14C5 		leaq	0(,%rax,8), %rdx
 2858      00000000 
 2859 1bf8 488B8510 		movq	-240(%rbp), %rax
 2859      FFFFFF
 2860 1bff 4801D0   		addq	%rdx, %rax
 2861 1c02 488B00   		movq	(%rax), %rax
 2862              		.loc 1 822 28
 2863 1c05 488B4008 		movq	8(%rax), %rax
 2864              		.loc 1 822 12
 2865 1c09 4885C0   		testq	%rax, %rax
 2866 1c0c 742E     		je	.L155
 2867              		.loc 1 822 50 discriminator 1
 2868 1c0e 8B850CFF 		movl	-244(%rbp), %eax
 2868      FFFF
 2869 1c14 4898     		cltq
 2870 1c16 488D14C5 		leaq	0(,%rax,8), %rdx
 2870      00000000 
 2871 1c1e 488B8510 		movq	-240(%rbp), %rax
 2871      FFFFFF
 2872 1c25 4801D0   		addq	%rdx, %rax
 2873 1c28 488B00   		movq	(%rax), %rax
 2874              		.loc 1 822 60 discriminator 1
 2875 1c2b 0FB600   		movzbl	(%rax), %eax
 2876              		.loc 1 822 66 discriminator 1
 2877 1c2e 0FBEC0   		movsbl	%al, %eax
 2878 1c31 83E002   		andl	$2, %eax
 2879              		.loc 1 822 40 discriminator 1
 2880 1c34 85C0     		testl	%eax, %eax
 2881 1c36 0F841502 		je	.L168
 2881      0000
 2882              	.L155:
 823:argtable2.c   ****             continue;
 824:argtable2.c   **** 
 825:argtable2.c   ****         shortopts = table[tabindex]->shortopts;
 2883              		.loc 1 825 26
 2884 1c3c 8B850CFF 		movl	-244(%rbp), %eax
 2884      FFFF
 2885 1c42 4898     		cltq
 2886 1c44 488D14C5 		leaq	0(,%rax,8), %rdx
 2886      00000000 
 2887 1c4c 488B8510 		movq	-240(%rbp), %rax
 2887      FFFFFF
 2888 1c53 4801D0   		addq	%rdx, %rax
 2889 1c56 488B00   		movq	(%rax), %rax
 2890              		.loc 1 825 19
 2891 1c59 488B4008 		movq	8(%rax), %rax
 2892 1c5d 48898518 		movq	%rax, -232(%rbp)
 2892      FFFFFF
 826:argtable2.c   ****         longopts  = table[tabindex]->longopts;
 2893              		.loc 1 826 26
 2894 1c64 8B850CFF 		movl	-244(%rbp), %eax
 2894      FFFF
 2895 1c6a 4898     		cltq
 2896 1c6c 488D14C5 		leaq	0(,%rax,8), %rdx
 2896      00000000 
 2897 1c74 488B8510 		movq	-240(%rbp), %rax
 2897      FFFFFF
 2898 1c7b 4801D0   		addq	%rdx, %rax
 2899 1c7e 488B00   		movq	(%rax), %rax
 2900              		.loc 1 826 19
 2901 1c81 488B4010 		movq	16(%rax), %rax
 2902 1c85 48898520 		movq	%rax, -224(%rbp)
 2902      FFFFFF
 827:argtable2.c   ****         datatype  = table[tabindex]->datatype;
 2903              		.loc 1 827 26
 2904 1c8c 8B850CFF 		movl	-244(%rbp), %eax
 2904      FFFF
 2905 1c92 4898     		cltq
 2906 1c94 488D14C5 		leaq	0(,%rax,8), %rdx
 2906      00000000 
 2907 1c9c 488B8510 		movq	-240(%rbp), %rax
 2907      FFFFFF
 2908 1ca3 4801D0   		addq	%rdx, %rax
 2909 1ca6 488B00   		movq	(%rax), %rax
 2910              		.loc 1 827 19
 2911 1ca9 488B4018 		movq	24(%rax), %rax
 2912 1cad 48898528 		movq	%rax, -216(%rbp)
 2912      FFFFFF
 828:argtable2.c   ****         arg_cat_option(syntax,sizeof(syntax),shortopts,longopts,datatype, table[tabindex]->flag&ARG
 2913              		.loc 1 828 80
 2914 1cb4 8B850CFF 		movl	-244(%rbp), %eax
 2914      FFFF
 2915 1cba 4898     		cltq
 2916 1cbc 488D14C5 		leaq	0(,%rax,8), %rdx
 2916      00000000 
 2917 1cc4 488B8510 		movq	-240(%rbp), %rax
 2917      FFFFFF
 2918 1ccb 4801D0   		addq	%rdx, %rax
 2919 1cce 488B00   		movq	(%rax), %rax
 2920              		.loc 1 828 90
 2921 1cd1 0FB600   		movzbl	(%rax), %eax
 2922              		.loc 1 828 9
 2923 1cd4 0FBEC0   		movsbl	%al, %eax
 2924 1cd7 83E004   		andl	$4, %eax
 2925 1cda 89C7     		movl	%eax, %edi
 2926 1cdc 488BB528 		movq	-216(%rbp), %rsi
 2926      FFFFFF
 2927 1ce3 488B8D20 		movq	-224(%rbp), %rcx
 2927      FFFFFF
 2928 1cea 488B9518 		movq	-232(%rbp), %rdx
 2928      FFFFFF
 2929 1cf1 488D8530 		leaq	-208(%rbp), %rax
 2929      FFFFFF
 2930 1cf8 4189F9   		movl	%edi, %r9d
 2931 1cfb 4989F0   		movq	%rsi, %r8
 2932 1cfe BEC80000 		movl	$200, %esi
 2932      00
 2933 1d03 4889C7   		movq	%rax, %rdi
 2934 1d06 E871F4FF 		call	arg_cat_option
 2934      FF
 829:argtable2.c   **** 
 830:argtable2.c   ****         if (strlen(syntax)>0)
 2935              		.loc 1 830 20
 2936 1d0b 488D8530 		leaq	-208(%rbp), %rax
 2936      FFFFFF
 2937              		.loc 1 830 27
 2938 1d12 0FB600   		movzbl	(%rax), %eax
 2939              		.loc 1 830 12
 2940 1d15 84C0     		testb	%al, %al
 2941 1d17 0F843801 		je	.L156
 2941      0000
 831:argtable2.c   ****             {
 832:argtable2.c   ****             /* print mandatory instances of this option */
 833:argtable2.c   ****             for (i=0; i<table[tabindex]->mincount; i++)
 2942              		.loc 1 833 19
 2943 1d1d C78508FF 		movl	$0, -248(%rbp)
 2943      FFFF0000 
 2943      0000
 2944              		.loc 1 833 13
 2945 1d27 EB2C     		jmp	.L158
 2946              	.L159:
 834:argtable2.c   ****                 fprintf(fp, " %s",syntax);
 2947              		.loc 1 834 17 discriminator 3
 2948 1d29 488D9530 		leaq	-208(%rbp), %rdx
 2948      FFFFFF
 2949 1d30 488B85F8 		movq	-264(%rbp), %rax
 2949      FEFFFF
 2950 1d37 488D0D00 		leaq	.LC18(%rip), %rcx
 2950      000000
 2951 1d3e 4889CE   		movq	%rcx, %rsi
 2952 1d41 4889C7   		movq	%rax, %rdi
 2953 1d44 B8000000 		movl	$0, %eax
 2953      00
 2954 1d49 E8000000 		call	fprintf@PLT
 2954      00
 833:argtable2.c   ****                 fprintf(fp, " %s",syntax);
 2955              		.loc 1 833 53 discriminator 3
 2956 1d4e 838508FF 		addl	$1, -248(%rbp)
 2956      FFFF01
 2957              	.L158:
 833:argtable2.c   ****                 fprintf(fp, " %s",syntax);
 2958              		.loc 1 833 30 discriminator 1
 2959 1d55 8B850CFF 		movl	-244(%rbp), %eax
 2959      FFFF
 2960 1d5b 4898     		cltq
 2961 1d5d 488D14C5 		leaq	0(,%rax,8), %rdx
 2961      00000000 
 2962 1d65 488B8510 		movq	-240(%rbp), %rax
 2962      FFFFFF
 2963 1d6c 4801D0   		addq	%rdx, %rax
 2964 1d6f 488B00   		movq	(%rax), %rax
 833:argtable2.c   ****                 fprintf(fp, " %s",syntax);
 2965              		.loc 1 833 40 discriminator 1
 2966 1d72 8B4028   		movl	40(%rax), %eax
 833:argtable2.c   ****                 fprintf(fp, " %s",syntax);
 2967              		.loc 1 833 24 discriminator 1
 2968 1d75 398508FF 		cmpl	%eax, -248(%rbp)
 2968      FFFF
 2969 1d7b 7CAC     		jl	.L159
 835:argtable2.c   **** 
 836:argtable2.c   ****             /* print optional instances enclosed in "[..]" */
 837:argtable2.c   ****             switch ( table[tabindex]->maxcount - table[tabindex]->mincount )
 2970              		.loc 1 837 27
 2971 1d7d 8B850CFF 		movl	-244(%rbp), %eax
 2971      FFFF
 2972 1d83 4898     		cltq
 2973 1d85 488D14C5 		leaq	0(,%rax,8), %rdx
 2973      00000000 
 2974 1d8d 488B8510 		movq	-240(%rbp), %rax
 2974      FFFFFF
 2975 1d94 4801D0   		addq	%rdx, %rax
 2976 1d97 488B00   		movq	(%rax), %rax
 2977              		.loc 1 837 37
 2978 1d9a 8B502C   		movl	44(%rax), %edx
 2979              		.loc 1 837 55
 2980 1d9d 8B850CFF 		movl	-244(%rbp), %eax
 2980      FFFF
 2981 1da3 4898     		cltq
 2982 1da5 488D0CC5 		leaq	0(,%rax,8), %rcx
 2982      00000000 
 2983 1dad 488B8510 		movq	-240(%rbp), %rax
 2983      FFFFFF
 2984 1db4 4801C8   		addq	%rcx, %rax
 2985 1db7 488B00   		movq	(%rax), %rax
 2986              		.loc 1 837 65
 2987 1dba 8B4828   		movl	40(%rax), %ecx
 2988              		.loc 1 837 48
 2989 1dbd 89D0     		movl	%edx, %eax
 2990 1dbf 29C8     		subl	%ecx, %eax
 2991              		.loc 1 837 13
 2992 1dc1 83F802   		cmpl	$2, %eax
 2993 1dc4 7439     		je	.L160
 2994 1dc6 83F802   		cmpl	$2, %eax
 2995 1dc9 7F5F     		jg	.L161
 2996 1dcb 85C0     		testl	%eax, %eax
 2997 1dcd 0F848100 		je	.L169
 2997      0000
 2998 1dd3 83F801   		cmpl	$1, %eax
 2999 1dd6 7552     		jne	.L161
 838:argtable2.c   ****                 {
 839:argtable2.c   ****                 case 0:
 840:argtable2.c   ****                     break;
 841:argtable2.c   ****                 case 1:
 842:argtable2.c   ****                     fprintf(fp, " [%s]",syntax);
 3000              		.loc 1 842 21
 3001 1dd8 488D9530 		leaq	-208(%rbp), %rdx
 3001      FFFFFF
 3002 1ddf 488B85F8 		movq	-264(%rbp), %rax
 3002      FEFFFF
 3003 1de6 488D0D00 		leaq	.LC19(%rip), %rcx
 3003      000000
 3004 1ded 4889CE   		movq	%rcx, %rsi
 3005 1df0 4889C7   		movq	%rax, %rdi
 3006 1df3 B8000000 		movl	$0, %eax
 3006      00
 3007 1df8 E8000000 		call	fprintf@PLT
 3007      00
 843:argtable2.c   ****                     break;
 3008              		.loc 1 843 21
 3009 1dfd EB56     		jmp	.L156
 3010              	.L160:
 844:argtable2.c   ****                 case 2:
 845:argtable2.c   ****                     fprintf(fp, " [%s] [%s]",syntax,syntax);
 3011              		.loc 1 845 21
 3012 1dff 488D8D30 		leaq	-208(%rbp), %rcx
 3012      FFFFFF
 3013 1e06 488D9530 		leaq	-208(%rbp), %rdx
 3013      FFFFFF
 3014 1e0d 488B85F8 		movq	-264(%rbp), %rax
 3014      FEFFFF
 3015 1e14 488D3500 		leaq	.LC20(%rip), %rsi
 3015      000000
 3016 1e1b 4889C7   		movq	%rax, %rdi
 3017 1e1e B8000000 		movl	$0, %eax
 3017      00
 3018 1e23 E8000000 		call	fprintf@PLT
 3018      00
 846:argtable2.c   ****                     break;
 3019              		.loc 1 846 21
 3020 1e28 EB2B     		jmp	.L156
 3021              	.L161:
 847:argtable2.c   ****                 default:
 848:argtable2.c   ****                     fprintf(fp, " [%s]...",syntax);
 3022              		.loc 1 848 21
 3023 1e2a 488D9530 		leaq	-208(%rbp), %rdx
 3023      FFFFFF
 3024 1e31 488B85F8 		movq	-264(%rbp), %rax
 3024      FEFFFF
 3025 1e38 488D0D00 		leaq	.LC21(%rip), %rcx
 3025      000000
 3026 1e3f 4889CE   		movq	%rcx, %rsi
 3027 1e42 4889C7   		movq	%rax, %rdi
 3028 1e45 B8000000 		movl	$0, %eax
 3028      00
 3029 1e4a E8000000 		call	fprintf@PLT
 3029      00
 849:argtable2.c   ****                     break;
 3030              		.loc 1 849 21
 3031 1e4f EB04     		jmp	.L156
 3032              	.L168:
 823:argtable2.c   **** 
 3033              		.loc 1 823 13
 3034 1e51 90       		nop
 3035 1e52 EB01     		jmp	.L156
 3036              	.L169:
 840:argtable2.c   ****                 case 1:
 3037              		.loc 1 840 21
 3038 1e54 90       		nop
 3039              	.L156:
 3040              	.LBE25:
 816:argtable2.c   ****         {
 3041              		.loc 1 816 89 discriminator 2
 3042 1e55 83850CFF 		addl	$1, -244(%rbp)
 3042      FFFF01
 3043              	.L154:
 816:argtable2.c   ****         {
 3044              		.loc 1 816 26 discriminator 1
 3045 1e5c 8B850CFF 		movl	-244(%rbp), %eax
 3045      FFFF
 3046 1e62 4898     		cltq
 3047 1e64 488D14C5 		leaq	0(,%rax,8), %rdx
 3047      00000000 
 3048 1e6c 488B8510 		movq	-240(%rbp), %rax
 3048      FFFFFF
 3049 1e73 4801D0   		addq	%rdx, %rax
 3050 1e76 488B00   		movq	(%rax), %rax
 816:argtable2.c   ****         {
 3051              		.loc 1 816 37 discriminator 1
 3052 1e79 4885C0   		testq	%rax, %rax
 3053 1e7c 742E     		je	.L164
 816:argtable2.c   ****         {
 3054              		.loc 1 816 47 discriminator 3
 3055 1e7e 8B850CFF 		movl	-244(%rbp), %eax
 3055      FFFF
 3056 1e84 4898     		cltq
 3057 1e86 488D14C5 		leaq	0(,%rax,8), %rdx
 3057      00000000 
 3058 1e8e 488B8510 		movq	-240(%rbp), %rax
 3058      FFFFFF
 3059 1e95 4801D0   		addq	%rdx, %rax
 3060 1e98 488B00   		movq	(%rax), %rax
 816:argtable2.c   ****         {
 3061              		.loc 1 816 57 discriminator 3
 3062 1e9b 0FB600   		movzbl	(%rax), %eax
 816:argtable2.c   ****         {
 3063              		.loc 1 816 63 discriminator 3
 3064 1e9e 0FBEC0   		movsbl	%al, %eax
 3065 1ea1 83E001   		andl	$1, %eax
 816:argtable2.c   ****         {
 3066              		.loc 1 816 37 discriminator 3
 3067 1ea4 85C0     		testl	%eax, %eax
 3068 1ea6 0F8456FC 		je	.L165
 3068      FFFF
 3069              	.L164:
 850:argtable2.c   ****                 }
 851:argtable2.c   ****             }
 852:argtable2.c   ****         }
 853:argtable2.c   **** 
 854:argtable2.c   ****     if (suffix)
 3070              		.loc 1 854 8
 3071 1eac 4883BDE8 		cmpq	$0, -280(%rbp)
 3071      FEFFFF00 
 3072 1eb4 7419     		je	.L170
 855:argtable2.c   ****         fprintf(fp, "%s",suffix);
 3073              		.loc 1 855 9
 3074 1eb6 488B95F8 		movq	-264(%rbp), %rdx
 3074      FEFFFF
 3075 1ebd 488B85E8 		movq	-280(%rbp), %rax
 3075      FEFFFF
 3076 1ec4 4889D6   		movq	%rdx, %rsi
 3077 1ec7 4889C7   		movq	%rax, %rdi
 3078 1eca E8000000 		call	fputs@PLT
 3078      00
 3079              	.L170:
 856:argtable2.c   ****     }
 3080              		.loc 1 856 5
 3081 1ecf 90       		nop
 3082 1ed0 488B45F8 		movq	-8(%rbp), %rax
 3083 1ed4 64482B04 		subq	%fs:40, %rax
 3083      25280000 
 3083      00
 3084 1edd 7405     		je	.L167
 3085 1edf E8000000 		call	__stack_chk_fail@PLT
 3085      00
 3086              	.L167:
 3087 1ee4 C9       		leave
 3088              		.cfi_def_cfa 7, 8
 3089 1ee5 C3       		ret
 3090              		.cfi_endproc
 3091              	.LFE16:
 3093              		.globl	arg_print_syntaxv
 3095              	arg_print_syntaxv:
 3096              	.LFB17:
 857:argtable2.c   **** 
 858:argtable2.c   **** 
 859:argtable2.c   **** void arg_print_syntaxv(FILE *fp, void **argtable, const char *suffix)
 860:argtable2.c   ****     {
 3097              		.loc 1 860 5
 3098              		.cfi_startproc
 3099 1ee6 F30F1EFA 		endbr64
 3100 1eea 55       		pushq	%rbp
 3101              		.cfi_def_cfa_offset 16
 3102              		.cfi_offset 6, -16
 3103 1eeb 4889E5   		movq	%rsp, %rbp
 3104              		.cfi_def_cfa_register 6
 3105 1eee 4881EC20 		subq	$288, %rsp
 3105      010000
 3106 1ef5 4889BDF8 		movq	%rdi, -264(%rbp)
 3106      FEFFFF
 3107 1efc 4889B5F0 		movq	%rsi, -272(%rbp)
 3107      FEFFFF
 3108 1f03 488995E8 		movq	%rdx, -280(%rbp)
 3108      FEFFFF
 3109              		.loc 1 860 5
 3110 1f0a 64488B04 		movq	%fs:40, %rax
 3110      25280000 
 3110      00
 3111 1f13 488945F8 		movq	%rax, -8(%rbp)
 3112 1f17 31C0     		xorl	%eax, %eax
 861:argtable2.c   ****     struct arg_hdr **table = (struct arg_hdr**)argtable;
 3113              		.loc 1 861 22
 3114 1f19 488B85F0 		movq	-272(%rbp), %rax
 3114      FEFFFF
 3115 1f20 48898510 		movq	%rax, -240(%rbp)
 3115      FFFFFF
 862:argtable2.c   ****     int i,tabindex;
 863:argtable2.c   **** 
 864:argtable2.c   ****     /* print remaining options in abbreviated style */
 865:argtable2.c   ****     for(tabindex=0; table[tabindex] && !(table[tabindex]->flag&ARG_TERMINATOR); tabindex++)
 3116              		.loc 1 865 17
 3117 1f27 C7850CFF 		movl	$0, -244(%rbp)
 3117      FFFF0000 
 3117      0000
 3118              		.loc 1 865 5
 3119 1f31 E9FE0200 		jmp	.L172
 3119      00
 3120              	.L181:
 3121              	.LBB26:
 866:argtable2.c   ****         {
 867:argtable2.c   ****         char syntax[200]="";
 3122              		.loc 1 867 14
 3123 1f36 48C78530 		movq	$0, -208(%rbp)
 3123      FFFFFF00 
 3123      000000
 3124 1f41 48C78538 		movq	$0, -200(%rbp)
 3124      FFFFFF00 
 3124      000000
 3125 1f4c 48C78540 		movq	$0, -192(%rbp)
 3125      FFFFFF00 
 3125      000000
 3126 1f57 48C78548 		movq	$0, -184(%rbp)
 3126      FFFFFF00 
 3126      000000
 3127 1f62 48C78550 		movq	$0, -176(%rbp)
 3127      FFFFFF00 
 3127      000000
 3128 1f6d 48C78558 		movq	$0, -168(%rbp)
 3128      FFFFFF00 
 3128      000000
 3129 1f78 48C78560 		movq	$0, -160(%rbp)
 3129      FFFFFF00 
 3129      000000
 3130 1f83 48C78568 		movq	$0, -152(%rbp)
 3130      FFFFFF00 
 3130      000000
 3131 1f8e 48C78570 		movq	$0, -144(%rbp)
 3131      FFFFFF00 
 3131      000000
 3132 1f99 48C78578 		movq	$0, -136(%rbp)
 3132      FFFFFF00 
 3132      000000
 3133 1fa4 48C74580 		movq	$0, -128(%rbp)
 3133      00000000 
 3134 1fac 48C74588 		movq	$0, -120(%rbp)
 3134      00000000 
 3135 1fb4 48C74590 		movq	$0, -112(%rbp)
 3135      00000000 
 3136 1fbc 48C74598 		movq	$0, -104(%rbp)
 3136      00000000 
 3137 1fc4 48C745A0 		movq	$0, -96(%rbp)
 3137      00000000 
 3138 1fcc 48C745A8 		movq	$0, -88(%rbp)
 3138      00000000 
 3139 1fd4 48C745B0 		movq	$0, -80(%rbp)
 3139      00000000 
 3140 1fdc 48C745B8 		movq	$0, -72(%rbp)
 3140      00000000 
 3141 1fe4 48C745C0 		movq	$0, -64(%rbp)
 3141      00000000 
 3142 1fec 48C745C8 		movq	$0, -56(%rbp)
 3142      00000000 
 3143 1ff4 48C745D0 		movq	$0, -48(%rbp)
 3143      00000000 
 3144 1ffc 48C745D8 		movq	$0, -40(%rbp)
 3144      00000000 
 3145 2004 48C745E0 		movq	$0, -32(%rbp)
 3145      00000000 
 3146 200c 48C745E8 		movq	$0, -24(%rbp)
 3146      00000000 
 3147 2014 48C745F0 		movq	$0, -16(%rbp)
 3147      00000000 
 868:argtable2.c   ****         const char *shortopts, *longopts, *datatype;
 869:argtable2.c   **** 
 870:argtable2.c   ****         shortopts = table[tabindex]->shortopts;
 3148              		.loc 1 870 26
 3149 201c 8B850CFF 		movl	-244(%rbp), %eax
 3149      FFFF
 3150 2022 4898     		cltq
 3151 2024 488D14C5 		leaq	0(,%rax,8), %rdx
 3151      00000000 
 3152 202c 488B8510 		movq	-240(%rbp), %rax
 3152      FFFFFF
 3153 2033 4801D0   		addq	%rdx, %rax
 3154 2036 488B00   		movq	(%rax), %rax
 3155              		.loc 1 870 19
 3156 2039 488B4008 		movq	8(%rax), %rax
 3157 203d 48898518 		movq	%rax, -232(%rbp)
 3157      FFFFFF
 871:argtable2.c   ****         longopts  = table[tabindex]->longopts;
 3158              		.loc 1 871 26
 3159 2044 8B850CFF 		movl	-244(%rbp), %eax
 3159      FFFF
 3160 204a 4898     		cltq
 3161 204c 488D14C5 		leaq	0(,%rax,8), %rdx
 3161      00000000 
 3162 2054 488B8510 		movq	-240(%rbp), %rax
 3162      FFFFFF
 3163 205b 4801D0   		addq	%rdx, %rax
 3164 205e 488B00   		movq	(%rax), %rax
 3165              		.loc 1 871 19
 3166 2061 488B4010 		movq	16(%rax), %rax
 3167 2065 48898520 		movq	%rax, -224(%rbp)
 3167      FFFFFF
 872:argtable2.c   ****         datatype  = table[tabindex]->datatype;
 3168              		.loc 1 872 26
 3169 206c 8B850CFF 		movl	-244(%rbp), %eax
 3169      FFFF
 3170 2072 4898     		cltq
 3171 2074 488D14C5 		leaq	0(,%rax,8), %rdx
 3171      00000000 
 3172 207c 488B8510 		movq	-240(%rbp), %rax
 3172      FFFFFF
 3173 2083 4801D0   		addq	%rdx, %rax
 3174 2086 488B00   		movq	(%rax), %rax
 3175              		.loc 1 872 19
 3176 2089 488B4018 		movq	24(%rax), %rax
 3177 208d 48898528 		movq	%rax, -216(%rbp)
 3177      FFFFFF
 873:argtable2.c   ****         arg_cat_optionv(syntax,sizeof(syntax),shortopts,longopts,datatype,table[tabindex]->flag&ARG
 3178              		.loc 1 873 80
 3179 2094 8B850CFF 		movl	-244(%rbp), %eax
 3179      FFFF
 3180 209a 4898     		cltq
 3181 209c 488D14C5 		leaq	0(,%rax,8), %rdx
 3181      00000000 
 3182 20a4 488B8510 		movq	-240(%rbp), %rax
 3182      FFFFFF
 3183 20ab 4801D0   		addq	%rdx, %rax
 3184 20ae 488B00   		movq	(%rax), %rax
 3185              		.loc 1 873 90
 3186 20b1 0FB600   		movzbl	(%rax), %eax
 3187              		.loc 1 873 9
 3188 20b4 0FBEC0   		movsbl	%al, %eax
 3189 20b7 83E004   		andl	$4, %eax
 3190 20ba 4189C0   		movl	%eax, %r8d
 3191 20bd 488BBD28 		movq	-216(%rbp), %rdi
 3191      FFFFFF
 3192 20c4 488B8D20 		movq	-224(%rbp), %rcx
 3192      FFFFFF
 3193 20cb 488B9518 		movq	-232(%rbp), %rdx
 3193      FFFFFF
 3194 20d2 488D8530 		leaq	-208(%rbp), %rax
 3194      FFFFFF
 3195 20d9 4883EC08 		subq	$8, %rsp
 3196 20dd 488D3500 		leaq	.LC13(%rip), %rsi
 3196      000000
 3197 20e4 56       		pushq	%rsi
 3198 20e5 4589C1   		movl	%r8d, %r9d
 3199 20e8 4989F8   		movq	%rdi, %r8
 3200 20eb BEC80000 		movl	$200, %esi
 3200      00
 3201 20f0 4889C7   		movq	%rax, %rdi
 3202 20f3 E8FFF2FF 		call	arg_cat_optionv
 3202      FF
 3203 20f8 4883C410 		addq	$16, %rsp
 874:argtable2.c   **** 
 875:argtable2.c   ****         /* print mandatory options */
 876:argtable2.c   ****         for (i=0; i<table[tabindex]->mincount; i++)
 3204              		.loc 1 876 15
 3205 20fc C78508FF 		movl	$0, -248(%rbp)
 3205      FFFF0000 
 3205      0000
 3206              		.loc 1 876 9
 3207 2106 EB2C     		jmp	.L173
 3208              	.L174:
 877:argtable2.c   ****             fprintf(fp," %s",syntax);
 3209              		.loc 1 877 13 discriminator 3
 3210 2108 488D9530 		leaq	-208(%rbp), %rdx
 3210      FFFFFF
 3211 210f 488B85F8 		movq	-264(%rbp), %rax
 3211      FEFFFF
 3212 2116 488D0D00 		leaq	.LC18(%rip), %rcx
 3212      000000
 3213 211d 4889CE   		movq	%rcx, %rsi
 3214 2120 4889C7   		movq	%rax, %rdi
 3215 2123 B8000000 		movl	$0, %eax
 3215      00
 3216 2128 E8000000 		call	fprintf@PLT
 3216      00
 876:argtable2.c   ****             fprintf(fp," %s",syntax);
 3217              		.loc 1 876 49 discriminator 3
 3218 212d 838508FF 		addl	$1, -248(%rbp)
 3218      FFFF01
 3219              	.L173:
 876:argtable2.c   ****             fprintf(fp," %s",syntax);
 3220              		.loc 1 876 26 discriminator 1
 3221 2134 8B850CFF 		movl	-244(%rbp), %eax
 3221      FFFF
 3222 213a 4898     		cltq
 3223 213c 488D14C5 		leaq	0(,%rax,8), %rdx
 3223      00000000 
 3224 2144 488B8510 		movq	-240(%rbp), %rax
 3224      FFFFFF
 3225 214b 4801D0   		addq	%rdx, %rax
 3226 214e 488B00   		movq	(%rax), %rax
 876:argtable2.c   ****             fprintf(fp," %s",syntax);
 3227              		.loc 1 876 36 discriminator 1
 3228 2151 8B4028   		movl	40(%rax), %eax
 876:argtable2.c   ****             fprintf(fp," %s",syntax);
 3229              		.loc 1 876 20 discriminator 1
 3230 2154 398508FF 		cmpl	%eax, -248(%rbp)
 3230      FFFF
 3231 215a 7CAC     		jl	.L174
 878:argtable2.c   **** 
 879:argtable2.c   ****         /* print optional args enclosed in "[..]" */
 880:argtable2.c   ****         switch ( table[tabindex]->maxcount - table[tabindex]->mincount )
 3232              		.loc 1 880 23
 3233 215c 8B850CFF 		movl	-244(%rbp), %eax
 3233      FFFF
 3234 2162 4898     		cltq
 3235 2164 488D14C5 		leaq	0(,%rax,8), %rdx
 3235      00000000 
 3236 216c 488B8510 		movq	-240(%rbp), %rax
 3236      FFFFFF
 3237 2173 4801D0   		addq	%rdx, %rax
 3238 2176 488B00   		movq	(%rax), %rax
 3239              		.loc 1 880 33
 3240 2179 8B502C   		movl	44(%rax), %edx
 3241              		.loc 1 880 51
 3242 217c 8B850CFF 		movl	-244(%rbp), %eax
 3242      FFFF
 3243 2182 4898     		cltq
 3244 2184 488D0CC5 		leaq	0(,%rax,8), %rcx
 3244      00000000 
 3245 218c 488B8510 		movq	-240(%rbp), %rax
 3245      FFFFFF
 3246 2193 4801C8   		addq	%rcx, %rax
 3247 2196 488B00   		movq	(%rax), %rax
 3248              		.loc 1 880 61
 3249 2199 8B4828   		movl	40(%rax), %ecx
 3250              		.loc 1 880 44
 3251 219c 89D0     		movl	%edx, %eax
 3252 219e 29C8     		subl	%ecx, %eax
 3253              		.loc 1 880 9
 3254 21a0 83F802   		cmpl	$2, %eax
 3255 21a3 7435     		je	.L175
 3256 21a5 83F802   		cmpl	$2, %eax
 3257 21a8 7F5B     		jg	.L176
 3258 21aa 85C0     		testl	%eax, %eax
 3259 21ac 747E     		je	.L184
 3260 21ae 83F801   		cmpl	$1, %eax
 3261 21b1 7552     		jne	.L176
 881:argtable2.c   ****             {
 882:argtable2.c   ****             case 0:
 883:argtable2.c   ****                 break;
 884:argtable2.c   ****             case 1:
 885:argtable2.c   ****                 fprintf(fp, " [%s]",syntax);
 3262              		.loc 1 885 17
 3263 21b3 488D9530 		leaq	-208(%rbp), %rdx
 3263      FFFFFF
 3264 21ba 488B85F8 		movq	-264(%rbp), %rax
 3264      FEFFFF
 3265 21c1 488D0D00 		leaq	.LC19(%rip), %rcx
 3265      000000
 3266 21c8 4889CE   		movq	%rcx, %rsi
 3267 21cb 4889C7   		movq	%rax, %rdi
 3268 21ce B8000000 		movl	$0, %eax
 3268      00
 3269 21d3 E8000000 		call	fprintf@PLT
 3269      00
 886:argtable2.c   ****                 break;
 3270              		.loc 1 886 17
 3271 21d8 EB53     		jmp	.L179
 3272              	.L175:
 887:argtable2.c   ****             case 2:
 888:argtable2.c   ****                 fprintf(fp, " [%s] [%s]",syntax,syntax);
 3273              		.loc 1 888 17
 3274 21da 488D8D30 		leaq	-208(%rbp), %rcx
 3274      FFFFFF
 3275 21e1 488D9530 		leaq	-208(%rbp), %rdx
 3275      FFFFFF
 3276 21e8 488B85F8 		movq	-264(%rbp), %rax
 3276      FEFFFF
 3277 21ef 488D3500 		leaq	.LC20(%rip), %rsi
 3277      000000
 3278 21f6 4889C7   		movq	%rax, %rdi
 3279 21f9 B8000000 		movl	$0, %eax
 3279      00
 3280 21fe E8000000 		call	fprintf@PLT
 3280      00
 889:argtable2.c   ****                 break;
 3281              		.loc 1 889 17
 3282 2203 EB28     		jmp	.L179
 3283              	.L176:
 890:argtable2.c   ****             default:
 891:argtable2.c   ****                 fprintf(fp, " [%s]...",syntax);
 3284              		.loc 1 891 17
 3285 2205 488D9530 		leaq	-208(%rbp), %rdx
 3285      FFFFFF
 3286 220c 488B85F8 		movq	-264(%rbp), %rax
 3286      FEFFFF
 3287 2213 488D0D00 		leaq	.LC21(%rip), %rcx
 3287      000000
 3288 221a 4889CE   		movq	%rcx, %rsi
 3289 221d 4889C7   		movq	%rax, %rdi
 3290 2220 B8000000 		movl	$0, %eax
 3290      00
 3291 2225 E8000000 		call	fprintf@PLT
 3291      00
 892:argtable2.c   ****                 break;
 3292              		.loc 1 892 17
 3293 222a EB01     		jmp	.L179
 3294              	.L184:
 883:argtable2.c   ****             case 1:
 3295              		.loc 1 883 17
 3296 222c 90       		nop
 3297              	.L179:
 3298              	.LBE26:
 865:argtable2.c   ****         {
 3299              		.loc 1 865 89 discriminator 2
 3300 222d 83850CFF 		addl	$1, -244(%rbp)
 3300      FFFF01
 3301              	.L172:
 865:argtable2.c   ****         {
 3302              		.loc 1 865 26 discriminator 1
 3303 2234 8B850CFF 		movl	-244(%rbp), %eax
 3303      FFFF
 3304 223a 4898     		cltq
 3305 223c 488D14C5 		leaq	0(,%rax,8), %rdx
 3305      00000000 
 3306 2244 488B8510 		movq	-240(%rbp), %rax
 3306      FFFFFF
 3307 224b 4801D0   		addq	%rdx, %rax
 3308 224e 488B00   		movq	(%rax), %rax
 865:argtable2.c   ****         {
 3309              		.loc 1 865 37 discriminator 1
 3310 2251 4885C0   		testq	%rax, %rax
 3311 2254 742E     		je	.L180
 865:argtable2.c   ****         {
 3312              		.loc 1 865 47 discriminator 3
 3313 2256 8B850CFF 		movl	-244(%rbp), %eax
 3313      FFFF
 3314 225c 4898     		cltq
 3315 225e 488D14C5 		leaq	0(,%rax,8), %rdx
 3315      00000000 
 3316 2266 488B8510 		movq	-240(%rbp), %rax
 3316      FFFFFF
 3317 226d 4801D0   		addq	%rdx, %rax
 3318 2270 488B00   		movq	(%rax), %rax
 865:argtable2.c   ****         {
 3319              		.loc 1 865 57 discriminator 3
 3320 2273 0FB600   		movzbl	(%rax), %eax
 865:argtable2.c   ****         {
 3321              		.loc 1 865 63 discriminator 3
 3322 2276 0FBEC0   		movsbl	%al, %eax
 3323 2279 83E001   		andl	$1, %eax
 865:argtable2.c   ****         {
 3324              		.loc 1 865 37 discriminator 3
 3325 227c 85C0     		testl	%eax, %eax
 3326 227e 0F84B2FC 		je	.L181
 3326      FFFF
 3327              	.L180:
 893:argtable2.c   ****             }
 894:argtable2.c   ****         }
 895:argtable2.c   **** 
 896:argtable2.c   ****     if (suffix)
 3328              		.loc 1 896 8
 3329 2284 4883BDE8 		cmpq	$0, -280(%rbp)
 3329      FEFFFF00 
 3330 228c 7419     		je	.L185
 897:argtable2.c   ****         fprintf(fp,"%s",suffix);
 3331              		.loc 1 897 9
 3332 228e 488B95F8 		movq	-264(%rbp), %rdx
 3332      FEFFFF
 3333 2295 488B85E8 		movq	-280(%rbp), %rax
 3333      FEFFFF
 3334 229c 4889D6   		movq	%rdx, %rsi
 3335 229f 4889C7   		movq	%rax, %rdi
 3336 22a2 E8000000 		call	fputs@PLT
 3336      00
 3337              	.L185:
 898:argtable2.c   ****     }
 3338              		.loc 1 898 5
 3339 22a7 90       		nop
 3340 22a8 488B45F8 		movq	-8(%rbp), %rax
 3341 22ac 64482B04 		subq	%fs:40, %rax
 3341      25280000 
 3341      00
 3342 22b5 7405     		je	.L183
 3343 22b7 E8000000 		call	__stack_chk_fail@PLT
 3343      00
 3344              	.L183:
 3345 22bc C9       		leave
 3346              		.cfi_def_cfa 7, 8
 3347 22bd C3       		ret
 3348              		.cfi_endproc
 3349              	.LFE17:
 3351              		.section	.rodata
 3352              	.LC22:
 3353 00ca 2020252D 		.string	"  %-20s %s\n"
 3353      32307320 
 3353      25730A00 
 3354              	.LC23:
 3355 00d6 2C2000   		.string	", "
 3356              		.text
 3357              		.globl	arg_print_glossary
 3359              	arg_print_glossary:
 3360              	.LFB18:
 899:argtable2.c   **** 
 900:argtable2.c   **** 
 901:argtable2.c   **** void arg_print_glossary(FILE *fp, void **argtable, const char *format)
 902:argtable2.c   ****     {
 3361              		.loc 1 902 5
 3362              		.cfi_startproc
 3363 22be F30F1EFA 		endbr64
 3364 22c2 55       		pushq	%rbp
 3365              		.cfi_def_cfa_offset 16
 3366              		.cfi_offset 6, -16
 3367 22c3 4889E5   		movq	%rsp, %rbp
 3368              		.cfi_def_cfa_register 6
 3369 22c6 4881EC20 		subq	$288, %rsp
 3369      010000
 3370 22cd 4889BDF8 		movq	%rdi, -264(%rbp)
 3370      FEFFFF
 3371 22d4 4889B5F0 		movq	%rsi, -272(%rbp)
 3371      FEFFFF
 3372 22db 488995E8 		movq	%rdx, -280(%rbp)
 3372      FEFFFF
 3373              		.loc 1 902 5
 3374 22e2 64488B04 		movq	%fs:40, %rax
 3374      25280000 
 3374      00
 3375 22eb 488945F8 		movq	%rax, -8(%rbp)
 3376 22ef 31C0     		xorl	%eax, %eax
 903:argtable2.c   ****     struct arg_hdr **table = (struct arg_hdr**)argtable;
 3377              		.loc 1 903 22
 3378 22f1 488B85F0 		movq	-272(%rbp), %rax
 3378      FEFFFF
 3379 22f8 48898508 		movq	%rax, -248(%rbp)
 3379      FFFFFF
 904:argtable2.c   ****     int tabindex;
 905:argtable2.c   **** 
 906:argtable2.c   ****     format = format ? format : "  %-20s %s\n";
 3380              		.loc 1 906 30
 3381 22ff 4883BDE8 		cmpq	$0, -280(%rbp)
 3381      FEFFFF00 
 3382 2307 7409     		je	.L187
 3383              		.loc 1 906 30 is_stmt 0 discriminator 1
 3384 2309 488B85E8 		movq	-280(%rbp), %rax
 3384      FEFFFF
 3385 2310 EB07     		jmp	.L188
 3386              	.L187:
 3387              		.loc 1 906 30 discriminator 2
 3388 2312 488D0500 		leaq	.LC22(%rip), %rax
 3388      000000
 3389              	.L188:
 3390              		.loc 1 906 12 is_stmt 1 discriminator 4
 3391 2319 488985E8 		movq	%rax, -280(%rbp)
 3391      FEFFFF
 907:argtable2.c   ****     for(tabindex=0; !(table[tabindex]->flag&ARG_TERMINATOR); tabindex++)
 3392              		.loc 1 907 17 discriminator 4
 3393 2320 C78504FF 		movl	$0, -252(%rbp)
 3393      FFFF0000 
 3393      0000
 3394              		.loc 1 907 5 discriminator 4
 3395 232a E9480200 		jmp	.L189
 3395      00
 3396              	.L191:
 908:argtable2.c   ****         {
 909:argtable2.c   ****         if (table[tabindex]->glossary)
 3397              		.loc 1 909 18
 3398 232f 8B8504FF 		movl	-252(%rbp), %eax
 3398      FFFF
 3399 2335 4898     		cltq
 3400 2337 488D14C5 		leaq	0(,%rax,8), %rdx
 3400      00000000 
 3401 233f 488B8508 		movq	-248(%rbp), %rax
 3401      FFFFFF
 3402 2346 4801D0   		addq	%rdx, %rax
 3403 2349 488B00   		movq	(%rax), %rax
 3404              		.loc 1 909 28
 3405 234c 488B4020 		movq	32(%rax), %rax
 3406              		.loc 1 909 12
 3407 2350 4885C0   		testq	%rax, %rax
 3408 2353 0F841702 		je	.L190
 3408      0000
 3409              	.LBB27:
 910:argtable2.c   ****             {
 911:argtable2.c   ****             char syntax[200]="";
 3410              		.loc 1 911 18
 3411 2359 48C78530 		movq	$0, -208(%rbp)
 3411      FFFFFF00 
 3411      000000
 3412 2364 48C78538 		movq	$0, -200(%rbp)
 3412      FFFFFF00 
 3412      000000
 3413 236f 48C78540 		movq	$0, -192(%rbp)
 3413      FFFFFF00 
 3413      000000
 3414 237a 48C78548 		movq	$0, -184(%rbp)
 3414      FFFFFF00 
 3414      000000
 3415 2385 48C78550 		movq	$0, -176(%rbp)
 3415      FFFFFF00 
 3415      000000
 3416 2390 48C78558 		movq	$0, -168(%rbp)
 3416      FFFFFF00 
 3416      000000
 3417 239b 48C78560 		movq	$0, -160(%rbp)
 3417      FFFFFF00 
 3417      000000
 3418 23a6 48C78568 		movq	$0, -152(%rbp)
 3418      FFFFFF00 
 3418      000000
 3419 23b1 48C78570 		movq	$0, -144(%rbp)
 3419      FFFFFF00 
 3419      000000
 3420 23bc 48C78578 		movq	$0, -136(%rbp)
 3420      FFFFFF00 
 3420      000000
 3421 23c7 48C74580 		movq	$0, -128(%rbp)
 3421      00000000 
 3422 23cf 48C74588 		movq	$0, -120(%rbp)
 3422      00000000 
 3423 23d7 48C74590 		movq	$0, -112(%rbp)
 3423      00000000 
 3424 23df 48C74598 		movq	$0, -104(%rbp)
 3424      00000000 
 3425 23e7 48C745A0 		movq	$0, -96(%rbp)
 3425      00000000 
 3426 23ef 48C745A8 		movq	$0, -88(%rbp)
 3426      00000000 
 3427 23f7 48C745B0 		movq	$0, -80(%rbp)
 3427      00000000 
 3428 23ff 48C745B8 		movq	$0, -72(%rbp)
 3428      00000000 
 3429 2407 48C745C0 		movq	$0, -64(%rbp)
 3429      00000000 
 3430 240f 48C745C8 		movq	$0, -56(%rbp)
 3430      00000000 
 3431 2417 48C745D0 		movq	$0, -48(%rbp)
 3431      00000000 
 3432 241f 48C745D8 		movq	$0, -40(%rbp)
 3432      00000000 
 3433 2427 48C745E0 		movq	$0, -32(%rbp)
 3433      00000000 
 3434 242f 48C745E8 		movq	$0, -24(%rbp)
 3434      00000000 
 3435 2437 48C745F0 		movq	$0, -16(%rbp)
 3435      00000000 
 912:argtable2.c   ****             const char *shortopts = table[tabindex]->shortopts;
 3436              		.loc 1 912 42
 3437 243f 8B8504FF 		movl	-252(%rbp), %eax
 3437      FFFF
 3438 2445 4898     		cltq
 3439 2447 488D14C5 		leaq	0(,%rax,8), %rdx
 3439      00000000 
 3440 244f 488B8508 		movq	-248(%rbp), %rax
 3440      FFFFFF
 3441 2456 4801D0   		addq	%rdx, %rax
 3442 2459 488B00   		movq	(%rax), %rax
 3443              		.loc 1 912 25
 3444 245c 488B4008 		movq	8(%rax), %rax
 3445 2460 48898510 		movq	%rax, -240(%rbp)
 3445      FFFFFF
 913:argtable2.c   ****             const char *longopts  = table[tabindex]->longopts;
 3446              		.loc 1 913 42
 3447 2467 8B8504FF 		movl	-252(%rbp), %eax
 3447      FFFF
 3448 246d 4898     		cltq
 3449 246f 488D14C5 		leaq	0(,%rax,8), %rdx
 3449      00000000 
 3450 2477 488B8508 		movq	-248(%rbp), %rax
 3450      FFFFFF
 3451 247e 4801D0   		addq	%rdx, %rax
 3452 2481 488B00   		movq	(%rax), %rax
 3453              		.loc 1 913 25
 3454 2484 488B4010 		movq	16(%rax), %rax
 3455 2488 48898518 		movq	%rax, -232(%rbp)
 3455      FFFFFF
 914:argtable2.c   ****             const char *datatype  = table[tabindex]->datatype;
 3456              		.loc 1 914 42
 3457 248f 8B8504FF 		movl	-252(%rbp), %eax
 3457      FFFF
 3458 2495 4898     		cltq
 3459 2497 488D14C5 		leaq	0(,%rax,8), %rdx
 3459      00000000 
 3460 249f 488B8508 		movq	-248(%rbp), %rax
 3460      FFFFFF
 3461 24a6 4801D0   		addq	%rdx, %rax
 3462 24a9 488B00   		movq	(%rax), %rax
 3463              		.loc 1 914 25
 3464 24ac 488B4018 		movq	24(%rax), %rax
 3465 24b0 48898520 		movq	%rax, -224(%rbp)
 3465      FFFFFF
 915:argtable2.c   ****             const char *glossary  = table[tabindex]->glossary;
 3466              		.loc 1 915 42
 3467 24b7 8B8504FF 		movl	-252(%rbp), %eax
 3467      FFFF
 3468 24bd 4898     		cltq
 3469 24bf 488D14C5 		leaq	0(,%rax,8), %rdx
 3469      00000000 
 3470 24c7 488B8508 		movq	-248(%rbp), %rax
 3470      FFFFFF
 3471 24ce 4801D0   		addq	%rdx, %rax
 3472 24d1 488B00   		movq	(%rax), %rax
 3473              		.loc 1 915 25
 3474 24d4 488B4020 		movq	32(%rax), %rax
 3475 24d8 48898528 		movq	%rax, -216(%rbp)
 3475      FFFFFF
 916:argtable2.c   ****             arg_cat_optionv(syntax,sizeof(syntax),shortopts,longopts,datatype,table[tabindex]->flag
 3476              		.loc 1 916 84
 3477 24df 8B8504FF 		movl	-252(%rbp), %eax
 3477      FFFF
 3478 24e5 4898     		cltq
 3479 24e7 488D14C5 		leaq	0(,%rax,8), %rdx
 3479      00000000 
 3480 24ef 488B8508 		movq	-248(%rbp), %rax
 3480      FFFFFF
 3481 24f6 4801D0   		addq	%rdx, %rax
 3482 24f9 488B00   		movq	(%rax), %rax
 3483              		.loc 1 916 94
 3484 24fc 0FB600   		movzbl	(%rax), %eax
 3485              		.loc 1 916 13
 3486 24ff 0FBEC0   		movsbl	%al, %eax
 3487 2502 83E004   		andl	$4, %eax
 3488 2505 4189C0   		movl	%eax, %r8d
 3489 2508 488BBD20 		movq	-224(%rbp), %rdi
 3489      FFFFFF
 3490 250f 488B8D18 		movq	-232(%rbp), %rcx
 3490      FFFFFF
 3491 2516 488B9510 		movq	-240(%rbp), %rdx
 3491      FFFFFF
 3492 251d 488D8530 		leaq	-208(%rbp), %rax
 3492      FFFFFF
 3493 2524 4883EC08 		subq	$8, %rsp
 3494 2528 488D3500 		leaq	.LC23(%rip), %rsi
 3494      000000
 3495 252f 56       		pushq	%rsi
 3496 2530 4589C1   		movl	%r8d, %r9d
 3497 2533 4989F8   		movq	%rdi, %r8
 3498 2536 BEC80000 		movl	$200, %esi
 3498      00
 3499 253b 4889C7   		movq	%rax, %rdi
 3500 253e E8B4EEFF 		call	arg_cat_optionv
 3500      FF
 3501 2543 4883C410 		addq	$16, %rsp
 917:argtable2.c   ****             fprintf(fp,format,syntax,glossary);
 3502              		.loc 1 917 13
 3503 2547 488B8D28 		movq	-216(%rbp), %rcx
 3503      FFFFFF
 3504 254e 488D9530 		leaq	-208(%rbp), %rdx
 3504      FFFFFF
 3505 2555 488BB5E8 		movq	-280(%rbp), %rsi
 3505      FEFFFF
 3506 255c 488B85F8 		movq	-264(%rbp), %rax
 3506      FEFFFF
 3507 2563 4889C7   		movq	%rax, %rdi
 3508 2566 B8000000 		movl	$0, %eax
 3508      00
 3509 256b E8000000 		call	fprintf@PLT
 3509      00
 3510              	.L190:
 3511              	.LBE27:
 907:argtable2.c   ****         {
 3512              		.loc 1 907 70 discriminator 2
 3513 2570 838504FF 		addl	$1, -252(%rbp)
 3513      FFFF01
 3514              	.L189:
 907:argtable2.c   ****         {
 3515              		.loc 1 907 28 discriminator 1
 3516 2577 8B8504FF 		movl	-252(%rbp), %eax
 3516      FFFF
 3517 257d 4898     		cltq
 3518 257f 488D14C5 		leaq	0(,%rax,8), %rdx
 3518      00000000 
 3519 2587 488B8508 		movq	-248(%rbp), %rax
 3519      FFFFFF
 3520 258e 4801D0   		addq	%rdx, %rax
 3521 2591 488B00   		movq	(%rax), %rax
 907:argtable2.c   ****         {
 3522              		.loc 1 907 38 discriminator 1
 3523 2594 0FB600   		movzbl	(%rax), %eax
 907:argtable2.c   ****         {
 3524              		.loc 1 907 44 discriminator 1
 3525 2597 0FBEC0   		movsbl	%al, %eax
 3526 259a 83E001   		andl	$1, %eax
 907:argtable2.c   ****         {
 3527              		.loc 1 907 21 discriminator 1
 3528 259d 85C0     		testl	%eax, %eax
 3529 259f 0F848AFD 		je	.L191
 3529      FFFF
 918:argtable2.c   ****             }
 919:argtable2.c   ****         }
 920:argtable2.c   ****     }
 3530              		.loc 1 920 5
 3531 25a5 90       		nop
 3532 25a6 488B45F8 		movq	-8(%rbp), %rax
 3533 25aa 64482B04 		subq	%fs:40, %rax
 3533      25280000 
 3533      00
 3534 25b3 7405     		je	.L192
 3535 25b5 E8000000 		call	__stack_chk_fail@PLT
 3535      00
 3536              	.L192:
 3537 25ba C9       		leave
 3538              		.cfi_def_cfa 7, 8
 3539 25bb C3       		ret
 3540              		.cfi_endproc
 3541              	.LFE18:
 3543              		.section	.rodata
 3544              	.LC24:
 3545 00d9 25730A00 		.string	"%s\n"
 3546              		.text
 3548              	arg_print_formatted:
 3549              	.LFB19:
 921:argtable2.c   **** 
 922:argtable2.c   **** 
 923:argtable2.c   **** /**
 924:argtable2.c   ****  * Print a piece of text formatted, which means in a column with a
 925:argtable2.c   ****  * left and a right margin. The lines are wrapped at whitspaces next
 926:argtable2.c   ****  * to right margin. The function does not indent the first line, but
 927:argtable2.c   ****  * only the following ones.
 928:argtable2.c   ****  *
 929:argtable2.c   ****  * Example:
 930:argtable2.c   ****  * arg_print_formatted( fp, 0, 5, "Some text that doesn't fit." )
 931:argtable2.c   ****  * will result in the following output:
 932:argtable2.c   ****  *
 933:argtable2.c   ****  * Some
 934:argtable2.c   ****  * text
 935:argtable2.c   ****  * that
 936:argtable2.c   ****  * doesn'
 937:argtable2.c   ****  * t fit.
 938:argtable2.c   ****  *
 939:argtable2.c   ****  * Too long lines will be wrapped in the middle of a word.
 940:argtable2.c   ****  *
 941:argtable2.c   ****  * arg_print_formatted( fp, 2, 7, "Some text that doesn't fit." )
 942:argtable2.c   ****  * will result in the following output:
 943:argtable2.c   ****  *
 944:argtable2.c   ****  * Some
 945:argtable2.c   ****  *   text
 946:argtable2.c   ****  *   that
 947:argtable2.c   ****  *   doesn'
 948:argtable2.c   ****  *   t fit.
 949:argtable2.c   ****  *
 950:argtable2.c   ****  * As you see, the first line is not indented. This enables output of
 951:argtable2.c   ****  * lines, which start in a line where output already happened.
 952:argtable2.c   ****  *
 953:argtable2.c   ****  * Author: Uli Fouquet
 954:argtable2.c   ****  */
 955:argtable2.c   **** static
 956:argtable2.c   **** void arg_print_formatted( FILE *fp, const unsigned lmargin, const unsigned rmargin, const char *tex
 957:argtable2.c   ****     {
 3550              		.loc 1 957 5
 3551              		.cfi_startproc
 3552 25bc F30F1EFA 		endbr64
 3553 25c0 55       		pushq	%rbp
 3554              		.cfi_def_cfa_offset 16
 3555              		.cfi_offset 6, -16
 3556 25c1 4889E5   		movq	%rsp, %rbp
 3557              		.cfi_def_cfa_register 6
 3558 25c4 4883EC40 		subq	$64, %rsp
 3559 25c8 48897DD8 		movq	%rdi, -40(%rbp)
 3560 25cc 8975D4   		movl	%esi, -44(%rbp)
 3561 25cf 8955D0   		movl	%edx, -48(%rbp)
 3562 25d2 48894DC8 		movq	%rcx, -56(%rbp)
 958:argtable2.c   ****     const unsigned textlen = strlen( text );
 3563              		.loc 1 958 30
 3564 25d6 488B45C8 		movq	-56(%rbp), %rax
 3565 25da 4889C7   		movq	%rax, %rdi
 3566 25dd E8000000 		call	strlen@PLT
 3566      00
 3567              		.loc 1 958 20
 3568 25e2 8945F8   		movl	%eax, -8(%rbp)
 959:argtable2.c   ****     unsigned line_start = 0;
 3569              		.loc 1 959 14
 3570 25e5 C745EC00 		movl	$0, -20(%rbp)
 3570      000000
 960:argtable2.c   ****     unsigned line_end = textlen + 1;
 3571              		.loc 1 960 14
 3572 25ec 8B45F8   		movl	-8(%rbp), %eax
 3573 25ef 83C001   		addl	$1, %eax
 3574 25f2 8945F0   		movl	%eax, -16(%rbp)
 961:argtable2.c   ****     const unsigned colwidth = (rmargin - lmargin) + 1;
 3575              		.loc 1 961 40
 3576 25f5 8B45D0   		movl	-48(%rbp), %eax
 3577 25f8 2B45D4   		subl	-44(%rbp), %eax
 3578              		.loc 1 961 20
 3579 25fb 83C001   		addl	$1, %eax
 3580 25fe 8945FC   		movl	%eax, -4(%rbp)
 962:argtable2.c   **** 
 963:argtable2.c   ****     /* Someone doesn't like us... */
 964:argtable2.c   ****     if ( line_end < line_start )
 3581              		.loc 1 964 8
 3582 2601 8B45F0   		movl	-16(%rbp), %eax
 3583 2604 3B45EC   		cmpl	-20(%rbp), %eax
 3584 2607 0F832F01 		jnb	.L195
 3584      0000
 965:argtable2.c   ****         { fprintf( fp, "%s\n", text ); }
 3585              		.loc 1 965 11
 3586 260d 488B55C8 		movq	-56(%rbp), %rdx
 3587 2611 488B45D8 		movq	-40(%rbp), %rax
 3588 2615 488D0D00 		leaq	.LC24(%rip), %rcx
 3588      000000
 3589 261c 4889CE   		movq	%rcx, %rsi
 3590 261f 4889C7   		movq	%rax, %rdi
 3591 2622 B8000000 		movl	$0, %eax
 3591      00
 3592 2627 E8000000 		call	fprintf@PLT
 3592      00
 966:argtable2.c   **** 
 967:argtable2.c   ****     while (line_end-1 > line_start ) 
 3593              		.loc 1 967 11
 3594 262c E90B0100 		jmp	.L195
 3594      00
 3595              	.L197:
 968:argtable2.c   ****         {
 969:argtable2.c   ****         /* Eat leading whitespaces. This is essential because while
 970:argtable2.c   ****            wrapping lines, there will often be a whitespace at beginning
 971:argtable2.c   ****            of line  */
 972:argtable2.c   ****         while ( isspace(*(text+line_start)) ) 
 973:argtable2.c   ****             { line_start++; }
 3596              		.loc 1 973 25
 3597 2631 8345EC01 		addl	$1, -20(%rbp)
 3598              	.L196:
 972:argtable2.c   ****             { line_start++; }
 3599              		.loc 1 972 17
 3600 2635 E8000000 		call	__ctype_b_loc@PLT
 3600      00
 3601 263a 488B10   		movq	(%rax), %rdx
 3602 263d 8B4DEC   		movl	-20(%rbp), %ecx
 3603 2640 488B45C8 		movq	-56(%rbp), %rax
 3604 2644 4801C8   		addq	%rcx, %rax
 3605 2647 0FB600   		movzbl	(%rax), %eax
 3606 264a 480FBEC0 		movsbq	%al, %rax
 3607 264e 4801C0   		addq	%rax, %rax
 3608 2651 4801D0   		addq	%rdx, %rax
 3609 2654 0FB700   		movzwl	(%rax), %eax
 3610 2657 0FB7C0   		movzwl	%ax, %eax
 3611 265a 25002000 		andl	$8192, %eax
 3611      00
 3612 265f 85C0     		testl	%eax, %eax
 3613 2661 75CE     		jne	.L197
 974:argtable2.c   **** 
 975:argtable2.c   ****         if ((line_end - line_start) > colwidth ) 
 3614              		.loc 1 975 23
 3615 2663 8B45F0   		movl	-16(%rbp), %eax
 3616 2666 2B45EC   		subl	-20(%rbp), %eax
 3617              		.loc 1 975 12
 3618 2669 3945FC   		cmpl	%eax, -4(%rbp)
 3619 266c 7311     		jnb	.L199
 976:argtable2.c   ****             { line_end = line_start + colwidth; }
 3620              		.loc 1 976 24
 3621 266e 8B55EC   		movl	-20(%rbp), %edx
 3622 2671 8B45FC   		movl	-4(%rbp), %eax
 3623 2674 01D0     		addl	%edx, %eax
 3624 2676 8945F0   		movl	%eax, -16(%rbp)
 977:argtable2.c   **** 
 978:argtable2.c   ****         /* Find last whitespace, that fits into line */
 979:argtable2.c   ****         while ( ( line_end > line_start ) 
 3625              		.loc 1 979 15
 3626 2679 EB04     		jmp	.L199
 3627              	.L201:
 980:argtable2.c   ****                 && ( line_end - line_start > colwidth )
 981:argtable2.c   ****                 && !isspace(*(text+line_end))) 
 982:argtable2.c   ****             { line_end--; }
 3628              		.loc 1 982 23
 3629 267b 836DF001 		subl	$1, -16(%rbp)
 3630              	.L199:
 981:argtable2.c   ****             { line_end--; }
 3631              		.loc 1 981 17
 3632 267f 8B45F0   		movl	-16(%rbp), %eax
 3633 2682 3B45EC   		cmpl	-20(%rbp), %eax
 3634 2685 7639     		jbe	.L200
 980:argtable2.c   ****                 && ( line_end - line_start > colwidth )
 3635              		.loc 1 980 31
 3636 2687 8B45F0   		movl	-16(%rbp), %eax
 3637 268a 2B45EC   		subl	-20(%rbp), %eax
 980:argtable2.c   ****                 && ( line_end - line_start > colwidth )
 3638              		.loc 1 980 17
 3639 268d 3945FC   		cmpl	%eax, -4(%rbp)
 3640 2690 732E     		jnb	.L200
 981:argtable2.c   ****             { line_end--; }
 3641              		.loc 1 981 21
 3642 2692 E8000000 		call	__ctype_b_loc@PLT
 3642      00
 3643 2697 488B10   		movq	(%rax), %rdx
 3644 269a 8B4DF0   		movl	-16(%rbp), %ecx
 3645 269d 488B45C8 		movq	-56(%rbp), %rax
 3646 26a1 4801C8   		addq	%rcx, %rax
 3647 26a4 0FB600   		movzbl	(%rax), %eax
 3648 26a7 480FBEC0 		movsbq	%al, %rax
 3649 26ab 4801C0   		addq	%rax, %rax
 3650 26ae 4801D0   		addq	%rdx, %rax
 3651 26b1 0FB700   		movzwl	(%rax), %eax
 3652 26b4 0FB7C0   		movzwl	%ax, %eax
 3653 26b7 25002000 		andl	$8192, %eax
 3653      00
 981:argtable2.c   ****             { line_end--; }
 3654              		.loc 1 981 17
 3655 26bc 85C0     		testl	%eax, %eax
 3656 26be 74BB     		je	.L201
 3657              	.L200:
 983:argtable2.c   **** 
 984:argtable2.c   ****         /* Do not print trailing whitespace. If this text
 985:argtable2.c   ****            has got only one line, line_end now points to the
 986:argtable2.c   ****            last char due to initialization. */
 987:argtable2.c   ****         line_end--;
 3658              		.loc 1 987 17
 3659 26c0 836DF001 		subl	$1, -16(%rbp)
 988:argtable2.c   **** 
 989:argtable2.c   ****         /* Output line of text */
 990:argtable2.c   ****         while ( line_start < line_end ) 
 3660              		.loc 1 990 15
 3661 26c4 EB22     		jmp	.L202
 3662              	.L203:
 991:argtable2.c   ****             {
 992:argtable2.c   ****             fputc(*(text+line_start), fp );
 3663              		.loc 1 992 25
 3664 26c6 8B55EC   		movl	-20(%rbp), %edx
 3665 26c9 488B45C8 		movq	-56(%rbp), %rax
 3666 26cd 4801D0   		addq	%rdx, %rax
 3667              		.loc 1 992 19
 3668 26d0 0FB600   		movzbl	(%rax), %eax
 3669              		.loc 1 992 13
 3670 26d3 0FBEC0   		movsbl	%al, %eax
 3671 26d6 488B55D8 		movq	-40(%rbp), %rdx
 3672 26da 4889D6   		movq	%rdx, %rsi
 3673 26dd 89C7     		movl	%eax, %edi
 3674 26df E8000000 		call	fputc@PLT
 3674      00
 993:argtable2.c   ****             line_start++;
 3675              		.loc 1 993 23
 3676 26e4 8345EC01 		addl	$1, -20(%rbp)
 3677              	.L202:
 990:argtable2.c   ****             {
 3678              		.loc 1 990 28
 3679 26e8 8B45EC   		movl	-20(%rbp), %eax
 3680 26eb 3B45F0   		cmpl	-16(%rbp), %eax
 3681 26ee 72D6     		jb	.L203
 994:argtable2.c   ****             }
 995:argtable2.c   ****         fputc( '\n', fp );
 3682              		.loc 1 995 9
 3683 26f0 488B45D8 		movq	-40(%rbp), %rax
 3684 26f4 4889C6   		movq	%rax, %rsi
 3685 26f7 BF0A0000 		movl	$10, %edi
 3685      00
 3686 26fc E8000000 		call	fputc@PLT
 3686      00
 996:argtable2.c   **** 
 997:argtable2.c   ****         /* Initialize another line */
 998:argtable2.c   ****         if ( line_end+1 < textlen ) 
 3687              		.loc 1 998 22
 3688 2701 8B45F0   		movl	-16(%rbp), %eax
 3689 2704 83C001   		addl	$1, %eax
 3690              		.loc 1 998 12
 3691 2707 3945F8   		cmpl	%eax, -8(%rbp)
 3692 270a 762C     		jbe	.L204
 3693              	.LBB28:
 999:argtable2.c   ****             {
1000:argtable2.c   ****             unsigned i;
1001:argtable2.c   **** 
1002:argtable2.c   ****             for (i=0; i < lmargin; i++ )
 3694              		.loc 1 1002 19
 3695 270c C745F400 		movl	$0, -12(%rbp)
 3695      000000
 3696              		.loc 1 1002 13
 3697 2713 EB15     		jmp	.L205
 3698              	.L206:
1003:argtable2.c   ****                 { fputc( ' ', fp ); }
 3699              		.loc 1 1003 19 discriminator 3
 3700 2715 488B45D8 		movq	-40(%rbp), %rax
 3701 2719 4889C6   		movq	%rax, %rsi
 3702 271c BF200000 		movl	$32, %edi
 3702      00
 3703 2721 E8000000 		call	fputc@PLT
 3703      00
1002:argtable2.c   ****                 { fputc( ' ', fp ); }
 3704              		.loc 1 1002 37 discriminator 3
 3705 2726 8345F401 		addl	$1, -12(%rbp)
 3706              	.L205:
1002:argtable2.c   ****                 { fputc( ' ', fp ); }
 3707              		.loc 1 1002 25 discriminator 1
 3708 272a 8B45F4   		movl	-12(%rbp), %eax
 3709 272d 3B45D4   		cmpl	-44(%rbp), %eax
 3710 2730 72E3     		jb	.L206
1004:argtable2.c   **** 
1005:argtable2.c   ****             line_end = textlen;
 3711              		.loc 1 1005 22
 3712 2732 8B45F8   		movl	-8(%rbp), %eax
 3713 2735 8945F0   		movl	%eax, -16(%rbp)
 3714              	.L204:
 3715              	.LBE28:
1006:argtable2.c   ****             }
1007:argtable2.c   **** 
1008:argtable2.c   ****         /* If we have to print another line, get also the last char. */
1009:argtable2.c   ****         line_end++;
 3716              		.loc 1 1009 17
 3717 2738 8345F001 		addl	$1, -16(%rbp)
 3718              	.L195:
 967:argtable2.c   ****         {
 3719              		.loc 1 967 20
 3720 273c 8B45F0   		movl	-16(%rbp), %eax
 3721 273f 83E801   		subl	$1, %eax
 967:argtable2.c   ****         {
 3722              		.loc 1 967 23
 3723 2742 3945EC   		cmpl	%eax, -20(%rbp)
 3724 2745 0F82EAFE 		jb	.L196
 3724      FFFF
1010:argtable2.c   **** 
1011:argtable2.c   ****         } /* lines of text */
1012:argtable2.c   ****     }
 3725              		.loc 1 1012 5
 3726 274b 90       		nop
 3727 274c 90       		nop
 3728 274d C9       		leave
 3729              		.cfi_def_cfa 7, 8
 3730 274e C3       		ret
 3731              		.cfi_endproc
 3732              	.LFE19:
 3734              		.section	.rodata
 3735              	.LC25:
 3736 00dd 2020252D 		.string	"  %-25s %s\n"
 3736      32357320 
 3736      25730A00 
 3737              	.LC26:
 3738 00e9 2020252D 		.string	"  %-25s "
 3738      32357320 
 3738      00
 3739              		.text
 3740              		.globl	arg_print_glossary_gnu
 3742              	arg_print_glossary_gnu:
 3743              	.LFB20:
1013:argtable2.c   **** 
1014:argtable2.c   **** /**
1015:argtable2.c   ****  * Prints the glossary in strict GNU format. 
1016:argtable2.c   ****  * Differences to arg_print_glossary() are:
1017:argtable2.c   ****  *  - wraps lines after 80 chars
1018:argtable2.c   ****  *  - indents lines without shortops
1019:argtable2.c   ****  *  - does not accept formatstrings
1020:argtable2.c   ****  *
1021:argtable2.c   ****  * Contributed by Uli Fouquet
1022:argtable2.c   ****  */
1023:argtable2.c   **** void arg_print_glossary_gnu(FILE *fp, void **argtable )
1024:argtable2.c   ****     {
 3744              		.loc 1 1024 5
 3745              		.cfi_startproc
 3746 274f F30F1EFA 		endbr64
 3747 2753 55       		pushq	%rbp
 3748              		.cfi_def_cfa_offset 16
 3749              		.cfi_offset 6, -16
 3750 2754 4889E5   		movq	%rsp, %rbp
 3751              		.cfi_def_cfa_register 6
 3752 2757 4881EC10 		subq	$272, %rsp
 3752      010000
 3753 275e 4889BDF8 		movq	%rdi, -264(%rbp)
 3753      FEFFFF
 3754 2765 4889B5F0 		movq	%rsi, -272(%rbp)
 3754      FEFFFF
 3755              		.loc 1 1024 5
 3756 276c 64488B04 		movq	%fs:40, %rax
 3756      25280000 
 3756      00
 3757 2775 488945F8 		movq	%rax, -8(%rbp)
 3758 2779 31C0     		xorl	%eax, %eax
1025:argtable2.c   ****     struct arg_hdr **table = (struct arg_hdr**)argtable;
 3759              		.loc 1 1025 22
 3760 277b 488B85F0 		movq	-272(%rbp), %rax
 3760      FEFFFF
 3761 2782 48898508 		movq	%rax, -248(%rbp)
 3761      FFFFFF
1026:argtable2.c   ****     int tabindex;
1027:argtable2.c   **** 
1028:argtable2.c   ****     for(tabindex=0; !(table[tabindex]->flag&ARG_TERMINATOR); tabindex++)
 3762              		.loc 1 1028 17
 3763 2789 C78504FF 		movl	$0, -252(%rbp)
 3763      FFFF0000 
 3763      0000
 3764              		.loc 1 1028 5
 3765 2793 E9E00200 		jmp	.L209
 3765      00
 3766              	.L213:
1029:argtable2.c   ****         {
1030:argtable2.c   ****         if (table[tabindex]->glossary)
 3767              		.loc 1 1030 18
 3768 2798 8B8504FF 		movl	-252(%rbp), %eax
 3768      FFFF
 3769 279e 4898     		cltq
 3770 27a0 488D14C5 		leaq	0(,%rax,8), %rdx
 3770      00000000 
 3771 27a8 488B8508 		movq	-248(%rbp), %rax
 3771      FFFFFF
 3772 27af 4801D0   		addq	%rdx, %rax
 3773 27b2 488B00   		movq	(%rax), %rax
 3774              		.loc 1 1030 28
 3775 27b5 488B4020 		movq	32(%rax), %rax
 3776              		.loc 1 1030 12
 3777 27b9 4885C0   		testq	%rax, %rax
 3778 27bc 0F84AF02 		je	.L210
 3778      0000
 3779              	.LBB29:
1031:argtable2.c   ****             {
1032:argtable2.c   ****             char syntax[200]="";
 3780              		.loc 1 1032 18
 3781 27c2 48C78530 		movq	$0, -208(%rbp)
 3781      FFFFFF00 
 3781      000000
 3782 27cd 48C78538 		movq	$0, -200(%rbp)
 3782      FFFFFF00 
 3782      000000
 3783 27d8 48C78540 		movq	$0, -192(%rbp)
 3783      FFFFFF00 
 3783      000000
 3784 27e3 48C78548 		movq	$0, -184(%rbp)
 3784      FFFFFF00 
 3784      000000
 3785 27ee 48C78550 		movq	$0, -176(%rbp)
 3785      FFFFFF00 
 3785      000000
 3786 27f9 48C78558 		movq	$0, -168(%rbp)
 3786      FFFFFF00 
 3786      000000
 3787 2804 48C78560 		movq	$0, -160(%rbp)
 3787      FFFFFF00 
 3787      000000
 3788 280f 48C78568 		movq	$0, -152(%rbp)
 3788      FFFFFF00 
 3788      000000
 3789 281a 48C78570 		movq	$0, -144(%rbp)
 3789      FFFFFF00 
 3789      000000
 3790 2825 48C78578 		movq	$0, -136(%rbp)
 3790      FFFFFF00 
 3790      000000
 3791 2830 48C74580 		movq	$0, -128(%rbp)
 3791      00000000 
 3792 2838 48C74588 		movq	$0, -120(%rbp)
 3792      00000000 
 3793 2840 48C74590 		movq	$0, -112(%rbp)
 3793      00000000 
 3794 2848 48C74598 		movq	$0, -104(%rbp)
 3794      00000000 
 3795 2850 48C745A0 		movq	$0, -96(%rbp)
 3795      00000000 
 3796 2858 48C745A8 		movq	$0, -88(%rbp)
 3796      00000000 
 3797 2860 48C745B0 		movq	$0, -80(%rbp)
 3797      00000000 
 3798 2868 48C745B8 		movq	$0, -72(%rbp)
 3798      00000000 
 3799 2870 48C745C0 		movq	$0, -64(%rbp)
 3799      00000000 
 3800 2878 48C745C8 		movq	$0, -56(%rbp)
 3800      00000000 
 3801 2880 48C745D0 		movq	$0, -48(%rbp)
 3801      00000000 
 3802 2888 48C745D8 		movq	$0, -40(%rbp)
 3802      00000000 
 3803 2890 48C745E0 		movq	$0, -32(%rbp)
 3803      00000000 
 3804 2898 48C745E8 		movq	$0, -24(%rbp)
 3804      00000000 
 3805 28a0 48C745F0 		movq	$0, -16(%rbp)
 3805      00000000 
1033:argtable2.c   ****             const char *shortopts = table[tabindex]->shortopts;
 3806              		.loc 1 1033 42
 3807 28a8 8B8504FF 		movl	-252(%rbp), %eax
 3807      FFFF
 3808 28ae 4898     		cltq
 3809 28b0 488D14C5 		leaq	0(,%rax,8), %rdx
 3809      00000000 
 3810 28b8 488B8508 		movq	-248(%rbp), %rax
 3810      FFFFFF
 3811 28bf 4801D0   		addq	%rdx, %rax
 3812 28c2 488B00   		movq	(%rax), %rax
 3813              		.loc 1 1033 25
 3814 28c5 488B4008 		movq	8(%rax), %rax
 3815 28c9 48898510 		movq	%rax, -240(%rbp)
 3815      FFFFFF
1034:argtable2.c   ****             const char *longopts  = table[tabindex]->longopts;
 3816              		.loc 1 1034 42
 3817 28d0 8B8504FF 		movl	-252(%rbp), %eax
 3817      FFFF
 3818 28d6 4898     		cltq
 3819 28d8 488D14C5 		leaq	0(,%rax,8), %rdx
 3819      00000000 
 3820 28e0 488B8508 		movq	-248(%rbp), %rax
 3820      FFFFFF
 3821 28e7 4801D0   		addq	%rdx, %rax
 3822 28ea 488B00   		movq	(%rax), %rax
 3823              		.loc 1 1034 25
 3824 28ed 488B4010 		movq	16(%rax), %rax
 3825 28f1 48898518 		movq	%rax, -232(%rbp)
 3825      FFFFFF
1035:argtable2.c   ****             const char *datatype  = table[tabindex]->datatype;
 3826              		.loc 1 1035 42
 3827 28f8 8B8504FF 		movl	-252(%rbp), %eax
 3827      FFFF
 3828 28fe 4898     		cltq
 3829 2900 488D14C5 		leaq	0(,%rax,8), %rdx
 3829      00000000 
 3830 2908 488B8508 		movq	-248(%rbp), %rax
 3830      FFFFFF
 3831 290f 4801D0   		addq	%rdx, %rax
 3832 2912 488B00   		movq	(%rax), %rax
 3833              		.loc 1 1035 25
 3834 2915 488B4018 		movq	24(%rax), %rax
 3835 2919 48898520 		movq	%rax, -224(%rbp)
 3835      FFFFFF
1036:argtable2.c   ****             const char *glossary  = table[tabindex]->glossary;
 3836              		.loc 1 1036 42
 3837 2920 8B8504FF 		movl	-252(%rbp), %eax
 3837      FFFF
 3838 2926 4898     		cltq
 3839 2928 488D14C5 		leaq	0(,%rax,8), %rdx
 3839      00000000 
 3840 2930 488B8508 		movq	-248(%rbp), %rax
 3840      FFFFFF
 3841 2937 4801D0   		addq	%rdx, %rax
 3842 293a 488B00   		movq	(%rax), %rax
 3843              		.loc 1 1036 25
 3844 293d 488B4020 		movq	32(%rax), %rax
 3845 2941 48898528 		movq	%rax, -216(%rbp)
 3845      FFFFFF
1037:argtable2.c   **** 
1038:argtable2.c   ****             if ( !shortopts && longopts ) 
 3846              		.loc 1 1038 16
 3847 2948 4883BD10 		cmpq	$0, -240(%rbp)
 3847      FFFFFF00 
 3848 2950 752A     		jne	.L211
 3849              		.loc 1 1038 29 discriminator 1
 3850 2952 4883BD18 		cmpq	$0, -232(%rbp)
 3850      FFFFFF00 
 3851 295a 7420     		je	.L211
1039:argtable2.c   ****                 {
1040:argtable2.c   ****                 /* Indent trailing line by 4 spaces... */
1041:argtable2.c   ****                 memset( syntax, ' ', 4 );
 3852              		.loc 1 1041 17
 3853 295c 488D8530 		leaq	-208(%rbp), %rax
 3853      FFFFFF
 3854 2963 BA040000 		movl	$4, %edx
 3854      00
 3855 2968 BE200000 		movl	$32, %esi
 3855      00
 3856 296d 4889C7   		movq	%rax, %rdi
 3857 2970 E8000000 		call	memset@PLT
 3857      00
1042:argtable2.c   ****                 *(syntax+4) = '\0';
 3858              		.loc 1 1042 29
 3859 2975 C68534FF 		movb	$0, -204(%rbp)
 3859      FFFF00
 3860              	.L211:
1043:argtable2.c   ****                 }
1044:argtable2.c   **** 
1045:argtable2.c   ****             arg_cat_optionv(syntax,sizeof(syntax),shortopts,longopts,datatype,table[tabindex]->flag
 3861              		.loc 1 1045 84
 3862 297c 8B8504FF 		movl	-252(%rbp), %eax
 3862      FFFF
 3863 2982 4898     		cltq
 3864 2984 488D14C5 		leaq	0(,%rax,8), %rdx
 3864      00000000 
 3865 298c 488B8508 		movq	-248(%rbp), %rax
 3865      FFFFFF
 3866 2993 4801D0   		addq	%rdx, %rax
 3867 2996 488B00   		movq	(%rax), %rax
 3868              		.loc 1 1045 94
 3869 2999 0FB600   		movzbl	(%rax), %eax
 3870              		.loc 1 1045 13
 3871 299c 0FBEC0   		movsbl	%al, %eax
 3872 299f 83E004   		andl	$4, %eax
 3873 29a2 4189C0   		movl	%eax, %r8d
 3874 29a5 488BBD20 		movq	-224(%rbp), %rdi
 3874      FFFFFF
 3875 29ac 488B8D18 		movq	-232(%rbp), %rcx
 3875      FFFFFF
 3876 29b3 488B9510 		movq	-240(%rbp), %rdx
 3876      FFFFFF
 3877 29ba 488D8530 		leaq	-208(%rbp), %rax
 3877      FFFFFF
 3878 29c1 4883EC08 		subq	$8, %rsp
 3879 29c5 488D3500 		leaq	.LC23(%rip), %rsi
 3879      000000
 3880 29cc 56       		pushq	%rsi
 3881 29cd 4589C1   		movl	%r8d, %r9d
 3882 29d0 4989F8   		movq	%rdi, %r8
 3883 29d3 BEC80000 		movl	$200, %esi
 3883      00
 3884 29d8 4889C7   		movq	%rax, %rdi
 3885 29db E817EAFF 		call	arg_cat_optionv
 3885      FF
 3886 29e0 4883C410 		addq	$16, %rsp
1046:argtable2.c   **** 
1047:argtable2.c   ****             /* If syntax fits not into column, print glossary in new line... */
1048:argtable2.c   ****             if ( strlen(syntax) > 25 ) 
 3887              		.loc 1 1048 18
 3888 29e4 488D8530 		leaq	-208(%rbp), %rax
 3888      FFFFFF
 3889 29eb 4889C7   		movq	%rax, %rdi
 3890 29ee E8000000 		call	strlen@PLT
 3890      00
 3891              		.loc 1 1048 16
 3892 29f3 4883F819 		cmpq	$25, %rax
 3893 29f7 7630     		jbe	.L212
1049:argtable2.c   ****                 {
1050:argtable2.c   ****                 fprintf( fp, "  %-25s %s\n", syntax, "" );
 3894              		.loc 1 1050 17
 3895 29f9 488D9530 		leaq	-208(%rbp), %rdx
 3895      FFFFFF
 3896 2a00 488B85F8 		movq	-264(%rbp), %rax
 3896      FEFFFF
 3897 2a07 488D0D00 		leaq	.LC12(%rip), %rcx
 3897      000000
 3898 2a0e 488D3500 		leaq	.LC25(%rip), %rsi
 3898      000000
 3899 2a15 4889C7   		movq	%rax, %rdi
 3900 2a18 B8000000 		movl	$0, %eax
 3900      00
 3901 2a1d E8000000 		call	fprintf@PLT
 3901      00
1051:argtable2.c   ****                 *syntax = '\0';
 3902              		.loc 1 1051 25
 3903 2a22 C68530FF 		movb	$0, -208(%rbp)
 3903      FFFF00
 3904              	.L212:
1052:argtable2.c   ****                 }
1053:argtable2.c   **** 
1054:argtable2.c   ****             fprintf( fp, "  %-25s ", syntax );
 3905              		.loc 1 1054 13
 3906 2a29 488D9530 		leaq	-208(%rbp), %rdx
 3906      FFFFFF
 3907 2a30 488B85F8 		movq	-264(%rbp), %rax
 3907      FEFFFF
 3908 2a37 488D0D00 		leaq	.LC26(%rip), %rcx
 3908      000000
 3909 2a3e 4889CE   		movq	%rcx, %rsi
 3910 2a41 4889C7   		movq	%rax, %rdi
 3911 2a44 B8000000 		movl	$0, %eax
 3911      00
 3912 2a49 E8000000 		call	fprintf@PLT
 3912      00
1055:argtable2.c   ****             arg_print_formatted( fp, 28, 79, glossary );
 3913              		.loc 1 1055 13
 3914 2a4e 488B9528 		movq	-216(%rbp), %rdx
 3914      FFFFFF
 3915 2a55 488B85F8 		movq	-264(%rbp), %rax
 3915      FEFFFF
 3916 2a5c 4889D1   		movq	%rdx, %rcx
 3917 2a5f BA4F0000 		movl	$79, %edx
 3917      00
 3918 2a64 BE1C0000 		movl	$28, %esi
 3918      00
 3919 2a69 4889C7   		movq	%rax, %rdi
 3920 2a6c E84BFBFF 		call	arg_print_formatted
 3920      FF
 3921              	.L210:
 3922              	.LBE29:
1028:argtable2.c   ****         {
 3923              		.loc 1 1028 70 discriminator 2
 3924 2a71 838504FF 		addl	$1, -252(%rbp)
 3924      FFFF01
 3925              	.L209:
1028:argtable2.c   ****         {
 3926              		.loc 1 1028 28 discriminator 1
 3927 2a78 8B8504FF 		movl	-252(%rbp), %eax
 3927      FFFF
 3928 2a7e 4898     		cltq
 3929 2a80 488D14C5 		leaq	0(,%rax,8), %rdx
 3929      00000000 
 3930 2a88 488B8508 		movq	-248(%rbp), %rax
 3930      FFFFFF
 3931 2a8f 4801D0   		addq	%rdx, %rax
 3932 2a92 488B00   		movq	(%rax), %rax
1028:argtable2.c   ****         {
 3933              		.loc 1 1028 38 discriminator 1
 3934 2a95 0FB600   		movzbl	(%rax), %eax
1028:argtable2.c   ****         {
 3935              		.loc 1 1028 44 discriminator 1
 3936 2a98 0FBEC0   		movsbl	%al, %eax
 3937 2a9b 83E001   		andl	$1, %eax
1028:argtable2.c   ****         {
 3938              		.loc 1 1028 21 discriminator 1
 3939 2a9e 85C0     		testl	%eax, %eax
 3940 2aa0 0F84F2FC 		je	.L213
 3940      FFFF
1056:argtable2.c   ****             }
1057:argtable2.c   ****         } /* for each table entry */
1058:argtable2.c   **** 
1059:argtable2.c   ****     fputc( '\n', fp );
 3941              		.loc 1 1059 5
 3942 2aa6 488B85F8 		movq	-264(%rbp), %rax
 3942      FEFFFF
 3943 2aad 4889C6   		movq	%rax, %rsi
 3944 2ab0 BF0A0000 		movl	$10, %edi
 3944      00
 3945 2ab5 E8000000 		call	fputc@PLT
 3945      00
1060:argtable2.c   ****     }
 3946              		.loc 1 1060 5
 3947 2aba 90       		nop
 3948 2abb 488B45F8 		movq	-8(%rbp), %rax
 3949 2abf 64482B04 		subq	%fs:40, %rax
 3949      25280000 
 3949      00
 3950 2ac8 7405     		je	.L214
 3951 2aca E8000000 		call	__stack_chk_fail@PLT
 3951      00
 3952              	.L214:
 3953 2acf C9       		leave
 3954              		.cfi_def_cfa 7, 8
 3955 2ad0 C3       		ret
 3956              		.cfi_endproc
 3957              	.LFE20:
 3959              		.globl	arg_nullcheck
 3961              	arg_nullcheck:
 3962              	.LFB21:
1061:argtable2.c   **** 
1062:argtable2.c   **** 
1063:argtable2.c   **** /**
1064:argtable2.c   ****  * Checks the argtable[] array for NULL entries and returns 1
1065:argtable2.c   ****  * if any are found, zero otherwise.
1066:argtable2.c   ****  */
1067:argtable2.c   **** int arg_nullcheck(void **argtable)
1068:argtable2.c   ****     {
 3963              		.loc 1 1068 5
 3964              		.cfi_startproc
 3965 2ad1 F30F1EFA 		endbr64
 3966 2ad5 55       		pushq	%rbp
 3967              		.cfi_def_cfa_offset 16
 3968              		.cfi_offset 6, -16
 3969 2ad6 4889E5   		movq	%rsp, %rbp
 3970              		.cfi_def_cfa_register 6
 3971 2ad9 48897DE8 		movq	%rdi, -24(%rbp)
1069:argtable2.c   ****     struct arg_hdr **table = (struct arg_hdr **)argtable;
 3972              		.loc 1 1069 22
 3973 2add 488B45E8 		movq	-24(%rbp), %rax
 3974 2ae1 488945F8 		movq	%rax, -8(%rbp)
1070:argtable2.c   ****     int tabindex;
1071:argtable2.c   ****     /*printf("arg_nullcheck(%p)\n",argtable);*/
1072:argtable2.c   **** 
1073:argtable2.c   ****     if (!table)
 3975              		.loc 1 1073 8
 3976 2ae5 48837DF8 		cmpq	$0, -8(%rbp)
 3976      00
 3977 2aea 7507     		jne	.L216
1074:argtable2.c   ****         return 1;
 3978              		.loc 1 1074 16
 3979 2aec B8010000 		movl	$1, %eax
 3979      00
 3980 2af1 EB59     		jmp	.L217
 3981              	.L216:
1075:argtable2.c   **** 
1076:argtable2.c   ****     tabindex=0;
 3982              		.loc 1 1076 13
 3983 2af3 C745F400 		movl	$0, -12(%rbp)
 3983      000000
 3984              	.L219:
1077:argtable2.c   ****     do
1078:argtable2.c   ****         {
1079:argtable2.c   ****         /*printf("argtable[%d]=%p\n",tabindex,argtable[tabindex]);*/
1080:argtable2.c   ****         if (!table[tabindex])
 3985              		.loc 1 1080 19
 3986 2afa 8B45F4   		movl	-12(%rbp), %eax
 3987 2afd 4898     		cltq
 3988 2aff 488D14C5 		leaq	0(,%rax,8), %rdx
 3988      00000000 
 3989 2b07 488B45F8 		movq	-8(%rbp), %rax
 3990 2b0b 4801D0   		addq	%rdx, %rax
 3991 2b0e 488B00   		movq	(%rax), %rax
 3992              		.loc 1 1080 12
 3993 2b11 4885C0   		testq	%rax, %rax
 3994 2b14 7507     		jne	.L218
1081:argtable2.c   ****             return 1;
 3995              		.loc 1 1081 20
 3996 2b16 B8010000 		movl	$1, %eax
 3996      00
 3997 2b1b EB2F     		jmp	.L217
 3998              	.L218:
1082:argtable2.c   ****         } while(!(table[tabindex++]->flag&ARG_TERMINATOR));
 3999              		.loc 1 1082 33
 4000 2b1d 8B45F4   		movl	-12(%rbp), %eax
 4001 2b20 8D5001   		leal	1(%rax), %edx
 4002 2b23 8955F4   		movl	%edx, -12(%rbp)
 4003 2b26 4898     		cltq
 4004              		.loc 1 1082 24
 4005 2b28 488D14C5 		leaq	0(,%rax,8), %rdx
 4005      00000000 
 4006 2b30 488B45F8 		movq	-8(%rbp), %rax
 4007 2b34 4801D0   		addq	%rdx, %rax
 4008 2b37 488B00   		movq	(%rax), %rax
 4009              		.loc 1 1082 36
 4010 2b3a 0FB600   		movzbl	(%rax), %eax
 4011              		.loc 1 1082 42
 4012 2b3d 0FBEC0   		movsbl	%al, %eax
 4013 2b40 83E001   		andl	$1, %eax
 4014              		.loc 1 1082 17
 4015 2b43 85C0     		testl	%eax, %eax
 4016 2b45 74B3     		je	.L219
1083:argtable2.c   **** 
1084:argtable2.c   ****     return 0;
 4017              		.loc 1 1084 12
 4018 2b47 B8000000 		movl	$0, %eax
 4018      00
 4019              	.L217:
1085:argtable2.c   ****     }
 4020              		.loc 1 1085 5
 4021 2b4c 5D       		popq	%rbp
 4022              		.cfi_def_cfa 7, 8
 4023 2b4d C3       		ret
 4024              		.cfi_endproc
 4025              	.LFE21:
 4027              		.globl	arg_free
 4029              	arg_free:
 4030              	.LFB22:
1086:argtable2.c   **** 
1087:argtable2.c   **** 
1088:argtable2.c   **** /*
1089:argtable2.c   ****  * arg_free() is deprecated in favour of arg_freetable() due to a flaw in its design.
1090:argtable2.c   ****  * The flaw results in memory leak in the (very rare) case that an intermediate
1091:argtable2.c   ****  * entry in the argtable array failed its memory allocation while others following
1092:argtable2.c   ****  * that entry were still allocated ok. Those subsequent allocations will not be
1093:argtable2.c   ****  * deallocated by arg_free().
1094:argtable2.c   ****  * Despite the unlikeliness of the problem occurring, and the even unlikelier event
1095:argtable2.c   ****  * that it has any deliterious effect, it is fixed regardless by replacing arg_free()
1096:argtable2.c   ****  * with the newer arg_freetable() function.
1097:argtable2.c   ****  * We still keep arg_free() for backwards compatibility.
1098:argtable2.c   ****  */
1099:argtable2.c   **** void arg_free(void **argtable)
1100:argtable2.c   ****     {
 4031              		.loc 1 1100 5
 4032              		.cfi_startproc
 4033 2b4e F30F1EFA 		endbr64
 4034 2b52 55       		pushq	%rbp
 4035              		.cfi_def_cfa_offset 16
 4036              		.cfi_offset 6, -16
 4037 2b53 4889E5   		movq	%rsp, %rbp
 4038              		.cfi_def_cfa_register 6
 4039 2b56 4883EC20 		subq	$32, %rsp
 4040 2b5a 48897DE8 		movq	%rdi, -24(%rbp)
1101:argtable2.c   ****     struct arg_hdr **table=(struct arg_hdr**)argtable;
 4041              		.loc 1 1101 22
 4042 2b5e 488B45E8 		movq	-24(%rbp), %rax
 4043 2b62 488945F8 		movq	%rax, -8(%rbp)
1102:argtable2.c   ****     int tabindex=0;
 4044              		.loc 1 1102 9
 4045 2b66 C745F000 		movl	$0, -16(%rbp)
 4045      000000
 4046              	.L223:
1103:argtable2.c   ****     int flag;
1104:argtable2.c   ****     /*printf("arg_free(%p)\n",argtable);*/
1105:argtable2.c   ****     do
1106:argtable2.c   ****         {
1107:argtable2.c   ****         /*
1108:argtable2.c   ****         if we encounter a NULL entry then somewhat incorrectly we presume
1109:argtable2.c   ****         we have come to the end of the array. It isnt strictly true because
1110:argtable2.c   ****         an intermediate entry could be NULL with other non-NULL entries to follow.
1111:argtable2.c   ****         The subsequent argtable entries would then not be freed as they should.
1112:argtable2.c   ****         */
1113:argtable2.c   ****         if (table[tabindex]==NULL)
 4047              		.loc 1 1113 18
 4048 2b6d 8B45F0   		movl	-16(%rbp), %eax
 4049 2b70 4898     		cltq
 4050 2b72 488D14C5 		leaq	0(,%rax,8), %rdx
 4050      00000000 
 4051 2b7a 488B45F8 		movq	-8(%rbp), %rax
 4052 2b7e 4801D0   		addq	%rdx, %rax
 4053 2b81 488B00   		movq	(%rax), %rax
 4054              		.loc 1 1113 12
 4055 2b84 4885C0   		testq	%rax, %rax
 4056 2b87 7470     		je	.L224
1114:argtable2.c   ****             break;
1115:argtable2.c   ****                     
1116:argtable2.c   ****         flag = table[tabindex]->flag;
 4057              		.loc 1 1116 21
 4058 2b89 8B45F0   		movl	-16(%rbp), %eax
 4059 2b8c 4898     		cltq
 4060 2b8e 488D14C5 		leaq	0(,%rax,8), %rdx
 4060      00000000 
 4061 2b96 488B45F8 		movq	-8(%rbp), %rax
 4062 2b9a 4801D0   		addq	%rdx, %rax
 4063 2b9d 488B00   		movq	(%rax), %rax
 4064              		.loc 1 1116 31
 4065 2ba0 0FB600   		movzbl	(%rax), %eax
 4066              		.loc 1 1116 14
 4067 2ba3 0FBEC0   		movsbl	%al, %eax
 4068 2ba6 8945F4   		movl	%eax, -12(%rbp)
1117:argtable2.c   ****         free(table[tabindex]);
 4069              		.loc 1 1117 19
 4070 2ba9 8B45F0   		movl	-16(%rbp), %eax
 4071 2bac 4898     		cltq
 4072 2bae 488D14C5 		leaq	0(,%rax,8), %rdx
 4072      00000000 
 4073 2bb6 488B45F8 		movq	-8(%rbp), %rax
 4074 2bba 4801D0   		addq	%rdx, %rax
 4075              		.loc 1 1117 9
 4076 2bbd 488B00   		movq	(%rax), %rax
 4077 2bc0 4889C7   		movq	%rax, %rdi
 4078 2bc3 E8000000 		call	free@PLT
 4078      00
1118:argtable2.c   ****         table[tabindex++]=NULL;
 4079              		.loc 1 1118 23
 4080 2bc8 8B45F0   		movl	-16(%rbp), %eax
 4081 2bcb 8D5001   		leal	1(%rax), %edx
 4082 2bce 8955F0   		movl	%edx, -16(%rbp)
 4083 2bd1 4898     		cltq
 4084              		.loc 1 1118 14
 4085 2bd3 488D14C5 		leaq	0(,%rax,8), %rdx
 4085      00000000 
 4086 2bdb 488B45F8 		movq	-8(%rbp), %rax
 4087 2bdf 4801D0   		addq	%rdx, %rax
 4088              		.loc 1 1118 26
 4089 2be2 48C70000 		movq	$0, (%rax)
 4089      000000
1119:argtable2.c   ****         
1120:argtable2.c   ****         } while(!(flag&ARG_TERMINATOR));
 4090              		.loc 1 1120 23
 4091 2be9 8B45F4   		movl	-12(%rbp), %eax
 4092 2bec 83E001   		andl	$1, %eax
 4093              		.loc 1 1120 17
 4094 2bef 85C0     		testl	%eax, %eax
 4095 2bf1 0F8476FF 		je	.L223
 4095      FFFF
1121:argtable2.c   ****     }
 4096              		.loc 1 1121 5
 4097 2bf7 EB01     		jmp	.L225
 4098              	.L224:
1114:argtable2.c   ****                     
 4099              		.loc 1 1114 13
 4100 2bf9 90       		nop
 4101              	.L225:
 4102              		.loc 1 1121 5
 4103 2bfa 90       		nop
 4104 2bfb C9       		leave
 4105              		.cfi_def_cfa 7, 8
 4106 2bfc C3       		ret
 4107              		.cfi_endproc
 4108              	.LFE22:
 4110              		.globl	arg_freetable
 4112              	arg_freetable:
 4113              	.LFB23:
1122:argtable2.c   **** 
1123:argtable2.c   **** /* frees each non-NULL element of argtable[], where n is the size of the number of entries in the a
1124:argtable2.c   **** void arg_freetable(void **argtable, size_t n)
1125:argtable2.c   ****     {
 4114              		.loc 1 1125 5
 4115              		.cfi_startproc
 4116 2bfd F30F1EFA 		endbr64
 4117 2c01 55       		pushq	%rbp
 4118              		.cfi_def_cfa_offset 16
 4119              		.cfi_offset 6, -16
 4120 2c02 4889E5   		movq	%rsp, %rbp
 4121              		.cfi_def_cfa_register 6
 4122 2c05 4883EC20 		subq	$32, %rsp
 4123 2c09 48897DE8 		movq	%rdi, -24(%rbp)
 4124 2c0d 488975E0 		movq	%rsi, -32(%rbp)
1126:argtable2.c   ****     struct arg_hdr **table=(struct arg_hdr**)argtable;
 4125              		.loc 1 1126 22
 4126 2c11 488B45E8 		movq	-24(%rbp), %rax
 4127 2c15 488945F8 		movq	%rax, -8(%rbp)
1127:argtable2.c   ****     int tabindex=0;
 4128              		.loc 1 1127 9
 4129 2c19 C745F400 		movl	$0, -12(%rbp)
 4129      000000
1128:argtable2.c   ****     /*printf("arg_freetable(%p)\n",argtable);*/
1129:argtable2.c   ****     for (tabindex=0; tabindex<n; tabindex++)
 4130              		.loc 1 1129 18
 4131 2c20 C745F400 		movl	$0, -12(%rbp)
 4131      000000
 4132              		.loc 1 1129 5
 4133 2c27 EB5D     		jmp	.L227
 4134              	.L230:
1130:argtable2.c   ****         {
1131:argtable2.c   ****         if (table[tabindex]==NULL)
 4135              		.loc 1 1131 18
 4136 2c29 8B45F4   		movl	-12(%rbp), %eax
 4137 2c2c 4898     		cltq
 4138 2c2e 488D14C5 		leaq	0(,%rax,8), %rdx
 4138      00000000 
 4139 2c36 488B45F8 		movq	-8(%rbp), %rax
 4140 2c3a 4801D0   		addq	%rdx, %rax
 4141 2c3d 488B00   		movq	(%rax), %rax
 4142              		.loc 1 1131 12
 4143 2c40 4885C0   		testq	%rax, %rax
 4144 2c43 743C     		je	.L231
1132:argtable2.c   ****             continue;
1133:argtable2.c   ****                     
1134:argtable2.c   ****         free(table[tabindex]);
 4145              		.loc 1 1134 19
 4146 2c45 8B45F4   		movl	-12(%rbp), %eax
 4147 2c48 4898     		cltq
 4148 2c4a 488D14C5 		leaq	0(,%rax,8), %rdx
 4148      00000000 
 4149 2c52 488B45F8 		movq	-8(%rbp), %rax
 4150 2c56 4801D0   		addq	%rdx, %rax
 4151              		.loc 1 1134 9
 4152 2c59 488B00   		movq	(%rax), %rax
 4153 2c5c 4889C7   		movq	%rax, %rdi
 4154 2c5f E8000000 		call	free@PLT
 4154      00
1135:argtable2.c   ****         table[tabindex]=NULL;        
 4155              		.loc 1 1135 14
 4156 2c64 8B45F4   		movl	-12(%rbp), %eax
 4157 2c67 4898     		cltq
 4158 2c69 488D14C5 		leaq	0(,%rax,8), %rdx
 4158      00000000 
 4159 2c71 488B45F8 		movq	-8(%rbp), %rax
 4160 2c75 4801D0   		addq	%rdx, %rax
 4161              		.loc 1 1135 24
 4162 2c78 48C70000 		movq	$0, (%rax)
 4162      000000
 4163 2c7f EB01     		jmp	.L229
 4164              	.L231:
1132:argtable2.c   ****             continue;
 4165              		.loc 1 1132 13
 4166 2c81 90       		nop
 4167              	.L229:
1129:argtable2.c   ****         {
 4168              		.loc 1 1129 42 discriminator 2
 4169 2c82 8345F401 		addl	$1, -12(%rbp)
 4170              	.L227:
1129:argtable2.c   ****         {
 4171              		.loc 1 1129 30 discriminator 1
 4172 2c86 8B45F4   		movl	-12(%rbp), %eax
 4173 2c89 4898     		cltq
 4174 2c8b 483945E0 		cmpq	%rax, -32(%rbp)
 4175 2c8f 7798     		ja	.L230
1136:argtable2.c   ****         };
1137:argtable2.c   ****     }
 4176              		.loc 1 1137 5
 4177 2c91 90       		nop
 4178 2c92 90       		nop
 4179 2c93 C9       		leave
 4180              		.cfi_def_cfa 7, 8
 4181 2c94 C3       		ret
 4182              		.cfi_endproc
 4183              	.LFE23:
 4185              	.Letext0:
 4186              		.file 2 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h"
 4187              		.file 3 "/usr/include/x86_64-linux-gnu/bits/types.h"
 4188              		.file 4 "./getopt.h"
 4189              		.file 5 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h"
 4190              		.file 6 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h"
 4191              		.file 7 "/usr/include/ctype.h"
 4192              		.file 8 "argtable2.h"
 4193              		.file 9 "/usr/include/string.h"
 4194              		.file 10 "/usr/include/stdio.h"
 4195              		.file 11 "/usr/include/stdlib.h"
 7960              		.section	.note.gnu.property,"a"
 7961              		.align 8
 7962 0000 04000000 		.long	1f - 0f
 7963 0004 10000000 		.long	4f - 1f
 7964 0008 05000000 		.long	5
 7965              	0:
 7966 000c 474E5500 		.string	"GNU"
 7967              	1:
 7968              		.align 8
 7969 0010 020000C0 		.long	0xc0000002
 7970 0014 04000000 		.long	3f - 2f
 7971              	2:
 7972 0018 03000000 		.long	0x3
 7973              	3:
 7974 001c 00000000 		.align 8
 7975              	4:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 argtable2.c
     /tmp/ccHjsdow.s:6      .text:0000000000000000 arg_register_error
     /tmp/ccHjsdow.s:129    .text:0000000000000102 find_shortoption
     /tmp/ccHjsdow.s:224    .text:00000000000001a2 dump_longoptions
     /tmp/ccHjsdow.s:340    .text:00000000000002d0 alloc_longoptions
     /tmp/ccHjsdow.s:717    .text:0000000000000637 alloc_shortoptions
     /tmp/ccHjsdow.s:916    .text:00000000000007de arg_endindex
     /tmp/ccHjsdow.s:960    .text:0000000000000820 arg_parse_tagged
     /tmp/ccHjsdow.s:1305   .text:0000000000000bc7 arg_parse_untagged
     /tmp/ccHjsdow.s:1527   .text:0000000000000df6 arg_parse_check
     /tmp/ccHjsdow.s:1621   .text:0000000000000ec7 arg_reset
     /tmp/ccHjsdow.s:1702   .text:0000000000000f73 arg_parse
     /tmp/ccHjsdow.s:1846   .text:00000000000010d4 arg_cat
     /tmp/ccHjsdow.s:1950   .text:000000000000117c arg_cat_option
     /tmp/ccHjsdow.s:2175   .text:00000000000013f7 arg_cat_optionv
     /tmp/ccHjsdow.s:2417   .text:0000000000001657 arg_print_option
     /tmp/ccHjsdow.s:2526   .text:000000000000182a arg_print_gnuswitch
     /tmp/ccHjsdow.s:2796   .text:0000000000001a99 arg_print_syntax
     /tmp/ccHjsdow.s:3095   .text:0000000000001ee6 arg_print_syntaxv
     /tmp/ccHjsdow.s:3359   .text:00000000000022be arg_print_glossary
     /tmp/ccHjsdow.s:3548   .text:00000000000025bc arg_print_formatted
     /tmp/ccHjsdow.s:3742   .text:000000000000274f arg_print_glossary_gnu
     /tmp/ccHjsdow.s:3961   .text:0000000000002ad1 arg_nullcheck
     /tmp/ccHjsdow.s:4029   .text:0000000000002b4e arg_free
     /tmp/ccHjsdow.s:4112   .text:0000000000002bfd arg_freetable

UNDEFINED SYMBOLS
strchr
printf
strlen
malloc
free
_GLOBAL_OFFSET_TABLE_
optind
opterr
optarg
optopt
getopt_long
strcspn
strncat
__stack_chk_fail
fputs
fprintf
__ctype_b_loc
fputc
memset
