   1              		.file	"svf2csvf.c"
   2              		.text
   3              	.Ltext0:
   4              		.file 0 "/home/pong/FPGALink/makestuff/libs/libfpgalink" "svf2csvf.c"
   6              	getHexNibble:
   7              	.LFB4:
   8              		.file 1 "svf2csvf.c"
   1:svf2csvf.c    **** /*
   2:svf2csvf.c    ****  * Copyright (C) 2009-2012 Chris McClelland
   3:svf2csvf.c    ****  *
   4:svf2csvf.c    ****  * This program is free software: you can redistribute it and/or modify
   5:svf2csvf.c    ****  * it under the terms of the GNU Lesser General Public License as published by
   6:svf2csvf.c    ****  * the Free Software Foundation, either version 3 of the License, or
   7:svf2csvf.c    ****  * (at your option) any later version.
   8:svf2csvf.c    ****  *
   9:svf2csvf.c    ****  * This program is distributed in the hope that it will be useful,
  10:svf2csvf.c    ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:svf2csvf.c    ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:svf2csvf.c    ****  * GNU Lesser General Public License for more details.
  13:svf2csvf.c    ****  *
  14:svf2csvf.c    ****  * You should have received a copy of the GNU Lesser General Public License
  15:svf2csvf.c    ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:svf2csvf.c    ****  */
  17:svf2csvf.c    **** #include <stdlib.h>
  18:svf2csvf.c    **** #include <string.h>
  19:svf2csvf.c    **** #include <makestuff.h>
  20:svf2csvf.c    **** #include <libbuffer.h>
  21:svf2csvf.c    **** #include <liberror.h>
  22:svf2csvf.c    **** #include "svf2csvf.h"
  23:svf2csvf.c    **** #include "xsvf.h"
  24:svf2csvf.c    **** #include "private.h"
  25:svf2csvf.c    **** 
  26:svf2csvf.c    **** static FLStatus shiftLeft(
  27:svf2csvf.c    **** 	struct Buffer *buffer, uint32 numBits, uint32 shiftCount, const char **error
  28:svf2csvf.c    **** ) WARN_UNUSED_RESULT;
  29:svf2csvf.c    **** 
  30:svf2csvf.c    **** static FLStatus initBitStore(
  31:svf2csvf.c    **** 	struct BitStore *store, const char **error
  32:svf2csvf.c    **** ) WARN_UNUSED_RESULT;
  33:svf2csvf.c    **** 
  34:svf2csvf.c    **** static FLStatus processLine(
  35:svf2csvf.c    **** 	struct BitStore *store,
  36:svf2csvf.c    **** 	uint32 newLength, const char *tdi, const char *tdo, const char *mask,
  37:svf2csvf.c    **** 	const char **error
  38:svf2csvf.c    **** ) WARN_UNUSED_RESULT;
  39:svf2csvf.c    **** 
  40:svf2csvf.c    **** static FLStatus appendSwapped(
  41:svf2csvf.c    **** 	struct Buffer *buf, const uint8 *src, uint32 count, const char **error
  42:svf2csvf.c    **** ) WARN_UNUSED_RESULT;
  43:svf2csvf.c    **** 
  44:svf2csvf.c    **** static bool getHexNibble(char hexDigit, uint8 *nibble) {
   9              		.loc 1 44 56
  10              		.cfi_startproc
  11 0000 F30F1EFA 		endbr64
  12 0004 55       		pushq	%rbp
  13              		.cfi_def_cfa_offset 16
  14              		.cfi_offset 6, -16
  15 0005 4889E5   		movq	%rsp, %rbp
  16              		.cfi_def_cfa_register 6
  17 0008 89F8     		movl	%edi, %eax
  18 000a 488975F0 		movq	%rsi, -16(%rbp)
  19 000e 8845FC   		movb	%al, -4(%rbp)
  45:svf2csvf.c    **** 	if ( hexDigit >= '0' && hexDigit <= '9' ) {
  20              		.loc 1 45 5
  21 0011 807DFC2F 		cmpb	$47, -4(%rbp)
  22 0015 7E1A     		jle	.L2
  23              		.loc 1 45 23 discriminator 1
  24 0017 807DFC39 		cmpb	$57, -4(%rbp)
  25 001b 7F14     		jg	.L2
  46:svf2csvf.c    **** 		*nibble = (uint8)(hexDigit - '0');
  26              		.loc 1 46 13
  27 001d 0FB645FC 		movzbl	-4(%rbp), %eax
  28 0021 8D50D0   		leal	-48(%rax), %edx
  29              		.loc 1 46 11
  30 0024 488B45F0 		movq	-16(%rbp), %rax
  31 0028 8810     		movb	%dl, (%rax)
  47:svf2csvf.c    **** 		return false;
  32              		.loc 1 47 10
  33 002a B8000000 		movl	$0, %eax
  33      00
  34 002f EB45     		jmp	.L3
  35              	.L2:
  48:svf2csvf.c    **** 	} else if ( hexDigit >= 'a' && hexDigit <= 'f' ) {
  36              		.loc 1 48 12
  37 0031 807DFC60 		cmpb	$96, -4(%rbp)
  38 0035 7E1A     		jle	.L4
  39              		.loc 1 48 30 discriminator 1
  40 0037 807DFC66 		cmpb	$102, -4(%rbp)
  41 003b 7F14     		jg	.L4
  49:svf2csvf.c    **** 		*nibble = (uint8)(hexDigit - 'a' + 10);
  42              		.loc 1 49 13
  43 003d 0FB645FC 		movzbl	-4(%rbp), %eax
  44 0041 8D50A9   		leal	-87(%rax), %edx
  45              		.loc 1 49 11
  46 0044 488B45F0 		movq	-16(%rbp), %rax
  47 0048 8810     		movb	%dl, (%rax)
  50:svf2csvf.c    **** 		return false;
  48              		.loc 1 50 10
  49 004a B8000000 		movl	$0, %eax
  49      00
  50 004f EB25     		jmp	.L3
  51              	.L4:
  51:svf2csvf.c    **** 	} else if ( hexDigit >= 'A' && hexDigit <= 'F' ) {
  52              		.loc 1 51 12
  53 0051 807DFC40 		cmpb	$64, -4(%rbp)
  54 0055 7E1A     		jle	.L5
  55              		.loc 1 51 30 discriminator 1
  56 0057 807DFC46 		cmpb	$70, -4(%rbp)
  57 005b 7F14     		jg	.L5
  52:svf2csvf.c    **** 		*nibble = (uint8)(hexDigit - 'A' + 10);
  58              		.loc 1 52 13
  59 005d 0FB645FC 		movzbl	-4(%rbp), %eax
  60 0061 8D50C9   		leal	-55(%rax), %edx
  61              		.loc 1 52 11
  62 0064 488B45F0 		movq	-16(%rbp), %rax
  63 0068 8810     		movb	%dl, (%rax)
  53:svf2csvf.c    **** 		return false;
  64              		.loc 1 53 10
  65 006a B8000000 		movl	$0, %eax
  65      00
  66 006f EB05     		jmp	.L3
  67              	.L5:
  54:svf2csvf.c    **** 	} else {
  55:svf2csvf.c    **** 		return true;
  68              		.loc 1 55 10
  69 0071 B8010000 		movl	$1, %eax
  69      00
  70              	.L3:
  56:svf2csvf.c    **** 	}
  57:svf2csvf.c    **** }
  71              		.loc 1 57 1
  72 0076 5D       		popq	%rbp
  73              		.cfi_def_cfa 7, 8
  74 0077 C3       		ret
  75              		.cfi_endproc
  76              	.LFE4:
  79              	getHexByte:
  80              	.LFB5:
  58:svf2csvf.c    **** 
  59:svf2csvf.c    **** static int getHexByte(const char *p, uint8 *byte) {
  81              		.loc 1 59 51
  82              		.cfi_startproc
  83 0078 F30F1EFA 		endbr64
  84 007c 55       		pushq	%rbp
  85              		.cfi_def_cfa_offset 16
  86              		.cfi_offset 6, -16
  87 007d 4889E5   		movq	%rsp, %rbp
  88              		.cfi_def_cfa_register 6
  89 0080 4883EC20 		subq	$32, %rsp
  90 0084 48897DE8 		movq	%rdi, -24(%rbp)
  91 0088 488975E0 		movq	%rsi, -32(%rbp)
  92              		.loc 1 59 51
  93 008c 64488B04 		movq	%fs:40, %rax
  93      25280000 
  93      00
  94 0095 488945F8 		movq	%rax, -8(%rbp)
  95 0099 31C0     		xorl	%eax, %eax
  60:svf2csvf.c    **** 	uint8 upperNibble;
  61:svf2csvf.c    **** 	uint8 lowerNibble;
  62:svf2csvf.c    **** 	if ( !getHexNibble(p[0], &upperNibble) && !getHexNibble(p[1], &lowerNibble) ) {
  96              		.loc 1 62 22
  97 009b 488B45E8 		movq	-24(%rbp), %rax
  98 009f 0FB600   		movzbl	(%rax), %eax
  99              		.loc 1 62 8
 100 00a2 0FBEC0   		movsbl	%al, %eax
 101 00a5 488D55F6 		leaq	-10(%rbp), %rdx
 102 00a9 4889D6   		movq	%rdx, %rsi
 103 00ac 89C7     		movl	%eax, %edi
 104 00ae E84DFFFF 		call	getHexNibble
 104      FF
 105              		.loc 1 62 7
 106 00b3 83F001   		xorl	$1, %eax
 107              		.loc 1 62 5
 108 00b6 84C0     		testb	%al, %al
 109 00b8 7449     		je	.L7
 110              		.loc 1 62 59 discriminator 1
 111 00ba 488B45E8 		movq	-24(%rbp), %rax
 112 00be 4883C001 		addq	$1, %rax
 113 00c2 0FB600   		movzbl	(%rax), %eax
 114              		.loc 1 62 45 discriminator 1
 115 00c5 0FBEC0   		movsbl	%al, %eax
 116 00c8 488D55F7 		leaq	-9(%rbp), %rdx
 117 00cc 4889D6   		movq	%rdx, %rsi
 118 00cf 89C7     		movl	%eax, %edi
 119 00d1 E82AFFFF 		call	getHexNibble
 119      FF
 120              		.loc 1 62 44 discriminator 1
 121 00d6 83F001   		xorl	$1, %eax
 122              		.loc 1 62 41 discriminator 1
 123 00d9 84C0     		testb	%al, %al
 124 00db 7426     		je	.L7
  63:svf2csvf.c    **** 		*byte = (uint8)((upperNibble << 4) | lowerNibble);
 125              		.loc 1 63 32
 126 00dd 0FB645F6 		movzbl	-10(%rbp), %eax
 127 00e1 0FB6C0   		movzbl	%al, %eax
 128 00e4 C1E004   		sall	$4, %eax
 129              		.loc 1 63 38
 130 00e7 89C2     		movl	%eax, %edx
 131 00e9 0FB645F7 		movzbl	-9(%rbp), %eax
 132 00ed 09D0     		orl	%edx, %eax
 133              		.loc 1 63 11
 134 00ef 89C2     		movl	%eax, %edx
 135              		.loc 1 63 9
 136 00f1 488B45E0 		movq	-32(%rbp), %rax
 137 00f5 8810     		movb	%dl, (%rax)
  64:svf2csvf.c    **** 		byte += 2;
 138              		.loc 1 64 8
 139 00f7 488345E0 		addq	$2, -32(%rbp)
 139      02
  65:svf2csvf.c    **** 		return 0;
 140              		.loc 1 65 10
 141 00fc B8000000 		movl	$0, %eax
 141      00
 142 0101 EB05     		jmp	.L9
 143              	.L7:
  66:svf2csvf.c    **** 	} else {
  67:svf2csvf.c    **** 		return 1;
 144              		.loc 1 67 10
 145 0103 B8010000 		movl	$1, %eax
 145      00
 146              	.L9:
  68:svf2csvf.c    **** 	}
  69:svf2csvf.c    **** }
 147              		.loc 1 69 1 discriminator 1
 148 0108 488B55F8 		movq	-8(%rbp), %rdx
 149 010c 64482B14 		subq	%fs:40, %rdx
 149      25280000 
 149      00
 150 0115 7405     		je	.L10
 151              		.loc 1 69 1 is_stmt 0
 152 0117 E8000000 		call	__stack_chk_fail@PLT
 152      00
 153              	.L10:
 154 011c C9       		leave
 155              		.cfi_def_cfa 7, 8
 156 011d C3       		ret
 157              		.cfi_endproc
 158              	.LFE5:
 160              		.globl	readLongBE
 162              	readLongBE:
 163              	.LFB6:
  70:svf2csvf.c    **** 
  71:svf2csvf.c    **** uint32 readLongBE(const uint8 *p) {
 164              		.loc 1 71 35 is_stmt 1
 165              		.cfi_startproc
 166 011e F30F1EFA 		endbr64
 167 0122 55       		pushq	%rbp
 168              		.cfi_def_cfa_offset 16
 169              		.cfi_offset 6, -16
 170 0123 4889E5   		movq	%rsp, %rbp
 171              		.cfi_def_cfa_register 6
 172 0126 48897DE8 		movq	%rdi, -24(%rbp)
  72:svf2csvf.c    **** 	uint32 result;
  73:svf2csvf.c    **** 	result = p[0];
 173              		.loc 1 73 12
 174 012a 488B45E8 		movq	-24(%rbp), %rax
 175 012e 0FB600   		movzbl	(%rax), %eax
 176              		.loc 1 73 9
 177 0131 0FB6C0   		movzbl	%al, %eax
 178 0134 8945FC   		movl	%eax, -4(%rbp)
  74:svf2csvf.c    **** 	result <<= 8;
 179              		.loc 1 74 9
 180 0137 C165FC08 		sall	$8, -4(%rbp)
  75:svf2csvf.c    **** 	result |= p[1];
 181              		.loc 1 75 13
 182 013b 488B45E8 		movq	-24(%rbp), %rax
 183 013f 4883C001 		addq	$1, %rax
 184 0143 0FB600   		movzbl	(%rax), %eax
 185 0146 0FB6C0   		movzbl	%al, %eax
 186              		.loc 1 75 9
 187 0149 0945FC   		orl	%eax, -4(%rbp)
  76:svf2csvf.c    **** 	result <<= 8;
 188              		.loc 1 76 9
 189 014c C165FC08 		sall	$8, -4(%rbp)
  77:svf2csvf.c    **** 	result |= p[2];
 190              		.loc 1 77 13
 191 0150 488B45E8 		movq	-24(%rbp), %rax
 192 0154 4883C002 		addq	$2, %rax
 193 0158 0FB600   		movzbl	(%rax), %eax
 194 015b 0FB6C0   		movzbl	%al, %eax
 195              		.loc 1 77 9
 196 015e 0945FC   		orl	%eax, -4(%rbp)
  78:svf2csvf.c    **** 	result <<= 8;
 197              		.loc 1 78 9
 198 0161 C165FC08 		sall	$8, -4(%rbp)
  79:svf2csvf.c    **** 	result |= p[3];
 199              		.loc 1 79 13
 200 0165 488B45E8 		movq	-24(%rbp), %rax
 201 0169 4883C003 		addq	$3, %rax
 202 016d 0FB600   		movzbl	(%rax), %eax
 203 0170 0FB6C0   		movzbl	%al, %eax
 204              		.loc 1 79 9
 205 0173 0945FC   		orl	%eax, -4(%rbp)
  80:svf2csvf.c    **** 	return result;
 206              		.loc 1 80 9
 207 0176 8B45FC   		movl	-4(%rbp), %eax
  81:svf2csvf.c    **** }
 208              		.loc 1 81 1
 209 0179 5D       		popq	%rbp
 210              		.cfi_def_cfa 7, 8
 211 017a C3       		ret
 212              		.cfi_endproc
 213              	.LFE6:
 215              		.section	.rodata
 216              		.align 8
 217              	.LC0:
 218 0000 72656164 		.string	"readBytes(): I need an even number of hex digits"
 218      42797465 
 218      7328293A 
 218      2049206E 
 218      65656420 
 219              	.LC1:
 220 0031 72656164 		.string	"readBytes()"
 220      42797465 
 220      73282900 
 221              		.text
 222              		.globl	readBytes
 224              	readBytes:
 225              	.LFB7:
  82:svf2csvf.c    **** 
  83:svf2csvf.c    **** FLStatus readBytes(
  84:svf2csvf.c    **** 	struct Buffer *buffer, const char *hexDigits, const char **error)
  85:svf2csvf.c    **** {
 226              		.loc 1 85 1
 227              		.cfi_startproc
 228 017b F30F1EFA 		endbr64
 229 017f 55       		pushq	%rbp
 230              		.cfi_def_cfa_offset 16
 231              		.cfi_offset 6, -16
 232 0180 4889E5   		movq	%rsp, %rbp
 233              		.cfi_def_cfa_register 6
 234 0183 4883EC40 		subq	$64, %rsp
 235 0187 48897DD8 		movq	%rdi, -40(%rbp)
 236 018b 488975D0 		movq	%rsi, -48(%rbp)
 237 018f 488955C8 		movq	%rdx, -56(%rbp)
  86:svf2csvf.c    **** 	FLStatus retVal = FL_SUCCESS;
 238              		.loc 1 86 11
 239 0193 C745EC00 		movl	$0, -20(%rbp)
 239      000000
  87:svf2csvf.c    **** 	uint32 length = (uint32)strlen(hexDigits);
 240              		.loc 1 87 26
 241 019a 488B45D0 		movq	-48(%rbp), %rax
 242 019e 4889C7   		movq	%rax, %rdi
 243 01a1 E8000000 		call	strlen@PLT
 243      00
 244              		.loc 1 87 9
 245 01a6 8945F0   		movl	%eax, -16(%rbp)
  88:svf2csvf.c    **** 	uint8 *p = buffer->data;
 246              		.loc 1 88 9
 247 01a9 488B45D8 		movq	-40(%rbp), %rax
 248 01ad 488B00   		movq	(%rax), %rax
 249 01b0 488945F8 		movq	%rax, -8(%rbp)
  89:svf2csvf.c    **** 	BufferStatus bStatus;
  90:svf2csvf.c    **** 	CHECK_STATUS(
 250              		.loc 1 90 2
 251 01b4 8B45F0   		movl	-16(%rbp), %eax
 252 01b7 83E001   		andl	$1, %eax
 253 01ba 85C0     		testl	%eax, %eax
 254 01bc 7422     		je	.L14
 255              		.loc 1 90 2 is_stmt 0 discriminator 1
 256 01be 488B45C8 		movq	-56(%rbp), %rax
 257 01c2 488D1500 		leaq	.LC0(%rip), %rdx
 257      000000
 258 01c9 4889D6   		movq	%rdx, %rsi
 259 01cc 4889C7   		movq	%rax, %rdi
 260 01cf E8000000 		call	errPrefix@PLT
 260      00
 261 01d4 C745EC0A 		movl	$10, -20(%rbp)
 261      000000
 262 01db E9A00000 		jmp	.L15
 262      00
 263              	.L14:
  91:svf2csvf.c    **** 		length & 1, FL_SVF_PARSE_ERR, cleanup,
  92:svf2csvf.c    **** 		"readBytes(): I need an even number of hex digits");
  93:svf2csvf.c    **** 	bufZeroLength(buffer);
 264              		.loc 1 93 2 is_stmt 1
 265 01e0 488B45D8 		movq	-40(%rbp), %rax
 266 01e4 4889C7   		movq	%rax, %rdi
 267 01e7 E8000000 		call	bufZeroLength@PLT
 267      00
  94:svf2csvf.c    **** 	length >>= 1;  // Number of bytes
 268              		.loc 1 94 9
 269 01ec D16DF0   		shrl	-16(%rbp)
  95:svf2csvf.c    **** 	bStatus = bufAppendConst(buffer, 0x00, length, error);
 270              		.loc 1 95 12
 271 01ef 8B55F0   		movl	-16(%rbp), %edx
 272 01f2 488B4DC8 		movq	-56(%rbp), %rcx
 273 01f6 488B45D8 		movq	-40(%rbp), %rax
 274 01fa BE000000 		movl	$0, %esi
 274      00
 275 01ff 4889C7   		movq	%rax, %rdi
 276 0202 E8000000 		call	bufAppendConst@PLT
 276      00
 277 0207 8945F4   		movl	%eax, -12(%rbp)
  96:svf2csvf.c    **** 	CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "readBytes()");
 278              		.loc 1 96 2
 279 020a 837DF400 		cmpl	$0, -12(%rbp)
 280 020e 7462     		je	.L17
 281              		.loc 1 96 2 is_stmt 0 discriminator 1
 282 0210 488B45C8 		movq	-56(%rbp), %rax
 283 0214 488D1500 		leaq	.LC1(%rip), %rdx
 283      000000
 284 021b 4889D6   		movq	%rdx, %rsi
 285 021e 4889C7   		movq	%rax, %rdi
 286 0221 E8000000 		call	errPrefix@PLT
 286      00
 287 0226 C745EC01 		movl	$1, -20(%rbp)
 287      000000
 288 022d EB51     		jmp	.L15
 289              	.L19:
  97:svf2csvf.c    **** 	while ( length-- ) {
  98:svf2csvf.c    **** 		CHECK_STATUS(getHexByte(hexDigits, p++), FL_SVF_PARSE_ERR, cleanup, "readBytes()");
 290              		.loc 1 98 3 is_stmt 1
 291 022f 488B45F8 		movq	-8(%rbp), %rax
 292 0233 488D5001 		leaq	1(%rax), %rdx
 293 0237 488955F8 		movq	%rdx, -8(%rbp)
 294 023b 488B55D0 		movq	-48(%rbp), %rdx
 295 023f 4889C6   		movq	%rax, %rsi
 296 0242 4889D7   		movq	%rdx, %rdi
 297 0245 E82EFEFF 		call	getHexByte
 297      FF
 298 024a 85C0     		testl	%eax, %eax
 299 024c 741F     		je	.L18
 300              		.loc 1 98 3 is_stmt 0 discriminator 1
 301 024e 488B45C8 		movq	-56(%rbp), %rax
 302 0252 488D1500 		leaq	.LC1(%rip), %rdx
 302      000000
 303 0259 4889D6   		movq	%rdx, %rsi
 304 025c 4889C7   		movq	%rax, %rdi
 305 025f E8000000 		call	errPrefix@PLT
 305      00
 306 0264 C745EC0A 		movl	$10, -20(%rbp)
 306      000000
 307 026b EB13     		jmp	.L15
 308              	.L18:
  99:svf2csvf.c    **** 		hexDigits += 2;
 309              		.loc 1 99 13 is_stmt 1
 310 026d 488345D0 		addq	$2, -48(%rbp)
 310      02
 311              	.L17:
  97:svf2csvf.c    **** 	while ( length-- ) {
 312              		.loc 1 97 16
 313 0272 8B45F0   		movl	-16(%rbp), %eax
 314 0275 8D50FF   		leal	-1(%rax), %edx
 315 0278 8955F0   		movl	%edx, -16(%rbp)
  97:svf2csvf.c    **** 	while ( length-- ) {
 316              		.loc 1 97 10
 317 027b 85C0     		testl	%eax, %eax
 318 027d 75B0     		jne	.L19
 100:svf2csvf.c    **** 	}
 101:svf2csvf.c    **** cleanup:
 319              		.loc 1 101 1
 320 027f 90       		nop
 321              	.L15:
 102:svf2csvf.c    **** 	return retVal;
 322              		.loc 1 102 9
 323 0280 8B45EC   		movl	-20(%rbp), %eax
 103:svf2csvf.c    **** }
 324              		.loc 1 103 1
 325 0283 C9       		leave
 326              		.cfi_def_cfa 7, 8
 327 0284 C3       		ret
 328              		.cfi_endproc
 329              	.LFE7:
 331              		.section	.rodata
 332              	.LC2:
 333 003d 73686966 		.string	"shiftLeft()"
 333      744C6566 
 333      74282900 
 334              		.text
 336              	shiftLeft:
 337              	.LFB8:
 104:svf2csvf.c    **** 
 105:svf2csvf.c    **** static FLStatus shiftLeft(
 106:svf2csvf.c    **** 	struct Buffer *buffer, uint32 numBits, uint32 shiftCount, const char **error)
 107:svf2csvf.c    **** {
 338              		.loc 1 107 1
 339              		.cfi_startproc
 340 0285 F30F1EFA 		endbr64
 341 0289 55       		pushq	%rbp
 342              		.cfi_def_cfa_offset 16
 343              		.cfi_offset 6, -16
 344 028a 4889E5   		movq	%rsp, %rbp
 345              		.cfi_def_cfa_register 6
 346 028d 4883C480 		addq	$-128, %rsp
 347 0291 48897D98 		movq	%rdi, -104(%rbp)
 348 0295 897594   		movl	%esi, -108(%rbp)
 349 0298 895590   		movl	%edx, -112(%rbp)
 350 029b 48894D88 		movq	%rcx, -120(%rbp)
 351              		.loc 1 107 1
 352 029f 64488B04 		movq	%fs:40, %rax
 352      25280000 
 352      00
 353 02a8 488945F8 		movq	%rax, -8(%rbp)
 354 02ac 31C0     		xorl	%eax, %eax
 108:svf2csvf.c    **** 	FLStatus retVal = FL_SUCCESS;
 355              		.loc 1 108 11
 356 02ae C745B000 		movl	$0, -80(%rbp)
 356      000000
 109:svf2csvf.c    **** 	uint32 shiftBytes = shiftCount>>3;
 357              		.loc 1 109 9
 358 02b5 8B4590   		movl	-112(%rbp), %eax
 359 02b8 C1E803   		shrl	$3, %eax
 360 02bb 8945B4   		movl	%eax, -76(%rbp)
 110:svf2csvf.c    **** 	uint32 shiftBits = shiftCount&7;
 361              		.loc 1 110 9
 362 02be 8B4590   		movl	-112(%rbp), %eax
 363 02c1 83E007   		andl	$7, %eax
 364 02c4 8945B8   		movl	%eax, -72(%rbp)
 111:svf2csvf.c    **** 	uint16 accum;
 112:svf2csvf.c    **** 	const uint8 *p = buffer->data;
 365              		.loc 1 112 15
 366 02c7 488B4598 		movq	-104(%rbp), %rax
 367 02cb 488B00   		movq	(%rax), %rax
 368 02ce 488945C0 		movq	%rax, -64(%rbp)
 113:svf2csvf.c    **** 	const uint8 *const end = buffer->data + buffer->length;
 369              		.loc 1 113 33
 370 02d2 488B4598 		movq	-104(%rbp), %rax
 371 02d6 488B10   		movq	(%rax), %rdx
 372              		.loc 1 113 48
 373 02d9 488B4598 		movq	-104(%rbp), %rax
 374 02dd 488B4008 		movq	8(%rax), %rax
 375              		.loc 1 113 21
 376 02e1 4801D0   		addq	%rdx, %rax
 377 02e4 488945C8 		movq	%rax, -56(%rbp)
 114:svf2csvf.c    **** 	struct Buffer newBuffer = {0,};
 378              		.loc 1 114 16
 379 02e8 48C745D0 		movq	$0, -48(%rbp)
 379      00000000 
 380 02f0 48C745D8 		movq	$0, -40(%rbp)
 380      00000000 
 381 02f8 48C745E0 		movq	$0, -32(%rbp)
 381      00000000 
 382 0300 48C745E8 		movq	$0, -24(%rbp)
 382      00000000 
 115:svf2csvf.c    **** 	BufferStatus bStatus;
 116:svf2csvf.c    **** 	if ( shiftBits ) {
 383              		.loc 1 116 5
 384 0308 837DB800 		cmpl	$0, -72(%rbp)
 385 030c 0F840802 		je	.L22
 385      0000
 117:svf2csvf.c    **** 		bStatus = bufInitialise(&newBuffer, 1024, 0x00, error);
 386              		.loc 1 117 13
 387 0312 488B5588 		movq	-120(%rbp), %rdx
 388 0316 488D45D0 		leaq	-48(%rbp), %rax
 389 031a 4889D1   		movq	%rdx, %rcx
 390 031d BA000000 		movl	$0, %edx
 390      00
 391 0322 BE000400 		movl	$1024, %esi
 391      00
 392 0327 4889C7   		movq	%rax, %rdi
 393 032a E8000000 		call	bufInitialise@PLT
 393      00
 394 032f 8945BC   		movl	%eax, -68(%rbp)
 118:svf2csvf.c    **** 		CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "shiftLeft()");
 395              		.loc 1 118 3
 396 0332 837DBC00 		cmpl	$0, -68(%rbp)
 397 0336 7422     		je	.L23
 398              		.loc 1 118 3 is_stmt 0 discriminator 1
 399 0338 488B4588 		movq	-120(%rbp), %rax
 400 033c 488D1500 		leaq	.LC2(%rip), %rdx
 400      000000
 401 0343 4889D6   		movq	%rdx, %rsi
 402 0346 4889C7   		movq	%rax, %rdi
 403 0349 E8000000 		call	errPrefix@PLT
 403      00
 404 034e C745B001 		movl	$1, -80(%rbp)
 404      000000
 405 0355 E9070200 		jmp	.L24
 405      00
 406              	.L23:
 119:svf2csvf.c    **** 		numBits &= 7;  // Now the number of significant bits in first byte.
 407              		.loc 1 119 11 is_stmt 1
 408 035a 83659407 		andl	$7, -108(%rbp)
 120:svf2csvf.c    **** 		if ( numBits ) {
 409              		.loc 1 120 6
 410 035e 837D9400 		cmpl	$0, -108(%rbp)
 411 0362 740B     		je	.L25
 121:svf2csvf.c    **** 			numBits = 8 - numBits; // Now the number of insignificant bits in first byte.
 412              		.loc 1 121 12
 413 0364 B8080000 		movl	$8, %eax
 413      00
 414 0369 2B4594   		subl	-108(%rbp), %eax
 415 036c 894594   		movl	%eax, -108(%rbp)
 416              	.L25:
 122:svf2csvf.c    **** 		}
 123:svf2csvf.c    **** 		accum = p[0];
 417              		.loc 1 123 12
 418 036f 488B45C0 		movq	-64(%rbp), %rax
 419 0373 0FB600   		movzbl	(%rax), %eax
 420              		.loc 1 123 9
 421 0376 0FB6C0   		movzbl	%al, %eax
 422 0379 668945AE 		movw	%ax, -82(%rbp)
 124:svf2csvf.c    **** 		if ( p < end ) {
 423              		.loc 1 124 6
 424 037d 488B45C0 		movq	-64(%rbp), %rax
 425 0381 483B45C8 		cmpq	-56(%rbp), %rax
 426 0385 0F831F01 		jnb	.L26
 426      0000
 125:svf2csvf.c    **** 			accum = (uint16)(accum >> (8-shiftBits));
 427              		.loc 1 125 27
 428 038b 0FB755AE 		movzwl	-82(%rbp), %edx
 429              		.loc 1 125 32
 430 038f B8080000 		movl	$8, %eax
 430      00
 431 0394 2B45B8   		subl	-72(%rbp), %eax
 432              		.loc 1 125 27
 433 0397 89C1     		movl	%eax, %ecx
 434 0399 D3FA     		sarl	%cl, %edx
 435 039b 89D0     		movl	%edx, %eax
 436              		.loc 1 125 10
 437 039d 668945AE 		movw	%ax, -82(%rbp)
 126:svf2csvf.c    **** 			if ( shiftBits > numBits ) {
 438              		.loc 1 126 7
 439 03a1 8B45B8   		movl	-72(%rbp), %eax
 440 03a4 3B4594   		cmpl	-108(%rbp), %eax
 441 03a7 7644     		jbe	.L27
 127:svf2csvf.c    **** 				// We're shifting by more than the number of insignificant bits
 128:svf2csvf.c    **** 				bStatus = bufAppendByte(&newBuffer, (uint8)(accum&0xFF), error);
 442              		.loc 1 128 41
 443 03a9 0FB745AE 		movzwl	-82(%rbp), %eax
 444              		.loc 1 128 15
 445 03ad 0FB6C8   		movzbl	%al, %ecx
 446 03b0 488B5588 		movq	-120(%rbp), %rdx
 447 03b4 488D45D0 		leaq	-48(%rbp), %rax
 448 03b8 89CE     		movl	%ecx, %esi
 449 03ba 4889C7   		movq	%rax, %rdi
 450 03bd E8000000 		call	bufAppendByte@PLT
 450      00
 451 03c2 8945BC   		movl	%eax, -68(%rbp)
 129:svf2csvf.c    **** 				CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "shiftLeft()");
 452              		.loc 1 129 5
 453 03c5 837DBC00 		cmpl	$0, -68(%rbp)
 454 03c9 7422     		je	.L27
 455              		.loc 1 129 5 is_stmt 0 discriminator 1
 456 03cb 488B4588 		movq	-120(%rbp), %rax
 457 03cf 488D1500 		leaq	.LC2(%rip), %rdx
 457      000000
 458 03d6 4889D6   		movq	%rdx, %rsi
 459 03d9 4889C7   		movq	%rax, %rdi
 460 03dc E8000000 		call	errPrefix@PLT
 460      00
 461 03e1 C745B001 		movl	$1, -80(%rbp)
 461      000000
 462 03e8 E9740100 		jmp	.L24
 462      00
 463              	.L27:
 130:svf2csvf.c    **** 			}
 131:svf2csvf.c    **** 			accum = (uint16)((p[0]<<8) + p[1]);
 464              		.loc 1 131 23 is_stmt 1
 465 03ed 488B45C0 		movq	-64(%rbp), %rax
 466 03f1 0FB600   		movzbl	(%rax), %eax
 467 03f4 0FB6C0   		movzbl	%al, %eax
 468              		.loc 1 131 26
 469 03f7 C1E008   		sall	$8, %eax
 470 03fa 89C2     		movl	%eax, %edx
 471              		.loc 1 131 34
 472 03fc 488B45C0 		movq	-64(%rbp), %rax
 473 0400 4883C001 		addq	$1, %rax
 474 0404 0FB600   		movzbl	(%rax), %eax
 475 0407 0FB6C0   		movzbl	%al, %eax
 476              		.loc 1 131 10
 477 040a 01D0     		addl	%edx, %eax
 478 040c 668945AE 		movw	%ax, -82(%rbp)
 132:svf2csvf.c    **** 			p++;
 479              		.loc 1 132 5
 480 0410 488345C0 		addq	$1, -64(%rbp)
 480      01
 133:svf2csvf.c    **** 			while ( p < end ) {
 481              		.loc 1 133 10
 482 0415 E9820000 		jmp	.L28
 482      00
 483              	.L30:
 134:svf2csvf.c    **** 				accum = (uint16)(accum >> (8-shiftBits));
 484              		.loc 1 134 28
 485 041a 0FB755AE 		movzwl	-82(%rbp), %edx
 486              		.loc 1 134 33
 487 041e B8080000 		movl	$8, %eax
 487      00
 488 0423 2B45B8   		subl	-72(%rbp), %eax
 489              		.loc 1 134 28
 490 0426 89C1     		movl	%eax, %ecx
 491 0428 D3FA     		sarl	%cl, %edx
 492 042a 89D0     		movl	%edx, %eax
 493              		.loc 1 134 11
 494 042c 668945AE 		movw	%ax, -82(%rbp)
 135:svf2csvf.c    **** 				bStatus = bufAppendByte(&newBuffer, (uint8)(accum&0xFF), error);
 495              		.loc 1 135 41
 496 0430 0FB745AE 		movzwl	-82(%rbp), %eax
 497              		.loc 1 135 15
 498 0434 0FB6C8   		movzbl	%al, %ecx
 499 0437 488B5588 		movq	-120(%rbp), %rdx
 500 043b 488D45D0 		leaq	-48(%rbp), %rax
 501 043f 89CE     		movl	%ecx, %esi
 502 0441 4889C7   		movq	%rax, %rdi
 503 0444 E8000000 		call	bufAppendByte@PLT
 503      00
 504 0449 8945BC   		movl	%eax, -68(%rbp)
 136:svf2csvf.c    **** 				CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "shiftLeft()");
 505              		.loc 1 136 5
 506 044c 837DBC00 		cmpl	$0, -68(%rbp)
 507 0450 7422     		je	.L29
 508              		.loc 1 136 5 is_stmt 0 discriminator 1
 509 0452 488B4588 		movq	-120(%rbp), %rax
 510 0456 488D1500 		leaq	.LC2(%rip), %rdx
 510      000000
 511 045d 4889D6   		movq	%rdx, %rsi
 512 0460 4889C7   		movq	%rax, %rdi
 513 0463 E8000000 		call	errPrefix@PLT
 513      00
 514 0468 C745B001 		movl	$1, -80(%rbp)
 514      000000
 515 046f E9ED0000 		jmp	.L24
 515      00
 516              	.L29:
 137:svf2csvf.c    **** 				accum = (uint16)((p[0]<<8) + p[1]);
 517              		.loc 1 137 24 is_stmt 1
 518 0474 488B45C0 		movq	-64(%rbp), %rax
 519 0478 0FB600   		movzbl	(%rax), %eax
 520 047b 0FB6C0   		movzbl	%al, %eax
 521              		.loc 1 137 27
 522 047e C1E008   		sall	$8, %eax
 523 0481 89C2     		movl	%eax, %edx
 524              		.loc 1 137 35
 525 0483 488B45C0 		movq	-64(%rbp), %rax
 526 0487 4883C001 		addq	$1, %rax
 527 048b 0FB600   		movzbl	(%rax), %eax
 528 048e 0FB6C0   		movzbl	%al, %eax
 529              		.loc 1 137 11
 530 0491 01D0     		addl	%edx, %eax
 531 0493 668945AE 		movw	%ax, -82(%rbp)
 138:svf2csvf.c    **** 				p++;
 532              		.loc 1 138 6
 533 0497 488345C0 		addq	$1, -64(%rbp)
 533      01
 534              	.L28:
 133:svf2csvf.c    **** 				accum = (uint16)(accum >> (8-shiftBits));
 535              		.loc 1 133 14
 536 049c 488B45C0 		movq	-64(%rbp), %rax
 537 04a0 483B45C8 		cmpq	-56(%rbp), %rax
 538 04a4 0F8270FF 		jb	.L30
 538      FFFF
 539              	.L26:
 139:svf2csvf.c    **** 			}
 140:svf2csvf.c    **** 		}
 141:svf2csvf.c    **** 		accum &= 0xFF00;
 540              		.loc 1 141 9
 541 04aa 668165AE 		andw	$-256, -82(%rbp)
 541      00FF
 142:svf2csvf.c    **** 		accum = (uint16)(accum >> (8-shiftBits));
 542              		.loc 1 142 26
 543 04b0 0FB755AE 		movzwl	-82(%rbp), %edx
 544              		.loc 1 142 31
 545 04b4 B8080000 		movl	$8, %eax
 545      00
 546 04b9 2B45B8   		subl	-72(%rbp), %eax
 547              		.loc 1 142 26
 548 04bc 89C1     		movl	%eax, %ecx
 549 04be D3FA     		sarl	%cl, %edx
 550 04c0 89D0     		movl	%edx, %eax
 551              		.loc 1 142 9
 552 04c2 668945AE 		movw	%ax, -82(%rbp)
 143:svf2csvf.c    **** 		bStatus = bufAppendByte(&newBuffer, (uint8)(accum&0xFF), error);
 553              		.loc 1 143 39
 554 04c6 0FB745AE 		movzwl	-82(%rbp), %eax
 555              		.loc 1 143 13
 556 04ca 0FB6C8   		movzbl	%al, %ecx
 557 04cd 488B5588 		movq	-120(%rbp), %rdx
 558 04d1 488D45D0 		leaq	-48(%rbp), %rax
 559 04d5 89CE     		movl	%ecx, %esi
 560 04d7 4889C7   		movq	%rax, %rdi
 561 04da E8000000 		call	bufAppendByte@PLT
 561      00
 562 04df 8945BC   		movl	%eax, -68(%rbp)
 144:svf2csvf.c    **** 		CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "shiftLeft()");
 563              		.loc 1 144 3
 564 04e2 837DBC00 		cmpl	$0, -68(%rbp)
 565 04e6 741F     		je	.L31
 566              		.loc 1 144 3 is_stmt 0 discriminator 1
 567 04e8 488B4588 		movq	-120(%rbp), %rax
 568 04ec 488D1500 		leaq	.LC2(%rip), %rdx
 568      000000
 569 04f3 4889D6   		movq	%rdx, %rsi
 570 04f6 4889C7   		movq	%rax, %rdi
 571 04f9 E8000000 		call	errPrefix@PLT
 571      00
 572 04fe C745B001 		movl	$1, -80(%rbp)
 572      000000
 573 0505 EB5A     		jmp	.L24
 574              	.L31:
 145:svf2csvf.c    **** 		bufSwap(&newBuffer, buffer);
 575              		.loc 1 145 3 is_stmt 1
 576 0507 488B5598 		movq	-104(%rbp), %rdx
 577 050b 488D45D0 		leaq	-48(%rbp), %rax
 578 050f 4889D6   		movq	%rdx, %rsi
 579 0512 4889C7   		movq	%rax, %rdi
 580 0515 E8000000 		call	bufSwap@PLT
 580      00
 581              	.L22:
 146:svf2csvf.c    **** 	}
 147:svf2csvf.c    **** 	if ( shiftBytes ) {
 582              		.loc 1 147 5
 583 051a 837DB400 		cmpl	$0, -76(%rbp)
 584 051e 7440     		je	.L34
 148:svf2csvf.c    **** 		bStatus = bufAppendConst(buffer, 0x00, shiftBytes, error);
 585              		.loc 1 148 13
 586 0520 8B55B4   		movl	-76(%rbp), %edx
 587 0523 488B4D88 		movq	-120(%rbp), %rcx
 588 0527 488B4598 		movq	-104(%rbp), %rax
 589 052b BE000000 		movl	$0, %esi
 589      00
 590 0530 4889C7   		movq	%rax, %rdi
 591 0533 E8000000 		call	bufAppendConst@PLT
 591      00
 592 0538 8945BC   		movl	%eax, -68(%rbp)
 149:svf2csvf.c    **** 		CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "shiftLeft()");
 593              		.loc 1 149 3
 594 053b 837DBC00 		cmpl	$0, -68(%rbp)
 595 053f 741F     		je	.L34
 596              		.loc 1 149 3 is_stmt 0 discriminator 1
 597 0541 488B4588 		movq	-120(%rbp), %rax
 598 0545 488D1500 		leaq	.LC2(%rip), %rdx
 598      000000
 599 054c 4889D6   		movq	%rdx, %rsi
 600 054f 4889C7   		movq	%rax, %rdi
 601 0552 E8000000 		call	errPrefix@PLT
 601      00
 602 0557 C745B001 		movl	$1, -80(%rbp)
 602      000000
 603 055e EB01     		jmp	.L24
 604              	.L34:
 150:svf2csvf.c    **** 	}
 151:svf2csvf.c    **** cleanup:
 605              		.loc 1 151 1 is_stmt 1
 606 0560 90       		nop
 607              	.L24:
 152:svf2csvf.c    **** 	bufDestroy(&newBuffer);
 608              		.loc 1 152 2
 609 0561 488D45D0 		leaq	-48(%rbp), %rax
 610 0565 4889C7   		movq	%rax, %rdi
 611 0568 E8000000 		call	bufDestroy@PLT
 611      00
 153:svf2csvf.c    **** 	return retVal;
 612              		.loc 1 153 9
 613 056d 8B45B0   		movl	-80(%rbp), %eax
 154:svf2csvf.c    **** }
 614              		.loc 1 154 1
 615 0570 488B55F8 		movq	-8(%rbp), %rdx
 616 0574 64482B14 		subq	%fs:40, %rdx
 616      25280000 
 616      00
 617 057d 7405     		je	.L33
 618 057f E8000000 		call	__stack_chk_fail@PLT
 618      00
 619              	.L33:
 620 0584 C9       		leave
 621              		.cfi_def_cfa 7, 8
 622 0585 C3       		ret
 623              		.cfi_endproc
 624              	.LFE8:
 626              		.section	.rodata
 627              	.LC3:
 628 0049 68656164 		.string	"headTail()"
 628      5461696C 
 628      282900
 629              	.LC4:
 630 0054 68656164 		.string	"headTail(): Internal error"
 630      5461696C 
 630      28293A20 
 630      496E7465 
 630      726E616C 
 631              		.text
 632              		.globl	headTail
 634              	headTail:
 635              	.LFB9:
 155:svf2csvf.c    **** 
 156:svf2csvf.c    **** FLStatus headTail(
 157:svf2csvf.c    **** 	struct Buffer *dataBuf, struct Buffer *headBuf, struct Buffer *tailBuf,
 158:svf2csvf.c    **** 	uint32 dataBits, uint32 headBits, uint32 tailBits, const char **error)
 159:svf2csvf.c    **** {
 636              		.loc 1 159 1
 637              		.cfi_startproc
 638 0586 F30F1EFA 		endbr64
 639 058a 55       		pushq	%rbp
 640              		.cfi_def_cfa_offset 16
 641              		.cfi_offset 6, -16
 642 058b 4889E5   		movq	%rsp, %rbp
 643              		.cfi_def_cfa_register 6
 644 058e 4881EC90 		subq	$144, %rsp
 644      000000
 645 0595 48897D98 		movq	%rdi, -104(%rbp)
 646 0599 48897590 		movq	%rsi, -112(%rbp)
 647 059d 48895588 		movq	%rdx, -120(%rbp)
 648 05a1 894D84   		movl	%ecx, -124(%rbp)
 649 05a4 44894580 		movl	%r8d, -128(%rbp)
 650 05a8 44898D7C 		movl	%r9d, -132(%rbp)
 650      FFFFFF
 651 05af 488B4510 		movq	16(%rbp), %rax
 652 05b3 48898570 		movq	%rax, -144(%rbp)
 652      FFFFFF
 653              		.loc 1 159 1
 654 05ba 64488B04 		movq	%fs:40, %rax
 654      25280000 
 654      00
 655 05c3 488945F8 		movq	%rax, -8(%rbp)
 656 05c7 31C0     		xorl	%eax, %eax
 160:svf2csvf.c    **** 	FLStatus retVal = FL_SUCCESS, fStatus;
 657              		.loc 1 160 11
 658 05c9 C745A400 		movl	$0, -92(%rbp)
 658      000000
 161:svf2csvf.c    **** 	const uint8 *src = headBuf->data;
 659              		.loc 1 161 15
 660 05d0 488B4590 		movq	-112(%rbp), %rax
 661 05d4 488B00   		movq	(%rax), %rax
 662 05d7 488945B8 		movq	%rax, -72(%rbp)
 162:svf2csvf.c    **** 	const uint8 *dstEnd;
 163:svf2csvf.c    **** 	uint8 *dst;
 164:svf2csvf.c    **** 	struct Buffer newBuffer = {0,};
 663              		.loc 1 164 16
 664 05db 48C745D0 		movq	$0, -48(%rbp)
 664      00000000 
 665 05e3 48C745D8 		movq	$0, -40(%rbp)
 665      00000000 
 666 05eb 48C745E0 		movq	$0, -32(%rbp)
 666      00000000 
 667 05f3 48C745E8 		movq	$0, -24(%rbp)
 667      00000000 
 165:svf2csvf.c    **** 	BufferStatus bStatus;
 166:svf2csvf.c    **** 
 167:svf2csvf.c    **** 	// Shift data left by headBits
 168:svf2csvf.c    **** 	fStatus = shiftLeft(dataBuf, dataBits, headBits, error);
 668              		.loc 1 168 12
 669 05fb 488B8D70 		movq	-144(%rbp), %rcx
 669      FFFFFF
 670 0602 8B5580   		movl	-128(%rbp), %edx
 671 0605 8B7584   		movl	-124(%rbp), %esi
 672 0608 488B4598 		movq	-104(%rbp), %rax
 673 060c 4889C7   		movq	%rax, %rdi
 674 060f E871FCFF 		call	shiftLeft
 674      FF
 675 0614 8945A8   		movl	%eax, -88(%rbp)
 169:svf2csvf.c    **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "headTail()");
 676              		.loc 1 169 2
 677 0617 837DA800 		cmpl	$0, -88(%rbp)
 678 061b 7424     		je	.L36
 679              		.loc 1 169 2 is_stmt 0 discriminator 1
 680 061d 488B8570 		movq	-144(%rbp), %rax
 680      FFFFFF
 681 0624 488D1500 		leaq	.LC3(%rip), %rdx
 681      000000
 682 062b 4889D6   		movq	%rdx, %rsi
 683 062e 4889C7   		movq	%rax, %rdi
 684 0631 E8000000 		call	errPrefix@PLT
 684      00
 685 0636 8B45A8   		movl	-88(%rbp), %eax
 686 0639 8945A4   		movl	%eax, -92(%rbp)
 687 063c E9840300 		jmp	.L37
 687      00
 688              	.L36:
 170:svf2csvf.c    **** 
 171:svf2csvf.c    **** 	//dumpSimple(dataBuf->data, dataBuf->length);
 172:svf2csvf.c    **** 
 173:svf2csvf.c    **** 	// Add headBits to dataBits to get the new total
 174:svf2csvf.c    **** 	dataBits += headBits;
 689              		.loc 1 174 11 is_stmt 1
 690 0641 8B4580   		movl	-128(%rbp), %eax
 691 0644 014584   		addl	%eax, -124(%rbp)
 175:svf2csvf.c    **** 
 176:svf2csvf.c    **** 	// Add header
 177:svf2csvf.c    **** 	dstEnd = dst = dataBuf->data + dataBuf->length;
 692              		.loc 1 177 24
 693 0647 488B4598 		movq	-104(%rbp), %rax
 694 064b 488B10   		movq	(%rax), %rdx
 695              		.loc 1 177 40
 696 064e 488B4598 		movq	-104(%rbp), %rax
 697 0652 488B4008 		movq	8(%rax), %rax
 698              		.loc 1 177 15
 699 0656 4801D0   		addq	%rdx, %rax
 700 0659 488945C0 		movq	%rax, -64(%rbp)
 701              		.loc 1 177 9
 702 065d 488B45C0 		movq	-64(%rbp), %rax
 703 0661 488945C8 		movq	%rax, -56(%rbp)
 178:svf2csvf.c    **** 	dst -= headBuf->length;
 704              		.loc 1 178 16
 705 0665 488B4590 		movq	-112(%rbp), %rax
 706 0669 488B4008 		movq	8(%rax), %rax
 707              		.loc 1 178 6
 708 066d 48F7D8   		negq	%rax
 709 0670 480145C0 		addq	%rax, -64(%rbp)
 179:svf2csvf.c    **** 	while ( dst < dstEnd ) {
 710              		.loc 1 179 8
 711 0674 EB22     		jmp	.L38
 712              	.L39:
 180:svf2csvf.c    **** 		*dst++ |= *src++;
 713              		.loc 1 180 17
 714 0676 488B45B8 		movq	-72(%rbp), %rax
 715 067a 488D5001 		leaq	1(%rax), %rdx
 716 067e 488955B8 		movq	%rdx, -72(%rbp)
 717              		.loc 1 180 13
 718 0682 0FB608   		movzbl	(%rax), %ecx
 719              		.loc 1 180 7
 720 0685 488B45C0 		movq	-64(%rbp), %rax
 721 0689 488D5001 		leaq	1(%rax), %rdx
 722 068d 488955C0 		movq	%rdx, -64(%rbp)
 723              		.loc 1 180 10
 724 0691 0FB610   		movzbl	(%rax), %edx
 725 0694 09CA     		orl	%ecx, %edx
 726 0696 8810     		movb	%dl, (%rax)
 727              	.L38:
 179:svf2csvf.c    **** 	while ( dst < dstEnd ) {
 728              		.loc 1 179 14
 729 0698 488B45C0 		movq	-64(%rbp), %rax
 730 069c 483B45C8 		cmpq	-56(%rbp), %rax
 731 06a0 72D4     		jb	.L39
 181:svf2csvf.c    **** 	}
 182:svf2csvf.c    **** 
 183:svf2csvf.c    **** 	if ( tailBits ) {
 732              		.loc 1 183 5
 733 06a2 83BD7CFF 		cmpl	$0, -132(%rbp)
 733      FFFF00
 734 06a9 0F841503 		je	.L54
 734      0000
 735              	.LBB2:
 184:svf2csvf.c    **** 		uint32 tailShift = dataBits & 7;
 736              		.loc 1 184 10
 737 06af 8B4584   		movl	-124(%rbp), %eax
 738 06b2 83E007   		andl	$7, %eax
 739 06b5 8945AC   		movl	%eax, -84(%rbp)
 185:svf2csvf.c    **** 		uint32 bytesFromTail;
 186:svf2csvf.c    **** 		// Shift the tail to align with the MSB of the data
 187:svf2csvf.c    **** 		if ( tailShift ) {
 740              		.loc 1 187 6
 741 06b8 837DAC00 		cmpl	$0, -84(%rbp)
 742 06bc 7449     		je	.L40
 188:svf2csvf.c    **** 			fStatus = shiftLeft(tailBuf, tailBits, tailShift, error);
 743              		.loc 1 188 14
 744 06be 488B8D70 		movq	-144(%rbp), %rcx
 744      FFFFFF
 745 06c5 8B55AC   		movl	-84(%rbp), %edx
 746 06c8 8BB57CFF 		movl	-132(%rbp), %esi
 746      FFFF
 747 06ce 488B4588 		movq	-120(%rbp), %rax
 748 06d2 4889C7   		movq	%rax, %rdi
 749 06d5 E8ABFBFF 		call	shiftLeft
 749      FF
 750 06da 8945A8   		movl	%eax, -88(%rbp)
 189:svf2csvf.c    **** 			CHECK_STATUS(fStatus, fStatus, cleanup, "headTail()");
 751              		.loc 1 189 4
 752 06dd 837DA800 		cmpl	$0, -88(%rbp)
 753 06e1 7424     		je	.L40
 754              		.loc 1 189 4 is_stmt 0 discriminator 1
 755 06e3 488B8570 		movq	-144(%rbp), %rax
 755      FFFFFF
 756 06ea 488D1500 		leaq	.LC3(%rip), %rdx
 756      000000
 757 06f1 4889D6   		movq	%rdx, %rsi
 758 06f4 4889C7   		movq	%rax, %rdi
 759 06f7 E8000000 		call	errPrefix@PLT
 759      00
 760 06fc 8B45A8   		movl	-88(%rbp), %eax
 761 06ff 8945A4   		movl	%eax, -92(%rbp)
 762 0702 E9BE0200 		jmp	.L37
 762      00
 763              	.L40:
 190:svf2csvf.c    **** 		}
 191:svf2csvf.c    **** 
 192:svf2csvf.c    **** 		// How much data do we need to copy from the tail?
 193:svf2csvf.c    **** 		bytesFromTail = (uint32)tailBuf->length;
 764              		.loc 1 193 34 is_stmt 1
 765 0707 488B4588 		movq	-120(%rbp), %rax
 766 070b 488B4008 		movq	8(%rax), %rax
 767              		.loc 1 193 17
 768 070f 8945B0   		movl	%eax, -80(%rbp)
 194:svf2csvf.c    **** 		src = tailBuf->data;
 769              		.loc 1 194 7
 770 0712 488B4588 		movq	-120(%rbp), %rax
 771 0716 488B00   		movq	(%rax), %rax
 772 0719 488945B8 		movq	%rax, -72(%rbp)
 195:svf2csvf.c    **** 
 196:svf2csvf.c    **** 		// Init new buffer
 197:svf2csvf.c    **** 		bStatus = bufInitialise(&newBuffer, 1024, 0x00, error);
 773              		.loc 1 197 13
 774 071d 488B9570 		movq	-144(%rbp), %rdx
 774      FFFFFF
 775 0724 488D45D0 		leaq	-48(%rbp), %rax
 776 0728 4889D1   		movq	%rdx, %rcx
 777 072b BA000000 		movl	$0, %edx
 777      00
 778 0730 BE000400 		movl	$1024, %esi
 778      00
 779 0735 4889C7   		movq	%rax, %rdi
 780 0738 E8000000 		call	bufInitialise@PLT
 780      00
 781 073d 8945B4   		movl	%eax, -76(%rbp)
 198:svf2csvf.c    **** 		CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "headTail()");
 782              		.loc 1 198 3
 783 0740 837DB400 		cmpl	$0, -76(%rbp)
 784 0744 7425     		je	.L41
 785              		.loc 1 198 3 is_stmt 0 discriminator 1
 786 0746 488B8570 		movq	-144(%rbp), %rax
 786      FFFFFF
 787 074d 488D1500 		leaq	.LC3(%rip), %rdx
 787      000000
 788 0754 4889D6   		movq	%rdx, %rsi
 789 0757 4889C7   		movq	%rax, %rdi
 790 075a E8000000 		call	errPrefix@PLT
 790      00
 791 075f C745A401 		movl	$1, -92(%rbp)
 791      000000
 792 0766 E95A0200 		jmp	.L37
 792      00
 793              	.L41:
 199:svf2csvf.c    **** 
 200:svf2csvf.c    **** 		dataBits += tailBits;
 794              		.loc 1 200 12 is_stmt 1
 795 076b 8B857CFF 		movl	-132(%rbp), %eax
 795      FFFF
 796 0771 014584   		addl	%eax, -124(%rbp)
 201:svf2csvf.c    **** 		if ( bitsToBytes(dataBits) == dataBuf->length + bytesFromTail ) {
 797              		.loc 1 201 8
 798 0774 8B4584   		movl	-124(%rbp), %eax
 799 0777 C1E803   		shrl	$3, %eax
 800 077a 89C2     		movl	%eax, %edx
 801 077c 8B4584   		movl	-124(%rbp), %eax
 802 077f 83E007   		andl	$7, %eax
 803 0782 85C0     		testl	%eax, %eax
 804 0784 7407     		je	.L42
 805              		.loc 1 201 8 is_stmt 0 discriminator 1
 806 0786 B8010000 		movl	$1, %eax
 806      00
 807 078b EB05     		jmp	.L43
 808              	.L42:
 809              		.loc 1 201 8 discriminator 2
 810 078d B8000000 		movl	$0, %eax
 810      00
 811              	.L43:
 812              		.loc 1 201 8 discriminator 4
 813 0792 01D0     		addl	%edx, %eax
 814 0794 89C1     		movl	%eax, %ecx
 815              		.loc 1 201 40 is_stmt 1 discriminator 4
 816 0796 488B4598 		movq	-104(%rbp), %rax
 817 079a 488B5008 		movq	8(%rax), %rdx
 818              		.loc 1 201 49 discriminator 4
 819 079e 8B45B0   		movl	-80(%rbp), %eax
 820 07a1 4801D0   		addq	%rdx, %rax
 821              		.loc 1 201 6 discriminator 4
 822 07a4 4839C1   		cmpq	%rax, %rcx
 823 07a7 0F859C00 		jne	.L44
 823      0000
 202:svf2csvf.c    **** 			// There's no overlap, so copy back-to-back
 203:svf2csvf.c    **** 			bStatus = bufAppendBlock(&newBuffer, src, bytesFromTail, error);
 824              		.loc 1 203 14
 825 07ad 8B55B0   		movl	-80(%rbp), %edx
 826 07b0 488B8D70 		movq	-144(%rbp), %rcx
 826      FFFFFF
 827 07b7 488B75B8 		movq	-72(%rbp), %rsi
 828 07bb 488D45D0 		leaq	-48(%rbp), %rax
 829 07bf 4889C7   		movq	%rax, %rdi
 830 07c2 E8000000 		call	bufAppendBlock@PLT
 830      00
 831 07c7 8945B4   		movl	%eax, -76(%rbp)
 204:svf2csvf.c    **** 			CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "headTail()");
 832              		.loc 1 204 4
 833 07ca 837DB400 		cmpl	$0, -76(%rbp)
 834 07ce 7425     		je	.L45
 835              		.loc 1 204 4 is_stmt 0 discriminator 1
 836 07d0 488B8570 		movq	-144(%rbp), %rax
 836      FFFFFF
 837 07d7 488D1500 		leaq	.LC3(%rip), %rdx
 837      000000
 838 07de 4889D6   		movq	%rdx, %rsi
 839 07e1 4889C7   		movq	%rax, %rdi
 840 07e4 E8000000 		call	errPrefix@PLT
 840      00
 841 07e9 C745A401 		movl	$1, -92(%rbp)
 841      000000
 842 07f0 E9D00100 		jmp	.L37
 842      00
 843              	.L45:
 205:svf2csvf.c    **** 			bStatus = bufAppendByte(&newBuffer, *dataBuf->data, error);
 844              		.loc 1 205 48 is_stmt 1
 845 07f5 488B4598 		movq	-104(%rbp), %rax
 846 07f9 488B00   		movq	(%rax), %rax
 847              		.loc 1 205 40
 848 07fc 0FB600   		movzbl	(%rax), %eax
 849              		.loc 1 205 14
 850 07ff 0FB6C8   		movzbl	%al, %ecx
 851 0802 488B9570 		movq	-144(%rbp), %rdx
 851      FFFFFF
 852 0809 488D45D0 		leaq	-48(%rbp), %rax
 853 080d 89CE     		movl	%ecx, %esi
 854 080f 4889C7   		movq	%rax, %rdi
 855 0812 E8000000 		call	bufAppendByte@PLT
 855      00
 856 0817 8945B4   		movl	%eax, -76(%rbp)
 206:svf2csvf.c    **** 			CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "headTail()");
 857              		.loc 1 206 4
 858 081a 837DB400 		cmpl	$0, -76(%rbp)
 859 081e 0F843001 		je	.L46
 859      0000
 860              		.loc 1 206 4 is_stmt 0 discriminator 1
 861 0824 488B8570 		movq	-144(%rbp), %rax
 861      FFFFFF
 862 082b 488D1500 		leaq	.LC3(%rip), %rdx
 862      000000
 863 0832 4889D6   		movq	%rdx, %rsi
 864 0835 4889C7   		movq	%rax, %rdi
 865 0838 E8000000 		call	errPrefix@PLT
 865      00
 866 083d C745A401 		movl	$1, -92(%rbp)
 866      000000
 867 0844 E97C0100 		jmp	.L37
 867      00
 868              	.L44:
 207:svf2csvf.c    **** 		} else if ( bitsToBytes(dataBits) == dataBuf->length + bytesFromTail - 1 ) {
 869              		.loc 1 207 15 is_stmt 1
 870 0849 8B4584   		movl	-124(%rbp), %eax
 871 084c C1E803   		shrl	$3, %eax
 872 084f 89C2     		movl	%eax, %edx
 873 0851 8B4584   		movl	-124(%rbp), %eax
 874 0854 83E007   		andl	$7, %eax
 875 0857 85C0     		testl	%eax, %eax
 876 0859 7407     		je	.L47
 877              		.loc 1 207 15 is_stmt 0 discriminator 1
 878 085b B8010000 		movl	$1, %eax
 878      00
 879 0860 EB05     		jmp	.L48
 880              	.L47:
 881              		.loc 1 207 15 discriminator 2
 882 0862 B8000000 		movl	$0, %eax
 882      00
 883              	.L48:
 884              		.loc 1 207 15 discriminator 4
 885 0867 01D0     		addl	%edx, %eax
 886 0869 89C1     		movl	%eax, %ecx
 887              		.loc 1 207 47 is_stmt 1 discriminator 4
 888 086b 488B4598 		movq	-104(%rbp), %rax
 889 086f 488B5008 		movq	8(%rax), %rdx
 890              		.loc 1 207 56 discriminator 4
 891 0873 8B45B0   		movl	-80(%rbp), %eax
 892 0876 4801D0   		addq	%rdx, %rax
 893              		.loc 1 207 72 discriminator 4
 894 0879 4883E801 		subq	$1, %rax
 895              		.loc 1 207 13 discriminator 4
 896 087d 4839C1   		cmpq	%rax, %rcx
 897 0880 0F85AC00 		jne	.L49
 897      0000
 208:svf2csvf.c    **** 			// There's a single byte overlap, so OR the overlap byte
 209:svf2csvf.c    **** 			bytesFromTail--;
 898              		.loc 1 209 17
 899 0886 836DB001 		subl	$1, -80(%rbp)
 210:svf2csvf.c    **** 			bStatus = bufAppendBlock(&newBuffer, src, bytesFromTail, error);
 900              		.loc 1 210 14
 901 088a 8B55B0   		movl	-80(%rbp), %edx
 902 088d 488B8D70 		movq	-144(%rbp), %rcx
 902      FFFFFF
 903 0894 488B75B8 		movq	-72(%rbp), %rsi
 904 0898 488D45D0 		leaq	-48(%rbp), %rax
 905 089c 4889C7   		movq	%rax, %rdi
 906 089f E8000000 		call	bufAppendBlock@PLT
 906      00
 907 08a4 8945B4   		movl	%eax, -76(%rbp)
 211:svf2csvf.c    **** 			CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "headTail()");
 908              		.loc 1 211 4
 909 08a7 837DB400 		cmpl	$0, -76(%rbp)
 910 08ab 7425     		je	.L50
 911              		.loc 1 211 4 is_stmt 0 discriminator 1
 912 08ad 488B8570 		movq	-144(%rbp), %rax
 912      FFFFFF
 913 08b4 488D1500 		leaq	.LC3(%rip), %rdx
 913      000000
 914 08bb 4889D6   		movq	%rdx, %rsi
 915 08be 4889C7   		movq	%rax, %rdi
 916 08c1 E8000000 		call	errPrefix@PLT
 916      00
 917 08c6 C745A401 		movl	$1, -92(%rbp)
 917      000000
 918 08cd E9F30000 		jmp	.L37
 918      00
 919              	.L50:
 212:svf2csvf.c    **** 			src += bytesFromTail;
 920              		.loc 1 212 8 is_stmt 1
 921 08d2 8B45B0   		movl	-80(%rbp), %eax
 922 08d5 480145B8 		addq	%rax, -72(%rbp)
 213:svf2csvf.c    **** 			bStatus = bufAppendByte(&newBuffer, *src | *dataBuf->data, error);
 923              		.loc 1 213 40
 924 08d9 488B45B8 		movq	-72(%rbp), %rax
 925 08dd 0FB610   		movzbl	(%rax), %edx
 926              		.loc 1 213 55
 927 08e0 488B4598 		movq	-104(%rbp), %rax
 928 08e4 488B00   		movq	(%rax), %rax
 929              		.loc 1 213 47
 930 08e7 0FB600   		movzbl	(%rax), %eax
 931              		.loc 1 213 14
 932 08ea 09D0     		orl	%edx, %eax
 933 08ec 0FB6C8   		movzbl	%al, %ecx
 934 08ef 488B9570 		movq	-144(%rbp), %rdx
 934      FFFFFF
 935 08f6 488D45D0 		leaq	-48(%rbp), %rax
 936 08fa 89CE     		movl	%ecx, %esi
 937 08fc 4889C7   		movq	%rax, %rdi
 938 08ff E8000000 		call	bufAppendByte@PLT
 938      00
 939 0904 8945B4   		movl	%eax, -76(%rbp)
 214:svf2csvf.c    **** 			CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "headTail()");
 940              		.loc 1 214 4
 941 0907 837DB400 		cmpl	$0, -76(%rbp)
 942 090b 7447     		je	.L46
 943              		.loc 1 214 4 is_stmt 0 discriminator 1
 944 090d 488B8570 		movq	-144(%rbp), %rax
 944      FFFFFF
 945 0914 488D1500 		leaq	.LC3(%rip), %rdx
 945      000000
 946 091b 4889D6   		movq	%rdx, %rsi
 947 091e 4889C7   		movq	%rax, %rdi
 948 0921 E8000000 		call	errPrefix@PLT
 948      00
 949 0926 C745A401 		movl	$1, -92(%rbp)
 949      000000
 950 092d E9930000 		jmp	.L37
 950      00
 951              	.L49:
 215:svf2csvf.c    **** 		} else {
 216:svf2csvf.c    **** 			// Ooops, this should never happen!
 217:svf2csvf.c    **** 			CHECK_STATUS(true, FL_INTERNAL_ERR, cleanup, "headTail(): Internal error");
 952              		.loc 1 217 4 is_stmt 1 discriminator 1
 953 0932 488B8570 		movq	-144(%rbp), %rax
 953      FFFFFF
 954 0939 488D1500 		leaq	.LC4(%rip), %rdx
 954      000000
 955 0940 4889D6   		movq	%rdx, %rsi
 956 0943 4889C7   		movq	%rax, %rdi
 957 0946 E8000000 		call	errPrefix@PLT
 957      00
 958 094b C745A417 		movl	$23, -92(%rbp)
 958      000000
 959 0952 EB71     		jmp	.L37
 960              	.L46:
 218:svf2csvf.c    **** 		}
 219:svf2csvf.c    **** 		bStatus = bufAppendBlock(&newBuffer, dataBuf->data+1, dataBuf->length-1, error);
 961              		.loc 1 219 64
 962 0954 488B4598 		movq	-104(%rbp), %rax
 963 0958 488B4008 		movq	8(%rax), %rax
 964              		.loc 1 219 13
 965 095c 488D78FF 		leaq	-1(%rax), %rdi
 966              		.loc 1 219 47
 967 0960 488B4598 		movq	-104(%rbp), %rax
 968 0964 488B00   		movq	(%rax), %rax
 969              		.loc 1 219 53
 970 0967 488D7001 		leaq	1(%rax), %rsi
 971              		.loc 1 219 13
 972 096b 488B9570 		movq	-144(%rbp), %rdx
 972      FFFFFF
 973 0972 488D45D0 		leaq	-48(%rbp), %rax
 974 0976 4889D1   		movq	%rdx, %rcx
 975 0979 4889FA   		movq	%rdi, %rdx
 976 097c 4889C7   		movq	%rax, %rdi
 977 097f E8000000 		call	bufAppendBlock@PLT
 977      00
 978 0984 8945B4   		movl	%eax, -76(%rbp)
 220:svf2csvf.c    **** 		CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "headTail()");
 979              		.loc 1 220 3
 980 0987 837DB400 		cmpl	$0, -76(%rbp)
 981 098b 7422     		je	.L51
 982              		.loc 1 220 3 is_stmt 0 discriminator 1
 983 098d 488B8570 		movq	-144(%rbp), %rax
 983      FFFFFF
 984 0994 488D1500 		leaq	.LC3(%rip), %rdx
 984      000000
 985 099b 4889D6   		movq	%rdx, %rsi
 986 099e 4889C7   		movq	%rax, %rdi
 987 09a1 E8000000 		call	errPrefix@PLT
 987      00
 988 09a6 C745A401 		movl	$1, -92(%rbp)
 988      000000
 989 09ad EB16     		jmp	.L37
 990              	.L51:
 221:svf2csvf.c    **** 		bufSwap(&newBuffer, dataBuf);
 991              		.loc 1 221 3 is_stmt 1
 992 09af 488B5598 		movq	-104(%rbp), %rdx
 993 09b3 488D45D0 		leaq	-48(%rbp), %rax
 994 09b7 4889D6   		movq	%rdx, %rsi
 995 09ba 4889C7   		movq	%rax, %rdi
 996 09bd E8000000 		call	bufSwap@PLT
 996      00
 997 09c2 EB01     		jmp	.L37
 998              	.L54:
 999              	.LBE2:
 222:svf2csvf.c    **** 	}
 223:svf2csvf.c    **** 	
 224:svf2csvf.c    **** cleanup:
 1000              		.loc 1 224 1
 1001 09c4 90       		nop
 1002              	.L37:
 225:svf2csvf.c    **** 	bufDestroy(&newBuffer);
 1003              		.loc 1 225 2
 1004 09c5 488D45D0 		leaq	-48(%rbp), %rax
 1005 09c9 4889C7   		movq	%rax, %rdi
 1006 09cc E8000000 		call	bufDestroy@PLT
 1006      00
 226:svf2csvf.c    **** 	return retVal;
 1007              		.loc 1 226 9
 1008 09d1 8B45A4   		movl	-92(%rbp), %eax
 227:svf2csvf.c    **** }
 1009              		.loc 1 227 1
 1010 09d4 488B55F8 		movq	-8(%rbp), %rdx
 1011 09d8 64482B14 		subq	%fs:40, %rdx
 1011      25280000 
 1011      00
 1012 09e1 7405     		je	.L53
 1013 09e3 E8000000 		call	__stack_chk_fail@PLT
 1013      00
 1014              	.L53:
 1015 09e8 C9       		leave
 1016              		.cfi_def_cfa 7, 8
 1017 09e9 C3       		ret
 1018              		.cfi_endproc
 1019              	.LFE9:
 1021              		.section	.rodata
 1022              	.LC5:
 1023 006f 696E6974 		.string	"initBitStore()"
 1023      42697453 
 1023      746F7265 
 1023      282900
 1024              		.text
 1026              	initBitStore:
 1027              	.LFB10:
 228:svf2csvf.c    **** 
 229:svf2csvf.c    **** static FLStatus initBitStore(struct BitStore *store, const char **error) {
 1028              		.loc 1 229 74
 1029              		.cfi_startproc
 1030 09ea F30F1EFA 		endbr64
 1031 09ee 55       		pushq	%rbp
 1032              		.cfi_def_cfa_offset 16
 1033              		.cfi_offset 6, -16
 1034 09ef 4889E5   		movq	%rsp, %rbp
 1035              		.cfi_def_cfa_register 6
 1036 09f2 4883EC20 		subq	$32, %rsp
 1037 09f6 48897DE8 		movq	%rdi, -24(%rbp)
 1038 09fa 488975E0 		movq	%rsi, -32(%rbp)
 230:svf2csvf.c    **** 	FLStatus retVal = FL_SUCCESS;
 1039              		.loc 1 230 11
 1040 09fe C745F800 		movl	$0, -8(%rbp)
 1040      000000
 231:svf2csvf.c    **** 	BufferStatus bStatus;
 232:svf2csvf.c    **** 	store->numBits = 0;
 1041              		.loc 1 232 17
 1042 0a05 488B45E8 		movq	-24(%rbp), %rax
 1043 0a09 C7000000 		movl	$0, (%rax)
 1043      0000
 233:svf2csvf.c    **** 	bStatus = bufInitialise(&store->tdi, 1024, 0x00, error);
 1044              		.loc 1 233 12
 1045 0a0f 488B45E8 		movq	-24(%rbp), %rax
 1046 0a13 488D7808 		leaq	8(%rax), %rdi
 1047 0a17 488B45E0 		movq	-32(%rbp), %rax
 1048 0a1b 4889C1   		movq	%rax, %rcx
 1049 0a1e BA000000 		movl	$0, %edx
 1049      00
 1050 0a23 BE000400 		movl	$1024, %esi
 1050      00
 1051 0a28 E8000000 		call	bufInitialise@PLT
 1051      00
 1052 0a2d 8945FC   		movl	%eax, -4(%rbp)
 234:svf2csvf.c    **** 	CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "initBitStore()");
 1053              		.loc 1 234 2
 1054 0a30 837DFC00 		cmpl	$0, -4(%rbp)
 1055 0a34 7422     		je	.L56
 1056              		.loc 1 234 2 is_stmt 0 discriminator 1
 1057 0a36 488B45E0 		movq	-32(%rbp), %rax
 1058 0a3a 488D1500 		leaq	.LC5(%rip), %rdx
 1058      000000
 1059 0a41 4889D6   		movq	%rdx, %rsi
 1060 0a44 4889C7   		movq	%rax, %rdi
 1061 0a47 E8000000 		call	errPrefix@PLT
 1061      00
 1062 0a4c C745F801 		movl	$1, -8(%rbp)
 1062      000000
 1063 0a53 E98D0000 		jmp	.L57
 1063      00
 1064              	.L56:
 235:svf2csvf.c    **** 	bStatus = bufInitialise(&store->tdo, 1024, 0x00, error);
 1065              		.loc 1 235 12 is_stmt 1
 1066 0a58 488B45E8 		movq	-24(%rbp), %rax
 1067 0a5c 488D7828 		leaq	40(%rax), %rdi
 1068 0a60 488B45E0 		movq	-32(%rbp), %rax
 1069 0a64 4889C1   		movq	%rax, %rcx
 1070 0a67 BA000000 		movl	$0, %edx
 1070      00
 1071 0a6c BE000400 		movl	$1024, %esi
 1071      00
 1072 0a71 E8000000 		call	bufInitialise@PLT
 1072      00
 1073 0a76 8945FC   		movl	%eax, -4(%rbp)
 236:svf2csvf.c    **** 	CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "initBitStore()");
 1074              		.loc 1 236 2
 1075 0a79 837DFC00 		cmpl	$0, -4(%rbp)
 1076 0a7d 741F     		je	.L58
 1077              		.loc 1 236 2 is_stmt 0 discriminator 1
 1078 0a7f 488B45E0 		movq	-32(%rbp), %rax
 1079 0a83 488D1500 		leaq	.LC5(%rip), %rdx
 1079      000000
 1080 0a8a 4889D6   		movq	%rdx, %rsi
 1081 0a8d 4889C7   		movq	%rax, %rdi
 1082 0a90 E8000000 		call	errPrefix@PLT
 1082      00
 1083 0a95 C745F801 		movl	$1, -8(%rbp)
 1083      000000
 1084 0a9c EB47     		jmp	.L57
 1085              	.L58:
 237:svf2csvf.c    **** 	bStatus = bufInitialise(&store->mask, 1024, 0x00, error);
 1086              		.loc 1 237 12 is_stmt 1
 1087 0a9e 488B45E8 		movq	-24(%rbp), %rax
 1088 0aa2 488D7848 		leaq	72(%rax), %rdi
 1089 0aa6 488B45E0 		movq	-32(%rbp), %rax
 1090 0aaa 4889C1   		movq	%rax, %rcx
 1091 0aad BA000000 		movl	$0, %edx
 1091      00
 1092 0ab2 BE000400 		movl	$1024, %esi
 1092      00
 1093 0ab7 E8000000 		call	bufInitialise@PLT
 1093      00
 1094 0abc 8945FC   		movl	%eax, -4(%rbp)
 238:svf2csvf.c    **** 	CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "initBitStore()");
 1095              		.loc 1 238 2
 1096 0abf 837DFC00 		cmpl	$0, -4(%rbp)
 1097 0ac3 741F     		je	.L60
 1098              		.loc 1 238 2 is_stmt 0 discriminator 1
 1099 0ac5 488B45E0 		movq	-32(%rbp), %rax
 1100 0ac9 488D1500 		leaq	.LC5(%rip), %rdx
 1100      000000
 1101 0ad0 4889D6   		movq	%rdx, %rsi
 1102 0ad3 4889C7   		movq	%rax, %rdi
 1103 0ad6 E8000000 		call	errPrefix@PLT
 1103      00
 1104 0adb C745F801 		movl	$1, -8(%rbp)
 1104      000000
 1105 0ae2 EB01     		jmp	.L57
 1106              	.L60:
 239:svf2csvf.c    **** cleanup:
 1107              		.loc 1 239 1 is_stmt 1
 1108 0ae4 90       		nop
 1109              	.L57:
 240:svf2csvf.c    **** 	return retVal;
 1110              		.loc 1 240 9
 1111 0ae5 8B45F8   		movl	-8(%rbp), %eax
 241:svf2csvf.c    **** }
 1112              		.loc 1 241 1
 1113 0ae8 C9       		leave
 1114              		.cfi_def_cfa 7, 8
 1115 0ae9 C3       		ret
 1116              		.cfi_endproc
 1117              	.LFE10:
 1120              	destroyBitStore:
 1121              	.LFB11:
 242:svf2csvf.c    **** 
 243:svf2csvf.c    **** static void destroyBitStore(struct BitStore *store) {
 1122              		.loc 1 243 53
 1123              		.cfi_startproc
 1124 0aea F30F1EFA 		endbr64
 1125 0aee 55       		pushq	%rbp
 1126              		.cfi_def_cfa_offset 16
 1127              		.cfi_offset 6, -16
 1128 0aef 4889E5   		movq	%rsp, %rbp
 1129              		.cfi_def_cfa_register 6
 1130 0af2 4883EC10 		subq	$16, %rsp
 1131 0af6 48897DF8 		movq	%rdi, -8(%rbp)
 244:svf2csvf.c    **** 	store->numBits = 0;
 1132              		.loc 1 244 17
 1133 0afa 488B45F8 		movq	-8(%rbp), %rax
 1134 0afe C7000000 		movl	$0, (%rax)
 1134      0000
 245:svf2csvf.c    **** 	bufDestroy(&store->tdi);
 1135              		.loc 1 245 2
 1136 0b04 488B45F8 		movq	-8(%rbp), %rax
 1137 0b08 4883C008 		addq	$8, %rax
 1138 0b0c 4889C7   		movq	%rax, %rdi
 1139 0b0f E8000000 		call	bufDestroy@PLT
 1139      00
 246:svf2csvf.c    **** 	bufDestroy(&store->tdo);
 1140              		.loc 1 246 2
 1141 0b14 488B45F8 		movq	-8(%rbp), %rax
 1142 0b18 4883C028 		addq	$40, %rax
 1143 0b1c 4889C7   		movq	%rax, %rdi
 1144 0b1f E8000000 		call	bufDestroy@PLT
 1144      00
 247:svf2csvf.c    **** 	bufDestroy(&store->mask);
 1145              		.loc 1 247 2
 1146 0b24 488B45F8 		movq	-8(%rbp), %rax
 1147 0b28 4883C048 		addq	$72, %rax
 1148 0b2c 4889C7   		movq	%rax, %rdi
 1149 0b2f E8000000 		call	bufDestroy@PLT
 1149      00
 248:svf2csvf.c    **** }
 1150              		.loc 1 248 1
 1151 0b34 90       		nop
 1152 0b35 C9       		leave
 1153              		.cfi_def_cfa 7, 8
 1154 0b36 C3       		ret
 1155              		.cfi_endproc
 1156              	.LFE11:
 1158              		.section	.rodata
 1159              	.LC6:
 1160 007e 63787449 		.string	"cxtInitialise()"
 1160      6E697469 
 1160      616C6973 
 1160      65282900 
 1161              		.text
 1162              		.globl	cxtInitialise
 1164              	cxtInitialise:
 1165              	.LFB12:
 249:svf2csvf.c    **** 
 250:svf2csvf.c    **** FLStatus cxtInitialise(struct ParseContext *cxt, const char **error) {
 1166              		.loc 1 250 70
 1167              		.cfi_startproc
 1168 0b37 F30F1EFA 		endbr64
 1169 0b3b 55       		pushq	%rbp
 1170              		.cfi_def_cfa_offset 16
 1171              		.cfi_offset 6, -16
 1172 0b3c 4889E5   		movq	%rsp, %rbp
 1173              		.cfi_def_cfa_register 6
 1174 0b3f 4883EC20 		subq	$32, %rsp
 1175 0b43 48897DE8 		movq	%rdi, -24(%rbp)
 1176 0b47 488975E0 		movq	%rsi, -32(%rbp)
 251:svf2csvf.c    **** 	FLStatus retVal = FL_SUCCESS, fStatus;
 1177              		.loc 1 251 11
 1178 0b4b C745F400 		movl	$0, -12(%rbp)
 1178      000000
 252:svf2csvf.c    **** 	BufferStatus bStatus;
 253:svf2csvf.c    **** 	fStatus = initBitStore(&cxt->dataHead, error);
 1179              		.loc 1 253 12
 1180 0b52 488B45E8 		movq	-24(%rbp), %rax
 1181 0b56 488B55E0 		movq	-32(%rbp), %rdx
 1182 0b5a 4889D6   		movq	%rdx, %rsi
 1183 0b5d 4889C7   		movq	%rax, %rdi
 1184 0b60 E885FEFF 		call	initBitStore
 1184      FF
 1185 0b65 8945F8   		movl	%eax, -8(%rbp)
 254:svf2csvf.c    **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "cxtInitialise()");
 1186              		.loc 1 254 2
 1187 0b68 837DF800 		cmpl	$0, -8(%rbp)
 1188 0b6c 7421     		je	.L63
 1189              		.loc 1 254 2 is_stmt 0 discriminator 1
 1190 0b6e 488B45E0 		movq	-32(%rbp), %rax
 1191 0b72 488D1500 		leaq	.LC6(%rip), %rdx
 1191      000000
 1192 0b79 4889D6   		movq	%rdx, %rsi
 1193 0b7c 4889C7   		movq	%rax, %rdi
 1194 0b7f E8000000 		call	errPrefix@PLT
 1194      00
 1195 0b84 8B45F8   		movl	-8(%rbp), %eax
 1196 0b87 8945F4   		movl	%eax, -12(%rbp)
 1197 0b8a E9CC0100 		jmp	.L64
 1197      00
 1198              	.L63:
 255:svf2csvf.c    **** 	fStatus = initBitStore(&cxt->dataBody, error);
 1199              		.loc 1 255 12 is_stmt 1
 1200 0b8f 488B45E8 		movq	-24(%rbp), %rax
 1201 0b93 488D90D0 		leaq	208(%rax), %rdx
 1201      000000
 1202 0b9a 488B45E0 		movq	-32(%rbp), %rax
 1203 0b9e 4889C6   		movq	%rax, %rsi
 1204 0ba1 4889D7   		movq	%rdx, %rdi
 1205 0ba4 E841FEFF 		call	initBitStore
 1205      FF
 1206 0ba9 8945F8   		movl	%eax, -8(%rbp)
 256:svf2csvf.c    **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "cxtInitialise()");
 1207              		.loc 1 256 2
 1208 0bac 837DF800 		cmpl	$0, -8(%rbp)
 1209 0bb0 7421     		je	.L65
 1210              		.loc 1 256 2 is_stmt 0 discriminator 1
 1211 0bb2 488B45E0 		movq	-32(%rbp), %rax
 1212 0bb6 488D1500 		leaq	.LC6(%rip), %rdx
 1212      000000
 1213 0bbd 4889D6   		movq	%rdx, %rsi
 1214 0bc0 4889C7   		movq	%rax, %rdi
 1215 0bc3 E8000000 		call	errPrefix@PLT
 1215      00
 1216 0bc8 8B45F8   		movl	-8(%rbp), %eax
 1217 0bcb 8945F4   		movl	%eax, -12(%rbp)
 1218 0bce E9880100 		jmp	.L64
 1218      00
 1219              	.L65:
 257:svf2csvf.c    **** 	fStatus = initBitStore(&cxt->dataTail, error);
 1220              		.loc 1 257 12 is_stmt 1
 1221 0bd3 488B45E8 		movq	-24(%rbp), %rax
 1222 0bd7 488D90A0 		leaq	416(%rax), %rdx
 1222      010000
 1223 0bde 488B45E0 		movq	-32(%rbp), %rax
 1224 0be2 4889C6   		movq	%rax, %rsi
 1225 0be5 4889D7   		movq	%rdx, %rdi
 1226 0be8 E8FDFDFF 		call	initBitStore
 1226      FF
 1227 0bed 8945F8   		movl	%eax, -8(%rbp)
 258:svf2csvf.c    **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "cxtInitialise()");
 1228              		.loc 1 258 2
 1229 0bf0 837DF800 		cmpl	$0, -8(%rbp)
 1230 0bf4 7421     		je	.L66
 1231              		.loc 1 258 2 is_stmt 0 discriminator 1
 1232 0bf6 488B45E0 		movq	-32(%rbp), %rax
 1233 0bfa 488D1500 		leaq	.LC6(%rip), %rdx
 1233      000000
 1234 0c01 4889D6   		movq	%rdx, %rsi
 1235 0c04 4889C7   		movq	%rax, %rdi
 1236 0c07 E8000000 		call	errPrefix@PLT
 1236      00
 1237 0c0c 8B45F8   		movl	-8(%rbp), %eax
 1238 0c0f 8945F4   		movl	%eax, -12(%rbp)
 1239 0c12 E9440100 		jmp	.L64
 1239      00
 1240              	.L66:
 259:svf2csvf.c    **** 	fStatus = initBitStore(&cxt->insnHead, error);
 1241              		.loc 1 259 12 is_stmt 1
 1242 0c17 488B45E8 		movq	-24(%rbp), %rax
 1243 0c1b 488D5068 		leaq	104(%rax), %rdx
 1244 0c1f 488B45E0 		movq	-32(%rbp), %rax
 1245 0c23 4889C6   		movq	%rax, %rsi
 1246 0c26 4889D7   		movq	%rdx, %rdi
 1247 0c29 E8BCFDFF 		call	initBitStore
 1247      FF
 1248 0c2e 8945F8   		movl	%eax, -8(%rbp)
 260:svf2csvf.c    **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "cxtInitialise()");
 1249              		.loc 1 260 2
 1250 0c31 837DF800 		cmpl	$0, -8(%rbp)
 1251 0c35 7421     		je	.L67
 1252              		.loc 1 260 2 is_stmt 0 discriminator 1
 1253 0c37 488B45E0 		movq	-32(%rbp), %rax
 1254 0c3b 488D1500 		leaq	.LC6(%rip), %rdx
 1254      000000
 1255 0c42 4889D6   		movq	%rdx, %rsi
 1256 0c45 4889C7   		movq	%rax, %rdi
 1257 0c48 E8000000 		call	errPrefix@PLT
 1257      00
 1258 0c4d 8B45F8   		movl	-8(%rbp), %eax
 1259 0c50 8945F4   		movl	%eax, -12(%rbp)
 1260 0c53 E9030100 		jmp	.L64
 1260      00
 1261              	.L67:
 261:svf2csvf.c    **** 	fStatus = initBitStore(&cxt->insnBody, error);
 1262              		.loc 1 261 12 is_stmt 1
 1263 0c58 488B45E8 		movq	-24(%rbp), %rax
 1264 0c5c 488D9038 		leaq	312(%rax), %rdx
 1264      010000
 1265 0c63 488B45E0 		movq	-32(%rbp), %rax
 1266 0c67 4889C6   		movq	%rax, %rsi
 1267 0c6a 4889D7   		movq	%rdx, %rdi
 1268 0c6d E878FDFF 		call	initBitStore
 1268      FF
 1269 0c72 8945F8   		movl	%eax, -8(%rbp)
 262:svf2csvf.c    **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "cxtInitialise()");
 1270              		.loc 1 262 2
 1271 0c75 837DF800 		cmpl	$0, -8(%rbp)
 1272 0c79 7421     		je	.L68
 1273              		.loc 1 262 2 is_stmt 0 discriminator 1
 1274 0c7b 488B45E0 		movq	-32(%rbp), %rax
 1275 0c7f 488D1500 		leaq	.LC6(%rip), %rdx
 1275      000000
 1276 0c86 4889D6   		movq	%rdx, %rsi
 1277 0c89 4889C7   		movq	%rax, %rdi
 1278 0c8c E8000000 		call	errPrefix@PLT
 1278      00
 1279 0c91 8B45F8   		movl	-8(%rbp), %eax
 1280 0c94 8945F4   		movl	%eax, -12(%rbp)
 1281 0c97 E9BF0000 		jmp	.L64
 1281      00
 1282              	.L68:
 263:svf2csvf.c    **** 	fStatus = initBitStore(&cxt->insnTail, error);
 1283              		.loc 1 263 12 is_stmt 1
 1284 0c9c 488B45E8 		movq	-24(%rbp), %rax
 1285 0ca0 488D9008 		leaq	520(%rax), %rdx
 1285      020000
 1286 0ca7 488B45E0 		movq	-32(%rbp), %rax
 1287 0cab 4889C6   		movq	%rax, %rsi
 1288 0cae 4889D7   		movq	%rdx, %rdi
 1289 0cb1 E834FDFF 		call	initBitStore
 1289      FF
 1290 0cb6 8945F8   		movl	%eax, -8(%rbp)
 264:svf2csvf.c    **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "cxtInitialise()");
 1291              		.loc 1 264 2
 1292 0cb9 837DF800 		cmpl	$0, -8(%rbp)
 1293 0cbd 741E     		je	.L69
 1294              		.loc 1 264 2 is_stmt 0 discriminator 1
 1295 0cbf 488B45E0 		movq	-32(%rbp), %rax
 1296 0cc3 488D1500 		leaq	.LC6(%rip), %rdx
 1296      000000
 1297 0cca 4889D6   		movq	%rdx, %rsi
 1298 0ccd 4889C7   		movq	%rax, %rdi
 1299 0cd0 E8000000 		call	errPrefix@PLT
 1299      00
 1300 0cd5 8B45F8   		movl	-8(%rbp), %eax
 1301 0cd8 8945F4   		movl	%eax, -12(%rbp)
 1302 0cdb EB7E     		jmp	.L64
 1303              	.L69:
 265:svf2csvf.c    **** 	cxt->curLength = 0;
 1304              		.loc 1 265 17 is_stmt 1
 1305 0cdd 488B45E8 		movq	-24(%rbp), %rax
 1306 0ce1 C7807002 		movl	$0, 624(%rax)
 1306      00000000 
 1306      0000
 266:svf2csvf.c    **** 	bStatus = bufInitialise(&cxt->curMaskBuf, 1024, 0x00, error);
 1307              		.loc 1 266 12
 1308 0ceb 488B45E8 		movq	-24(%rbp), %rax
 1309 0cef 488DB878 		leaq	632(%rax), %rdi
 1309      020000
 1310 0cf6 488B45E0 		movq	-32(%rbp), %rax
 1311 0cfa 4889C1   		movq	%rax, %rcx
 1312 0cfd BA000000 		movl	$0, %edx
 1312      00
 1313 0d02 BE000400 		movl	$1024, %esi
 1313      00
 1314 0d07 E8000000 		call	bufInitialise@PLT
 1314      00
 1315 0d0c 8945FC   		movl	%eax, -4(%rbp)
 267:svf2csvf.c    **** 	CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "cxtInitialise()");
 1316              		.loc 1 267 2
 1317 0d0f 837DFC00 		cmpl	$0, -4(%rbp)
 1318 0d13 741F     		je	.L70
 1319              		.loc 1 267 2 is_stmt 0 discriminator 1
 1320 0d15 488B45E0 		movq	-32(%rbp), %rax
 1321 0d19 488D1500 		leaq	.LC6(%rip), %rdx
 1321      000000
 1322 0d20 4889D6   		movq	%rdx, %rsi
 1323 0d23 4889C7   		movq	%rax, %rdi
 1324 0d26 E8000000 		call	errPrefix@PLT
 1324      00
 1325 0d2b C745F401 		movl	$1, -12(%rbp)
 1325      000000
 1326 0d32 EB27     		jmp	.L64
 1327              	.L70:
 268:svf2csvf.c    **** 	cxt->curMaskBits = 0;
 1328              		.loc 1 268 19 is_stmt 1
 1329 0d34 488B45E8 		movq	-24(%rbp), %rax
 1330 0d38 C7809802 		movl	$0, 664(%rax)
 1330      00000000 
 1330      0000
 269:svf2csvf.c    **** 	cxt->numCommands = 0;
 1331              		.loc 1 269 19
 1332 0d42 488B45E8 		movq	-24(%rbp), %rax
 1333 0d46 C7809C02 		movl	$0, 668(%rax)
 1333      00000000 
 1333      0000
 270:svf2csvf.c    **** 	cxt->newMaskWritten = false;
 1334              		.loc 1 270 22
 1335 0d50 488B45E8 		movq	-24(%rbp), %rax
 1336 0d54 C680A002 		movb	$0, 672(%rax)
 1336      000000
 1337              	.L64:
 271:svf2csvf.c    **** cleanup:
 272:svf2csvf.c    **** 	return retVal;
 1338              		.loc 1 272 9
 1339 0d5b 8B45F4   		movl	-12(%rbp), %eax
 273:svf2csvf.c    **** }
 1340              		.loc 1 273 1
 1341 0d5e C9       		leave
 1342              		.cfi_def_cfa 7, 8
 1343 0d5f C3       		ret
 1344              		.cfi_endproc
 1345              	.LFE12:
 1347              		.globl	cxtDestroy
 1349              	cxtDestroy:
 1350              	.LFB13:
 274:svf2csvf.c    **** 
 275:svf2csvf.c    **** void cxtDestroy(struct ParseContext *cxt) {
 1351              		.loc 1 275 43
 1352              		.cfi_startproc
 1353 0d60 F30F1EFA 		endbr64
 1354 0d64 55       		pushq	%rbp
 1355              		.cfi_def_cfa_offset 16
 1356              		.cfi_offset 6, -16
 1357 0d65 4889E5   		movq	%rsp, %rbp
 1358              		.cfi_def_cfa_register 6
 1359 0d68 4883EC10 		subq	$16, %rsp
 1360 0d6c 48897DF8 		movq	%rdi, -8(%rbp)
 276:svf2csvf.c    **** 	destroyBitStore(&cxt->dataHead);
 1361              		.loc 1 276 2
 1362 0d70 488B45F8 		movq	-8(%rbp), %rax
 1363 0d74 4889C7   		movq	%rax, %rdi
 1364 0d77 E86EFDFF 		call	destroyBitStore
 1364      FF
 277:svf2csvf.c    **** 	destroyBitStore(&cxt->dataBody);
 1365              		.loc 1 277 2
 1366 0d7c 488B45F8 		movq	-8(%rbp), %rax
 1367 0d80 4805D000 		addq	$208, %rax
 1367      0000
 1368 0d86 4889C7   		movq	%rax, %rdi
 1369 0d89 E85CFDFF 		call	destroyBitStore
 1369      FF
 278:svf2csvf.c    **** 	destroyBitStore(&cxt->dataTail);
 1370              		.loc 1 278 2
 1371 0d8e 488B45F8 		movq	-8(%rbp), %rax
 1372 0d92 4805A001 		addq	$416, %rax
 1372      0000
 1373 0d98 4889C7   		movq	%rax, %rdi
 1374 0d9b E84AFDFF 		call	destroyBitStore
 1374      FF
 279:svf2csvf.c    **** 	destroyBitStore(&cxt->insnHead);
 1375              		.loc 1 279 2
 1376 0da0 488B45F8 		movq	-8(%rbp), %rax
 1377 0da4 4883C068 		addq	$104, %rax
 1378 0da8 4889C7   		movq	%rax, %rdi
 1379 0dab E83AFDFF 		call	destroyBitStore
 1379      FF
 280:svf2csvf.c    **** 	destroyBitStore(&cxt->insnBody);
 1380              		.loc 1 280 2
 1381 0db0 488B45F8 		movq	-8(%rbp), %rax
 1382 0db4 48053801 		addq	$312, %rax
 1382      0000
 1383 0dba 4889C7   		movq	%rax, %rdi
 1384 0dbd E828FDFF 		call	destroyBitStore
 1384      FF
 281:svf2csvf.c    **** 	destroyBitStore(&cxt->insnTail);
 1385              		.loc 1 281 2
 1386 0dc2 488B45F8 		movq	-8(%rbp), %rax
 1387 0dc6 48050802 		addq	$520, %rax
 1387      0000
 1388 0dcc 4889C7   		movq	%rax, %rdi
 1389 0dcf E816FDFF 		call	destroyBitStore
 1389      FF
 282:svf2csvf.c    **** 	bufDestroy(&cxt->curMaskBuf);
 1390              		.loc 1 282 2
 1391 0dd4 488B45F8 		movq	-8(%rbp), %rax
 1392 0dd8 48057802 		addq	$632, %rax
 1392      0000
 1393 0dde 4889C7   		movq	%rax, %rdi
 1394 0de1 E8000000 		call	bufDestroy@PLT
 1394      00
 283:svf2csvf.c    **** }
 1395              		.loc 1 283 1
 1396 0de6 90       		nop
 1397 0de7 C9       		leave
 1398              		.cfi_def_cfa 7, 8
 1399 0de8 C3       		ret
 1400              		.cfi_endproc
 1401              	.LFE13:
 1403              		.section	.rodata
 1404              	.LC7:
 1405 008e 70726F63 		.string	"processLine()"
 1405      6573734C 
 1405      696E6528 
 1405      2900
 1406              		.text
 1408              	processLine:
 1409              	.LFB14:
 284:svf2csvf.c    **** 
 285:svf2csvf.c    **** typedef enum {
 286:svf2csvf.c    **** 	HEAD = 'H',
 287:svf2csvf.c    **** 	TAIL = 'T',
 288:svf2csvf.c    **** 	BODY = 'S'
 289:svf2csvf.c    **** } ShiftOperation;
 290:svf2csvf.c    **** 
 291:svf2csvf.c    **** /**
 292:svf2csvf.c    ****  * Read the data from the tdi, tdo and mask ASCII hex byte sequences into the supplied BitStore as
 293:svf2csvf.c    ****  * binary data.
 294:svf2csvf.c    ****  */
 295:svf2csvf.c    **** static FLStatus processLine(
 296:svf2csvf.c    **** 	struct BitStore *store,
 297:svf2csvf.c    **** 	uint32 newLength, const char *tdi, const char *tdo, const char *mask,
 298:svf2csvf.c    **** 	const char **error)
 299:svf2csvf.c    **** {
 1410              		.loc 1 299 1
 1411              		.cfi_startproc
 1412 0de9 F30F1EFA 		endbr64
 1413 0ded 55       		pushq	%rbp
 1414              		.cfi_def_cfa_offset 16
 1415              		.cfi_offset 6, -16
 1416 0dee 4889E5   		movq	%rsp, %rbp
 1417              		.cfi_def_cfa_register 6
 1418 0df1 4883EC40 		subq	$64, %rsp
 1419 0df5 48897DE8 		movq	%rdi, -24(%rbp)
 1420 0df9 8975E4   		movl	%esi, -28(%rbp)
 1421 0dfc 488955D8 		movq	%rdx, -40(%rbp)
 1422 0e00 48894DD0 		movq	%rcx, -48(%rbp)
 1423 0e04 4C8945C8 		movq	%r8, -56(%rbp)
 1424 0e08 4C894DC0 		movq	%r9, -64(%rbp)
 300:svf2csvf.c    **** 	FLStatus retVal = FL_SUCCESS, fStatus;
 1425              		.loc 1 300 11
 1426 0e0c C745F400 		movl	$0, -12(%rbp)
 1426      000000
 301:svf2csvf.c    **** 	BufferStatus bStatus;
 302:svf2csvf.c    **** 
 303:svf2csvf.c    **** 	// The TDI & MASK values are remembered; the TDO value defaults to all zeros. If the length
 304:svf2csvf.c    **** 	// changes, all remembered values are forgotten.
 305:svf2csvf.c    **** 	bufZeroLength(&store->tdo);
 1427              		.loc 1 305 2
 1428 0e13 488B45E8 		movq	-24(%rbp), %rax
 1429 0e17 4883C028 		addq	$40, %rax
 1430 0e1b 4889C7   		movq	%rax, %rdi
 1431 0e1e E8000000 		call	bufZeroLength@PLT
 1431      00
 306:svf2csvf.c    **** 	if ( newLength ) {
 1432              		.loc 1 306 5
 1433 0e23 837DE400 		cmpl	$0, -28(%rbp)
 1434 0e27 7466     		je	.L74
 307:svf2csvf.c    **** 		bStatus = bufAppendConst(&store->tdo, 0x00, bitsToBytes(newLength), error);
 1435              		.loc 1 307 47
 1436 0e29 8B45E4   		movl	-28(%rbp), %eax
 1437 0e2c C1E803   		shrl	$3, %eax
 1438 0e2f 89C2     		movl	%eax, %edx
 1439 0e31 8B45E4   		movl	-28(%rbp), %eax
 1440 0e34 83E007   		andl	$7, %eax
 1441 0e37 85C0     		testl	%eax, %eax
 1442 0e39 7407     		je	.L75
 1443              		.loc 1 307 47 is_stmt 0 discriminator 1
 1444 0e3b B8010000 		movl	$1, %eax
 1444      00
 1445 0e40 EB05     		jmp	.L76
 1446              	.L75:
 1447              		.loc 1 307 47 discriminator 2
 1448 0e42 B8000000 		movl	$0, %eax
 1448      00
 1449              	.L76:
 1450              		.loc 1 307 47 discriminator 4
 1451 0e47 01D0     		addl	%edx, %eax
 1452              		.loc 1 307 13 is_stmt 1 discriminator 4
 1453 0e49 89C2     		movl	%eax, %edx
 1454 0e4b 488B45E8 		movq	-24(%rbp), %rax
 1455 0e4f 488D7828 		leaq	40(%rax), %rdi
 1456 0e53 488B45C0 		movq	-64(%rbp), %rax
 1457 0e57 4889C1   		movq	%rax, %rcx
 1458 0e5a BE000000 		movl	$0, %esi
 1458      00
 1459 0e5f E8000000 		call	bufAppendConst@PLT
 1459      00
 1460 0e64 8945F8   		movl	%eax, -8(%rbp)
 308:svf2csvf.c    **** 		CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "processLine()");
 1461              		.loc 1 308 3 discriminator 4
 1462 0e67 837DF800 		cmpl	$0, -8(%rbp)
 1463 0e6b 7422     		je	.L74
 1464              		.loc 1 308 3 is_stmt 0 discriminator 1
 1465 0e6d 488B45C0 		movq	-64(%rbp), %rax
 1466 0e71 488D1500 		leaq	.LC7(%rip), %rdx
 1466      000000
 1467 0e78 4889D6   		movq	%rdx, %rsi
 1468 0e7b 4889C7   		movq	%rax, %rdi
 1469 0e7e E8000000 		call	errPrefix@PLT
 1469      00
 1470 0e83 C745F401 		movl	$1, -12(%rbp)
 1470      000000
 1471 0e8a E9ED0100 		jmp	.L77
 1471      00
 1472              	.L74:
 309:svf2csvf.c    **** 	}
 310:svf2csvf.c    **** 	if ( store->numBits != newLength ) {
 1473              		.loc 1 310 12 is_stmt 1
 1474 0e8f 488B45E8 		movq	-24(%rbp), %rax
 1475 0e93 8B00     		movl	(%rax), %eax
 1476              		.loc 1 310 5
 1477 0e95 3945E4   		cmpl	%eax, -28(%rbp)
 1478 0e98 0F84F600 		je	.L78
 1478      0000
 311:svf2csvf.c    **** 		// The length changed, so we can't reuse previous values, and new TDI data is required:
 312:svf2csvf.c    **** 		// "The TDI parameter must be explicitly specified for the first command or when the
 313:svf2csvf.c    **** 		// length changes."
 314:svf2csvf.c    **** 		bufZeroLength(&store->tdi);
 1479              		.loc 1 314 3
 1480 0e9e 488B45E8 		movq	-24(%rbp), %rax
 1481 0ea2 4883C008 		addq	$8, %rax
 1482 0ea6 4889C7   		movq	%rax, %rdi
 1483 0ea9 E8000000 		call	bufZeroLength@PLT
 1483      00
 315:svf2csvf.c    **** 		bufZeroLength(&store->mask);
 1484              		.loc 1 315 3
 1485 0eae 488B45E8 		movq	-24(%rbp), %rax
 1486 0eb2 4883C048 		addq	$72, %rax
 1487 0eb6 4889C7   		movq	%rax, %rdi
 1488 0eb9 E8000000 		call	bufZeroLength@PLT
 1488      00
 316:svf2csvf.c    **** 		if ( newLength ) {
 1489              		.loc 1 316 6
 1490 0ebe 837DE400 		cmpl	$0, -28(%rbp)
 1491 0ec2 0F84CC00 		je	.L78
 1491      0000
 317:svf2csvf.c    **** 			bStatus = bufAppendConst(&store->tdi, 0x00, bitsToBytes(newLength), error);
 1492              		.loc 1 317 48
 1493 0ec8 8B45E4   		movl	-28(%rbp), %eax
 1494 0ecb C1E803   		shrl	$3, %eax
 1495 0ece 89C2     		movl	%eax, %edx
 1496 0ed0 8B45E4   		movl	-28(%rbp), %eax
 1497 0ed3 83E007   		andl	$7, %eax
 1498 0ed6 85C0     		testl	%eax, %eax
 1499 0ed8 7407     		je	.L79
 1500              		.loc 1 317 48 is_stmt 0 discriminator 1
 1501 0eda B8010000 		movl	$1, %eax
 1501      00
 1502 0edf EB05     		jmp	.L80
 1503              	.L79:
 1504              		.loc 1 317 48 discriminator 2
 1505 0ee1 B8000000 		movl	$0, %eax
 1505      00
 1506              	.L80:
 1507              		.loc 1 317 48 discriminator 4
 1508 0ee6 01D0     		addl	%edx, %eax
 1509              		.loc 1 317 14 is_stmt 1 discriminator 4
 1510 0ee8 89C2     		movl	%eax, %edx
 1511 0eea 488B45E8 		movq	-24(%rbp), %rax
 1512 0eee 488D7808 		leaq	8(%rax), %rdi
 1513 0ef2 488B45C0 		movq	-64(%rbp), %rax
 1514 0ef6 4889C1   		movq	%rax, %rcx
 1515 0ef9 BE000000 		movl	$0, %esi
 1515      00
 1516 0efe E8000000 		call	bufAppendConst@PLT
 1516      00
 1517 0f03 8945F8   		movl	%eax, -8(%rbp)
 318:svf2csvf.c    **** 			CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "processLine()");
 1518              		.loc 1 318 4 discriminator 4
 1519 0f06 837DF800 		cmpl	$0, -8(%rbp)
 1520 0f0a 7422     		je	.L81
 1521              		.loc 1 318 4 is_stmt 0 discriminator 1
 1522 0f0c 488B45C0 		movq	-64(%rbp), %rax
 1523 0f10 488D1500 		leaq	.LC7(%rip), %rdx
 1523      000000
 1524 0f17 4889D6   		movq	%rdx, %rsi
 1525 0f1a 4889C7   		movq	%rax, %rdi
 1526 0f1d E8000000 		call	errPrefix@PLT
 1526      00
 1527 0f22 C745F401 		movl	$1, -12(%rbp)
 1527      000000
 1528 0f29 E94E0100 		jmp	.L77
 1528      00
 1529              	.L81:
 319:svf2csvf.c    **** 			bStatus = bufAppendConst(&store->mask, 0xFF, bitsToBytes(newLength), error);
 1530              		.loc 1 319 49 is_stmt 1
 1531 0f2e 8B45E4   		movl	-28(%rbp), %eax
 1532 0f31 C1E803   		shrl	$3, %eax
 1533 0f34 89C2     		movl	%eax, %edx
 1534 0f36 8B45E4   		movl	-28(%rbp), %eax
 1535 0f39 83E007   		andl	$7, %eax
 1536 0f3c 85C0     		testl	%eax, %eax
 1537 0f3e 7407     		je	.L82
 1538              		.loc 1 319 49 is_stmt 0 discriminator 1
 1539 0f40 B8010000 		movl	$1, %eax
 1539      00
 1540 0f45 EB05     		jmp	.L83
 1541              	.L82:
 1542              		.loc 1 319 49 discriminator 2
 1543 0f47 B8000000 		movl	$0, %eax
 1543      00
 1544              	.L83:
 1545              		.loc 1 319 49 discriminator 4
 1546 0f4c 01D0     		addl	%edx, %eax
 1547              		.loc 1 319 14 is_stmt 1 discriminator 4
 1548 0f4e 89C2     		movl	%eax, %edx
 1549 0f50 488B45E8 		movq	-24(%rbp), %rax
 1550 0f54 488D7848 		leaq	72(%rax), %rdi
 1551 0f58 488B45C0 		movq	-64(%rbp), %rax
 1552 0f5c 4889C1   		movq	%rax, %rcx
 1553 0f5f BEFF0000 		movl	$255, %esi
 1553      00
 1554 0f64 E8000000 		call	bufAppendConst@PLT
 1554      00
 1555 0f69 8945F8   		movl	%eax, -8(%rbp)
 320:svf2csvf.c    **** 			CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "processLine()");
 1556              		.loc 1 320 4 discriminator 4
 1557 0f6c 837DF800 		cmpl	$0, -8(%rbp)
 1558 0f70 7422     		je	.L78
 1559              		.loc 1 320 4 is_stmt 0 discriminator 1
 1560 0f72 488B45C0 		movq	-64(%rbp), %rax
 1561 0f76 488D1500 		leaq	.LC7(%rip), %rdx
 1561      000000
 1562 0f7d 4889D6   		movq	%rdx, %rsi
 1563 0f80 4889C7   		movq	%rax, %rdi
 1564 0f83 E8000000 		call	errPrefix@PLT
 1564      00
 1565 0f88 C745F401 		movl	$1, -12(%rbp)
 1565      000000
 1566 0f8f E9E80000 		jmp	.L77
 1566      00
 1567              	.L78:
 321:svf2csvf.c    **** 		}
 322:svf2csvf.c    **** 	}
 323:svf2csvf.c    **** 	store->numBits = newLength;
 1568              		.loc 1 323 17 is_stmt 1
 1569 0f94 488B45E8 		movq	-24(%rbp), %rax
 1570 0f98 8B55E4   		movl	-28(%rbp), %edx
 1571 0f9b 8910     		movl	%edx, (%rax)
 324:svf2csvf.c    **** 	if ( tdi ) {
 1572              		.loc 1 324 5
 1573 0f9d 48837DD8 		cmpq	$0, -40(%rbp)
 1573      00
 1574 0fa2 7445     		je	.L84
 325:svf2csvf.c    **** 		fStatus = readBytes(&store->tdi, tdi, error);
 1575              		.loc 1 325 13
 1576 0fa4 488B45E8 		movq	-24(%rbp), %rax
 1577 0fa8 488D4808 		leaq	8(%rax), %rcx
 1578 0fac 488B55C0 		movq	-64(%rbp), %rdx
 1579 0fb0 488B45D8 		movq	-40(%rbp), %rax
 1580 0fb4 4889C6   		movq	%rax, %rsi
 1581 0fb7 4889CF   		movq	%rcx, %rdi
 1582 0fba E8000000 		call	readBytes@PLT
 1582      00
 1583 0fbf 8945FC   		movl	%eax, -4(%rbp)
 326:svf2csvf.c    **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "processLine()");
 1584              		.loc 1 326 3
 1585 0fc2 837DFC00 		cmpl	$0, -4(%rbp)
 1586 0fc6 7421     		je	.L84
 1587              		.loc 1 326 3 is_stmt 0 discriminator 1
 1588 0fc8 488B45C0 		movq	-64(%rbp), %rax
 1589 0fcc 488D1500 		leaq	.LC7(%rip), %rdx
 1589      000000
 1590 0fd3 4889D6   		movq	%rdx, %rsi
 1591 0fd6 4889C7   		movq	%rax, %rdi
 1592 0fd9 E8000000 		call	errPrefix@PLT
 1592      00
 1593 0fde 8B45FC   		movl	-4(%rbp), %eax
 1594 0fe1 8945F4   		movl	%eax, -12(%rbp)
 1595 0fe4 E9930000 		jmp	.L77
 1595      00
 1596              	.L84:
 327:svf2csvf.c    **** 	}
 328:svf2csvf.c    **** 	if ( tdo ) {
 1597              		.loc 1 328 5 is_stmt 1
 1598 0fe9 48837DD0 		cmpq	$0, -48(%rbp)
 1598      00
 1599 0fee 7442     		je	.L85
 329:svf2csvf.c    **** 		fStatus = readBytes(&store->tdo, tdo, error);
 1600              		.loc 1 329 13
 1601 0ff0 488B45E8 		movq	-24(%rbp), %rax
 1602 0ff4 488D4828 		leaq	40(%rax), %rcx
 1603 0ff8 488B55C0 		movq	-64(%rbp), %rdx
 1604 0ffc 488B45D0 		movq	-48(%rbp), %rax
 1605 1000 4889C6   		movq	%rax, %rsi
 1606 1003 4889CF   		movq	%rcx, %rdi
 1607 1006 E8000000 		call	readBytes@PLT
 1607      00
 1608 100b 8945FC   		movl	%eax, -4(%rbp)
 330:svf2csvf.c    **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "processLine()");
 1609              		.loc 1 330 3
 1610 100e 837DFC00 		cmpl	$0, -4(%rbp)
 1611 1012 741E     		je	.L85
 1612              		.loc 1 330 3 is_stmt 0 discriminator 1
 1613 1014 488B45C0 		movq	-64(%rbp), %rax
 1614 1018 488D1500 		leaq	.LC7(%rip), %rdx
 1614      000000
 1615 101f 4889D6   		movq	%rdx, %rsi
 1616 1022 4889C7   		movq	%rax, %rdi
 1617 1025 E8000000 		call	errPrefix@PLT
 1617      00
 1618 102a 8B45FC   		movl	-4(%rbp), %eax
 1619 102d 8945F4   		movl	%eax, -12(%rbp)
 1620 1030 EB4A     		jmp	.L77
 1621              	.L85:
 331:svf2csvf.c    **** 	}
 332:svf2csvf.c    **** 	if ( mask ) {
 1622              		.loc 1 332 5 is_stmt 1
 1623 1032 48837DC8 		cmpq	$0, -56(%rbp)
 1623      00
 1624 1037 7442     		je	.L87
 333:svf2csvf.c    **** 		fStatus = readBytes(&store->mask, mask, error);
 1625              		.loc 1 333 13
 1626 1039 488B45E8 		movq	-24(%rbp), %rax
 1627 103d 488D4848 		leaq	72(%rax), %rcx
 1628 1041 488B55C0 		movq	-64(%rbp), %rdx
 1629 1045 488B45C8 		movq	-56(%rbp), %rax
 1630 1049 4889C6   		movq	%rax, %rsi
 1631 104c 4889CF   		movq	%rcx, %rdi
 1632 104f E8000000 		call	readBytes@PLT
 1632      00
 1633 1054 8945FC   		movl	%eax, -4(%rbp)
 334:svf2csvf.c    **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "processLine()");
 1634              		.loc 1 334 3
 1635 1057 837DFC00 		cmpl	$0, -4(%rbp)
 1636 105b 741E     		je	.L87
 1637              		.loc 1 334 3 is_stmt 0 discriminator 1
 1638 105d 488B45C0 		movq	-64(%rbp), %rax
 1639 1061 488D1500 		leaq	.LC7(%rip), %rdx
 1639      000000
 1640 1068 4889D6   		movq	%rdx, %rsi
 1641 106b 4889C7   		movq	%rax, %rdi
 1642 106e E8000000 		call	errPrefix@PLT
 1642      00
 1643 1073 8B45FC   		movl	-4(%rbp), %eax
 1644 1076 8945F4   		movl	%eax, -12(%rbp)
 1645 1079 EB01     		jmp	.L77
 1646              	.L87:
 335:svf2csvf.c    **** 	}
 336:svf2csvf.c    **** 
 337:svf2csvf.c    **** cleanup:
 1647              		.loc 1 337 1 is_stmt 1
 1648 107b 90       		nop
 1649              	.L77:
 338:svf2csvf.c    **** 	return retVal;
 1650              		.loc 1 338 9
 1651 107c 8B45F4   		movl	-12(%rbp), %eax
 339:svf2csvf.c    **** }
 1652              		.loc 1 339 1
 1653 107f C9       		leave
 1654              		.cfi_def_cfa 7, 8
 1655 1080 C3       		ret
 1656              		.cfi_endproc
 1657              	.LFE14:
 1660              	isAllZero:
 1661              	.LFB15:
 340:svf2csvf.c    **** 
 341:svf2csvf.c    **** /**
 342:svf2csvf.c    ****  * Return true if the buffer is all zeros
 343:svf2csvf.c    ****  */
 344:svf2csvf.c    **** static bool isAllZero(struct Buffer *buf) {
 1662              		.loc 1 344 43
 1663              		.cfi_startproc
 1664 1081 F30F1EFA 		endbr64
 1665 1085 55       		pushq	%rbp
 1666              		.cfi_def_cfa_offset 16
 1667              		.cfi_offset 6, -16
 1668 1086 4889E5   		movq	%rsp, %rbp
 1669              		.cfi_def_cfa_register 6
 1670 1089 48897DE8 		movq	%rdi, -24(%rbp)
 345:svf2csvf.c    **** 	const uint8 *p = buf->data;
 1671              		.loc 1 345 15
 1672 108d 488B45E8 		movq	-24(%rbp), %rax
 1673 1091 488B00   		movq	(%rax), %rax
 1674 1094 488945F8 		movq	%rax, -8(%rbp)
 346:svf2csvf.c    **** 	uint32 length = (uint32)buf->length;
 1675              		.loc 1 346 29
 1676 1098 488B45E8 		movq	-24(%rbp), %rax
 1677 109c 488B4008 		movq	8(%rax), %rax
 1678              		.loc 1 346 9
 1679 10a0 8945F4   		movl	%eax, -12(%rbp)
 347:svf2csvf.c    **** 	while ( length-- ) {
 1680              		.loc 1 347 8
 1681 10a3 EB1A     		jmp	.L89
 1682              	.L91:
 348:svf2csvf.c    **** 		if ( *p++ ) {
 1683              		.loc 1 348 10
 1684 10a5 488B45F8 		movq	-8(%rbp), %rax
 1685 10a9 488D5001 		leaq	1(%rax), %rdx
 1686 10ad 488955F8 		movq	%rdx, -8(%rbp)
 1687              		.loc 1 348 8
 1688 10b1 0FB600   		movzbl	(%rax), %eax
 1689              		.loc 1 348 6
 1690 10b4 84C0     		testb	%al, %al
 1691 10b6 7407     		je	.L89
 349:svf2csvf.c    **** 			return false;
 1692              		.loc 1 349 11
 1693 10b8 B8000000 		movl	$0, %eax
 1693      00
 1694 10bd EB12     		jmp	.L90
 1695              	.L89:
 347:svf2csvf.c    **** 	while ( length-- ) {
 1696              		.loc 1 347 16
 1697 10bf 8B45F4   		movl	-12(%rbp), %eax
 1698 10c2 8D50FF   		leal	-1(%rax), %edx
 1699 10c5 8955F4   		movl	%edx, -12(%rbp)
 347:svf2csvf.c    **** 	while ( length-- ) {
 1700              		.loc 1 347 10
 1701 10c8 85C0     		testl	%eax, %eax
 1702 10ca 75D9     		jne	.L91
 350:svf2csvf.c    **** 		}
 351:svf2csvf.c    **** 	}
 352:svf2csvf.c    **** 	return true;
 1703              		.loc 1 352 9
 1704 10cc B8010000 		movl	$1, %eax
 1704      00
 1705              	.L90:
 353:svf2csvf.c    **** }
 1706              		.loc 1 353 1
 1707 10d1 5D       		popq	%rbp
 1708              		.cfi_def_cfa 7, 8
 1709 10d2 C3       		ret
 1710              		.cfi_endproc
 1711              	.LFE15:
 1713              		.section	.rodata
 1714              	.LC8:
 1715 009c 61707065 		.string	"appendSwapped()"
 1715      6E645377 
 1715      61707065 
 1715      64282900 
 1716              		.text
 1718              	appendSwappedAndInterleaved:
 1719              	.LFB16:
 354:svf2csvf.c    **** 
 355:svf2csvf.c    **** // Reverse and interleave the incoming tdi, tdoExpected arrays:
 356:svf2csvf.c    **** // 0123456789ABCDEFGHIJ -> 9J8I7H6G5F4E3D2C1B0A
 357:svf2csvf.c    **** //
 358:svf2csvf.c    **** static FLStatus appendSwappedAndInterleaved(
 359:svf2csvf.c    **** 	struct Buffer *buf, const uint8 *tdi, const uint8 *exp, uint32 count, const char **error)
 360:svf2csvf.c    **** {
 1720              		.loc 1 360 1
 1721              		.cfi_startproc
 1722 10d3 F30F1EFA 		endbr64
 1723 10d7 55       		pushq	%rbp
 1724              		.cfi_def_cfa_offset 16
 1725              		.cfi_offset 6, -16
 1726 10d8 4889E5   		movq	%rsp, %rbp
 1727              		.cfi_def_cfa_register 6
 1728 10db 4883EC50 		subq	$80, %rsp
 1729 10df 48897DD8 		movq	%rdi, -40(%rbp)
 1730 10e3 488975D0 		movq	%rsi, -48(%rbp)
 1731 10e7 488955C8 		movq	%rdx, -56(%rbp)
 1732 10eb 894DC4   		movl	%ecx, -60(%rbp)
 1733 10ee 4C8945B8 		movq	%r8, -72(%rbp)
 361:svf2csvf.c    **** 	FLStatus retVal = FL_SUCCESS;
 1734              		.loc 1 361 11
 1735 10f2 C745E800 		movl	$0, -24(%rbp)
 1735      000000
 362:svf2csvf.c    **** 	BufferStatus bStatus;
 363:svf2csvf.c    **** 	const uint8 *tdiPtr = tdi + count - 1;
 1736              		.loc 1 363 36
 1737 10f9 8B45C4   		movl	-60(%rbp), %eax
 1738 10fc 488D50FF 		leaq	-1(%rax), %rdx
 1739              		.loc 1 363 15
 1740 1100 488B45D0 		movq	-48(%rbp), %rax
 1741 1104 4801D0   		addq	%rdx, %rax
 1742 1107 488945F0 		movq	%rax, -16(%rbp)
 364:svf2csvf.c    **** 	const uint8 *expPtr = exp + count - 1;
 1743              		.loc 1 364 36
 1744 110b 8B45C4   		movl	-60(%rbp), %eax
 1745 110e 488D50FF 		leaq	-1(%rax), %rdx
 1746              		.loc 1 364 15
 1747 1112 488B45C8 		movq	-56(%rbp), %rax
 1748 1116 4801D0   		addq	%rdx, %rax
 1749 1119 488945F8 		movq	%rax, -8(%rbp)
 365:svf2csvf.c    **** 	while ( count-- ) {
 1750              		.loc 1 365 8
 1751 111d E9980000 		jmp	.L93
 1751      00
 1752              	.L96:
 366:svf2csvf.c    **** 		bStatus = bufAppendByte(buf, *tdiPtr--, error);
 1753              		.loc 1 366 39
 1754 1122 488B45F0 		movq	-16(%rbp), %rax
 1755 1126 488D50FF 		leaq	-1(%rax), %rdx
 1756 112a 488955F0 		movq	%rdx, -16(%rbp)
 1757              		.loc 1 366 32
 1758 112e 0FB600   		movzbl	(%rax), %eax
 1759              		.loc 1 366 13
 1760 1131 0FB6C8   		movzbl	%al, %ecx
 1761 1134 488B55B8 		movq	-72(%rbp), %rdx
 1762 1138 488B45D8 		movq	-40(%rbp), %rax
 1763 113c 89CE     		movl	%ecx, %esi
 1764 113e 4889C7   		movq	%rax, %rdi
 1765 1141 E8000000 		call	bufAppendByte@PLT
 1765      00
 1766 1146 8945EC   		movl	%eax, -20(%rbp)
 367:svf2csvf.c    **** 		CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "appendSwapped()");
 1767              		.loc 1 367 3
 1768 1149 837DEC00 		cmpl	$0, -20(%rbp)
 1769 114d 741F     		je	.L94
 1770              		.loc 1 367 3 is_stmt 0 discriminator 1
 1771 114f 488B45B8 		movq	-72(%rbp), %rax
 1772 1153 488D1500 		leaq	.LC8(%rip), %rdx
 1772      000000
 1773 115a 4889D6   		movq	%rdx, %rsi
 1774 115d 4889C7   		movq	%rax, %rdi
 1775 1160 E8000000 		call	errPrefix@PLT
 1775      00
 1776 1165 C745E801 		movl	$1, -24(%rbp)
 1776      000000
 1777 116c EB5E     		jmp	.L95
 1778              	.L94:
 368:svf2csvf.c    **** 		bStatus = bufAppendByte(buf, *expPtr--, error);
 1779              		.loc 1 368 39 is_stmt 1
 1780 116e 488B45F8 		movq	-8(%rbp), %rax
 1781 1172 488D50FF 		leaq	-1(%rax), %rdx
 1782 1176 488955F8 		movq	%rdx, -8(%rbp)
 1783              		.loc 1 368 32
 1784 117a 0FB600   		movzbl	(%rax), %eax
 1785              		.loc 1 368 13
 1786 117d 0FB6C8   		movzbl	%al, %ecx
 1787 1180 488B55B8 		movq	-72(%rbp), %rdx
 1788 1184 488B45D8 		movq	-40(%rbp), %rax
 1789 1188 89CE     		movl	%ecx, %esi
 1790 118a 4889C7   		movq	%rax, %rdi
 1791 118d E8000000 		call	bufAppendByte@PLT
 1791      00
 1792 1192 8945EC   		movl	%eax, -20(%rbp)
 369:svf2csvf.c    **** 		CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "appendSwapped()");
 1793              		.loc 1 369 3
 1794 1195 837DEC00 		cmpl	$0, -20(%rbp)
 1795 1199 741F     		je	.L93
 1796              		.loc 1 369 3 is_stmt 0 discriminator 1
 1797 119b 488B45B8 		movq	-72(%rbp), %rax
 1798 119f 488D1500 		leaq	.LC8(%rip), %rdx
 1798      000000
 1799 11a6 4889D6   		movq	%rdx, %rsi
 1800 11a9 4889C7   		movq	%rax, %rdi
 1801 11ac E8000000 		call	errPrefix@PLT
 1801      00
 1802 11b1 C745E801 		movl	$1, -24(%rbp)
 1802      000000
 1803 11b8 EB12     		jmp	.L95
 1804              	.L93:
 365:svf2csvf.c    **** 		bStatus = bufAppendByte(buf, *tdiPtr--, error);
 1805              		.loc 1 365 15 is_stmt 1
 1806 11ba 8B45C4   		movl	-60(%rbp), %eax
 1807 11bd 8D50FF   		leal	-1(%rax), %edx
 1808 11c0 8955C4   		movl	%edx, -60(%rbp)
 365:svf2csvf.c    **** 		bStatus = bufAppendByte(buf, *tdiPtr--, error);
 1809              		.loc 1 365 10
 1810 11c3 85C0     		testl	%eax, %eax
 1811 11c5 0F8557FF 		jne	.L96
 1811      FFFF
 370:svf2csvf.c    **** 	}
 371:svf2csvf.c    **** cleanup:
 1812              		.loc 1 371 1
 1813 11cb 90       		nop
 1814              	.L95:
 372:svf2csvf.c    **** 	return retVal;
 1815              		.loc 1 372 9
 1816 11cc 8B45E8   		movl	-24(%rbp), %eax
 373:svf2csvf.c    **** }
 1817              		.loc 1 373 1
 1818 11cf C9       		leave
 1819              		.cfi_def_cfa 7, 8
 1820 11d0 C3       		ret
 1821              		.cfi_endproc
 1822              	.LFE16:
 1825              	appendSwapped:
 1826              	.LFB17:
 374:svf2csvf.c    **** 
 375:svf2csvf.c    **** static FLStatus appendSwapped(
 376:svf2csvf.c    **** 	struct Buffer *buf, const uint8 *src, uint32 count, const char **error)
 377:svf2csvf.c    **** {
 1827              		.loc 1 377 1
 1828              		.cfi_startproc
 1829 11d1 F30F1EFA 		endbr64
 1830 11d5 55       		pushq	%rbp
 1831              		.cfi_def_cfa_offset 16
 1832              		.cfi_offset 6, -16
 1833 11d6 4889E5   		movq	%rsp, %rbp
 1834              		.cfi_def_cfa_register 6
 1835 11d9 4883EC30 		subq	$48, %rsp
 1836 11dd 48897DE8 		movq	%rdi, -24(%rbp)
 1837 11e1 488975E0 		movq	%rsi, -32(%rbp)
 1838 11e5 8955DC   		movl	%edx, -36(%rbp)
 1839 11e8 48894DD0 		movq	%rcx, -48(%rbp)
 378:svf2csvf.c    **** 	FLStatus retVal = FL_SUCCESS;
 1840              		.loc 1 378 11
 1841 11ec C745F800 		movl	$0, -8(%rbp)
 1841      000000
 379:svf2csvf.c    **** 	BufferStatus bStatus;
 380:svf2csvf.c    **** 	src += count - 1;
 1842              		.loc 1 380 15
 1843 11f3 8B45DC   		movl	-36(%rbp), %eax
 1844 11f6 83E801   		subl	$1, %eax
 1845 11f9 89C0     		movl	%eax, %eax
 1846              		.loc 1 380 6
 1847 11fb 480145E0 		addq	%rax, -32(%rbp)
 381:svf2csvf.c    **** 	while ( count-- ) {
 1848              		.loc 1 381 8
 1849 11ff EB4C     		jmp	.L99
 1850              	.L101:
 382:svf2csvf.c    **** 		bStatus = bufAppendByte(buf, *src--, error);
 1851              		.loc 1 382 36
 1852 1201 488B45E0 		movq	-32(%rbp), %rax
 1853 1205 488D50FF 		leaq	-1(%rax), %rdx
 1854 1209 488955E0 		movq	%rdx, -32(%rbp)
 1855              		.loc 1 382 32
 1856 120d 0FB600   		movzbl	(%rax), %eax
 1857              		.loc 1 382 13
 1858 1210 0FB6C8   		movzbl	%al, %ecx
 1859 1213 488B55D0 		movq	-48(%rbp), %rdx
 1860 1217 488B45E8 		movq	-24(%rbp), %rax
 1861 121b 89CE     		movl	%ecx, %esi
 1862 121d 4889C7   		movq	%rax, %rdi
 1863 1220 E8000000 		call	bufAppendByte@PLT
 1863      00
 1864 1225 8945FC   		movl	%eax, -4(%rbp)
 383:svf2csvf.c    **** 		CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "appendSwapped()");
 1865              		.loc 1 383 3
 1866 1228 837DFC00 		cmpl	$0, -4(%rbp)
 1867 122c 741F     		je	.L99
 1868              		.loc 1 383 3 is_stmt 0 discriminator 1
 1869 122e 488B45D0 		movq	-48(%rbp), %rax
 1870 1232 488D1500 		leaq	.LC8(%rip), %rdx
 1870      000000
 1871 1239 4889D6   		movq	%rdx, %rsi
 1872 123c 4889C7   		movq	%rax, %rdi
 1873 123f E8000000 		call	errPrefix@PLT
 1873      00
 1874 1244 C745F801 		movl	$1, -8(%rbp)
 1874      000000
 1875 124b EB0E     		jmp	.L100
 1876              	.L99:
 381:svf2csvf.c    **** 	while ( count-- ) {
 1877              		.loc 1 381 15 is_stmt 1
 1878 124d 8B45DC   		movl	-36(%rbp), %eax
 1879 1250 8D50FF   		leal	-1(%rax), %edx
 1880 1253 8955DC   		movl	%edx, -36(%rbp)
 381:svf2csvf.c    **** 	while ( count-- ) {
 1881              		.loc 1 381 10
 1882 1256 85C0     		testl	%eax, %eax
 1883 1258 75A7     		jne	.L101
 384:svf2csvf.c    **** 	}
 385:svf2csvf.c    **** cleanup:
 1884              		.loc 1 385 1
 1885 125a 90       		nop
 1886              	.L100:
 386:svf2csvf.c    **** 	return retVal;
 1887              		.loc 1 386 9
 1888 125b 8B45F8   		movl	-8(%rbp), %eax
 387:svf2csvf.c    **** }
 1889              		.loc 1 387 1
 1890 125e C9       		leave
 1891              		.cfi_def_cfa 7, 8
 1892 125f C3       		ret
 1893              		.cfi_endproc
 1894              	.LFE17:
 1896              		.section	.rodata
 1897              	.LC9:
 1898 00ac 52554E54 		.string	"RUNTEST"
 1898      45535400 
 1899              	.LC10:
 1900 00b4 49444C45 		.string	"IDLE"
 1900      00
 1901              	.LC11:
 1902 00b9 54434B00 		.string	"TCK"
 1903              	.LC12:
 1904 00bd 53454300 		.string	"SEC"
 1905 00c1 00000000 		.align 8
 1905      000000
 1906              	.LC14:
 1907 00c8 70617273 		.string	"parseLine(): RUNTEST must be of the form \"RUNTEST [IDLE] <number> TCK|SEC [<number> TCK|
 1907      654C696E 
 1907      6528293A 
 1907      2052554E 
 1907      54455354 
 1908              	.LC15:
 1909 0136 454E4453 		.string	"ENDSTATE IDLE"
 1909      54415445 
 1909      2049444C 
 1909      4500
 1910              	.LC16:
 1911 0144 70617273 		.string	"parseLine()"
 1911      654C696E 
 1911      65282900 
 1912              	.LC17:
 1913 0150 54444900 		.string	"TDI"
 1914 0154 00000000 		.align 8
 1915              	.LC18:
 1916 0158 70617273 		.string	"parseLine(): %sR must be of the form \"%sR ... TDI (<tdi>)\""
 1916      654C696E 
 1916      6528293A 
 1916      20257352 
 1916      206D7573 
 1917              	.LC19:
 1918 0193 534D4153 		.string	"SMASK"
 1918      4B00
 1919 0199 00000000 		.align 8
 1919      000000
 1920              	.LC20:
 1921 01a0 70617273 		.string	"parseLine(): %sR must be of the form \"%sR ... SMASK (<smask>)\""
 1921      654C696E 
 1921      6528293A 
 1921      20257352 
 1921      206D7573 
 1922              	.LC21:
 1923 01df 54444F00 		.string	"TDO"
 1924 01e3 00000000 		.align 8
 1924      00
 1925              	.LC22:
 1926 01e8 70617273 		.string	"parseLine(): %sR must be of the form \"%sR ... TDO (<tdo>)\""
 1926      654C696E 
 1926      6528293A 
 1926      20257352 
 1926      206D7573 
 1927              	.LC23:
 1928 0223 4D41534B 		.string	"MASK"
 1928      00
 1929              		.align 8
 1930              	.LC24:
 1931 0228 70617273 		.string	"parseLine(): %sR must be of the form \"%sR ... MASK (<mask>)\""
 1931      654C696E 
 1931      6528293A 
 1931      20257352 
 1931      206D7573 
 1932 0265 000000   		.align 8
 1933              	.LC25:
 1934 0268 70617273 		.string	"parseLine(): Junk in [HTS][IR]R line at column %d"
 1934      654C696E 
 1934      6528293A 
 1934      204A756E 
 1934      6B20696E 
 1935 029a 00000000 		.align 8
 1935      0000
 1936              	.LC26:
 1937 02a0 70617273 		.string	"parseLine(): Unrecognised command \"%s\"\n"
 1937      654C696E 
 1937      6528293A 
 1937      20556E72 
 1937      65636F67 
 1938              		.text
 1939              		.globl	parseLine
 1941              	parseLine:
 1942              	.LFB18:
 388:svf2csvf.c    **** 
 389:svf2csvf.c    **** /**
 390:svf2csvf.c    ****  * Parse the supplied SVF line, calling processLine() for shift operations as necessary.
 391:svf2csvf.c    ****  */
 392:svf2csvf.c    **** FLStatus parseLine(
 393:svf2csvf.c    **** 	struct ParseContext *cxt, const struct Buffer *lineBuf, struct Buffer *csvfBuf,
 394:svf2csvf.c    **** 	uint32 *maxBufSize, const char **error)
 395:svf2csvf.c    **** {
 1943              		.loc 1 395 1
 1944              		.cfi_startproc
 1945 1260 F30F1EFA 		endbr64
 1946 1264 55       		pushq	%rbp
 1947              		.cfi_def_cfa_offset 16
 1948              		.cfi_offset 6, -16
 1949 1265 4889E5   		movq	%rsp, %rbp
 1950              		.cfi_def_cfa_register 6
 1951 1268 4881EC30 		subq	$304, %rsp
 1951      010000
 1952 126f 4889BDF8 		movq	%rdi, -264(%rbp)
 1952      FEFFFF
 1953 1276 4889B5F0 		movq	%rsi, -272(%rbp)
 1953      FEFFFF
 1954 127d 488995E8 		movq	%rdx, -280(%rbp)
 1954      FEFFFF
 1955 1284 48898DE0 		movq	%rcx, -288(%rbp)
 1955      FEFFFF
 1956 128b 4C8985D8 		movq	%r8, -296(%rbp)
 1956      FEFFFF
 1957              		.loc 1 395 1
 1958 1292 64488B04 		movq	%fs:40, %rax
 1958      25280000 
 1958      00
 1959 129b 488945F8 		movq	%rax, -8(%rbp)
 1960 129f 31C0     		xorl	%eax, %eax
 396:svf2csvf.c    **** 	FLStatus retVal = FL_SUCCESS, fStatus;
 1961              		.loc 1 396 11
 1962 12a1 C78504FF 		movl	$0, -252(%rbp)
 1962      FFFF0000 
 1962      0000
 397:svf2csvf.c    **** 	BufferStatus bStatus;
 398:svf2csvf.c    **** 	char *const line = (char *)lineBuf->data;
 1963              		.loc 1 398 14
 1964 12ab 488B85F0 		movq	-272(%rbp), %rax
 1964      FEFFFF
 1965 12b2 488B00   		movq	(%rax), %rax
 1966 12b5 48898558 		movq	%rax, -168(%rbp)
 1966      FFFFFF
 399:svf2csvf.c    **** 	char *const lineEnd = (char *)lineBuf->data + lineBuf->length - 1;  // Space for NUL-terminator
 1967              		.loc 1 399 39
 1968 12bc 488B85F0 		movq	-272(%rbp), %rax
 1968      FEFFFF
 1969 12c3 488B10   		movq	(%rax), %rdx
 1970              		.loc 1 399 55
 1971 12c6 488B85F0 		movq	-272(%rbp), %rax
 1971      FEFFFF
 1972 12cd 488B4008 		movq	8(%rax), %rax
 1973              		.loc 1 399 64
 1974 12d1 4883E801 		subq	$1, %rax
 1975              		.loc 1 399 14
 1976 12d5 4801D0   		addq	%rdx, %rax
 1977 12d8 48898560 		movq	%rax, -160(%rbp)
 1977      FFFFFF
 400:svf2csvf.c    **** 	struct Buffer tmpHead = {0,};
 1978              		.loc 1 400 16
 1979 12df 48C78570 		movq	$0, -144(%rbp)
 1979      FFFFFF00 
 1979      000000
 1980 12ea 48C78578 		movq	$0, -136(%rbp)
 1980      FFFFFF00 
 1980      000000
 1981 12f5 48C74580 		movq	$0, -128(%rbp)
 1981      00000000 
 1982 12fd 48C74588 		movq	$0, -120(%rbp)
 1982      00000000 
 401:svf2csvf.c    **** 	struct Buffer tmpBody1 = {0,};
 1983              		.loc 1 401 16
 1984 1305 48C74590 		movq	$0, -112(%rbp)
 1984      00000000 
 1985 130d 48C74598 		movq	$0, -104(%rbp)
 1985      00000000 
 1986 1315 48C745A0 		movq	$0, -96(%rbp)
 1986      00000000 
 1987 131d 48C745A8 		movq	$0, -88(%rbp)
 1987      00000000 
 402:svf2csvf.c    **** 	struct Buffer tmpBody2 = {0,};
 1988              		.loc 1 402 16
 1989 1325 48C745B0 		movq	$0, -80(%rbp)
 1989      00000000 
 1990 132d 48C745B8 		movq	$0, -72(%rbp)
 1990      00000000 
 1991 1335 48C745C0 		movq	$0, -64(%rbp)
 1991      00000000 
 1992 133d 48C745C8 		movq	$0, -56(%rbp)
 1992      00000000 
 403:svf2csvf.c    **** 	struct Buffer tmpTail = {0,};
 1993              		.loc 1 403 16
 1994 1345 48C745D0 		movq	$0, -48(%rbp)
 1994      00000000 
 1995 134d 48C745D8 		movq	$0, -40(%rbp)
 1995      00000000 
 1996 1355 48C745E0 		movq	$0, -32(%rbp)
 1996      00000000 
 1997 135d 48C745E8 		movq	$0, -24(%rbp)
 1997      00000000 
 404:svf2csvf.c    **** 	if ( !strncmp(line, "RUNTEST", 7) ) {
 1998              		.loc 1 404 8
 1999 1365 488B8558 		movq	-168(%rbp), %rax
 1999      FFFFFF
 2000 136c BA070000 		movl	$7, %edx
 2000      00
 2001 1371 488D0D00 		leaq	.LC9(%rip), %rcx
 2001      000000
 2002 1378 4889CE   		movq	%rcx, %rsi
 2003 137b 4889C7   		movq	%rax, %rdi
 2004 137e E8000000 		call	strncmp@PLT
 2004      00
 2005              		.loc 1 404 5
 2006 1383 85C0     		testl	%eax, %eax
 2007 1385 0F857204 		jne	.L104
 2007      0000
 2008              	.LBB3:
 405:svf2csvf.c    **** 		// RUNTEST line is of the form "RUNTEST [IDLE] <count> TCK [ENDSTATE IDLE]"
 406:svf2csvf.c    **** 		const char *p = line + 7;
 2009              		.loc 1 406 15
 2010 138b 488B8558 		movq	-168(%rbp), %rax
 2010      FFFFFF
 2011 1392 4883C007 		addq	$7, %rax
 2012 1396 48898520 		movq	%rax, -224(%rbp)
 2012      FFFFFF
 407:svf2csvf.c    **** 		char *end;
 408:svf2csvf.c    **** 		double count1, count2;
 409:svf2csvf.c    **** 		CHOMP();
 2013              		.loc 1 409 3
 2014 139d EB08     		jmp	.L105
 2015              	.L106:
 2016              		.loc 1 409 3 is_stmt 0 discriminator 4
 2017 139f 48838520 		addq	$1, -224(%rbp)
 2017      FFFFFF01 
 2018              	.L105:
 2019              		.loc 1 409 3 discriminator 1
 2020 13a7 488B8520 		movq	-224(%rbp), %rax
 2020      FFFFFF
 2021 13ae 0FB600   		movzbl	(%rax), %eax
 2022 13b1 3C20     		cmpb	$32, %al
 2023 13b3 74EA     		je	.L106
 2024              		.loc 1 409 3 discriminator 3
 2025 13b5 488B8520 		movq	-224(%rbp), %rax
 2025      FFFFFF
 2026 13bc 0FB600   		movzbl	(%rax), %eax
 2027 13bf 3C09     		cmpb	$9, %al
 2028 13c1 74DC     		je	.L106
 410:svf2csvf.c    **** 		if ( !strncmp(p, "IDLE", 4) ) {
 2029              		.loc 1 410 9 is_stmt 1
 2030 13c3 488B8520 		movq	-224(%rbp), %rax
 2030      FFFFFF
 2031 13ca BA040000 		movl	$4, %edx
 2031      00
 2032 13cf 488D0D00 		leaq	.LC10(%rip), %rcx
 2032      000000
 2033 13d6 4889CE   		movq	%rcx, %rsi
 2034 13d9 4889C7   		movq	%rax, %rdi
 2035 13dc E8000000 		call	strncmp@PLT
 2035      00
 2036              		.loc 1 410 6
 2037 13e1 85C0     		testl	%eax, %eax
 2038 13e3 752E     		jne	.L107
 411:svf2csvf.c    **** 			p += 4;
 2039              		.loc 1 411 6
 2040 13e5 48838520 		addq	$4, -224(%rbp)
 2040      FFFFFF04 
 412:svf2csvf.c    **** 			CHOMP();
 2041              		.loc 1 412 4
 2042 13ed EB08     		jmp	.L108
 2043              	.L109:
 2044              		.loc 1 412 4 is_stmt 0 discriminator 4
 2045 13ef 48838520 		addq	$1, -224(%rbp)
 2045      FFFFFF01 
 2046              	.L108:
 2047              		.loc 1 412 4 discriminator 1
 2048 13f7 488B8520 		movq	-224(%rbp), %rax
 2048      FFFFFF
 2049 13fe 0FB600   		movzbl	(%rax), %eax
 2050 1401 3C20     		cmpb	$32, %al
 2051 1403 74EA     		je	.L109
 2052              		.loc 1 412 4 discriminator 3
 2053 1405 488B8520 		movq	-224(%rbp), %rax
 2053      FFFFFF
 2054 140c 0FB600   		movzbl	(%rax), %eax
 2055 140f 3C09     		cmpb	$9, %al
 2056 1411 74DC     		je	.L109
 2057              	.L107:
 413:svf2csvf.c    **** 		}
 414:svf2csvf.c    **** 		count1 = strtod(p, &end);
 2058              		.loc 1 414 12 is_stmt 1
 2059 1413 488D9518 		leaq	-232(%rbp), %rdx
 2059      FFFFFF
 2060 141a 488B8520 		movq	-224(%rbp), %rax
 2060      FFFFFF
 2061 1421 4889D6   		movq	%rdx, %rsi
 2062 1424 4889C7   		movq	%rax, %rdi
 2063 1427 E8000000 		call	strtod@PLT
 2063      00
 2064 142c 66480F7E 		movq	%xmm0, %rax
 2064      C0
 2065 1431 48898528 		movq	%rax, -216(%rbp)
 2065      FFFFFF
 415:svf2csvf.c    **** 		p = end;
 2066              		.loc 1 415 5
 2067 1438 488B8518 		movq	-232(%rbp), %rax
 2067      FFFFFF
 2068 143f 48898520 		movq	%rax, -224(%rbp)
 2068      FFFFFF
 416:svf2csvf.c    **** 		CHOMP();
 2069              		.loc 1 416 3
 2070 1446 EB08     		jmp	.L110
 2071              	.L111:
 2072              		.loc 1 416 3 is_stmt 0 discriminator 4
 2073 1448 48838520 		addq	$1, -224(%rbp)
 2073      FFFFFF01 
 2074              	.L110:
 2075              		.loc 1 416 3 discriminator 1
 2076 1450 488B8520 		movq	-224(%rbp), %rax
 2076      FFFFFF
 2077 1457 0FB600   		movzbl	(%rax), %eax
 2078 145a 3C20     		cmpb	$32, %al
 2079 145c 74EA     		je	.L111
 2080              		.loc 1 416 3 discriminator 3
 2081 145e 488B8520 		movq	-224(%rbp), %rax
 2081      FFFFFF
 2082 1465 0FB600   		movzbl	(%rax), %eax
 2083 1468 3C09     		cmpb	$9, %al
 2084 146a 74DC     		je	.L111
 417:svf2csvf.c    **** 		if ( !strncmp(p, "TCK", 3) ) {
 2085              		.loc 1 417 9 is_stmt 1
 2086 146c 488B8520 		movq	-224(%rbp), %rax
 2086      FFFFFF
 2087 1473 BA030000 		movl	$3, %edx
 2087      00
 2088 1478 488D0D00 		leaq	.LC11(%rip), %rcx
 2088      000000
 2089 147f 4889CE   		movq	%rcx, %rsi
 2090 1482 4889C7   		movq	%rax, %rdi
 2091 1485 E8000000 		call	strncmp@PLT
 2091      00
 2092              		.loc 1 417 6
 2093 148a 85C0     		testl	%eax, %eax
 2094 148c 7533     		jne	.L112
 418:svf2csvf.c    **** 			p += 3;
 2095              		.loc 1 418 6
 2096 148e 48838520 		addq	$3, -224(%rbp)
 2096      FFFFFF03 
 419:svf2csvf.c    **** 			CHOMP();
 2097              		.loc 1 419 4
 2098 1496 EB08     		jmp	.L113
 2099              	.L114:
 2100              		.loc 1 419 4 is_stmt 0 discriminator 4
 2101 1498 48838520 		addq	$1, -224(%rbp)
 2101      FFFFFF01 
 2102              	.L113:
 2103              		.loc 1 419 4 discriminator 1
 2104 14a0 488B8520 		movq	-224(%rbp), %rax
 2104      FFFFFF
 2105 14a7 0FB600   		movzbl	(%rax), %eax
 2106 14aa 3C20     		cmpb	$32, %al
 2107 14ac 74EA     		je	.L114
 2108              		.loc 1 419 4 discriminator 3
 2109 14ae 488B8520 		movq	-224(%rbp), %rax
 2109      FFFFFF
 2110 14b5 0FB600   		movzbl	(%rax), %eax
 2111 14b8 3C09     		cmpb	$9, %al
 2112 14ba 74DC     		je	.L114
 2113 14bc E9960000 		jmp	.L115
 2113      00
 2114              	.L112:
 420:svf2csvf.c    **** 		} else if ( !strncmp(p, "SEC", 3) ) {
 2115              		.loc 1 420 16 is_stmt 1
 2116 14c1 488B8520 		movq	-224(%rbp), %rax
 2116      FFFFFF
 2117 14c8 BA030000 		movl	$3, %edx
 2117      00
 2118 14cd 488D0D00 		leaq	.LC12(%rip), %rcx
 2118      000000
 2119 14d4 4889CE   		movq	%rcx, %rsi
 2120 14d7 4889C7   		movq	%rax, %rdi
 2121 14da E8000000 		call	strncmp@PLT
 2121      00
 2122              		.loc 1 420 13
 2123 14df 85C0     		testl	%eax, %eax
 2124 14e1 754C     		jne	.L116
 421:svf2csvf.c    **** 			count1 *= 1000000.0;
 2125              		.loc 1 421 11
 2126 14e3 F20F108D 		movsd	-216(%rbp), %xmm1
 2126      28FFFFFF 
 2127 14eb F20F1005 		movsd	.LC13(%rip), %xmm0
 2127      00000000 
 2128 14f3 F20F59C1 		mulsd	%xmm1, %xmm0
 2129 14f7 F20F1185 		movsd	%xmm0, -216(%rbp)
 2129      28FFFFFF 
 422:svf2csvf.c    **** 			p += 3;
 2130              		.loc 1 422 6
 2131 14ff 48838520 		addq	$3, -224(%rbp)
 2131      FFFFFF03 
 423:svf2csvf.c    **** 			CHOMP();
 2132              		.loc 1 423 4
 2133 1507 EB08     		jmp	.L117
 2134              	.L118:
 2135              		.loc 1 423 4 is_stmt 0 discriminator 4
 2136 1509 48838520 		addq	$1, -224(%rbp)
 2136      FFFFFF01 
 2137              	.L117:
 2138              		.loc 1 423 4 discriminator 1
 2139 1511 488B8520 		movq	-224(%rbp), %rax
 2139      FFFFFF
 2140 1518 0FB600   		movzbl	(%rax), %eax
 2141 151b 3C20     		cmpb	$32, %al
 2142 151d 74EA     		je	.L118
 2143              		.loc 1 423 4 discriminator 3
 2144 151f 488B8520 		movq	-224(%rbp), %rax
 2144      FFFFFF
 2145 1526 0FB600   		movzbl	(%rax), %eax
 2146 1529 3C09     		cmpb	$9, %al
 2147 152b 74DC     		je	.L118
 2148 152d EB28     		jmp	.L115
 2149              	.L116:
 424:svf2csvf.c    **** 		} else {
 425:svf2csvf.c    **** 			CHECK_STATUS(
 2150              		.loc 1 425 4 is_stmt 1 discriminator 1
 2151 152f 488B85D8 		movq	-296(%rbp), %rax
 2151      FEFFFF
 2152 1536 488D1500 		leaq	.LC14(%rip), %rdx
 2152      000000
 2153 153d 4889D6   		movq	%rdx, %rsi
 2154 1540 4889C7   		movq	%rax, %rdi
 2155 1543 E8000000 		call	errPrefix@PLT
 2155      00
 2156 1548 C78504FF 		movl	$10, -252(%rbp)
 2156      FFFF0A00 
 2156      0000
 2157 1552 E9C71900 		jmp	.L136
 2157      00
 2158              	.L115:
 426:svf2csvf.c    **** 				true, FL_SVF_PARSE_ERR, cleanup,
 427:svf2csvf.c    **** 				"parseLine(): RUNTEST must be of the form \"RUNTEST [IDLE] <number> TCK|SEC [<number> TCK|SEC] 
 428:svf2csvf.c    **** 		}
 429:svf2csvf.c    **** 		count2 = strtod(p, &end);
 2159              		.loc 1 429 12
 2160 1557 488D9518 		leaq	-232(%rbp), %rdx
 2160      FFFFFF
 2161 155e 488B8520 		movq	-224(%rbp), %rax
 2161      FFFFFF
 2162 1565 4889D6   		movq	%rdx, %rsi
 2163 1568 4889C7   		movq	%rax, %rdi
 2164 156b E8000000 		call	strtod@PLT
 2164      00
 2165 1570 66480F7E 		movq	%xmm0, %rax
 2165      C0
 2166 1575 48898530 		movq	%rax, -208(%rbp)
 2166      FFFFFF
 430:svf2csvf.c    **** 		if ( end != p ) {
 2167              		.loc 1 430 12
 2168 157c 488B8518 		movq	-232(%rbp), %rax
 2168      FFFFFF
 2169              		.loc 1 430 6
 2170 1583 48398520 		cmpq	%rax, -224(%rbp)
 2170      FFFFFF
 2171 158a 0F84F200 		je	.L120
 2171      0000
 431:svf2csvf.c    **** 			p = end;
 2172              		.loc 1 431 6
 2173 1590 488B8518 		movq	-232(%rbp), %rax
 2173      FFFFFF
 2174 1597 48898520 		movq	%rax, -224(%rbp)
 2174      FFFFFF
 432:svf2csvf.c    **** 			CHOMP();
 2175              		.loc 1 432 4
 2176 159e EB08     		jmp	.L121
 2177              	.L122:
 2178              		.loc 1 432 4 is_stmt 0 discriminator 4
 2179 15a0 48838520 		addq	$1, -224(%rbp)
 2179      FFFFFF01 
 2180              	.L121:
 2181              		.loc 1 432 4 discriminator 1
 2182 15a8 488B8520 		movq	-224(%rbp), %rax
 2182      FFFFFF
 2183 15af 0FB600   		movzbl	(%rax), %eax
 2184 15b2 3C20     		cmpb	$32, %al
 2185 15b4 74EA     		je	.L122
 2186              		.loc 1 432 4 discriminator 3
 2187 15b6 488B8520 		movq	-224(%rbp), %rax
 2187      FFFFFF
 2188 15bd 0FB600   		movzbl	(%rax), %eax
 2189 15c0 3C09     		cmpb	$9, %al
 2190 15c2 74DC     		je	.L122
 433:svf2csvf.c    **** 			if ( !strncmp(p, "TCK", 3) ) {
 2191              		.loc 1 433 10 is_stmt 1
 2192 15c4 488B8520 		movq	-224(%rbp), %rax
 2192      FFFFFF
 2193 15cb BA030000 		movl	$3, %edx
 2193      00
 2194 15d0 488D0D00 		leaq	.LC11(%rip), %rcx
 2194      000000
 2195 15d7 4889CE   		movq	%rcx, %rsi
 2196 15da 4889C7   		movq	%rax, %rdi
 2197 15dd E8000000 		call	strncmp@PLT
 2197      00
 2198              		.loc 1 433 7
 2199 15e2 85C0     		testl	%eax, %eax
 2200 15e4 7530     		jne	.L123
 434:svf2csvf.c    **** 				p += 3;
 2201              		.loc 1 434 7
 2202 15e6 48838520 		addq	$3, -224(%rbp)
 2202      FFFFFF03 
 435:svf2csvf.c    **** 				CHOMP();
 2203              		.loc 1 435 5
 2204 15ee EB08     		jmp	.L124
 2205              	.L125:
 2206              		.loc 1 435 5 is_stmt 0 discriminator 4
 2207 15f0 48838520 		addq	$1, -224(%rbp)
 2207      FFFFFF01 
 2208              	.L124:
 2209              		.loc 1 435 5 discriminator 1
 2210 15f8 488B8520 		movq	-224(%rbp), %rax
 2210      FFFFFF
 2211 15ff 0FB600   		movzbl	(%rax), %eax
 2212 1602 3C20     		cmpb	$32, %al
 2213 1604 74EA     		je	.L125
 2214              		.loc 1 435 5 discriminator 3
 2215 1606 488B8520 		movq	-224(%rbp), %rax
 2215      FFFFFF
 2216 160d 0FB600   		movzbl	(%rax), %eax
 2217 1610 3C09     		cmpb	$9, %al
 2218 1612 74DC     		je	.L125
 2219 1614 EB6C     		jmp	.L120
 2220              	.L123:
 436:svf2csvf.c    **** 			} else if ( !strncmp(p, "SEC", 3) ) {
 2221              		.loc 1 436 17 is_stmt 1
 2222 1616 488B8520 		movq	-224(%rbp), %rax
 2222      FFFFFF
 2223 161d BA030000 		movl	$3, %edx
 2223      00
 2224 1622 488D0D00 		leaq	.LC12(%rip), %rcx
 2224      000000
 2225 1629 4889CE   		movq	%rcx, %rsi
 2226 162c 4889C7   		movq	%rax, %rdi
 2227 162f E8000000 		call	strncmp@PLT
 2227      00
 2228              		.loc 1 436 14
 2229 1634 85C0     		testl	%eax, %eax
 2230 1636 754A     		jne	.L120
 437:svf2csvf.c    **** 				count2 *= 1000000.0;
 2231              		.loc 1 437 12
 2232 1638 F20F108D 		movsd	-208(%rbp), %xmm1
 2232      30FFFFFF 
 2233 1640 F20F1005 		movsd	.LC13(%rip), %xmm0
 2233      00000000 
 2234 1648 F20F59C1 		mulsd	%xmm1, %xmm0
 2235 164c F20F1185 		movsd	%xmm0, -208(%rbp)
 2235      30FFFFFF 
 438:svf2csvf.c    **** 				p += 3;
 2236              		.loc 1 438 7
 2237 1654 48838520 		addq	$3, -224(%rbp)
 2237      FFFFFF03 
 439:svf2csvf.c    **** 				CHOMP();
 2238              		.loc 1 439 5
 2239 165c EB08     		jmp	.L126
 2240              	.L127:
 2241              		.loc 1 439 5 is_stmt 0 discriminator 4
 2242 165e 48838520 		addq	$1, -224(%rbp)
 2242      FFFFFF01 
 2243              	.L126:
 2244              		.loc 1 439 5 discriminator 1
 2245 1666 488B8520 		movq	-224(%rbp), %rax
 2245      FFFFFF
 2246 166d 0FB600   		movzbl	(%rax), %eax
 2247 1670 3C20     		cmpb	$32, %al
 2248 1672 74EA     		je	.L127
 2249              		.loc 1 439 5 discriminator 3
 2250 1674 488B8520 		movq	-224(%rbp), %rax
 2250      FFFFFF
 2251 167b 0FB600   		movzbl	(%rax), %eax
 2252 167e 3C09     		cmpb	$9, %al
 2253 1680 74DC     		je	.L127
 2254              	.L120:
 440:svf2csvf.c    **** 			}
 441:svf2csvf.c    **** 		}
 442:svf2csvf.c    **** 		if ( !strncmp(p, "ENDSTATE IDLE", 13) ) {
 2255              		.loc 1 442 9 is_stmt 1
 2256 1682 488B8520 		movq	-224(%rbp), %rax
 2256      FFFFFF
 2257 1689 BA0D0000 		movl	$13, %edx
 2257      00
 2258 168e 488D0D00 		leaq	.LC15(%rip), %rcx
 2258      000000
 2259 1695 4889CE   		movq	%rcx, %rsi
 2260 1698 4889C7   		movq	%rax, %rdi
 2261 169b E8000000 		call	strncmp@PLT
 2261      00
 2262              		.loc 1 442 6
 2263 16a0 85C0     		testl	%eax, %eax
 2264 16a2 7512     		jne	.L129
 443:svf2csvf.c    **** 			p += 13;
 2265              		.loc 1 443 6
 2266 16a4 48838520 		addq	$13, -224(%rbp)
 2266      FFFFFF0D 
 444:svf2csvf.c    **** 		}
 445:svf2csvf.c    **** 		CHOMP();
 2267              		.loc 1 445 3
 2268 16ac EB08     		jmp	.L129
 2269              	.L130:
 2270              		.loc 1 445 3 is_stmt 0 discriminator 4
 2271 16ae 48838520 		addq	$1, -224(%rbp)
 2271      FFFFFF01 
 2272              	.L129:
 2273              		.loc 1 445 3 discriminator 1
 2274 16b6 488B8520 		movq	-224(%rbp), %rax
 2274      FFFFFF
 2275 16bd 0FB600   		movzbl	(%rax), %eax
 2276 16c0 3C20     		cmpb	$32, %al
 2277 16c2 74EA     		je	.L130
 2278              		.loc 1 445 3 discriminator 3
 2279 16c4 488B8520 		movq	-224(%rbp), %rax
 2279      FFFFFF
 2280 16cb 0FB600   		movzbl	(%rax), %eax
 2281 16ce 3C09     		cmpb	$9, %al
 2282 16d0 74DC     		je	.L130
 446:svf2csvf.c    **** 		if ( count2 > count1 ) {
 2283              		.loc 1 446 6 is_stmt 1
 2284 16d2 F20F1085 		movsd	-208(%rbp), %xmm0
 2284      30FFFFFF 
 2285 16da 660F2F85 		comisd	-216(%rbp), %xmm0
 2285      28FFFFFF 
 2286 16e2 7610     		jbe	.L131
 447:svf2csvf.c    **** 			count1 = count2;
 2287              		.loc 1 447 11
 2288 16e4 F20F1085 		movsd	-208(%rbp), %xmm0
 2288      30FFFFFF 
 2289 16ec F20F1185 		movsd	%xmm0, -216(%rbp)
 2289      28FFFFFF 
 2290              	.L131:
 448:svf2csvf.c    **** 		}
 449:svf2csvf.c    **** 		CHECK_STATUS(
 2291              		.loc 1 449 3
 2292 16f4 488B8520 		movq	-224(%rbp), %rax
 2292      FFFFFF
 2293 16fb 483B8560 		cmpq	-160(%rbp), %rax
 2293      FFFFFF
 2294 1702 7428     		je	.L133
 2295              		.loc 1 449 3 is_stmt 0 discriminator 1
 2296 1704 488B85D8 		movq	-296(%rbp), %rax
 2296      FEFFFF
 2297 170b 488D1500 		leaq	.LC14(%rip), %rdx
 2297      000000
 2298 1712 4889D6   		movq	%rdx, %rsi
 2299 1715 4889C7   		movq	%rax, %rdi
 2300 1718 E8000000 		call	errPrefix@PLT
 2300      00
 2301 171d C78504FF 		movl	$10, -252(%rbp)
 2301      FFFF0A00 
 2301      0000
 2302 1727 E9F21700 		jmp	.L136
 2302      00
 2303              	.L133:
 450:svf2csvf.c    **** 			p != lineEnd, FL_SVF_PARSE_ERR, cleanup,
 451:svf2csvf.c    **** 			"parseLine(): RUNTEST must be of the form \"RUNTEST [IDLE] <number> TCK|SEC [<number> TCK|SEC] [
 452:svf2csvf.c    **** 		cxt->numCommands++;
 2304              		.loc 1 452 6 is_stmt 1
 2305 172c 488B85F8 		movq	-264(%rbp), %rax
 2305      FEFFFF
 2306 1733 8B809C02 		movl	668(%rax), %eax
 2306      0000
 2307              		.loc 1 452 19
 2308 1739 8D5001   		leal	1(%rax), %edx
 2309 173c 488B85F8 		movq	-264(%rbp), %rax
 2309      FEFFFF
 2310 1743 89909C02 		movl	%edx, 668(%rax)
 2310      0000
 453:svf2csvf.c    **** 		bStatus = bufAppendByte(csvfBuf, XRUNTEST, error);
 2311              		.loc 1 453 13
 2312 1749 488B95D8 		movq	-296(%rbp), %rdx
 2312      FEFFFF
 2313 1750 488B85E8 		movq	-280(%rbp), %rax
 2313      FEFFFF
 2314 1757 BE040000 		movl	$4, %esi
 2314      00
 2315 175c 4889C7   		movq	%rax, %rdi
 2316 175f E8000000 		call	bufAppendByte@PLT
 2316      00
 2317 1764 898514FF 		movl	%eax, -236(%rbp)
 2317      FFFF
 454:svf2csvf.c    **** 		CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 2318              		.loc 1 454 3
 2319 176a 83BD14FF 		cmpl	$0, -236(%rbp)
 2319      FFFF00
 2320 1771 7428     		je	.L134
 2321              		.loc 1 454 3 is_stmt 0 discriminator 1
 2322 1773 488B85D8 		movq	-296(%rbp), %rax
 2322      FEFFFF
 2323 177a 488D1500 		leaq	.LC16(%rip), %rdx
 2323      000000
 2324 1781 4889D6   		movq	%rdx, %rsi
 2325 1784 4889C7   		movq	%rax, %rdi
 2326 1787 E8000000 		call	errPrefix@PLT
 2326      00
 2327 178c C78504FF 		movl	$1, -252(%rbp)
 2327      FFFF0100 
 2327      0000
 2328 1796 E9831700 		jmp	.L136
 2328      00
 2329              	.L134:
 455:svf2csvf.c    **** 		bStatus = bufAppendLongBE(csvfBuf, (uint32)count1, error);
 2330              		.loc 1 455 13 is_stmt 1
 2331 179b F20F1085 		movsd	-216(%rbp), %xmm0
 2331      28FFFFFF 
 2332 17a3 F2480F2C 		cvttsd2siq	%xmm0, %rax
 2332      C0
 2333 17a8 89C1     		movl	%eax, %ecx
 2334 17aa 488B95D8 		movq	-296(%rbp), %rdx
 2334      FEFFFF
 2335 17b1 488B85E8 		movq	-280(%rbp), %rax
 2335      FEFFFF
 2336 17b8 89CE     		movl	%ecx, %esi
 2337 17ba 4889C7   		movq	%rax, %rdi
 2338 17bd E8000000 		call	bufAppendLongBE@PLT
 2338      00
 2339 17c2 898514FF 		movl	%eax, -236(%rbp)
 2339      FFFF
 456:svf2csvf.c    **** 		CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 2340              		.loc 1 456 3
 2341 17c8 83BD14FF 		cmpl	$0, -236(%rbp)
 2341      FFFF00
 2342 17cf 0F844917 		je	.L136
 2342      0000
 2343              		.loc 1 456 3 is_stmt 0 discriminator 1
 2344 17d5 488B85D8 		movq	-296(%rbp), %rax
 2344      FEFFFF
 2345 17dc 488D1500 		leaq	.LC16(%rip), %rdx
 2345      000000
 2346 17e3 4889D6   		movq	%rdx, %rsi
 2347 17e6 4889C7   		movq	%rax, %rdi
 2348 17e9 E8000000 		call	errPrefix@PLT
 2348      00
 2349 17ee C78504FF 		movl	$1, -252(%rbp)
 2349      FFFF0100 
 2349      0000
 2350 17f8 E9211700 		jmp	.L136
 2350      00
 2351              	.L104:
 2352              	.LBE3:
 457:svf2csvf.c    **** 	} else if (
 458:svf2csvf.c    **** 		(line[0] == 'H' || line[0] == 'S' || line[0] == 'T') &&
 2353              		.loc 1 458 8 is_stmt 1
 2354 17fd 488B8558 		movq	-168(%rbp), %rax
 2354      FFFFFF
 2355 1804 0FB600   		movzbl	(%rax), %eax
 457:svf2csvf.c    **** 	} else if (
 2356              		.loc 1 457 12
 2357 1807 3C48     		cmpb	$72, %al
 2358 1809 7420     		je	.L137
 2359              		.loc 1 458 26
 2360 180b 488B8558 		movq	-168(%rbp), %rax
 2360      FFFFFF
 2361 1812 0FB600   		movzbl	(%rax), %eax
 2362              		.loc 1 458 19
 2363 1815 3C53     		cmpb	$83, %al
 2364 1817 7412     		je	.L137
 2365              		.loc 1 458 44 discriminator 2
 2366 1819 488B8558 		movq	-168(%rbp), %rax
 2366      FFFFFF
 2367 1820 0FB600   		movzbl	(%rax), %eax
 2368              		.loc 1 458 37 discriminator 2
 2369 1823 3C54     		cmpb	$84, %al
 2370 1825 0F85C116 		jne	.L138
 2370      0000
 2371              	.L137:
 459:svf2csvf.c    **** 		(line[1] == 'I' || line[1] == 'D') &&
 2372              		.loc 1 459 8 discriminator 3
 2373 182b 488B8558 		movq	-168(%rbp), %rax
 2373      FFFFFF
 2374 1832 4883C001 		addq	$1, %rax
 2375 1836 0FB600   		movzbl	(%rax), %eax
 458:svf2csvf.c    **** 		(line[1] == 'I' || line[1] == 'D') &&
 2376              		.loc 1 458 56 discriminator 3
 2377 1839 3C49     		cmpb	$73, %al
 2378 183b 7416     		je	.L139
 2379              		.loc 1 459 26
 2380 183d 488B8558 		movq	-168(%rbp), %rax
 2380      FFFFFF
 2381 1844 4883C001 		addq	$1, %rax
 2382 1848 0FB600   		movzbl	(%rax), %eax
 2383              		.loc 1 459 19
 2384 184b 3C44     		cmpb	$68, %al
 2385 184d 0F859916 		jne	.L138
 2385      0000
 2386              	.L139:
 460:svf2csvf.c    **** 		line[2] == 'R' && (line[3] == ' ' || line[3] == '\t')
 2387              		.loc 1 460 7 discriminator 1
 2388 1853 488B8558 		movq	-168(%rbp), %rax
 2388      FFFFFF
 2389 185a 4883C002 		addq	$2, %rax
 2390 185e 0FB600   		movzbl	(%rax), %eax
 459:svf2csvf.c    **** 		(line[1] == 'I' || line[1] == 'D') &&
 2391              		.loc 1 459 38 discriminator 1
 2392 1861 3C52     		cmpb	$82, %al
 2393 1863 0F858316 		jne	.L138
 2393      0000
 2394              		.loc 1 460 26
 2395 1869 488B8558 		movq	-168(%rbp), %rax
 2395      FFFFFF
 2396 1870 4883C003 		addq	$3, %rax
 2397 1874 0FB600   		movzbl	(%rax), %eax
 2398              		.loc 1 460 18
 2399 1877 3C20     		cmpb	$32, %al
 2400 1879 7416     		je	.L140
 2401              		.loc 1 460 44 discriminator 1
 2402 187b 488B8558 		movq	-168(%rbp), %rax
 2402      FFFFFF
 2403 1882 4883C003 		addq	$3, %rax
 2404 1886 0FB600   		movzbl	(%rax), %eax
 2405              		.loc 1 460 37 discriminator 1
 2406 1889 3C09     		cmpb	$9, %al
 2407 188b 0F855B16 		jne	.L138
 2407      0000
 2408              	.L140:
 2409              	.LBB4:
 461:svf2csvf.c    **** 	) {
 462:svf2csvf.c    **** 		// HIR/HDR, TIR/TDR, SIR/SDR are of the form "**R <length> [TDI (<tdi>)] [TDO (<tdo>)] [MASK (<ma
 463:svf2csvf.c    **** 		char *p = line + 3;
 2410              		.loc 1 463 9
 2411 1891 488B8558 		movq	-168(%rbp), %rax
 2411      FFFFFF
 2412 1898 4883C003 		addq	$3, %rax
 2413 189c 48898538 		movq	%rax, -200(%rbp)
 2413      FFFFFF
 464:svf2csvf.c    **** 		char *tmp;
 465:svf2csvf.c    **** 		const char *tdi = NULL, *tdo =  NULL, *mask = NULL, *smask = NULL;
 2414              		.loc 1 465 15
 2415 18a3 48C78540 		movq	$0, -192(%rbp)
 2415      FFFFFF00 
 2415      000000
 2416              		.loc 1 465 28
 2417 18ae 48C78548 		movq	$0, -184(%rbp)
 2417      FFFFFF00 
 2417      000000
 2418              		.loc 1 465 42
 2419 18b9 48C78550 		movq	$0, -176(%rbp)
 2419      FFFFFF00 
 2419      000000
 2420              		.loc 1 465 56
 2421 18c4 48C78568 		movq	$0, -152(%rbp)
 2421      FFFFFF00 
 2421      000000
 466:svf2csvf.c    **** 		uint32 length;
 467:svf2csvf.c    **** 		const bool isDataReg = (line[1] == 'D');
 2422              		.loc 1 467 31
 2423 18cf 488B8558 		movq	-168(%rbp), %rax
 2423      FFFFFF
 2424 18d6 4883C001 		addq	$1, %rax
 2425 18da 0FB600   		movzbl	(%rax), %eax
 2426              		.loc 1 467 14
 2427 18dd 3C44     		cmpb	$68, %al
 2428 18df 0F94C0   		sete	%al
 2429 18e2 888502FF 		movb	%al, -254(%rbp)
 2429      FFFF
 468:svf2csvf.c    **** 		ShiftOperation op;
 469:svf2csvf.c    **** 		line[2] = '\0';
 2430              		.loc 1 469 7
 2431 18e8 488B8558 		movq	-168(%rbp), %rax
 2431      FFFFFF
 2432 18ef 4883C002 		addq	$2, %rax
 2433              		.loc 1 469 11
 2434 18f3 C60000   		movb	$0, (%rax)
 470:svf2csvf.c    **** 		switch ( line[0] ) {
 2435              		.loc 1 470 16
 2436 18f6 488B8558 		movq	-168(%rbp), %rax
 2436      FFFFFF
 2437 18fd 0FB600   		movzbl	(%rax), %eax
 2438 1900 0FBEC0   		movsbl	%al, %eax
 2439              		.loc 1 470 3
 2440 1903 83F848   		cmpl	$72, %eax
 2441 1906 7407     		je	.L141
 2442 1908 83F854   		cmpl	$84, %eax
 2443 190b 740E     		je	.L142
 2444 190d EB18     		jmp	.L234
 2445              	.L141:
 471:svf2csvf.c    **** 		case 'H':
 472:svf2csvf.c    **** 			op = HEAD;
 2446              		.loc 1 472 7
 2447 190f C78508FF 		movl	$72, -248(%rbp)
 2447      FFFF4800 
 2447      0000
 473:svf2csvf.c    **** 			break;
 2448              		.loc 1 473 4
 2449 1919 EB17     		jmp	.L144
 2450              	.L142:
 474:svf2csvf.c    **** 		case 'T':
 475:svf2csvf.c    **** 			op = TAIL;
 2451              		.loc 1 475 7
 2452 191b C78508FF 		movl	$84, -248(%rbp)
 2452      FFFF5400 
 2452      0000
 476:svf2csvf.c    **** 			break;
 2453              		.loc 1 476 4
 2454 1925 EB0B     		jmp	.L144
 2455              	.L234:
 477:svf2csvf.c    **** 		default:
 478:svf2csvf.c    **** 			op = BODY;
 2456              		.loc 1 478 7
 2457 1927 C78508FF 		movl	$83, -248(%rbp)
 2457      FFFF5300 
 2457      0000
 479:svf2csvf.c    **** 			break;
 2458              		.loc 1 479 4
 2459 1931 90       		nop
 2460              	.L144:
 480:svf2csvf.c    **** 		}
 481:svf2csvf.c    **** 		CHOMP();
 2461              		.loc 1 481 3
 2462 1932 EB08     		jmp	.L145
 2463              	.L146:
 2464              		.loc 1 481 3 is_stmt 0 discriminator 4
 2465 1934 48838538 		addq	$1, -200(%rbp)
 2465      FFFFFF01 
 2466              	.L145:
 2467              		.loc 1 481 3 discriminator 1
 2468 193c 488B8538 		movq	-200(%rbp), %rax
 2468      FFFFFF
 2469 1943 0FB600   		movzbl	(%rax), %eax
 2470 1946 3C20     		cmpb	$32, %al
 2471 1948 74EA     		je	.L146
 2472              		.loc 1 481 3 discriminator 3
 2473 194a 488B8538 		movq	-200(%rbp), %rax
 2473      FFFFFF
 2474 1951 0FB600   		movzbl	(%rax), %eax
 2475 1954 3C09     		cmpb	$9, %al
 2476 1956 74DC     		je	.L146
 482:svf2csvf.c    **** 		length = (uint32)strtoul(p, &tmp, 10);
 2477              		.loc 1 482 20 is_stmt 1
 2478 1958 488D8D18 		leaq	-232(%rbp), %rcx
 2478      FFFFFF
 2479 195f 488B8538 		movq	-200(%rbp), %rax
 2479      FFFFFF
 2480 1966 BA0A0000 		movl	$10, %edx
 2480      00
 2481 196b 4889CE   		movq	%rcx, %rsi
 2482 196e 4889C7   		movq	%rax, %rdi
 2483 1971 E8000000 		call	strtoul@PLT
 2483      00
 2484              		.loc 1 482 10
 2485 1976 89850CFF 		movl	%eax, -244(%rbp)
 2485      FFFF
 483:svf2csvf.c    **** 		p = tmp;
 2486              		.loc 1 483 5
 2487 197c 488B8518 		movq	-232(%rbp), %rax
 2487      FFFFFF
 2488 1983 48898538 		movq	%rax, -200(%rbp)
 2488      FFFFFF
 484:svf2csvf.c    **** 		CHOMP();
 2489              		.loc 1 484 3
 2490 198a EB08     		jmp	.L147
 2491              	.L148:
 2492              		.loc 1 484 3 is_stmt 0 discriminator 4
 2493 198c 48838538 		addq	$1, -200(%rbp)
 2493      FFFFFF01 
 2494              	.L147:
 2495              		.loc 1 484 3 discriminator 1
 2496 1994 488B8538 		movq	-200(%rbp), %rax
 2496      FFFFFF
 2497 199b 0FB600   		movzbl	(%rax), %eax
 2498 199e 3C20     		cmpb	$32, %al
 2499 19a0 74EA     		je	.L148
 2500              		.loc 1 484 3 discriminator 3
 2501 19a2 488B8538 		movq	-200(%rbp), %rax
 2501      FFFFFF
 2502 19a9 0FB600   		movzbl	(%rax), %eax
 2503 19ac 3C09     		cmpb	$9, %al
 2504 19ae 74DC     		je	.L148
 485:svf2csvf.c    **** 		while ( *p ) {
 2505              		.loc 1 485 9 is_stmt 1
 2506 19b0 E9270600 		jmp	.L149
 2506      00
 2507              	.L186:
 486:svf2csvf.c    **** 			if ( !strncmp(p, "TDI", 3) ) {
 2508              		.loc 1 486 10
 2509 19b5 488B8538 		movq	-200(%rbp), %rax
 2509      FFFFFF
 2510 19bc BA030000 		movl	$3, %edx
 2510      00
 2511 19c1 488D0D00 		leaq	.LC17(%rip), %rcx
 2511      000000
 2512 19c8 4889CE   		movq	%rcx, %rsi
 2513 19cb 4889C7   		movq	%rax, %rdi
 2514 19ce E8000000 		call	strncmp@PLT
 2514      00
 2515              		.loc 1 486 7
 2516 19d3 85C0     		testl	%eax, %eax
 2517 19d5 0F854D01 		jne	.L150
 2517      0000
 487:svf2csvf.c    **** 				p += 3;
 2518              		.loc 1 487 7
 2519 19db 48838538 		addq	$3, -200(%rbp)
 2519      FFFFFF03 
 488:svf2csvf.c    **** 				CHOMP();
 2520              		.loc 1 488 5
 2521 19e3 EB08     		jmp	.L151
 2522              	.L152:
 2523              		.loc 1 488 5 is_stmt 0 discriminator 4
 2524 19e5 48838538 		addq	$1, -200(%rbp)
 2524      FFFFFF01 
 2525              	.L151:
 2526              		.loc 1 488 5 discriminator 1
 2527 19ed 488B8538 		movq	-200(%rbp), %rax
 2527      FFFFFF
 2528 19f4 0FB600   		movzbl	(%rax), %eax
 2529 19f7 3C20     		cmpb	$32, %al
 2530 19f9 74EA     		je	.L152
 2531              		.loc 1 488 5 discriminator 3
 2532 19fb 488B8538 		movq	-200(%rbp), %rax
 2532      FFFFFF
 2533 1a02 0FB600   		movzbl	(%rax), %eax
 2534 1a05 3C09     		cmpb	$9, %al
 2535 1a07 74DC     		je	.L152
 489:svf2csvf.c    **** 				#define EXPECT_CHAR(x, y) \
 490:svf2csvf.c    **** 					CHECK_STATUS( \
 491:svf2csvf.c    **** 						*p != x, FL_SVF_PARSE_ERR, cleanup, \
 492:svf2csvf.c    **** 						"parseLine(): %sR must be of the form \"%sR ... " y "\"", line, line);
 493:svf2csvf.c    **** 				#define FIX_ODD(x) \
 494:svf2csvf.c    **** 					if ( strlen(x) & 1 ) { \
 495:svf2csvf.c    **** 						x--; \
 496:svf2csvf.c    **** 					}
 497:svf2csvf.c    **** 				EXPECT_CHAR('(', "TDI (<tdi>)");
 2536              		.loc 1 497 5 is_stmt 1
 2537 1a09 488B8538 		movq	-200(%rbp), %rax
 2537      FFFFFF
 2538 1a10 0FB600   		movzbl	(%rax), %eax
 2539 1a13 3C28     		cmpb	$40, %al
 2540 1a15 7438     		je	.L153
 2541              		.loc 1 497 5 is_stmt 0 discriminator 1
 2542 1a17 488B8D58 		movq	-168(%rbp), %rcx
 2542      FFFFFF
 2543 1a1e 488B9558 		movq	-168(%rbp), %rdx
 2543      FFFFFF
 2544 1a25 488B85D8 		movq	-296(%rbp), %rax
 2544      FEFFFF
 2545 1a2c 488D3500 		leaq	.LC18(%rip), %rsi
 2545      000000
 2546 1a33 4889C7   		movq	%rax, %rdi
 2547 1a36 B8000000 		movl	$0, %eax
 2547      00
 2548 1a3b E8000000 		call	errRender@PLT
 2548      00
 2549 1a40 C78504FF 		movl	$10, -252(%rbp)
 2549      FFFF0A00 
 2549      0000
 2550 1a4a E9CF1400 		jmp	.L136
 2550      00
 2551              	.L153:
 498:svf2csvf.c    **** 				*p++ = '0';
 2552              		.loc 1 498 7 is_stmt 1
 2553 1a4f 488B8538 		movq	-200(%rbp), %rax
 2553      FFFFFF
 2554 1a56 488D5001 		leaq	1(%rax), %rdx
 2555 1a5a 48899538 		movq	%rdx, -200(%rbp)
 2555      FFFFFF
 2556              		.loc 1 498 10
 2557 1a61 C60030   		movb	$48, (%rax)
 499:svf2csvf.c    **** 				tdi = p++;
 2558              		.loc 1 499 12
 2559 1a64 488B8538 		movq	-200(%rbp), %rax
 2559      FFFFFF
 2560 1a6b 488D5001 		leaq	1(%rax), %rdx
 2561 1a6f 48899538 		movq	%rdx, -200(%rbp)
 2561      FFFFFF
 2562              		.loc 1 499 9
 2563 1a76 48898540 		movq	%rax, -192(%rbp)
 2563      FFFFFF
 500:svf2csvf.c    **** 				while ( p < lineEnd && *p != ')' ) {
 2564              		.loc 1 500 11
 2565 1a7d EB08     		jmp	.L155
 2566              	.L157:
 501:svf2csvf.c    **** 					p++;
 2567              		.loc 1 501 7
 2568 1a7f 48838538 		addq	$1, -200(%rbp)
 2568      FFFFFF01 
 2569              	.L155:
 500:svf2csvf.c    **** 				while ( p < lineEnd && *p != ')' ) {
 2570              		.loc 1 500 25
 2571 1a87 488B8538 		movq	-200(%rbp), %rax
 2571      FFFFFF
 2572 1a8e 483B8560 		cmpq	-160(%rbp), %rax
 2572      FFFFFF
 2573 1a95 730E     		jnb	.L156
 500:svf2csvf.c    **** 				while ( p < lineEnd && *p != ')' ) {
 2574              		.loc 1 500 28 discriminator 1
 2575 1a97 488B8538 		movq	-200(%rbp), %rax
 2575      FFFFFF
 2576 1a9e 0FB600   		movzbl	(%rax), %eax
 500:svf2csvf.c    **** 				while ( p < lineEnd && *p != ')' ) {
 2577              		.loc 1 500 25 discriminator 1
 2578 1aa1 3C29     		cmpb	$41, %al
 2579 1aa3 75DA     		jne	.L157
 2580              	.L156:
 502:svf2csvf.c    **** 				}
 503:svf2csvf.c    **** 				EXPECT_CHAR(')', "TDI (<tdi>)");
 2581              		.loc 1 503 5
 2582 1aa5 488B8538 		movq	-200(%rbp), %rax
 2582      FFFFFF
 2583 1aac 0FB600   		movzbl	(%rax), %eax
 2584 1aaf 3C29     		cmpb	$41, %al
 2585 1ab1 7438     		je	.L158
 2586              		.loc 1 503 5 is_stmt 0 discriminator 1
 2587 1ab3 488B8D58 		movq	-168(%rbp), %rcx
 2587      FFFFFF
 2588 1aba 488B9558 		movq	-168(%rbp), %rdx
 2588      FFFFFF
 2589 1ac1 488B85D8 		movq	-296(%rbp), %rax
 2589      FEFFFF
 2590 1ac8 488D3500 		leaq	.LC18(%rip), %rsi
 2590      000000
 2591 1acf 4889C7   		movq	%rax, %rdi
 2592 1ad2 B8000000 		movl	$0, %eax
 2592      00
 2593 1ad7 E8000000 		call	errRender@PLT
 2593      00
 2594 1adc C78504FF 		movl	$10, -252(%rbp)
 2594      FFFF0A00 
 2594      0000
 2595 1ae6 E9331400 		jmp	.L136
 2595      00
 2596              	.L158:
 504:svf2csvf.c    **** 				*p++ = '\0';
 2597              		.loc 1 504 7 is_stmt 1
 2598 1aeb 488B8538 		movq	-200(%rbp), %rax
 2598      FFFFFF
 2599 1af2 488D5001 		leaq	1(%rax), %rdx
 2600 1af6 48899538 		movq	%rdx, -200(%rbp)
 2600      FFFFFF
 2601              		.loc 1 504 10
 2602 1afd C60000   		movb	$0, (%rax)
 505:svf2csvf.c    **** 				FIX_ODD(tdi);
 2603              		.loc 1 505 5
 2604 1b00 488B8540 		movq	-192(%rbp), %rax
 2604      FFFFFF
 2605 1b07 4889C7   		movq	%rax, %rdi
 2606 1b0a E8000000 		call	strlen@PLT
 2606      00
 2607 1b0f 83E001   		andl	$1, %eax
 2608 1b12 4885C0   		testq	%rax, %rax
 2609 1b15 0F84A504 		je	.L184
 2609      0000
 2610              		.loc 1 505 5 is_stmt 0 discriminator 1
 2611 1b1b 4883AD40 		subq	$1, -192(%rbp)
 2611      FFFFFF01 
 2612 1b23 E9980400 		jmp	.L184
 2612      00
 2613              	.L150:
 506:svf2csvf.c    **** 			} else if ( !strncmp(p, "SMASK", 5) ) {
 2614              		.loc 1 506 17 is_stmt 1
 2615 1b28 488B8538 		movq	-200(%rbp), %rax
 2615      FFFFFF
 2616 1b2f BA050000 		movl	$5, %edx
 2616      00
 2617 1b34 488D0D00 		leaq	.LC19(%rip), %rcx
 2617      000000
 2618 1b3b 4889CE   		movq	%rcx, %rsi
 2619 1b3e 4889C7   		movq	%rax, %rdi
 2620 1b41 E8000000 		call	strncmp@PLT
 2620      00
 2621              		.loc 1 506 14
 2622 1b46 85C0     		testl	%eax, %eax
 2623 1b48 0F854D01 		jne	.L160
 2623      0000
 507:svf2csvf.c    **** 				p += 5;
 2624              		.loc 1 507 7
 2625 1b4e 48838538 		addq	$5, -200(%rbp)
 2625      FFFFFF05 
 508:svf2csvf.c    **** 				CHOMP();
 2626              		.loc 1 508 5
 2627 1b56 EB08     		jmp	.L161
 2628              	.L162:
 2629              		.loc 1 508 5 is_stmt 0 discriminator 4
 2630 1b58 48838538 		addq	$1, -200(%rbp)
 2630      FFFFFF01 
 2631              	.L161:
 2632              		.loc 1 508 5 discriminator 1
 2633 1b60 488B8538 		movq	-200(%rbp), %rax
 2633      FFFFFF
 2634 1b67 0FB600   		movzbl	(%rax), %eax
 2635 1b6a 3C20     		cmpb	$32, %al
 2636 1b6c 74EA     		je	.L162
 2637              		.loc 1 508 5 discriminator 3
 2638 1b6e 488B8538 		movq	-200(%rbp), %rax
 2638      FFFFFF
 2639 1b75 0FB600   		movzbl	(%rax), %eax
 2640 1b78 3C09     		cmpb	$9, %al
 2641 1b7a 74DC     		je	.L162
 509:svf2csvf.c    **** 				EXPECT_CHAR('(', "SMASK (<smask>)");
 2642              		.loc 1 509 5 is_stmt 1
 2643 1b7c 488B8538 		movq	-200(%rbp), %rax
 2643      FFFFFF
 2644 1b83 0FB600   		movzbl	(%rax), %eax
 2645 1b86 3C28     		cmpb	$40, %al
 2646 1b88 7438     		je	.L163
 2647              		.loc 1 509 5 is_stmt 0 discriminator 1
 2648 1b8a 488B8D58 		movq	-168(%rbp), %rcx
 2648      FFFFFF
 2649 1b91 488B9558 		movq	-168(%rbp), %rdx
 2649      FFFFFF
 2650 1b98 488B85D8 		movq	-296(%rbp), %rax
 2650      FEFFFF
 2651 1b9f 488D3500 		leaq	.LC20(%rip), %rsi
 2651      000000
 2652 1ba6 4889C7   		movq	%rax, %rdi
 2653 1ba9 B8000000 		movl	$0, %eax
 2653      00
 2654 1bae E8000000 		call	errRender@PLT
 2654      00
 2655 1bb3 C78504FF 		movl	$10, -252(%rbp)
 2655      FFFF0A00 
 2655      0000
 2656 1bbd E95C1300 		jmp	.L136
 2656      00
 2657              	.L163:
 510:svf2csvf.c    **** 				*p++ = '0';
 2658              		.loc 1 510 7 is_stmt 1
 2659 1bc2 488B8538 		movq	-200(%rbp), %rax
 2659      FFFFFF
 2660 1bc9 488D5001 		leaq	1(%rax), %rdx
 2661 1bcd 48899538 		movq	%rdx, -200(%rbp)
 2661      FFFFFF
 2662              		.loc 1 510 10
 2663 1bd4 C60030   		movb	$48, (%rax)
 511:svf2csvf.c    **** 				smask = p++;
 2664              		.loc 1 511 14
 2665 1bd7 488B8538 		movq	-200(%rbp), %rax
 2665      FFFFFF
 2666 1bde 488D5001 		leaq	1(%rax), %rdx
 2667 1be2 48899538 		movq	%rdx, -200(%rbp)
 2667      FFFFFF
 2668              		.loc 1 511 11
 2669 1be9 48898568 		movq	%rax, -152(%rbp)
 2669      FFFFFF
 512:svf2csvf.c    **** 				while ( p < lineEnd && *p != ')' ) {
 2670              		.loc 1 512 11
 2671 1bf0 EB08     		jmp	.L164
 2672              	.L166:
 513:svf2csvf.c    **** 					p++;
 2673              		.loc 1 513 7
 2674 1bf2 48838538 		addq	$1, -200(%rbp)
 2674      FFFFFF01 
 2675              	.L164:
 512:svf2csvf.c    **** 				while ( p < lineEnd && *p != ')' ) {
 2676              		.loc 1 512 25
 2677 1bfa 488B8538 		movq	-200(%rbp), %rax
 2677      FFFFFF
 2678 1c01 483B8560 		cmpq	-160(%rbp), %rax
 2678      FFFFFF
 2679 1c08 730E     		jnb	.L165
 512:svf2csvf.c    **** 				while ( p < lineEnd && *p != ')' ) {
 2680              		.loc 1 512 28 discriminator 1
 2681 1c0a 488B8538 		movq	-200(%rbp), %rax
 2681      FFFFFF
 2682 1c11 0FB600   		movzbl	(%rax), %eax
 512:svf2csvf.c    **** 				while ( p < lineEnd && *p != ')' ) {
 2683              		.loc 1 512 25 discriminator 1
 2684 1c14 3C29     		cmpb	$41, %al
 2685 1c16 75DA     		jne	.L166
 2686              	.L165:
 514:svf2csvf.c    **** 				}
 515:svf2csvf.c    **** 				EXPECT_CHAR(')', "SMASK (<smask>)");
 2687              		.loc 1 515 5
 2688 1c18 488B8538 		movq	-200(%rbp), %rax
 2688      FFFFFF
 2689 1c1f 0FB600   		movzbl	(%rax), %eax
 2690 1c22 3C29     		cmpb	$41, %al
 2691 1c24 7438     		je	.L167
 2692              		.loc 1 515 5 is_stmt 0 discriminator 1
 2693 1c26 488B8D58 		movq	-168(%rbp), %rcx
 2693      FFFFFF
 2694 1c2d 488B9558 		movq	-168(%rbp), %rdx
 2694      FFFFFF
 2695 1c34 488B85D8 		movq	-296(%rbp), %rax
 2695      FEFFFF
 2696 1c3b 488D3500 		leaq	.LC20(%rip), %rsi
 2696      000000
 2697 1c42 4889C7   		movq	%rax, %rdi
 2698 1c45 B8000000 		movl	$0, %eax
 2698      00
 2699 1c4a E8000000 		call	errRender@PLT
 2699      00
 2700 1c4f C78504FF 		movl	$10, -252(%rbp)
 2700      FFFF0A00 
 2700      0000
 2701 1c59 E9C01200 		jmp	.L136
 2701      00
 2702              	.L167:
 516:svf2csvf.c    **** 				*p++ = '\0';
 2703              		.loc 1 516 7 is_stmt 1
 2704 1c5e 488B8538 		movq	-200(%rbp), %rax
 2704      FFFFFF
 2705 1c65 488D5001 		leaq	1(%rax), %rdx
 2706 1c69 48899538 		movq	%rdx, -200(%rbp)
 2706      FFFFFF
 2707              		.loc 1 516 10
 2708 1c70 C60000   		movb	$0, (%rax)
 517:svf2csvf.c    **** 				FIX_ODD(smask);
 2709              		.loc 1 517 5
 2710 1c73 488B8568 		movq	-152(%rbp), %rax
 2710      FFFFFF
 2711 1c7a 4889C7   		movq	%rax, %rdi
 2712 1c7d E8000000 		call	strlen@PLT
 2712      00
 2713 1c82 83E001   		andl	$1, %eax
 2714 1c85 4885C0   		testq	%rax, %rax
 2715 1c88 0F843203 		je	.L184
 2715      0000
 2716              		.loc 1 517 5 is_stmt 0 discriminator 1
 2717 1c8e 4883AD68 		subq	$1, -152(%rbp)
 2717      FFFFFF01 
 2718 1c96 E9250300 		jmp	.L184
 2718      00
 2719              	.L160:
 518:svf2csvf.c    **** 			} else if ( !strncmp(p, "TDO", 3) ) {
 2720              		.loc 1 518 17 is_stmt 1
 2721 1c9b 488B8538 		movq	-200(%rbp), %rax
 2721      FFFFFF
 2722 1ca2 BA030000 		movl	$3, %edx
 2722      00
 2723 1ca7 488D0D00 		leaq	.LC21(%rip), %rcx
 2723      000000
 2724 1cae 4889CE   		movq	%rcx, %rsi
 2725 1cb1 4889C7   		movq	%rax, %rdi
 2726 1cb4 E8000000 		call	strncmp@PLT
 2726      00
 2727              		.loc 1 518 14
 2728 1cb9 85C0     		testl	%eax, %eax
 2729 1cbb 0F854D01 		jne	.L168
 2729      0000
 519:svf2csvf.c    **** 				p += 3;
 2730              		.loc 1 519 7
 2731 1cc1 48838538 		addq	$3, -200(%rbp)
 2731      FFFFFF03 
 520:svf2csvf.c    **** 				CHOMP();
 2732              		.loc 1 520 5
 2733 1cc9 EB08     		jmp	.L169
 2734              	.L170:
 2735              		.loc 1 520 5 is_stmt 0 discriminator 4
 2736 1ccb 48838538 		addq	$1, -200(%rbp)
 2736      FFFFFF01 
 2737              	.L169:
 2738              		.loc 1 520 5 discriminator 1
 2739 1cd3 488B8538 		movq	-200(%rbp), %rax
 2739      FFFFFF
 2740 1cda 0FB600   		movzbl	(%rax), %eax
 2741 1cdd 3C20     		cmpb	$32, %al
 2742 1cdf 74EA     		je	.L170
 2743              		.loc 1 520 5 discriminator 3
 2744 1ce1 488B8538 		movq	-200(%rbp), %rax
 2744      FFFFFF
 2745 1ce8 0FB600   		movzbl	(%rax), %eax
 2746 1ceb 3C09     		cmpb	$9, %al
 2747 1ced 74DC     		je	.L170
 521:svf2csvf.c    **** 				EXPECT_CHAR('(', "TDO (<tdo>)");
 2748              		.loc 1 521 5 is_stmt 1
 2749 1cef 488B8538 		movq	-200(%rbp), %rax
 2749      FFFFFF
 2750 1cf6 0FB600   		movzbl	(%rax), %eax
 2751 1cf9 3C28     		cmpb	$40, %al
 2752 1cfb 7438     		je	.L171
 2753              		.loc 1 521 5 is_stmt 0 discriminator 1
 2754 1cfd 488B8D58 		movq	-168(%rbp), %rcx
 2754      FFFFFF
 2755 1d04 488B9558 		movq	-168(%rbp), %rdx
 2755      FFFFFF
 2756 1d0b 488B85D8 		movq	-296(%rbp), %rax
 2756      FEFFFF
 2757 1d12 488D3500 		leaq	.LC22(%rip), %rsi
 2757      000000
 2758 1d19 4889C7   		movq	%rax, %rdi
 2759 1d1c B8000000 		movl	$0, %eax
 2759      00
 2760 1d21 E8000000 		call	errRender@PLT
 2760      00
 2761 1d26 C78504FF 		movl	$10, -252(%rbp)
 2761      FFFF0A00 
 2761      0000
 2762 1d30 E9E91100 		jmp	.L136
 2762      00
 2763              	.L171:
 522:svf2csvf.c    **** 				*p++ = '0';
 2764              		.loc 1 522 7 is_stmt 1
 2765 1d35 488B8538 		movq	-200(%rbp), %rax
 2765      FFFFFF
 2766 1d3c 488D5001 		leaq	1(%rax), %rdx
 2767 1d40 48899538 		movq	%rdx, -200(%rbp)
 2767      FFFFFF
 2768              		.loc 1 522 10
 2769 1d47 C60030   		movb	$48, (%rax)
 523:svf2csvf.c    **** 				tdo = p++;
 2770              		.loc 1 523 12
 2771 1d4a 488B8538 		movq	-200(%rbp), %rax
 2771      FFFFFF
 2772 1d51 488D5001 		leaq	1(%rax), %rdx
 2773 1d55 48899538 		movq	%rdx, -200(%rbp)
 2773      FFFFFF
 2774              		.loc 1 523 9
 2775 1d5c 48898548 		movq	%rax, -184(%rbp)
 2775      FFFFFF
 524:svf2csvf.c    **** 				while ( p < lineEnd && *p != ')' ) {
 2776              		.loc 1 524 11
 2777 1d63 EB08     		jmp	.L172
 2778              	.L174:
 525:svf2csvf.c    **** 					p++;
 2779              		.loc 1 525 7
 2780 1d65 48838538 		addq	$1, -200(%rbp)
 2780      FFFFFF01 
 2781              	.L172:
 524:svf2csvf.c    **** 				while ( p < lineEnd && *p != ')' ) {
 2782              		.loc 1 524 25
 2783 1d6d 488B8538 		movq	-200(%rbp), %rax
 2783      FFFFFF
 2784 1d74 483B8560 		cmpq	-160(%rbp), %rax
 2784      FFFFFF
 2785 1d7b 730E     		jnb	.L173
 524:svf2csvf.c    **** 				while ( p < lineEnd && *p != ')' ) {
 2786              		.loc 1 524 28 discriminator 1
 2787 1d7d 488B8538 		movq	-200(%rbp), %rax
 2787      FFFFFF
 2788 1d84 0FB600   		movzbl	(%rax), %eax
 524:svf2csvf.c    **** 				while ( p < lineEnd && *p != ')' ) {
 2789              		.loc 1 524 25 discriminator 1
 2790 1d87 3C29     		cmpb	$41, %al
 2791 1d89 75DA     		jne	.L174
 2792              	.L173:
 526:svf2csvf.c    **** 				}
 527:svf2csvf.c    **** 				EXPECT_CHAR(')', "TDO (<tdo>)");
 2793              		.loc 1 527 5
 2794 1d8b 488B8538 		movq	-200(%rbp), %rax
 2794      FFFFFF
 2795 1d92 0FB600   		movzbl	(%rax), %eax
 2796 1d95 3C29     		cmpb	$41, %al
 2797 1d97 7438     		je	.L175
 2798              		.loc 1 527 5 is_stmt 0 discriminator 1
 2799 1d99 488B8D58 		movq	-168(%rbp), %rcx
 2799      FFFFFF
 2800 1da0 488B9558 		movq	-168(%rbp), %rdx
 2800      FFFFFF
 2801 1da7 488B85D8 		movq	-296(%rbp), %rax
 2801      FEFFFF
 2802 1dae 488D3500 		leaq	.LC22(%rip), %rsi
 2802      000000
 2803 1db5 4889C7   		movq	%rax, %rdi
 2804 1db8 B8000000 		movl	$0, %eax
 2804      00
 2805 1dbd E8000000 		call	errRender@PLT
 2805      00
 2806 1dc2 C78504FF 		movl	$10, -252(%rbp)
 2806      FFFF0A00 
 2806      0000
 2807 1dcc E94D1100 		jmp	.L136
 2807      00
 2808              	.L175:
 528:svf2csvf.c    **** 				*p++ = '\0';
 2809              		.loc 1 528 7 is_stmt 1
 2810 1dd1 488B8538 		movq	-200(%rbp), %rax
 2810      FFFFFF
 2811 1dd8 488D5001 		leaq	1(%rax), %rdx
 2812 1ddc 48899538 		movq	%rdx, -200(%rbp)
 2812      FFFFFF
 2813              		.loc 1 528 10
 2814 1de3 C60000   		movb	$0, (%rax)
 529:svf2csvf.c    **** 				FIX_ODD(tdo);
 2815              		.loc 1 529 5
 2816 1de6 488B8548 		movq	-184(%rbp), %rax
 2816      FFFFFF
 2817 1ded 4889C7   		movq	%rax, %rdi
 2818 1df0 E8000000 		call	strlen@PLT
 2818      00
 2819 1df5 83E001   		andl	$1, %eax
 2820 1df8 4885C0   		testq	%rax, %rax
 2821 1dfb 0F84BF01 		je	.L184
 2821      0000
 2822              		.loc 1 529 5 is_stmt 0 discriminator 1
 2823 1e01 4883AD48 		subq	$1, -184(%rbp)
 2823      FFFFFF01 
 2824 1e09 E9B20100 		jmp	.L184
 2824      00
 2825              	.L168:
 530:svf2csvf.c    **** 			} else if ( !strncmp(p, "MASK", 4) ) {
 2826              		.loc 1 530 17 is_stmt 1
 2827 1e0e 488B8538 		movq	-200(%rbp), %rax
 2827      FFFFFF
 2828 1e15 BA040000 		movl	$4, %edx
 2828      00
 2829 1e1a 488D0D00 		leaq	.LC23(%rip), %rcx
 2829      000000
 2830 1e21 4889CE   		movq	%rcx, %rsi
 2831 1e24 4889C7   		movq	%rax, %rdi
 2832 1e27 E8000000 		call	strncmp@PLT
 2832      00
 2833              		.loc 1 530 14
 2834 1e2c 85C0     		testl	%eax, %eax
 2835 1e2e 0F854601 		jne	.L176
 2835      0000
 531:svf2csvf.c    **** 				p += 4;
 2836              		.loc 1 531 7
 2837 1e34 48838538 		addq	$4, -200(%rbp)
 2837      FFFFFF04 
 532:svf2csvf.c    **** 				CHOMP();
 2838              		.loc 1 532 5
 2839 1e3c EB08     		jmp	.L177
 2840              	.L178:
 2841              		.loc 1 532 5 is_stmt 0 discriminator 4
 2842 1e3e 48838538 		addq	$1, -200(%rbp)
 2842      FFFFFF01 
 2843              	.L177:
 2844              		.loc 1 532 5 discriminator 1
 2845 1e46 488B8538 		movq	-200(%rbp), %rax
 2845      FFFFFF
 2846 1e4d 0FB600   		movzbl	(%rax), %eax
 2847 1e50 3C20     		cmpb	$32, %al
 2848 1e52 74EA     		je	.L178
 2849              		.loc 1 532 5 discriminator 3
 2850 1e54 488B8538 		movq	-200(%rbp), %rax
 2850      FFFFFF
 2851 1e5b 0FB600   		movzbl	(%rax), %eax
 2852 1e5e 3C09     		cmpb	$9, %al
 2853 1e60 74DC     		je	.L178
 533:svf2csvf.c    **** 				EXPECT_CHAR('(', "MASK (<mask>)");
 2854              		.loc 1 533 5 is_stmt 1
 2855 1e62 488B8538 		movq	-200(%rbp), %rax
 2855      FFFFFF
 2856 1e69 0FB600   		movzbl	(%rax), %eax
 2857 1e6c 3C28     		cmpb	$40, %al
 2858 1e6e 7438     		je	.L179
 2859              		.loc 1 533 5 is_stmt 0 discriminator 1
 2860 1e70 488B8D58 		movq	-168(%rbp), %rcx
 2860      FFFFFF
 2861 1e77 488B9558 		movq	-168(%rbp), %rdx
 2861      FFFFFF
 2862 1e7e 488B85D8 		movq	-296(%rbp), %rax
 2862      FEFFFF
 2863 1e85 488D3500 		leaq	.LC24(%rip), %rsi
 2863      000000
 2864 1e8c 4889C7   		movq	%rax, %rdi
 2865 1e8f B8000000 		movl	$0, %eax
 2865      00
 2866 1e94 E8000000 		call	errRender@PLT
 2866      00
 2867 1e99 C78504FF 		movl	$10, -252(%rbp)
 2867      FFFF0A00 
 2867      0000
 2868 1ea3 E9761000 		jmp	.L136
 2868      00
 2869              	.L179:
 534:svf2csvf.c    **** 				*p++ = '0';
 2870              		.loc 1 534 7 is_stmt 1
 2871 1ea8 488B8538 		movq	-200(%rbp), %rax
 2871      FFFFFF
 2872 1eaf 488D5001 		leaq	1(%rax), %rdx
 2873 1eb3 48899538 		movq	%rdx, -200(%rbp)
 2873      FFFFFF
 2874              		.loc 1 534 10
 2875 1eba C60030   		movb	$48, (%rax)
 535:svf2csvf.c    **** 				mask = p++;
 2876              		.loc 1 535 13
 2877 1ebd 488B8538 		movq	-200(%rbp), %rax
 2877      FFFFFF
 2878 1ec4 488D5001 		leaq	1(%rax), %rdx
 2879 1ec8 48899538 		movq	%rdx, -200(%rbp)
 2879      FFFFFF
 2880              		.loc 1 535 10
 2881 1ecf 48898550 		movq	%rax, -176(%rbp)
 2881      FFFFFF
 536:svf2csvf.c    **** 				while ( p < lineEnd && *p != ')' ) {
 2882              		.loc 1 536 11
 2883 1ed6 EB08     		jmp	.L180
 2884              	.L182:
 537:svf2csvf.c    **** 					p++;
 2885              		.loc 1 537 7
 2886 1ed8 48838538 		addq	$1, -200(%rbp)
 2886      FFFFFF01 
 2887              	.L180:
 536:svf2csvf.c    **** 				while ( p < lineEnd && *p != ')' ) {
 2888              		.loc 1 536 25
 2889 1ee0 488B8538 		movq	-200(%rbp), %rax
 2889      FFFFFF
 2890 1ee7 483B8560 		cmpq	-160(%rbp), %rax
 2890      FFFFFF
 2891 1eee 730E     		jnb	.L181
 536:svf2csvf.c    **** 				while ( p < lineEnd && *p != ')' ) {
 2892              		.loc 1 536 28 discriminator 1
 2893 1ef0 488B8538 		movq	-200(%rbp), %rax
 2893      FFFFFF
 2894 1ef7 0FB600   		movzbl	(%rax), %eax
 536:svf2csvf.c    **** 				while ( p < lineEnd && *p != ')' ) {
 2895              		.loc 1 536 25 discriminator 1
 2896 1efa 3C29     		cmpb	$41, %al
 2897 1efc 75DA     		jne	.L182
 2898              	.L181:
 538:svf2csvf.c    **** 				}
 539:svf2csvf.c    **** 				EXPECT_CHAR(')', "MASK (<mask>)");
 2899              		.loc 1 539 5
 2900 1efe 488B8538 		movq	-200(%rbp), %rax
 2900      FFFFFF
 2901 1f05 0FB600   		movzbl	(%rax), %eax
 2902 1f08 3C29     		cmpb	$41, %al
 2903 1f0a 7438     		je	.L183
 2904              		.loc 1 539 5 is_stmt 0 discriminator 1
 2905 1f0c 488B8D58 		movq	-168(%rbp), %rcx
 2905      FFFFFF
 2906 1f13 488B9558 		movq	-168(%rbp), %rdx
 2906      FFFFFF
 2907 1f1a 488B85D8 		movq	-296(%rbp), %rax
 2907      FEFFFF
 2908 1f21 488D3500 		leaq	.LC24(%rip), %rsi
 2908      000000
 2909 1f28 4889C7   		movq	%rax, %rdi
 2910 1f2b B8000000 		movl	$0, %eax
 2910      00
 2911 1f30 E8000000 		call	errRender@PLT
 2911      00
 2912 1f35 C78504FF 		movl	$10, -252(%rbp)
 2912      FFFF0A00 
 2912      0000
 2913 1f3f E9DA0F00 		jmp	.L136
 2913      00
 2914              	.L183:
 540:svf2csvf.c    **** 				*p++ = '\0';
 2915              		.loc 1 540 7 is_stmt 1
 2916 1f44 488B8538 		movq	-200(%rbp), %rax
 2916      FFFFFF
 2917 1f4b 488D5001 		leaq	1(%rax), %rdx
 2918 1f4f 48899538 		movq	%rdx, -200(%rbp)
 2918      FFFFFF
 2919              		.loc 1 540 10
 2920 1f56 C60000   		movb	$0, (%rax)
 541:svf2csvf.c    **** 				FIX_ODD(mask);
 2921              		.loc 1 541 5
 2922 1f59 488B8550 		movq	-176(%rbp), %rax
 2922      FFFFFF
 2923 1f60 4889C7   		movq	%rax, %rdi
 2924 1f63 E8000000 		call	strlen@PLT
 2924      00
 2925 1f68 83E001   		andl	$1, %eax
 2926 1f6b 4885C0   		testq	%rax, %rax
 2927 1f6e 7450     		je	.L184
 2928              		.loc 1 541 5 is_stmt 0 discriminator 1
 2929 1f70 4883AD50 		subq	$1, -176(%rbp)
 2929      FFFFFF01 
 2930 1f78 EB46     		jmp	.L184
 2931              	.L176:
 542:svf2csvf.c    **** 			} else {
 543:svf2csvf.c    **** 				CHECK_STATUS(
 2932              		.loc 1 543 5 is_stmt 1 discriminator 1
 2933 1f7a 488B8538 		movq	-200(%rbp), %rax
 2933      FFFFFF
 2934 1f81 482B8558 		subq	-168(%rbp), %rax
 2934      FFFFFF
 2935 1f88 4889C2   		movq	%rax, %rdx
 2936 1f8b 488B85D8 		movq	-296(%rbp), %rax
 2936      FEFFFF
 2937 1f92 488D0D00 		leaq	.LC25(%rip), %rcx
 2937      000000
 2938 1f99 4889CE   		movq	%rcx, %rsi
 2939 1f9c 4889C7   		movq	%rax, %rdi
 2940 1f9f B8000000 		movl	$0, %eax
 2940      00
 2941 1fa4 E8000000 		call	errRender@PLT
 2941      00
 2942 1fa9 C78504FF 		movl	$10, -252(%rbp)
 2942      FFFF0A00 
 2942      0000
 2943 1fb3 E9660F00 		jmp	.L136
 2943      00
 2944              	.L185:
 544:svf2csvf.c    **** 					true, FL_SVF_PARSE_ERR, cleanup,
 545:svf2csvf.c    **** 					"parseLine(): Junk in [HTS][IR]R line at column %d", p-line);
 546:svf2csvf.c    **** 			}
 547:svf2csvf.c    **** 			CHOMP();
 2945              		.loc 1 547 4 discriminator 4
 2946 1fb8 48838538 		addq	$1, -200(%rbp)
 2946      FFFFFF01 
 2947              	.L184:
 2948              		.loc 1 547 4 is_stmt 0 discriminator 1
 2949 1fc0 488B8538 		movq	-200(%rbp), %rax
 2949      FFFFFF
 2950 1fc7 0FB600   		movzbl	(%rax), %eax
 2951 1fca 3C20     		cmpb	$32, %al
 2952 1fcc 74EA     		je	.L185
 2953              		.loc 1 547 4 discriminator 3
 2954 1fce 488B8538 		movq	-200(%rbp), %rax
 2954      FFFFFF
 2955 1fd5 0FB600   		movzbl	(%rax), %eax
 2956 1fd8 3C09     		cmpb	$9, %al
 2957 1fda 74DC     		je	.L185
 2958              	.L149:
 485:svf2csvf.c    **** 			if ( !strncmp(p, "TDI", 3) ) {
 2959              		.loc 1 485 11 is_stmt 1
 2960 1fdc 488B8538 		movq	-200(%rbp), %rax
 2960      FFFFFF
 2961 1fe3 0FB600   		movzbl	(%rax), %eax
 2962 1fe6 84C0     		testb	%al, %al
 2963 1fe8 0F85C7F9 		jne	.L186
 2963      FFFF
 548:svf2csvf.c    **** 		}
 549:svf2csvf.c    **** 		if ( isDataReg ) {
 2964              		.loc 1 549 6
 2965 1fee 80BD02FF 		cmpb	$0, -254(%rbp)
 2965      FFFF00
 2966 1ff5 0F84960A 		je	.L187
 2966      0000
 2967              	.LBB5:
 550:svf2csvf.c    **** 			bool zeroMask;
 551:svf2csvf.c    **** 			switch ( op ) {
 2968              		.loc 1 551 4
 2969 1ffb 83BD08FF 		cmpl	$84, -248(%rbp)
 2969      FFFF54
 2970 2002 0F849C00 		je	.L188
 2970      0000
 2971 2008 83BD08FF 		cmpl	$84, -248(%rbp)
 2971      FFFF54
 2972 200f 0F87080F 		ja	.L235
 2972      0000
 2973 2015 83BD08FF 		cmpl	$72, -248(%rbp)
 2973      FFFF48
 2974 201c 7412     		je	.L190
 2975 201e 83BD08FF 		cmpl	$83, -248(%rbp)
 2975      FFFF53
 2976 2025 0F84F300 		je	.L191
 2976      0000
 2977              	.LBE5:
 2978              	.LBE4:
 461:svf2csvf.c    **** 		// HIR/HDR, TIR/TDR, SIR/SDR are of the form "**R <length> [TDI (<tdi>)] [TDO (<tdo>)] [MASK (<ma
 2979              		.loc 1 461 4
 2980 202b E9ED0E00 		jmp	.L235
 2980      00
 2981              	.L190:
 2982              	.LBB8:
 2983              	.LBB6:
 552:svf2csvf.c    **** 			case HEAD:
 553:svf2csvf.c    **** 				fStatus = processLine(&cxt->dataHead, length, tdi, tdo, mask, error);
 2984              		.loc 1 553 15
 2985 2030 488B85F8 		movq	-264(%rbp), %rax
 2985      FEFFFF
 2986 2037 4C8B85D8 		movq	-296(%rbp), %r8
 2986      FEFFFF
 2987 203e 488BBD50 		movq	-176(%rbp), %rdi
 2987      FFFFFF
 2988 2045 488B8D48 		movq	-184(%rbp), %rcx
 2988      FFFFFF
 2989 204c 488B9540 		movq	-192(%rbp), %rdx
 2989      FFFFFF
 2990 2053 8BB50CFF 		movl	-244(%rbp), %esi
 2990      FFFF
 2991 2059 4D89C1   		movq	%r8, %r9
 2992 205c 4989F8   		movq	%rdi, %r8
 2993 205f 4889C7   		movq	%rax, %rdi
 2994 2062 E882EDFF 		call	processLine
 2994      FF
 2995 2067 898510FF 		movl	%eax, -240(%rbp)
 2995      FFFF
 554:svf2csvf.c    **** 				CHECK_STATUS(fStatus, fStatus, cleanup, "parseLine()");
 2996              		.loc 1 554 5
 2997 206d 83BD10FF 		cmpl	$0, -240(%rbp)
 2997      FFFF00
 2998 2074 0F84600E 		je	.L236
 2998      0000
 2999              		.loc 1 554 5 is_stmt 0 discriminator 1
 3000 207a 488B85D8 		movq	-296(%rbp), %rax
 3000      FEFFFF
 3001 2081 488D1500 		leaq	.LC16(%rip), %rdx
 3001      000000
 3002 2088 4889D6   		movq	%rdx, %rsi
 3003 208b 4889C7   		movq	%rax, %rdi
 3004 208e E8000000 		call	errPrefix@PLT
 3004      00
 3005 2093 8B8510FF 		movl	-240(%rbp), %eax
 3005      FFFF
 3006 2099 898504FF 		movl	%eax, -252(%rbp)
 3006      FFFF
 3007 209f E97A0E00 		jmp	.L136
 3007      00
 3008              	.L188:
 555:svf2csvf.c    **** 				break;
 556:svf2csvf.c    **** 			case TAIL:
 557:svf2csvf.c    **** 				fStatus = processLine(&cxt->dataTail, length, tdi, tdo, mask, error);
 3009              		.loc 1 557 15 is_stmt 1
 3010 20a4 488B85F8 		movq	-264(%rbp), %rax
 3010      FEFFFF
 3011 20ab 488DB8A0 		leaq	416(%rax), %rdi
 3011      010000
 3012 20b2 4C8B85D8 		movq	-296(%rbp), %r8
 3012      FEFFFF
 3013 20b9 488BB550 		movq	-176(%rbp), %rsi
 3013      FFFFFF
 3014 20c0 488B8D48 		movq	-184(%rbp), %rcx
 3014      FFFFFF
 3015 20c7 488B9540 		movq	-192(%rbp), %rdx
 3015      FFFFFF
 3016 20ce 8B850CFF 		movl	-244(%rbp), %eax
 3016      FFFF
 3017 20d4 4D89C1   		movq	%r8, %r9
 3018 20d7 4989F0   		movq	%rsi, %r8
 3019 20da 89C6     		movl	%eax, %esi
 3020 20dc E808EDFF 		call	processLine
 3020      FF
 3021 20e1 898510FF 		movl	%eax, -240(%rbp)
 3021      FFFF
 558:svf2csvf.c    **** 				CHECK_STATUS(fStatus, fStatus, cleanup, "parseLine()");
 3022              		.loc 1 558 5
 3023 20e7 83BD10FF 		cmpl	$0, -240(%rbp)
 3023      FFFF00
 3024 20ee 0F84E90D 		je	.L237
 3024      0000
 3025              		.loc 1 558 5 is_stmt 0 discriminator 1
 3026 20f4 488B85D8 		movq	-296(%rbp), %rax
 3026      FEFFFF
 3027 20fb 488D1500 		leaq	.LC16(%rip), %rdx
 3027      000000
 3028 2102 4889D6   		movq	%rdx, %rsi
 3029 2105 4889C7   		movq	%rax, %rdi
 3030 2108 E8000000 		call	errPrefix@PLT
 3030      00
 3031 210d 8B8510FF 		movl	-240(%rbp), %eax
 3031      FFFF
 3032 2113 898504FF 		movl	%eax, -252(%rbp)
 3032      FFFF
 3033 2119 E9000E00 		jmp	.L136
 3033      00
 3034              	.L191:
 559:svf2csvf.c    **** 				break;
 560:svf2csvf.c    **** 			case BODY:
 561:svf2csvf.c    **** 				fStatus = processLine(&cxt->dataBody, length, tdi, tdo, mask, error);
 3035              		.loc 1 561 15 is_stmt 1
 3036 211e 488B85F8 		movq	-264(%rbp), %rax
 3036      FEFFFF
 3037 2125 488DB8D0 		leaq	208(%rax), %rdi
 3037      000000
 3038 212c 4C8B85D8 		movq	-296(%rbp), %r8
 3038      FEFFFF
 3039 2133 488BB550 		movq	-176(%rbp), %rsi
 3039      FFFFFF
 3040 213a 488B8D48 		movq	-184(%rbp), %rcx
 3040      FFFFFF
 3041 2141 488B9540 		movq	-192(%rbp), %rdx
 3041      FFFFFF
 3042 2148 8B850CFF 		movl	-244(%rbp), %eax
 3042      FFFF
 3043 214e 4D89C1   		movq	%r8, %r9
 3044 2151 4989F0   		movq	%rsi, %r8
 3045 2154 89C6     		movl	%eax, %esi
 3046 2156 E88EECFF 		call	processLine
 3046      FF
 3047 215b 898510FF 		movl	%eax, -240(%rbp)
 3047      FFFF
 562:svf2csvf.c    **** 				CHECK_STATUS(fStatus, fStatus, cleanup, "parseLine()");
 3048              		.loc 1 562 5
 3049 2161 83BD10FF 		cmpl	$0, -240(%rbp)
 3049      FFFF00
 3050 2168 742A     		je	.L194
 3051              		.loc 1 562 5 is_stmt 0 discriminator 1
 3052 216a 488B85D8 		movq	-296(%rbp), %rax
 3052      FEFFFF
 3053 2171 488D1500 		leaq	.LC16(%rip), %rdx
 3053      000000
 3054 2178 4889D6   		movq	%rdx, %rsi
 3055 217b 4889C7   		movq	%rax, %rdi
 3056 217e E8000000 		call	errPrefix@PLT
 3056      00
 3057 2183 8B8510FF 		movl	-240(%rbp), %eax
 3057      FFFF
 3058 2189 898504FF 		movl	%eax, -252(%rbp)
 3058      FFFF
 3059 218f E98A0D00 		jmp	.L136
 3059      00
 3060              	.L194:
 563:svf2csvf.c    **** 				if (
 564:svf2csvf.c    **** 					cxt->dataHead.numBits + cxt->dataBody.numBits + cxt->dataTail.numBits
 3061              		.loc 1 564 19 is_stmt 1
 3062 2194 488B85F8 		movq	-264(%rbp), %rax
 3062      FEFFFF
 3063 219b 8B10     		movl	(%rax), %edx
 3064              		.loc 1 564 43
 3065 219d 488B85F8 		movq	-264(%rbp), %rax
 3065      FEFFFF
 3066 21a4 8B80D000 		movl	208(%rax), %eax
 3066      0000
 3067              		.loc 1 564 28
 3068 21aa 01C2     		addl	%eax, %edx
 3069              		.loc 1 564 67
 3070 21ac 488B85F8 		movq	-264(%rbp), %rax
 3070      FEFFFF
 3071 21b3 8B80A001 		movl	416(%rax), %eax
 3071      0000
 3072              		.loc 1 564 52
 3073 21b9 01C2     		addl	%eax, %edx
 565:svf2csvf.c    **** 					!= cxt->curLength
 3074              		.loc 1 565 12
 3075 21bb 488B85F8 		movq	-264(%rbp), %rax
 3075      FEFFFF
 3076 21c2 8B807002 		movl	624(%rax), %eax
 3076      0000
 563:svf2csvf.c    **** 				if (
 3077              		.loc 1 563 8
 3078 21c8 39C2     		cmpl	%eax, %edx
 3079 21ca 0F84FF00 		je	.L195
 3079      0000
 566:svf2csvf.c    **** 				) {
 567:svf2csvf.c    **** 					cxt->curLength = cxt->dataHead.numBits + cxt->dataBody.numBits + cxt->dataTail.numBits;
 3080              		.loc 1 567 36
 3081 21d0 488B85F8 		movq	-264(%rbp), %rax
 3081      FEFFFF
 3082 21d7 8B10     		movl	(%rax), %edx
 3083              		.loc 1 567 60
 3084 21d9 488B85F8 		movq	-264(%rbp), %rax
 3084      FEFFFF
 3085 21e0 8B80D000 		movl	208(%rax), %eax
 3085      0000
 3086              		.loc 1 567 45
 3087 21e6 01C2     		addl	%eax, %edx
 3088              		.loc 1 567 84
 3089 21e8 488B85F8 		movq	-264(%rbp), %rax
 3089      FEFFFF
 3090 21ef 8B80A001 		movl	416(%rax), %eax
 3090      0000
 3091              		.loc 1 567 69
 3092 21f5 01C2     		addl	%eax, %edx
 3093              		.loc 1 567 21
 3094 21f7 488B85F8 		movq	-264(%rbp), %rax
 3094      FEFFFF
 3095 21fe 89907002 		movl	%edx, 624(%rax)
 3095      0000
 568:svf2csvf.c    **** 					cxt->numCommands++;
 3096              		.loc 1 568 9
 3097 2204 488B85F8 		movq	-264(%rbp), %rax
 3097      FEFFFF
 3098 220b 8B809C02 		movl	668(%rax), %eax
 3098      0000
 3099              		.loc 1 568 22
 3100 2211 8D5001   		leal	1(%rax), %edx
 3101 2214 488B85F8 		movq	-264(%rbp), %rax
 3101      FEFFFF
 3102 221b 89909C02 		movl	%edx, 668(%rax)
 3102      0000
 569:svf2csvf.c    **** 					bStatus = bufAppendByte(csvfBuf, XSDRSIZE, error);
 3103              		.loc 1 569 16
 3104 2221 488B95D8 		movq	-296(%rbp), %rdx
 3104      FEFFFF
 3105 2228 488B85E8 		movq	-280(%rbp), %rax
 3105      FEFFFF
 3106 222f BE080000 		movl	$8, %esi
 3106      00
 3107 2234 4889C7   		movq	%rax, %rdi
 3108 2237 E8000000 		call	bufAppendByte@PLT
 3108      00
 3109 223c 898514FF 		movl	%eax, -236(%rbp)
 3109      FFFF
 570:svf2csvf.c    **** 					CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 3110              		.loc 1 570 6
 3111 2242 83BD14FF 		cmpl	$0, -236(%rbp)
 3111      FFFF00
 3112 2249 7428     		je	.L196
 3113              		.loc 1 570 6 is_stmt 0 discriminator 1
 3114 224b 488B85D8 		movq	-296(%rbp), %rax
 3114      FEFFFF
 3115 2252 488D1500 		leaq	.LC16(%rip), %rdx
 3115      000000
 3116 2259 4889D6   		movq	%rdx, %rsi
 3117 225c 4889C7   		movq	%rax, %rdi
 3118 225f E8000000 		call	errPrefix@PLT
 3118      00
 3119 2264 C78504FF 		movl	$1, -252(%rbp)
 3119      FFFF0100 
 3119      0000
 3120 226e E9AB0C00 		jmp	.L136
 3120      00
 3121              	.L196:
 571:svf2csvf.c    **** 					bStatus = bufAppendLongBE(csvfBuf, cxt->curLength, error);
 3122              		.loc 1 571 16 is_stmt 1
 3123 2273 488B85F8 		movq	-264(%rbp), %rax
 3123      FEFFFF
 3124 227a 8B887002 		movl	624(%rax), %ecx
 3124      0000
 3125 2280 488B95D8 		movq	-296(%rbp), %rdx
 3125      FEFFFF
 3126 2287 488B85E8 		movq	-280(%rbp), %rax
 3126      FEFFFF
 3127 228e 89CE     		movl	%ecx, %esi
 3128 2290 4889C7   		movq	%rax, %rdi
 3129 2293 E8000000 		call	bufAppendLongBE@PLT
 3129      00
 3130 2298 898514FF 		movl	%eax, -236(%rbp)
 3130      FFFF
 572:svf2csvf.c    **** 					CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 3131              		.loc 1 572 6
 3132 229e 83BD14FF 		cmpl	$0, -236(%rbp)
 3132      FFFF00
 3133 22a5 7428     		je	.L195
 3134              		.loc 1 572 6 is_stmt 0 discriminator 1
 3135 22a7 488B85D8 		movq	-296(%rbp), %rax
 3135      FEFFFF
 3136 22ae 488D1500 		leaq	.LC16(%rip), %rdx
 3136      000000
 3137 22b5 4889D6   		movq	%rdx, %rsi
 3138 22b8 4889C7   		movq	%rax, %rdi
 3139 22bb E8000000 		call	errPrefix@PLT
 3139      00
 3140 22c0 C78504FF 		movl	$1, -252(%rbp)
 3140      FFFF0100 
 3140      0000
 3141 22ca E94F0C00 		jmp	.L136
 3141      00
 3142              	.L195:
 573:svf2csvf.c    **** 				}
 574:svf2csvf.c    **** 				bStatus = bufDeepCopy(&tmpHead, &cxt->dataHead.mask, error);
 3143              		.loc 1 574 37 is_stmt 1
 3144 22cf 488B85F8 		movq	-264(%rbp), %rax
 3144      FEFFFF
 3145 22d6 488D4848 		leaq	72(%rax), %rcx
 3146              		.loc 1 574 15
 3147 22da 488B95D8 		movq	-296(%rbp), %rdx
 3147      FEFFFF
 3148 22e1 488D8570 		leaq	-144(%rbp), %rax
 3148      FFFFFF
 3149 22e8 4889CE   		movq	%rcx, %rsi
 3150 22eb 4889C7   		movq	%rax, %rdi
 3151 22ee E8000000 		call	bufDeepCopy@PLT
 3151      00
 3152 22f3 898514FF 		movl	%eax, -236(%rbp)
 3152      FFFF
 575:svf2csvf.c    **** 				CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 3153              		.loc 1 575 5
 3154 22f9 83BD14FF 		cmpl	$0, -236(%rbp)
 3154      FFFF00
 3155 2300 7428     		je	.L197
 3156              		.loc 1 575 5 is_stmt 0 discriminator 1
 3157 2302 488B85D8 		movq	-296(%rbp), %rax
 3157      FEFFFF
 3158 2309 488D1500 		leaq	.LC16(%rip), %rdx
 3158      000000
 3159 2310 4889D6   		movq	%rdx, %rsi
 3160 2313 4889C7   		movq	%rax, %rdi
 3161 2316 E8000000 		call	errPrefix@PLT
 3161      00
 3162 231b C78504FF 		movl	$1, -252(%rbp)
 3162      FFFF0100 
 3162      0000
 3163 2325 E9F40B00 		jmp	.L136
 3163      00
 3164              	.L197:
 576:svf2csvf.c    **** 				bStatus = bufDeepCopy(&tmpBody1, &cxt->dataBody.mask, error);
 3165              		.loc 1 576 38 is_stmt 1
 3166 232a 488B85F8 		movq	-264(%rbp), %rax
 3166      FEFFFF
 3167 2331 488D8818 		leaq	280(%rax), %rcx
 3167      010000
 3168              		.loc 1 576 15
 3169 2338 488B95D8 		movq	-296(%rbp), %rdx
 3169      FEFFFF
 3170 233f 488D4590 		leaq	-112(%rbp), %rax
 3171 2343 4889CE   		movq	%rcx, %rsi
 3172 2346 4889C7   		movq	%rax, %rdi
 3173 2349 E8000000 		call	bufDeepCopy@PLT
 3173      00
 3174 234e 898514FF 		movl	%eax, -236(%rbp)
 3174      FFFF
 577:svf2csvf.c    **** 				CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 3175              		.loc 1 577 5
 3176 2354 83BD14FF 		cmpl	$0, -236(%rbp)
 3176      FFFF00
 3177 235b 7428     		je	.L198
 3178              		.loc 1 577 5 is_stmt 0 discriminator 1
 3179 235d 488B85D8 		movq	-296(%rbp), %rax
 3179      FEFFFF
 3180 2364 488D1500 		leaq	.LC16(%rip), %rdx
 3180      000000
 3181 236b 4889D6   		movq	%rdx, %rsi
 3182 236e 4889C7   		movq	%rax, %rdi
 3183 2371 E8000000 		call	errPrefix@PLT
 3183      00
 3184 2376 C78504FF 		movl	$1, -252(%rbp)
 3184      FFFF0100 
 3184      0000
 3185 2380 E9990B00 		jmp	.L136
 3185      00
 3186              	.L198:
 578:svf2csvf.c    **** 				bStatus = bufDeepCopy(&tmpTail, &cxt->dataTail.mask, error);
 3187              		.loc 1 578 37 is_stmt 1
 3188 2385 488B85F8 		movq	-264(%rbp), %rax
 3188      FEFFFF
 3189 238c 488D88E8 		leaq	488(%rax), %rcx
 3189      010000
 3190              		.loc 1 578 15
 3191 2393 488B95D8 		movq	-296(%rbp), %rdx
 3191      FEFFFF
 3192 239a 488D45D0 		leaq	-48(%rbp), %rax
 3193 239e 4889CE   		movq	%rcx, %rsi
 3194 23a1 4889C7   		movq	%rax, %rdi
 3195 23a4 E8000000 		call	bufDeepCopy@PLT
 3195      00
 3196 23a9 898514FF 		movl	%eax, -236(%rbp)
 3196      FFFF
 579:svf2csvf.c    **** 				CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 3197              		.loc 1 579 5
 3198 23af 83BD14FF 		cmpl	$0, -236(%rbp)
 3198      FFFF00
 3199 23b6 7428     		je	.L199
 3200              		.loc 1 579 5 is_stmt 0 discriminator 1
 3201 23b8 488B85D8 		movq	-296(%rbp), %rax
 3201      FEFFFF
 3202 23bf 488D1500 		leaq	.LC16(%rip), %rdx
 3202      000000
 3203 23c6 4889D6   		movq	%rdx, %rsi
 3204 23c9 4889C7   		movq	%rax, %rdi
 3205 23cc E8000000 		call	errPrefix@PLT
 3205      00
 3206 23d1 C78504FF 		movl	$1, -252(%rbp)
 3206      FFFF0100 
 3206      0000
 3207 23db E93E0B00 		jmp	.L136
 3207      00
 3208              	.L199:
 580:svf2csvf.c    **** 				fStatus = headTail(
 3209              		.loc 1 580 15 is_stmt 1
 3210 23e0 488B85F8 		movq	-264(%rbp), %rax
 3210      FEFFFF
 3211 23e7 448B80A0 		movl	416(%rax), %r8d
 3211      010000
 3212 23ee 488B85F8 		movq	-264(%rbp), %rax
 3212      FEFFFF
 3213 23f5 8B38     		movl	(%rax), %edi
 3214 23f7 488B85F8 		movq	-264(%rbp), %rax
 3214      FEFFFF
 3215 23fe 8B88D000 		movl	208(%rax), %ecx
 3215      0000
 3216 2404 488D55D0 		leaq	-48(%rbp), %rdx
 3217 2408 488DB570 		leaq	-144(%rbp), %rsi
 3217      FFFFFF
 3218 240f 488D4590 		leaq	-112(%rbp), %rax
 3219 2413 4883EC08 		subq	$8, %rsp
 3220 2417 FFB5D8FE 		pushq	-296(%rbp)
 3220      FFFF
 3221 241d 4589C1   		movl	%r8d, %r9d
 3222 2420 4189F8   		movl	%edi, %r8d
 3223 2423 4889C7   		movq	%rax, %rdi
 3224 2426 E8000000 		call	headTail@PLT
 3224      00
 3225 242b 4883C410 		addq	$16, %rsp
 3226 242f 898510FF 		movl	%eax, -240(%rbp)
 3226      FFFF
 581:svf2csvf.c    **** 					&tmpBody1, &tmpHead, &tmpTail,
 582:svf2csvf.c    **** 					cxt->dataBody.numBits, cxt->dataHead.numBits, cxt->dataTail.numBits,
 583:svf2csvf.c    **** 					error);
 584:svf2csvf.c    **** 				zeroMask = isAllZero(&tmpBody1);
 3227              		.loc 1 584 16
 3228 2435 488D4590 		leaq	-112(%rbp), %rax
 3229 2439 4889C7   		movq	%rax, %rdi
 3230 243c E840ECFF 		call	isAllZero
 3230      FF
 3231 2441 888503FF 		movb	%al, -253(%rbp)
 3231      FFFF
 585:svf2csvf.c    **** 				if (
 586:svf2csvf.c    **** 					tmpBody1.length != cxt->curMaskBuf.length ||
 3232              		.loc 1 586 14
 3233 2447 488B5598 		movq	-104(%rbp), %rdx
 3234              		.loc 1 586 40
 3235 244b 488B85F8 		movq	-264(%rbp), %rax
 3235      FEFFFF
 3236 2452 488B8080 		movq	640(%rax), %rax
 3236      020000
 585:svf2csvf.c    **** 				if (
 3237              		.loc 1 585 8
 3238 2459 4839C2   		cmpq	%rax, %rdx
 3239 245c 7525     		jne	.L200
 587:svf2csvf.c    **** 					memcmp(tmpBody1.data, cxt->curMaskBuf.data, tmpBody1.length)
 3240              		.loc 1 587 6
 3241 245e 488B5598 		movq	-104(%rbp), %rdx
 3242              		.loc 1 587 43
 3243 2462 488B85F8 		movq	-264(%rbp), %rax
 3243      FEFFFF
 3244 2469 488B8878 		movq	632(%rax), %rcx
 3244      020000
 3245              		.loc 1 587 21
 3246 2470 488B4590 		movq	-112(%rbp), %rax
 3247              		.loc 1 587 6
 3248 2474 4889CE   		movq	%rcx, %rsi
 3249 2477 4889C7   		movq	%rax, %rdi
 3250 247a E8000000 		call	memcmp@PLT
 3250      00
 586:svf2csvf.c    **** 					memcmp(tmpBody1.data, cxt->curMaskBuf.data, tmpBody1.length)
 3251              		.loc 1 586 48
 3252 247f 85C0     		testl	%eax, %eax
 3253 2481 742B     		je	.L201
 3254              	.L200:
 588:svf2csvf.c    **** 				) {
 589:svf2csvf.c    **** 					bufSwap(&cxt->curMaskBuf, &tmpBody1);
 3255              		.loc 1 589 6
 3256 2483 488B85F8 		movq	-264(%rbp), %rax
 3256      FEFFFF
 3257 248a 488D9078 		leaq	632(%rax), %rdx
 3257      020000
 3258 2491 488D4590 		leaq	-112(%rbp), %rax
 3259 2495 4889C6   		movq	%rax, %rsi
 3260 2498 4889D7   		movq	%rdx, %rdi
 3261 249b E8000000 		call	bufSwap@PLT
 3261      00
 590:svf2csvf.c    **** 					cxt->newMaskWritten = false;
 3262              		.loc 1 590 26
 3263 24a0 488B85F8 		movq	-264(%rbp), %rax
 3263      FEFFFF
 3264 24a7 C680A002 		movb	$0, 672(%rax)
 3264      000000
 3265              	.L201:
 591:svf2csvf.c    **** 				}
 592:svf2csvf.c    **** 				if ( !zeroMask && tdo && !cxt->newMaskWritten ) {
 3266              		.loc 1 592 10
 3267 24ae 0FB68503 		movzbl	-253(%rbp), %eax
 3267      FFFFFF
 3268 24b5 83F001   		xorl	$1, %eax
 3269              		.loc 1 592 8
 3270 24b8 84C0     		testb	%al, %al
 3271 24ba 0F841601 		je	.L202
 3271      0000
 3272              		.loc 1 592 20 discriminator 1
 3273 24c0 4883BD48 		cmpq	$0, -184(%rbp)
 3273      FFFFFF00 
 3274 24c8 0F840801 		je	.L202
 3274      0000
 3275              		.loc 1 592 34 discriminator 2
 3276 24ce 488B85F8 		movq	-264(%rbp), %rax
 3276      FEFFFF
 3277 24d5 0FB680A0 		movzbl	672(%rax), %eax
 3277      020000
 3278              		.loc 1 592 30 discriminator 2
 3279 24dc 83F001   		xorl	$1, %eax
 3280              		.loc 1 592 27 discriminator 2
 3281 24df 84C0     		testb	%al, %al
 3282 24e1 0F84EF00 		je	.L202
 3282      0000
 593:svf2csvf.c    **** 					// New mask is nonzero and different from the last one sent
 594:svf2csvf.c    **** 					cxt->numCommands++;
 3283              		.loc 1 594 9
 3284 24e7 488B85F8 		movq	-264(%rbp), %rax
 3284      FEFFFF
 3285 24ee 8B809C02 		movl	668(%rax), %eax
 3285      0000
 3286              		.loc 1 594 22
 3287 24f4 8D5001   		leal	1(%rax), %edx
 3288 24f7 488B85F8 		movq	-264(%rbp), %rax
 3288      FEFFFF
 3289 24fe 89909C02 		movl	%edx, 668(%rax)
 3289      0000
 595:svf2csvf.c    **** 					bStatus = bufAppendByte(csvfBuf, XTDOMASK, error);
 3290              		.loc 1 595 16
 3291 2504 488B95D8 		movq	-296(%rbp), %rdx
 3291      FEFFFF
 3292 250b 488B85E8 		movq	-280(%rbp), %rax
 3292      FEFFFF
 3293 2512 BE010000 		movl	$1, %esi
 3293      00
 3294 2517 4889C7   		movq	%rax, %rdi
 3295 251a E8000000 		call	bufAppendByte@PLT
 3295      00
 3296 251f 898514FF 		movl	%eax, -236(%rbp)
 3296      FFFF
 596:svf2csvf.c    **** 					CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 3297              		.loc 1 596 6
 3298 2525 83BD14FF 		cmpl	$0, -236(%rbp)
 3298      FFFF00
 3299 252c 7428     		je	.L203
 3300              		.loc 1 596 6 is_stmt 0 discriminator 1
 3301 252e 488B85D8 		movq	-296(%rbp), %rax
 3301      FEFFFF
 3302 2535 488D1500 		leaq	.LC16(%rip), %rdx
 3302      000000
 3303 253c 4889D6   		movq	%rdx, %rsi
 3304 253f 4889C7   		movq	%rax, %rdi
 3305 2542 E8000000 		call	errPrefix@PLT
 3305      00
 3306 2547 C78504FF 		movl	$1, -252(%rbp)
 3306      FFFF0100 
 3306      0000
 3307 2551 E9C80900 		jmp	.L136
 3307      00
 3308              	.L203:
 597:svf2csvf.c    **** 					fStatus = appendSwapped(csvfBuf, cxt->curMaskBuf.data, (uint32)cxt->curMaskBuf.length, error);
 3309              		.loc 1 597 84 is_stmt 1
 3310 2556 488B85F8 		movq	-264(%rbp), %rax
 3310      FEFFFF
 3311 255d 488B8080 		movq	640(%rax), %rax
 3311      020000
 3312              		.loc 1 597 16
 3313 2564 89C7     		movl	%eax, %edi
 3314              		.loc 1 597 54
 3315 2566 488B85F8 		movq	-264(%rbp), %rax
 3315      FEFFFF
 3316 256d 488BB078 		movq	632(%rax), %rsi
 3316      020000
 3317              		.loc 1 597 16
 3318 2574 488B95D8 		movq	-296(%rbp), %rdx
 3318      FEFFFF
 3319 257b 488B85E8 		movq	-280(%rbp), %rax
 3319      FEFFFF
 3320 2582 4889D1   		movq	%rdx, %rcx
 3321 2585 89FA     		movl	%edi, %edx
 3322 2587 4889C7   		movq	%rax, %rdi
 3323 258a E842ECFF 		call	appendSwapped
 3323      FF
 3324 258f 898510FF 		movl	%eax, -240(%rbp)
 3324      FFFF
 598:svf2csvf.c    **** 					CHECK_STATUS(fStatus, fStatus, cleanup, "parseLine()");
 3325              		.loc 1 598 6
 3326 2595 83BD10FF 		cmpl	$0, -240(%rbp)
 3326      FFFF00
 3327 259c 742A     		je	.L204
 3328              		.loc 1 598 6 is_stmt 0 discriminator 1
 3329 259e 488B85D8 		movq	-296(%rbp), %rax
 3329      FEFFFF
 3330 25a5 488D1500 		leaq	.LC16(%rip), %rdx
 3330      000000
 3331 25ac 4889D6   		movq	%rdx, %rsi
 3332 25af 4889C7   		movq	%rax, %rdi
 3333 25b2 E8000000 		call	errPrefix@PLT
 3333      00
 3334 25b7 8B8510FF 		movl	-240(%rbp), %eax
 3334      FFFF
 3335 25bd 898504FF 		movl	%eax, -252(%rbp)
 3335      FFFF
 3336 25c3 E9560900 		jmp	.L136
 3336      00
 3337              	.L204:
 599:svf2csvf.c    **** 					cxt->newMaskWritten = true;
 3338              		.loc 1 599 26 is_stmt 1
 3339 25c8 488B85F8 		movq	-264(%rbp), %rax
 3339      FEFFFF
 3340 25cf C680A002 		movb	$1, 672(%rax)
 3340      000001
 3341              	.L202:
 600:svf2csvf.c    **** 				}
 601:svf2csvf.c    **** 
 602:svf2csvf.c    **** 				bStatus = bufDeepCopy(&tmpHead, &cxt->dataHead.tdi, error);
 3342              		.loc 1 602 37
 3343 25d6 488B85F8 		movq	-264(%rbp), %rax
 3343      FEFFFF
 3344 25dd 488D4808 		leaq	8(%rax), %rcx
 3345              		.loc 1 602 15
 3346 25e1 488B95D8 		movq	-296(%rbp), %rdx
 3346      FEFFFF
 3347 25e8 488D8570 		leaq	-144(%rbp), %rax
 3347      FFFFFF
 3348 25ef 4889CE   		movq	%rcx, %rsi
 3349 25f2 4889C7   		movq	%rax, %rdi
 3350 25f5 E8000000 		call	bufDeepCopy@PLT
 3350      00
 3351 25fa 898514FF 		movl	%eax, -236(%rbp)
 3351      FFFF
 603:svf2csvf.c    **** 				CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 3352              		.loc 1 603 5
 3353 2600 83BD14FF 		cmpl	$0, -236(%rbp)
 3353      FFFF00
 3354 2607 7428     		je	.L205
 3355              		.loc 1 603 5 is_stmt 0 discriminator 1
 3356 2609 488B85D8 		movq	-296(%rbp), %rax
 3356      FEFFFF
 3357 2610 488D1500 		leaq	.LC16(%rip), %rdx
 3357      000000
 3358 2617 4889D6   		movq	%rdx, %rsi
 3359 261a 4889C7   		movq	%rax, %rdi
 3360 261d E8000000 		call	errPrefix@PLT
 3360      00
 3361 2622 C78504FF 		movl	$1, -252(%rbp)
 3361      FFFF0100 
 3361      0000
 3362 262c E9ED0800 		jmp	.L136
 3362      00
 3363              	.L205:
 604:svf2csvf.c    **** 				bStatus = bufDeepCopy(&tmpBody1, &cxt->dataBody.tdi, error);
 3364              		.loc 1 604 38 is_stmt 1
 3365 2631 488B85F8 		movq	-264(%rbp), %rax
 3365      FEFFFF
 3366 2638 488D88D8 		leaq	216(%rax), %rcx
 3366      000000
 3367              		.loc 1 604 15
 3368 263f 488B95D8 		movq	-296(%rbp), %rdx
 3368      FEFFFF
 3369 2646 488D4590 		leaq	-112(%rbp), %rax
 3370 264a 4889CE   		movq	%rcx, %rsi
 3371 264d 4889C7   		movq	%rax, %rdi
 3372 2650 E8000000 		call	bufDeepCopy@PLT
 3372      00
 3373 2655 898514FF 		movl	%eax, -236(%rbp)
 3373      FFFF
 605:svf2csvf.c    **** 				CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 3374              		.loc 1 605 5
 3375 265b 83BD14FF 		cmpl	$0, -236(%rbp)
 3375      FFFF00
 3376 2662 7428     		je	.L206
 3377              		.loc 1 605 5 is_stmt 0 discriminator 1
 3378 2664 488B85D8 		movq	-296(%rbp), %rax
 3378      FEFFFF
 3379 266b 488D1500 		leaq	.LC16(%rip), %rdx
 3379      000000
 3380 2672 4889D6   		movq	%rdx, %rsi
 3381 2675 4889C7   		movq	%rax, %rdi
 3382 2678 E8000000 		call	errPrefix@PLT
 3382      00
 3383 267d C78504FF 		movl	$1, -252(%rbp)
 3383      FFFF0100 
 3383      0000
 3384 2687 E9920800 		jmp	.L136
 3384      00
 3385              	.L206:
 606:svf2csvf.c    **** 				bStatus = bufDeepCopy(&tmpTail, &cxt->dataTail.tdi, error);
 3386              		.loc 1 606 37 is_stmt 1
 3387 268c 488B85F8 		movq	-264(%rbp), %rax
 3387      FEFFFF
 3388 2693 488D88A8 		leaq	424(%rax), %rcx
 3388      010000
 3389              		.loc 1 606 15
 3390 269a 488B95D8 		movq	-296(%rbp), %rdx
 3390      FEFFFF
 3391 26a1 488D45D0 		leaq	-48(%rbp), %rax
 3392 26a5 4889CE   		movq	%rcx, %rsi
 3393 26a8 4889C7   		movq	%rax, %rdi
 3394 26ab E8000000 		call	bufDeepCopy@PLT
 3394      00
 3395 26b0 898514FF 		movl	%eax, -236(%rbp)
 3395      FFFF
 607:svf2csvf.c    **** 				CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 3396              		.loc 1 607 5
 3397 26b6 83BD14FF 		cmpl	$0, -236(%rbp)
 3397      FFFF00
 3398 26bd 7428     		je	.L207
 3399              		.loc 1 607 5 is_stmt 0 discriminator 1
 3400 26bf 488B85D8 		movq	-296(%rbp), %rax
 3400      FEFFFF
 3401 26c6 488D1500 		leaq	.LC16(%rip), %rdx
 3401      000000
 3402 26cd 4889D6   		movq	%rdx, %rsi
 3403 26d0 4889C7   		movq	%rax, %rdi
 3404 26d3 E8000000 		call	errPrefix@PLT
 3404      00
 3405 26d8 C78504FF 		movl	$1, -252(%rbp)
 3405      FFFF0100 
 3405      0000
 3406 26e2 E9370800 		jmp	.L136
 3406      00
 3407              	.L207:
 608:svf2csvf.c    **** 				fStatus = headTail(
 3408              		.loc 1 608 15 is_stmt 1
 3409 26e7 488B85F8 		movq	-264(%rbp), %rax
 3409      FEFFFF
 3410 26ee 448B80A0 		movl	416(%rax), %r8d
 3410      010000
 3411 26f5 488B85F8 		movq	-264(%rbp), %rax
 3411      FEFFFF
 3412 26fc 8B38     		movl	(%rax), %edi
 3413 26fe 488B85F8 		movq	-264(%rbp), %rax
 3413      FEFFFF
 3414 2705 8B88D000 		movl	208(%rax), %ecx
 3414      0000
 3415 270b 488D55D0 		leaq	-48(%rbp), %rdx
 3416 270f 488DB570 		leaq	-144(%rbp), %rsi
 3416      FFFFFF
 3417 2716 488D4590 		leaq	-112(%rbp), %rax
 3418 271a 4883EC08 		subq	$8, %rsp
 3419 271e FFB5D8FE 		pushq	-296(%rbp)
 3419      FFFF
 3420 2724 4589C1   		movl	%r8d, %r9d
 3421 2727 4189F8   		movl	%edi, %r8d
 3422 272a 4889C7   		movq	%rax, %rdi
 3423 272d E8000000 		call	headTail@PLT
 3423      00
 3424 2732 4883C410 		addq	$16, %rsp
 3425 2736 898510FF 		movl	%eax, -240(%rbp)
 3425      FFFF
 609:svf2csvf.c    **** 					&tmpBody1, &tmpHead, &tmpTail,
 610:svf2csvf.c    **** 					cxt->dataBody.numBits, cxt->dataHead.numBits, cxt->dataTail.numBits,
 611:svf2csvf.c    **** 					error);
 612:svf2csvf.c    **** 				if ( zeroMask || !tdo ) {
 3426              		.loc 1 612 8
 3427 273c 80BD03FF 		cmpb	$0, -253(%rbp)
 3427      FFFF00
 3428 2743 750E     		jne	.L208
 3429              		.loc 1 612 19 discriminator 1
 3430 2745 4883BD48 		cmpq	$0, -184(%rbp)
 3430      FFFFFF00 
 3431 274d 0F85D100 		jne	.L209
 3431      0000
 3432              	.L208:
 613:svf2csvf.c    **** 					cxt->numCommands++;
 3433              		.loc 1 613 9
 3434 2753 488B85F8 		movq	-264(%rbp), %rax
 3434      FEFFFF
 3435 275a 8B809C02 		movl	668(%rax), %eax
 3435      0000
 3436              		.loc 1 613 22
 3437 2760 8D5001   		leal	1(%rax), %edx
 3438 2763 488B85F8 		movq	-264(%rbp), %rax
 3438      FEFFFF
 3439 276a 89909C02 		movl	%edx, 668(%rax)
 3439      0000
 614:svf2csvf.c    **** 					bStatus = bufAppendByte(csvfBuf, XSDR, error);
 3440              		.loc 1 614 16
 3441 2770 488B95D8 		movq	-296(%rbp), %rdx
 3441      FEFFFF
 3442 2777 488B85E8 		movq	-280(%rbp), %rax
 3442      FEFFFF
 3443 277e BE030000 		movl	$3, %esi
 3443      00
 3444 2783 4889C7   		movq	%rax, %rdi
 3445 2786 E8000000 		call	bufAppendByte@PLT
 3445      00
 3446 278b 898514FF 		movl	%eax, -236(%rbp)
 3446      FFFF
 615:svf2csvf.c    **** 					CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 3447              		.loc 1 615 6
 3448 2791 83BD14FF 		cmpl	$0, -236(%rbp)
 3448      FFFF00
 3449 2798 7428     		je	.L210
 3450              		.loc 1 615 6 is_stmt 0 discriminator 1
 3451 279a 488B85D8 		movq	-296(%rbp), %rax
 3451      FEFFFF
 3452 27a1 488D1500 		leaq	.LC16(%rip), %rdx
 3452      000000
 3453 27a8 4889D6   		movq	%rdx, %rsi
 3454 27ab 4889C7   		movq	%rax, %rdi
 3455 27ae E8000000 		call	errPrefix@PLT
 3455      00
 3456 27b3 C78504FF 		movl	$1, -252(%rbp)
 3456      FFFF0100 
 3456      0000
 3457 27bd E95C0700 		jmp	.L136
 3457      00
 3458              	.L210:
 616:svf2csvf.c    **** 					fStatus = appendSwapped(csvfBuf, tmpBody1.data, (uint32)tmpBody1.length, error);
 3459              		.loc 1 616 70 is_stmt 1
 3460 27c2 488B4598 		movq	-104(%rbp), %rax
 3461              		.loc 1 616 16
 3462 27c6 89C7     		movl	%eax, %edi
 3463              		.loc 1 616 47
 3464 27c8 488B7590 		movq	-112(%rbp), %rsi
 3465              		.loc 1 616 16
 3466 27cc 488B95D8 		movq	-296(%rbp), %rdx
 3466      FEFFFF
 3467 27d3 488B85E8 		movq	-280(%rbp), %rax
 3467      FEFFFF
 3468 27da 4889D1   		movq	%rdx, %rcx
 3469 27dd 89FA     		movl	%edi, %edx
 3470 27df 4889C7   		movq	%rax, %rdi
 3471 27e2 E8EAE9FF 		call	appendSwapped
 3471      FF
 3472 27e7 898510FF 		movl	%eax, -240(%rbp)
 3472      FFFF
 617:svf2csvf.c    **** 					CHECK_STATUS(fStatus, fStatus, cleanup, "parseLine()");
 3473              		.loc 1 617 6
 3474 27ed 83BD10FF 		cmpl	$0, -240(%rbp)
 3474      FFFF00
 3475 27f4 0F849202 		je	.L212
 3475      0000
 3476              		.loc 1 617 6 is_stmt 0 discriminator 1
 3477 27fa 488B85D8 		movq	-296(%rbp), %rax
 3477      FEFFFF
 3478 2801 488D1500 		leaq	.LC16(%rip), %rdx
 3478      000000
 3479 2808 4889D6   		movq	%rdx, %rsi
 3480 280b 4889C7   		movq	%rax, %rdi
 3481 280e E8000000 		call	errPrefix@PLT
 3481      00
 3482 2813 8B8510FF 		movl	-240(%rbp), %eax
 3482      FFFF
 3483 2819 898504FF 		movl	%eax, -252(%rbp)
 3483      FFFF
 3484 281f E9FA0600 		jmp	.L136
 3484      00
 3485              	.L209:
 618:svf2csvf.c    **** 				} else {
 619:svf2csvf.c    **** 					bStatus = bufDeepCopy(&tmpHead, &cxt->dataHead.tdo, error);
 3486              		.loc 1 619 38 is_stmt 1
 3487 2824 488B85F8 		movq	-264(%rbp), %rax
 3487      FEFFFF
 3488 282b 488D4828 		leaq	40(%rax), %rcx
 3489              		.loc 1 619 16
 3490 282f 488B95D8 		movq	-296(%rbp), %rdx
 3490      FEFFFF
 3491 2836 488D8570 		leaq	-144(%rbp), %rax
 3491      FFFFFF
 3492 283d 4889CE   		movq	%rcx, %rsi
 3493 2840 4889C7   		movq	%rax, %rdi
 3494 2843 E8000000 		call	bufDeepCopy@PLT
 3494      00
 3495 2848 898514FF 		movl	%eax, -236(%rbp)
 3495      FFFF
 620:svf2csvf.c    **** 					CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 3496              		.loc 1 620 6
 3497 284e 83BD14FF 		cmpl	$0, -236(%rbp)
 3497      FFFF00
 3498 2855 7428     		je	.L213
 3499              		.loc 1 620 6 is_stmt 0 discriminator 1
 3500 2857 488B85D8 		movq	-296(%rbp), %rax
 3500      FEFFFF
 3501 285e 488D1500 		leaq	.LC16(%rip), %rdx
 3501      000000
 3502 2865 4889D6   		movq	%rdx, %rsi
 3503 2868 4889C7   		movq	%rax, %rdi
 3504 286b E8000000 		call	errPrefix@PLT
 3504      00
 3505 2870 C78504FF 		movl	$1, -252(%rbp)
 3505      FFFF0100 
 3505      0000
 3506 287a E99F0600 		jmp	.L136
 3506      00
 3507              	.L213:
 621:svf2csvf.c    **** 					bStatus = bufDeepCopy(&tmpBody2, &cxt->dataBody.tdo, error);
 3508              		.loc 1 621 39 is_stmt 1
 3509 287f 488B85F8 		movq	-264(%rbp), %rax
 3509      FEFFFF
 3510 2886 488D88F8 		leaq	248(%rax), %rcx
 3510      000000
 3511              		.loc 1 621 16
 3512 288d 488B95D8 		movq	-296(%rbp), %rdx
 3512      FEFFFF
 3513 2894 488D45B0 		leaq	-80(%rbp), %rax
 3514 2898 4889CE   		movq	%rcx, %rsi
 3515 289b 4889C7   		movq	%rax, %rdi
 3516 289e E8000000 		call	bufDeepCopy@PLT
 3516      00
 3517 28a3 898514FF 		movl	%eax, -236(%rbp)
 3517      FFFF
 622:svf2csvf.c    **** 					CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 3518              		.loc 1 622 6
 3519 28a9 83BD14FF 		cmpl	$0, -236(%rbp)
 3519      FFFF00
 3520 28b0 7428     		je	.L214
 3521              		.loc 1 622 6 is_stmt 0 discriminator 1
 3522 28b2 488B85D8 		movq	-296(%rbp), %rax
 3522      FEFFFF
 3523 28b9 488D1500 		leaq	.LC16(%rip), %rdx
 3523      000000
 3524 28c0 4889D6   		movq	%rdx, %rsi
 3525 28c3 4889C7   		movq	%rax, %rdi
 3526 28c6 E8000000 		call	errPrefix@PLT
 3526      00
 3527 28cb C78504FF 		movl	$1, -252(%rbp)
 3527      FFFF0100 
 3527      0000
 3528 28d5 E9440600 		jmp	.L136
 3528      00
 3529              	.L214:
 623:svf2csvf.c    **** 					bStatus = bufDeepCopy(&tmpTail, &cxt->dataTail.tdo, error);
 3530              		.loc 1 623 38 is_stmt 1
 3531 28da 488B85F8 		movq	-264(%rbp), %rax
 3531      FEFFFF
 3532 28e1 488D88C8 		leaq	456(%rax), %rcx
 3532      010000
 3533              		.loc 1 623 16
 3534 28e8 488B95D8 		movq	-296(%rbp), %rdx
 3534      FEFFFF
 3535 28ef 488D45D0 		leaq	-48(%rbp), %rax
 3536 28f3 4889CE   		movq	%rcx, %rsi
 3537 28f6 4889C7   		movq	%rax, %rdi
 3538 28f9 E8000000 		call	bufDeepCopy@PLT
 3538      00
 3539 28fe 898514FF 		movl	%eax, -236(%rbp)
 3539      FFFF
 624:svf2csvf.c    **** 					CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 3540              		.loc 1 624 6
 3541 2904 83BD14FF 		cmpl	$0, -236(%rbp)
 3541      FFFF00
 3542 290b 7428     		je	.L215
 3543              		.loc 1 624 6 is_stmt 0 discriminator 1
 3544 290d 488B85D8 		movq	-296(%rbp), %rax
 3544      FEFFFF
 3545 2914 488D1500 		leaq	.LC16(%rip), %rdx
 3545      000000
 3546 291b 4889D6   		movq	%rdx, %rsi
 3547 291e 4889C7   		movq	%rax, %rdi
 3548 2921 E8000000 		call	errPrefix@PLT
 3548      00
 3549 2926 C78504FF 		movl	$1, -252(%rbp)
 3549      FFFF0100 
 3549      0000
 3550 2930 E9E90500 		jmp	.L136
 3550      00
 3551              	.L215:
 625:svf2csvf.c    **** 					fStatus = headTail(
 3552              		.loc 1 625 16 is_stmt 1
 3553 2935 488B85F8 		movq	-264(%rbp), %rax
 3553      FEFFFF
 3554 293c 448B80A0 		movl	416(%rax), %r8d
 3554      010000
 3555 2943 488B85F8 		movq	-264(%rbp), %rax
 3555      FEFFFF
 3556 294a 8B38     		movl	(%rax), %edi
 3557 294c 488B85F8 		movq	-264(%rbp), %rax
 3557      FEFFFF
 3558 2953 8B88D000 		movl	208(%rax), %ecx
 3558      0000
 3559 2959 488D55D0 		leaq	-48(%rbp), %rdx
 3560 295d 488DB570 		leaq	-144(%rbp), %rsi
 3560      FFFFFF
 3561 2964 488D45B0 		leaq	-80(%rbp), %rax
 3562 2968 4883EC08 		subq	$8, %rsp
 3563 296c FFB5D8FE 		pushq	-296(%rbp)
 3563      FFFF
 3564 2972 4589C1   		movl	%r8d, %r9d
 3565 2975 4189F8   		movl	%edi, %r8d
 3566 2978 4889C7   		movq	%rax, %rdi
 3567 297b E8000000 		call	headTail@PLT
 3567      00
 3568 2980 4883C410 		addq	$16, %rsp
 3569 2984 898510FF 		movl	%eax, -240(%rbp)
 3569      FFFF
 626:svf2csvf.c    **** 						&tmpBody2, &tmpHead, &tmpTail,
 627:svf2csvf.c    **** 						cxt->dataBody.numBits, cxt->dataHead.numBits, cxt->dataTail.numBits,
 628:svf2csvf.c    **** 						error);
 629:svf2csvf.c    **** 					if ( maxBufSize && tmpBody2.length > *maxBufSize ) {
 3570              		.loc 1 629 9
 3571 298a 4883BDE0 		cmpq	$0, -288(%rbp)
 3571      FEFFFF00 
 3572 2992 7423     		je	.L216
 3573              		.loc 1 629 33 discriminator 1
 3574 2994 488B55B8 		movq	-72(%rbp), %rdx
 3575              		.loc 1 629 43 discriminator 1
 3576 2998 488B85E0 		movq	-288(%rbp), %rax
 3576      FEFFFF
 3577 299f 8B00     		movl	(%rax), %eax
 3578 29a1 89C0     		movl	%eax, %eax
 3579              		.loc 1 629 22 discriminator 1
 3580 29a3 4839C2   		cmpq	%rax, %rdx
 3581 29a6 760F     		jbe	.L216
 630:svf2csvf.c    **** 						*maxBufSize = (uint32)tmpBody2.length;
 3582              		.loc 1 630 37
 3583 29a8 488B45B8 		movq	-72(%rbp), %rax
 3584              		.loc 1 630 21
 3585 29ac 89C2     		movl	%eax, %edx
 3586              		.loc 1 630 19
 3587 29ae 488B85E0 		movq	-288(%rbp), %rax
 3587      FEFFFF
 3588 29b5 8910     		movl	%edx, (%rax)
 3589              	.L216:
 631:svf2csvf.c    **** 					}
 632:svf2csvf.c    **** 					cxt->numCommands++;
 3590              		.loc 1 632 9
 3591 29b7 488B85F8 		movq	-264(%rbp), %rax
 3591      FEFFFF
 3592 29be 8B809C02 		movl	668(%rax), %eax
 3592      0000
 3593              		.loc 1 632 22
 3594 29c4 8D5001   		leal	1(%rax), %edx
 3595 29c7 488B85F8 		movq	-264(%rbp), %rax
 3595      FEFFFF
 3596 29ce 89909C02 		movl	%edx, 668(%rax)
 3596      0000
 633:svf2csvf.c    **** 					bStatus = bufAppendByte(csvfBuf, XSDRTDO, error);
 3597              		.loc 1 633 16
 3598 29d4 488B95D8 		movq	-296(%rbp), %rdx
 3598      FEFFFF
 3599 29db 488B85E8 		movq	-280(%rbp), %rax
 3599      FEFFFF
 3600 29e2 BE090000 		movl	$9, %esi
 3600      00
 3601 29e7 4889C7   		movq	%rax, %rdi
 3602 29ea E8000000 		call	bufAppendByte@PLT
 3602      00
 3603 29ef 898514FF 		movl	%eax, -236(%rbp)
 3603      FFFF
 634:svf2csvf.c    **** 					CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 3604              		.loc 1 634 6
 3605 29f5 83BD14FF 		cmpl	$0, -236(%rbp)
 3605      FFFF00
 3606 29fc 7428     		je	.L217
 3607              		.loc 1 634 6 is_stmt 0 discriminator 1
 3608 29fe 488B85D8 		movq	-296(%rbp), %rax
 3608      FEFFFF
 3609 2a05 488D1500 		leaq	.LC16(%rip), %rdx
 3609      000000
 3610 2a0c 4889D6   		movq	%rdx, %rsi
 3611 2a0f 4889C7   		movq	%rax, %rdi
 3612 2a12 E8000000 		call	errPrefix@PLT
 3612      00
 3613 2a17 C78504FF 		movl	$1, -252(%rbp)
 3613      FFFF0100 
 3613      0000
 3614 2a21 E9F80400 		jmp	.L136
 3614      00
 3615              	.L217:
 635:svf2csvf.c    **** 					fStatus = appendSwappedAndInterleaved(
 636:svf2csvf.c    **** 						csvfBuf, tmpBody1.data, tmpBody2.data, (uint32)tmpBody2.length, error);
 3616              		.loc 1 636 62 is_stmt 1
 3617 2a26 488B45B8 		movq	-72(%rbp), %rax
 635:svf2csvf.c    **** 					fStatus = appendSwappedAndInterleaved(
 3618              		.loc 1 635 16
 3619 2a2a 89C7     		movl	%eax, %edi
 3620              		.loc 1 636 39
 3621 2a2c 488B55B0 		movq	-80(%rbp), %rdx
 3622              		.loc 1 636 24
 3623 2a30 488B7590 		movq	-112(%rbp), %rsi
 635:svf2csvf.c    **** 					fStatus = appendSwappedAndInterleaved(
 3624              		.loc 1 635 16
 3625 2a34 488B8DD8 		movq	-296(%rbp), %rcx
 3625      FEFFFF
 3626 2a3b 488B85E8 		movq	-280(%rbp), %rax
 3626      FEFFFF
 3627 2a42 4989C8   		movq	%rcx, %r8
 3628 2a45 89F9     		movl	%edi, %ecx
 3629 2a47 4889C7   		movq	%rax, %rdi
 3630 2a4a E884E6FF 		call	appendSwappedAndInterleaved
 3630      FF
 3631 2a4f 898510FF 		movl	%eax, -240(%rbp)
 3631      FFFF
 637:svf2csvf.c    **** 					CHECK_STATUS(fStatus, fStatus, cleanup, "parseLine()");
 3632              		.loc 1 637 6
 3633 2a55 83BD10FF 		cmpl	$0, -240(%rbp)
 3633      FFFF00
 3634 2a5c 0F847E04 		je	.L238
 3634      0000
 3635              		.loc 1 637 6 is_stmt 0 discriminator 1
 3636 2a62 488B85D8 		movq	-296(%rbp), %rax
 3636      FEFFFF
 3637 2a69 488D1500 		leaq	.LC16(%rip), %rdx
 3637      000000
 3638 2a70 4889D6   		movq	%rdx, %rsi
 3639 2a73 4889C7   		movq	%rax, %rdi
 3640 2a76 E8000000 		call	errPrefix@PLT
 3640      00
 3641 2a7b 8B8510FF 		movl	-240(%rbp), %eax
 3641      FFFF
 3642 2a81 898504FF 		movl	%eax, -252(%rbp)
 3642      FFFF
 3643 2a87 E9920400 		jmp	.L136
 3643      00
 3644              	.L212:
 638:svf2csvf.c    **** 				}
 639:svf2csvf.c    **** 				break;
 3645              		.loc 1 639 5 is_stmt 1 discriminator 8
 3646 2a8c E94F0400 		jmp	.L238
 3646      00
 3647              	.L187:
 3648              	.LBE6:
 640:svf2csvf.c    **** 			}
 641:svf2csvf.c    **** 		} else {
 642:svf2csvf.c    **** 			switch ( op ) {
 3649              		.loc 1 642 4
 3650 2a91 83BD08FF 		cmpl	$84, -248(%rbp)
 3650      FFFF54
 3651 2a98 0F849F00 		je	.L219
 3651      0000
 3652 2a9e 83BD08FF 		cmpl	$84, -248(%rbp)
 3652      FFFF54
 3653 2aa5 0F877204 		ja	.L235
 3653      0000
 3654 2aab 83BD08FF 		cmpl	$72, -248(%rbp)
 3654      FFFF48
 3655 2ab2 7412     		je	.L220
 3656 2ab4 83BD08FF 		cmpl	$83, -248(%rbp)
 3656      FFFF53
 3657 2abb 0F84F600 		je	.L221
 3657      0000
 3658              	.LBE8:
 461:svf2csvf.c    **** 		// HIR/HDR, TIR/TDR, SIR/SDR are of the form "**R <length> [TDI (<tdi>)] [TDO (<tdo>)] [MASK (<ma
 3659              		.loc 1 461 4
 3660 2ac1 E9570400 		jmp	.L235
 3660      00
 3661              	.L220:
 3662              	.LBB9:
 643:svf2csvf.c    **** 			case HEAD:
 644:svf2csvf.c    **** 				fStatus = processLine(&cxt->insnHead, length, tdi, tdo, mask, error);
 3663              		.loc 1 644 15
 3664 2ac6 488B85F8 		movq	-264(%rbp), %rax
 3664      FEFFFF
 3665 2acd 488D7868 		leaq	104(%rax), %rdi
 3666 2ad1 4C8B85D8 		movq	-296(%rbp), %r8
 3666      FEFFFF
 3667 2ad8 488BB550 		movq	-176(%rbp), %rsi
 3667      FFFFFF
 3668 2adf 488B8D48 		movq	-184(%rbp), %rcx
 3668      FFFFFF
 3669 2ae6 488B9540 		movq	-192(%rbp), %rdx
 3669      FFFFFF
 3670 2aed 8B850CFF 		movl	-244(%rbp), %eax
 3670      FFFF
 3671 2af3 4D89C1   		movq	%r8, %r9
 3672 2af6 4989F0   		movq	%rsi, %r8
 3673 2af9 89C6     		movl	%eax, %esi
 3674 2afb E8E9E2FF 		call	processLine
 3674      FF
 3675 2b00 898510FF 		movl	%eax, -240(%rbp)
 3675      FFFF
 645:svf2csvf.c    **** 				CHECK_STATUS(fStatus, fStatus, cleanup, "parseLine()");
 3676              		.loc 1 645 5
 3677 2b06 83BD10FF 		cmpl	$0, -240(%rbp)
 3677      FFFF00
 3678 2b0d 0F84D003 		je	.L239
 3678      0000
 3679              		.loc 1 645 5 is_stmt 0 discriminator 1
 3680 2b13 488B85D8 		movq	-296(%rbp), %rax
 3680      FEFFFF
 3681 2b1a 488D1500 		leaq	.LC16(%rip), %rdx
 3681      000000
 3682 2b21 4889D6   		movq	%rdx, %rsi
 3683 2b24 4889C7   		movq	%rax, %rdi
 3684 2b27 E8000000 		call	errPrefix@PLT
 3684      00
 3685 2b2c 8B8510FF 		movl	-240(%rbp), %eax
 3685      FFFF
 3686 2b32 898504FF 		movl	%eax, -252(%rbp)
 3686      FFFF
 3687 2b38 E9E10300 		jmp	.L136
 3687      00
 3688              	.L219:
 646:svf2csvf.c    **** 				break;
 647:svf2csvf.c    **** 			case TAIL:
 648:svf2csvf.c    **** 				fStatus = processLine(&cxt->insnTail, length, tdi, tdo, mask, error);
 3689              		.loc 1 648 15 is_stmt 1
 3690 2b3d 488B85F8 		movq	-264(%rbp), %rax
 3690      FEFFFF
 3691 2b44 488DB808 		leaq	520(%rax), %rdi
 3691      020000
 3692 2b4b 4C8B85D8 		movq	-296(%rbp), %r8
 3692      FEFFFF
 3693 2b52 488BB550 		movq	-176(%rbp), %rsi
 3693      FFFFFF
 3694 2b59 488B8D48 		movq	-184(%rbp), %rcx
 3694      FFFFFF
 3695 2b60 488B9540 		movq	-192(%rbp), %rdx
 3695      FFFFFF
 3696 2b67 8B850CFF 		movl	-244(%rbp), %eax
 3696      FFFF
 3697 2b6d 4D89C1   		movq	%r8, %r9
 3698 2b70 4989F0   		movq	%rsi, %r8
 3699 2b73 89C6     		movl	%eax, %esi
 3700 2b75 E86FE2FF 		call	processLine
 3700      FF
 3701 2b7a 898510FF 		movl	%eax, -240(%rbp)
 3701      FFFF
 649:svf2csvf.c    **** 				CHECK_STATUS(fStatus, fStatus, cleanup, "parseLine()");
 3702              		.loc 1 649 5
 3703 2b80 83BD10FF 		cmpl	$0, -240(%rbp)
 3703      FFFF00
 3704 2b87 0F845903 		je	.L240
 3704      0000
 3705              		.loc 1 649 5 is_stmt 0 discriminator 1
 3706 2b8d 488B85D8 		movq	-296(%rbp), %rax
 3706      FEFFFF
 3707 2b94 488D1500 		leaq	.LC16(%rip), %rdx
 3707      000000
 3708 2b9b 4889D6   		movq	%rdx, %rsi
 3709 2b9e 4889C7   		movq	%rax, %rdi
 3710 2ba1 E8000000 		call	errPrefix@PLT
 3710      00
 3711 2ba6 8B8510FF 		movl	-240(%rbp), %eax
 3711      FFFF
 3712 2bac 898504FF 		movl	%eax, -252(%rbp)
 3712      FFFF
 3713 2bb2 E9670300 		jmp	.L136
 3713      00
 3714              	.L221:
 650:svf2csvf.c    **** 				break;
 651:svf2csvf.c    **** 			case BODY:
 652:svf2csvf.c    **** 				fStatus = processLine(&cxt->insnBody, length, tdi, tdo, mask, error);
 3715              		.loc 1 652 15 is_stmt 1
 3716 2bb7 488B85F8 		movq	-264(%rbp), %rax
 3716      FEFFFF
 3717 2bbe 488DB838 		leaq	312(%rax), %rdi
 3717      010000
 3718 2bc5 4C8B85D8 		movq	-296(%rbp), %r8
 3718      FEFFFF
 3719 2bcc 488BB550 		movq	-176(%rbp), %rsi
 3719      FFFFFF
 3720 2bd3 488B8D48 		movq	-184(%rbp), %rcx
 3720      FFFFFF
 3721 2bda 488B9540 		movq	-192(%rbp), %rdx
 3721      FFFFFF
 3722 2be1 8B850CFF 		movl	-244(%rbp), %eax
 3722      FFFF
 3723 2be7 4D89C1   		movq	%r8, %r9
 3724 2bea 4989F0   		movq	%rsi, %r8
 3725 2bed 89C6     		movl	%eax, %esi
 3726 2bef E8F5E1FF 		call	processLine
 3726      FF
 3727 2bf4 898510FF 		movl	%eax, -240(%rbp)
 3727      FFFF
 653:svf2csvf.c    **** 				CHECK_STATUS(fStatus, fStatus, cleanup, "parseLine()");
 3728              		.loc 1 653 5
 3729 2bfa 83BD10FF 		cmpl	$0, -240(%rbp)
 3729      FFFF00
 3730 2c01 742A     		je	.L224
 3731              		.loc 1 653 5 is_stmt 0 discriminator 1
 3732 2c03 488B85D8 		movq	-296(%rbp), %rax
 3732      FEFFFF
 3733 2c0a 488D1500 		leaq	.LC16(%rip), %rdx
 3733      000000
 3734 2c11 4889D6   		movq	%rdx, %rsi
 3735 2c14 4889C7   		movq	%rax, %rdi
 3736 2c17 E8000000 		call	errPrefix@PLT
 3736      00
 3737 2c1c 8B8510FF 		movl	-240(%rbp), %eax
 3737      FFFF
 3738 2c22 898504FF 		movl	%eax, -252(%rbp)
 3738      FFFF
 3739 2c28 E9F10200 		jmp	.L136
 3739      00
 3740              	.L224:
 654:svf2csvf.c    **** 				bStatus = bufDeepCopy(&tmpHead, &cxt->insnHead.tdi, error);
 3741              		.loc 1 654 37 is_stmt 1
 3742 2c2d 488B85F8 		movq	-264(%rbp), %rax
 3742      FEFFFF
 3743 2c34 488D4870 		leaq	112(%rax), %rcx
 3744              		.loc 1 654 15
 3745 2c38 488B95D8 		movq	-296(%rbp), %rdx
 3745      FEFFFF
 3746 2c3f 488D8570 		leaq	-144(%rbp), %rax
 3746      FFFFFF
 3747 2c46 4889CE   		movq	%rcx, %rsi
 3748 2c49 4889C7   		movq	%rax, %rdi
 3749 2c4c E8000000 		call	bufDeepCopy@PLT
 3749      00
 3750 2c51 898514FF 		movl	%eax, -236(%rbp)
 3750      FFFF
 655:svf2csvf.c    **** 				CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 3751              		.loc 1 655 5
 3752 2c57 83BD14FF 		cmpl	$0, -236(%rbp)
 3752      FFFF00
 3753 2c5e 7428     		je	.L225
 3754              		.loc 1 655 5 is_stmt 0 discriminator 1
 3755 2c60 488B85D8 		movq	-296(%rbp), %rax
 3755      FEFFFF
 3756 2c67 488D1500 		leaq	.LC16(%rip), %rdx
 3756      000000
 3757 2c6e 4889D6   		movq	%rdx, %rsi
 3758 2c71 4889C7   		movq	%rax, %rdi
 3759 2c74 E8000000 		call	errPrefix@PLT
 3759      00
 3760 2c79 C78504FF 		movl	$1, -252(%rbp)
 3760      FFFF0100 
 3760      0000
 3761 2c83 E9960200 		jmp	.L136
 3761      00
 3762              	.L225:
 656:svf2csvf.c    **** 				bStatus = bufDeepCopy(&tmpBody1, &cxt->insnBody.tdi, error);
 3763              		.loc 1 656 38 is_stmt 1
 3764 2c88 488B85F8 		movq	-264(%rbp), %rax
 3764      FEFFFF
 3765 2c8f 488D8840 		leaq	320(%rax), %rcx
 3765      010000
 3766              		.loc 1 656 15
 3767 2c96 488B95D8 		movq	-296(%rbp), %rdx
 3767      FEFFFF
 3768 2c9d 488D4590 		leaq	-112(%rbp), %rax
 3769 2ca1 4889CE   		movq	%rcx, %rsi
 3770 2ca4 4889C7   		movq	%rax, %rdi
 3771 2ca7 E8000000 		call	bufDeepCopy@PLT
 3771      00
 3772 2cac 898514FF 		movl	%eax, -236(%rbp)
 3772      FFFF
 657:svf2csvf.c    **** 				CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 3773              		.loc 1 657 5
 3774 2cb2 83BD14FF 		cmpl	$0, -236(%rbp)
 3774      FFFF00
 3775 2cb9 7428     		je	.L226
 3776              		.loc 1 657 5 is_stmt 0 discriminator 1
 3777 2cbb 488B85D8 		movq	-296(%rbp), %rax
 3777      FEFFFF
 3778 2cc2 488D1500 		leaq	.LC16(%rip), %rdx
 3778      000000
 3779 2cc9 4889D6   		movq	%rdx, %rsi
 3780 2ccc 4889C7   		movq	%rax, %rdi
 3781 2ccf E8000000 		call	errPrefix@PLT
 3781      00
 3782 2cd4 C78504FF 		movl	$1, -252(%rbp)
 3782      FFFF0100 
 3782      0000
 3783 2cde E93B0200 		jmp	.L136
 3783      00
 3784              	.L226:
 658:svf2csvf.c    **** 				bStatus = bufDeepCopy(&tmpTail, &cxt->insnTail.tdi, error);
 3785              		.loc 1 658 37 is_stmt 1
 3786 2ce3 488B85F8 		movq	-264(%rbp), %rax
 3786      FEFFFF
 3787 2cea 488D8810 		leaq	528(%rax), %rcx
 3787      020000
 3788              		.loc 1 658 15
 3789 2cf1 488B95D8 		movq	-296(%rbp), %rdx
 3789      FEFFFF
 3790 2cf8 488D45D0 		leaq	-48(%rbp), %rax
 3791 2cfc 4889CE   		movq	%rcx, %rsi
 3792 2cff 4889C7   		movq	%rax, %rdi
 3793 2d02 E8000000 		call	bufDeepCopy@PLT
 3793      00
 3794 2d07 898514FF 		movl	%eax, -236(%rbp)
 3794      FFFF
 659:svf2csvf.c    **** 				CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 3795              		.loc 1 659 5
 3796 2d0d 83BD14FF 		cmpl	$0, -236(%rbp)
 3796      FFFF00
 3797 2d14 7428     		je	.L227
 3798              		.loc 1 659 5 is_stmt 0 discriminator 1
 3799 2d16 488B85D8 		movq	-296(%rbp), %rax
 3799      FEFFFF
 3800 2d1d 488D1500 		leaq	.LC16(%rip), %rdx
 3800      000000
 3801 2d24 4889D6   		movq	%rdx, %rsi
 3802 2d27 4889C7   		movq	%rax, %rdi
 3803 2d2a E8000000 		call	errPrefix@PLT
 3803      00
 3804 2d2f C78504FF 		movl	$1, -252(%rbp)
 3804      FFFF0100 
 3804      0000
 3805 2d39 E9E00100 		jmp	.L136
 3805      00
 3806              	.L227:
 660:svf2csvf.c    **** 				fStatus = headTail(
 3807              		.loc 1 660 15 is_stmt 1
 3808 2d3e 488B85F8 		movq	-264(%rbp), %rax
 3808      FEFFFF
 3809 2d45 448B8008 		movl	520(%rax), %r8d
 3809      020000
 3810 2d4c 488B85F8 		movq	-264(%rbp), %rax
 3810      FEFFFF
 3811 2d53 8B7868   		movl	104(%rax), %edi
 3812 2d56 488B85F8 		movq	-264(%rbp), %rax
 3812      FEFFFF
 3813 2d5d 8B883801 		movl	312(%rax), %ecx
 3813      0000
 3814 2d63 488D55D0 		leaq	-48(%rbp), %rdx
 3815 2d67 488DB570 		leaq	-144(%rbp), %rsi
 3815      FFFFFF
 3816 2d6e 488D4590 		leaq	-112(%rbp), %rax
 3817 2d72 4883EC08 		subq	$8, %rsp
 3818 2d76 FFB5D8FE 		pushq	-296(%rbp)
 3818      FFFF
 3819 2d7c 4589C1   		movl	%r8d, %r9d
 3820 2d7f 4189F8   		movl	%edi, %r8d
 3821 2d82 4889C7   		movq	%rax, %rdi
 3822 2d85 E8000000 		call	headTail@PLT
 3822      00
 3823 2d8a 4883C410 		addq	$16, %rsp
 3824 2d8e 898510FF 		movl	%eax, -240(%rbp)
 3824      FFFF
 661:svf2csvf.c    **** 					&tmpBody1, &tmpHead, &tmpTail,
 662:svf2csvf.c    **** 					cxt->insnBody.numBits, cxt->insnHead.numBits, cxt->insnTail.numBits,
 663:svf2csvf.c    **** 					error);
 664:svf2csvf.c    **** 				cxt->numCommands++;
 3825              		.loc 1 664 8
 3826 2d94 488B85F8 		movq	-264(%rbp), %rax
 3826      FEFFFF
 3827 2d9b 8B809C02 		movl	668(%rax), %eax
 3827      0000
 3828              		.loc 1 664 21
 3829 2da1 8D5001   		leal	1(%rax), %edx
 3830 2da4 488B85F8 		movq	-264(%rbp), %rax
 3830      FEFFFF
 3831 2dab 89909C02 		movl	%edx, 668(%rax)
 3831      0000
 665:svf2csvf.c    **** 				bStatus = bufAppendByte(csvfBuf, XSIR, error);
 3832              		.loc 1 665 15
 3833 2db1 488B95D8 		movq	-296(%rbp), %rdx
 3833      FEFFFF
 3834 2db8 488B85E8 		movq	-280(%rbp), %rax
 3834      FEFFFF
 3835 2dbf BE020000 		movl	$2, %esi
 3835      00
 3836 2dc4 4889C7   		movq	%rax, %rdi
 3837 2dc7 E8000000 		call	bufAppendByte@PLT
 3837      00
 3838 2dcc 898514FF 		movl	%eax, -236(%rbp)
 3838      FFFF
 666:svf2csvf.c    **** 				CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 3839              		.loc 1 666 5
 3840 2dd2 83BD14FF 		cmpl	$0, -236(%rbp)
 3840      FFFF00
 3841 2dd9 7428     		je	.L228
 3842              		.loc 1 666 5 is_stmt 0 discriminator 1
 3843 2ddb 488B85D8 		movq	-296(%rbp), %rax
 3843      FEFFFF
 3844 2de2 488D1500 		leaq	.LC16(%rip), %rdx
 3844      000000
 3845 2de9 4889D6   		movq	%rdx, %rsi
 3846 2dec 4889C7   		movq	%rax, %rdi
 3847 2def E8000000 		call	errPrefix@PLT
 3847      00
 3848 2df4 C78504FF 		movl	$1, -252(%rbp)
 3848      FFFF0100 
 3848      0000
 3849 2dfe E91B0100 		jmp	.L136
 3849      00
 3850              	.L228:
 667:svf2csvf.c    **** 				bStatus = bufAppendByte(csvfBuf, (uint8)(cxt->insnBody.numBits + cxt->insnHead.numBits + cxt->i
 3851              		.loc 1 667 59 is_stmt 1
 3852 2e03 488B85F8 		movq	-264(%rbp), %rax
 3852      FEFFFF
 3853 2e0a 8B803801 		movl	312(%rax), %eax
 3853      0000
 3854              		.loc 1 667 68
 3855 2e10 89C2     		movl	%eax, %edx
 3856              		.loc 1 667 83
 3857 2e12 488B85F8 		movq	-264(%rbp), %rax
 3857      FEFFFF
 3858 2e19 8B4068   		movl	104(%rax), %eax
 3859              		.loc 1 667 68
 3860 2e1c 01C2     		addl	%eax, %edx
 3861              		.loc 1 667 107
 3862 2e1e 488B85F8 		movq	-264(%rbp), %rax
 3862      FEFFFF
 3863 2e25 8B800802 		movl	520(%rax), %eax
 3863      0000
 3864              		.loc 1 667 38
 3865 2e2b 01D0     		addl	%edx, %eax
 3866              		.loc 1 667 15
 3867 2e2d 0FB6C8   		movzbl	%al, %ecx
 3868 2e30 488B95D8 		movq	-296(%rbp), %rdx
 3868      FEFFFF
 3869 2e37 488B85E8 		movq	-280(%rbp), %rax
 3869      FEFFFF
 3870 2e3e 89CE     		movl	%ecx, %esi
 3871 2e40 4889C7   		movq	%rax, %rdi
 3872 2e43 E8000000 		call	bufAppendByte@PLT
 3872      00
 3873 2e48 898514FF 		movl	%eax, -236(%rbp)
 3873      FFFF
 668:svf2csvf.c    **** 				CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 3874              		.loc 1 668 5
 3875 2e4e 83BD14FF 		cmpl	$0, -236(%rbp)
 3875      FFFF00
 3876 2e55 7428     		je	.L229
 3877              		.loc 1 668 5 is_stmt 0 discriminator 1
 3878 2e57 488B85D8 		movq	-296(%rbp), %rax
 3878      FEFFFF
 3879 2e5e 488D1500 		leaq	.LC16(%rip), %rdx
 3879      000000
 3880 2e65 4889D6   		movq	%rdx, %rsi
 3881 2e68 4889C7   		movq	%rax, %rdi
 3882 2e6b E8000000 		call	errPrefix@PLT
 3882      00
 3883 2e70 C78504FF 		movl	$1, -252(%rbp)
 3883      FFFF0100 
 3883      0000
 3884 2e7a E99F0000 		jmp	.L136
 3884      00
 3885              	.L229:
 669:svf2csvf.c    **** 				fStatus = appendSwapped(csvfBuf, tmpBody1.data, (uint32)tmpBody1.length, error);
 3886              		.loc 1 669 69 is_stmt 1
 3887 2e7f 488B4598 		movq	-104(%rbp), %rax
 3888              		.loc 1 669 15
 3889 2e83 89C7     		movl	%eax, %edi
 3890              		.loc 1 669 46
 3891 2e85 488B7590 		movq	-112(%rbp), %rsi
 3892              		.loc 1 669 15
 3893 2e89 488B95D8 		movq	-296(%rbp), %rdx
 3893      FEFFFF
 3894 2e90 488B85E8 		movq	-280(%rbp), %rax
 3894      FEFFFF
 3895 2e97 4889D1   		movq	%rdx, %rcx
 3896 2e9a 89FA     		movl	%edi, %edx
 3897 2e9c 4889C7   		movq	%rax, %rdi
 3898 2e9f E82DE3FF 		call	appendSwapped
 3898      FF
 3899 2ea4 898510FF 		movl	%eax, -240(%rbp)
 3899      FFFF
 670:svf2csvf.c    **** 				CHECK_STATUS(fStatus, fStatus, cleanup, "parseLine()");
 3900              		.loc 1 670 5
 3901 2eaa 83BD10FF 		cmpl	$0, -240(%rbp)
 3901      FFFF00
 3902 2eb1 7436     		je	.L241
 3903              		.loc 1 670 5 is_stmt 0 discriminator 1
 3904 2eb3 488B85D8 		movq	-296(%rbp), %rax
 3904      FEFFFF
 3905 2eba 488D1500 		leaq	.LC16(%rip), %rdx
 3905      000000
 3906 2ec1 4889D6   		movq	%rdx, %rsi
 3907 2ec4 4889C7   		movq	%rax, %rdi
 3908 2ec7 E8000000 		call	errPrefix@PLT
 3908      00
 3909 2ecc 8B8510FF 		movl	-240(%rbp), %eax
 3909      FFFF
 3910 2ed2 898504FF 		movl	%eax, -252(%rbp)
 3910      FFFF
 3911 2ed8 EB44     		jmp	.L136
 3912              	.L236:
 3913              	.LBB7:
 555:svf2csvf.c    **** 			case TAIL:
 3914              		.loc 1 555 5 is_stmt 1
 3915 2eda 90       		nop
 3916 2edb EB40     		jmp	.L235
 3917              	.L237:
 559:svf2csvf.c    **** 			case BODY:
 3918              		.loc 1 559 5
 3919 2edd 90       		nop
 3920 2ede EB3D     		jmp	.L235
 3921              	.L238:
 639:svf2csvf.c    **** 			}
 3922              		.loc 1 639 5
 3923 2ee0 90       		nop
 3924 2ee1 EB3A     		jmp	.L235
 3925              	.L239:
 3926              	.LBE7:
 646:svf2csvf.c    **** 			case TAIL:
 3927              		.loc 1 646 5
 3928 2ee3 90       		nop
 3929 2ee4 EB37     		jmp	.L235
 3930              	.L240:
 650:svf2csvf.c    **** 			case BODY:
 3931              		.loc 1 650 5
 3932 2ee6 90       		nop
 3933 2ee7 EB34     		jmp	.L235
 3934              	.L241:
 671:svf2csvf.c    **** 				break;
 3935              		.loc 1 671 5
 3936 2ee9 90       		nop
 3937              	.LBE9:
 461:svf2csvf.c    **** 		// HIR/HDR, TIR/TDR, SIR/SDR are of the form "**R <length> [TDI (<tdi>)] [TDO (<tdo>)] [MASK (<ma
 3938              		.loc 1 461 4
 3939 2eea EB31     		jmp	.L235
 3940              	.L138:
 672:svf2csvf.c    **** 			}
 673:svf2csvf.c    **** 		}
 674:svf2csvf.c    **** 	} else {
 675:svf2csvf.c    **** 		CHECK_STATUS(
 3941              		.loc 1 675 3 discriminator 1
 3942 2eec 488B9558 		movq	-168(%rbp), %rdx
 3942      FFFFFF
 3943 2ef3 488B85D8 		movq	-296(%rbp), %rax
 3943      FEFFFF
 3944 2efa 488D0D00 		leaq	.LC26(%rip), %rcx
 3944      000000
 3945 2f01 4889CE   		movq	%rcx, %rsi
 3946 2f04 4889C7   		movq	%rax, %rdi
 3947 2f07 B8000000 		movl	$0, %eax
 3947      00
 3948 2f0c E8000000 		call	errRender@PLT
 3948      00
 3949 2f11 C78504FF 		movl	$10, -252(%rbp)
 3949      FFFF0A00 
 3949      0000
 3950 2f1b EB01     		jmp	.L136
 3951              	.L235:
 461:svf2csvf.c    **** 		// HIR/HDR, TIR/TDR, SIR/SDR are of the form "**R <length> [TDI (<tdi>)] [TDO (<tdo>)] [MASK (<ma
 3952              		.loc 1 461 4
 3953 2f1d 90       		nop
 3954              	.L136:
 676:svf2csvf.c    **** 			true, FL_SVF_PARSE_ERR, cleanup,
 677:svf2csvf.c    **** 			"parseLine(): Unrecognised command \"%s\"\n", line);
 678:svf2csvf.c    **** 	}
 679:svf2csvf.c    **** cleanup:
 680:svf2csvf.c    **** 	bufDestroy(&tmpHead);
 3955              		.loc 1 680 2
 3956 2f1e 488D8570 		leaq	-144(%rbp), %rax
 3956      FFFFFF
 3957 2f25 4889C7   		movq	%rax, %rdi
 3958 2f28 E8000000 		call	bufDestroy@PLT
 3958      00
 681:svf2csvf.c    **** 	bufDestroy(&tmpBody1);
 3959              		.loc 1 681 2
 3960 2f2d 488D4590 		leaq	-112(%rbp), %rax
 3961 2f31 4889C7   		movq	%rax, %rdi
 3962 2f34 E8000000 		call	bufDestroy@PLT
 3962      00
 682:svf2csvf.c    **** 	bufDestroy(&tmpBody2);
 3963              		.loc 1 682 2
 3964 2f39 488D45B0 		leaq	-80(%rbp), %rax
 3965 2f3d 4889C7   		movq	%rax, %rdi
 3966 2f40 E8000000 		call	bufDestroy@PLT
 3966      00
 683:svf2csvf.c    **** 	bufDestroy(&tmpTail);
 3967              		.loc 1 683 2
 3968 2f45 488D45D0 		leaq	-48(%rbp), %rax
 3969 2f49 4889C7   		movq	%rax, %rdi
 3970 2f4c E8000000 		call	bufDestroy@PLT
 3970      00
 684:svf2csvf.c    **** 	return retVal;
 3971              		.loc 1 684 9
 3972 2f51 8B8504FF 		movl	-252(%rbp), %eax
 3972      FFFF
 685:svf2csvf.c    **** }
 3973              		.loc 1 685 1
 3974 2f57 488B55F8 		movq	-8(%rbp), %rdx
 3975 2f5b 64482B14 		subq	%fs:40, %rdx
 3975      25280000 
 3975      00
 3976 2f64 7405     		je	.L232
 3977 2f66 E8000000 		call	__stack_chk_fail@PLT
 3977      00
 3978              	.L232:
 3979 2f6b C9       		leave
 3980              		.cfi_def_cfa 7, 8
 3981 2f6c C3       		ret
 3982              		.cfi_endproc
 3983              	.LFE18:
 3985              		.section	.rodata
 3986              	.LC27:
 3987 02c8 58434F4D 		.string	"XCOMPLETE"
 3987      504C4554 
 3987      4500
 3988              	.LC28:
 3989 02d2 5854444F 		.string	"XTDOMASK"
 3989      4D41534B 
 3989      00
 3990              	.LC29:
 3991 02db 58534952 		.string	"XSIR"
 3991      00
 3992              	.LC30:
 3993 02e0 58534452 		.string	"XSDR"
 3993      00
 3994              	.LC31:
 3995 02e5 5852554E 		.string	"XRUNTEST"
 3995      54455354 
 3995      00
 3996              	.LC32:
 3997 02ee 494C4C45 		.string	"ILLEGAL"
 3997      47414C00 
 3998              	.LC33:
 3999 02f6 58524550 		.string	"XREPEAT"
 3999      45415400 
 4000              	.LC34:
 4001 02fe 58534452 		.string	"XSDRSIZE"
 4001      53495A45 
 4001      00
 4002              	.LC35:
 4003 0307 58534452 		.string	"XSDRTDO"
 4003      54444F00 
 4004              	.LC36:
 4005 030f 58534554 		.string	"XSETSDRMASKS"
 4005      5344524D 
 4005      41534B53 
 4005      00
 4006              	.LC37:
 4007 031c 58534452 		.string	"XSDRINC"
 4007      494E4300 
 4008              	.LC38:
 4009 0324 58534452 		.string	"XSDRB"
 4009      4200
 4010              	.LC39:
 4011 032a 58534452 		.string	"XSDRC"
 4011      4300
 4012              	.LC40:
 4013 0330 58534452 		.string	"XSDRE"
 4013      4500
 4014              	.LC41:
 4015 0336 58534452 		.string	"XSDRTDOB"
 4015      54444F42 
 4015      00
 4016              	.LC42:
 4017 033f 58534452 		.string	"XSDRTDOC"
 4017      54444F43 
 4017      00
 4018              	.LC43:
 4019 0348 58534452 		.string	"XSDRTDOE"
 4019      54444F45 
 4019      00
 4020              	.LC44:
 4021 0351 58535441 		.string	"XSTATE"
 4021      544500
 4022              	.LC45:
 4023 0358 58454E44 		.string	"XENDIR"
 4023      495200
 4024              	.LC46:
 4025 035f 58454E44 		.string	"XENDDR"
 4025      445200
 4026              	.LC47:
 4027 0366 58534952 		.string	"XSIR2"
 4027      3200
 4028              	.LC48:
 4029 036c 58434F4D 		.string	"XCOMMENT"
 4029      4D454E54 
 4029      00
 4030              	.LC49:
 4031 0375 58574149 		.string	"XWAIT"
 4031      5400
 4032              		.section	.data.rel.ro.local,"aw"
 4033              		.align 32
 4036              	cmdNames:
 4037 0000 00000000 		.quad	.LC27
 4037      00000000 
 4038 0008 00000000 		.quad	.LC28
 4038      00000000 
 4039 0010 00000000 		.quad	.LC29
 4039      00000000 
 4040 0018 00000000 		.quad	.LC30
 4040      00000000 
 4041 0020 00000000 		.quad	.LC31
 4041      00000000 
 4042 0028 00000000 		.quad	.LC32
 4042      00000000 
 4043 0030 00000000 		.quad	.LC32
 4043      00000000 
 4044 0038 00000000 		.quad	.LC33
 4044      00000000 
 4045 0040 00000000 		.quad	.LC34
 4045      00000000 
 4046 0048 00000000 		.quad	.LC35
 4046      00000000 
 4047 0050 00000000 		.quad	.LC36
 4047      00000000 
 4048 0058 00000000 		.quad	.LC37
 4048      00000000 
 4049 0060 00000000 		.quad	.LC38
 4049      00000000 
 4050 0068 00000000 		.quad	.LC39
 4050      00000000 
 4051 0070 00000000 		.quad	.LC40
 4051      00000000 
 4052 0078 00000000 		.quad	.LC41
 4052      00000000 
 4053 0080 00000000 		.quad	.LC42
 4053      00000000 
 4054 0088 00000000 		.quad	.LC43
 4054      00000000 
 4055 0090 00000000 		.quad	.LC44
 4055      00000000 
 4056 0098 00000000 		.quad	.LC45
 4056      00000000 
 4057 00a0 00000000 		.quad	.LC46
 4057      00000000 
 4058 00a8 00000000 		.quad	.LC47
 4058      00000000 
 4059 00b0 00000000 		.quad	.LC48
 4059      00000000 
 4060 00b8 00000000 		.quad	.LC49
 4060      00000000 
 4061              		.text
 4062              		.globl	getCmdName
 4064              	getCmdName:
 4065              	.LFB19:
 686:svf2csvf.c    **** 
 687:svf2csvf.c    **** static const char *const cmdNames[] = {
 688:svf2csvf.c    **** 	"XCOMPLETE",    // 0
 689:svf2csvf.c    **** 	"XTDOMASK",     // 1
 690:svf2csvf.c    **** 	"XSIR",         // 2
 691:svf2csvf.c    **** 	"XSDR",         // 3
 692:svf2csvf.c    **** 	"XRUNTEST",     // 4
 693:svf2csvf.c    **** 	"ILLEGAL",      // 5
 694:svf2csvf.c    **** 	"ILLEGAL",      // 6
 695:svf2csvf.c    **** 	"XREPEAT",      // 7
 696:svf2csvf.c    **** 	"XSDRSIZE",     // 8
 697:svf2csvf.c    **** 	"XSDRTDO",      // 9
 698:svf2csvf.c    **** 	"XSETSDRMASKS", // A
 699:svf2csvf.c    **** 	"XSDRINC",      // B
 700:svf2csvf.c    **** 	"XSDRB",        // C
 701:svf2csvf.c    **** 	"XSDRC",        // D
 702:svf2csvf.c    **** 	"XSDRE",        // E
 703:svf2csvf.c    **** 	"XSDRTDOB",     // F
 704:svf2csvf.c    **** 	"XSDRTDOC",     // 10
 705:svf2csvf.c    **** 	"XSDRTDOE",     // 11
 706:svf2csvf.c    **** 	"XSTATE",       // 12
 707:svf2csvf.c    **** 	"XENDIR",       // 13
 708:svf2csvf.c    **** 	"XENDDR",       // 14
 709:svf2csvf.c    **** 	"XSIR2",        // 15
 710:svf2csvf.c    **** 	"XCOMMENT",     // 16
 711:svf2csvf.c    **** 	"XWAIT"         // 17
 712:svf2csvf.c    **** };
 713:svf2csvf.c    **** 
 714:svf2csvf.c    **** const char *getCmdName(CmdPtr cmd) {
 4066              		.loc 1 714 36
 4067              		.cfi_startproc
 4068 2f6d F30F1EFA 		endbr64
 4069 2f71 55       		pushq	%rbp
 4070              		.cfi_def_cfa_offset 16
 4071              		.cfi_offset 6, -16
 4072 2f72 4889E5   		movq	%rsp, %rbp
 4073              		.cfi_def_cfa_register 6
 4074 2f75 48897DE8 		movq	%rdi, -24(%rbp)
 715:svf2csvf.c    **** 	const uint8 op = *cmd;
 4075              		.loc 1 715 14
 4076 2f79 488B45E8 		movq	-24(%rbp), %rax
 4077 2f7d 0FB600   		movzbl	(%rax), %eax
 4078 2f80 8845FF   		movb	%al, -1(%rbp)
 716:svf2csvf.c    **** 	return cmdNames[op];
 4079              		.loc 1 716 17
 4080 2f83 0FB645FF 		movzbl	-1(%rbp), %eax
 4081 2f87 4898     		cltq
 4082 2f89 488D14C5 		leaq	0(,%rax,8), %rdx
 4082      00000000 
 4083 2f91 488D0500 		leaq	cmdNames(%rip), %rax
 4083      000000
 4084 2f98 488B0402 		movq	(%rdx,%rax), %rax
 717:svf2csvf.c    **** }
 4085              		.loc 1 717 1
 4086 2f9c 5D       		popq	%rbp
 4087              		.cfi_def_cfa 7, 8
 4088 2f9d C3       		ret
 4089              		.cfi_endproc
 4090              	.LFE19:
 4092              		.section	.rodata
 4095              	xrtZero:
 4096 037b 0400     		.string	"\004"
 4097 037d 00       		.string	""
 4098 037e 00       		.string	""
 4099 037f 00       		.string	""
 4100              		.align 4
 4103              	illegal32:
 4104 0380 FFFFFFFF 		.long	-1
 4105              		.text
 4106              		.globl	processIndex
 4108              	processIndex:
 4109              	.LFB20:
 718:svf2csvf.c    **** 
 719:svf2csvf.c    **** #define SET_BYTES(rt) rt.b[0] = (*ptr)[1]; rt.b[1] = (*ptr)[2]; rt.b[2] = (*ptr)[3]; rt.b[3] = (*pt
 720:svf2csvf.c    **** static const uint8 xrtZero[] = {XRUNTEST, 0, 0, 0, 0};
 721:svf2csvf.c    **** static const uint32 illegal32 = U32MAX;
 722:svf2csvf.c    **** 
 723:svf2csvf.c    **** void processIndex(const CmdPtr *srcIndex, CmdPtr *dstIndex) {
 4110              		.loc 1 723 61
 4111              		.cfi_startproc
 4112 2f9e F30F1EFA 		endbr64
 4113 2fa2 55       		pushq	%rbp
 4114              		.cfi_def_cfa_offset 16
 4115              		.cfi_offset 6, -16
 4116 2fa3 4889E5   		movq	%rsp, %rbp
 4117              		.cfi_def_cfa_register 6
 4118 2fa6 4883EC30 		subq	$48, %rsp
 4119 2faa 48897DD8 		movq	%rdi, -40(%rbp)
 4120 2fae 488975D0 		movq	%rsi, -48(%rbp)
 4121              		.loc 1 723 61
 4122 2fb2 64488B04 		movq	%fs:40, %rax
 4122      25280000 
 4122      00
 4123 2fbb 488945F8 		movq	%rax, -8(%rbp)
 4124 2fbf 31C0     		xorl	%eax, %eax
 724:svf2csvf.c    **** 	union {
 725:svf2csvf.c    **** 		uint32 i;
 726:svf2csvf.c    **** 		uint8 b[4];
 727:svf2csvf.c    **** 	} oldrt, newrt;
 728:svf2csvf.c    **** 	const CmdPtr *ptr = srcIndex;
 4125              		.loc 1 728 16
 4126 2fc1 488B45D8 		movq	-40(%rbp), %rax
 4127 2fc5 488945E8 		movq	%rax, -24(%rbp)
 729:svf2csvf.c    **** 	uint8 thisCmd = **ptr;
 4128              		.loc 1 729 19
 4129 2fc9 488B45E8 		movq	-24(%rbp), %rax
 4130 2fcd 488B00   		movq	(%rax), %rax
 4131              		.loc 1 729 8
 4132 2fd0 0FB600   		movzbl	(%rax), %eax
 4133 2fd3 8845E7   		movb	%al, -25(%rbp)
 730:svf2csvf.c    **** 	oldrt.i = illegal32;
 4134              		.loc 1 730 10
 4135 2fd6 B8FFFFFF 		movl	$-1, %eax
 4135      FF
 4136 2fdb 8945F0   		movl	%eax, -16(%rbp)
 731:svf2csvf.c    **** 	newrt.i = 0;
 4137              		.loc 1 731 10
 4138 2fde C745F400 		movl	$0, -12(%rbp)
 4138      000000
 732:svf2csvf.c    **** 	while ( thisCmd != XCOMPLETE ) {
 4139              		.loc 1 732 8
 4140 2fe5 E95B0100 		jmp	.L245
 4140      00
 4141              	.L248:
 733:svf2csvf.c    **** 		while ( thisCmd != XCOMPLETE && thisCmd != XSDR && thisCmd != XSDRTDO && thisCmd != XSIR ) {
 734:svf2csvf.c    **** 			thisCmd = **++ptr;
 4142              		.loc 1 734 12
 4143 2fea 488345E8 		addq	$8, -24(%rbp)
 4143      08
 4144              		.loc 1 734 15
 4145 2fef 488B45E8 		movq	-24(%rbp), %rax
 4146 2ff3 488B00   		movq	(%rax), %rax
 4147              		.loc 1 734 12
 4148 2ff6 0FB600   		movzbl	(%rax), %eax
 4149 2ff9 8845E7   		movb	%al, -25(%rbp)
 4150              	.L246:
 733:svf2csvf.c    **** 		while ( thisCmd != XCOMPLETE && thisCmd != XSDR && thisCmd != XSDRTDO && thisCmd != XSIR ) {
 4151              		.loc 1 733 73
 4152 2ffc 807DE700 		cmpb	$0, -25(%rbp)
 4153 3000 7412     		je	.L247
 733:svf2csvf.c    **** 		while ( thisCmd != XCOMPLETE && thisCmd != XSDR && thisCmd != XSDRTDO && thisCmd != XSIR ) {
 4154              		.loc 1 733 32 discriminator 1
 4155 3002 807DE703 		cmpb	$3, -25(%rbp)
 4156 3006 740C     		je	.L247
 733:svf2csvf.c    **** 		while ( thisCmd != XCOMPLETE && thisCmd != XSDR && thisCmd != XSDRTDO && thisCmd != XSIR ) {
 4157              		.loc 1 733 51 discriminator 2
 4158 3008 807DE709 		cmpb	$9, -25(%rbp)
 4159 300c 7406     		je	.L247
 733:svf2csvf.c    **** 		while ( thisCmd != XCOMPLETE && thisCmd != XSDR && thisCmd != XSDRTDO && thisCmd != XSIR ) {
 4160              		.loc 1 733 73 discriminator 3
 4161 300e 807DE702 		cmpb	$2, -25(%rbp)
 4162 3012 75D6     		jne	.L248
 4163              	.L247:
 735:svf2csvf.c    **** 		}
 736:svf2csvf.c    **** 		if ( thisCmd != XCOMPLETE ) {
 4164              		.loc 1 736 6
 4165 3014 807DE700 		cmpb	$0, -25(%rbp)
 4166 3018 7412     		je	.L249
 737:svf2csvf.c    **** 			thisCmd = **++ptr;  // now points at command AFTER shift command
 4167              		.loc 1 737 12
 4168 301a 488345E8 		addq	$8, -24(%rbp)
 4168      08
 4169              		.loc 1 737 15
 4170 301f 488B45E8 		movq	-24(%rbp), %rax
 4171 3023 488B00   		movq	(%rax), %rax
 4172              		.loc 1 737 12
 4173 3026 0FB600   		movzbl	(%rax), %eax
 4174 3029 8845E7   		movb	%al, -25(%rbp)
 4175              	.L249:
 738:svf2csvf.c    **** 		}
 739:svf2csvf.c    **** 		if ( thisCmd == XRUNTEST ) {
 4176              		.loc 1 739 6
 4177 302c 807DE704 		cmpb	$4, -25(%rbp)
 4178 3030 0F85B000 		jne	.L250
 4178      0000
 740:svf2csvf.c    **** 			// There is an explicit XRUNTEST, so hoist it to the top, maybe...
 741:svf2csvf.c    **** 			SET_BYTES(newrt);
 4179              		.loc 1 741 4
 4180 3036 488B45E8 		movq	-24(%rbp), %rax
 4181 303a 488B00   		movq	(%rax), %rax
 4182 303d 4883C001 		addq	$1, %rax
 4183 3041 0FB600   		movzbl	(%rax), %eax
 4184 3044 8845F4   		movb	%al, -12(%rbp)
 4185 3047 488B45E8 		movq	-24(%rbp), %rax
 4186 304b 488B00   		movq	(%rax), %rax
 4187 304e 4883C002 		addq	$2, %rax
 4188 3052 0FB600   		movzbl	(%rax), %eax
 4189 3055 8845F5   		movb	%al, -11(%rbp)
 4190 3058 488B45E8 		movq	-24(%rbp), %rax
 4191 305c 488B00   		movq	(%rax), %rax
 4192 305f 4883C003 		addq	$3, %rax
 4193 3063 0FB600   		movzbl	(%rax), %eax
 4194 3066 8845F6   		movb	%al, -10(%rbp)
 4195 3069 488B45E8 		movq	-24(%rbp), %rax
 4196 306d 488B00   		movq	(%rax), %rax
 4197 3070 4883C004 		addq	$4, %rax
 4198 3074 0FB600   		movzbl	(%rax), %eax
 4199 3077 8845F7   		movb	%al, -9(%rbp)
 742:svf2csvf.c    **** 			if ( newrt.i != oldrt.i ) {
 4200              		.loc 1 742 14
 4201 307a 8B55F4   		movl	-12(%rbp), %edx
 4202              		.loc 1 742 25
 4203 307d 8B45F0   		movl	-16(%rbp), %eax
 4204              		.loc 1 742 7
 4205 3080 39C2     		cmpl	%eax, %edx
 4206 3082 743C     		je	.L252
 743:svf2csvf.c    **** 				*dstIndex++ = *ptr;
 4207              		.loc 1 743 14
 4208 3084 488B45D0 		movq	-48(%rbp), %rax
 4209 3088 488D5008 		leaq	8(%rax), %rdx
 4210 308c 488955D0 		movq	%rdx, -48(%rbp)
 4211              		.loc 1 743 19
 4212 3090 488B55E8 		movq	-24(%rbp), %rdx
 4213 3094 488B12   		movq	(%rdx), %rdx
 4214              		.loc 1 743 17
 4215 3097 488910   		movq	%rdx, (%rax)
 744:svf2csvf.c    **** 				oldrt = newrt;
 4216              		.loc 1 744 11
 4217 309a 8B45F4   		movl	-12(%rbp), %eax
 4218 309d 8945F0   		movl	%eax, -16(%rbp)
 745:svf2csvf.c    **** 			}
 746:svf2csvf.c    **** 
 747:svf2csvf.c    **** 			// ...then copy the commands...
 748:svf2csvf.c    **** 			while ( srcIndex < ptr ) {
 4219              		.loc 1 748 10
 4220 30a0 EB1E     		jmp	.L252
 4221              	.L253:
 749:svf2csvf.c    **** 				*dstIndex++ = *srcIndex++;
 4222              		.loc 1 749 28
 4223 30a2 488B55D8 		movq	-40(%rbp), %rdx
 4224 30a6 488D4208 		leaq	8(%rdx), %rax
 4225 30aa 488945D8 		movq	%rax, -40(%rbp)
 4226              		.loc 1 749 14
 4227 30ae 488B45D0 		movq	-48(%rbp), %rax
 4228 30b2 488D4808 		leaq	8(%rax), %rcx
 4229 30b6 48894DD0 		movq	%rcx, -48(%rbp)
 4230              		.loc 1 749 19
 4231 30ba 488B12   		movq	(%rdx), %rdx
 4232              		.loc 1 749 17
 4233 30bd 488910   		movq	%rdx, (%rax)
 4234              	.L252:
 748:svf2csvf.c    **** 				*dstIndex++ = *srcIndex++;
 4235              		.loc 1 748 21
 4236 30c0 488B45D8 		movq	-40(%rbp), %rax
 4237 30c4 483B45E8 		cmpq	-24(%rbp), %rax
 4238 30c8 72D8     		jb	.L253
 750:svf2csvf.c    **** 			}
 751:svf2csvf.c    **** 
 752:svf2csvf.c    **** 			// ...and finally get the next command
 753:svf2csvf.c    **** 			ptr++;  // now points at command after XRUNTEST, ready for next loop
 4239              		.loc 1 753 7
 4240 30ca 488345E8 		addq	$8, -24(%rbp)
 4240      08
 754:svf2csvf.c    **** 			srcIndex = ptr;
 4241              		.loc 1 754 13
 4242 30cf 488B45E8 		movq	-24(%rbp), %rax
 4243 30d3 488945D8 		movq	%rax, -40(%rbp)
 755:svf2csvf.c    **** 			thisCmd = **ptr;
 4244              		.loc 1 755 15
 4245 30d7 488B45E8 		movq	-24(%rbp), %rax
 4246 30db 488B00   		movq	(%rax), %rax
 4247              		.loc 1 755 12
 4248 30de 0FB600   		movzbl	(%rax), %eax
 4249 30e1 8845E7   		movb	%al, -25(%rbp)
 4250 30e4 EB5F     		jmp	.L245
 4251              	.L250:
 756:svf2csvf.c    **** 		} else {
 757:svf2csvf.c    **** 			// There is not an explicit XRUNTEST, meaning it's implicitly zero:
 758:svf2csvf.c    **** 			newrt.i = 0;
 4252              		.loc 1 758 12
 4253 30e6 C745F400 		movl	$0, -12(%rbp)
 4253      000000
 759:svf2csvf.c    **** 			if ( newrt.i != oldrt.i ) {
 4254              		.loc 1 759 14
 4255 30ed 8B55F4   		movl	-12(%rbp), %edx
 4256              		.loc 1 759 25
 4257 30f0 8B45F0   		movl	-16(%rbp), %eax
 4258              		.loc 1 759 7
 4259 30f3 39C2     		cmpl	%eax, %edx
 4260 30f5 743C     		je	.L255
 760:svf2csvf.c    **** 				*dstIndex++ = xrtZero;
 4261              		.loc 1 760 14
 4262 30f7 488B45D0 		movq	-48(%rbp), %rax
 4263 30fb 488D5008 		leaq	8(%rax), %rdx
 4264 30ff 488955D0 		movq	%rdx, -48(%rbp)
 4265              		.loc 1 760 17
 4266 3103 488D1500 		leaq	xrtZero(%rip), %rdx
 4266      000000
 4267 310a 488910   		movq	%rdx, (%rax)
 761:svf2csvf.c    **** 				oldrt = newrt;
 4268              		.loc 1 761 11
 4269 310d 8B45F4   		movl	-12(%rbp), %eax
 4270 3110 8945F0   		movl	%eax, -16(%rbp)
 762:svf2csvf.c    **** 			}
 763:svf2csvf.c    **** 
 764:svf2csvf.c    **** 			// Copy the backlog
 765:svf2csvf.c    **** 			while ( srcIndex < ptr ) {
 4271              		.loc 1 765 10
 4272 3113 EB1E     		jmp	.L255
 4273              	.L256:
 766:svf2csvf.c    **** 				*dstIndex++ = *srcIndex++;
 4274              		.loc 1 766 28
 4275 3115 488B55D8 		movq	-40(%rbp), %rdx
 4276 3119 488D4208 		leaq	8(%rdx), %rax
 4277 311d 488945D8 		movq	%rax, -40(%rbp)
 4278              		.loc 1 766 14
 4279 3121 488B45D0 		movq	-48(%rbp), %rax
 4280 3125 488D4808 		leaq	8(%rax), %rcx
 4281 3129 48894DD0 		movq	%rcx, -48(%rbp)
 4282              		.loc 1 766 19
 4283 312d 488B12   		movq	(%rdx), %rdx
 4284              		.loc 1 766 17
 4285 3130 488910   		movq	%rdx, (%rax)
 4286              	.L255:
 765:svf2csvf.c    **** 				*dstIndex++ = *srcIndex++;
 4287              		.loc 1 765 21
 4288 3133 488B45D8 		movq	-40(%rbp), %rax
 4289 3137 483B45E8 		cmpq	-24(%rbp), %rax
 4290 313b 72D8     		jb	.L256
 767:svf2csvf.c    **** 			}
 768:svf2csvf.c    **** 			srcIndex = ptr;
 4291              		.loc 1 768 13
 4292 313d 488B45E8 		movq	-24(%rbp), %rax
 4293 3141 488945D8 		movq	%rax, -40(%rbp)
 4294              	.L245:
 732:svf2csvf.c    **** 		while ( thisCmd != XCOMPLETE && thisCmd != XSDR && thisCmd != XSDRTDO && thisCmd != XSIR ) {
 4295              		.loc 1 732 18
 4296 3145 807DE700 		cmpb	$0, -25(%rbp)
 4297 3149 0F85ADFE 		jne	.L246
 4297      FFFF
 769:svf2csvf.c    **** 		}
 770:svf2csvf.c    **** 	}
 771:svf2csvf.c    **** 	*dstIndex = *ptr;
 4298              		.loc 1 771 14
 4299 314f 488B45E8 		movq	-24(%rbp), %rax
 4300 3153 488B10   		movq	(%rax), %rdx
 4301              		.loc 1 771 12
 4302 3156 488B45D0 		movq	-48(%rbp), %rax
 4303 315a 488910   		movq	%rdx, (%rax)
 772:svf2csvf.c    **** }
 4304              		.loc 1 772 1
 4305 315d 90       		nop
 4306 315e 488B45F8 		movq	-8(%rbp), %rax
 4307 3162 64482B04 		subq	%fs:40, %rax
 4307      25280000 
 4307      00
 4308 316b 7405     		je	.L258
 4309 316d E8000000 		call	__stack_chk_fail@PLT
 4309      00
 4310              	.L258:
 4311 3172 C9       		leave
 4312              		.cfi_def_cfa 7, 8
 4313 3173 C3       		ret
 4314              		.cfi_endproc
 4315              	.LFE20:
 4317              		.section	.rodata
 4318              	.LC50:
 4319 0384 6275696C 		.string	"buildIndex()"
 4319      64496E64 
 4319      65782829 
 4319      00
 4320 0391 00000000 		.align 8
 4320      000000
 4321              	.LC51:
 4322 0398 6275696C 		.string	"buildIndex(): No XSDRSIZE before shift operation!"
 4322      64496E64 
 4322      65782829 
 4322      3A204E6F 
 4322      20585344 
 4323 03ca 00000000 		.align 8
 4323      0000
 4324              	.LC52:
 4325 03d0 6275696C 		.string	"buildIndex(): Unrecognised CSVF command (cmd=0x%02X, srcOffset=%d)!"
 4325      64496E64 
 4325      65782829 
 4325      3A20556E 
 4325      7265636F 
 4326 0414 00000000 		.align 8
 4327              	.LC53:
 4328 0418 6275696C 		.string	"buildIndex(): Unrecognised CSVF command (cmd=0x%02X)!"
 4328      64496E64 
 4328      65782829 
 4328      3A20556E 
 4328      7265636F 
 4329              		.text
 4330              		.globl	buildIndex
 4332              	buildIndex:
 4333              	.LFB21:
 773:svf2csvf.c    **** 
 774:svf2csvf.c    **** FLStatus buildIndex(struct ParseContext *cxt, struct Buffer *csvfBuf, const char **error) {
 4334              		.loc 1 774 91
 4335              		.cfi_startproc
 4336 3174 F30F1EFA 		endbr64
 4337 3178 55       		pushq	%rbp
 4338              		.cfi_def_cfa_offset 16
 4339              		.cfi_offset 6, -16
 4340 3179 4889E5   		movq	%rsp, %rbp
 4341              		.cfi_def_cfa_register 6
 4342 317c 53       		pushq	%rbx
 4343 317d 4881EC98 		subq	$152, %rsp
 4343      000000
 4344              		.cfi_offset 3, -24
 4345 3184 4889BD78 		movq	%rdi, -136(%rbp)
 4345      FFFFFF
 4346 318b 4889B570 		movq	%rsi, -144(%rbp)
 4346      FFFFFF
 4347 3192 48899568 		movq	%rdx, -152(%rbp)
 4347      FFFFFF
 4348              		.loc 1 774 91
 4349 3199 64488B04 		movq	%fs:40, %rax
 4349      25280000 
 4349      00
 4350 31a2 488945E8 		movq	%rax, -24(%rbp)
 4351 31a6 31C0     		xorl	%eax, %eax
 775:svf2csvf.c    **** 	FLStatus retVal = FL_SUCCESS;
 4352              		.loc 1 775 11
 4353 31a8 C7458400 		movl	$0, -124(%rbp)
 4353      000000
 776:svf2csvf.c    **** 	const uint8 *const start = csvfBuf->data;
 4354              		.loc 1 776 21
 4355 31af 488B8570 		movq	-144(%rbp), %rax
 4355      FFFFFF
 4356 31b6 488B00   		movq	(%rax), %rax
 4357 31b9 488945A8 		movq	%rax, -88(%rbp)
 777:svf2csvf.c    **** 	const uint8 *ptr = start;
 4358              		.loc 1 777 15
 4359 31bd 488B45A8 		movq	-88(%rbp), %rax
 4360 31c1 48894598 		movq	%rax, -104(%rbp)
 778:svf2csvf.c    **** 	struct Buffer newBuf = {0,};
 4361              		.loc 1 778 16
 4362 31c5 48C745C0 		movq	$0, -64(%rbp)
 4362      00000000 
 4363 31cd 48C745C8 		movq	$0, -56(%rbp)
 4363      00000000 
 4364 31d5 48C745D0 		movq	$0, -48(%rbp)
 4364      00000000 
 4365 31dd 48C745D8 		movq	$0, -40(%rbp)
 4365      00000000 
 779:svf2csvf.c    **** 	uint32 numBytes;
 780:svf2csvf.c    **** 	uint8 thisByte = *ptr;
 4366              		.loc 1 780 8
 4367 31e5 488B4598 		movq	-104(%rbp), %rax
 4368 31e9 0FB600   		movzbl	(%rax), %eax
 4369 31ec 884583   		movb	%al, -125(%rbp)
 781:svf2csvf.c    **** 	int i = 0;
 4370              		.loc 1 781 6
 4371 31ef C7458C00 		movl	$0, -116(%rbp)
 4371      000000
 782:svf2csvf.c    **** 	int offset;
 783:svf2csvf.c    **** 	const CmdPtr *cmdPtr;
 784:svf2csvf.c    **** 	BufferStatus bStatus;
 785:svf2csvf.c    **** 	const uint8 **const srcIndex = malloc(sizeof(const uint8*) * cxt->numCommands);
 4372              		.loc 1 785 66
 4373 31f6 488B8578 		movq	-136(%rbp), %rax
 4373      FFFFFF
 4374 31fd 8B809C02 		movl	668(%rax), %eax
 4374      0000
 4375 3203 89C0     		movl	%eax, %eax
 4376              		.loc 1 785 33
 4377 3205 48C1E003 		salq	$3, %rax
 4378 3209 4889C7   		movq	%rax, %rdi
 4379 320c E8000000 		call	malloc@PLT
 4379      00
 4380 3211 488945B0 		movq	%rax, -80(%rbp)
 786:svf2csvf.c    **** 	const uint8 **const dstIndex = malloc(sizeof(const uint8*) * cxt->numCommands * 3 / 2); // abs wor
 4381              		.loc 1 786 66
 4382 3215 488B8578 		movq	-136(%rbp), %rax
 4382      FFFFFF
 4383 321c 8B809C02 		movl	668(%rax), %eax
 4383      0000
 4384 3222 89C2     		movl	%eax, %edx
 4385              		.loc 1 786 80
 4386 3224 4889D0   		movq	%rdx, %rax
 4387 3227 4801C0   		addq	%rax, %rax
 4388 322a 4801D0   		addq	%rdx, %rax
 4389 322d 48C1E003 		salq	$3, %rax
 4390              		.loc 1 786 33
 4391 3231 48D1E8   		shrq	%rax
 4392 3234 4889C7   		movq	%rax, %rdi
 4393 3237 E8000000 		call	malloc@PLT
 4393      00
 4394 323c 488945B8 		movq	%rax, -72(%rbp)
 787:svf2csvf.c    **** 	CHECK_STATUS(srcIndex == NULL, FL_ALLOC_ERR, cleanup, "buildIndex()");
 4395              		.loc 1 787 2
 4396 3240 48837DB0 		cmpq	$0, -80(%rbp)
 4396      00
 4397 3245 7525     		jne	.L260
 4398              		.loc 1 787 2 is_stmt 0 discriminator 1
 4399 3247 488B8568 		movq	-152(%rbp), %rax
 4399      FFFFFF
 4400 324e 488D1500 		leaq	.LC50(%rip), %rdx
 4400      000000
 4401 3255 4889D6   		movq	%rdx, %rsi
 4402 3258 4889C7   		movq	%rax, %rdi
 4403 325b E8000000 		call	errPrefix@PLT
 4403      00
 4404 3260 C7458401 		movl	$1, -124(%rbp)
 4404      000000
 4405 3267 E9920500 		jmp	.L261
 4405      00
 4406              	.L260:
 788:svf2csvf.c    **** 	CHECK_STATUS(dstIndex == NULL, FL_ALLOC_ERR, cleanup, "buildIndex()");
 4407              		.loc 1 788 2 is_stmt 1
 4408 326c 48837DB8 		cmpq	$0, -72(%rbp)
 4408      00
 4409 3271 7525     		jne	.L262
 4410              		.loc 1 788 2 is_stmt 0 discriminator 1
 4411 3273 488B8568 		movq	-152(%rbp), %rax
 4411      FFFFFF
 4412 327a 488D1500 		leaq	.LC50(%rip), %rdx
 4412      000000
 4413 3281 4889D6   		movq	%rdx, %rsi
 4414 3284 4889C7   		movq	%rax, %rdi
 4415 3287 E8000000 		call	errPrefix@PLT
 4415      00
 4416 328c C7458401 		movl	$1, -124(%rbp)
 4416      000000
 4417 3293 E9660500 		jmp	.L261
 4417      00
 4418              	.L262:
 789:svf2csvf.c    **** 	bStatus = bufInitialise(&newBuf, csvfBuf->length * 4 / 3, 0x00, error);  // common worst case
 4419              		.loc 1 789 42 is_stmt 1
 4420 3298 488B8570 		movq	-144(%rbp), %rax
 4420      FFFFFF
 4421 329f 488B4008 		movq	8(%rax), %rax
 4422              		.loc 1 789 51
 4423 32a3 48C1E002 		salq	$2, %rax
 4424              		.loc 1 789 12
 4425 32a7 48BAABAA 		movabsq	$-6148914691236517205, %rdx
 4425      AAAAAAAA 
 4425      AAAA
 4426 32b1 48F7E2   		mulq	%rdx
 4427 32b4 4889D6   		movq	%rdx, %rsi
 4428 32b7 48D1EE   		shrq	%rsi
 4429 32ba 488B9568 		movq	-152(%rbp), %rdx
 4429      FFFFFF
 4430 32c1 488D45C0 		leaq	-64(%rbp), %rax
 4431 32c5 4889D1   		movq	%rdx, %rcx
 4432 32c8 BA000000 		movl	$0, %edx
 4432      00
 4433 32cd 4889C7   		movq	%rax, %rdi
 4434 32d0 E8000000 		call	bufInitialise@PLT
 4434      00
 4435 32d5 894590   		movl	%eax, -112(%rbp)
 790:svf2csvf.c    **** 	CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "buildIndex()");
 4436              		.loc 1 790 2
 4437 32d8 837D9000 		cmpl	$0, -112(%rbp)
 4438 32dc 7425     		je	.L263
 4439              		.loc 1 790 2 is_stmt 0 discriminator 1
 4440 32de 488B8568 		movq	-152(%rbp), %rax
 4440      FFFFFF
 4441 32e5 488D1500 		leaq	.LC50(%rip), %rdx
 4441      000000
 4442 32ec 4889D6   		movq	%rdx, %rsi
 4443 32ef 4889C7   		movq	%rax, %rdi
 4444 32f2 E8000000 		call	errPrefix@PLT
 4444      00
 4445 32f7 C7458401 		movl	$1, -124(%rbp)
 4445      000000
 4446 32fe E9FB0400 		jmp	.L261
 4446      00
 4447              	.L263:
 791:svf2csvf.c    **** 	numBytes = illegal32;
 4448              		.loc 1 791 11 is_stmt 1
 4449 3303 C74588FF 		movl	$-1, -120(%rbp)
 4449      FFFFFF
 792:svf2csvf.c    **** 	while ( thisByte != XCOMPLETE ) {
 4450              		.loc 1 792 8
 4451 330a E9850100 		jmp	.L264
 4451      00
 4452              	.L277:
 793:svf2csvf.c    **** 		srcIndex[i++] = ptr++;
 4453              		.loc 1 793 22
 4454 330f 488B4598 		movq	-104(%rbp), %rax
 4455 3313 488D5001 		leaq	1(%rax), %rdx
 4456 3317 48895598 		movq	%rdx, -104(%rbp)
 4457              		.loc 1 793 13
 4458 331b 8B558C   		movl	-116(%rbp), %edx
 4459 331e 8D4A01   		leal	1(%rdx), %ecx
 4460 3321 894D8C   		movl	%ecx, -116(%rbp)
 4461 3324 4863D2   		movslq	%edx, %rdx
 4462              		.loc 1 793 11
 4463 3327 488D0CD5 		leaq	0(,%rdx,8), %rcx
 4463      00000000 
 4464 332f 488B55B0 		movq	-80(%rbp), %rdx
 4465 3333 4801CA   		addq	%rcx, %rdx
 4466              		.loc 1 793 17
 4467 3336 488902   		movq	%rax, (%rdx)
 794:svf2csvf.c    **** 		switch ( thisByte ) {
 4468              		.loc 1 794 3
 4469 3339 0FB64583 		movzbl	-125(%rbp), %eax
 4470 333d 83F809   		cmpl	$9, %eax
 4471 3340 0F870E01 		ja	.L301
 4471      0000
 4472 3346 89C0     		movl	%eax, %eax
 4473 3348 488D1485 		leaq	0(,%rax,4), %rdx
 4473      00000000 
 4474 3350 488D0500 		leaq	.L267(%rip), %rax
 4474      000000
 4475 3357 8B0402   		movl	(%rdx,%rax), %eax
 4476 335a 4898     		cltq
 4477 335c 488D1500 		leaq	.L267(%rip), %rdx
 4477      000000
 4478 3363 4801D0   		addq	%rdx, %rax
 4479 3366 3EFFE0   		notrack jmp	*%rax
 4480              		.section	.rodata
 4481 044e 0000     		.align 4
 4482              		.align 4
 4483              	.L267:
 4484 0450 00000000 		.long	.L301-.L267
 4485 0454 00000000 		.long	.L270-.L267
 4486 0458 00000000 		.long	.L271-.L267
 4487 045c 00000000 		.long	.L270-.L267
 4488 0460 00000000 		.long	.L269-.L267
 4489 0464 00000000 		.long	.L301-.L267
 4490 0468 00000000 		.long	.L301-.L267
 4491 046c 00000000 		.long	.L301-.L267
 4492 0470 00000000 		.long	.L268-.L267
 4493 0474 00000000 		.long	.L266-.L267
 4494              		.text
 4495              	.L268:
 795:svf2csvf.c    **** 		case XSDRSIZE:
 796:svf2csvf.c    **** 			numBytes = bitsToBytes(readLongBE(ptr));
 4496              		.loc 1 796 15
 4497 3369 488B4598 		movq	-104(%rbp), %rax
 4498 336d 4889C7   		movq	%rax, %rdi
 4499 3370 E8000000 		call	readLongBE@PLT
 4499      00
 4500 3375 C1E803   		shrl	$3, %eax
 4501 3378 89C3     		movl	%eax, %ebx
 4502 337a 488B4598 		movq	-104(%rbp), %rax
 4503 337e 4889C7   		movq	%rax, %rdi
 4504 3381 E8000000 		call	readLongBE@PLT
 4504      00
 4505 3386 83E007   		andl	$7, %eax
 4506 3389 85C0     		testl	%eax, %eax
 4507 338b 7407     		je	.L272
 4508              		.loc 1 796 15 is_stmt 0 discriminator 1
 4509 338d B8010000 		movl	$1, %eax
 4509      00
 4510 3392 EB05     		jmp	.L273
 4511              	.L272:
 4512              		.loc 1 796 15 discriminator 2
 4513 3394 B8000000 		movl	$0, %eax
 4513      00
 4514              	.L273:
 4515              		.loc 1 796 13 is_stmt 1 discriminator 4
 4516 3399 01D8     		addl	%ebx, %eax
 4517 339b 894588   		movl	%eax, -120(%rbp)
 4518              	.L269:
 797:svf2csvf.c    **** 		case XRUNTEST:
 798:svf2csvf.c    **** 			ptr += 4;
 4519              		.loc 1 798 8
 4520 339e 48834598 		addq	$4, -104(%rbp)
 4520      04
 799:svf2csvf.c    **** 			break;
 4521              		.loc 1 799 4
 4522 33a3 E9E20000 		jmp	.L274
 4522      00
 4523              	.L270:
 800:svf2csvf.c    **** 		case XTDOMASK:
 801:svf2csvf.c    **** 		case XSDR:
 802:svf2csvf.c    **** 			CHECK_STATUS(numBytes == illegal32, FL_INTERNAL_ERR, cleanup, "buildIndex(): No XSDRSIZE before 
 4524              		.loc 1 802 4
 4525 33a8 B8FFFFFF 		movl	$-1, %eax
 4525      FF
 4526 33ad 394588   		cmpl	%eax, -120(%rbp)
 4527 33b0 7525     		jne	.L275
 4528              		.loc 1 802 4 is_stmt 0 discriminator 1
 4529 33b2 488B8568 		movq	-152(%rbp), %rax
 4529      FFFFFF
 4530 33b9 488D1500 		leaq	.LC51(%rip), %rdx
 4530      000000
 4531 33c0 4889D6   		movq	%rdx, %rsi
 4532 33c3 4889C7   		movq	%rax, %rdi
 4533 33c6 E8000000 		call	errPrefix@PLT
 4533      00
 4534 33cb C7458417 		movl	$23, -124(%rbp)
 4534      000000
 4535 33d2 E9270400 		jmp	.L261
 4535      00
 4536              	.L275:
 803:svf2csvf.c    **** 			ptr += numBytes;
 4537              		.loc 1 803 8 is_stmt 1
 4538 33d7 8B4588   		movl	-120(%rbp), %eax
 4539 33da 48014598 		addq	%rax, -104(%rbp)
 804:svf2csvf.c    **** 			break;
 4540              		.loc 1 804 4
 4541 33de E9A70000 		jmp	.L274
 4541      00
 4542              	.L266:
 805:svf2csvf.c    **** 		case XSDRTDO:
 806:svf2csvf.c    **** 			CHECK_STATUS(numBytes == illegal32, FL_INTERNAL_ERR, cleanup, "buildIndex(): No XSDRSIZE before 
 4543              		.loc 1 806 4
 4544 33e3 B8FFFFFF 		movl	$-1, %eax
 4544      FF
 4545 33e8 394588   		cmpl	%eax, -120(%rbp)
 4546 33eb 7525     		jne	.L276
 4547              		.loc 1 806 4 is_stmt 0 discriminator 1
 4548 33ed 488B8568 		movq	-152(%rbp), %rax
 4548      FFFFFF
 4549 33f4 488D1500 		leaq	.LC51(%rip), %rdx
 4549      000000
 4550 33fb 4889D6   		movq	%rdx, %rsi
 4551 33fe 4889C7   		movq	%rax, %rdi
 4552 3401 E8000000 		call	errPrefix@PLT
 4552      00
 4553 3406 C7458417 		movl	$23, -124(%rbp)
 4553      000000
 4554 340d E9EC0300 		jmp	.L261
 4554      00
 4555              	.L276:
 807:svf2csvf.c    **** 			ptr += 2*numBytes;
 4556              		.loc 1 807 12 is_stmt 1
 4557 3412 8B4588   		movl	-120(%rbp), %eax
 4558 3415 01C0     		addl	%eax, %eax
 4559 3417 89C0     		movl	%eax, %eax
 4560              		.loc 1 807 8
 4561 3419 48014598 		addq	%rax, -104(%rbp)
 808:svf2csvf.c    **** 			break;
 4562              		.loc 1 808 4
 4563 341d EB6B     		jmp	.L274
 4564              	.L271:
 809:svf2csvf.c    **** 		case XSIR:
 810:svf2csvf.c    **** 			offset = *ptr++;
 4565              		.loc 1 810 17
 4566 341f 488B4598 		movq	-104(%rbp), %rax
 4567 3423 488D5001 		leaq	1(%rax), %rdx
 4568 3427 48895598 		movq	%rdx, -104(%rbp)
 4569              		.loc 1 810 13
 4570 342b 0FB600   		movzbl	(%rax), %eax
 4571              		.loc 1 810 11
 4572 342e 0FB6C0   		movzbl	%al, %eax
 4573 3431 894594   		movl	%eax, -108(%rbp)
 811:svf2csvf.c    **** 			ptr += bitsToBytes(offset);
 4574              		.loc 1 811 11
 4575 3434 8B4594   		movl	-108(%rbp), %eax
 4576 3437 C1F803   		sarl	$3, %eax
 4577 343a 89C2     		movl	%eax, %edx
 4578 343c 8B4594   		movl	-108(%rbp), %eax
 4579 343f 83E007   		andl	$7, %eax
 4580 3442 85C0     		testl	%eax, %eax
 4581 3444 0F95C0   		setne	%al
 4582 3447 0FB6C0   		movzbl	%al, %eax
 4583 344a 01D0     		addl	%edx, %eax
 4584 344c 4898     		cltq
 4585              		.loc 1 811 8
 4586 344e 48014598 		addq	%rax, -104(%rbp)
 812:svf2csvf.c    **** 			break;
 4587              		.loc 1 812 4
 4588 3452 EB36     		jmp	.L274
 4589              	.L301:
 813:svf2csvf.c    **** 		default:
 814:svf2csvf.c    **** 			CHECK_STATUS(
 4590              		.loc 1 814 4 discriminator 1
 4591 3454 488B4598 		movq	-104(%rbp), %rax
 4592 3458 482B45A8 		subq	-88(%rbp), %rax
 4593 345c 4889C1   		movq	%rax, %rcx
 4594 345f 0FB65583 		movzbl	-125(%rbp), %edx
 4595 3463 488B8568 		movq	-152(%rbp), %rax
 4595      FFFFFF
 4596 346a 488D3500 		leaq	.LC52(%rip), %rsi
 4596      000000
 4597 3471 4889C7   		movq	%rax, %rdi
 4598 3474 B8000000 		movl	$0, %eax
 4598      00
 4599 3479 E8000000 		call	errRender@PLT
 4599      00
 4600 347e C7458417 		movl	$23, -124(%rbp)
 4600      000000
 4601 3485 E9740300 		jmp	.L261
 4601      00
 4602              	.L274:
 815:svf2csvf.c    **** 				true, FL_INTERNAL_ERR, cleanup,
 816:svf2csvf.c    **** 				"buildIndex(): Unrecognised CSVF command (cmd=0x%02X, srcOffset=%d)!", thisByte, ptr - start);
 817:svf2csvf.c    **** 		}
 818:svf2csvf.c    **** 		thisByte = *ptr;
 4603              		.loc 1 818 12
 4604 348a 488B4598 		movq	-104(%rbp), %rax
 4605 348e 0FB600   		movzbl	(%rax), %eax
 4606 3491 884583   		movb	%al, -125(%rbp)
 4607              	.L264:
 792:svf2csvf.c    **** 		srcIndex[i++] = ptr++;
 4608              		.loc 1 792 19
 4609 3494 807D8300 		cmpb	$0, -125(%rbp)
 4610 3498 0F8571FE 		jne	.L277
 4610      FFFF
 819:svf2csvf.c    **** 	}
 820:svf2csvf.c    **** 	srcIndex[i++] = ptr++;
 4611              		.loc 1 820 21
 4612 349e 488B4598 		movq	-104(%rbp), %rax
 4613 34a2 488D5001 		leaq	1(%rax), %rdx
 4614 34a6 48895598 		movq	%rdx, -104(%rbp)
 4615              		.loc 1 820 12
 4616 34aa 8B558C   		movl	-116(%rbp), %edx
 4617 34ad 8D4A01   		leal	1(%rdx), %ecx
 4618 34b0 894D8C   		movl	%ecx, -116(%rbp)
 4619 34b3 4863D2   		movslq	%edx, %rdx
 4620              		.loc 1 820 10
 4621 34b6 488D0CD5 		leaq	0(,%rdx,8), %rcx
 4621      00000000 
 4622 34be 488B55B0 		movq	-80(%rbp), %rdx
 4623 34c2 4801CA   		addq	%rcx, %rdx
 4624              		.loc 1 820 16
 4625 34c5 488902   		movq	%rax, (%rdx)
 821:svf2csvf.c    **** 	processIndex(srcIndex, dstIndex);
 4626              		.loc 1 821 2
 4627 34c8 488B55B8 		movq	-72(%rbp), %rdx
 4628 34cc 488B45B0 		movq	-80(%rbp), %rax
 4629 34d0 4889D6   		movq	%rdx, %rsi
 4630 34d3 4889C7   		movq	%rax, %rdi
 4631 34d6 E8000000 		call	processIndex@PLT
 4631      00
 822:svf2csvf.c    **** 	cmdPtr = dstIndex;
 4632              		.loc 1 822 9
 4633 34db 488B45B8 		movq	-72(%rbp), %rax
 4634 34df 488945A0 		movq	%rax, -96(%rbp)
 823:svf2csvf.c    **** 	ptr = *cmdPtr;
 4635              		.loc 1 823 6
 4636 34e3 488B45A0 		movq	-96(%rbp), %rax
 4637 34e7 488B00   		movq	(%rax), %rax
 4638 34ea 48894598 		movq	%rax, -104(%rbp)
 824:svf2csvf.c    **** 	thisByte = *ptr;
 4639              		.loc 1 824 11
 4640 34ee 488B4598 		movq	-104(%rbp), %rax
 4641 34f2 0FB600   		movzbl	(%rax), %eax
 4642 34f5 884583   		movb	%al, -125(%rbp)
 825:svf2csvf.c    **** 	numBytes = illegal32;
 4643              		.loc 1 825 11
 4644 34f8 C74588FF 		movl	$-1, -120(%rbp)
 4644      FFFFFF
 826:svf2csvf.c    **** 	while ( thisByte != XCOMPLETE ) {
 4645              		.loc 1 826 8
 4646 34ff E9970200 		jmp	.L278
 4646      00
 4647              	.L295:
 827:svf2csvf.c    **** 		switch ( thisByte ) {
 4648              		.loc 1 827 3
 4649 3504 0FB64583 		movzbl	-125(%rbp), %eax
 4650 3508 83F809   		cmpl	$9, %eax
 4651 350b 0F873802 		ja	.L302
 4651      0000
 4652 3511 89C0     		movl	%eax, %eax
 4653 3513 488D1485 		leaq	0(,%rax,4), %rdx
 4653      00000000 
 4654 351b 488D0500 		leaq	.L281(%rip), %rax
 4654      000000
 4655 3522 8B0402   		movl	(%rdx,%rax), %eax
 4656 3525 4898     		cltq
 4657 3527 488D1500 		leaq	.L281(%rip), %rdx
 4657      000000
 4658 352e 4801D0   		addq	%rdx, %rax
 4659 3531 3EFFE0   		notrack jmp	*%rax
 4660              		.section	.rodata
 4661              		.align 4
 4662              		.align 4
 4663              	.L281:
 4664 0478 00000000 		.long	.L302-.L281
 4665 047c 00000000 		.long	.L284-.L281
 4666 0480 00000000 		.long	.L285-.L281
 4667 0484 00000000 		.long	.L284-.L281
 4668 0488 00000000 		.long	.L283-.L281
 4669 048c 00000000 		.long	.L302-.L281
 4670 0490 00000000 		.long	.L302-.L281
 4671 0494 00000000 		.long	.L302-.L281
 4672 0498 00000000 		.long	.L282-.L281
 4673 049c 00000000 		.long	.L280-.L281
 4674              		.text
 4675              	.L282:
 828:svf2csvf.c    **** 		case XSDRSIZE:
 829:svf2csvf.c    **** 			numBytes = bitsToBytes(readLongBE(ptr + 1));
 4676              		.loc 1 829 15
 4677 3534 488B4598 		movq	-104(%rbp), %rax
 4678 3538 4883C001 		addq	$1, %rax
 4679 353c 4889C7   		movq	%rax, %rdi
 4680 353f E8000000 		call	readLongBE@PLT
 4680      00
 4681 3544 C1E803   		shrl	$3, %eax
 4682 3547 89C3     		movl	%eax, %ebx
 4683 3549 488B4598 		movq	-104(%rbp), %rax
 4684 354d 4883C001 		addq	$1, %rax
 4685 3551 4889C7   		movq	%rax, %rdi
 4686 3554 E8000000 		call	readLongBE@PLT
 4686      00
 4687 3559 83E007   		andl	$7, %eax
 4688 355c 85C0     		testl	%eax, %eax
 4689 355e 7407     		je	.L286
 4690              		.loc 1 829 15 is_stmt 0 discriminator 1
 4691 3560 B8010000 		movl	$1, %eax
 4691      00
 4692 3565 EB05     		jmp	.L287
 4693              	.L286:
 4694              		.loc 1 829 15 discriminator 2
 4695 3567 B8000000 		movl	$0, %eax
 4695      00
 4696              	.L287:
 4697              		.loc 1 829 13 is_stmt 1 discriminator 4
 4698 356c 01D8     		addl	%ebx, %eax
 4699 356e 894588   		movl	%eax, -120(%rbp)
 4700              	.L283:
 830:svf2csvf.c    **** 		case XRUNTEST:
 831:svf2csvf.c    **** 			bStatus = bufAppendBlock(&newBuf, ptr, 5, error);
 4701              		.loc 1 831 14
 4702 3571 488B9568 		movq	-152(%rbp), %rdx
 4702      FFFFFF
 4703 3578 488B7598 		movq	-104(%rbp), %rsi
 4704 357c 488D45C0 		leaq	-64(%rbp), %rax
 4705 3580 4889D1   		movq	%rdx, %rcx
 4706 3583 BA050000 		movl	$5, %edx
 4706      00
 4707 3588 4889C7   		movq	%rax, %rdi
 4708 358b E8000000 		call	bufAppendBlock@PLT
 4708      00
 4709 3590 894590   		movl	%eax, -112(%rbp)
 832:svf2csvf.c    **** 			CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "buildIndex()");
 4710              		.loc 1 832 4
 4711 3593 837D9000 		cmpl	$0, -112(%rbp)
 4712 3597 0F84DA01 		je	.L303
 4712      0000
 4713              		.loc 1 832 4 is_stmt 0 discriminator 1
 4714 359d 488B8568 		movq	-152(%rbp), %rax
 4714      FFFFFF
 4715 35a4 488D1500 		leaq	.LC50(%rip), %rdx
 4715      000000
 4716 35ab 4889D6   		movq	%rdx, %rsi
 4717 35ae 4889C7   		movq	%rax, %rdi
 4718 35b1 E8000000 		call	errPrefix@PLT
 4718      00
 4719 35b6 C7458401 		movl	$1, -124(%rbp)
 4719      000000
 4720 35bd E93C0200 		jmp	.L261
 4720      00
 4721              	.L284:
 833:svf2csvf.c    **** 			break;
 834:svf2csvf.c    **** 		case XTDOMASK:
 835:svf2csvf.c    **** 		case XSDR:
 836:svf2csvf.c    **** 			CHECK_STATUS(numBytes == illegal32, FL_INTERNAL_ERR, cleanup, "buildIndex(): No XSDRSIZE before 
 4722              		.loc 1 836 4 is_stmt 1
 4723 35c2 B8FFFFFF 		movl	$-1, %eax
 4723      FF
 4724 35c7 394588   		cmpl	%eax, -120(%rbp)
 4725 35ca 7525     		jne	.L290
 4726              		.loc 1 836 4 is_stmt 0 discriminator 1
 4727 35cc 488B8568 		movq	-152(%rbp), %rax
 4727      FFFFFF
 4728 35d3 488D1500 		leaq	.LC51(%rip), %rdx
 4728      000000
 4729 35da 4889D6   		movq	%rdx, %rsi
 4730 35dd 4889C7   		movq	%rax, %rdi
 4731 35e0 E8000000 		call	errPrefix@PLT
 4731      00
 4732 35e5 C7458417 		movl	$23, -124(%rbp)
 4732      000000
 4733 35ec E90D0200 		jmp	.L261
 4733      00
 4734              	.L290:
 837:svf2csvf.c    **** 			bStatus = bufAppendBlock(&newBuf, ptr, numBytes + 1, error);
 4735              		.loc 1 837 52 is_stmt 1
 4736 35f1 8B4588   		movl	-120(%rbp), %eax
 4737 35f4 83C001   		addl	$1, %eax
 4738              		.loc 1 837 14
 4739 35f7 89C7     		movl	%eax, %edi
 4740 35f9 488B9568 		movq	-152(%rbp), %rdx
 4740      FFFFFF
 4741 3600 488B7598 		movq	-104(%rbp), %rsi
 4742 3604 488D45C0 		leaq	-64(%rbp), %rax
 4743 3608 4889D1   		movq	%rdx, %rcx
 4744 360b 4889FA   		movq	%rdi, %rdx
 4745 360e 4889C7   		movq	%rax, %rdi
 4746 3611 E8000000 		call	bufAppendBlock@PLT
 4746      00
 4747 3616 894590   		movl	%eax, -112(%rbp)
 838:svf2csvf.c    **** 			CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "buildIndex()");
 4748              		.loc 1 838 4
 4749 3619 837D9000 		cmpl	$0, -112(%rbp)
 4750 361d 0F845701 		je	.L304
 4750      0000
 4751              		.loc 1 838 4 is_stmt 0 discriminator 1
 4752 3623 488B8568 		movq	-152(%rbp), %rax
 4752      FFFFFF
 4753 362a 488D1500 		leaq	.LC50(%rip), %rdx
 4753      000000
 4754 3631 4889D6   		movq	%rdx, %rsi
 4755 3634 4889C7   		movq	%rax, %rdi
 4756 3637 E8000000 		call	errPrefix@PLT
 4756      00
 4757 363c C7458401 		movl	$1, -124(%rbp)
 4757      000000
 4758 3643 E9B60100 		jmp	.L261
 4758      00
 4759              	.L280:
 839:svf2csvf.c    **** 			break;
 840:svf2csvf.c    **** 		case XSDRTDO:
 841:svf2csvf.c    **** 			CHECK_STATUS(numBytes == illegal32, FL_INTERNAL_ERR, cleanup, "buildIndex(): No XSDRSIZE before 
 4760              		.loc 1 841 4 is_stmt 1
 4761 3648 B8FFFFFF 		movl	$-1, %eax
 4761      FF
 4762 364d 394588   		cmpl	%eax, -120(%rbp)
 4763 3650 7525     		jne	.L292
 4764              		.loc 1 841 4 is_stmt 0 discriminator 1
 4765 3652 488B8568 		movq	-152(%rbp), %rax
 4765      FFFFFF
 4766 3659 488D1500 		leaq	.LC51(%rip), %rdx
 4766      000000
 4767 3660 4889D6   		movq	%rdx, %rsi
 4768 3663 4889C7   		movq	%rax, %rdi
 4769 3666 E8000000 		call	errPrefix@PLT
 4769      00
 4770 366b C7458417 		movl	$23, -124(%rbp)
 4770      000000
 4771 3672 E9870100 		jmp	.L261
 4771      00
 4772              	.L292:
 842:svf2csvf.c    **** 			bStatus = bufAppendBlock(&newBuf, ptr, 2*numBytes + 1, error);
 4773              		.loc 1 842 44 is_stmt 1
 4774 3677 8B4588   		movl	-120(%rbp), %eax
 4775 367a 01C0     		addl	%eax, %eax
 4776              		.loc 1 842 54
 4777 367c 83C001   		addl	$1, %eax
 4778              		.loc 1 842 14
 4779 367f 89C7     		movl	%eax, %edi
 4780 3681 488B9568 		movq	-152(%rbp), %rdx
 4780      FFFFFF
 4781 3688 488B7598 		movq	-104(%rbp), %rsi
 4782 368c 488D45C0 		leaq	-64(%rbp), %rax
 4783 3690 4889D1   		movq	%rdx, %rcx
 4784 3693 4889FA   		movq	%rdi, %rdx
 4785 3696 4889C7   		movq	%rax, %rdi
 4786 3699 E8000000 		call	bufAppendBlock@PLT
 4786      00
 4787 369e 894590   		movl	%eax, -112(%rbp)
 843:svf2csvf.c    **** 			CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "buildIndex()");
 4788              		.loc 1 843 4
 4789 36a1 837D9000 		cmpl	$0, -112(%rbp)
 4790 36a5 0F84D200 		je	.L305
 4790      0000
 4791              		.loc 1 843 4 is_stmt 0 discriminator 1
 4792 36ab 488B8568 		movq	-152(%rbp), %rax
 4792      FFFFFF
 4793 36b2 488D1500 		leaq	.LC50(%rip), %rdx
 4793      000000
 4794 36b9 4889D6   		movq	%rdx, %rsi
 4795 36bc 4889C7   		movq	%rax, %rdi
 4796 36bf E8000000 		call	errPrefix@PLT
 4796      00
 4797 36c4 C7458401 		movl	$1, -124(%rbp)
 4797      000000
 4798 36cb E92E0100 		jmp	.L261
 4798      00
 4799              	.L285:
 844:svf2csvf.c    **** 			break;
 845:svf2csvf.c    **** 		case XSIR:
 846:svf2csvf.c    **** 			offset = ptr[1];
 4800              		.loc 1 846 16 is_stmt 1
 4801 36d0 488B4598 		movq	-104(%rbp), %rax
 4802 36d4 4883C001 		addq	$1, %rax
 4803 36d8 0FB600   		movzbl	(%rax), %eax
 4804              		.loc 1 846 11
 4805 36db 0FB6C0   		movzbl	%al, %eax
 4806 36de 894594   		movl	%eax, -108(%rbp)
 847:svf2csvf.c    **** 			bStatus = bufAppendBlock(&newBuf, ptr, (uint32)(bitsToBytes(offset) + 2), error);
 4807              		.loc 1 847 52
 4808 36e1 8B4594   		movl	-108(%rbp), %eax
 4809 36e4 C1F803   		sarl	$3, %eax
 4810 36e7 89C2     		movl	%eax, %edx
 4811 36e9 8B4594   		movl	-108(%rbp), %eax
 4812 36ec 83E007   		andl	$7, %eax
 4813 36ef 85C0     		testl	%eax, %eax
 4814 36f1 0F95C0   		setne	%al
 4815 36f4 0FB6C0   		movzbl	%al, %eax
 4816 36f7 01D0     		addl	%edx, %eax
 4817              		.loc 1 847 72
 4818 36f9 83C002   		addl	$2, %eax
 4819              		.loc 1 847 14
 4820 36fc 89C7     		movl	%eax, %edi
 4821 36fe 488B9568 		movq	-152(%rbp), %rdx
 4821      FFFFFF
 4822 3705 488B7598 		movq	-104(%rbp), %rsi
 4823 3709 488D45C0 		leaq	-64(%rbp), %rax
 4824 370d 4889D1   		movq	%rdx, %rcx
 4825 3710 4889FA   		movq	%rdi, %rdx
 4826 3713 4889C7   		movq	%rax, %rdi
 4827 3716 E8000000 		call	bufAppendBlock@PLT
 4827      00
 4828 371b 894590   		movl	%eax, -112(%rbp)
 848:svf2csvf.c    **** 			CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "buildIndex()");
 4829              		.loc 1 848 4
 4830 371e 837D9000 		cmpl	$0, -112(%rbp)
 4831 3722 745C     		je	.L306
 4832              		.loc 1 848 4 is_stmt 0 discriminator 1
 4833 3724 488B8568 		movq	-152(%rbp), %rax
 4833      FFFFFF
 4834 372b 488D1500 		leaq	.LC50(%rip), %rdx
 4834      000000
 4835 3732 4889D6   		movq	%rdx, %rsi
 4836 3735 4889C7   		movq	%rax, %rdi
 4837 3738 E8000000 		call	errPrefix@PLT
 4837      00
 4838 373d C7458401 		movl	$1, -124(%rbp)
 4838      000000
 4839 3744 E9B50000 		jmp	.L261
 4839      00
 4840              	.L302:
 849:svf2csvf.c    **** 			break;
 850:svf2csvf.c    **** 		default:
 851:svf2csvf.c    **** 			CHECK_STATUS(
 4841              		.loc 1 851 4 is_stmt 1 discriminator 1
 4842 3749 0FB65583 		movzbl	-125(%rbp), %edx
 4843 374d 488B8568 		movq	-152(%rbp), %rax
 4843      FFFFFF
 4844 3754 488D0D00 		leaq	.LC53(%rip), %rcx
 4844      000000
 4845 375b 4889CE   		movq	%rcx, %rsi
 4846 375e 4889C7   		movq	%rax, %rdi
 4847 3761 B8000000 		movl	$0, %eax
 4847      00
 4848 3766 E8000000 		call	errRender@PLT
 4848      00
 4849 376b C7458417 		movl	$23, -124(%rbp)
 4849      000000
 4850 3772 E9870000 		jmp	.L261
 4850      00
 4851              	.L303:
 833:svf2csvf.c    **** 		case XTDOMASK:
 4852              		.loc 1 833 4
 4853 3777 90       		nop
 4854 3778 EB07     		jmp	.L289
 4855              	.L304:
 839:svf2csvf.c    **** 		case XSDRTDO:
 4856              		.loc 1 839 4
 4857 377a 90       		nop
 4858 377b EB04     		jmp	.L289
 4859              	.L305:
 844:svf2csvf.c    **** 		case XSIR:
 4860              		.loc 1 844 4
 4861 377d 90       		nop
 4862 377e EB01     		jmp	.L289
 4863              	.L306:
 849:svf2csvf.c    **** 		default:
 4864              		.loc 1 849 4
 4865 3780 90       		nop
 4866              	.L289:
 852:svf2csvf.c    **** 				true, FL_INTERNAL_ERR, cleanup,
 853:svf2csvf.c    **** 				"buildIndex(): Unrecognised CSVF command (cmd=0x%02X)!", thisByte);
 854:svf2csvf.c    **** 		}
 855:svf2csvf.c    **** 		cmdPtr++;
 4867              		.loc 1 855 9
 4868 3781 488345A0 		addq	$8, -96(%rbp)
 4868      08
 856:svf2csvf.c    **** 		ptr = *cmdPtr;
 4869              		.loc 1 856 7
 4870 3786 488B45A0 		movq	-96(%rbp), %rax
 4871 378a 488B00   		movq	(%rax), %rax
 4872 378d 48894598 		movq	%rax, -104(%rbp)
 857:svf2csvf.c    **** 		thisByte = *ptr;
 4873              		.loc 1 857 12
 4874 3791 488B4598 		movq	-104(%rbp), %rax
 4875 3795 0FB600   		movzbl	(%rax), %eax
 4876 3798 884583   		movb	%al, -125(%rbp)
 4877              	.L278:
 826:svf2csvf.c    **** 		switch ( thisByte ) {
 4878              		.loc 1 826 19
 4879 379b 807D8300 		cmpb	$0, -125(%rbp)
 4880 379f 0F855FFD 		jne	.L295
 4880      FFFF
 858:svf2csvf.c    **** 	}
 859:svf2csvf.c    **** 	bStatus = bufAppendByte(&newBuf, XCOMPLETE, error);
 4881              		.loc 1 859 12
 4882 37a5 488B9568 		movq	-152(%rbp), %rdx
 4882      FFFFFF
 4883 37ac 488D45C0 		leaq	-64(%rbp), %rax
 4884 37b0 BE000000 		movl	$0, %esi
 4884      00
 4885 37b5 4889C7   		movq	%rax, %rdi
 4886 37b8 E8000000 		call	bufAppendByte@PLT
 4886      00
 4887 37bd 894590   		movl	%eax, -112(%rbp)
 860:svf2csvf.c    **** 	CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "buildIndex()");
 4888              		.loc 1 860 2
 4889 37c0 837D9000 		cmpl	$0, -112(%rbp)
 4890 37c4 7422     		je	.L296
 4891              		.loc 1 860 2 is_stmt 0 discriminator 1
 4892 37c6 488B8568 		movq	-152(%rbp), %rax
 4892      FFFFFF
 4893 37cd 488D1500 		leaq	.LC50(%rip), %rdx
 4893      000000
 4894 37d4 4889D6   		movq	%rdx, %rsi
 4895 37d7 4889C7   		movq	%rax, %rdi
 4896 37da E8000000 		call	errPrefix@PLT
 4896      00
 4897 37df C7458401 		movl	$1, -124(%rbp)
 4897      000000
 4898 37e6 EB16     		jmp	.L261
 4899              	.L296:
 861:svf2csvf.c    **** 	bufSwap(&newBuf, csvfBuf);
 4900              		.loc 1 861 2 is_stmt 1
 4901 37e8 488B9570 		movq	-144(%rbp), %rdx
 4901      FFFFFF
 4902 37ef 488D45C0 		leaq	-64(%rbp), %rax
 4903 37f3 4889D6   		movq	%rdx, %rsi
 4904 37f6 4889C7   		movq	%rax, %rdi
 4905 37f9 E8000000 		call	bufSwap@PLT
 4905      00
 4906              	.L261:
 862:svf2csvf.c    **** cleanup:
 863:svf2csvf.c    **** 	if ( dstIndex ) {
 4907              		.loc 1 863 5
 4908 37fe 48837DB8 		cmpq	$0, -72(%rbp)
 4908      00
 4909 3803 740C     		je	.L297
 864:svf2csvf.c    **** 		free((void*)dstIndex);
 4910              		.loc 1 864 3
 4911 3805 488B45B8 		movq	-72(%rbp), %rax
 4912 3809 4889C7   		movq	%rax, %rdi
 4913 380c E8000000 		call	free@PLT
 4913      00
 4914              	.L297:
 865:svf2csvf.c    **** 	}
 866:svf2csvf.c    **** 	if ( srcIndex ) {
 4915              		.loc 1 866 5
 4916 3811 48837DB0 		cmpq	$0, -80(%rbp)
 4916      00
 4917 3816 740C     		je	.L298
 867:svf2csvf.c    **** 		free((void*)srcIndex);
 4918              		.loc 1 867 3
 4919 3818 488B45B0 		movq	-80(%rbp), %rax
 4920 381c 4889C7   		movq	%rax, %rdi
 4921 381f E8000000 		call	free@PLT
 4921      00
 4922              	.L298:
 868:svf2csvf.c    **** 	}
 869:svf2csvf.c    **** 	bufDestroy(&newBuf);
 4923              		.loc 1 869 2
 4924 3824 488D45C0 		leaq	-64(%rbp), %rax
 4925 3828 4889C7   		movq	%rax, %rdi
 4926 382b E8000000 		call	bufDestroy@PLT
 4926      00
 870:svf2csvf.c    **** 	return retVal;
 4927              		.loc 1 870 9
 4928 3830 8B4584   		movl	-124(%rbp), %eax
 871:svf2csvf.c    **** }
 4929              		.loc 1 871 1
 4930 3833 488B55E8 		movq	-24(%rbp), %rdx
 4931 3837 64482B14 		subq	%fs:40, %rdx
 4931      25280000 
 4931      00
 4932 3840 7405     		je	.L300
 4933 3842 E8000000 		call	__stack_chk_fail@PLT
 4933      00
 4934              	.L300:
 4935 3847 488B5DF8 		movq	-8(%rbp), %rbx
 4936 384b C9       		leave
 4937              		.cfi_def_cfa 7, 8
 4938 384c C3       		ret
 4939              		.cfi_endproc
 4940              	.LFE21:
 4942              		.section	.rodata
 4943              	.LC54:
 4944 04a0 666C4C6F 		.string	"flLoadSvfAndConvertToCsvf()"
 4944      61645376 
 4944      66416E64 
 4944      436F6E76 
 4944      65727454 
 4945              	.LC55:
 4946 04bc 54525354 		.string	"TRST"
 4946      00
 4947              	.LC56:
 4948 04c1 454E4400 		.string	"END"
 4949              	.LC57:
 4950 04c5 53544154 		.string	"STATE"
 4950      4500
 4951              	.LC58:
 4952 04cb 46524551 		.string	"FREQ"
 4952      00
 4953              		.text
 4954              		.globl	flLoadSvfAndConvertToCsvf
 4956              	flLoadSvfAndConvertToCsvf:
 4957              	.LFB22:
 872:svf2csvf.c    **** 
 873:svf2csvf.c    **** DLLEXPORT(FLStatus) flLoadSvfAndConvertToCsvf(
 874:svf2csvf.c    **** 	const char *svfFile, struct Buffer *csvfBuf, uint32 *maxBufSize, const char **error)
 875:svf2csvf.c    **** {
 4958              		.loc 1 875 1
 4959              		.cfi_startproc
 4960 384d F30F1EFA 		endbr64
 4961 3851 55       		pushq	%rbp
 4962              		.cfi_def_cfa_offset 16
 4963              		.cfi_offset 6, -16
 4964 3852 4889E5   		movq	%rsp, %rbp
 4965              		.cfi_def_cfa_register 6
 4966 3855 4881EC30 		subq	$816, %rsp
 4966      030000
 4967 385c 4889BDE8 		movq	%rdi, -792(%rbp)
 4967      FCFFFF
 4968 3863 4889B5E0 		movq	%rsi, -800(%rbp)
 4968      FCFFFF
 4969 386a 488995D8 		movq	%rdx, -808(%rbp)
 4969      FCFFFF
 4970 3871 48898DD0 		movq	%rcx, -816(%rbp)
 4970      FCFFFF
 4971              		.loc 1 875 1
 4972 3878 64488B04 		movq	%fs:40, %rax
 4972      25280000 
 4972      00
 4973 3881 488945F8 		movq	%rax, -8(%rbp)
 4974 3885 31C0     		xorl	%eax, %eax
 876:svf2csvf.c    **** 	FLStatus retVal = FL_SUCCESS;
 4975              		.loc 1 876 11
 4976 3887 C785FCFC 		movl	$0, -772(%rbp)
 4976      FFFF0000 
 4976      0000
 877:svf2csvf.c    **** 	struct Buffer lineBuf = {0,};
 4977              		.loc 1 877 16
 4978 3891 48C78530 		movq	$0, -720(%rbp)
 4978      FDFFFF00 
 4978      000000
 4979 389c 48C78538 		movq	$0, -712(%rbp)
 4979      FDFFFF00 
 4979      000000
 4980 38a7 48C78540 		movq	$0, -704(%rbp)
 4980      FDFFFF00 
 4980      000000
 4981 38b2 48C78548 		movq	$0, -696(%rbp)
 4981      FDFFFF00 
 4981      000000
 878:svf2csvf.c    **** 	BufferStatus bStatus;
 879:svf2csvf.c    **** 	FLStatus fStatus;
 880:svf2csvf.c    **** 	const uint8 *buffer = NULL, *p, *end, *line;
 4982              		.loc 1 880 15
 4983 38bd 48C78510 		movq	$0, -752(%rbp)
 4983      FDFFFF00 
 4983      000000
 881:svf2csvf.c    **** 	size_t fileLength;
 882:svf2csvf.c    **** 	bool gotSemicolon;
 883:svf2csvf.c    **** 	struct ParseContext cxt = {{0,},};
 4984              		.loc 1 883 22
 4985 38c8 488D9550 		leaq	-688(%rbp), %rdx
 4985      FDFFFF
 4986 38cf B8000000 		movl	$0, %eax
 4986      00
 4987 38d4 B9550000 		movl	$85, %ecx
 4987      00
 4988 38d9 4889D7   		movq	%rdx, %rdi
 4989 38dc F348AB   		rep stosq
 884:svf2csvf.c    **** 
 885:svf2csvf.c    **** 	// Initialise context and line buffer
 886:svf2csvf.c    **** 	fStatus = cxtInitialise(&cxt, error);
 4990              		.loc 1 886 12
 4991 38df 488B95D0 		movq	-816(%rbp), %rdx
 4991      FCFFFF
 4992 38e6 488D8550 		leaq	-688(%rbp), %rax
 4992      FDFFFF
 4993 38ed 4889D6   		movq	%rdx, %rsi
 4994 38f0 4889C7   		movq	%rax, %rdi
 4995 38f3 E8000000 		call	cxtInitialise@PLT
 4995      00
 4996 38f8 898500FD 		movl	%eax, -768(%rbp)
 4996      FFFF
 887:svf2csvf.c    **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "flLoadSvfAndConvertToCsvf()");
 4997              		.loc 1 887 2
 4998 38fe 83BD00FD 		cmpl	$0, -768(%rbp)
 4998      FFFF00
 4999 3905 742A     		je	.L308
 5000              		.loc 1 887 2 is_stmt 0 discriminator 1
 5001 3907 488B85D0 		movq	-816(%rbp), %rax
 5001      FCFFFF
 5002 390e 488D1500 		leaq	.LC54(%rip), %rdx
 5002      000000
 5003 3915 4889D6   		movq	%rdx, %rsi
 5004 3918 4889C7   		movq	%rax, %rdi
 5005 391b E8000000 		call	errPrefix@PLT
 5005      00
 5006 3920 8B8500FD 		movl	-768(%rbp), %eax
 5006      FFFF
 5007 3926 8985FCFC 		movl	%eax, -772(%rbp)
 5007      FFFF
 5008 392c E9330500 		jmp	.L309
 5008      00
 5009              	.L308:
 888:svf2csvf.c    **** 	bStatus = bufInitialise(&lineBuf, 1024, 0x00, error);
 5010              		.loc 1 888 12 is_stmt 1
 5011 3931 488B95D0 		movq	-816(%rbp), %rdx
 5011      FCFFFF
 5012 3938 488D8530 		leaq	-720(%rbp), %rax
 5012      FDFFFF
 5013 393f 4889D1   		movq	%rdx, %rcx
 5014 3942 BA000000 		movl	$0, %edx
 5014      00
 5015 3947 BE000400 		movl	$1024, %esi
 5015      00
 5016 394c 4889C7   		movq	%rax, %rdi
 5017 394f E8000000 		call	bufInitialise@PLT
 5017      00
 5018 3954 898504FD 		movl	%eax, -764(%rbp)
 5018      FFFF
 889:svf2csvf.c    **** 	CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "flLoadSvfAndConvertToCsvf()");
 5019              		.loc 1 889 2
 5020 395a 83BD04FD 		cmpl	$0, -764(%rbp)
 5020      FFFF00
 5021 3961 7428     		je	.L310
 5022              		.loc 1 889 2 is_stmt 0 discriminator 1
 5023 3963 488B85D0 		movq	-816(%rbp), %rax
 5023      FCFFFF
 5024 396a 488D1500 		leaq	.LC54(%rip), %rdx
 5024      000000
 5025 3971 4889D6   		movq	%rdx, %rsi
 5026 3974 4889C7   		movq	%rax, %rdi
 5027 3977 E8000000 		call	errPrefix@PLT
 5027      00
 5028 397c C785FCFC 		movl	$1, -772(%rbp)
 5028      FFFF0100 
 5028      0000
 5029 3986 E9D90400 		jmp	.L309
 5029      00
 5030              	.L310:
 890:svf2csvf.c    **** 
 891:svf2csvf.c    **** 	// Load SVF file
 892:svf2csvf.c    **** 	buffer = flLoadFile(svfFile, &fileLength);
 5031              		.loc 1 892 11 is_stmt 1
 5032 398b 488D9508 		leaq	-760(%rbp), %rdx
 5032      FDFFFF
 5033 3992 488B85E8 		movq	-792(%rbp), %rax
 5033      FCFFFF
 5034 3999 4889D6   		movq	%rdx, %rsi
 5035 399c 4889C7   		movq	%rax, %rdi
 5036 399f E8000000 		call	flLoadFile@PLT
 5036      00
 5037 39a4 48898510 		movq	%rax, -752(%rbp)
 5037      FDFFFF
 893:svf2csvf.c    **** 	if ( !buffer ) {
 5038              		.loc 1 893 5
 5039 39ab 4883BD10 		cmpq	$0, -752(%rbp)
 5039      FDFFFF00 
 5040 39b3 7537     		jne	.L311
 894:svf2csvf.c    **** 		//errRender(error, "flLoadSvfAndConvertToCsvf(): Unable to load SVF file %s", svfFile);
 895:svf2csvf.c    **** 		errRenderStd(error);
 5041              		.loc 1 895 3
 5042 39b5 488B85D0 		movq	-816(%rbp), %rax
 5042      FCFFFF
 5043 39bc 4889C7   		movq	%rax, %rdi
 5044 39bf E8000000 		call	errRenderStd@PLT
 5044      00
 896:svf2csvf.c    **** 		errPrefix(error, "flLoadSvfAndConvertToCsvf()");
 5045              		.loc 1 896 3
 5046 39c4 488B85D0 		movq	-816(%rbp), %rax
 5046      FCFFFF
 5047 39cb 488D1500 		leaq	.LC54(%rip), %rdx
 5047      000000
 5048 39d2 4889D6   		movq	%rdx, %rsi
 5049 39d5 4889C7   		movq	%rax, %rdi
 5050 39d8 E8000000 		call	errPrefix@PLT
 5050      00
 897:svf2csvf.c    **** 		FAIL(FL_FILE_ERR, cleanup);
 5051              		.loc 1 897 3
 5052 39dd C785FCFC 		movl	$6, -772(%rbp)
 5052      FFFF0600 
 5052      0000
 5053 39e7 E9780400 		jmp	.L309
 5053      00
 5054              	.L311:
 898:svf2csvf.c    **** 	}
 899:svf2csvf.c    **** 	end = buffer + fileLength;
 5055              		.loc 1 899 15
 5056 39ec 488B9508 		movq	-760(%rbp), %rdx
 5056      FDFFFF
 5057              		.loc 1 899 6
 5058 39f3 488B8510 		movq	-752(%rbp), %rax
 5058      FDFFFF
 5059 39fa 4801D0   		addq	%rdx, %rax
 5060 39fd 48898520 		movq	%rax, -736(%rbp)
 5060      FDFFFF
 900:svf2csvf.c    **** 	p = buffer;
 5061              		.loc 1 900 4
 5062 3a04 488B8510 		movq	-752(%rbp), %rax
 5062      FDFFFF
 5063 3a0b 48898518 		movq	%rax, -744(%rbp)
 5063      FDFFFF
 901:svf2csvf.c    **** 	while ( p < end ) {
 5064              		.loc 1 901 8
 5065 3a12 E98A0300 		jmp	.L312
 5065      00
 5066              	.L334:
 902:svf2csvf.c    **** 		if ( p[0] == '\n' || p[0] == '\r' ) {
 5067              		.loc 1 902 9
 5068 3a17 488B8518 		movq	-744(%rbp), %rax
 5068      FDFFFF
 5069 3a1e 0FB600   		movzbl	(%rax), %eax
 5070              		.loc 1 902 6
 5071 3a21 3C0A     		cmpb	$10, %al
 5072 3a23 740E     		je	.L313
 5073              		.loc 1 902 25 discriminator 1
 5074 3a25 488B8518 		movq	-744(%rbp), %rax
 5074      FDFFFF
 5075 3a2c 0FB600   		movzbl	(%rax), %eax
 5076              		.loc 1 902 21 discriminator 1
 5077 3a2f 3C0D     		cmpb	$13, %al
 5078 3a31 750D     		jne	.L314
 5079              	.L313:
 903:svf2csvf.c    **** 			p++;
 5080              		.loc 1 903 5
 5081 3a33 48838518 		addq	$1, -744(%rbp)
 5081      FDFFFF01 
 5082 3a3b E9610300 		jmp	.L312
 5082      00
 5083              	.L314:
 904:svf2csvf.c    **** 		} else if (
 905:svf2csvf.c    **** 			p[0] == '!' ||
 5084              		.loc 1 905 5
 5085 3a40 488B8518 		movq	-744(%rbp), %rax
 5085      FDFFFF
 5086 3a47 0FB600   		movzbl	(%rax), %eax
 904:svf2csvf.c    **** 		} else if (
 5087              		.loc 1 904 13
 5088 3a4a 3C21     		cmpb	$33, %al
 5089 3a4c 0F84B600 		je	.L318
 5089      0000
 906:svf2csvf.c    **** 			(p[0] == '/' && p[1] == '/') ||
 5090              		.loc 1 906 6
 5091 3a52 488B8518 		movq	-744(%rbp), %rax
 5091      FDFFFF
 5092 3a59 0FB600   		movzbl	(%rax), %eax
 905:svf2csvf.c    **** 			(p[0] == '/' && p[1] == '/') ||
 5093              		.loc 1 905 16
 5094 3a5c 3C2F     		cmpb	$47, %al
 5095 3a5e 7516     		jne	.L316
 5096              		.loc 1 906 21
 5097 3a60 488B8518 		movq	-744(%rbp), %rax
 5097      FDFFFF
 5098 3a67 4883C001 		addq	$1, %rax
 5099 3a6b 0FB600   		movzbl	(%rax), %eax
 5100              		.loc 1 906 17
 5101 3a6e 3C2F     		cmpb	$47, %al
 5102 3a70 0F849200 		je	.L318
 5102      0000
 5103              	.L316:
 907:svf2csvf.c    **** 			!memcmp(p, "TRST", 4) ||
 5104              		.loc 1 907 5 discriminator 1
 5105 3a76 488B8518 		movq	-744(%rbp), %rax
 5105      FDFFFF
 5106 3a7d BA040000 		movl	$4, %edx
 5106      00
 5107 3a82 488D0D00 		leaq	.LC55(%rip), %rcx
 5107      000000
 5108 3a89 4889CE   		movq	%rcx, %rsi
 5109 3a8c 4889C7   		movq	%rax, %rdi
 5110 3a8f E8000000 		call	memcmp@PLT
 5110      00
 906:svf2csvf.c    **** 			(p[0] == '/' && p[1] == '/') ||
 5111              		.loc 1 906 33 discriminator 1
 5112 3a94 85C0     		testl	%eax, %eax
 5113 3a96 7470     		je	.L318
 908:svf2csvf.c    **** 			!memcmp(p, "END", 3) ||
 5114              		.loc 1 908 5
 5115 3a98 488B8518 		movq	-744(%rbp), %rax
 5115      FDFFFF
 5116 3a9f BA030000 		movl	$3, %edx
 5116      00
 5117 3aa4 488D0D00 		leaq	.LC56(%rip), %rcx
 5117      000000
 5118 3aab 4889CE   		movq	%rcx, %rsi
 5119 3aae 4889C7   		movq	%rax, %rdi
 5120 3ab1 E8000000 		call	memcmp@PLT
 5120      00
 907:svf2csvf.c    **** 			!memcmp(p, "TRST", 4) ||
 5121              		.loc 1 907 26
 5122 3ab6 85C0     		testl	%eax, %eax
 5123 3ab8 744E     		je	.L318
 909:svf2csvf.c    **** 			!memcmp(p, "STATE", 5) ||
 5124              		.loc 1 909 5
 5125 3aba 488B8518 		movq	-744(%rbp), %rax
 5125      FDFFFF
 5126 3ac1 BA050000 		movl	$5, %edx
 5126      00
 5127 3ac6 488D0D00 		leaq	.LC57(%rip), %rcx
 5127      000000
 5128 3acd 4889CE   		movq	%rcx, %rsi
 5129 3ad0 4889C7   		movq	%rax, %rdi
 5130 3ad3 E8000000 		call	memcmp@PLT
 5130      00
 908:svf2csvf.c    **** 			!memcmp(p, "END", 3) ||
 5131              		.loc 1 908 25
 5132 3ad8 85C0     		testl	%eax, %eax
 5133 3ada 742C     		je	.L318
 910:svf2csvf.c    **** 			!memcmp(p, "FREQ", 4)
 5134              		.loc 1 910 5
 5135 3adc 488B8518 		movq	-744(%rbp), %rax
 5135      FDFFFF
 5136 3ae3 BA040000 		movl	$4, %edx
 5136      00
 5137 3ae8 488D0D00 		leaq	.LC58(%rip), %rcx
 5137      000000
 5138 3aef 4889CE   		movq	%rcx, %rsi
 5139 3af2 4889C7   		movq	%rax, %rdi
 5140 3af5 E8000000 		call	memcmp@PLT
 5140      00
 909:svf2csvf.c    **** 			!memcmp(p, "STATE", 5) ||
 5141              		.loc 1 909 27
 5142 3afa 85C0     		testl	%eax, %eax
 5143 3afc 754B     		jne	.L321
 911:svf2csvf.c    **** 		) {
 912:svf2csvf.c    **** 			while ( p < end && *p != '\n' && *p != '\r' ) {
 5144              		.loc 1 912 10
 5145 3afe EB08     		jmp	.L318
 5146              	.L320:
 913:svf2csvf.c    **** 				p++;
 5147              		.loc 1 913 6
 5148 3b00 48838518 		addq	$1, -744(%rbp)
 5148      FDFFFF01 
 5149              	.L318:
 912:svf2csvf.c    **** 				p++;
 5150              		.loc 1 912 34
 5151 3b08 488B8518 		movq	-744(%rbp), %rax
 5151      FDFFFF
 5152 3b0f 483B8520 		cmpq	-736(%rbp), %rax
 5152      FDFFFF
 5153 3b16 731C     		jnb	.L319
 912:svf2csvf.c    **** 				p++;
 5154              		.loc 1 912 23 discriminator 1
 5155 3b18 488B8518 		movq	-744(%rbp), %rax
 5155      FDFFFF
 5156 3b1f 0FB600   		movzbl	(%rax), %eax
 912:svf2csvf.c    **** 				p++;
 5157              		.loc 1 912 20 discriminator 1
 5158 3b22 3C0A     		cmpb	$10, %al
 5159 3b24 740E     		je	.L319
 912:svf2csvf.c    **** 				p++;
 5160              		.loc 1 912 37 discriminator 2
 5161 3b26 488B8518 		movq	-744(%rbp), %rax
 5161      FDFFFF
 5162 3b2d 0FB600   		movzbl	(%rax), %eax
 912:svf2csvf.c    **** 				p++;
 5163              		.loc 1 912 34 discriminator 2
 5164 3b30 3C0D     		cmpb	$13, %al
 5165 3b32 75CC     		jne	.L320
 5166              	.L319:
 914:svf2csvf.c    **** 			}
 915:svf2csvf.c    **** 			p++;
 5167              		.loc 1 915 5
 5168 3b34 48838518 		addq	$1, -744(%rbp)
 5168      FDFFFF01 
 5169 3b3c E9600200 		jmp	.L312
 5169      00
 5170              	.L322:
 916:svf2csvf.c    **** 		} else {
 917:svf2csvf.c    **** 			CHOMP();
 5171              		.loc 1 917 4 discriminator 4
 5172 3b41 48838518 		addq	$1, -744(%rbp)
 5172      FDFFFF01 
 5173              	.L321:
 5174              		.loc 1 917 4 is_stmt 0 discriminator 1
 5175 3b49 488B8518 		movq	-744(%rbp), %rax
 5175      FDFFFF
 5176 3b50 0FB600   		movzbl	(%rax), %eax
 5177 3b53 3C20     		cmpb	$32, %al
 5178 3b55 74EA     		je	.L322
 5179              		.loc 1 917 4 discriminator 3
 5180 3b57 488B8518 		movq	-744(%rbp), %rax
 5180      FDFFFF
 5181 3b5e 0FB600   		movzbl	(%rax), %eax
 5182 3b61 3C09     		cmpb	$9, %al
 5183 3b63 74DC     		je	.L322
 918:svf2csvf.c    **** 			line = p;
 5184              		.loc 1 918 9 is_stmt 1
 5185 3b65 488B8518 		movq	-744(%rbp), %rax
 5185      FDFFFF
 5186 3b6c 48898528 		movq	%rax, -728(%rbp)
 5186      FDFFFF
 919:svf2csvf.c    **** 			while ( p < end && *p != '\n' && *p != '\r' && *p != ';' ) {
 5187              		.loc 1 919 10
 5188 3b73 EB08     		jmp	.L323
 5189              	.L325:
 920:svf2csvf.c    **** 				p++;
 5190              		.loc 1 920 6
 5191 3b75 48838518 		addq	$1, -744(%rbp)
 5191      FDFFFF01 
 5192              	.L323:
 919:svf2csvf.c    **** 			while ( p < end && *p != '\n' && *p != '\r' && *p != ';' ) {
 5193              		.loc 1 919 48
 5194 3b7d 488B8518 		movq	-744(%rbp), %rax
 5194      FDFFFF
 5195 3b84 483B8520 		cmpq	-736(%rbp), %rax
 5195      FDFFFF
 5196 3b8b 732A     		jnb	.L324
 919:svf2csvf.c    **** 			while ( p < end && *p != '\n' && *p != '\r' && *p != ';' ) {
 5197              		.loc 1 919 23 discriminator 1
 5198 3b8d 488B8518 		movq	-744(%rbp), %rax
 5198      FDFFFF
 5199 3b94 0FB600   		movzbl	(%rax), %eax
 919:svf2csvf.c    **** 			while ( p < end && *p != '\n' && *p != '\r' && *p != ';' ) {
 5200              		.loc 1 919 20 discriminator 1
 5201 3b97 3C0A     		cmpb	$10, %al
 5202 3b99 741C     		je	.L324
 919:svf2csvf.c    **** 			while ( p < end && *p != '\n' && *p != '\r' && *p != ';' ) {
 5203              		.loc 1 919 37 discriminator 2
 5204 3b9b 488B8518 		movq	-744(%rbp), %rax
 5204      FDFFFF
 5205 3ba2 0FB600   		movzbl	(%rax), %eax
 919:svf2csvf.c    **** 			while ( p < end && *p != '\n' && *p != '\r' && *p != ';' ) {
 5206              		.loc 1 919 34 discriminator 2
 5207 3ba5 3C0D     		cmpb	$13, %al
 5208 3ba7 740E     		je	.L324
 919:svf2csvf.c    **** 			while ( p < end && *p != '\n' && *p != '\r' && *p != ';' ) {
 5209              		.loc 1 919 51 discriminator 3
 5210 3ba9 488B8518 		movq	-744(%rbp), %rax
 5210      FDFFFF
 5211 3bb0 0FB600   		movzbl	(%rax), %eax
 919:svf2csvf.c    **** 			while ( p < end && *p != '\n' && *p != '\r' && *p != ';' ) {
 5212              		.loc 1 919 48 discriminator 3
 5213 3bb3 3C3B     		cmpb	$59, %al
 5214 3bb5 75BE     		jne	.L325
 5215              	.L324:
 921:svf2csvf.c    **** 			}
 922:svf2csvf.c    **** 			gotSemicolon = (*p == ';');
 5216              		.loc 1 922 20
 5217 3bb7 488B8518 		movq	-744(%rbp), %rax
 5217      FDFFFF
 5218 3bbe 0FB600   		movzbl	(%rax), %eax
 5219              		.loc 1 922 17
 5220 3bc1 3C3B     		cmpb	$59, %al
 5221 3bc3 0F94C0   		sete	%al
 5222 3bc6 8885FBFC 		movb	%al, -773(%rbp)
 5222      FFFF
 923:svf2csvf.c    **** 			if ( *p == '\n' || *p == '\r' || *p == ';' ) {
 5223              		.loc 1 923 9
 5224 3bcc 488B8518 		movq	-744(%rbp), %rax
 5224      FDFFFF
 5225 3bd3 0FB600   		movzbl	(%rax), %eax
 5226              		.loc 1 923 7
 5227 3bd6 3C0A     		cmpb	$10, %al
 5228 3bd8 7420     		je	.L327
 5229              		.loc 1 923 23 discriminator 1
 5230 3bda 488B8518 		movq	-744(%rbp), %rax
 5230      FDFFFF
 5231 3be1 0FB600   		movzbl	(%rax), %eax
 5232              		.loc 1 923 20 discriminator 1
 5233 3be4 3C0D     		cmpb	$13, %al
 5234 3be6 7412     		je	.L327
 5235              		.loc 1 923 37 discriminator 2
 5236 3be8 488B8518 		movq	-744(%rbp), %rax
 5236      FDFFFF
 5237 3bef 0FB600   		movzbl	(%rax), %eax
 5238              		.loc 1 923 34 discriminator 2
 5239 3bf2 3C3B     		cmpb	$59, %al
 5240 3bf4 0F85A701 		jne	.L312
 5240      0000
 5241              	.L327:
 924:svf2csvf.c    **** 				do {
 925:svf2csvf.c    **** 					p--;
 5242              		.loc 1 925 7 discriminator 3
 5243 3bfa 4883AD18 		subq	$1, -744(%rbp)
 5243      FDFFFF01 
 926:svf2csvf.c    **** 				} while ( *p == ' ' || *p == '\t' );
 5244              		.loc 1 926 15 discriminator 3
 5245 3c02 488B8518 		movq	-744(%rbp), %rax
 5245      FDFFFF
 5246 3c09 0FB600   		movzbl	(%rax), %eax
 5247              		.loc 1 926 25 discriminator 3
 5248 3c0c 3C20     		cmpb	$32, %al
 5249 3c0e 74EA     		je	.L327
 5250              		.loc 1 926 28 discriminator 2
 5251 3c10 488B8518 		movq	-744(%rbp), %rax
 5251      FDFFFF
 5252 3c17 0FB600   		movzbl	(%rax), %eax
 5253              		.loc 1 926 25 discriminator 2
 5254 3c1a 3C09     		cmpb	$9, %al
 5255 3c1c 74DC     		je	.L327
 927:svf2csvf.c    **** 				p++; // go back to first space char
 5256              		.loc 1 927 6
 5257 3c1e 48838518 		addq	$1, -744(%rbp)
 5257      FDFFFF01 
 928:svf2csvf.c    **** 				bStatus = bufAppendBlock(&lineBuf, line, (uint32)(p - line), error);
 5258              		.loc 1 928 57
 5259 3c26 488B8518 		movq	-744(%rbp), %rax
 5259      FDFFFF
 5260 3c2d 482B8528 		subq	-728(%rbp), %rax
 5260      FDFFFF
 5261              		.loc 1 928 15
 5262 3c34 89C7     		movl	%eax, %edi
 5263 3c36 488B95D0 		movq	-816(%rbp), %rdx
 5263      FCFFFF
 5264 3c3d 488BB528 		movq	-728(%rbp), %rsi
 5264      FDFFFF
 5265 3c44 488D8530 		leaq	-720(%rbp), %rax
 5265      FDFFFF
 5266 3c4b 4889D1   		movq	%rdx, %rcx
 5267 3c4e 4889FA   		movq	%rdi, %rdx
 5268 3c51 4889C7   		movq	%rax, %rdi
 5269 3c54 E8000000 		call	bufAppendBlock@PLT
 5269      00
 5270 3c59 898504FD 		movl	%eax, -764(%rbp)
 5270      FFFF
 929:svf2csvf.c    **** 				CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "flLoadSvfAndConvertToCsvf()");
 5271              		.loc 1 929 5
 5272 3c5f 83BD04FD 		cmpl	$0, -764(%rbp)
 5272      FFFF00
 5273 3c66 7430     		je	.L329
 5274              		.loc 1 929 5 is_stmt 0 discriminator 1
 5275 3c68 488B85D0 		movq	-816(%rbp), %rax
 5275      FCFFFF
 5276 3c6f 488D1500 		leaq	.LC54(%rip), %rdx
 5276      000000
 5277 3c76 4889D6   		movq	%rdx, %rsi
 5278 3c79 4889C7   		movq	%rax, %rdi
 5279 3c7c E8000000 		call	errPrefix@PLT
 5279      00
 5280 3c81 C785FCFC 		movl	$1, -772(%rbp)
 5280      FFFF0100 
 5280      0000
 5281 3c8b E9D40100 		jmp	.L309
 5281      00
 5282              	.L331:
 930:svf2csvf.c    **** 				while ( p < end && *p != '\n' && *p != '\r' ) {
 931:svf2csvf.c    **** 					p++;
 5283              		.loc 1 931 7 is_stmt 1
 5284 3c90 48838518 		addq	$1, -744(%rbp)
 5284      FDFFFF01 
 5285              	.L329:
 930:svf2csvf.c    **** 				while ( p < end && *p != '\n' && *p != '\r' ) {
 5286              		.loc 1 930 35
 5287 3c98 488B8518 		movq	-744(%rbp), %rax
 5287      FDFFFF
 5288 3c9f 483B8520 		cmpq	-736(%rbp), %rax
 5288      FDFFFF
 5289 3ca6 731C     		jnb	.L330
 930:svf2csvf.c    **** 				while ( p < end && *p != '\n' && *p != '\r' ) {
 5290              		.loc 1 930 24 discriminator 1
 5291 3ca8 488B8518 		movq	-744(%rbp), %rax
 5291      FDFFFF
 5292 3caf 0FB600   		movzbl	(%rax), %eax
 930:svf2csvf.c    **** 				while ( p < end && *p != '\n' && *p != '\r' ) {
 5293              		.loc 1 930 21 discriminator 1
 5294 3cb2 3C0A     		cmpb	$10, %al
 5295 3cb4 740E     		je	.L330
 930:svf2csvf.c    **** 				while ( p < end && *p != '\n' && *p != '\r' ) {
 5296              		.loc 1 930 38 discriminator 2
 5297 3cb6 488B8518 		movq	-744(%rbp), %rax
 5297      FDFFFF
 5298 3cbd 0FB600   		movzbl	(%rax), %eax
 930:svf2csvf.c    **** 				while ( p < end && *p != '\n' && *p != '\r' ) {
 5299              		.loc 1 930 35 discriminator 2
 5300 3cc0 3C0D     		cmpb	$13, %al
 5301 3cc2 75CC     		jne	.L331
 5302              	.L330:
 932:svf2csvf.c    **** 				}
 933:svf2csvf.c    **** 				p++; // Skip over CR
 5303              		.loc 1 933 6
 5304 3cc4 48838518 		addq	$1, -744(%rbp)
 5304      FDFFFF01 
 934:svf2csvf.c    **** 				if ( gotSemicolon ) {
 5305              		.loc 1 934 8
 5306 3ccc 80BDFBFC 		cmpb	$0, -773(%rbp)
 5306      FFFF00
 5307 3cd3 0F84C800 		je	.L312
 5307      0000
 935:svf2csvf.c    **** 					bStatus = bufAppendByte(&lineBuf, '\0', error);
 5308              		.loc 1 935 16
 5309 3cd9 488B95D0 		movq	-816(%rbp), %rdx
 5309      FCFFFF
 5310 3ce0 488D8530 		leaq	-720(%rbp), %rax
 5310      FDFFFF
 5311 3ce7 BE000000 		movl	$0, %esi
 5311      00
 5312 3cec 4889C7   		movq	%rax, %rdi
 5313 3cef E8000000 		call	bufAppendByte@PLT
 5313      00
 5314 3cf4 898504FD 		movl	%eax, -764(%rbp)
 5314      FFFF
 936:svf2csvf.c    **** 					CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "flLoadSvfAndConvertToCsvf()");
 5315              		.loc 1 936 6
 5316 3cfa 83BD04FD 		cmpl	$0, -764(%rbp)
 5316      FFFF00
 5317 3d01 7428     		je	.L332
 5318              		.loc 1 936 6 is_stmt 0 discriminator 1
 5319 3d03 488B85D0 		movq	-816(%rbp), %rax
 5319      FCFFFF
 5320 3d0a 488D1500 		leaq	.LC54(%rip), %rdx
 5320      000000
 5321 3d11 4889D6   		movq	%rdx, %rsi
 5322 3d14 4889C7   		movq	%rax, %rdi
 5323 3d17 E8000000 		call	errPrefix@PLT
 5323      00
 5324 3d1c C785FCFC 		movl	$1, -772(%rbp)
 5324      FFFF0100 
 5324      0000
 5325 3d26 E9390100 		jmp	.L309
 5325      00
 5326              	.L332:
 937:svf2csvf.c    **** 					fStatus = parseLine(&cxt, &lineBuf, csvfBuf, maxBufSize, error);
 5327              		.loc 1 937 16 is_stmt 1
 5328 3d2b 488BBDD0 		movq	-816(%rbp), %rdi
 5328      FCFFFF
 5329 3d32 488B8DD8 		movq	-808(%rbp), %rcx
 5329      FCFFFF
 5330 3d39 488B95E0 		movq	-800(%rbp), %rdx
 5330      FCFFFF
 5331 3d40 488DB530 		leaq	-720(%rbp), %rsi
 5331      FDFFFF
 5332 3d47 488D8550 		leaq	-688(%rbp), %rax
 5332      FDFFFF
 5333 3d4e 4989F8   		movq	%rdi, %r8
 5334 3d51 4889C7   		movq	%rax, %rdi
 5335 3d54 E8000000 		call	parseLine@PLT
 5335      00
 5336 3d59 898500FD 		movl	%eax, -768(%rbp)
 5336      FFFF
 938:svf2csvf.c    **** 					CHECK_STATUS(fStatus, fStatus, cleanup, "flLoadSvfAndConvertToCsvf()");
 5337              		.loc 1 938 6
 5338 3d5f 83BD00FD 		cmpl	$0, -768(%rbp)
 5338      FFFF00
 5339 3d66 742A     		je	.L333
 5340              		.loc 1 938 6 is_stmt 0 discriminator 1
 5341 3d68 488B85D0 		movq	-816(%rbp), %rax
 5341      FCFFFF
 5342 3d6f 488D1500 		leaq	.LC54(%rip), %rdx
 5342      000000
 5343 3d76 4889D6   		movq	%rdx, %rsi
 5344 3d79 4889C7   		movq	%rax, %rdi
 5345 3d7c E8000000 		call	errPrefix@PLT
 5345      00
 5346 3d81 8B8500FD 		movl	-768(%rbp), %eax
 5346      FFFF
 5347 3d87 8985FCFC 		movl	%eax, -772(%rbp)
 5347      FFFF
 5348 3d8d E9D20000 		jmp	.L309
 5348      00
 5349              	.L333:
 939:svf2csvf.c    **** 					bufZeroLength(&lineBuf);
 5350              		.loc 1 939 6 is_stmt 1
 5351 3d92 488D8530 		leaq	-720(%rbp), %rax
 5351      FDFFFF
 5352 3d99 4889C7   		movq	%rax, %rdi
 5353 3d9c E8000000 		call	bufZeroLength@PLT
 5353      00
 5354              	.L312:
 901:svf2csvf.c    **** 		if ( p[0] == '\n' || p[0] == '\r' ) {
 5355              		.loc 1 901 12
 5356 3da1 488B8518 		movq	-744(%rbp), %rax
 5356      FDFFFF
 5357 3da8 483B8520 		cmpq	-736(%rbp), %rax
 5357      FDFFFF
 5358 3daf 0F8262FC 		jb	.L334
 5358      FFFF
 940:svf2csvf.c    **** 				}
 941:svf2csvf.c    **** 			}
 942:svf2csvf.c    **** 		}
 943:svf2csvf.c    **** 	}
 944:svf2csvf.c    **** 	bStatus = bufAppendByte(csvfBuf, XCOMPLETE, error);
 5359              		.loc 1 944 12
 5360 3db5 488B95D0 		movq	-816(%rbp), %rdx
 5360      FCFFFF
 5361 3dbc 488B85E0 		movq	-800(%rbp), %rax
 5361      FCFFFF
 5362 3dc3 BE000000 		movl	$0, %esi
 5362      00
 5363 3dc8 4889C7   		movq	%rax, %rdi
 5364 3dcb E8000000 		call	bufAppendByte@PLT
 5364      00
 5365 3dd0 898504FD 		movl	%eax, -764(%rbp)
 5365      FFFF
 945:svf2csvf.c    **** 	CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "flLoadSvfAndConvertToCsvf()");
 5366              		.loc 1 945 2
 5367 3dd6 83BD04FD 		cmpl	$0, -764(%rbp)
 5367      FFFF00
 5368 3ddd 7425     		je	.L335
 5369              		.loc 1 945 2 is_stmt 0 discriminator 1
 5370 3ddf 488B85D0 		movq	-816(%rbp), %rax
 5370      FCFFFF
 5371 3de6 488D1500 		leaq	.LC54(%rip), %rdx
 5371      000000
 5372 3ded 4889D6   		movq	%rdx, %rsi
 5373 3df0 4889C7   		movq	%rax, %rdi
 5374 3df3 E8000000 		call	errPrefix@PLT
 5374      00
 5375 3df8 C785FCFC 		movl	$1, -772(%rbp)
 5375      FFFF0100 
 5375      0000
 5376 3e02 EB60     		jmp	.L309
 5377              	.L335:
 946:svf2csvf.c    **** 	cxt.numCommands++;
 5378              		.loc 1 946 5 is_stmt 1
 5379 3e04 8B45EC   		movl	-20(%rbp), %eax
 5380              		.loc 1 946 17
 5381 3e07 83C001   		addl	$1, %eax
 5382 3e0a 8945EC   		movl	%eax, -20(%rbp)
 947:svf2csvf.c    **** 
 948:svf2csvf.c    **** 	fStatus = buildIndex(&cxt, csvfBuf, error);
 5383              		.loc 1 948 12
 5384 3e0d 488B95D0 		movq	-816(%rbp), %rdx
 5384      FCFFFF
 5385 3e14 488B8DE0 		movq	-800(%rbp), %rcx
 5385      FCFFFF
 5386 3e1b 488D8550 		leaq	-688(%rbp), %rax
 5386      FDFFFF
 5387 3e22 4889CE   		movq	%rcx, %rsi
 5388 3e25 4889C7   		movq	%rax, %rdi
 5389 3e28 E8000000 		call	buildIndex@PLT
 5389      00
 5390 3e2d 898500FD 		movl	%eax, -768(%rbp)
 5390      FFFF
 949:svf2csvf.c    **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "flLoadSvfAndConvertToCsvf()");
 5391              		.loc 1 949 2
 5392 3e33 83BD00FD 		cmpl	$0, -768(%rbp)
 5392      FFFF00
 5393 3e3a 7427     		je	.L338
 5394              		.loc 1 949 2 is_stmt 0 discriminator 1
 5395 3e3c 488B85D0 		movq	-816(%rbp), %rax
 5395      FCFFFF
 5396 3e43 488D1500 		leaq	.LC54(%rip), %rdx
 5396      000000
 5397 3e4a 4889D6   		movq	%rdx, %rsi
 5398 3e4d 4889C7   		movq	%rax, %rdi
 5399 3e50 E8000000 		call	errPrefix@PLT
 5399      00
 5400 3e55 8B8500FD 		movl	-768(%rbp), %eax
 5400      FFFF
 5401 3e5b 8985FCFC 		movl	%eax, -772(%rbp)
 5401      FFFF
 5402 3e61 EB01     		jmp	.L309
 5403              	.L338:
 950:svf2csvf.c    **** cleanup:
 5404              		.loc 1 950 1 is_stmt 1
 5405 3e63 90       		nop
 5406              	.L309:
 951:svf2csvf.c    **** 	cxtDestroy(&cxt);
 5407              		.loc 1 951 2
 5408 3e64 488D8550 		leaq	-688(%rbp), %rax
 5408      FDFFFF
 5409 3e6b 4889C7   		movq	%rax, %rdi
 5410 3e6e E8000000 		call	cxtDestroy@PLT
 5410      00
 952:svf2csvf.c    **** 	bufDestroy(&lineBuf);
 5411              		.loc 1 952 2
 5412 3e73 488D8530 		leaq	-720(%rbp), %rax
 5412      FDFFFF
 5413 3e7a 4889C7   		movq	%rax, %rdi
 5414 3e7d E8000000 		call	bufDestroy@PLT
 5414      00
 953:svf2csvf.c    **** 	flFreeFile((void*)buffer);
 5415              		.loc 1 953 2
 5416 3e82 488B8510 		movq	-752(%rbp), %rax
 5416      FDFFFF
 5417 3e89 4889C7   		movq	%rax, %rdi
 5418 3e8c E8000000 		call	flFreeFile@PLT
 5418      00
 954:svf2csvf.c    **** 	return retVal;
 5419              		.loc 1 954 9
 5420 3e91 8B85FCFC 		movl	-772(%rbp), %eax
 5420      FFFF
 955:svf2csvf.c    **** }	
 5421              		.loc 1 955 1
 5422 3e97 488B55F8 		movq	-8(%rbp), %rdx
 5423 3e9b 64482B14 		subq	%fs:40, %rdx
 5423      25280000 
 5423      00
 5424 3ea4 7405     		je	.L337
 5425 3ea6 E8000000 		call	__stack_chk_fail@PLT
 5425      00
 5426              	.L337:
 5427 3eab C9       		leave
 5428              		.cfi_def_cfa 7, 8
 5429 3eac C3       		ret
 5430              		.cfi_endproc
 5431              	.LFE22:
 5433              		.section	.rodata
 5434              		.align 8
 5435              	.LC13:
 5436 04d0 00000000 		.long	0
 5437 04d4 80842E41 		.long	1093567616
 5438              		.text
 5439              	.Letext0:
 5440              		.file 2 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h"
 5441              		.file 3 "/home/pong/FPGALink/makestuff/common/makestuff.h"
 5442              		.file 4 "/home/pong/FPGALink/makestuff/libs/libbuffer/libbuffer.h"
 5443              		.file 5 "libfpgalink.h"
 5444              		.file 6 "svf2csvf.h"
 5445              		.file 7 "xsvf.h"
 5446              		.file 8 "/home/pong/FPGALink/makestuff/libs/liberror/liberror.h"
 5447              		.file 9 "/usr/include/stdlib.h"
 5448              		.file 10 "/usr/include/string.h"
 9120              		.section	.note.gnu.property,"a"
 9121              		.align 8
 9122 0000 04000000 		.long	1f - 0f
 9123 0004 10000000 		.long	4f - 1f
 9124 0008 05000000 		.long	5
 9125              	0:
 9126 000c 474E5500 		.string	"GNU"
 9127              	1:
 9128              		.align 8
 9129 0010 020000C0 		.long	0xc0000002
 9130 0014 04000000 		.long	3f - 2f
 9131              	2:
 9132 0018 03000000 		.long	0x3
 9133              	3:
 9134 001c 00000000 		.align 8
 9135              	4:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 svf2csvf.c
     /tmp/cclS3HPW.s:6      .text:0000000000000000 getHexNibble
     /tmp/cclS3HPW.s:79     .text:0000000000000078 getHexByte
     /tmp/cclS3HPW.s:162    .text:000000000000011e readLongBE
     /tmp/cclS3HPW.s:224    .text:000000000000017b readBytes
     /tmp/cclS3HPW.s:336    .text:0000000000000285 shiftLeft
     /tmp/cclS3HPW.s:634    .text:0000000000000586 headTail
     /tmp/cclS3HPW.s:1026   .text:00000000000009ea initBitStore
     /tmp/cclS3HPW.s:1120   .text:0000000000000aea destroyBitStore
     /tmp/cclS3HPW.s:1164   .text:0000000000000b37 cxtInitialise
     /tmp/cclS3HPW.s:1349   .text:0000000000000d60 cxtDestroy
     /tmp/cclS3HPW.s:1408   .text:0000000000000de9 processLine
     /tmp/cclS3HPW.s:1660   .text:0000000000001081 isAllZero
     /tmp/cclS3HPW.s:1718   .text:00000000000010d3 appendSwappedAndInterleaved
     /tmp/cclS3HPW.s:1825   .text:00000000000011d1 appendSwapped
     /tmp/cclS3HPW.s:1941   .text:0000000000001260 parseLine
     /tmp/cclS3HPW.s:4036   .data.rel.ro.local:0000000000000000 cmdNames
     /tmp/cclS3HPW.s:4064   .text:0000000000002f6d getCmdName
     /tmp/cclS3HPW.s:4095   .rodata:000000000000037b xrtZero
     /tmp/cclS3HPW.s:4103   .rodata:0000000000000380 illegal32
     /tmp/cclS3HPW.s:4108   .text:0000000000002f9e processIndex
     /tmp/cclS3HPW.s:4332   .text:0000000000003174 buildIndex
     /tmp/cclS3HPW.s:4956   .text:000000000000384d flLoadSvfAndConvertToCsvf

UNDEFINED SYMBOLS
__stack_chk_fail
strlen
errPrefix
bufZeroLength
bufAppendConst
bufInitialise
bufAppendByte
bufSwap
bufDestroy
bufAppendBlock
strncmp
strtod
bufAppendLongBE
strtoul
errRender
bufDeepCopy
memcmp
malloc
free
flLoadFile
errRenderStd
flFreeFile
