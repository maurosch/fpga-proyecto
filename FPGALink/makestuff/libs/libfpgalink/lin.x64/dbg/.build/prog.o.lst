   1              		.file	"prog.c"
   2              		.text
   3              	.Ltext0:
   4              		.file 0 "/home/pong/FPGALink/makestuff/libs/libfpgalink" "prog.c"
   6              	littleEndian32:
   7              	.LFB3:
   8              		.file 1 "/home/pong/FPGALink/makestuff/common/makestuff.h"
   1:/home/pong/FPGALink/makestuff/common/makestuff.h **** /*
   2:/home/pong/FPGALink/makestuff/common/makestuff.h ****  * Copyright (C) 2009-2012 Chris McClelland
   3:/home/pong/FPGALink/makestuff/common/makestuff.h ****  *
   4:/home/pong/FPGALink/makestuff/common/makestuff.h ****  * This program is free software: you can redistribute it and/or modify
   5:/home/pong/FPGALink/makestuff/common/makestuff.h ****  * it under the terms of the GNU Lesser General Public License as published by
   6:/home/pong/FPGALink/makestuff/common/makestuff.h ****  * the Free Software Foundation, either version 3 of the License, or
   7:/home/pong/FPGALink/makestuff/common/makestuff.h ****  * (at your option) any later version.
   8:/home/pong/FPGALink/makestuff/common/makestuff.h ****  *
   9:/home/pong/FPGALink/makestuff/common/makestuff.h ****  * This program is distributed in the hope that it will be useful,
  10:/home/pong/FPGALink/makestuff/common/makestuff.h ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:/home/pong/FPGALink/makestuff/common/makestuff.h ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:/home/pong/FPGALink/makestuff/common/makestuff.h ****  * GNU Lesser General Public License for more details.
  13:/home/pong/FPGALink/makestuff/common/makestuff.h ****  *
  14:/home/pong/FPGALink/makestuff/common/makestuff.h ****  * You should have received a copy of the GNU Lesser General Public License
  15:/home/pong/FPGALink/makestuff/common/makestuff.h ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:/home/pong/FPGALink/makestuff/common/makestuff.h ****  */
  17:/home/pong/FPGALink/makestuff/common/makestuff.h **** 
  18:/home/pong/FPGALink/makestuff/common/makestuff.h **** #ifndef MAKESTUFF_H
  19:/home/pong/FPGALink/makestuff/common/makestuff.h **** #define MAKESTUFF_H
  20:/home/pong/FPGALink/makestuff/common/makestuff.h **** 
  21:/home/pong/FPGALink/makestuff/common/makestuff.h **** #include <stddef.h>
  22:/home/pong/FPGALink/makestuff/common/makestuff.h **** 
  23:/home/pong/FPGALink/makestuff/common/makestuff.h **** #ifndef __cplusplus
  24:/home/pong/FPGALink/makestuff/common/makestuff.h **** 	#ifdef WIN32
  25:/home/pong/FPGALink/makestuff/common/makestuff.h **** 		typedef char bool;
  26:/home/pong/FPGALink/makestuff/common/makestuff.h **** 		enum {
  27:/home/pong/FPGALink/makestuff/common/makestuff.h **** 			false = 0,
  28:/home/pong/FPGALink/makestuff/common/makestuff.h **** 			true = 1
  29:/home/pong/FPGALink/makestuff/common/makestuff.h **** 		};
  30:/home/pong/FPGALink/makestuff/common/makestuff.h **** 	#else
  31:/home/pong/FPGALink/makestuff/common/makestuff.h **** 		#include <stdbool.h>
  32:/home/pong/FPGALink/makestuff/common/makestuff.h **** 	#endif
  33:/home/pong/FPGALink/makestuff/common/makestuff.h **** #endif
  34:/home/pong/FPGALink/makestuff/common/makestuff.h **** 
  35:/home/pong/FPGALink/makestuff/common/makestuff.h **** #ifdef WIN32
  36:/home/pong/FPGALink/makestuff/common/makestuff.h **** 	#define WARN_UNUSED_RESULT
  37:/home/pong/FPGALink/makestuff/common/makestuff.h **** 	#define DLLEXPORT(t) __declspec(dllexport) t __stdcall
  38:/home/pong/FPGALink/makestuff/common/makestuff.h **** 	#define PFSZD "%Iu"
  39:/home/pong/FPGALink/makestuff/common/makestuff.h **** 	#ifdef _WIN64
  40:/home/pong/FPGALink/makestuff/common/makestuff.h **** 		#define PFSZH "%016IX"
  41:/home/pong/FPGALink/makestuff/common/makestuff.h **** 		#define WORD_LENGTH 64
  42:/home/pong/FPGALink/makestuff/common/makestuff.h **** 	#else
  43:/home/pong/FPGALink/makestuff/common/makestuff.h **** 		#define PFSZH "%08IX"
  44:/home/pong/FPGALink/makestuff/common/makestuff.h **** 		#define WORD_LENGTH 32
  45:/home/pong/FPGALink/makestuff/common/makestuff.h **** 	#endif
  46:/home/pong/FPGALink/makestuff/common/makestuff.h **** #else
  47:/home/pong/FPGALink/makestuff/common/makestuff.h **** 	#define WARN_UNUSED_RESULT __attribute__((warn_unused_result))
  48:/home/pong/FPGALink/makestuff/common/makestuff.h **** 	#define DLLEXPORT(t) t
  49:/home/pong/FPGALink/makestuff/common/makestuff.h **** 	#define PFSZD "%zu"
  50:/home/pong/FPGALink/makestuff/common/makestuff.h **** 	#ifdef __LP64__
  51:/home/pong/FPGALink/makestuff/common/makestuff.h **** 		#define PFSZH "%016zX"
  52:/home/pong/FPGALink/makestuff/common/makestuff.h **** 		#define WORD_LENGTH 64
  53:/home/pong/FPGALink/makestuff/common/makestuff.h **** 	#else
  54:/home/pong/FPGALink/makestuff/common/makestuff.h **** 		#define PFSZH "%08zX"
  55:/home/pong/FPGALink/makestuff/common/makestuff.h **** 		#define WORD_LENGTH 32
  56:/home/pong/FPGALink/makestuff/common/makestuff.h **** 	#endif
  57:/home/pong/FPGALink/makestuff/common/makestuff.h **** #endif
  58:/home/pong/FPGALink/makestuff/common/makestuff.h **** 
  59:/home/pong/FPGALink/makestuff/common/makestuff.h **** #ifndef NULL
  60:/home/pong/FPGALink/makestuff/common/makestuff.h **** 	#define NULL ((void*)0)
  61:/home/pong/FPGALink/makestuff/common/makestuff.h **** #endif
  62:/home/pong/FPGALink/makestuff/common/makestuff.h **** 
  63:/home/pong/FPGALink/makestuff/common/makestuff.h **** typedef unsigned char      uint8;
  64:/home/pong/FPGALink/makestuff/common/makestuff.h **** typedef unsigned short     uint16;
  65:/home/pong/FPGALink/makestuff/common/makestuff.h **** #ifndef __cplusplus
  66:/home/pong/FPGALink/makestuff/common/makestuff.h **** 	#ifndef SDCC
  67:/home/pong/FPGALink/makestuff/common/makestuff.h **** 		typedef unsigned long long uint64;
  68:/home/pong/FPGALink/makestuff/common/makestuff.h **** 	#endif
  69:/home/pong/FPGALink/makestuff/common/makestuff.h **** #endif
  70:/home/pong/FPGALink/makestuff/common/makestuff.h **** 
  71:/home/pong/FPGALink/makestuff/common/makestuff.h **** typedef signed char        int8;
  72:/home/pong/FPGALink/makestuff/common/makestuff.h **** typedef signed short       int16;
  73:/home/pong/FPGALink/makestuff/common/makestuff.h **** 
  74:/home/pong/FPGALink/makestuff/common/makestuff.h **** #if (defined __AVR__ && defined __GNUC__) || defined SDCC
  75:/home/pong/FPGALink/makestuff/common/makestuff.h **** 	// The embedded platforms have sizeof(int) = 2, so use long
  76:/home/pong/FPGALink/makestuff/common/makestuff.h **** 	typedef signed long    int32;
  77:/home/pong/FPGALink/makestuff/common/makestuff.h **** 	typedef unsigned long  uint32;
  78:/home/pong/FPGALink/makestuff/common/makestuff.h **** #else
  79:/home/pong/FPGALink/makestuff/common/makestuff.h **** 	// The i686 & x86_64 have sizeof(int) = 4
  80:/home/pong/FPGALink/makestuff/common/makestuff.h **** 	typedef signed int     int32;
  81:/home/pong/FPGALink/makestuff/common/makestuff.h **** 	typedef unsigned int   uint32;
  82:/home/pong/FPGALink/makestuff/common/makestuff.h **** #endif
  83:/home/pong/FPGALink/makestuff/common/makestuff.h **** 
  84:/home/pong/FPGALink/makestuff/common/makestuff.h **** #ifndef __cplusplus
  85:/home/pong/FPGALink/makestuff/common/makestuff.h **** 	#ifndef SDCC
  86:/home/pong/FPGALink/makestuff/common/makestuff.h **** 		typedef signed long long int64;
  87:/home/pong/FPGALink/makestuff/common/makestuff.h **** 	#endif
  88:/home/pong/FPGALink/makestuff/common/makestuff.h **** #endif
  89:/home/pong/FPGALink/makestuff/common/makestuff.h **** 
  90:/home/pong/FPGALink/makestuff/common/makestuff.h **** typedef unsigned int       bitfield;
  91:/home/pong/FPGALink/makestuff/common/makestuff.h **** 
  92:/home/pong/FPGALink/makestuff/common/makestuff.h **** #if defined __GNUC__
  93:/home/pong/FPGALink/makestuff/common/makestuff.h **** 	#define swap32(x) __builtin_bswap32(x)
  94:/home/pong/FPGALink/makestuff/common/makestuff.h **** #elif defined WIN32
  95:/home/pong/FPGALink/makestuff/common/makestuff.h **** 	#ifdef __cplusplus
  96:/home/pong/FPGALink/makestuff/common/makestuff.h **** 		extern "C"
  97:/home/pong/FPGALink/makestuff/common/makestuff.h **** 	#endif
  98:/home/pong/FPGALink/makestuff/common/makestuff.h **** 	unsigned long  __cdecl _byteswap_ulong(unsigned long);
  99:/home/pong/FPGALink/makestuff/common/makestuff.h **** 	#define swap32(x) _byteswap_ulong(x)
 100:/home/pong/FPGALink/makestuff/common/makestuff.h **** 	#ifndef __cplusplus
 101:/home/pong/FPGALink/makestuff/common/makestuff.h **** 		#define inline __inline
 102:/home/pong/FPGALink/makestuff/common/makestuff.h **** 	#endif
 103:/home/pong/FPGALink/makestuff/common/makestuff.h **** #endif
 104:/home/pong/FPGALink/makestuff/common/makestuff.h **** #define swap16(x) ((uint16)((((x) & 0x00FF) << 8) | (((x) >> 8) & 0x00FF)))
 105:/home/pong/FPGALink/makestuff/common/makestuff.h **** 
 106:/home/pong/FPGALink/makestuff/common/makestuff.h **** // The C standard requires this two-level indirection thing
 107:/home/pong/FPGALink/makestuff/common/makestuff.h **** #undef CONCAT
 108:/home/pong/FPGALink/makestuff/common/makestuff.h **** #define CONCAT_INTERNAL(x, y) x ## y
 109:/home/pong/FPGALink/makestuff/common/makestuff.h **** #define CONCAT(x, y) CONCAT_INTERNAL(x, y)
 110:/home/pong/FPGALink/makestuff/common/makestuff.h **** 
 111:/home/pong/FPGALink/makestuff/common/makestuff.h **** #define STR_INTERNAL(x) #x
 112:/home/pong/FPGALink/makestuff/common/makestuff.h **** #define STR(x) STR_INTERNAL(x)
 113:/home/pong/FPGALink/makestuff/common/makestuff.h **** 
 114:/home/pong/FPGALink/makestuff/common/makestuff.h **** // The VA_NARGS() macro - count the number of arguments in a C99 variadic macro
 115:/home/pong/FPGALink/makestuff/common/makestuff.h **** #define VA_EXPAND(x) x
 116:/home/pong/FPGALink/makestuff/common/makestuff.h **** #define VA_NARGS(...) VA_EXPAND(VA_NARGS_INTERNAL(__VA_ARGS__, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
 117:/home/pong/FPGALink/makestuff/common/makestuff.h **** #define VA_NARGS_INTERNAL(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y
 118:/home/pong/FPGALink/makestuff/common/makestuff.h **** #define FAIL(code, label) { retVal = code; goto label; }
 119:/home/pong/FPGALink/makestuff/common/makestuff.h **** 
 120:/home/pong/FPGALink/makestuff/common/makestuff.h **** // The CHECK_STATUS() macro - if condition is true, set a returnCode and jump to a label (exit,
 121:/home/pong/FPGALink/makestuff/common/makestuff.h **** // cleanup etc). If liberror is included you can also give an error message.
 122:/home/pong/FPGALink/makestuff/common/makestuff.h **** #define CHECK_INTERNAL3(condition, code, label) if ( condition ) { FAIL(code, label); }
 123:/home/pong/FPGALink/makestuff/common/makestuff.h **** #define CHECK_INTERNAL4(condition, code, label, prefix) LIBERROR_IS_REQUIRED
 124:/home/pong/FPGALink/makestuff/common/makestuff.h **** #define CHECK_INTERNAL5(condition, code, label, ...) LIBERROR_IS_REQUIRED
 125:/home/pong/FPGALink/makestuff/common/makestuff.h **** #define CHECK_STATUS(...) VA_EXPAND(CONCAT(CHECK_INTERNAL, VA_NARGS(__VA_ARGS__))(__VA_ARGS__))
 126:/home/pong/FPGALink/makestuff/common/makestuff.h **** 
 127:/home/pong/FPGALink/makestuff/common/makestuff.h **** #ifdef BYTE_ORDER
 128:/home/pong/FPGALink/makestuff/common/makestuff.h **** 	#if BYTE_ORDER == 1234
 129:/home/pong/FPGALink/makestuff/common/makestuff.h **** 		// Little-endian machines
 130:/home/pong/FPGALink/makestuff/common/makestuff.h **** 		static inline uint16 bigEndian16(uint16 x) {
 131:/home/pong/FPGALink/makestuff/common/makestuff.h **** 			return swap16(x);
 132:/home/pong/FPGALink/makestuff/common/makestuff.h **** 		}
 133:/home/pong/FPGALink/makestuff/common/makestuff.h **** 		static inline uint32 bigEndian32(uint32 x) {
 134:/home/pong/FPGALink/makestuff/common/makestuff.h **** 			return swap32(x);
 135:/home/pong/FPGALink/makestuff/common/makestuff.h **** 		}
 136:/home/pong/FPGALink/makestuff/common/makestuff.h **** 		static inline uint16 littleEndian16(uint16 x) {
 137:/home/pong/FPGALink/makestuff/common/makestuff.h **** 			return x;
 138:/home/pong/FPGALink/makestuff/common/makestuff.h **** 		}
 139:/home/pong/FPGALink/makestuff/common/makestuff.h **** 		static inline uint32 littleEndian32(uint32 x) {
   9              		.loc 1 139 49
  10              		.cfi_startproc
  11 0000 55       		pushq	%rbp
  12              		.cfi_def_cfa_offset 16
  13              		.cfi_offset 6, -16
  14 0001 4889E5   		movq	%rsp, %rbp
  15              		.cfi_def_cfa_register 6
  16 0004 897DFC   		movl	%edi, -4(%rbp)
 140:/home/pong/FPGALink/makestuff/common/makestuff.h **** 			return x;
  17              		.loc 1 140 11
  18 0007 8B45FC   		movl	-4(%rbp), %eax
 141:/home/pong/FPGALink/makestuff/common/makestuff.h **** 		}
  19              		.loc 1 141 3
  20 000a 5D       		popq	%rbp
  21              		.cfi_def_cfa 7, 8
  22 000b C3       		ret
  23              		.cfi_endproc
  24              	.LFE3:
  26              		.section	.rodata
  27              	.LC0:
  28 0000 62656769 		.string	"beginShift()"
  28      6E536869 
  28      66742829 
  28      00
  29              		.text
  31              	beginShift:
  32              	.LFB4:
  33              		.file 2 "prog.c"
   1:prog.c        **** /*
   2:prog.c        ****  * Copyright (C) 2009-2012 Chris McClelland
   3:prog.c        ****  *
   4:prog.c        ****  * This program is free software: you can redistribute it and/or modify
   5:prog.c        ****  * it under the terms of the GNU Lesser General Public License as published by
   6:prog.c        ****  * the Free Software Foundation, either version 3 of the License, or
   7:prog.c        ****  * (at your option) any later version.
   8:prog.c        ****  *
   9:prog.c        ****  * This program is distributed in the hope that it will be useful,
  10:prog.c        ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:prog.c        ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:prog.c        ****  * GNU Lesser General Public License for more details.
  13:prog.c        ****  *
  14:prog.c        ****  * You should have received a copy of the GNU Lesser General Public License
  15:prog.c        ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:prog.c        ****  */
  17:prog.c        **** #include <stdlib.h>
  18:prog.c        **** #include <string.h>
  19:prog.c        **** #include <makestuff.h>
  20:prog.c        **** #include <libusbwrap.h>
  21:prog.c        **** #include <liberror.h>
  22:prog.c        **** #include "libfpgalink.h"
  23:prog.c        **** #include "private.h"
  24:prog.c        **** #include "csvfplay.h"
  25:prog.c        **** #include "vendorCommands.h"
  26:prog.c        **** 
  27:prog.c        **** // ------------------------------------------------------------------------------------------------
  28:prog.c        **** // Implementation of private functions
  29:prog.c        **** // ------------------------------------------------------------------------------------------------
  30:prog.c        **** 
  31:prog.c        **** // Kick off a shift operation on the micro. This will typically be followed by a bunch of sends and
  32:prog.c        **** // receives on EP1OUT & EP1IN. This operation specifies the operation (i.e one of four JTAG shift
  33:prog.c        **** // operations, parallel shift or serial shift. It also specifies a count, which is either a bit-
  34:prog.c        **** // count or a byte-count depending on the context.
  35:prog.c        **** //
  36:prog.c        **** // Called by:
  37:prog.c        **** //   jtagShiftInOut() -> beginShift()
  38:prog.c        **** //   flProgram() -> xProgram() -> fileWrite() -> dataWrite() -> beginShift()
  39:prog.c        **** //
  40:prog.c        **** static FLStatus beginShift(
  41:prog.c        **** 	struct FLContext *handle, uint32 count, ProgOp progOp, uint8 mode, const char **error)
  42:prog.c        **** {
  34              		.loc 2 42 1
  35              		.cfi_startproc
  36 000c F30F1EFA 		endbr64
  37 0010 55       		pushq	%rbp
  38              		.cfi_def_cfa_offset 16
  39              		.cfi_offset 6, -16
  40 0011 4889E5   		movq	%rsp, %rbp
  41              		.cfi_def_cfa_register 6
  42 0014 4883EC40 		subq	$64, %rsp
  43 0018 48897DD8 		movq	%rdi, -40(%rbp)
  44 001c 8975D4   		movl	%esi, -44(%rbp)
  45 001f 8955D0   		movl	%edx, -48(%rbp)
  46 0022 89C8     		movl	%ecx, %eax
  47 0024 4C8945C0 		movq	%r8, -64(%rbp)
  48 0028 8845CC   		movb	%al, -52(%rbp)
  49              		.loc 2 42 1
  50 002b 64488B04 		movq	%fs:40, %rax
  50      25280000 
  50      00
  51 0034 488945F8 		movq	%rax, -8(%rbp)
  52 0038 31C0     		xorl	%eax, %eax
  43:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
  53              		.loc 2 43 11
  54 003a C745EC00 		movl	$0, -20(%rbp)
  54      000000
  44:prog.c        **** 	USBStatus uStatus;
  45:prog.c        **** 	union {
  46:prog.c        **** 		uint32 u32;
  47:prog.c        **** 		uint8 bytes[4];
  48:prog.c        **** 	} countUnion;
  49:prog.c        **** 	countUnion.u32 = littleEndian32(count);
  55              		.loc 2 49 19
  56 0041 8B45D4   		movl	-44(%rbp), %eax
  57 0044 89C7     		movl	%eax, %edi
  58 0046 E8B5FFFF 		call	littleEndian32
  58      FF
  59              		.loc 2 49 17
  60 004b 8945F4   		movl	%eax, -12(%rbp)
  50:prog.c        **** 	uStatus = usbControlWrite(
  51:prog.c        **** 		handle->device,
  52:prog.c        **** 		CMD_PROG_CLOCK_DATA,  // bRequest
  53:prog.c        **** 		(uint8)mode,          // wValue
  54:prog.c        **** 		(uint8)progOp,        // wIndex
  61              		.loc 2 54 3
  62 004e 8B45D0   		movl	-48(%rbp), %eax
  50:prog.c        **** 	uStatus = usbControlWrite(
  63              		.loc 2 50 12
  64 0051 0FB6C8   		movzbl	%al, %ecx
  65 0054 0FB655CC 		movzbl	-52(%rbp), %edx
  66 0058 488B45D8 		movq	-40(%rbp), %rax
  67 005c 488B00   		movq	(%rax), %rax
  68 005f 488D75F4 		leaq	-12(%rbp), %rsi
  69 0063 FF75C0   		pushq	-64(%rbp)
  70 0066 68881300 		pushq	$5000
  70      00
  71 006b 41B90400 		movl	$4, %r9d
  71      0000
  72 0071 4989F0   		movq	%rsi, %r8
  73 0074 BE810000 		movl	$129, %esi
  73      00
  74 0079 4889C7   		movq	%rax, %rdi
  75 007c E8000000 		call	usbControlWrite@PLT
  75      00
  76 0081 4883C410 		addq	$16, %rsp
  77 0085 8945F0   		movl	%eax, -16(%rbp)
  55:prog.c        **** 		countUnion.bytes,     // send count
  56:prog.c        **** 		4,                    // wLength
  57:prog.c        **** 		5000,                 // timeout (ms)
  58:prog.c        **** 		error
  59:prog.c        **** 	);
  60:prog.c        **** 	CHECK_STATUS(uStatus, FL_PROG_SHIFT, cleanup, "beginShift()");
  78              		.loc 2 60 2
  79 0088 837DF000 		cmpl	$0, -16(%rbp)
  80 008c 741F     		je	.L7
  81              		.loc 2 60 2 is_stmt 0 discriminator 1
  82 008e 488B45C0 		movq	-64(%rbp), %rax
  83 0092 488D1500 		leaq	.LC0(%rip), %rdx
  83      000000
  84 0099 4889D6   		movq	%rdx, %rsi
  85 009c 4889C7   		movq	%rax, %rdi
  86 009f E8000000 		call	errPrefix@PLT
  86      00
  87 00a4 C745EC0F 		movl	$15, -20(%rbp)
  87      000000
  88 00ab EB01     		jmp	.L4
  89              	.L7:
  61:prog.c        **** cleanup:
  90              		.loc 2 61 1 is_stmt 1
  91 00ad 90       		nop
  92              	.L4:
  62:prog.c        **** 	return retVal;
  93              		.loc 2 62 9
  94 00ae 8B45EC   		movl	-20(%rbp), %eax
  63:prog.c        **** }
  95              		.loc 2 63 1
  96 00b1 488B55F8 		movq	-8(%rbp), %rdx
  97 00b5 64482B14 		subq	%fs:40, %rdx
  97      25280000 
  97      00
  98 00be 7405     		je	.L6
  99 00c0 E8000000 		call	__stack_chk_fail@PLT
  99      00
 100              	.L6:
 101 00c5 C9       		leave
 102              		.cfi_def_cfa 7, 8
 103 00c6 C3       		ret
 104              		.cfi_endproc
 105              	.LFE4:
 107              		.section	.rodata
 108              	.LC1:
 109 000d 646F5365 		.string	"doSend()"
 109      6E642829 
 109      00
 110              		.text
 112              	doSend:
 113              	.LFB5:
  64:prog.c        **** 
  65:prog.c        **** // Send a chunk of data to the micro on EP1OUT. The previous call to beginShift() specifies what th
  66:prog.c        **** // micro should actually do with the data.
  67:prog.c        **** //
  68:prog.c        **** // Called by:
  69:prog.c        **** //   jtagShiftInOut() -> doSend()
  70:prog.c        **** //   flProgram() -> xProgram() -> fileWrite() -> dataWrite() -> doSend()
  71:prog.c        **** //
  72:prog.c        **** static FLStatus doSend(
  73:prog.c        **** 	struct FLContext *handle, const uint8 *sendPtr, uint16 chunkSize, const char **error)
  74:prog.c        **** {
 114              		.loc 2 74 1
 115              		.cfi_startproc
 116 00c7 F30F1EFA 		endbr64
 117 00cb 55       		pushq	%rbp
 118              		.cfi_def_cfa_offset 16
 119              		.cfi_offset 6, -16
 120 00cc 4889E5   		movq	%rsp, %rbp
 121              		.cfi_def_cfa_register 6
 122 00cf 4883EC30 		subq	$48, %rsp
 123 00d3 48897DE8 		movq	%rdi, -24(%rbp)
 124 00d7 488975E0 		movq	%rsi, -32(%rbp)
 125 00db 89D0     		movl	%edx, %eax
 126 00dd 48894DD0 		movq	%rcx, -48(%rbp)
 127 00e1 668945DC 		movw	%ax, -36(%rbp)
  75:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
 128              		.loc 2 75 11
 129 00e5 C745F800 		movl	$0, -8(%rbp)
 129      000000
  76:prog.c        **** 	USBStatus uStatus = usbBulkWrite(
 130              		.loc 2 76 22
 131 00ec 0FB74DDC 		movzwl	-36(%rbp), %ecx
  77:prog.c        **** 		handle->device,
  78:prog.c        **** 		handle->progOutEP,    // write to out endpoint
 132              		.loc 2 78 9
 133 00f0 488B45E8 		movq	-24(%rbp), %rax
 134 00f4 0FB64015 		movzbl	21(%rax), %eax
  76:prog.c        **** 	USBStatus uStatus = usbBulkWrite(
 135              		.loc 2 76 22
 136 00f8 0FB6F0   		movzbl	%al, %esi
 137 00fb 488B45E8 		movq	-24(%rbp), %rax
 138 00ff 488B00   		movq	(%rax), %rax
 139 0102 488B7DD0 		movq	-48(%rbp), %rdi
 140 0106 488B55E0 		movq	-32(%rbp), %rdx
 141 010a 4989F9   		movq	%rdi, %r9
 142 010d 41B88813 		movl	$5000, %r8d
 142      0000
 143 0113 4889C7   		movq	%rax, %rdi
 144 0116 E8000000 		call	usbBulkWrite@PLT
 144      00
 145 011b 8945FC   		movl	%eax, -4(%rbp)
  79:prog.c        **** 		sendPtr,              // write from send buffer
  80:prog.c        **** 		chunkSize,            // write this many bytes
  81:prog.c        **** 		5000,                 // timeout in milliseconds
  82:prog.c        **** 		error
  83:prog.c        **** 	);
  84:prog.c        **** 	CHECK_STATUS(uStatus, FL_PROG_SEND, cleanup, "doSend()");
 146              		.loc 2 84 2
 147 011e 837DFC00 		cmpl	$0, -4(%rbp)
 148 0122 741F     		je	.L11
 149              		.loc 2 84 2 is_stmt 0 discriminator 1
 150 0124 488B45D0 		movq	-48(%rbp), %rax
 151 0128 488D1500 		leaq	.LC1(%rip), %rdx
 151      000000
 152 012f 4889D6   		movq	%rdx, %rsi
 153 0132 4889C7   		movq	%rax, %rdi
 154 0135 E8000000 		call	errPrefix@PLT
 154      00
 155 013a C745F80D 		movl	$13, -8(%rbp)
 155      000000
 156 0141 EB01     		jmp	.L9
 157              	.L11:
  85:prog.c        **** cleanup:
 158              		.loc 2 85 1 is_stmt 1
 159 0143 90       		nop
 160              	.L9:
  86:prog.c        **** 	return retVal;
 161              		.loc 2 86 9
 162 0144 8B45F8   		movl	-8(%rbp), %eax
  87:prog.c        **** }
 163              		.loc 2 87 1
 164 0147 C9       		leave
 165              		.cfi_def_cfa 7, 8
 166 0148 C3       		ret
 167              		.cfi_endproc
 168              	.LFE5:
 170              		.section	.rodata
 171              	.LC2:
 172 0016 646F5265 		.string	"doReceive()"
 172      63656976 
 172      65282900 
 173              		.text
 175              	doReceive:
 176              	.LFB6:
  88:prog.c        **** 
  89:prog.c        **** // Receive a chunk of data from the micro on EP1IN. The previous call to beginShift() specifies the
  90:prog.c        **** // source of the data.
  91:prog.c        **** //
  92:prog.c        **** // Called by:
  93:prog.c        **** //   jtagShiftInOut() -> doReceive()
  94:prog.c        **** //
  95:prog.c        **** static FLStatus doReceive(
  96:prog.c        **** 	struct FLContext *handle, uint8 *receivePtr, uint16 chunkSize, const char **error)
  97:prog.c        **** {
 177              		.loc 2 97 1
 178              		.cfi_startproc
 179 0149 F30F1EFA 		endbr64
 180 014d 55       		pushq	%rbp
 181              		.cfi_def_cfa_offset 16
 182              		.cfi_offset 6, -16
 183 014e 4889E5   		movq	%rsp, %rbp
 184              		.cfi_def_cfa_register 6
 185 0151 4883EC30 		subq	$48, %rsp
 186 0155 48897DE8 		movq	%rdi, -24(%rbp)
 187 0159 488975E0 		movq	%rsi, -32(%rbp)
 188 015d 89D0     		movl	%edx, %eax
 189 015f 48894DD0 		movq	%rcx, -48(%rbp)
 190 0163 668945DC 		movw	%ax, -36(%rbp)
  98:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
 191              		.loc 2 98 11
 192 0167 C745F800 		movl	$0, -8(%rbp)
 192      000000
  99:prog.c        **** 	USBStatus uStatus = usbBulkRead(
 193              		.loc 2 99 22
 194 016e 0FB74DDC 		movzwl	-36(%rbp), %ecx
 100:prog.c        **** 		handle->device,
 101:prog.c        **** 		handle->progInEP,    // read from in endpoint
 195              		.loc 2 101 9
 196 0172 488B45E8 		movq	-24(%rbp), %rax
 197 0176 0FB64016 		movzbl	22(%rax), %eax
  99:prog.c        **** 	USBStatus uStatus = usbBulkRead(
 198              		.loc 2 99 22
 199 017a 0FB6F0   		movzbl	%al, %esi
 200 017d 488B45E8 		movq	-24(%rbp), %rax
 201 0181 488B00   		movq	(%rax), %rax
 202 0184 488B7DD0 		movq	-48(%rbp), %rdi
 203 0188 488B55E0 		movq	-32(%rbp), %rdx
 204 018c 4989F9   		movq	%rdi, %r9
 205 018f 41B88813 		movl	$5000, %r8d
 205      0000
 206 0195 4889C7   		movq	%rax, %rdi
 207 0198 E8000000 		call	usbBulkRead@PLT
 207      00
 208 019d 8945FC   		movl	%eax, -4(%rbp)
 102:prog.c        **** 		receivePtr,          // read into the receive buffer
 103:prog.c        **** 		chunkSize,           // read this many bytes
 104:prog.c        **** 		5000,                // timeout in milliseconds
 105:prog.c        **** 		error
 106:prog.c        **** 	);
 107:prog.c        **** 	CHECK_STATUS(uStatus, FL_PROG_RECV, cleanup, "doReceive()");
 209              		.loc 2 107 2
 210 01a0 837DFC00 		cmpl	$0, -4(%rbp)
 211 01a4 741F     		je	.L15
 212              		.loc 2 107 2 is_stmt 0 discriminator 1
 213 01a6 488B45D0 		movq	-48(%rbp), %rax
 214 01aa 488D1500 		leaq	.LC2(%rip), %rdx
 214      000000
 215 01b1 4889D6   		movq	%rdx, %rsi
 216 01b4 4889C7   		movq	%rax, %rdi
 217 01b7 E8000000 		call	errPrefix@PLT
 217      00
 218 01bc C745F80E 		movl	$14, -8(%rbp)
 218      000000
 219 01c3 EB01     		jmp	.L13
 220              	.L15:
 108:prog.c        **** cleanup:
 221              		.loc 2 108 1 is_stmt 1
 222 01c5 90       		nop
 223              	.L13:
 109:prog.c        **** 	return retVal;
 224              		.loc 2 109 9
 225 01c6 8B45F8   		movl	-8(%rbp), %eax
 110:prog.c        **** }
 226              		.loc 2 110 1
 227 01c9 C9       		leave
 228              		.cfi_def_cfa 7, 8
 229 01ca C3       		ret
 230              		.cfi_endproc
 231              	.LFE6:
 233              		.section	.rodata
 234 0022 00000000 		.align 8
 234      0000
 235              	.LC3:
 236 0028 20202020 		.string	"                                                                                         
 236      20202020 
 236      20202020 
 236      20202020 
 236      20202020 
 237              		.text
 239              	spaces:
 240              	.LFB7:
 111:prog.c        **** 
 112:prog.c        **** static const char *spaces(ptrdiff_t n) {
 241              		.loc 2 112 40
 242              		.cfi_startproc
 243 01cb F30F1EFA 		endbr64
 244 01cf 55       		pushq	%rbp
 245              		.cfi_def_cfa_offset 16
 246              		.cfi_offset 6, -16
 247 01d0 4889E5   		movq	%rsp, %rbp
 248              		.cfi_def_cfa_register 6
 249 01d3 48897DE8 		movq	%rdi, -24(%rbp)
 113:prog.c        **** 	const char *const s =
 250              		.loc 2 113 20
 251 01d7 488D0500 		leaq	.LC3(%rip), %rax
 251      000000
 252 01de 488945F8 		movq	%rax, -8(%rbp)
 114:prog.c        **** 		"                                                                "
 115:prog.c        **** 		"                                                                "
 116:prog.c        **** 		"                                                                "
 117:prog.c        **** 		"                                                                ";
 118:prog.c        **** 	return s + 256-n;
 253              		.loc 2 118 16
 254 01e2 488B45E8 		movq	-24(%rbp), %rax
 255 01e6 BA000100 		movl	$256, %edx
 255      00
 256 01eb 4829C2   		subq	%rax, %rdx
 257 01ee 488B45F8 		movq	-8(%rbp), %rax
 258 01f2 4801D0   		addq	%rdx, %rax
 119:prog.c        **** }
 259              		.loc 2 119 1
 260 01f5 5D       		popq	%rbp
 261              		.cfi_def_cfa 7, 8
 262 01f6 C3       		ret
 263              		.cfi_endproc
 264              	.LFE7:
 266              		.section	.rodata
 267 0129 00000000 		.align 8
 267      000000
 268              	.LC4:
 269 0130 706F7075 		.string	"populateMap(): Unexpected end of config string:\n  %s\n  %s^"
 269      6C617465 
 269      4D617028 
 269      293A2055 
 269      6E657870 
 270 016b 00000000 		.align 8
 270      00
 271              	.LC5:
 272 0170 706F7075 		.string	"populateMap(): Port is not valid (try 'A', 'B', 'C', etc):\n  %s\n  %s^"
 272      6C617465 
 272      4D617028 
 272      293A2050 
 272      6F727420 
 273 01b6 0000     		.align 8
 274              	.LC6:
 275 01b8 706F7075 		.string	"populateMap(): Bit number is not valid:\n  %s\n  %s^"
 275      6C617465 
 275      4D617028 
 275      293A2042 
 275      6974206E 
 276 01eb 00000000 		.align 8
 276      00
 277              	.LC7:
 278 01f0 706F7075 		.string	"populateMap(): port '%c%d' is already used:\n  %s\n  %s^"
 278      6C617465 
 278      4D617028 
 278      293A2070 
 278      6F727420 
 279 0227 00       		.align 8
 280              	.LC8:
 281 0228 706F7075 		.string	"populateMap(): Expecting '+', '-' or '?' at char %d"
 281      6C617465 
 281      4D617028 
 281      293A2045 
 281      78706563 
 282              		.text
 284              	populateMap:
 285              	.LFB8:
 120:prog.c        **** 
 121:prog.c        **** #define GET_CHAR(func) \
 122:prog.c        **** 	ch = *ptr; \
 123:prog.c        **** 	CHECK_STATUS( \
 124:prog.c        **** 		ch == '\0', FL_CONF_FORMAT, cleanup, \
 125:prog.c        **** 		func"(): Unexpected end of config string:\n  %s\n  %s^", portConfig, spaces(ptr-portConfig))
 126:prog.c        **** 
 127:prog.c        **** #define EXPECT_CHAR(ex, func) \
 128:prog.c        **** 	GET_CHAR(func) \
 129:prog.c        **** 	CHECK_STATUS( \
 130:prog.c        **** 		ch != ex, FL_CONF_FORMAT, cleanup, \
 131:prog.c        **** 		func"(): Expecting "#ex":\n  %s\n  %s^", portConfig, spaces(ptr-portConfig)); \
 132:prog.c        **** 	ptr++
 133:prog.c        **** 
 134:prog.c        **** #define GET_PORT(port, func) \
 135:prog.c        **** 	GET_CHAR(func) \
 136:prog.c        **** 	CHECK_STATUS( \
 137:prog.c        **** 		ch < 'A' || ch > 'Z', FL_CONF_FORMAT, cleanup, \
 138:prog.c        **** 		func"(): Port is not valid (try 'A', 'B', 'C', etc):\n  %s\n  %s^", portConfig, spaces(ptr-portCo
 139:prog.c        **** 	port = (uint8)(ch - 'A'); \
 140:prog.c        **** 	ptr++
 141:prog.c        **** 
 142:prog.c        **** #define GET_BIT(bit, func) \
 143:prog.c        **** 	GET_CHAR(func) \
 144:prog.c        **** 	CHECK_STATUS( \
 145:prog.c        **** 		ch < '0' || ch > '9', FL_CONF_FORMAT, cleanup, \
 146:prog.c        **** 		func"(): Bit number is not valid:\n  %s\n  %s^", portConfig, spaces(ptr-portConfig)); \
 147:prog.c        **** 	bit = (uint8)(strtoul(ptr, (char**)&ptr, 10));
 148:prog.c        **** 
 149:prog.c        **** #define GET_DIGIT(bit, func) \
 150:prog.c        **** 	GET_CHAR(func) \
 151:prog.c        **** 	CHECK_STATUS( \
 152:prog.c        **** 		ch < '0' || ch > '7', FL_CONF_FORMAT, cleanup, \
 153:prog.c        **** 		func"(): Bit '%c' is not valid at char %d", ch, ptr-portConfig); \
 154:prog.c        **** 	bit = (uint8)(ch - '0'); \
 155:prog.c        **** 	ptr++
 156:prog.c        **** 
 157:prog.c        **** #define GET_PAIR(port, bit, func) \
 158:prog.c        **** 	GET_PORT(port, func); \
 159:prog.c        **** 	GET_BIT(bit, func)
 160:prog.c        **** 
 161:prog.c        **** #define SET_BIT(port, bit, status, func) \
 162:prog.c        **** 	CHECK_STATUS( \
 163:prog.c        **** 		pinMap[port][bit] != PIN_UNUSED, FL_CONF_FORMAT, cleanup,					\
 164:prog.c        **** 		func"(): port '%c%d' is already used:\n  %s\n  %s^", port+'A', bit, portConfig, spaces(ptr-portCo
 165:prog.c        **** 	pinMap[port][bit] = status
 166:prog.c        **** 
 167:prog.c        **** // This function parses a comma-separated list of ports with a suffix representing the desired stat
 168:prog.c        **** // of the port, e.g "A0+,B5-,D7/" means "PA0 is an output driven high, PB5 is an output driven low,
 169:prog.c        **** // and PD7 is an input". The result is recorded in the pinMap array, which is assumed to be of
 170:prog.c        **** // length 5*8=40. The parse stops when it encounters something other than a comma separator, and th
 171:prog.c        **** // location of that character stored in *endPtr.
 172:prog.c        **** //
 173:prog.c        **** // Called by:
 174:prog.c        **** //   xProgram() -> populateMap()
 175:prog.c        **** //
 176:prog.c        **** static FLStatus populateMap(
 177:prog.c        **** 	const char *portConfig, const char *ptr, const char **endPtr,
 178:prog.c        **** 	PinConfig pinMap[26][32], const char **error)
 179:prog.c        **** {
 286              		.loc 2 179 1
 287              		.cfi_startproc
 288 01f7 F30F1EFA 		endbr64
 289 01fb 55       		pushq	%rbp
 290              		.cfi_def_cfa_offset 16
 291              		.cfi_offset 6, -16
 292 01fc 4889E5   		movq	%rsp, %rbp
 293              		.cfi_def_cfa_register 6
 294 01ff 4883EC40 		subq	$64, %rsp
 295 0203 48897DE8 		movq	%rdi, -24(%rbp)
 296 0207 488975E0 		movq	%rsi, -32(%rbp)
 297 020b 488955D8 		movq	%rdx, -40(%rbp)
 298 020f 48894DD0 		movq	%rcx, -48(%rbp)
 299 0213 4C8945C8 		movq	%r8, -56(%rbp)
 180:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
 300              		.loc 2 180 11
 301 0217 C745FC00 		movl	$0, -4(%rbp)
 301      000000
 302              	.L34:
 181:prog.c        **** 	uint8 thisPort, thisBit;
 182:prog.c        **** 	char ch;
 183:prog.c        **** 	do {
 184:prog.c        **** 		GET_PAIR(thisPort, thisBit, "populateMap");
 303              		.loc 2 184 3
 304 021e 488B45E0 		movq	-32(%rbp), %rax
 305 0222 0FB600   		movzbl	(%rax), %eax
 306 0225 8845F9   		movb	%al, -7(%rbp)
 307 0228 807DF900 		cmpb	$0, -7(%rbp)
 308 022c 753B     		jne	.L19
 309              		.loc 2 184 3 is_stmt 0 discriminator 1
 310 022e 488B45E0 		movq	-32(%rbp), %rax
 311 0232 482B45E8 		subq	-24(%rbp), %rax
 312 0236 4889C7   		movq	%rax, %rdi
 313 0239 E88DFFFF 		call	spaces
 313      FF
 314 023e 4889C1   		movq	%rax, %rcx
 315 0241 488B55E8 		movq	-24(%rbp), %rdx
 316 0245 488B45C8 		movq	-56(%rbp), %rax
 317 0249 488D3500 		leaq	.LC4(%rip), %rsi
 317      000000
 318 0250 4889C7   		movq	%rax, %rdi
 319 0253 B8000000 		movl	$0, %eax
 319      00
 320 0258 E8000000 		call	errRender@PLT
 320      00
 321 025d C745FC0B 		movl	$11, -4(%rbp)
 321      000000
 322 0264 E9A50300 		jmp	.L20
 322      00
 323              	.L19:
 324              		.loc 2 184 3 discriminator 2
 325 0269 807DF940 		cmpb	$64, -7(%rbp)
 326 026d 7E06     		jle	.L21
 327              		.loc 2 184 3 discriminator 4
 328 026f 807DF95A 		cmpb	$90, -7(%rbp)
 329 0273 7E3B     		jle	.L22
 330              	.L21:
 331              		.loc 2 184 3 discriminator 5
 332 0275 488B45E0 		movq	-32(%rbp), %rax
 333 0279 482B45E8 		subq	-24(%rbp), %rax
 334 027d 4889C7   		movq	%rax, %rdi
 335 0280 E846FFFF 		call	spaces
 335      FF
 336 0285 4889C1   		movq	%rax, %rcx
 337 0288 488B55E8 		movq	-24(%rbp), %rdx
 338 028c 488B45C8 		movq	-56(%rbp), %rax
 339 0290 488D3500 		leaq	.LC5(%rip), %rsi
 339      000000
 340 0297 4889C7   		movq	%rax, %rdi
 341 029a B8000000 		movl	$0, %eax
 341      00
 342 029f E8000000 		call	errRender@PLT
 342      00
 343 02a4 C745FC0B 		movl	$11, -4(%rbp)
 343      000000
 344 02ab E95E0300 		jmp	.L20
 344      00
 345              	.L22:
 346              		.loc 2 184 3 discriminator 6
 347 02b0 0FB645F9 		movzbl	-7(%rbp), %eax
 348 02b4 83E841   		subl	$65, %eax
 349 02b7 8845FA   		movb	%al, -6(%rbp)
 350 02ba 488B45E0 		movq	-32(%rbp), %rax
 351 02be 4883C001 		addq	$1, %rax
 352 02c2 488945E0 		movq	%rax, -32(%rbp)
 353 02c6 488B45E0 		movq	-32(%rbp), %rax
 354 02ca 0FB600   		movzbl	(%rax), %eax
 355 02cd 8845F9   		movb	%al, -7(%rbp)
 356 02d0 807DF900 		cmpb	$0, -7(%rbp)
 357 02d4 753B     		jne	.L23
 358              		.loc 2 184 3 discriminator 7
 359 02d6 488B45E0 		movq	-32(%rbp), %rax
 360 02da 482B45E8 		subq	-24(%rbp), %rax
 361 02de 4889C7   		movq	%rax, %rdi
 362 02e1 E8E5FEFF 		call	spaces
 362      FF
 363 02e6 4889C1   		movq	%rax, %rcx
 364 02e9 488B55E8 		movq	-24(%rbp), %rdx
 365 02ed 488B45C8 		movq	-56(%rbp), %rax
 366 02f1 488D3500 		leaq	.LC4(%rip), %rsi
 366      000000
 367 02f8 4889C7   		movq	%rax, %rdi
 368 02fb B8000000 		movl	$0, %eax
 368      00
 369 0300 E8000000 		call	errRender@PLT
 369      00
 370 0305 C745FC0B 		movl	$11, -4(%rbp)
 370      000000
 371 030c E9FD0200 		jmp	.L20
 371      00
 372              	.L23:
 373              		.loc 2 184 3 discriminator 8
 374 0311 807DF92F 		cmpb	$47, -7(%rbp)
 375 0315 7E06     		jle	.L24
 376              		.loc 2 184 3 discriminator 10
 377 0317 807DF939 		cmpb	$57, -7(%rbp)
 378 031b 7E3B     		jle	.L25
 379              	.L24:
 380              		.loc 2 184 3 discriminator 11
 381 031d 488B45E0 		movq	-32(%rbp), %rax
 382 0321 482B45E8 		subq	-24(%rbp), %rax
 383 0325 4889C7   		movq	%rax, %rdi
 384 0328 E89EFEFF 		call	spaces
 384      FF
 385 032d 4889C1   		movq	%rax, %rcx
 386 0330 488B55E8 		movq	-24(%rbp), %rdx
 387 0334 488B45C8 		movq	-56(%rbp), %rax
 388 0338 488D3500 		leaq	.LC6(%rip), %rsi
 388      000000
 389 033f 4889C7   		movq	%rax, %rdi
 390 0342 B8000000 		movl	$0, %eax
 390      00
 391 0347 E8000000 		call	errRender@PLT
 391      00
 392 034c C745FC0B 		movl	$11, -4(%rbp)
 392      000000
 393 0353 E9B60200 		jmp	.L20
 393      00
 394              	.L25:
 395              		.loc 2 184 3 discriminator 12
 396 0358 488B45E0 		movq	-32(%rbp), %rax
 397 035c 488D4DE0 		leaq	-32(%rbp), %rcx
 398 0360 BA0A0000 		movl	$10, %edx
 398      00
 399 0365 4889CE   		movq	%rcx, %rsi
 400 0368 4889C7   		movq	%rax, %rdi
 401 036b E8000000 		call	strtoul@PLT
 401      00
 402 0370 8845FB   		movb	%al, -5(%rbp)
 185:prog.c        **** 		GET_CHAR("populateMap");
 403              		.loc 2 185 3 is_stmt 1 discriminator 12
 404 0373 488B45E0 		movq	-32(%rbp), %rax
 405 0377 0FB600   		movzbl	(%rax), %eax
 406 037a 8845F9   		movb	%al, -7(%rbp)
 407 037d 807DF900 		cmpb	$0, -7(%rbp)
 408 0381 753B     		jne	.L26
 409              		.loc 2 185 3 is_stmt 0 discriminator 1
 410 0383 488B45E0 		movq	-32(%rbp), %rax
 411 0387 482B45E8 		subq	-24(%rbp), %rax
 412 038b 4889C7   		movq	%rax, %rdi
 413 038e E838FEFF 		call	spaces
 413      FF
 414 0393 4889C1   		movq	%rax, %rcx
 415 0396 488B55E8 		movq	-24(%rbp), %rdx
 416 039a 488B45C8 		movq	-56(%rbp), %rax
 417 039e 488D3500 		leaq	.LC4(%rip), %rsi
 417      000000
 418 03a5 4889C7   		movq	%rax, %rdi
 419 03a8 B8000000 		movl	$0, %eax
 419      00
 420 03ad E8000000 		call	errRender@PLT
 420      00
 421 03b2 C745FC0B 		movl	$11, -4(%rbp)
 421      000000
 422 03b9 E9500200 		jmp	.L20
 422      00
 423              	.L26:
 186:prog.c        **** 		if ( ch == '+' ) {
 424              		.loc 2 186 6 is_stmt 1
 425 03be 807DF92B 		cmpb	$43, -7(%rbp)
 426 03c2 0F859700 		jne	.L27
 426      0000
 187:prog.c        **** 			SET_BIT(thisPort, thisBit, PIN_HIGH, "populateMap");
 427              		.loc 2 187 4
 428 03c8 0FB645FA 		movzbl	-6(%rbp), %eax
 429 03cc 48C1E007 		salq	$7, %rax
 430 03d0 4889C2   		movq	%rax, %rdx
 431 03d3 488B45D0 		movq	-48(%rbp), %rax
 432 03d7 4801C2   		addq	%rax, %rdx
 433 03da 0FB645FB 		movzbl	-5(%rbp), %eax
 434 03de 4898     		cltq
 435 03e0 8B0482   		movl	(%rdx,%rax,4), %eax
 436 03e3 85C0     		testl	%eax, %eax
 437 03e5 7454     		je	.L28
 438              		.loc 2 187 4 is_stmt 0 discriminator 1
 439 03e7 488B45E0 		movq	-32(%rbp), %rax
 440 03eb 482B45E8 		subq	-24(%rbp), %rax
 441 03ef 4883E801 		subq	$1, %rax
 442 03f3 4889C7   		movq	%rax, %rdi
 443 03f6 E8D0FDFF 		call	spaces
 443      FF
 444 03fb 4889C1   		movq	%rax, %rcx
 445 03fe 0FB655FB 		movzbl	-5(%rbp), %edx
 446 0402 0FB645FA 		movzbl	-6(%rbp), %eax
 447 0406 8D7041   		leal	65(%rax), %esi
 448 0409 488B7DE8 		movq	-24(%rbp), %rdi
 449 040d 488B45C8 		movq	-56(%rbp), %rax
 450 0411 4989C9   		movq	%rcx, %r9
 451 0414 4989F8   		movq	%rdi, %r8
 452 0417 89D1     		movl	%edx, %ecx
 453 0419 89F2     		movl	%esi, %edx
 454 041b 488D3500 		leaq	.LC7(%rip), %rsi
 454      000000
 455 0422 4889C7   		movq	%rax, %rdi
 456 0425 B8000000 		movl	$0, %eax
 456      00
 457 042a E8000000 		call	errRender@PLT
 457      00
 458 042f C745FC0B 		movl	$11, -4(%rbp)
 458      000000
 459 0436 E9D30100 		jmp	.L20
 459      00
 460              	.L28:
 461              		.loc 2 187 4 discriminator 2
 462 043b 0FB645FA 		movzbl	-6(%rbp), %eax
 463 043f 48C1E007 		salq	$7, %rax
 464 0443 4889C2   		movq	%rax, %rdx
 465 0446 488B45D0 		movq	-48(%rbp), %rax
 466 044a 4801C2   		addq	%rax, %rdx
 467 044d 0FB645FB 		movzbl	-5(%rbp), %eax
 468 0451 4898     		cltq
 469 0453 C7048201 		movl	$1, (%rdx,%rax,4)
 469      000000
 470 045a E96E0100 		jmp	.L29
 470      00
 471              	.L27:
 188:prog.c        **** 		} else if ( ch == '-' ) {
 472              		.loc 2 188 13 is_stmt 1
 473 045f 807DF92D 		cmpb	$45, -7(%rbp)
 474 0463 0F859700 		jne	.L30
 474      0000
 189:prog.c        **** 			SET_BIT(thisPort, thisBit, PIN_LOW, "populateMap");
 475              		.loc 2 189 4
 476 0469 0FB645FA 		movzbl	-6(%rbp), %eax
 477 046d 48C1E007 		salq	$7, %rax
 478 0471 4889C2   		movq	%rax, %rdx
 479 0474 488B45D0 		movq	-48(%rbp), %rax
 480 0478 4801C2   		addq	%rax, %rdx
 481 047b 0FB645FB 		movzbl	-5(%rbp), %eax
 482 047f 4898     		cltq
 483 0481 8B0482   		movl	(%rdx,%rax,4), %eax
 484 0484 85C0     		testl	%eax, %eax
 485 0486 7454     		je	.L31
 486              		.loc 2 189 4 is_stmt 0 discriminator 1
 487 0488 488B45E0 		movq	-32(%rbp), %rax
 488 048c 482B45E8 		subq	-24(%rbp), %rax
 489 0490 4883E801 		subq	$1, %rax
 490 0494 4889C7   		movq	%rax, %rdi
 491 0497 E82FFDFF 		call	spaces
 491      FF
 492 049c 4889C1   		movq	%rax, %rcx
 493 049f 0FB655FB 		movzbl	-5(%rbp), %edx
 494 04a3 0FB645FA 		movzbl	-6(%rbp), %eax
 495 04a7 8D7041   		leal	65(%rax), %esi
 496 04aa 488B7DE8 		movq	-24(%rbp), %rdi
 497 04ae 488B45C8 		movq	-56(%rbp), %rax
 498 04b2 4989C9   		movq	%rcx, %r9
 499 04b5 4989F8   		movq	%rdi, %r8
 500 04b8 89D1     		movl	%edx, %ecx
 501 04ba 89F2     		movl	%esi, %edx
 502 04bc 488D3500 		leaq	.LC7(%rip), %rsi
 502      000000
 503 04c3 4889C7   		movq	%rax, %rdi
 504 04c6 B8000000 		movl	$0, %eax
 504      00
 505 04cb E8000000 		call	errRender@PLT
 505      00
 506 04d0 C745FC0B 		movl	$11, -4(%rbp)
 506      000000
 507 04d7 E9320100 		jmp	.L20
 507      00
 508              	.L31:
 509              		.loc 2 189 4 discriminator 2
 510 04dc 0FB645FA 		movzbl	-6(%rbp), %eax
 511 04e0 48C1E007 		salq	$7, %rax
 512 04e4 4889C2   		movq	%rax, %rdx
 513 04e7 488B45D0 		movq	-48(%rbp), %rax
 514 04eb 4801C2   		addq	%rax, %rdx
 515 04ee 0FB645FB 		movzbl	-5(%rbp), %eax
 516 04f2 4898     		cltq
 517 04f4 C7048202 		movl	$2, (%rdx,%rax,4)
 517      000000
 518 04fb E9CD0000 		jmp	.L29
 518      00
 519              	.L30:
 190:prog.c        **** 		} else if ( ch == '?' ) {
 520              		.loc 2 190 13 is_stmt 1
 521 0500 807DF93F 		cmpb	$63, -7(%rbp)
 522 0504 0F859400 		jne	.L32
 522      0000
 191:prog.c        **** 			SET_BIT(thisPort, thisBit, PIN_INPUT, "populateMap");
 523              		.loc 2 191 4
 524 050a 0FB645FA 		movzbl	-6(%rbp), %eax
 525 050e 48C1E007 		salq	$7, %rax
 526 0512 4889C2   		movq	%rax, %rdx
 527 0515 488B45D0 		movq	-48(%rbp), %rax
 528 0519 4801C2   		addq	%rax, %rdx
 529 051c 0FB645FB 		movzbl	-5(%rbp), %eax
 530 0520 4898     		cltq
 531 0522 8B0482   		movl	(%rdx,%rax,4), %eax
 532 0525 85C0     		testl	%eax, %eax
 533 0527 7454     		je	.L33
 534              		.loc 2 191 4 is_stmt 0 discriminator 1
 535 0529 488B45E0 		movq	-32(%rbp), %rax
 536 052d 482B45E8 		subq	-24(%rbp), %rax
 537 0531 4883E801 		subq	$1, %rax
 538 0535 4889C7   		movq	%rax, %rdi
 539 0538 E88EFCFF 		call	spaces
 539      FF
 540 053d 4889C1   		movq	%rax, %rcx
 541 0540 0FB655FB 		movzbl	-5(%rbp), %edx
 542 0544 0FB645FA 		movzbl	-6(%rbp), %eax
 543 0548 8D7041   		leal	65(%rax), %esi
 544 054b 488B7DE8 		movq	-24(%rbp), %rdi
 545 054f 488B45C8 		movq	-56(%rbp), %rax
 546 0553 4989C9   		movq	%rcx, %r9
 547 0556 4989F8   		movq	%rdi, %r8
 548 0559 89D1     		movl	%edx, %ecx
 549 055b 89F2     		movl	%esi, %edx
 550 055d 488D3500 		leaq	.LC7(%rip), %rsi
 550      000000
 551 0564 4889C7   		movq	%rax, %rdi
 552 0567 B8000000 		movl	$0, %eax
 552      00
 553 056c E8000000 		call	errRender@PLT
 553      00
 554 0571 C745FC0B 		movl	$11, -4(%rbp)
 554      000000
 555 0578 E9910000 		jmp	.L20
 555      00
 556              	.L33:
 557              		.loc 2 191 4 discriminator 2
 558 057d 0FB645FA 		movzbl	-6(%rbp), %eax
 559 0581 48C1E007 		salq	$7, %rax
 560 0585 4889C2   		movq	%rax, %rdx
 561 0588 488B45D0 		movq	-48(%rbp), %rax
 562 058c 4801C2   		addq	%rax, %rdx
 563 058f 0FB645FB 		movzbl	-5(%rbp), %eax
 564 0593 4898     		cltq
 565 0595 C7048203 		movl	$3, (%rdx,%rax,4)
 565      000000
 566 059c EB2F     		jmp	.L29
 567              	.L32:
 192:prog.c        **** 		} else {
 193:prog.c        **** 			CHECK_STATUS(
 568              		.loc 2 193 4 is_stmt 1 discriminator 1
 569 059e 488B45E0 		movq	-32(%rbp), %rax
 570 05a2 482B45E8 		subq	-24(%rbp), %rax
 571 05a6 4889C2   		movq	%rax, %rdx
 572 05a9 488B45C8 		movq	-56(%rbp), %rax
 573 05ad 488D0D00 		leaq	.LC8(%rip), %rcx
 573      000000
 574 05b4 4889CE   		movq	%rcx, %rsi
 575 05b7 4889C7   		movq	%rax, %rdi
 576 05ba B8000000 		movl	$0, %eax
 576      00
 577 05bf E8000000 		call	errRender@PLT
 577      00
 578 05c4 C745FC0B 		movl	$11, -4(%rbp)
 578      000000
 579 05cb EB41     		jmp	.L20
 580              	.L29:
 194:prog.c        **** 				true, FL_CONF_FORMAT, cleanup,
 195:prog.c        **** 				"populateMap(): Expecting '+', '-' or '?' at char %d", ptr-portConfig);
 196:prog.c        **** 		}
 197:prog.c        **** 		ptr++;
 581              		.loc 2 197 6
 582 05cd 488B45E0 		movq	-32(%rbp), %rax
 583 05d1 4883C001 		addq	$1, %rax
 584 05d5 488945E0 		movq	%rax, -32(%rbp)
 198:prog.c        **** 		ch = *ptr++;
 585              		.loc 2 198 12
 586 05d9 488B45E0 		movq	-32(%rbp), %rax
 587 05dd 488D5001 		leaq	1(%rax), %rdx
 588 05e1 488955E0 		movq	%rdx, -32(%rbp)
 589              		.loc 2 198 6
 590 05e5 0FB600   		movzbl	(%rax), %eax
 591 05e8 8845F9   		movb	%al, -7(%rbp)
 199:prog.c        **** 	} while ( ch == ',' );
 592              		.loc 2 199 15
 593 05eb 807DF92C 		cmpb	$44, -7(%rbp)
 594 05ef 0F8429FC 		je	.L34
 594      FFFF
 200:prog.c        **** 	if ( endPtr ) {
 595              		.loc 2 200 5
 596 05f5 48837DD8 		cmpq	$0, -40(%rbp)
 596      00
 597 05fa 7411     		je	.L36
 201:prog.c        **** 		*endPtr = ptr - 1;
 598              		.loc 2 201 17
 599 05fc 488B45E0 		movq	-32(%rbp), %rax
 600 0600 488D50FF 		leaq	-1(%rax), %rdx
 601              		.loc 2 201 11
 602 0604 488B45D8 		movq	-40(%rbp), %rax
 603 0608 488910   		movq	%rdx, (%rax)
 604 060b EB01     		jmp	.L20
 605              	.L36:
 202:prog.c        **** 	}
 203:prog.c        **** cleanup:
 606              		.loc 2 203 1
 607 060d 90       		nop
 608              	.L20:
 204:prog.c        **** 	return retVal;
 609              		.loc 2 204 9
 610 060e 8B45FC   		movl	-4(%rbp), %eax
 205:prog.c        **** }
 611              		.loc 2 205 1
 612 0611 C9       		leave
 613              		.cfi_def_cfa 7, 8
 614 0612 C3       		ret
 615              		.cfi_endproc
 616              	.LFE8:
 618              		.section	.rodata
 619              	.LC9:
 620 025c 706F7274 		.string	"portMap()"
 620      4D617028 
 620      2900
 621              		.text
 623              	portMap:
 624              	.LFB9:
 206:prog.c        **** 
 207:prog.c        **** // This function re-maps the physical port used by the micro for its logical programming ports.
 208:prog.c        **** //
 209:prog.c        **** // Called by:
 210:prog.c        **** //   xProgram() -> portMap()
 211:prog.c        **** //   progOpen() -> portMap()
 212:prog.c        **** //
 213:prog.c        **** static FLStatus portMap(
 214:prog.c        **** 	struct FLContext *handle, LogicalPort patchOp, uint8 port, uint8 bit,
 215:prog.c        **** 	const char **error)
 216:prog.c        **** {
 625              		.loc 2 216 1
 626              		.cfi_startproc
 627 0613 F30F1EFA 		endbr64
 628 0617 55       		pushq	%rbp
 629              		.cfi_def_cfa_offset 16
 630              		.cfi_offset 6, -16
 631 0618 4889E5   		movq	%rsp, %rbp
 632              		.cfi_def_cfa_register 6
 633 061b 4883EC30 		subq	$48, %rsp
 634 061f 48897DE8 		movq	%rdi, -24(%rbp)
 635 0623 8975E4   		movl	%esi, -28(%rbp)
 636 0626 89C8     		movl	%ecx, %eax
 637 0628 4C8945D0 		movq	%r8, -48(%rbp)
 638 062c 8855E0   		movb	%dl, -32(%rbp)
 639 062f 8845DC   		movb	%al, -36(%rbp)
 217:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
 640              		.loc 2 217 11
 641 0632 C745F800 		movl	$0, -8(%rbp)
 641      000000
 218:prog.c        **** 	USBStatus uStatus;
 219:prog.c        **** 	const uint16 index = (uint16)((port << 8) | patchOp);
 642              		.loc 2 219 38
 643 0639 0FB645E0 		movzbl	-32(%rbp), %eax
 644 063d C1E008   		sall	$8, %eax
 645 0640 89C2     		movl	%eax, %edx
 646              		.loc 2 219 23
 647 0642 8B45E4   		movl	-28(%rbp), %eax
 648              		.loc 2 219 15
 649 0645 09D0     		orl	%edx, %eax
 650 0647 668945F4 		movw	%ax, -12(%rbp)
 220:prog.c        **** 	const uint16 value = (uint16)bit;
 651              		.loc 2 220 15
 652 064b 0FB645DC 		movzbl	-36(%rbp), %eax
 653 064f 668945F6 		movw	%ax, -10(%rbp)
 221:prog.c        **** 	uStatus = usbControlWrite(
 654              		.loc 2 221 12
 655 0653 0FB74DF4 		movzwl	-12(%rbp), %ecx
 656 0657 0FB755F6 		movzwl	-10(%rbp), %edx
 657 065b 488B45E8 		movq	-24(%rbp), %rax
 658 065f 488B00   		movq	(%rax), %rax
 659 0662 FF75D0   		pushq	-48(%rbp)
 660 0665 68E80300 		pushq	$1000
 660      00
 661 066a 41B90000 		movl	$0, %r9d
 661      0000
 662 0670 41B80000 		movl	$0, %r8d
 662      0000
 663 0676 BE860000 		movl	$134, %esi
 663      00
 664 067b 4889C7   		movq	%rax, %rdi
 665 067e E8000000 		call	usbControlWrite@PLT
 665      00
 666 0683 4883C410 		addq	$16, %rsp
 667 0687 8945FC   		movl	%eax, -4(%rbp)
 222:prog.c        **** 		handle->device,
 223:prog.c        **** 		CMD_PORT_MAP,  // bRequest
 224:prog.c        **** 		value,         // wValue
 225:prog.c        **** 		index,         // wIndex
 226:prog.c        **** 		NULL,          // no data
 227:prog.c        **** 		0,             // wLength
 228:prog.c        **** 		1000,          // timeout (ms)
 229:prog.c        **** 		error
 230:prog.c        **** 	);
 231:prog.c        **** 	CHECK_STATUS(uStatus, FL_PROG_PORT_MAP, cleanup, "portMap()");
 668              		.loc 2 231 2
 669 068a 837DFC00 		cmpl	$0, -4(%rbp)
 670 068e 741F     		je	.L40
 671              		.loc 2 231 2 is_stmt 0 discriminator 1
 672 0690 488B45D0 		movq	-48(%rbp), %rax
 673 0694 488D1500 		leaq	.LC9(%rip), %rdx
 673      000000
 674 069b 4889D6   		movq	%rdx, %rsi
 675 069e 4889C7   		movq	%rax, %rdi
 676 06a1 E8000000 		call	errPrefix@PLT
 676      00
 677 06a6 C745F80C 		movl	$12, -8(%rbp)
 677      000000
 678 06ad EB01     		jmp	.L38
 679              	.L40:
 232:prog.c        **** cleanup:
 680              		.loc 2 232 1 is_stmt 1
 681 06af 90       		nop
 682              	.L38:
 233:prog.c        **** 	return retVal;
 683              		.loc 2 233 9
 684 06b0 8B45F8   		movl	-8(%rbp), %eax
 234:prog.c        **** }
 685              		.loc 2 234 1
 686 06b3 C9       		leave
 687              		.cfi_def_cfa 7, 8
 688 06b4 C3       		ret
 689              		.cfi_endproc
 690              	.LFE9:
 693              	makeLookup:
 694              	.LFB10:
 235:prog.c        **** 
 236:prog.c        **** // The bits in each byte of a programming file may need to be swapped before sending to the micro;
 237:prog.c        **** // this function makes a translation map for efficient bit-swapping. If bitOrder = {0,1,2,3,4,5,6,7
 238:prog.c        **** // then the resulting translation map does nothing. If bitOrder = {7,6,5,4,3,2,1,0} then the
 239:prog.c        **** // resulting translation map mirrors the bits.
 240:prog.c        **** //
 241:prog.c        **** // Called by:
 242:prog.c        **** //   xProgram() -> makeLookup()
 243:prog.c        **** //
 244:prog.c        **** static void makeLookup(const uint8 bitOrder[8], uint8 lookupTable[256]) {
 695              		.loc 2 244 73
 696              		.cfi_startproc
 697 06b5 F30F1EFA 		endbr64
 698 06b9 55       		pushq	%rbp
 699              		.cfi_def_cfa_offset 16
 700              		.cfi_offset 6, -16
 701 06ba 4889E5   		movq	%rsp, %rbp
 702              		.cfi_def_cfa_register 6
 703 06bd 48897DE8 		movq	%rdi, -24(%rbp)
 704 06c1 488975E0 		movq	%rsi, -32(%rbp)
 245:prog.c        **** 	uint8 thisByte;
 246:prog.c        **** 	uint16 i;
 247:prog.c        **** 	for ( i = 0; i < 256; i++ ) {
 705              		.loc 2 247 10
 706 06c5 66C745FE 		movw	$0, -2(%rbp)
 706      0000
 707              		.loc 2 247 2
 708 06cb E9960100 		jmp	.L42
 708      00
 709              	.L51:
 248:prog.c        **** 		thisByte = 0x00;
 710              		.loc 2 248 12
 711 06d0 C645FD00 		movb	$0, -3(%rbp)
 249:prog.c        **** 		if ( i & 0x80 ) { thisByte = (uint8)(thisByte | (1 << bitOrder[7])); }
 712              		.loc 2 249 10
 713 06d4 0FB745FE 		movzwl	-2(%rbp), %eax
 714 06d8 25800000 		andl	$128, %eax
 714      00
 715              		.loc 2 249 6
 716 06dd 85C0     		testl	%eax, %eax
 717 06df 7424     		je	.L43
 718              		.loc 2 249 65 discriminator 1
 719 06e1 488B45E8 		movq	-24(%rbp), %rax
 720 06e5 4883C007 		addq	$7, %rax
 721 06e9 0FB600   		movzbl	(%rax), %eax
 722 06ec 0FB6C0   		movzbl	%al, %eax
 723              		.loc 2 249 54 discriminator 1
 724 06ef BA010000 		movl	$1, %edx
 724      00
 725 06f4 89C1     		movl	%eax, %ecx
 726 06f6 D3E2     		sall	%cl, %edx
 727 06f8 89D0     		movl	%edx, %eax
 728              		.loc 2 249 49 discriminator 1
 729 06fa 89C2     		movl	%eax, %edx
 730 06fc 0FB645FD 		movzbl	-3(%rbp), %eax
 731 0700 09D0     		orl	%edx, %eax
 732              		.loc 2 249 30 discriminator 1
 733 0702 8845FD   		movb	%al, -3(%rbp)
 734              	.L43:
 250:prog.c        **** 		if ( i & 0x40 ) { thisByte = (uint8)(thisByte | (1 << bitOrder[6])); }
 735              		.loc 2 250 10
 736 0705 0FB745FE 		movzwl	-2(%rbp), %eax
 737 0709 83E040   		andl	$64, %eax
 738              		.loc 2 250 6
 739 070c 85C0     		testl	%eax, %eax
 740 070e 7424     		je	.L44
 741              		.loc 2 250 65 discriminator 1
 742 0710 488B45E8 		movq	-24(%rbp), %rax
 743 0714 4883C006 		addq	$6, %rax
 744 0718 0FB600   		movzbl	(%rax), %eax
 745 071b 0FB6C0   		movzbl	%al, %eax
 746              		.loc 2 250 54 discriminator 1
 747 071e BA010000 		movl	$1, %edx
 747      00
 748 0723 89C1     		movl	%eax, %ecx
 749 0725 D3E2     		sall	%cl, %edx
 750 0727 89D0     		movl	%edx, %eax
 751              		.loc 2 250 49 discriminator 1
 752 0729 89C2     		movl	%eax, %edx
 753 072b 0FB645FD 		movzbl	-3(%rbp), %eax
 754 072f 09D0     		orl	%edx, %eax
 755              		.loc 2 250 30 discriminator 1
 756 0731 8845FD   		movb	%al, -3(%rbp)
 757              	.L44:
 251:prog.c        **** 		if ( i & 0x20 ) { thisByte = (uint8)(thisByte | (1 << bitOrder[5])); }
 758              		.loc 2 251 10
 759 0734 0FB745FE 		movzwl	-2(%rbp), %eax
 760 0738 83E020   		andl	$32, %eax
 761              		.loc 2 251 6
 762 073b 85C0     		testl	%eax, %eax
 763 073d 7424     		je	.L45
 764              		.loc 2 251 65 discriminator 1
 765 073f 488B45E8 		movq	-24(%rbp), %rax
 766 0743 4883C005 		addq	$5, %rax
 767 0747 0FB600   		movzbl	(%rax), %eax
 768 074a 0FB6C0   		movzbl	%al, %eax
 769              		.loc 2 251 54 discriminator 1
 770 074d BA010000 		movl	$1, %edx
 770      00
 771 0752 89C1     		movl	%eax, %ecx
 772 0754 D3E2     		sall	%cl, %edx
 773 0756 89D0     		movl	%edx, %eax
 774              		.loc 2 251 49 discriminator 1
 775 0758 89C2     		movl	%eax, %edx
 776 075a 0FB645FD 		movzbl	-3(%rbp), %eax
 777 075e 09D0     		orl	%edx, %eax
 778              		.loc 2 251 30 discriminator 1
 779 0760 8845FD   		movb	%al, -3(%rbp)
 780              	.L45:
 252:prog.c        **** 		if ( i & 0x10 ) { thisByte = (uint8)(thisByte | (1 << bitOrder[4])); }
 781              		.loc 2 252 10
 782 0763 0FB745FE 		movzwl	-2(%rbp), %eax
 783 0767 83E010   		andl	$16, %eax
 784              		.loc 2 252 6
 785 076a 85C0     		testl	%eax, %eax
 786 076c 7424     		je	.L46
 787              		.loc 2 252 65 discriminator 1
 788 076e 488B45E8 		movq	-24(%rbp), %rax
 789 0772 4883C004 		addq	$4, %rax
 790 0776 0FB600   		movzbl	(%rax), %eax
 791 0779 0FB6C0   		movzbl	%al, %eax
 792              		.loc 2 252 54 discriminator 1
 793 077c BA010000 		movl	$1, %edx
 793      00
 794 0781 89C1     		movl	%eax, %ecx
 795 0783 D3E2     		sall	%cl, %edx
 796 0785 89D0     		movl	%edx, %eax
 797              		.loc 2 252 49 discriminator 1
 798 0787 89C2     		movl	%eax, %edx
 799 0789 0FB645FD 		movzbl	-3(%rbp), %eax
 800 078d 09D0     		orl	%edx, %eax
 801              		.loc 2 252 30 discriminator 1
 802 078f 8845FD   		movb	%al, -3(%rbp)
 803              	.L46:
 253:prog.c        **** 		if ( i & 0x08 ) { thisByte = (uint8)(thisByte | (1 << bitOrder[3])); }
 804              		.loc 2 253 10
 805 0792 0FB745FE 		movzwl	-2(%rbp), %eax
 806 0796 83E008   		andl	$8, %eax
 807              		.loc 2 253 6
 808 0799 85C0     		testl	%eax, %eax
 809 079b 7424     		je	.L47
 810              		.loc 2 253 65 discriminator 1
 811 079d 488B45E8 		movq	-24(%rbp), %rax
 812 07a1 4883C003 		addq	$3, %rax
 813 07a5 0FB600   		movzbl	(%rax), %eax
 814 07a8 0FB6C0   		movzbl	%al, %eax
 815              		.loc 2 253 54 discriminator 1
 816 07ab BA010000 		movl	$1, %edx
 816      00
 817 07b0 89C1     		movl	%eax, %ecx
 818 07b2 D3E2     		sall	%cl, %edx
 819 07b4 89D0     		movl	%edx, %eax
 820              		.loc 2 253 49 discriminator 1
 821 07b6 89C2     		movl	%eax, %edx
 822 07b8 0FB645FD 		movzbl	-3(%rbp), %eax
 823 07bc 09D0     		orl	%edx, %eax
 824              		.loc 2 253 30 discriminator 1
 825 07be 8845FD   		movb	%al, -3(%rbp)
 826              	.L47:
 254:prog.c        **** 		if ( i & 0x04 ) { thisByte = (uint8)(thisByte | (1 << bitOrder[2])); }
 827              		.loc 2 254 10
 828 07c1 0FB745FE 		movzwl	-2(%rbp), %eax
 829 07c5 83E004   		andl	$4, %eax
 830              		.loc 2 254 6
 831 07c8 85C0     		testl	%eax, %eax
 832 07ca 7424     		je	.L48
 833              		.loc 2 254 65 discriminator 1
 834 07cc 488B45E8 		movq	-24(%rbp), %rax
 835 07d0 4883C002 		addq	$2, %rax
 836 07d4 0FB600   		movzbl	(%rax), %eax
 837 07d7 0FB6C0   		movzbl	%al, %eax
 838              		.loc 2 254 54 discriminator 1
 839 07da BA010000 		movl	$1, %edx
 839      00
 840 07df 89C1     		movl	%eax, %ecx
 841 07e1 D3E2     		sall	%cl, %edx
 842 07e3 89D0     		movl	%edx, %eax
 843              		.loc 2 254 49 discriminator 1
 844 07e5 89C2     		movl	%eax, %edx
 845 07e7 0FB645FD 		movzbl	-3(%rbp), %eax
 846 07eb 09D0     		orl	%edx, %eax
 847              		.loc 2 254 30 discriminator 1
 848 07ed 8845FD   		movb	%al, -3(%rbp)
 849              	.L48:
 255:prog.c        **** 		if ( i & 0x02 ) { thisByte = (uint8)(thisByte | (1 << bitOrder[1])); }
 850              		.loc 2 255 10
 851 07f0 0FB745FE 		movzwl	-2(%rbp), %eax
 852 07f4 83E002   		andl	$2, %eax
 853              		.loc 2 255 6
 854 07f7 85C0     		testl	%eax, %eax
 855 07f9 7424     		je	.L49
 856              		.loc 2 255 65 discriminator 1
 857 07fb 488B45E8 		movq	-24(%rbp), %rax
 858 07ff 4883C001 		addq	$1, %rax
 859 0803 0FB600   		movzbl	(%rax), %eax
 860 0806 0FB6C0   		movzbl	%al, %eax
 861              		.loc 2 255 54 discriminator 1
 862 0809 BA010000 		movl	$1, %edx
 862      00
 863 080e 89C1     		movl	%eax, %ecx
 864 0810 D3E2     		sall	%cl, %edx
 865 0812 89D0     		movl	%edx, %eax
 866              		.loc 2 255 49 discriminator 1
 867 0814 89C2     		movl	%eax, %edx
 868 0816 0FB645FD 		movzbl	-3(%rbp), %eax
 869 081a 09D0     		orl	%edx, %eax
 870              		.loc 2 255 30 discriminator 1
 871 081c 8845FD   		movb	%al, -3(%rbp)
 872              	.L49:
 256:prog.c        **** 		if ( i & 0x01 ) { thisByte = (uint8)(thisByte | (1 << bitOrder[0])); }
 873              		.loc 2 256 10
 874 081f 0FB745FE 		movzwl	-2(%rbp), %eax
 875 0823 83E001   		andl	$1, %eax
 876              		.loc 2 256 6
 877 0826 85C0     		testl	%eax, %eax
 878 0828 7420     		je	.L50
 879              		.loc 2 256 65 discriminator 1
 880 082a 488B45E8 		movq	-24(%rbp), %rax
 881 082e 0FB600   		movzbl	(%rax), %eax
 882 0831 0FB6C0   		movzbl	%al, %eax
 883              		.loc 2 256 54 discriminator 1
 884 0834 BA010000 		movl	$1, %edx
 884      00
 885 0839 89C1     		movl	%eax, %ecx
 886 083b D3E2     		sall	%cl, %edx
 887 083d 89D0     		movl	%edx, %eax
 888              		.loc 2 256 49 discriminator 1
 889 083f 89C2     		movl	%eax, %edx
 890 0841 0FB645FD 		movzbl	-3(%rbp), %eax
 891 0845 09D0     		orl	%edx, %eax
 892              		.loc 2 256 30 discriminator 1
 893 0847 8845FD   		movb	%al, -3(%rbp)
 894              	.L50:
 257:prog.c        **** 		lookupTable[i] = thisByte;
 895              		.loc 2 257 14 discriminator 2
 896 084a 0FB755FE 		movzwl	-2(%rbp), %edx
 897 084e 488B45E0 		movq	-32(%rbp), %rax
 898 0852 4801C2   		addq	%rax, %rdx
 899              		.loc 2 257 18 discriminator 2
 900 0855 0FB645FD 		movzbl	-3(%rbp), %eax
 901 0859 8802     		movb	%al, (%rdx)
 247:prog.c        **** 		thisByte = 0x00;
 902              		.loc 2 247 25 discriminator 2
 903 085b 0FB745FE 		movzwl	-2(%rbp), %eax
 904 085f 83C001   		addl	$1, %eax
 905 0862 668945FE 		movw	%ax, -2(%rbp)
 906              	.L42:
 247:prog.c        **** 		thisByte = 0x00;
 907              		.loc 2 247 17 discriminator 1
 908 0866 66817DFE 		cmpw	$255, -2(%rbp)
 908      FF00
 909 086c 0F865EFE 		jbe	.L51
 909      FFFF
 258:prog.c        **** 	}
 259:prog.c        **** }	
 910              		.loc 2 259 1
 911 0872 90       		nop
 912 0873 90       		nop
 913 0874 5D       		popq	%rbp
 914              		.cfi_def_cfa 7, 8
 915 0875 C3       		ret
 916              		.cfi_endproc
 917              	.LFE10:
 919              		.section	.rodata
 920              	.LC10:
 921 0266 64617461 		.string	"dataWrite()"
 921      57726974 
 921      65282900 
 922              		.text
 924              	dataWrite:
 925              	.LFB11:
 260:prog.c        **** 
 261:prog.c        **** // For serial & parallel programming, when the FPGA is ready to accept data, this function sends it
 262:prog.c        **** // one 64-byte block at a time, with a bit-transformation applied to each block.
 263:prog.c        **** //
 264:prog.c        **** // Called by:
 265:prog.c        **** //   xProgram() -> fileWrite() -> dataWrite()
 266:prog.c        **** //   xProgram() -> dataWrite()
 267:prog.c        **** //
 268:prog.c        **** static FLStatus dataWrite(struct FLContext *handle, ProgOp progOp, const uint8 *buf, uint32 len, co
 926              		.loc 2 268 144
 927              		.cfi_startproc
 928 0876 F30F1EFA 		endbr64
 929 087a 55       		pushq	%rbp
 930              		.cfi_def_cfa_offset 16
 931              		.cfi_offset 6, -16
 932 087b 4889E5   		movq	%rsp, %rbp
 933              		.cfi_def_cfa_register 6
 934 087e 4881EC90 		subq	$144, %rsp
 934      000000
 935 0885 48897D98 		movq	%rdi, -104(%rbp)
 936 0889 897594   		movl	%esi, -108(%rbp)
 937 088c 48895588 		movq	%rdx, -120(%rbp)
 938 0890 894D90   		movl	%ecx, -112(%rbp)
 939 0893 4C894580 		movq	%r8, -128(%rbp)
 940 0897 4C898D78 		movq	%r9, -136(%rbp)
 940      FFFFFF
 941              		.loc 2 268 144
 942 089e 64488B04 		movq	%fs:40, %rax
 942      25280000 
 942      00
 943 08a7 488945F8 		movq	%rax, -8(%rbp)
 944 08ab 31C0     		xorl	%eax, %eax
 269:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
 945              		.loc 2 269 11
 946 08ad C745A800 		movl	$0, -88(%rbp)
 946      000000
 270:prog.c        **** 	uint16 chunkSize;
 271:prog.c        **** 	FLStatus fStatus = beginShift(handle, len, progOp, 0x00, error);
 947              		.loc 2 271 21
 948 08b4 488B8D78 		movq	-136(%rbp), %rcx
 948      FFFFFF
 949 08bb 8B5594   		movl	-108(%rbp), %edx
 950 08be 8B7590   		movl	-112(%rbp), %esi
 951 08c1 488B4598 		movq	-104(%rbp), %rax
 952 08c5 4989C8   		movq	%rcx, %r8
 953 08c8 B9000000 		movl	$0, %ecx
 953      00
 954 08cd 4889C7   		movq	%rax, %rdi
 955 08d0 E837F7FF 		call	beginShift
 955      FF
 956 08d5 8945AC   		movl	%eax, -84(%rbp)
 272:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "dataWrite()");
 957              		.loc 2 272 2
 958 08d8 837DAC00 		cmpl	$0, -84(%rbp)
 959 08dc 7424     		je	.L53
 960              		.loc 2 272 2 is_stmt 0 discriminator 1
 961 08de 488B8578 		movq	-136(%rbp), %rax
 961      FFFFFF
 962 08e5 488D1500 		leaq	.LC10(%rip), %rdx
 962      000000
 963 08ec 4889D6   		movq	%rdx, %rsi
 964 08ef 4889C7   		movq	%rax, %rdi
 965 08f2 E8000000 		call	errPrefix@PLT
 965      00
 966 08f7 8B45AC   		movl	-84(%rbp), %eax
 967 08fa 8945A8   		movl	%eax, -88(%rbp)
 968 08fd E9380100 		jmp	.L54
 968      00
 969              	.L53:
 273:prog.c        **** 	if ( lookupTable ) {
 970              		.loc 2 273 5 is_stmt 1
 971 0902 48837D80 		cmpq	$0, -128(%rbp)
 971      00
 972 0907 0F842601 		je	.L63
 972      0000
 973              	.LBB2:
 274:prog.c        **** 		uint8 bitSwap[64];
 275:prog.c        **** 		uint16 i;
 276:prog.c        **** 		while ( len ) {
 974              		.loc 2 276 9
 975 090d E9AD0000 		jmp	.L56
 975      00
 976              	.L62:
 277:prog.c        **** 			chunkSize = (uint16)((len >= 64) ? 64 : len);
 977              		.loc 2 277 16
 978 0912 837D903F 		cmpl	$63, -112(%rbp)
 979 0916 7705     		ja	.L57
 980              		.loc 2 277 16 is_stmt 0 discriminator 1
 981 0918 8B4590   		movl	-112(%rbp), %eax
 982 091b EB05     		jmp	.L58
 983              	.L57:
 984              		.loc 2 277 16 discriminator 2
 985 091d B8400000 		movl	$64, %eax
 985      00
 986              	.L58:
 987              		.loc 2 277 14 is_stmt 1 discriminator 4
 988 0922 668945A6 		movw	%ax, -90(%rbp)
 278:prog.c        **** 			for ( i = 0; i < chunkSize; i++ ) {
 989              		.loc 2 278 12 discriminator 4
 990 0926 66C745A4 		movw	$0, -92(%rbp)
 990      0000
 991              		.loc 2 278 4 discriminator 4
 992 092c EB30     		jmp	.L59
 993              	.L60:
 279:prog.c        **** 				bitSwap[i] = lookupTable[buf[i]];
 994              		.loc 2 279 33 discriminator 3
 995 092e 0FB755A4 		movzwl	-92(%rbp), %edx
 996 0932 488B4588 		movq	-120(%rbp), %rax
 997 0936 4801D0   		addq	%rdx, %rax
 998 0939 0FB600   		movzbl	(%rax), %eax
 999 093c 0FB6D0   		movzbl	%al, %edx
 1000              		.loc 2 279 29 discriminator 3
 1001 093f 488B4580 		movq	-128(%rbp), %rax
 1002 0943 4801C2   		addq	%rax, %rdx
 1003              		.loc 2 279 12 discriminator 3
 1004 0946 0FB745A4 		movzwl	-92(%rbp), %eax
 1005              		.loc 2 279 29 discriminator 3
 1006 094a 0FB612   		movzbl	(%rdx), %edx
 1007              		.loc 2 279 16 discriminator 3
 1008 094d 4898     		cltq
 1009 094f 885405B0 		movb	%dl, -80(%rbp,%rax)
 278:prog.c        **** 			for ( i = 0; i < chunkSize; i++ ) {
 1010              		.loc 2 278 33 discriminator 3
 1011 0953 0FB745A4 		movzwl	-92(%rbp), %eax
 1012 0957 83C001   		addl	$1, %eax
 1013 095a 668945A4 		movw	%ax, -92(%rbp)
 1014              	.L59:
 278:prog.c        **** 			for ( i = 0; i < chunkSize; i++ ) {
 1015              		.loc 2 278 19 discriminator 1
 1016 095e 0FB745A4 		movzwl	-92(%rbp), %eax
 1017 0962 663B45A6 		cmpw	-90(%rbp), %ax
 1018 0966 72C6     		jb	.L60
 280:prog.c        **** 			}
 281:prog.c        **** 			fStatus = doSend(handle, bitSwap, chunkSize, error);
 1019              		.loc 2 281 14
 1020 0968 0FB755A6 		movzwl	-90(%rbp), %edx
 1021 096c 488B8D78 		movq	-136(%rbp), %rcx
 1021      FFFFFF
 1022 0973 488D75B0 		leaq	-80(%rbp), %rsi
 1023 0977 488B4598 		movq	-104(%rbp), %rax
 1024 097b 4889C7   		movq	%rax, %rdi
 1025 097e E844F7FF 		call	doSend
 1025      FF
 1026 0983 8945AC   		movl	%eax, -84(%rbp)
 282:prog.c        **** 			CHECK_STATUS(fStatus, fStatus, cleanup, "dataWrite()");
 1027              		.loc 2 282 4
 1028 0986 837DAC00 		cmpl	$0, -84(%rbp)
 1029 098a 7424     		je	.L61
 1030              		.loc 2 282 4 is_stmt 0 discriminator 1
 1031 098c 488B8578 		movq	-136(%rbp), %rax
 1031      FFFFFF
 1032 0993 488D1500 		leaq	.LC10(%rip), %rdx
 1032      000000
 1033 099a 4889D6   		movq	%rdx, %rsi
 1034 099d 4889C7   		movq	%rax, %rdi
 1035 09a0 E8000000 		call	errPrefix@PLT
 1035      00
 1036 09a5 8B45AC   		movl	-84(%rbp), %eax
 1037 09a8 8945A8   		movl	%eax, -88(%rbp)
 1038 09ab E98A0000 		jmp	.L54
 1038      00
 1039              	.L61:
 283:prog.c        **** 			buf += chunkSize;
 1040              		.loc 2 283 8 is_stmt 1
 1041 09b0 0FB745A6 		movzwl	-90(%rbp), %eax
 1042 09b4 48014588 		addq	%rax, -120(%rbp)
 284:prog.c        **** 			len -= chunkSize;
 1043              		.loc 2 284 8
 1044 09b8 0FB745A6 		movzwl	-90(%rbp), %eax
 1045 09bc 294590   		subl	%eax, -112(%rbp)
 1046              	.L56:
 276:prog.c        **** 			chunkSize = (uint16)((len >= 64) ? 64 : len);
 1047              		.loc 2 276 11
 1048 09bf 837D9000 		cmpl	$0, -112(%rbp)
 1049 09c3 0F8549FF 		jne	.L62
 1049      FFFF
 1050 09c9 EB6F     		jmp	.L54
 1051              	.L67:
 1052              	.LBE2:
 285:prog.c        **** 		}
 286:prog.c        **** 	} else {
 287:prog.c        **** 		while ( len ) {
 288:prog.c        **** 			chunkSize = (uint16)((len >= 64) ? 64 : len);
 1053              		.loc 2 288 16
 1054 09cb 837D903F 		cmpl	$63, -112(%rbp)
 1055 09cf 7705     		ja	.L64
 1056              		.loc 2 288 16 is_stmt 0 discriminator 1
 1057 09d1 8B4590   		movl	-112(%rbp), %eax
 1058 09d4 EB05     		jmp	.L65
 1059              	.L64:
 1060              		.loc 2 288 16 discriminator 2
 1061 09d6 B8400000 		movl	$64, %eax
 1061      00
 1062              	.L65:
 1063              		.loc 2 288 14 is_stmt 1 discriminator 4
 1064 09db 668945A6 		movw	%ax, -90(%rbp)
 289:prog.c        **** 			fStatus = doSend(handle, buf, chunkSize, error);
 1065              		.loc 2 289 14 discriminator 4
 1066 09df 0FB755A6 		movzwl	-90(%rbp), %edx
 1067 09e3 488B8D78 		movq	-136(%rbp), %rcx
 1067      FFFFFF
 1068 09ea 488B7588 		movq	-120(%rbp), %rsi
 1069 09ee 488B4598 		movq	-104(%rbp), %rax
 1070 09f2 4889C7   		movq	%rax, %rdi
 1071 09f5 E8CDF6FF 		call	doSend
 1071      FF
 1072 09fa 8945AC   		movl	%eax, -84(%rbp)
 290:prog.c        **** 			CHECK_STATUS(fStatus, fStatus, cleanup, "dataWrite()");
 1073              		.loc 2 290 4 discriminator 4
 1074 09fd 837DAC00 		cmpl	$0, -84(%rbp)
 1075 0a01 7421     		je	.L66
 1076              		.loc 2 290 4 is_stmt 0 discriminator 1
 1077 0a03 488B8578 		movq	-136(%rbp), %rax
 1077      FFFFFF
 1078 0a0a 488D1500 		leaq	.LC10(%rip), %rdx
 1078      000000
 1079 0a11 4889D6   		movq	%rdx, %rsi
 1080 0a14 4889C7   		movq	%rax, %rdi
 1081 0a17 E8000000 		call	errPrefix@PLT
 1081      00
 1082 0a1c 8B45AC   		movl	-84(%rbp), %eax
 1083 0a1f 8945A8   		movl	%eax, -88(%rbp)
 1084 0a22 EB16     		jmp	.L54
 1085              	.L66:
 291:prog.c        **** 			buf += chunkSize;
 1086              		.loc 2 291 8 is_stmt 1
 1087 0a24 0FB745A6 		movzwl	-90(%rbp), %eax
 1088 0a28 48014588 		addq	%rax, -120(%rbp)
 292:prog.c        **** 			len -= chunkSize;
 1089              		.loc 2 292 8
 1090 0a2c 0FB745A6 		movzwl	-90(%rbp), %eax
 1091 0a30 294590   		subl	%eax, -112(%rbp)
 1092              	.L63:
 287:prog.c        **** 			chunkSize = (uint16)((len >= 64) ? 64 : len);
 1093              		.loc 2 287 11
 1094 0a33 837D9000 		cmpl	$0, -112(%rbp)
 1095 0a37 7592     		jne	.L67
 293:prog.c        **** 		}
 294:prog.c        **** 	}
 295:prog.c        **** cleanup:
 1096              		.loc 2 295 1
 1097 0a39 90       		nop
 1098              	.L54:
 296:prog.c        **** 	return retVal;
 1099              		.loc 2 296 9
 1100 0a3a 8B45A8   		movl	-88(%rbp), %eax
 297:prog.c        **** }
 1101              		.loc 2 297 1
 1102 0a3d 488B55F8 		movq	-8(%rbp), %rdx
 1103 0a41 64482B14 		subq	%fs:40, %rdx
 1103      25280000 
 1103      00
 1104 0a4a 7405     		je	.L69
 1105 0a4c E8000000 		call	__stack_chk_fail@PLT
 1105      00
 1106              	.L69:
 1107 0a51 C9       		leave
 1108              		.cfi_def_cfa 7, 8
 1109 0a52 C3       		ret
 1110              		.cfi_endproc
 1111              	.LFE11:
 1113              		.section	.rodata
 1114 0272 00000000 		.align 8
 1114      0000
 1115              	.LC11:
 1116 0278 7850726F 		.string	"xProgram(): unsupported ProgOp"
 1116      6772616D 
 1116      28293A20 
 1116      756E7375 
 1116      70706F72 
 1117 0297 00       		.align 8
 1118              	.LC12:
 1119 0298 7850726F 		.string	"xProgram(): Unexpected end of config string:\n  %s\n  %s^"
 1119      6772616D 
 1119      28293A20 
 1119      556E6578 
 1119      70656374 
 1120              		.align 8
 1121              	.LC13:
 1122 02d0 7850726F 		.string	"xProgram(): Expecting ':':\n  %s\n  %s^"
 1122      6772616D 
 1122      28293A20 
 1122      45787065 
 1122      6374696E 
 1123 02f6 0000     		.align 8
 1124              	.LC14:
 1125 02f8 7850726F 		.string	"xProgram(): Port is not valid (try 'A', 'B', 'C', etc):\n  %s\n  %s^"
 1125      6772616D 
 1125      28293A20 
 1125      506F7274 
 1125      20697320 
 1126 033b 00000000 		.align 8
 1126      00
 1127              	.LC15:
 1128 0340 7850726F 		.string	"xProgram(): Bit number is not valid:\n  %s\n  %s^"
 1128      6772616D 
 1128      28293A20 
 1128      42697420 
 1128      6E756D62 
 1129              		.align 8
 1130              	.LC16:
 1131 0370 7850726F 		.string	"xProgram(): port '%c%d' is already used:\n  %s\n  %s^"
 1131      6772616D 
 1131      28293A20 
 1131      706F7274 
 1131      20272563 
 1132 03a4 00000000 		.align 8
 1133              	.LC17:
 1134 03a8 7850726F 		.string	"xProgram(): Bit '%c' is not valid at char %d"
 1134      6772616D 
 1134      28293A20 
 1134      42697420 
 1134      27256327 
 1135              	.LC18:
 1136 03d5 7850726F 		.string	"xProgram()"
 1136      6772616D 
 1136      282900
 1137              		.align 8
 1138              	.LC19:
 1139 03e0 7850726F 		.string	"xProgram(): Expecting ']':\n  %s\n  %s^"
 1139      6772616D 
 1139      28293A20 
 1139      45787065 
 1139      6374696E 
 1140 0406 0000     		.align 8
 1141              	.LC20:
 1142 0408 7850726F 		.string	"xProgram(): Expecting ':' or end-of-string:\n  %s\n  %s^"
 1142      6772616D 
 1142      28293A20 
 1142      45787065 
 1142      6374696E 
 1143 043f 00       		.align 8
 1144              	.LC21:
 1145 0440 7850726F 		.string	"xProgram(): DONE did not assert"
 1145      6772616D 
 1145      28293A20 
 1145      444F4E45 
 1145      20646964 
 1146              		.align 8
 1147              	.LC22:
 1148 0460 7850726F 		.string	"xProgram(): INIT unexpectedly low (CRC error during config)"
 1148      6772616D 
 1148      28293A20 
 1148      494E4954 
 1148      20756E65 
 1149              		.text
 1151              	xProgram:
 1152              	.LFB12:
 298:prog.c        **** 
 299:prog.c        **** // This function performs either a serial or a parallel programming operation on Xilinx FPGAs.
 300:prog.c        **** //
 301:prog.c        **** // Called by:
 302:prog.c        **** //   flProgram() -> xProgram()
 303:prog.c        **** //
 304:prog.c        **** static FLStatus xProgram(struct FLContext *handle, ProgOp progOp, const char *portConfig, const uin
 1153              		.loc 2 304 142
 1154              		.cfi_startproc
 1155 0a53 F30F1EFA 		endbr64
 1156 0a57 55       		pushq	%rbp
 1157              		.cfi_def_cfa_offset 16
 1158              		.cfi_offset 6, -16
 1159 0a58 4889E5   		movq	%rsp, %rbp
 1160              		.cfi_def_cfa_register 6
 1161 0a5b 4881ECC0 		subq	$3776, %rsp
 1161      0E0000
 1162 0a62 4889BD68 		movq	%rdi, -3736(%rbp)
 1162      F1FFFF
 1163 0a69 89B564F1 		movl	%esi, -3740(%rbp)
 1163      FFFF
 1164 0a6f 48899558 		movq	%rdx, -3752(%rbp)
 1164      F1FFFF
 1165 0a76 48898D50 		movq	%rcx, -3760(%rbp)
 1165      F1FFFF
 1166 0a7d 44898560 		movl	%r8d, -3744(%rbp)
 1166      F1FFFF
 1167 0a84 4C898D48 		movq	%r9, -3768(%rbp)
 1167      F1FFFF
 1168              		.loc 2 304 142
 1169 0a8b 64488B04 		movq	%fs:40, %rax
 1169      25280000 
 1169      00
 1170 0a94 488945F8 		movq	%rax, -8(%rbp)
 1171 0a98 31C0     		xorl	%eax, %eax
 305:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
 1172              		.loc 2 305 11
 1173 0a9a C78588F1 		movl	$0, -3704(%rbp)
 1173      FFFF0000 
 1173      0000
 306:prog.c        **** 	FLStatus fStatus;
 307:prog.c        **** 	uint8 progPort, progBit;
 308:prog.c        **** 	uint8 initPort, initBit;
 309:prog.c        **** 	uint8 donePort, doneBit;
 310:prog.c        **** 	uint8 cclkPort, cclkBit;
 311:prog.c        **** 	uint8 dataPort, dataBit[8];
 312:prog.c        **** 	uint8 port, bit;
 313:prog.c        **** 	uint8 initStatus, doneStatus;
 314:prog.c        **** 	const char *ptr = portConfig + 2;
 1174              		.loc 2 314 31
 1175 0aa4 488B8558 		movq	-3752(%rbp), %rax
 1175      F1FFFF
 1176 0aab 4883C002 		addq	$2, %rax
 1177              		.loc 2 314 14
 1178 0aaf 48898598 		movq	%rax, -3688(%rbp)
 1178      F1FFFF
 315:prog.c        **** 	PinConfig pinMap[26][32] = {{0,},};
 1179              		.loc 2 315 12
 1180 0ab6 488D95A0 		leaq	-3680(%rbp), %rdx
 1180      F1FFFF
 1181 0abd B8000000 		movl	$0, %eax
 1181      00
 1182 0ac2 B9A00100 		movl	$416, %ecx
 1182      00
 1183 0ac7 4889D7   		movq	%rdx, %rdi
 1184 0aca F348AB   		rep stosq
 316:prog.c        **** 	PinConfig thisPin;
 317:prog.c        **** 	const uint8 zeroBlock[64] = {0,};
 1185              		.loc 2 317 14
 1186 0acd 48C785B0 		movq	$0, -336(%rbp)
 1186      FEFFFF00 
 1186      000000
 1187 0ad8 48C785B8 		movq	$0, -328(%rbp)
 1187      FEFFFF00 
 1187      000000
 1188 0ae3 48C785C0 		movq	$0, -320(%rbp)
 1188      FEFFFF00 
 1188      000000
 1189 0aee 48C785C8 		movq	$0, -312(%rbp)
 1189      FEFFFF00 
 1189      000000
 1190 0af9 48C785D0 		movq	$0, -304(%rbp)
 1190      FEFFFF00 
 1190      000000
 1191 0b04 48C785D8 		movq	$0, -296(%rbp)
 1191      FEFFFF00 
 1191      000000
 1192 0b0f 48C785E0 		movq	$0, -288(%rbp)
 1192      FEFFFF00 
 1192      000000
 1193 0b1a 48C785E8 		movq	$0, -280(%rbp)
 1193      FEFFFF00 
 1193      000000
 318:prog.c        **** 	uint8 lookupTable[256];
 319:prog.c        **** 	int i;
 320:prog.c        **** 	char ch;
 321:prog.c        **** 	CHECK_STATUS(
 1194              		.loc 2 321 2
 1195 0b25 83BD64F1 		cmpl	$5, -3740(%rbp)
 1195      FFFF05
 1196 0b2c 7431     		je	.L71
 1197              		.loc 2 321 2 is_stmt 0 discriminator 1
 1198 0b2e 83BD64F1 		cmpl	$6, -3740(%rbp)
 1198      FFFF06
 1199 0b35 7428     		je	.L71
 1200              		.loc 2 321 2 discriminator 2
 1201 0b37 488B8548 		movq	-3768(%rbp), %rax
 1201      F1FFFF
 1202 0b3e 488D1500 		leaq	.LC11(%rip), %rdx
 1202      000000
 1203 0b45 4889D6   		movq	%rdx, %rsi
 1204 0b48 4889C7   		movq	%rax, %rdi
 1205 0b4b E8000000 		call	errPrefix@PLT
 1205      00
 1206 0b50 C78588F1 		movl	$11, -3704(%rbp)
 1206      FFFF0B00 
 1206      0000
 1207 0b5a E9311B00 		jmp	.L72
 1207      00
 1208              	.L71:
 322:prog.c        **** 		progOp != PROG_PARALLEL && progOp != PROG_SPI_SEND, FL_CONF_FORMAT, cleanup,
 323:prog.c        **** 		"xProgram(): unsupported ProgOp");
 324:prog.c        **** 	EXPECT_CHAR(':', "xProgram");
 1209              		.loc 2 324 2 is_stmt 1
 1210 0b5f 488B8598 		movq	-3688(%rbp), %rax
 1210      F1FFFF
 1211 0b66 0FB600   		movzbl	(%rax), %eax
 1212 0b69 88857EF1 		movb	%al, -3714(%rbp)
 1212      FFFF
 1213 0b6f 80BD7EF1 		cmpb	$0, -3714(%rbp)
 1213      FFFF00
 1214 0b76 754A     		jne	.L73
 1215              		.loc 2 324 2 is_stmt 0 discriminator 1
 1216 0b78 488B8598 		movq	-3688(%rbp), %rax
 1216      F1FFFF
 1217 0b7f 482B8558 		subq	-3752(%rbp), %rax
 1217      F1FFFF
 1218 0b86 4889C7   		movq	%rax, %rdi
 1219 0b89 E83DF6FF 		call	spaces
 1219      FF
 1220 0b8e 4889C1   		movq	%rax, %rcx
 1221 0b91 488B9558 		movq	-3752(%rbp), %rdx
 1221      F1FFFF
 1222 0b98 488B8548 		movq	-3768(%rbp), %rax
 1222      F1FFFF
 1223 0b9f 488D3500 		leaq	.LC12(%rip), %rsi
 1223      000000
 1224 0ba6 4889C7   		movq	%rax, %rdi
 1225 0ba9 B8000000 		movl	$0, %eax
 1225      00
 1226 0bae E8000000 		call	errRender@PLT
 1226      00
 1227 0bb3 C78588F1 		movl	$11, -3704(%rbp)
 1227      FFFF0B00 
 1227      0000
 1228 0bbd E9CE1A00 		jmp	.L72
 1228      00
 1229              	.L73:
 1230              		.loc 2 324 2 discriminator 2
 1231 0bc2 80BD7EF1 		cmpb	$58, -3714(%rbp)
 1231      FFFF3A
 1232 0bc9 744A     		je	.L74
 1233              		.loc 2 324 2 discriminator 3
 1234 0bcb 488B8598 		movq	-3688(%rbp), %rax
 1234      F1FFFF
 1235 0bd2 482B8558 		subq	-3752(%rbp), %rax
 1235      F1FFFF
 1236 0bd9 4889C7   		movq	%rax, %rdi
 1237 0bdc E8EAF5FF 		call	spaces
 1237      FF
 1238 0be1 4889C1   		movq	%rax, %rcx
 1239 0be4 488B9558 		movq	-3752(%rbp), %rdx
 1239      F1FFFF
 1240 0beb 488B8548 		movq	-3768(%rbp), %rax
 1240      F1FFFF
 1241 0bf2 488D3500 		leaq	.LC13(%rip), %rsi
 1241      000000
 1242 0bf9 4889C7   		movq	%rax, %rdi
 1243 0bfc B8000000 		movl	$0, %eax
 1243      00
 1244 0c01 E8000000 		call	errRender@PLT
 1244      00
 1245 0c06 C78588F1 		movl	$11, -3704(%rbp)
 1245      FFFF0B00 
 1245      0000
 1246 0c10 E97B1A00 		jmp	.L72
 1246      00
 1247              	.L74:
 1248              		.loc 2 324 2 discriminator 4
 1249 0c15 488B8598 		movq	-3688(%rbp), %rax
 1249      F1FFFF
 1250 0c1c 4883C001 		addq	$1, %rax
 1251 0c20 48898598 		movq	%rax, -3688(%rbp)
 1251      F1FFFF
 325:prog.c        **** 
 326:prog.c        **** 	GET_PAIR(progPort, progBit, "xProgram");
 1252              		.loc 2 326 2 is_stmt 1 discriminator 4
 1253 0c27 488B8598 		movq	-3688(%rbp), %rax
 1253      F1FFFF
 1254 0c2e 0FB600   		movzbl	(%rax), %eax
 1255 0c31 88857EF1 		movb	%al, -3714(%rbp)
 1255      FFFF
 1256 0c37 80BD7EF1 		cmpb	$0, -3714(%rbp)
 1256      FFFF00
 1257 0c3e 754A     		jne	.L75
 1258              		.loc 2 326 2 is_stmt 0 discriminator 1
 1259 0c40 488B8598 		movq	-3688(%rbp), %rax
 1259      F1FFFF
 1260 0c47 482B8558 		subq	-3752(%rbp), %rax
 1260      F1FFFF
 1261 0c4e 4889C7   		movq	%rax, %rdi
 1262 0c51 E875F5FF 		call	spaces
 1262      FF
 1263 0c56 4889C1   		movq	%rax, %rcx
 1264 0c59 488B9558 		movq	-3752(%rbp), %rdx
 1264      F1FFFF
 1265 0c60 488B8548 		movq	-3768(%rbp), %rax
 1265      F1FFFF
 1266 0c67 488D3500 		leaq	.LC12(%rip), %rsi
 1266      000000
 1267 0c6e 4889C7   		movq	%rax, %rdi
 1268 0c71 B8000000 		movl	$0, %eax
 1268      00
 1269 0c76 E8000000 		call	errRender@PLT
 1269      00
 1270 0c7b C78588F1 		movl	$11, -3704(%rbp)
 1270      FFFF0B00 
 1270      0000
 1271 0c85 E9061A00 		jmp	.L72
 1271      00
 1272              	.L75:
 1273              		.loc 2 326 2 discriminator 2
 1274 0c8a 80BD7EF1 		cmpb	$64, -3714(%rbp)
 1274      FFFF40
 1275 0c91 7E09     		jle	.L76
 1276              		.loc 2 326 2 discriminator 4
 1277 0c93 80BD7EF1 		cmpb	$90, -3714(%rbp)
 1277      FFFF5A
 1278 0c9a 7E4A     		jle	.L77
 1279              	.L76:
 1280              		.loc 2 326 2 discriminator 5
 1281 0c9c 488B8598 		movq	-3688(%rbp), %rax
 1281      F1FFFF
 1282 0ca3 482B8558 		subq	-3752(%rbp), %rax
 1282      F1FFFF
 1283 0caa 4889C7   		movq	%rax, %rdi
 1284 0cad E819F5FF 		call	spaces
 1284      FF
 1285 0cb2 4889C1   		movq	%rax, %rcx
 1286 0cb5 488B9558 		movq	-3752(%rbp), %rdx
 1286      F1FFFF
 1287 0cbc 488B8548 		movq	-3768(%rbp), %rax
 1287      F1FFFF
 1288 0cc3 488D3500 		leaq	.LC14(%rip), %rsi
 1288      000000
 1289 0cca 4889C7   		movq	%rax, %rdi
 1290 0ccd B8000000 		movl	$0, %eax
 1290      00
 1291 0cd2 E8000000 		call	errRender@PLT
 1291      00
 1292 0cd7 C78588F1 		movl	$11, -3704(%rbp)
 1292      FFFF0B00 
 1292      0000
 1293 0ce1 E9AA1900 		jmp	.L72
 1293      00
 1294              	.L77:
 1295              		.loc 2 326 2 discriminator 6
 1296 0ce6 0FB6857E 		movzbl	-3714(%rbp), %eax
 1296      F1FFFF
 1297 0ced 83E841   		subl	$65, %eax
 1298 0cf0 88857FF1 		movb	%al, -3713(%rbp)
 1298      FFFF
 1299 0cf6 488B8598 		movq	-3688(%rbp), %rax
 1299      F1FFFF
 1300 0cfd 4883C001 		addq	$1, %rax
 1301 0d01 48898598 		movq	%rax, -3688(%rbp)
 1301      F1FFFF
 1302 0d08 488B8598 		movq	-3688(%rbp), %rax
 1302      F1FFFF
 1303 0d0f 0FB600   		movzbl	(%rax), %eax
 1304 0d12 88857EF1 		movb	%al, -3714(%rbp)
 1304      FFFF
 1305 0d18 80BD7EF1 		cmpb	$0, -3714(%rbp)
 1305      FFFF00
 1306 0d1f 754A     		jne	.L78
 1307              		.loc 2 326 2 discriminator 7
 1308 0d21 488B8598 		movq	-3688(%rbp), %rax
 1308      F1FFFF
 1309 0d28 482B8558 		subq	-3752(%rbp), %rax
 1309      F1FFFF
 1310 0d2f 4889C7   		movq	%rax, %rdi
 1311 0d32 E894F4FF 		call	spaces
 1311      FF
 1312 0d37 4889C1   		movq	%rax, %rcx
 1313 0d3a 488B9558 		movq	-3752(%rbp), %rdx
 1313      F1FFFF
 1314 0d41 488B8548 		movq	-3768(%rbp), %rax
 1314      F1FFFF
 1315 0d48 488D3500 		leaq	.LC12(%rip), %rsi
 1315      000000
 1316 0d4f 4889C7   		movq	%rax, %rdi
 1317 0d52 B8000000 		movl	$0, %eax
 1317      00
 1318 0d57 E8000000 		call	errRender@PLT
 1318      00
 1319 0d5c C78588F1 		movl	$11, -3704(%rbp)
 1319      FFFF0B00 
 1319      0000
 1320 0d66 E9251900 		jmp	.L72
 1320      00
 1321              	.L78:
 1322              		.loc 2 326 2 discriminator 8
 1323 0d6b 80BD7EF1 		cmpb	$47, -3714(%rbp)
 1323      FFFF2F
 1324 0d72 7E09     		jle	.L79
 1325              		.loc 2 326 2 discriminator 10
 1326 0d74 80BD7EF1 		cmpb	$57, -3714(%rbp)
 1326      FFFF39
 1327 0d7b 7E4A     		jle	.L80
 1328              	.L79:
 1329              		.loc 2 326 2 discriminator 11
 1330 0d7d 488B8598 		movq	-3688(%rbp), %rax
 1330      F1FFFF
 1331 0d84 482B8558 		subq	-3752(%rbp), %rax
 1331      F1FFFF
 1332 0d8b 4889C7   		movq	%rax, %rdi
 1333 0d8e E838F4FF 		call	spaces
 1333      FF
 1334 0d93 4889C1   		movq	%rax, %rcx
 1335 0d96 488B9558 		movq	-3752(%rbp), %rdx
 1335      F1FFFF
 1336 0d9d 488B8548 		movq	-3768(%rbp), %rax
 1336      F1FFFF
 1337 0da4 488D3500 		leaq	.LC15(%rip), %rsi
 1337      000000
 1338 0dab 4889C7   		movq	%rax, %rdi
 1339 0dae B8000000 		movl	$0, %eax
 1339      00
 1340 0db3 E8000000 		call	errRender@PLT
 1340      00
 1341 0db8 C78588F1 		movl	$11, -3704(%rbp)
 1341      FFFF0B00 
 1341      0000
 1342 0dc2 E9C91800 		jmp	.L72
 1342      00
 1343              	.L80:
 1344              		.loc 2 326 2 discriminator 12
 1345 0dc7 488B8598 		movq	-3688(%rbp), %rax
 1345      F1FFFF
 1346 0dce 488D8D98 		leaq	-3688(%rbp), %rcx
 1346      F1FFFF
 1347 0dd5 BA0A0000 		movl	$10, %edx
 1347      00
 1348 0dda 4889CE   		movq	%rcx, %rsi
 1349 0ddd 4889C7   		movq	%rax, %rdi
 1350 0de0 E8000000 		call	strtoul@PLT
 1350      00
 1351 0de5 888580F1 		movb	%al, -3712(%rbp)
 1351      FFFF
 327:prog.c        **** 	SET_BIT(progPort, progBit, PIN_LOW, "xProgram");
 1352              		.loc 2 327 2 is_stmt 1 discriminator 12
 1353 0deb 0FB6857F 		movzbl	-3713(%rbp), %eax
 1353      F1FFFF
 1354 0df2 0FB69580 		movzbl	-3712(%rbp), %edx
 1354      F1FFFF
 1355 0df9 4863D2   		movslq	%edx, %rdx
 1356 0dfc 4898     		cltq
 1357 0dfe 48C1E005 		salq	$5, %rax
 1358 0e02 4801D0   		addq	%rdx, %rax
 1359 0e05 8B8485A0 		movl	-3680(%rbp,%rax,4), %eax
 1359      F1FFFF
 1360 0e0c 85C0     		testl	%eax, %eax
 1361 0e0e 7469     		je	.L81
 1362              		.loc 2 327 2 is_stmt 0 discriminator 1
 1363 0e10 488B8598 		movq	-3688(%rbp), %rax
 1363      F1FFFF
 1364 0e17 482B8558 		subq	-3752(%rbp), %rax
 1364      F1FFFF
 1365 0e1e 4883E801 		subq	$1, %rax
 1366 0e22 4889C7   		movq	%rax, %rdi
 1367 0e25 E8A1F3FF 		call	spaces
 1367      FF
 1368 0e2a 4889C1   		movq	%rax, %rcx
 1369 0e2d 0FB69580 		movzbl	-3712(%rbp), %edx
 1369      F1FFFF
 1370 0e34 0FB6857F 		movzbl	-3713(%rbp), %eax
 1370      F1FFFF
 1371 0e3b 8D7041   		leal	65(%rax), %esi
 1372 0e3e 488BBD58 		movq	-3752(%rbp), %rdi
 1372      F1FFFF
 1373 0e45 488B8548 		movq	-3768(%rbp), %rax
 1373      F1FFFF
 1374 0e4c 4989C9   		movq	%rcx, %r9
 1375 0e4f 4989F8   		movq	%rdi, %r8
 1376 0e52 89D1     		movl	%edx, %ecx
 1377 0e54 89F2     		movl	%esi, %edx
 1378 0e56 488D3500 		leaq	.LC16(%rip), %rsi
 1378      000000
 1379 0e5d 4889C7   		movq	%rax, %rdi
 1380 0e60 B8000000 		movl	$0, %eax
 1380      00
 1381 0e65 E8000000 		call	errRender@PLT
 1381      00
 1382 0e6a C78588F1 		movl	$11, -3704(%rbp)
 1382      FFFF0B00 
 1382      0000
 1383 0e74 E9171800 		jmp	.L72
 1383      00
 1384              	.L81:
 1385              		.loc 2 327 2 discriminator 2
 1386 0e79 0FB6857F 		movzbl	-3713(%rbp), %eax
 1386      F1FFFF
 1387 0e80 0FB69580 		movzbl	-3712(%rbp), %edx
 1387      F1FFFF
 1388 0e87 4863D2   		movslq	%edx, %rdx
 1389 0e8a 4898     		cltq
 1390 0e8c 48C1E005 		salq	$5, %rax
 1391 0e90 4801D0   		addq	%rdx, %rax
 1392 0e93 C78485A0 		movl	$2, -3680(%rbp,%rax,4)
 1392      F1FFFF02 
 1392      000000
 328:prog.c        **** 
 329:prog.c        **** 	GET_PAIR(initPort, initBit, "xProgram");
 1393              		.loc 2 329 2 is_stmt 1 discriminator 2
 1394 0e9e 488B8598 		movq	-3688(%rbp), %rax
 1394      F1FFFF
 1395 0ea5 0FB600   		movzbl	(%rax), %eax
 1396 0ea8 88857EF1 		movb	%al, -3714(%rbp)
 1396      FFFF
 1397 0eae 80BD7EF1 		cmpb	$0, -3714(%rbp)
 1397      FFFF00
 1398 0eb5 754A     		jne	.L82
 1399              		.loc 2 329 2 is_stmt 0 discriminator 1
 1400 0eb7 488B8598 		movq	-3688(%rbp), %rax
 1400      F1FFFF
 1401 0ebe 482B8558 		subq	-3752(%rbp), %rax
 1401      F1FFFF
 1402 0ec5 4889C7   		movq	%rax, %rdi
 1403 0ec8 E8FEF2FF 		call	spaces
 1403      FF
 1404 0ecd 4889C1   		movq	%rax, %rcx
 1405 0ed0 488B9558 		movq	-3752(%rbp), %rdx
 1405      F1FFFF
 1406 0ed7 488B8548 		movq	-3768(%rbp), %rax
 1406      F1FFFF
 1407 0ede 488D3500 		leaq	.LC12(%rip), %rsi
 1407      000000
 1408 0ee5 4889C7   		movq	%rax, %rdi
 1409 0ee8 B8000000 		movl	$0, %eax
 1409      00
 1410 0eed E8000000 		call	errRender@PLT
 1410      00
 1411 0ef2 C78588F1 		movl	$11, -3704(%rbp)
 1411      FFFF0B00 
 1411      0000
 1412 0efc E98F1700 		jmp	.L72
 1412      00
 1413              	.L82:
 1414              		.loc 2 329 2 discriminator 2
 1415 0f01 80BD7EF1 		cmpb	$64, -3714(%rbp)
 1415      FFFF40
 1416 0f08 7E09     		jle	.L83
 1417              		.loc 2 329 2 discriminator 4
 1418 0f0a 80BD7EF1 		cmpb	$90, -3714(%rbp)
 1418      FFFF5A
 1419 0f11 7E4A     		jle	.L84
 1420              	.L83:
 1421              		.loc 2 329 2 discriminator 5
 1422 0f13 488B8598 		movq	-3688(%rbp), %rax
 1422      F1FFFF
 1423 0f1a 482B8558 		subq	-3752(%rbp), %rax
 1423      F1FFFF
 1424 0f21 4889C7   		movq	%rax, %rdi
 1425 0f24 E8A2F2FF 		call	spaces
 1425      FF
 1426 0f29 4889C1   		movq	%rax, %rcx
 1427 0f2c 488B9558 		movq	-3752(%rbp), %rdx
 1427      F1FFFF
 1428 0f33 488B8548 		movq	-3768(%rbp), %rax
 1428      F1FFFF
 1429 0f3a 488D3500 		leaq	.LC14(%rip), %rsi
 1429      000000
 1430 0f41 4889C7   		movq	%rax, %rdi
 1431 0f44 B8000000 		movl	$0, %eax
 1431      00
 1432 0f49 E8000000 		call	errRender@PLT
 1432      00
 1433 0f4e C78588F1 		movl	$11, -3704(%rbp)
 1433      FFFF0B00 
 1433      0000
 1434 0f58 E9331700 		jmp	.L72
 1434      00
 1435              	.L84:
 1436              		.loc 2 329 2 discriminator 6
 1437 0f5d 0FB6857E 		movzbl	-3714(%rbp), %eax
 1437      F1FFFF
 1438 0f64 83E841   		subl	$65, %eax
 1439 0f67 888581F1 		movb	%al, -3711(%rbp)
 1439      FFFF
 1440 0f6d 488B8598 		movq	-3688(%rbp), %rax
 1440      F1FFFF
 1441 0f74 4883C001 		addq	$1, %rax
 1442 0f78 48898598 		movq	%rax, -3688(%rbp)
 1442      F1FFFF
 1443 0f7f 488B8598 		movq	-3688(%rbp), %rax
 1443      F1FFFF
 1444 0f86 0FB600   		movzbl	(%rax), %eax
 1445 0f89 88857EF1 		movb	%al, -3714(%rbp)
 1445      FFFF
 1446 0f8f 80BD7EF1 		cmpb	$0, -3714(%rbp)
 1446      FFFF00
 1447 0f96 754A     		jne	.L85
 1448              		.loc 2 329 2 discriminator 7
 1449 0f98 488B8598 		movq	-3688(%rbp), %rax
 1449      F1FFFF
 1450 0f9f 482B8558 		subq	-3752(%rbp), %rax
 1450      F1FFFF
 1451 0fa6 4889C7   		movq	%rax, %rdi
 1452 0fa9 E81DF2FF 		call	spaces
 1452      FF
 1453 0fae 4889C1   		movq	%rax, %rcx
 1454 0fb1 488B9558 		movq	-3752(%rbp), %rdx
 1454      F1FFFF
 1455 0fb8 488B8548 		movq	-3768(%rbp), %rax
 1455      F1FFFF
 1456 0fbf 488D3500 		leaq	.LC12(%rip), %rsi
 1456      000000
 1457 0fc6 4889C7   		movq	%rax, %rdi
 1458 0fc9 B8000000 		movl	$0, %eax
 1458      00
 1459 0fce E8000000 		call	errRender@PLT
 1459      00
 1460 0fd3 C78588F1 		movl	$11, -3704(%rbp)
 1460      FFFF0B00 
 1460      0000
 1461 0fdd E9AE1600 		jmp	.L72
 1461      00
 1462              	.L85:
 1463              		.loc 2 329 2 discriminator 8
 1464 0fe2 80BD7EF1 		cmpb	$47, -3714(%rbp)
 1464      FFFF2F
 1465 0fe9 7E09     		jle	.L86
 1466              		.loc 2 329 2 discriminator 10
 1467 0feb 80BD7EF1 		cmpb	$57, -3714(%rbp)
 1467      FFFF39
 1468 0ff2 7E4A     		jle	.L87
 1469              	.L86:
 1470              		.loc 2 329 2 discriminator 11
 1471 0ff4 488B8598 		movq	-3688(%rbp), %rax
 1471      F1FFFF
 1472 0ffb 482B8558 		subq	-3752(%rbp), %rax
 1472      F1FFFF
 1473 1002 4889C7   		movq	%rax, %rdi
 1474 1005 E8C1F1FF 		call	spaces
 1474      FF
 1475 100a 4889C1   		movq	%rax, %rcx
 1476 100d 488B9558 		movq	-3752(%rbp), %rdx
 1476      F1FFFF
 1477 1014 488B8548 		movq	-3768(%rbp), %rax
 1477      F1FFFF
 1478 101b 488D3500 		leaq	.LC15(%rip), %rsi
 1478      000000
 1479 1022 4889C7   		movq	%rax, %rdi
 1480 1025 B8000000 		movl	$0, %eax
 1480      00
 1481 102a E8000000 		call	errRender@PLT
 1481      00
 1482 102f C78588F1 		movl	$11, -3704(%rbp)
 1482      FFFF0B00 
 1482      0000
 1483 1039 E9521600 		jmp	.L72
 1483      00
 1484              	.L87:
 1485              		.loc 2 329 2 discriminator 12
 1486 103e 488B8598 		movq	-3688(%rbp), %rax
 1486      F1FFFF
 1487 1045 488D8D98 		leaq	-3688(%rbp), %rcx
 1487      F1FFFF
 1488 104c BA0A0000 		movl	$10, %edx
 1488      00
 1489 1051 4889CE   		movq	%rcx, %rsi
 1490 1054 4889C7   		movq	%rax, %rdi
 1491 1057 E8000000 		call	strtoul@PLT
 1491      00
 1492 105c 888582F1 		movb	%al, -3710(%rbp)
 1492      FFFF
 330:prog.c        **** 	SET_BIT(initPort, initBit, PIN_INPUT, "xProgram");
 1493              		.loc 2 330 2 is_stmt 1 discriminator 12
 1494 1062 0FB68581 		movzbl	-3711(%rbp), %eax
 1494      F1FFFF
 1495 1069 0FB69582 		movzbl	-3710(%rbp), %edx
 1495      F1FFFF
 1496 1070 4863D2   		movslq	%edx, %rdx
 1497 1073 4898     		cltq
 1498 1075 48C1E005 		salq	$5, %rax
 1499 1079 4801D0   		addq	%rdx, %rax
 1500 107c 8B8485A0 		movl	-3680(%rbp,%rax,4), %eax
 1500      F1FFFF
 1501 1083 85C0     		testl	%eax, %eax
 1502 1085 7469     		je	.L88
 1503              		.loc 2 330 2 is_stmt 0 discriminator 1
 1504 1087 488B8598 		movq	-3688(%rbp), %rax
 1504      F1FFFF
 1505 108e 482B8558 		subq	-3752(%rbp), %rax
 1505      F1FFFF
 1506 1095 4883E801 		subq	$1, %rax
 1507 1099 4889C7   		movq	%rax, %rdi
 1508 109c E82AF1FF 		call	spaces
 1508      FF
 1509 10a1 4889C1   		movq	%rax, %rcx
 1510 10a4 0FB69582 		movzbl	-3710(%rbp), %edx
 1510      F1FFFF
 1511 10ab 0FB68581 		movzbl	-3711(%rbp), %eax
 1511      F1FFFF
 1512 10b2 8D7041   		leal	65(%rax), %esi
 1513 10b5 488BBD58 		movq	-3752(%rbp), %rdi
 1513      F1FFFF
 1514 10bc 488B8548 		movq	-3768(%rbp), %rax
 1514      F1FFFF
 1515 10c3 4989C9   		movq	%rcx, %r9
 1516 10c6 4989F8   		movq	%rdi, %r8
 1517 10c9 89D1     		movl	%edx, %ecx
 1518 10cb 89F2     		movl	%esi, %edx
 1519 10cd 488D3500 		leaq	.LC16(%rip), %rsi
 1519      000000
 1520 10d4 4889C7   		movq	%rax, %rdi
 1521 10d7 B8000000 		movl	$0, %eax
 1521      00
 1522 10dc E8000000 		call	errRender@PLT
 1522      00
 1523 10e1 C78588F1 		movl	$11, -3704(%rbp)
 1523      FFFF0B00 
 1523      0000
 1524 10eb E9A01500 		jmp	.L72
 1524      00
 1525              	.L88:
 1526              		.loc 2 330 2 discriminator 2
 1527 10f0 0FB68581 		movzbl	-3711(%rbp), %eax
 1527      F1FFFF
 1528 10f7 0FB69582 		movzbl	-3710(%rbp), %edx
 1528      F1FFFF
 1529 10fe 4863D2   		movslq	%edx, %rdx
 1530 1101 4898     		cltq
 1531 1103 48C1E005 		salq	$5, %rax
 1532 1107 4801D0   		addq	%rdx, %rax
 1533 110a C78485A0 		movl	$3, -3680(%rbp,%rax,4)
 1533      F1FFFF03 
 1533      000000
 331:prog.c        **** 
 332:prog.c        **** 	GET_PAIR(donePort, doneBit, "xProgram");
 1534              		.loc 2 332 2 is_stmt 1 discriminator 2
 1535 1115 488B8598 		movq	-3688(%rbp), %rax
 1535      F1FFFF
 1536 111c 0FB600   		movzbl	(%rax), %eax
 1537 111f 88857EF1 		movb	%al, -3714(%rbp)
 1537      FFFF
 1538 1125 80BD7EF1 		cmpb	$0, -3714(%rbp)
 1538      FFFF00
 1539 112c 754A     		jne	.L89
 1540              		.loc 2 332 2 is_stmt 0 discriminator 1
 1541 112e 488B8598 		movq	-3688(%rbp), %rax
 1541      F1FFFF
 1542 1135 482B8558 		subq	-3752(%rbp), %rax
 1542      F1FFFF
 1543 113c 4889C7   		movq	%rax, %rdi
 1544 113f E887F0FF 		call	spaces
 1544      FF
 1545 1144 4889C1   		movq	%rax, %rcx
 1546 1147 488B9558 		movq	-3752(%rbp), %rdx
 1546      F1FFFF
 1547 114e 488B8548 		movq	-3768(%rbp), %rax
 1547      F1FFFF
 1548 1155 488D3500 		leaq	.LC12(%rip), %rsi
 1548      000000
 1549 115c 4889C7   		movq	%rax, %rdi
 1550 115f B8000000 		movl	$0, %eax
 1550      00
 1551 1164 E8000000 		call	errRender@PLT
 1551      00
 1552 1169 C78588F1 		movl	$11, -3704(%rbp)
 1552      FFFF0B00 
 1552      0000
 1553 1173 E9181500 		jmp	.L72
 1553      00
 1554              	.L89:
 1555              		.loc 2 332 2 discriminator 2
 1556 1178 80BD7EF1 		cmpb	$64, -3714(%rbp)
 1556      FFFF40
 1557 117f 7E09     		jle	.L90
 1558              		.loc 2 332 2 discriminator 4
 1559 1181 80BD7EF1 		cmpb	$90, -3714(%rbp)
 1559      FFFF5A
 1560 1188 7E4A     		jle	.L91
 1561              	.L90:
 1562              		.loc 2 332 2 discriminator 5
 1563 118a 488B8598 		movq	-3688(%rbp), %rax
 1563      F1FFFF
 1564 1191 482B8558 		subq	-3752(%rbp), %rax
 1564      F1FFFF
 1565 1198 4889C7   		movq	%rax, %rdi
 1566 119b E82BF0FF 		call	spaces
 1566      FF
 1567 11a0 4889C1   		movq	%rax, %rcx
 1568 11a3 488B9558 		movq	-3752(%rbp), %rdx
 1568      F1FFFF
 1569 11aa 488B8548 		movq	-3768(%rbp), %rax
 1569      F1FFFF
 1570 11b1 488D3500 		leaq	.LC14(%rip), %rsi
 1570      000000
 1571 11b8 4889C7   		movq	%rax, %rdi
 1572 11bb B8000000 		movl	$0, %eax
 1572      00
 1573 11c0 E8000000 		call	errRender@PLT
 1573      00
 1574 11c5 C78588F1 		movl	$11, -3704(%rbp)
 1574      FFFF0B00 
 1574      0000
 1575 11cf E9BC1400 		jmp	.L72
 1575      00
 1576              	.L91:
 1577              		.loc 2 332 2 discriminator 6
 1578 11d4 0FB6857E 		movzbl	-3714(%rbp), %eax
 1578      F1FFFF
 1579 11db 83E841   		subl	$65, %eax
 1580 11de 888583F1 		movb	%al, -3709(%rbp)
 1580      FFFF
 1581 11e4 488B8598 		movq	-3688(%rbp), %rax
 1581      F1FFFF
 1582 11eb 4883C001 		addq	$1, %rax
 1583 11ef 48898598 		movq	%rax, -3688(%rbp)
 1583      F1FFFF
 1584 11f6 488B8598 		movq	-3688(%rbp), %rax
 1584      F1FFFF
 1585 11fd 0FB600   		movzbl	(%rax), %eax
 1586 1200 88857EF1 		movb	%al, -3714(%rbp)
 1586      FFFF
 1587 1206 80BD7EF1 		cmpb	$0, -3714(%rbp)
 1587      FFFF00
 1588 120d 754A     		jne	.L92
 1589              		.loc 2 332 2 discriminator 7
 1590 120f 488B8598 		movq	-3688(%rbp), %rax
 1590      F1FFFF
 1591 1216 482B8558 		subq	-3752(%rbp), %rax
 1591      F1FFFF
 1592 121d 4889C7   		movq	%rax, %rdi
 1593 1220 E8A6EFFF 		call	spaces
 1593      FF
 1594 1225 4889C1   		movq	%rax, %rcx
 1595 1228 488B9558 		movq	-3752(%rbp), %rdx
 1595      F1FFFF
 1596 122f 488B8548 		movq	-3768(%rbp), %rax
 1596      F1FFFF
 1597 1236 488D3500 		leaq	.LC12(%rip), %rsi
 1597      000000
 1598 123d 4889C7   		movq	%rax, %rdi
 1599 1240 B8000000 		movl	$0, %eax
 1599      00
 1600 1245 E8000000 		call	errRender@PLT
 1600      00
 1601 124a C78588F1 		movl	$11, -3704(%rbp)
 1601      FFFF0B00 
 1601      0000
 1602 1254 E9371400 		jmp	.L72
 1602      00
 1603              	.L92:
 1604              		.loc 2 332 2 discriminator 8
 1605 1259 80BD7EF1 		cmpb	$47, -3714(%rbp)
 1605      FFFF2F
 1606 1260 7E09     		jle	.L93
 1607              		.loc 2 332 2 discriminator 10
 1608 1262 80BD7EF1 		cmpb	$57, -3714(%rbp)
 1608      FFFF39
 1609 1269 7E4A     		jle	.L94
 1610              	.L93:
 1611              		.loc 2 332 2 discriminator 11
 1612 126b 488B8598 		movq	-3688(%rbp), %rax
 1612      F1FFFF
 1613 1272 482B8558 		subq	-3752(%rbp), %rax
 1613      F1FFFF
 1614 1279 4889C7   		movq	%rax, %rdi
 1615 127c E84AEFFF 		call	spaces
 1615      FF
 1616 1281 4889C1   		movq	%rax, %rcx
 1617 1284 488B9558 		movq	-3752(%rbp), %rdx
 1617      F1FFFF
 1618 128b 488B8548 		movq	-3768(%rbp), %rax
 1618      F1FFFF
 1619 1292 488D3500 		leaq	.LC15(%rip), %rsi
 1619      000000
 1620 1299 4889C7   		movq	%rax, %rdi
 1621 129c B8000000 		movl	$0, %eax
 1621      00
 1622 12a1 E8000000 		call	errRender@PLT
 1622      00
 1623 12a6 C78588F1 		movl	$11, -3704(%rbp)
 1623      FFFF0B00 
 1623      0000
 1624 12b0 E9DB1300 		jmp	.L72
 1624      00
 1625              	.L94:
 1626              		.loc 2 332 2 discriminator 12
 1627 12b5 488B8598 		movq	-3688(%rbp), %rax
 1627      F1FFFF
 1628 12bc 488D8D98 		leaq	-3688(%rbp), %rcx
 1628      F1FFFF
 1629 12c3 BA0A0000 		movl	$10, %edx
 1629      00
 1630 12c8 4889CE   		movq	%rcx, %rsi
 1631 12cb 4889C7   		movq	%rax, %rdi
 1632 12ce E8000000 		call	strtoul@PLT
 1632      00
 1633 12d3 888584F1 		movb	%al, -3708(%rbp)
 1633      FFFF
 333:prog.c        **** 	SET_BIT(donePort, doneBit, PIN_INPUT, "xProgram");
 1634              		.loc 2 333 2 is_stmt 1 discriminator 12
 1635 12d9 0FB68583 		movzbl	-3709(%rbp), %eax
 1635      F1FFFF
 1636 12e0 0FB69584 		movzbl	-3708(%rbp), %edx
 1636      F1FFFF
 1637 12e7 4863D2   		movslq	%edx, %rdx
 1638 12ea 4898     		cltq
 1639 12ec 48C1E005 		salq	$5, %rax
 1640 12f0 4801D0   		addq	%rdx, %rax
 1641 12f3 8B8485A0 		movl	-3680(%rbp,%rax,4), %eax
 1641      F1FFFF
 1642 12fa 85C0     		testl	%eax, %eax
 1643 12fc 7469     		je	.L95
 1644              		.loc 2 333 2 is_stmt 0 discriminator 1
 1645 12fe 488B8598 		movq	-3688(%rbp), %rax
 1645      F1FFFF
 1646 1305 482B8558 		subq	-3752(%rbp), %rax
 1646      F1FFFF
 1647 130c 4883E801 		subq	$1, %rax
 1648 1310 4889C7   		movq	%rax, %rdi
 1649 1313 E8B3EEFF 		call	spaces
 1649      FF
 1650 1318 4889C1   		movq	%rax, %rcx
 1651 131b 0FB69584 		movzbl	-3708(%rbp), %edx
 1651      F1FFFF
 1652 1322 0FB68583 		movzbl	-3709(%rbp), %eax
 1652      F1FFFF
 1653 1329 8D7041   		leal	65(%rax), %esi
 1654 132c 488BBD58 		movq	-3752(%rbp), %rdi
 1654      F1FFFF
 1655 1333 488B8548 		movq	-3768(%rbp), %rax
 1655      F1FFFF
 1656 133a 4989C9   		movq	%rcx, %r9
 1657 133d 4989F8   		movq	%rdi, %r8
 1658 1340 89D1     		movl	%edx, %ecx
 1659 1342 89F2     		movl	%esi, %edx
 1660 1344 488D3500 		leaq	.LC16(%rip), %rsi
 1660      000000
 1661 134b 4889C7   		movq	%rax, %rdi
 1662 134e B8000000 		movl	$0, %eax
 1662      00
 1663 1353 E8000000 		call	errRender@PLT
 1663      00
 1664 1358 C78588F1 		movl	$11, -3704(%rbp)
 1664      FFFF0B00 
 1664      0000
 1665 1362 E9291300 		jmp	.L72
 1665      00
 1666              	.L95:
 1667              		.loc 2 333 2 discriminator 2
 1668 1367 0FB68583 		movzbl	-3709(%rbp), %eax
 1668      F1FFFF
 1669 136e 0FB69584 		movzbl	-3708(%rbp), %edx
 1669      F1FFFF
 1670 1375 4863D2   		movslq	%edx, %rdx
 1671 1378 4898     		cltq
 1672 137a 48C1E005 		salq	$5, %rax
 1673 137e 4801D0   		addq	%rdx, %rax
 1674 1381 C78485A0 		movl	$3, -3680(%rbp,%rax,4)
 1674      F1FFFF03 
 1674      000000
 334:prog.c        **** 
 335:prog.c        **** 	GET_PAIR(cclkPort, cclkBit, "xProgram");
 1675              		.loc 2 335 2 is_stmt 1 discriminator 2
 1676 138c 488B8598 		movq	-3688(%rbp), %rax
 1676      F1FFFF
 1677 1393 0FB600   		movzbl	(%rax), %eax
 1678 1396 88857EF1 		movb	%al, -3714(%rbp)
 1678      FFFF
 1679 139c 80BD7EF1 		cmpb	$0, -3714(%rbp)
 1679      FFFF00
 1680 13a3 754A     		jne	.L96
 1681              		.loc 2 335 2 is_stmt 0 discriminator 1
 1682 13a5 488B8598 		movq	-3688(%rbp), %rax
 1682      F1FFFF
 1683 13ac 482B8558 		subq	-3752(%rbp), %rax
 1683      F1FFFF
 1684 13b3 4889C7   		movq	%rax, %rdi
 1685 13b6 E810EEFF 		call	spaces
 1685      FF
 1686 13bb 4889C1   		movq	%rax, %rcx
 1687 13be 488B9558 		movq	-3752(%rbp), %rdx
 1687      F1FFFF
 1688 13c5 488B8548 		movq	-3768(%rbp), %rax
 1688      F1FFFF
 1689 13cc 488D3500 		leaq	.LC12(%rip), %rsi
 1689      000000
 1690 13d3 4889C7   		movq	%rax, %rdi
 1691 13d6 B8000000 		movl	$0, %eax
 1691      00
 1692 13db E8000000 		call	errRender@PLT
 1692      00
 1693 13e0 C78588F1 		movl	$11, -3704(%rbp)
 1693      FFFF0B00 
 1693      0000
 1694 13ea E9A11200 		jmp	.L72
 1694      00
 1695              	.L96:
 1696              		.loc 2 335 2 discriminator 2
 1697 13ef 80BD7EF1 		cmpb	$64, -3714(%rbp)
 1697      FFFF40
 1698 13f6 7E09     		jle	.L97
 1699              		.loc 2 335 2 discriminator 4
 1700 13f8 80BD7EF1 		cmpb	$90, -3714(%rbp)
 1700      FFFF5A
 1701 13ff 7E4A     		jle	.L98
 1702              	.L97:
 1703              		.loc 2 335 2 discriminator 5
 1704 1401 488B8598 		movq	-3688(%rbp), %rax
 1704      F1FFFF
 1705 1408 482B8558 		subq	-3752(%rbp), %rax
 1705      F1FFFF
 1706 140f 4889C7   		movq	%rax, %rdi
 1707 1412 E8B4EDFF 		call	spaces
 1707      FF
 1708 1417 4889C1   		movq	%rax, %rcx
 1709 141a 488B9558 		movq	-3752(%rbp), %rdx
 1709      F1FFFF
 1710 1421 488B8548 		movq	-3768(%rbp), %rax
 1710      F1FFFF
 1711 1428 488D3500 		leaq	.LC14(%rip), %rsi
 1711      000000
 1712 142f 4889C7   		movq	%rax, %rdi
 1713 1432 B8000000 		movl	$0, %eax
 1713      00
 1714 1437 E8000000 		call	errRender@PLT
 1714      00
 1715 143c C78588F1 		movl	$11, -3704(%rbp)
 1715      FFFF0B00 
 1715      0000
 1716 1446 E9451200 		jmp	.L72
 1716      00
 1717              	.L98:
 1718              		.loc 2 335 2 discriminator 6
 1719 144b 0FB6857E 		movzbl	-3714(%rbp), %eax
 1719      F1FFFF
 1720 1452 83E841   		subl	$65, %eax
 1721 1455 888585F1 		movb	%al, -3707(%rbp)
 1721      FFFF
 1722 145b 488B8598 		movq	-3688(%rbp), %rax
 1722      F1FFFF
 1723 1462 4883C001 		addq	$1, %rax
 1724 1466 48898598 		movq	%rax, -3688(%rbp)
 1724      F1FFFF
 1725 146d 488B8598 		movq	-3688(%rbp), %rax
 1725      F1FFFF
 1726 1474 0FB600   		movzbl	(%rax), %eax
 1727 1477 88857EF1 		movb	%al, -3714(%rbp)
 1727      FFFF
 1728 147d 80BD7EF1 		cmpb	$0, -3714(%rbp)
 1728      FFFF00
 1729 1484 754A     		jne	.L99
 1730              		.loc 2 335 2 discriminator 7
 1731 1486 488B8598 		movq	-3688(%rbp), %rax
 1731      F1FFFF
 1732 148d 482B8558 		subq	-3752(%rbp), %rax
 1732      F1FFFF
 1733 1494 4889C7   		movq	%rax, %rdi
 1734 1497 E82FEDFF 		call	spaces
 1734      FF
 1735 149c 4889C1   		movq	%rax, %rcx
 1736 149f 488B9558 		movq	-3752(%rbp), %rdx
 1736      F1FFFF
 1737 14a6 488B8548 		movq	-3768(%rbp), %rax
 1737      F1FFFF
 1738 14ad 488D3500 		leaq	.LC12(%rip), %rsi
 1738      000000
 1739 14b4 4889C7   		movq	%rax, %rdi
 1740 14b7 B8000000 		movl	$0, %eax
 1740      00
 1741 14bc E8000000 		call	errRender@PLT
 1741      00
 1742 14c1 C78588F1 		movl	$11, -3704(%rbp)
 1742      FFFF0B00 
 1742      0000
 1743 14cb E9C01100 		jmp	.L72
 1743      00
 1744              	.L99:
 1745              		.loc 2 335 2 discriminator 8
 1746 14d0 80BD7EF1 		cmpb	$47, -3714(%rbp)
 1746      FFFF2F
 1747 14d7 7E09     		jle	.L100
 1748              		.loc 2 335 2 discriminator 10
 1749 14d9 80BD7EF1 		cmpb	$57, -3714(%rbp)
 1749      FFFF39
 1750 14e0 7E4A     		jle	.L101
 1751              	.L100:
 1752              		.loc 2 335 2 discriminator 11
 1753 14e2 488B8598 		movq	-3688(%rbp), %rax
 1753      F1FFFF
 1754 14e9 482B8558 		subq	-3752(%rbp), %rax
 1754      F1FFFF
 1755 14f0 4889C7   		movq	%rax, %rdi
 1756 14f3 E8D3ECFF 		call	spaces
 1756      FF
 1757 14f8 4889C1   		movq	%rax, %rcx
 1758 14fb 488B9558 		movq	-3752(%rbp), %rdx
 1758      F1FFFF
 1759 1502 488B8548 		movq	-3768(%rbp), %rax
 1759      F1FFFF
 1760 1509 488D3500 		leaq	.LC15(%rip), %rsi
 1760      000000
 1761 1510 4889C7   		movq	%rax, %rdi
 1762 1513 B8000000 		movl	$0, %eax
 1762      00
 1763 1518 E8000000 		call	errRender@PLT
 1763      00
 1764 151d C78588F1 		movl	$11, -3704(%rbp)
 1764      FFFF0B00 
 1764      0000
 1765 1527 E9641100 		jmp	.L72
 1765      00
 1766              	.L101:
 1767              		.loc 2 335 2 discriminator 12
 1768 152c 488B8598 		movq	-3688(%rbp), %rax
 1768      F1FFFF
 1769 1533 488D8D98 		leaq	-3688(%rbp), %rcx
 1769      F1FFFF
 1770 153a BA0A0000 		movl	$10, %edx
 1770      00
 1771 153f 4889CE   		movq	%rcx, %rsi
 1772 1542 4889C7   		movq	%rax, %rdi
 1773 1545 E8000000 		call	strtoul@PLT
 1773      00
 1774 154a 888586F1 		movb	%al, -3706(%rbp)
 1774      FFFF
 336:prog.c        **** 	SET_BIT(cclkPort, cclkBit, PIN_LOW, "xProgram");
 1775              		.loc 2 336 2 is_stmt 1 discriminator 12
 1776 1550 0FB68585 		movzbl	-3707(%rbp), %eax
 1776      F1FFFF
 1777 1557 0FB69586 		movzbl	-3706(%rbp), %edx
 1777      F1FFFF
 1778 155e 4863D2   		movslq	%edx, %rdx
 1779 1561 4898     		cltq
 1780 1563 48C1E005 		salq	$5, %rax
 1781 1567 4801D0   		addq	%rdx, %rax
 1782 156a 8B8485A0 		movl	-3680(%rbp,%rax,4), %eax
 1782      F1FFFF
 1783 1571 85C0     		testl	%eax, %eax
 1784 1573 7469     		je	.L102
 1785              		.loc 2 336 2 is_stmt 0 discriminator 1
 1786 1575 488B8598 		movq	-3688(%rbp), %rax
 1786      F1FFFF
 1787 157c 482B8558 		subq	-3752(%rbp), %rax
 1787      F1FFFF
 1788 1583 4883E801 		subq	$1, %rax
 1789 1587 4889C7   		movq	%rax, %rdi
 1790 158a E83CECFF 		call	spaces
 1790      FF
 1791 158f 4889C1   		movq	%rax, %rcx
 1792 1592 0FB69586 		movzbl	-3706(%rbp), %edx
 1792      F1FFFF
 1793 1599 0FB68585 		movzbl	-3707(%rbp), %eax
 1793      F1FFFF
 1794 15a0 8D7041   		leal	65(%rax), %esi
 1795 15a3 488BBD58 		movq	-3752(%rbp), %rdi
 1795      F1FFFF
 1796 15aa 488B8548 		movq	-3768(%rbp), %rax
 1796      F1FFFF
 1797 15b1 4989C9   		movq	%rcx, %r9
 1798 15b4 4989F8   		movq	%rdi, %r8
 1799 15b7 89D1     		movl	%edx, %ecx
 1800 15b9 89F2     		movl	%esi, %edx
 1801 15bb 488D3500 		leaq	.LC16(%rip), %rsi
 1801      000000
 1802 15c2 4889C7   		movq	%rax, %rdi
 1803 15c5 B8000000 		movl	$0, %eax
 1803      00
 1804 15ca E8000000 		call	errRender@PLT
 1804      00
 1805 15cf C78588F1 		movl	$11, -3704(%rbp)
 1805      FFFF0B00 
 1805      0000
 1806 15d9 E9B21000 		jmp	.L72
 1806      00
 1807              	.L102:
 1808              		.loc 2 336 2 discriminator 2
 1809 15de 0FB68585 		movzbl	-3707(%rbp), %eax
 1809      F1FFFF
 1810 15e5 0FB69586 		movzbl	-3706(%rbp), %edx
 1810      F1FFFF
 1811 15ec 4863D2   		movslq	%edx, %rdx
 1812 15ef 4898     		cltq
 1813 15f1 48C1E005 		salq	$5, %rax
 1814 15f5 4801D0   		addq	%rdx, %rax
 1815 15f8 C78485A0 		movl	$2, -3680(%rbp,%rax,4)
 1815      F1FFFF02 
 1815      000000
 337:prog.c        **** 
 338:prog.c        **** 	GET_PORT(dataPort, "xProgram");
 1816              		.loc 2 338 2 is_stmt 1 discriminator 2
 1817 1603 488B8598 		movq	-3688(%rbp), %rax
 1817      F1FFFF
 1818 160a 0FB600   		movzbl	(%rax), %eax
 1819 160d 88857EF1 		movb	%al, -3714(%rbp)
 1819      FFFF
 1820 1613 80BD7EF1 		cmpb	$0, -3714(%rbp)
 1820      FFFF00
 1821 161a 754A     		jne	.L103
 1822              		.loc 2 338 2 is_stmt 0 discriminator 1
 1823 161c 488B8598 		movq	-3688(%rbp), %rax
 1823      F1FFFF
 1824 1623 482B8558 		subq	-3752(%rbp), %rax
 1824      F1FFFF
 1825 162a 4889C7   		movq	%rax, %rdi
 1826 162d E899EBFF 		call	spaces
 1826      FF
 1827 1632 4889C1   		movq	%rax, %rcx
 1828 1635 488B9558 		movq	-3752(%rbp), %rdx
 1828      F1FFFF
 1829 163c 488B8548 		movq	-3768(%rbp), %rax
 1829      F1FFFF
 1830 1643 488D3500 		leaq	.LC12(%rip), %rsi
 1830      000000
 1831 164a 4889C7   		movq	%rax, %rdi
 1832 164d B8000000 		movl	$0, %eax
 1832      00
 1833 1652 E8000000 		call	errRender@PLT
 1833      00
 1834 1657 C78588F1 		movl	$11, -3704(%rbp)
 1834      FFFF0B00 
 1834      0000
 1835 1661 E92A1000 		jmp	.L72
 1835      00
 1836              	.L103:
 1837              		.loc 2 338 2 discriminator 2
 1838 1666 80BD7EF1 		cmpb	$64, -3714(%rbp)
 1838      FFFF40
 1839 166d 7E09     		jle	.L104
 1840              		.loc 2 338 2 discriminator 4
 1841 166f 80BD7EF1 		cmpb	$90, -3714(%rbp)
 1841      FFFF5A
 1842 1676 7E4A     		jle	.L105
 1843              	.L104:
 1844              		.loc 2 338 2 discriminator 5
 1845 1678 488B8598 		movq	-3688(%rbp), %rax
 1845      F1FFFF
 1846 167f 482B8558 		subq	-3752(%rbp), %rax
 1846      F1FFFF
 1847 1686 4889C7   		movq	%rax, %rdi
 1848 1689 E83DEBFF 		call	spaces
 1848      FF
 1849 168e 4889C1   		movq	%rax, %rcx
 1850 1691 488B9558 		movq	-3752(%rbp), %rdx
 1850      F1FFFF
 1851 1698 488B8548 		movq	-3768(%rbp), %rax
 1851      F1FFFF
 1852 169f 488D3500 		leaq	.LC14(%rip), %rsi
 1852      000000
 1853 16a6 4889C7   		movq	%rax, %rdi
 1854 16a9 B8000000 		movl	$0, %eax
 1854      00
 1855 16ae E8000000 		call	errRender@PLT
 1855      00
 1856 16b3 C78588F1 		movl	$11, -3704(%rbp)
 1856      FFFF0B00 
 1856      0000
 1857 16bd E9CE0F00 		jmp	.L72
 1857      00
 1858              	.L105:
 1859              		.loc 2 338 2 discriminator 6
 1860 16c2 0FB6857E 		movzbl	-3714(%rbp), %eax
 1860      F1FFFF
 1861 16c9 83E841   		subl	$65, %eax
 1862 16cc 888587F1 		movb	%al, -3705(%rbp)
 1862      FFFF
 1863 16d2 488B8598 		movq	-3688(%rbp), %rax
 1863      F1FFFF
 1864 16d9 4883C001 		addq	$1, %rax
 1865 16dd 48898598 		movq	%rax, -3688(%rbp)
 1865      F1FFFF
 339:prog.c        **** 	if ( progOp == PROG_PARALLEL ) {
 1866              		.loc 2 339 5 is_stmt 1 discriminator 6
 1867 16e4 83BD64F1 		cmpl	$5, -3740(%rbp)
 1867      FFFF05
 1868 16eb 0F85FC01 		jne	.L106
 1868      0000
 340:prog.c        **** 		for ( i = 0; i < 8; i++ ) {
 1869              		.loc 2 340 11
 1870 16f1 C7858CF1 		movl	$0, -3700(%rbp)
 1870      FFFF0000 
 1870      0000
 1871              		.loc 2 340 3
 1872 16fb E9C20100 		jmp	.L107
 1872      00
 1873              	.L112:
 341:prog.c        **** 			GET_DIGIT(dataBit[i], "xProgram");
 1874              		.loc 2 341 4
 1875 1700 488B8598 		movq	-3688(%rbp), %rax
 1875      F1FFFF
 1876 1707 0FB600   		movzbl	(%rax), %eax
 1877 170a 88857EF1 		movb	%al, -3714(%rbp)
 1877      FFFF
 1878 1710 80BD7EF1 		cmpb	$0, -3714(%rbp)
 1878      FFFF00
 1879 1717 754A     		jne	.L108
 1880              		.loc 2 341 4 is_stmt 0 discriminator 1
 1881 1719 488B8598 		movq	-3688(%rbp), %rax
 1881      F1FFFF
 1882 1720 482B8558 		subq	-3752(%rbp), %rax
 1882      F1FFFF
 1883 1727 4889C7   		movq	%rax, %rdi
 1884 172a E89CEAFF 		call	spaces
 1884      FF
 1885 172f 4889C1   		movq	%rax, %rcx
 1886 1732 488B9558 		movq	-3752(%rbp), %rdx
 1886      F1FFFF
 1887 1739 488B8548 		movq	-3768(%rbp), %rax
 1887      F1FFFF
 1888 1740 488D3500 		leaq	.LC12(%rip), %rsi
 1888      000000
 1889 1747 4889C7   		movq	%rax, %rdi
 1890 174a B8000000 		movl	$0, %eax
 1890      00
 1891 174f E8000000 		call	errRender@PLT
 1891      00
 1892 1754 C78588F1 		movl	$11, -3704(%rbp)
 1892      FFFF0B00 
 1892      0000
 1893 175e E92D0F00 		jmp	.L72
 1893      00
 1894              	.L108:
 1895              		.loc 2 341 4 discriminator 2
 1896 1763 80BD7EF1 		cmpb	$47, -3714(%rbp)
 1896      FFFF2F
 1897 176a 7E09     		jle	.L109
 1898              		.loc 2 341 4 discriminator 4
 1899 176c 80BD7EF1 		cmpb	$55, -3714(%rbp)
 1899      FFFF37
 1900 1773 7E42     		jle	.L110
 1901              	.L109:
 1902              		.loc 2 341 4 discriminator 5
 1903 1775 488B8598 		movq	-3688(%rbp), %rax
 1903      F1FFFF
 1904 177c 482B8558 		subq	-3752(%rbp), %rax
 1904      F1FFFF
 1905 1783 4889C1   		movq	%rax, %rcx
 1906 1786 0FBE957E 		movsbl	-3714(%rbp), %edx
 1906      F1FFFF
 1907 178d 488B8548 		movq	-3768(%rbp), %rax
 1907      F1FFFF
 1908 1794 488D3500 		leaq	.LC17(%rip), %rsi
 1908      000000
 1909 179b 4889C7   		movq	%rax, %rdi
 1910 179e B8000000 		movl	$0, %eax
 1910      00
 1911 17a3 E8000000 		call	errRender@PLT
 1911      00
 1912 17a8 C78588F1 		movl	$11, -3704(%rbp)
 1912      FFFF0B00 
 1912      0000
 1913 17b2 E9D90E00 		jmp	.L72
 1913      00
 1914              	.L110:
 1915              		.loc 2 341 4 discriminator 6
 1916 17b7 0FB6857E 		movzbl	-3714(%rbp), %eax
 1916      F1FFFF
 1917 17be 8D50D0   		leal	-48(%rax), %edx
 1918 17c1 8B858CF1 		movl	-3700(%rbp), %eax
 1918      FFFF
 1919 17c7 4898     		cltq
 1920 17c9 889405A0 		movb	%dl, -352(%rbp,%rax)
 1920      FEFFFF
 1921 17d0 488B8598 		movq	-3688(%rbp), %rax
 1921      F1FFFF
 1922 17d7 4883C001 		addq	$1, %rax
 1923 17db 48898598 		movq	%rax, -3688(%rbp)
 1923      F1FFFF
 342:prog.c        **** 			SET_BIT(dataPort, dataBit[i], PIN_LOW, "xProgram");
 1924              		.loc 2 342 4 is_stmt 1 discriminator 6
 1925 17e2 0FB69587 		movzbl	-3705(%rbp), %edx
 1925      F1FFFF
 1926 17e9 8B858CF1 		movl	-3700(%rbp), %eax
 1926      FFFF
 1927 17ef 4898     		cltq
 1928 17f1 0FB68405 		movzbl	-352(%rbp,%rax), %eax
 1928      A0FEFFFF 
 1929 17f9 0FB6C0   		movzbl	%al, %eax
 1930 17fc 4863C8   		movslq	%eax, %rcx
 1931 17ff 4863C2   		movslq	%edx, %rax
 1932 1802 48C1E005 		salq	$5, %rax
 1933 1806 4801C8   		addq	%rcx, %rax
 1934 1809 8B8485A0 		movl	-3680(%rbp,%rax,4), %eax
 1934      F1FFFF
 1935 1810 85C0     		testl	%eax, %eax
 1936 1812 7475     		je	.L111
 1937              		.loc 2 342 4 is_stmt 0 discriminator 1
 1938 1814 488B8598 		movq	-3688(%rbp), %rax
 1938      F1FFFF
 1939 181b 482B8558 		subq	-3752(%rbp), %rax
 1939      F1FFFF
 1940 1822 4883E801 		subq	$1, %rax
 1941 1826 4889C7   		movq	%rax, %rdi
 1942 1829 E89DE9FF 		call	spaces
 1942      FF
 1943 182e 4889C1   		movq	%rax, %rcx
 1944 1831 8B858CF1 		movl	-3700(%rbp), %eax
 1944      FFFF
 1945 1837 4898     		cltq
 1946 1839 0FB68405 		movzbl	-352(%rbp,%rax), %eax
 1946      A0FEFFFF 
 1947 1841 0FB6D0   		movzbl	%al, %edx
 1948 1844 0FB68587 		movzbl	-3705(%rbp), %eax
 1948      F1FFFF
 1949 184b 8D7041   		leal	65(%rax), %esi
 1950 184e 488BBD58 		movq	-3752(%rbp), %rdi
 1950      F1FFFF
 1951 1855 488B8548 		movq	-3768(%rbp), %rax
 1951      F1FFFF
 1952 185c 4989C9   		movq	%rcx, %r9
 1953 185f 4989F8   		movq	%rdi, %r8
 1954 1862 89D1     		movl	%edx, %ecx
 1955 1864 89F2     		movl	%esi, %edx
 1956 1866 488D3500 		leaq	.LC16(%rip), %rsi
 1956      000000
 1957 186d 4889C7   		movq	%rax, %rdi
 1958 1870 B8000000 		movl	$0, %eax
 1958      00
 1959 1875 E8000000 		call	errRender@PLT
 1959      00
 1960 187a C78588F1 		movl	$11, -3704(%rbp)
 1960      FFFF0B00 
 1960      0000
 1961 1884 E9070E00 		jmp	.L72
 1961      00
 1962              	.L111:
 1963              		.loc 2 342 4 discriminator 2
 1964 1889 0FB69587 		movzbl	-3705(%rbp), %edx
 1964      F1FFFF
 1965 1890 8B858CF1 		movl	-3700(%rbp), %eax
 1965      FFFF
 1966 1896 4898     		cltq
 1967 1898 0FB68405 		movzbl	-352(%rbp,%rax), %eax
 1967      A0FEFFFF 
 1968 18a0 0FB6C0   		movzbl	%al, %eax
 1969 18a3 4863C8   		movslq	%eax, %rcx
 1970 18a6 4863C2   		movslq	%edx, %rax
 1971 18a9 48C1E005 		salq	$5, %rax
 1972 18ad 4801C8   		addq	%rcx, %rax
 1973 18b0 C78485A0 		movl	$2, -3680(%rbp,%rax,4)
 1973      F1FFFF02 
 1973      000000
 340:prog.c        **** 		for ( i = 0; i < 8; i++ ) {
 1974              		.loc 2 340 24 is_stmt 1 discriminator 2
 1975 18bb 83858CF1 		addl	$1, -3700(%rbp)
 1975      FFFF01
 1976              	.L107:
 340:prog.c        **** 		for ( i = 0; i < 8; i++ ) {
 1977              		.loc 2 340 18 discriminator 2
 1978 18c2 83BD8CF1 		cmpl	$7, -3700(%rbp)
 1978      FFFF07
 1979 18c9 0F8E31FE 		jle	.L112
 1979      FFFF
 343:prog.c        **** 		}
 344:prog.c        **** 		makeLookup(dataBit, lookupTable);
 1980              		.loc 2 344 3
 1981 18cf 488D95F0 		leaq	-272(%rbp), %rdx
 1981      FEFFFF
 1982 18d6 488D85A0 		leaq	-352(%rbp), %rax
 1982      FEFFFF
 1983 18dd 4889D6   		movq	%rdx, %rsi
 1984 18e0 4889C7   		movq	%rax, %rdi
 1985 18e3 E8CDEDFF 		call	makeLookup
 1985      FF
 1986 18e8 E9D60100 		jmp	.L113
 1986      00
 1987              	.L106:
 345:prog.c        **** 	} else if ( progOp == PROG_SPI_SEND ) {
 1988              		.loc 2 345 12
 1989 18ed 83BD64F1 		cmpl	$6, -3740(%rbp)
 1989      FFFF06
 1990 18f4 0F85C901 		jne	.L113
 1990      0000
 1991              	.LBB3:
 346:prog.c        **** 		const uint8 bitOrder[8] = {7,6,5,4,3,2,1,0};
 1992              		.loc 2 346 15
 1993 18fa 48B80706 		movabsq	$283686952306183, %rax
 1993      05040302 
 1993      0100
 1994 1904 488985A8 		movq	%rax, -344(%rbp)
 1994      FEFFFF
 347:prog.c        **** 		makeLookup(bitOrder, lookupTable);
 1995              		.loc 2 347 3
 1996 190b 488D95F0 		leaq	-272(%rbp), %rdx
 1996      FEFFFF
 1997 1912 488D85A8 		leaq	-344(%rbp), %rax
 1997      FEFFFF
 1998 1919 4889D6   		movq	%rdx, %rsi
 1999 191c 4889C7   		movq	%rax, %rdi
 2000 191f E891EDFF 		call	makeLookup
 2000      FF
 348:prog.c        **** 		GET_BIT(dataBit[0], "xProgram");
 2001              		.loc 2 348 3
 2002 1924 488B8598 		movq	-3688(%rbp), %rax
 2002      F1FFFF
 2003 192b 0FB600   		movzbl	(%rax), %eax
 2004 192e 88857EF1 		movb	%al, -3714(%rbp)
 2004      FFFF
 2005 1934 80BD7EF1 		cmpb	$0, -3714(%rbp)
 2005      FFFF00
 2006 193b 754A     		jne	.L114
 2007              		.loc 2 348 3 is_stmt 0 discriminator 1
 2008 193d 488B8598 		movq	-3688(%rbp), %rax
 2008      F1FFFF
 2009 1944 482B8558 		subq	-3752(%rbp), %rax
 2009      F1FFFF
 2010 194b 4889C7   		movq	%rax, %rdi
 2011 194e E878E8FF 		call	spaces
 2011      FF
 2012 1953 4889C1   		movq	%rax, %rcx
 2013 1956 488B9558 		movq	-3752(%rbp), %rdx
 2013      F1FFFF
 2014 195d 488B8548 		movq	-3768(%rbp), %rax
 2014      F1FFFF
 2015 1964 488D3500 		leaq	.LC12(%rip), %rsi
 2015      000000
 2016 196b 4889C7   		movq	%rax, %rdi
 2017 196e B8000000 		movl	$0, %eax
 2017      00
 2018 1973 E8000000 		call	errRender@PLT
 2018      00
 2019 1978 C78588F1 		movl	$11, -3704(%rbp)
 2019      FFFF0B00 
 2019      0000
 2020 1982 E9090D00 		jmp	.L72
 2020      00
 2021              	.L114:
 2022              		.loc 2 348 3 discriminator 2
 2023 1987 80BD7EF1 		cmpb	$47, -3714(%rbp)
 2023      FFFF2F
 2024 198e 7E09     		jle	.L116
 2025              		.loc 2 348 3 discriminator 5
 2026 1990 80BD7EF1 		cmpb	$57, -3714(%rbp)
 2026      FFFF39
 2027 1997 7E4A     		jle	.L117
 2028              	.L116:
 2029              		.loc 2 348 3 discriminator 6
 2030 1999 488B8598 		movq	-3688(%rbp), %rax
 2030      F1FFFF
 2031 19a0 482B8558 		subq	-3752(%rbp), %rax
 2031      F1FFFF
 2032 19a7 4889C7   		movq	%rax, %rdi
 2033 19aa E81CE8FF 		call	spaces
 2033      FF
 2034 19af 4889C1   		movq	%rax, %rcx
 2035 19b2 488B9558 		movq	-3752(%rbp), %rdx
 2035      F1FFFF
 2036 19b9 488B8548 		movq	-3768(%rbp), %rax
 2036      F1FFFF
 2037 19c0 488D3500 		leaq	.LC15(%rip), %rsi
 2037      000000
 2038 19c7 4889C7   		movq	%rax, %rdi
 2039 19ca B8000000 		movl	$0, %eax
 2039      00
 2040 19cf E8000000 		call	errRender@PLT
 2040      00
 2041 19d4 C78588F1 		movl	$11, -3704(%rbp)
 2041      FFFF0B00 
 2041      0000
 2042 19de E9AD0C00 		jmp	.L72
 2042      00
 2043              	.L117:
 2044              		.loc 2 348 3 discriminator 7
 2045 19e3 488B8598 		movq	-3688(%rbp), %rax
 2045      F1FFFF
 2046 19ea 488D8D98 		leaq	-3688(%rbp), %rcx
 2046      F1FFFF
 2047 19f1 BA0A0000 		movl	$10, %edx
 2047      00
 2048 19f6 4889CE   		movq	%rcx, %rsi
 2049 19f9 4889C7   		movq	%rax, %rdi
 2050 19fc E8000000 		call	strtoul@PLT
 2050      00
 2051 1a01 8885A0FE 		movb	%al, -352(%rbp)
 2051      FFFF
 349:prog.c        **** 		SET_BIT(dataPort, dataBit[0], PIN_LOW, "xProgram");
 2052              		.loc 2 349 3 is_stmt 1 discriminator 7
 2053 1a07 0FB68587 		movzbl	-3705(%rbp), %eax
 2053      F1FFFF
 2054 1a0e 0FB695A0 		movzbl	-352(%rbp), %edx
 2054      FEFFFF
 2055 1a15 0FB6D2   		movzbl	%dl, %edx
 2056 1a18 4863D2   		movslq	%edx, %rdx
 2057 1a1b 4898     		cltq
 2058 1a1d 48C1E005 		salq	$5, %rax
 2059 1a21 4801D0   		addq	%rdx, %rax
 2060 1a24 8B8485A0 		movl	-3680(%rbp,%rax,4), %eax
 2060      F1FFFF
 2061 1a2b 85C0     		testl	%eax, %eax
 2062 1a2d 746C     		je	.L118
 2063              		.loc 2 349 3 is_stmt 0 discriminator 1
 2064 1a2f 488B8598 		movq	-3688(%rbp), %rax
 2064      F1FFFF
 2065 1a36 482B8558 		subq	-3752(%rbp), %rax
 2065      F1FFFF
 2066 1a3d 4883E801 		subq	$1, %rax
 2067 1a41 4889C7   		movq	%rax, %rdi
 2068 1a44 E882E7FF 		call	spaces
 2068      FF
 2069 1a49 4889C1   		movq	%rax, %rcx
 2070 1a4c 0FB685A0 		movzbl	-352(%rbp), %eax
 2070      FEFFFF
 2071 1a53 0FB6D0   		movzbl	%al, %edx
 2072 1a56 0FB68587 		movzbl	-3705(%rbp), %eax
 2072      F1FFFF
 2073 1a5d 8D7041   		leal	65(%rax), %esi
 2074 1a60 488BBD58 		movq	-3752(%rbp), %rdi
 2074      F1FFFF
 2075 1a67 488B8548 		movq	-3768(%rbp), %rax
 2075      F1FFFF
 2076 1a6e 4989C9   		movq	%rcx, %r9
 2077 1a71 4989F8   		movq	%rdi, %r8
 2078 1a74 89D1     		movl	%edx, %ecx
 2079 1a76 89F2     		movl	%esi, %edx
 2080 1a78 488D3500 		leaq	.LC16(%rip), %rsi
 2080      000000
 2081 1a7f 4889C7   		movq	%rax, %rdi
 2082 1a82 B8000000 		movl	$0, %eax
 2082      00
 2083 1a87 E8000000 		call	errRender@PLT
 2083      00
 2084 1a8c C78588F1 		movl	$11, -3704(%rbp)
 2084      FFFF0B00 
 2084      0000
 2085 1a96 E9F50B00 		jmp	.L72
 2085      00
 2086              	.L118:
 2087              		.loc 2 349 3 discriminator 2
 2088 1a9b 0FB68587 		movzbl	-3705(%rbp), %eax
 2088      F1FFFF
 2089 1aa2 0FB695A0 		movzbl	-352(%rbp), %edx
 2089      FEFFFF
 2090 1aa9 0FB6D2   		movzbl	%dl, %edx
 2091 1aac 4863D2   		movslq	%edx, %rdx
 2092 1aaf 4898     		cltq
 2093 1ab1 48C1E005 		salq	$5, %rax
 2094 1ab5 4801D0   		addq	%rdx, %rax
 2095 1ab8 C78485A0 		movl	$2, -3680(%rbp,%rax,4)
 2095      F1FFFF02 
 2095      000000
 2096              	.L113:
 2097              	.LBE3:
 350:prog.c        **** 	}
 351:prog.c        **** 
 352:prog.c        **** 	GET_CHAR("xProgram");
 2098              		.loc 2 352 2 is_stmt 1
 2099 1ac3 488B8598 		movq	-3688(%rbp), %rax
 2099      F1FFFF
 2100 1aca 0FB600   		movzbl	(%rax), %eax
 2101 1acd 88857EF1 		movb	%al, -3714(%rbp)
 2101      FFFF
 2102 1ad3 80BD7EF1 		cmpb	$0, -3714(%rbp)
 2102      FFFF00
 2103 1ada 754A     		jne	.L119
 2104              		.loc 2 352 2 is_stmt 0 discriminator 1
 2105 1adc 488B8598 		movq	-3688(%rbp), %rax
 2105      F1FFFF
 2106 1ae3 482B8558 		subq	-3752(%rbp), %rax
 2106      F1FFFF
 2107 1aea 4889C7   		movq	%rax, %rdi
 2108 1aed E8D9E6FF 		call	spaces
 2108      FF
 2109 1af2 4889C1   		movq	%rax, %rcx
 2110 1af5 488B9558 		movq	-3752(%rbp), %rdx
 2110      F1FFFF
 2111 1afc 488B8548 		movq	-3768(%rbp), %rax
 2111      F1FFFF
 2112 1b03 488D3500 		leaq	.LC12(%rip), %rsi
 2112      000000
 2113 1b0a 4889C7   		movq	%rax, %rdi
 2114 1b0d B8000000 		movl	$0, %eax
 2114      00
 2115 1b12 E8000000 		call	errRender@PLT
 2115      00
 2116 1b17 C78588F1 		movl	$11, -3704(%rbp)
 2116      FFFF0B00 
 2116      0000
 2117 1b21 E96A0B00 		jmp	.L72
 2117      00
 2118              	.L119:
 353:prog.c        **** 	if ( ch == '[' ) {
 2119              		.loc 2 353 5 is_stmt 1
 2120 1b26 80BD7EF1 		cmpb	$91, -3714(%rbp)
 2120      FFFF5B
 2121 1b2d 0F854101 		jne	.L120
 2121      0000
 354:prog.c        **** 		ptr++;
 2122              		.loc 2 354 6
 2123 1b33 488B8598 		movq	-3688(%rbp), %rax
 2123      F1FFFF
 2124 1b3a 4883C001 		addq	$1, %rax
 2125 1b3e 48898598 		movq	%rax, -3688(%rbp)
 2125      F1FFFF
 355:prog.c        **** 		fStatus = populateMap(portConfig, ptr, &ptr, pinMap, error);
 2126              		.loc 2 355 13
 2127 1b45 488BB598 		movq	-3688(%rbp), %rsi
 2127      F1FFFF
 2128 1b4c 488BBD48 		movq	-3768(%rbp), %rdi
 2128      F1FFFF
 2129 1b53 488D8DA0 		leaq	-3680(%rbp), %rcx
 2129      F1FFFF
 2130 1b5a 488D9598 		leaq	-3688(%rbp), %rdx
 2130      F1FFFF
 2131 1b61 488B8558 		movq	-3752(%rbp), %rax
 2131      F1FFFF
 2132 1b68 4989F8   		movq	%rdi, %r8
 2133 1b6b 4889C7   		movq	%rax, %rdi
 2134 1b6e E884E6FF 		call	populateMap
 2134      FF
 2135 1b73 898590F1 		movl	%eax, -3696(%rbp)
 2135      FFFF
 356:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2136              		.loc 2 356 3
 2137 1b79 83BD90F1 		cmpl	$0, -3696(%rbp)
 2137      FFFF00
 2138 1b80 742A     		je	.L121
 2139              		.loc 2 356 3 is_stmt 0 discriminator 1
 2140 1b82 488B8548 		movq	-3768(%rbp), %rax
 2140      F1FFFF
 2141 1b89 488D1500 		leaq	.LC18(%rip), %rdx
 2141      000000
 2142 1b90 4889D6   		movq	%rdx, %rsi
 2143 1b93 4889C7   		movq	%rax, %rdi
 2144 1b96 E8000000 		call	errPrefix@PLT
 2144      00
 2145 1b9b 8B8590F1 		movl	-3696(%rbp), %eax
 2145      FFFF
 2146 1ba1 898588F1 		movl	%eax, -3704(%rbp)
 2146      FFFF
 2147 1ba7 E9E40A00 		jmp	.L72
 2147      00
 2148              	.L121:
 357:prog.c        **** 		EXPECT_CHAR(']', "xProgram");
 2149              		.loc 2 357 3 is_stmt 1
 2150 1bac 488B8598 		movq	-3688(%rbp), %rax
 2150      F1FFFF
 2151 1bb3 0FB600   		movzbl	(%rax), %eax
 2152 1bb6 88857EF1 		movb	%al, -3714(%rbp)
 2152      FFFF
 2153 1bbc 80BD7EF1 		cmpb	$0, -3714(%rbp)
 2153      FFFF00
 2154 1bc3 754A     		jne	.L122
 2155              		.loc 2 357 3 is_stmt 0 discriminator 1
 2156 1bc5 488B8598 		movq	-3688(%rbp), %rax
 2156      F1FFFF
 2157 1bcc 482B8558 		subq	-3752(%rbp), %rax
 2157      F1FFFF
 2158 1bd3 4889C7   		movq	%rax, %rdi
 2159 1bd6 E8F0E5FF 		call	spaces
 2159      FF
 2160 1bdb 4889C1   		movq	%rax, %rcx
 2161 1bde 488B9558 		movq	-3752(%rbp), %rdx
 2161      F1FFFF
 2162 1be5 488B8548 		movq	-3768(%rbp), %rax
 2162      F1FFFF
 2163 1bec 488D3500 		leaq	.LC12(%rip), %rsi
 2163      000000
 2164 1bf3 4889C7   		movq	%rax, %rdi
 2165 1bf6 B8000000 		movl	$0, %eax
 2165      00
 2166 1bfb E8000000 		call	errRender@PLT
 2166      00
 2167 1c00 C78588F1 		movl	$11, -3704(%rbp)
 2167      FFFF0B00 
 2167      0000
 2168 1c0a E9810A00 		jmp	.L72
 2168      00
 2169              	.L122:
 2170              		.loc 2 357 3 discriminator 2
 2171 1c0f 80BD7EF1 		cmpb	$93, -3714(%rbp)
 2171      FFFF5D
 2172 1c16 744A     		je	.L123
 2173              		.loc 2 357 3 discriminator 3
 2174 1c18 488B8598 		movq	-3688(%rbp), %rax
 2174      F1FFFF
 2175 1c1f 482B8558 		subq	-3752(%rbp), %rax
 2175      F1FFFF
 2176 1c26 4889C7   		movq	%rax, %rdi
 2177 1c29 E89DE5FF 		call	spaces
 2177      FF
 2178 1c2e 4889C1   		movq	%rax, %rcx
 2179 1c31 488B9558 		movq	-3752(%rbp), %rdx
 2179      F1FFFF
 2180 1c38 488B8548 		movq	-3768(%rbp), %rax
 2180      F1FFFF
 2181 1c3f 488D3500 		leaq	.LC19(%rip), %rsi
 2181      000000
 2182 1c46 4889C7   		movq	%rax, %rdi
 2183 1c49 B8000000 		movl	$0, %eax
 2183      00
 2184 1c4e E8000000 		call	errRender@PLT
 2184      00
 2185 1c53 C78588F1 		movl	$11, -3704(%rbp)
 2185      FFFF0B00 
 2185      0000
 2186 1c5d E92E0A00 		jmp	.L72
 2186      00
 2187              	.L123:
 2188              		.loc 2 357 3 discriminator 4
 2189 1c62 488B8598 		movq	-3688(%rbp), %rax
 2189      F1FFFF
 2190 1c69 4883C001 		addq	$1, %rax
 2191 1c6d 48898598 		movq	%rax, -3688(%rbp)
 2191      F1FFFF
 2192              	.L120:
 358:prog.c        **** 	}
 359:prog.c        **** 	ch = *ptr;
 2193              		.loc 2 359 7 is_stmt 1
 2194 1c74 488B8598 		movq	-3688(%rbp), %rax
 2194      F1FFFF
 2195              		.loc 2 359 5
 2196 1c7b 0FB600   		movzbl	(%rax), %eax
 2197 1c7e 88857EF1 		movb	%al, -3714(%rbp)
 2197      FFFF
 360:prog.c        **** 	CHECK_STATUS(
 2198              		.loc 2 360 2
 2199 1c84 80BD7EF1 		cmpb	$0, -3714(%rbp)
 2199      FFFF00
 2200 1c8b 7453     		je	.L124
 2201              		.loc 2 360 2 is_stmt 0 discriminator 1
 2202 1c8d 80BD7EF1 		cmpb	$58, -3714(%rbp)
 2202      FFFF3A
 2203 1c94 744A     		je	.L124
 2204              		.loc 2 360 2 discriminator 2
 2205 1c96 488B8598 		movq	-3688(%rbp), %rax
 2205      F1FFFF
 2206 1c9d 482B8558 		subq	-3752(%rbp), %rax
 2206      F1FFFF
 2207 1ca4 4889C7   		movq	%rax, %rdi
 2208 1ca7 E81FE5FF 		call	spaces
 2208      FF
 2209 1cac 4889C1   		movq	%rax, %rcx
 2210 1caf 488B9558 		movq	-3752(%rbp), %rdx
 2210      F1FFFF
 2211 1cb6 488B8548 		movq	-3768(%rbp), %rax
 2211      F1FFFF
 2212 1cbd 488D3500 		leaq	.LC20(%rip), %rsi
 2212      000000
 2213 1cc4 4889C7   		movq	%rax, %rdi
 2214 1cc7 B8000000 		movl	$0, %eax
 2214      00
 2215 1ccc E8000000 		call	errRender@PLT
 2215      00
 2216 1cd1 C78588F1 		movl	$11, -3704(%rbp)
 2216      FFFF0B00 
 2216      0000
 2217 1cdb E9B00900 		jmp	.L72
 2217      00
 2218              	.L124:
 361:prog.c        **** 		ch != '\0' && ch != ':', FL_CONF_FORMAT, cleanup,
 362:prog.c        **** 		"xProgram(): Expecting ':' or end-of-string:\n  %s\n  %s^", portConfig, spaces(ptr-portConfig));
 363:prog.c        **** 
 364:prog.c        **** 	// Map the CCLK bit & the SelectMAP data bus
 365:prog.c        **** 	fStatus = portMap(handle, LP_SCK, cclkPort, cclkBit, error);
 2219              		.loc 2 365 12 is_stmt 1
 2220 1ce0 0FB68D86 		movzbl	-3706(%rbp), %ecx
 2220      F1FFFF
 2221 1ce7 0FB69585 		movzbl	-3707(%rbp), %edx
 2221      F1FFFF
 2222 1cee 488BB548 		movq	-3768(%rbp), %rsi
 2222      F1FFFF
 2223 1cf5 488B8568 		movq	-3736(%rbp), %rax
 2223      F1FFFF
 2224 1cfc 4989F0   		movq	%rsi, %r8
 2225 1cff BE040000 		movl	$4, %esi
 2225      00
 2226 1d04 4889C7   		movq	%rax, %rdi
 2227 1d07 E807E9FF 		call	portMap
 2227      FF
 2228 1d0c 898590F1 		movl	%eax, -3696(%rbp)
 2228      FFFF
 366:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2229              		.loc 2 366 2
 2230 1d12 83BD90F1 		cmpl	$0, -3696(%rbp)
 2230      FFFF00
 2231 1d19 742A     		je	.L125
 2232              		.loc 2 366 2 is_stmt 0 discriminator 1
 2233 1d1b 488B8548 		movq	-3768(%rbp), %rax
 2233      F1FFFF
 2234 1d22 488D1500 		leaq	.LC18(%rip), %rdx
 2234      000000
 2235 1d29 4889D6   		movq	%rdx, %rsi
 2236 1d2c 4889C7   		movq	%rax, %rdi
 2237 1d2f E8000000 		call	errPrefix@PLT
 2237      00
 2238 1d34 8B8590F1 		movl	-3696(%rbp), %eax
 2238      FFFF
 2239 1d3a 898588F1 		movl	%eax, -3704(%rbp)
 2239      FFFF
 2240 1d40 E94B0900 		jmp	.L72
 2240      00
 2241              	.L125:
 367:prog.c        **** 	if ( progOp == PROG_PARALLEL ) {
 2242              		.loc 2 367 5 is_stmt 1
 2243 1d45 83BD64F1 		cmpl	$5, -3740(%rbp)
 2243      FFFF05
 2244 1d4c 7567     		jne	.L126
 368:prog.c        **** 		fStatus = portMap(handle, LP_D8, dataPort, 0x00, error);
 2245              		.loc 2 368 13
 2246 1d4e 0FB69587 		movzbl	-3705(%rbp), %edx
 2246      F1FFFF
 2247 1d55 488B8D48 		movq	-3768(%rbp), %rcx
 2247      F1FFFF
 2248 1d5c 488B8568 		movq	-3736(%rbp), %rax
 2248      F1FFFF
 2249 1d63 4989C8   		movq	%rcx, %r8
 2250 1d66 B9000000 		movl	$0, %ecx
 2250      00
 2251 1d6b BE050000 		movl	$5, %esi
 2251      00
 2252 1d70 4889C7   		movq	%rax, %rdi
 2253 1d73 E89BE8FF 		call	portMap
 2253      FF
 2254 1d78 898590F1 		movl	%eax, -3696(%rbp)
 2254      FFFF
 369:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2255              		.loc 2 369 3
 2256 1d7e 83BD90F1 		cmpl	$0, -3696(%rbp)
 2256      FFFF00
 2257 1d85 0F849B00 		je	.L127
 2257      0000
 2258              		.loc 2 369 3 is_stmt 0 discriminator 1
 2259 1d8b 488B8548 		movq	-3768(%rbp), %rax
 2259      F1FFFF
 2260 1d92 488D1500 		leaq	.LC18(%rip), %rdx
 2260      000000
 2261 1d99 4889D6   		movq	%rdx, %rsi
 2262 1d9c 4889C7   		movq	%rax, %rdi
 2263 1d9f E8000000 		call	errPrefix@PLT
 2263      00
 2264 1da4 8B8590F1 		movl	-3696(%rbp), %eax
 2264      FFFF
 2265 1daa 898588F1 		movl	%eax, -3704(%rbp)
 2265      FFFF
 2266 1db0 E9DB0800 		jmp	.L72
 2266      00
 2267              	.L126:
 370:prog.c        **** 	} else if ( progOp == PROG_SPI_SEND ) {
 2268              		.loc 2 370 12 is_stmt 1
 2269 1db5 83BD64F1 		cmpl	$6, -3740(%rbp)
 2269      FFFF06
 2270 1dbc 7568     		jne	.L127
 371:prog.c        **** 		fStatus = portMap(handle, LP_MOSI, dataPort, dataBit[0], error);
 2271              		.loc 2 371 55
 2272 1dbe 0FB685A0 		movzbl	-352(%rbp), %eax
 2272      FEFFFF
 2273              		.loc 2 371 13
 2274 1dc5 0FB6C8   		movzbl	%al, %ecx
 2275 1dc8 0FB69587 		movzbl	-3705(%rbp), %edx
 2275      F1FFFF
 2276 1dcf 488BB548 		movq	-3768(%rbp), %rsi
 2276      F1FFFF
 2277 1dd6 488B8568 		movq	-3736(%rbp), %rax
 2277      F1FFFF
 2278 1ddd 4989F0   		movq	%rsi, %r8
 2279 1de0 BE020000 		movl	$2, %esi
 2279      00
 2280 1de5 4889C7   		movq	%rax, %rdi
 2281 1de8 E826E8FF 		call	portMap
 2281      FF
 2282 1ded 898590F1 		movl	%eax, -3696(%rbp)
 2282      FFFF
 372:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2283              		.loc 2 372 3
 2284 1df3 83BD90F1 		cmpl	$0, -3696(%rbp)
 2284      FFFF00
 2285 1dfa 742A     		je	.L127
 2286              		.loc 2 372 3 is_stmt 0 discriminator 1
 2287 1dfc 488B8548 		movq	-3768(%rbp), %rax
 2287      F1FFFF
 2288 1e03 488D1500 		leaq	.LC18(%rip), %rdx
 2288      000000
 2289 1e0a 4889D6   		movq	%rdx, %rsi
 2290 1e0d 4889C7   		movq	%rax, %rdi
 2291 1e10 E8000000 		call	errPrefix@PLT
 2291      00
 2292 1e15 8B8590F1 		movl	-3696(%rbp), %eax
 2292      FFFF
 2293 1e1b 898588F1 		movl	%eax, -3704(%rbp)
 2293      FFFF
 2294 1e21 E96A0800 		jmp	.L72
 2294      00
 2295              	.L127:
 373:prog.c        **** 	}
 374:prog.c        **** 	fStatus = portMap(handle, LP_CHOOSE, 0x00, 0x00, error);
 2296              		.loc 2 374 12 is_stmt 1
 2297 1e26 488B9548 		movq	-3768(%rbp), %rdx
 2297      F1FFFF
 2298 1e2d 488B8568 		movq	-3736(%rbp), %rax
 2298      F1FFFF
 2299 1e34 4989D0   		movq	%rdx, %r8
 2300 1e37 B9000000 		movl	$0, %ecx
 2300      00
 2301 1e3c BA000000 		movl	$0, %edx
 2301      00
 2302 1e41 BE000000 		movl	$0, %esi
 2302      00
 2303 1e46 4889C7   		movq	%rax, %rdi
 2304 1e49 E8C5E7FF 		call	portMap
 2304      FF
 2305 1e4e 898590F1 		movl	%eax, -3696(%rbp)
 2305      FFFF
 375:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2306              		.loc 2 375 2
 2307 1e54 83BD90F1 		cmpl	$0, -3696(%rbp)
 2307      FFFF00
 2308 1e5b 742A     		je	.L128
 2309              		.loc 2 375 2 is_stmt 0 discriminator 1
 2310 1e5d 488B8548 		movq	-3768(%rbp), %rax
 2310      F1FFFF
 2311 1e64 488D1500 		leaq	.LC18(%rip), %rdx
 2311      000000
 2312 1e6b 4889D6   		movq	%rdx, %rsi
 2313 1e6e 4889C7   		movq	%rax, %rdi
 2314 1e71 E8000000 		call	errPrefix@PLT
 2314      00
 2315 1e76 8B8590F1 		movl	-3696(%rbp), %eax
 2315      FFFF
 2316 1e7c 898588F1 		movl	%eax, -3704(%rbp)
 2316      FFFF
 2317 1e82 E9090800 		jmp	.L72
 2317      00
 2318              	.L128:
 376:prog.c        **** 
 377:prog.c        **** 	// Assert PROG & wait for INIT & DONE to go low
 378:prog.c        **** 	fStatus = flSingleBitPortAccess(handle, initPort, initBit, PIN_INPUT, NULL, error); // INIT is inp
 2319              		.loc 2 378 12 is_stmt 1
 2320 1e87 0FB69582 		movzbl	-3710(%rbp), %edx
 2320      F1FFFF
 2321 1e8e 0FB6B581 		movzbl	-3711(%rbp), %esi
 2321      F1FFFF
 2322 1e95 488B8D48 		movq	-3768(%rbp), %rcx
 2322      F1FFFF
 2323 1e9c 488B8568 		movq	-3736(%rbp), %rax
 2323      F1FFFF
 2324 1ea3 4989C9   		movq	%rcx, %r9
 2325 1ea6 41B80000 		movl	$0, %r8d
 2325      0000
 2326 1eac B9030000 		movl	$3, %ecx
 2326      00
 2327 1eb1 4889C7   		movq	%rax, %rdi
 2328 1eb4 E8000000 		call	flSingleBitPortAccess@PLT
 2328      00
 2329 1eb9 898590F1 		movl	%eax, -3696(%rbp)
 2329      FFFF
 379:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2330              		.loc 2 379 2
 2331 1ebf 83BD90F1 		cmpl	$0, -3696(%rbp)
 2331      FFFF00
 2332 1ec6 742A     		je	.L129
 2333              		.loc 2 379 2 is_stmt 0 discriminator 1
 2334 1ec8 488B8548 		movq	-3768(%rbp), %rax
 2334      F1FFFF
 2335 1ecf 488D1500 		leaq	.LC18(%rip), %rdx
 2335      000000
 2336 1ed6 4889D6   		movq	%rdx, %rsi
 2337 1ed9 4889C7   		movq	%rax, %rdi
 2338 1edc E8000000 		call	errPrefix@PLT
 2338      00
 2339 1ee1 8B8590F1 		movl	-3696(%rbp), %eax
 2339      FFFF
 2340 1ee7 898588F1 		movl	%eax, -3704(%rbp)
 2340      FFFF
 2341 1eed E99E0700 		jmp	.L72
 2341      00
 2342              	.L129:
 380:prog.c        **** 	fStatus = flSingleBitPortAccess(handle, donePort, doneBit, PIN_INPUT, NULL, error); // DONE is inp
 2343              		.loc 2 380 12 is_stmt 1
 2344 1ef2 0FB69584 		movzbl	-3708(%rbp), %edx
 2344      F1FFFF
 2345 1ef9 0FB6B583 		movzbl	-3709(%rbp), %esi
 2345      F1FFFF
 2346 1f00 488B8D48 		movq	-3768(%rbp), %rcx
 2346      F1FFFF
 2347 1f07 488B8568 		movq	-3736(%rbp), %rax
 2347      F1FFFF
 2348 1f0e 4989C9   		movq	%rcx, %r9
 2349 1f11 41B80000 		movl	$0, %r8d
 2349      0000
 2350 1f17 B9030000 		movl	$3, %ecx
 2350      00
 2351 1f1c 4889C7   		movq	%rax, %rdi
 2352 1f1f E8000000 		call	flSingleBitPortAccess@PLT
 2352      00
 2353 1f24 898590F1 		movl	%eax, -3696(%rbp)
 2353      FFFF
 381:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2354              		.loc 2 381 2
 2355 1f2a 83BD90F1 		cmpl	$0, -3696(%rbp)
 2355      FFFF00
 2356 1f31 742A     		je	.L130
 2357              		.loc 2 381 2 is_stmt 0 discriminator 1
 2358 1f33 488B8548 		movq	-3768(%rbp), %rax
 2358      F1FFFF
 2359 1f3a 488D1500 		leaq	.LC18(%rip), %rdx
 2359      000000
 2360 1f41 4889D6   		movq	%rdx, %rsi
 2361 1f44 4889C7   		movq	%rax, %rdi
 2362 1f47 E8000000 		call	errPrefix@PLT
 2362      00
 2363 1f4c 8B8590F1 		movl	-3696(%rbp), %eax
 2363      FFFF
 2364 1f52 898588F1 		movl	%eax, -3704(%rbp)
 2364      FFFF
 2365 1f58 E9330700 		jmp	.L72
 2365      00
 2366              	.L130:
 382:prog.c        **** 	fStatus = flSingleBitPortAccess(handle, progPort, progBit, PIN_LOW, NULL, error); // PROG is low
 2367              		.loc 2 382 12 is_stmt 1
 2368 1f5d 0FB69580 		movzbl	-3712(%rbp), %edx
 2368      F1FFFF
 2369 1f64 0FB6B57F 		movzbl	-3713(%rbp), %esi
 2369      F1FFFF
 2370 1f6b 488B8D48 		movq	-3768(%rbp), %rcx
 2370      F1FFFF
 2371 1f72 488B8568 		movq	-3736(%rbp), %rax
 2371      F1FFFF
 2372 1f79 4989C9   		movq	%rcx, %r9
 2373 1f7c 41B80000 		movl	$0, %r8d
 2373      0000
 2374 1f82 B9020000 		movl	$2, %ecx
 2374      00
 2375 1f87 4889C7   		movq	%rax, %rdi
 2376 1f8a E8000000 		call	flSingleBitPortAccess@PLT
 2376      00
 2377 1f8f 898590F1 		movl	%eax, -3696(%rbp)
 2377      FFFF
 383:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2378              		.loc 2 383 2
 2379 1f95 83BD90F1 		cmpl	$0, -3696(%rbp)
 2379      FFFF00
 2380 1f9c 742A     		je	.L131
 2381              		.loc 2 383 2 is_stmt 0 discriminator 1
 2382 1f9e 488B8548 		movq	-3768(%rbp), %rax
 2382      F1FFFF
 2383 1fa5 488D1500 		leaq	.LC18(%rip), %rdx
 2383      000000
 2384 1fac 4889D6   		movq	%rdx, %rsi
 2385 1faf 4889C7   		movq	%rax, %rdi
 2386 1fb2 E8000000 		call	errPrefix@PLT
 2386      00
 2387 1fb7 8B8590F1 		movl	-3696(%rbp), %eax
 2387      FFFF
 2388 1fbd 898588F1 		movl	%eax, -3704(%rbp)
 2388      FFFF
 2389 1fc3 E9C80600 		jmp	.L72
 2389      00
 2390              	.L131:
 384:prog.c        **** 	do {
 385:prog.c        **** 		fStatus = flSingleBitPortAccess(handle, initPort, initBit, PIN_INPUT, &initStatus, error);
 2391              		.loc 2 385 13 is_stmt 1
 2392 1fc8 0FB69582 		movzbl	-3710(%rbp), %edx
 2392      F1FFFF
 2393 1fcf 0FB6B581 		movzbl	-3711(%rbp), %esi
 2393      F1FFFF
 2394 1fd6 488BBD48 		movq	-3768(%rbp), %rdi
 2394      F1FFFF
 2395 1fdd 488D8D7A 		leaq	-3718(%rbp), %rcx
 2395      F1FFFF
 2396 1fe4 488B8568 		movq	-3736(%rbp), %rax
 2396      F1FFFF
 2397 1feb 4989F9   		movq	%rdi, %r9
 2398 1fee 4989C8   		movq	%rcx, %r8
 2399 1ff1 B9030000 		movl	$3, %ecx
 2399      00
 2400 1ff6 4889C7   		movq	%rax, %rdi
 2401 1ff9 E8000000 		call	flSingleBitPortAccess@PLT
 2401      00
 2402 1ffe 898590F1 		movl	%eax, -3696(%rbp)
 2402      FFFF
 386:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2403              		.loc 2 386 3
 2404 2004 83BD90F1 		cmpl	$0, -3696(%rbp)
 2404      FFFF00
 2405 200b 742A     		je	.L132
 2406              		.loc 2 386 3 is_stmt 0 discriminator 1
 2407 200d 488B8548 		movq	-3768(%rbp), %rax
 2407      F1FFFF
 2408 2014 488D1500 		leaq	.LC18(%rip), %rdx
 2408      000000
 2409 201b 4889D6   		movq	%rdx, %rsi
 2410 201e 4889C7   		movq	%rax, %rdi
 2411 2021 E8000000 		call	errPrefix@PLT
 2411      00
 2412 2026 8B8590F1 		movl	-3696(%rbp), %eax
 2412      FFFF
 2413 202c 898588F1 		movl	%eax, -3704(%rbp)
 2413      FFFF
 2414 2032 E9590600 		jmp	.L72
 2414      00
 2415              	.L132:
 387:prog.c        **** 		fStatus = flSingleBitPortAccess(handle, donePort, doneBit, PIN_INPUT, &doneStatus, error);
 2416              		.loc 2 387 13 is_stmt 1
 2417 2037 0FB69584 		movzbl	-3708(%rbp), %edx
 2417      F1FFFF
 2418 203e 0FB6B583 		movzbl	-3709(%rbp), %esi
 2418      F1FFFF
 2419 2045 488BBD48 		movq	-3768(%rbp), %rdi
 2419      F1FFFF
 2420 204c 488D8D7B 		leaq	-3717(%rbp), %rcx
 2420      F1FFFF
 2421 2053 488B8568 		movq	-3736(%rbp), %rax
 2421      F1FFFF
 2422 205a 4989F9   		movq	%rdi, %r9
 2423 205d 4989C8   		movq	%rcx, %r8
 2424 2060 B9030000 		movl	$3, %ecx
 2424      00
 2425 2065 4889C7   		movq	%rax, %rdi
 2426 2068 E8000000 		call	flSingleBitPortAccess@PLT
 2426      00
 2427 206d 898590F1 		movl	%eax, -3696(%rbp)
 2427      FFFF
 388:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2428              		.loc 2 388 3
 2429 2073 83BD90F1 		cmpl	$0, -3696(%rbp)
 2429      FFFF00
 2430 207a 742A     		je	.L133
 2431              		.loc 2 388 3 is_stmt 0 discriminator 1
 2432 207c 488B8548 		movq	-3768(%rbp), %rax
 2432      F1FFFF
 2433 2083 488D1500 		leaq	.LC18(%rip), %rdx
 2433      000000
 2434 208a 4889D6   		movq	%rdx, %rsi
 2435 208d 4889C7   		movq	%rax, %rdi
 2436 2090 E8000000 		call	errPrefix@PLT
 2436      00
 2437 2095 8B8590F1 		movl	-3696(%rbp), %eax
 2437      FFFF
 2438 209b 898588F1 		movl	%eax, -3704(%rbp)
 2438      FFFF
 2439 20a1 E9EA0500 		jmp	.L72
 2439      00
 2440              	.L133:
 389:prog.c        **** 	} while ( initStatus || doneStatus );
 2441              		.loc 2 389 12 is_stmt 1
 2442 20a6 0FB6857A 		movzbl	-3718(%rbp), %eax
 2442      F1FFFF
 2443              		.loc 2 389 23
 2444 20ad 84C0     		testb	%al, %al
 2445 20af 0F8513FF 		jne	.L131
 2445      FFFF
 2446              		.loc 2 389 23 is_stmt 0 discriminator 1
 2447 20b5 0FB6857B 		movzbl	-3717(%rbp), %eax
 2447      F1FFFF
 2448 20bc 84C0     		testb	%al, %al
 2449 20be 0F8504FF 		jne	.L131
 2449      FFFF
 390:prog.c        **** 
 391:prog.c        **** 	// Now it's safe to switch to conduit mode zero (=JTAG, etc)
 392:prog.c        **** 	fStatus = flSelectConduit(handle, 0x00, error);
 2450              		.loc 2 392 12 is_stmt 1
 2451 20c4 488B9548 		movq	-3768(%rbp), %rdx
 2451      F1FFFF
 2452 20cb 488B8568 		movq	-3736(%rbp), %rax
 2452      F1FFFF
 2453 20d2 BE000000 		movl	$0, %esi
 2453      00
 2454 20d7 4889C7   		movq	%rax, %rdi
 2455 20da E8000000 		call	flSelectConduit@PLT
 2455      00
 2456 20df 898590F1 		movl	%eax, -3696(%rbp)
 2456      FFFF
 393:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2457              		.loc 2 393 2
 2458 20e5 83BD90F1 		cmpl	$0, -3696(%rbp)
 2458      FFFF00
 2459 20ec 742A     		je	.L134
 2460              		.loc 2 393 2 is_stmt 0 discriminator 1
 2461 20ee 488B8548 		movq	-3768(%rbp), %rax
 2461      F1FFFF
 2462 20f5 488D1500 		leaq	.LC18(%rip), %rdx
 2462      000000
 2463 20fc 4889D6   		movq	%rdx, %rsi
 2464 20ff 4889C7   		movq	%rax, %rdi
 2465 2102 E8000000 		call	errPrefix@PLT
 2465      00
 2466 2107 8B8590F1 		movl	-3696(%rbp), %eax
 2466      FFFF
 2467 210d 898588F1 		movl	%eax, -3704(%rbp)
 2467      FFFF
 2468 2113 E9780500 		jmp	.L72
 2468      00
 2469              	.L134:
 394:prog.c        **** 
 395:prog.c        **** 	// Apply requested configuration to each specified pin
 396:prog.c        **** 	pinMap[progPort][progBit] = PIN_UNUSED;
 2470              		.loc 2 396 18 is_stmt 1
 2471 2118 0FB6857F 		movzbl	-3713(%rbp), %eax
 2471      F1FFFF
 2472 211f 0FB69580 		movzbl	-3712(%rbp), %edx
 2472      F1FFFF
 2473              		.loc 2 396 28
 2474 2126 4863D2   		movslq	%edx, %rdx
 2475 2129 4898     		cltq
 2476 212b 48C1E005 		salq	$5, %rax
 2477 212f 4801D0   		addq	%rdx, %rax
 2478 2132 C78485A0 		movl	$0, -3680(%rbp,%rax,4)
 2478      F1FFFF00 
 2478      000000
 397:prog.c        **** 	pinMap[initPort][initBit] = PIN_UNUSED;
 2479              		.loc 2 397 18
 2480 213d 0FB68581 		movzbl	-3711(%rbp), %eax
 2480      F1FFFF
 2481 2144 0FB69582 		movzbl	-3710(%rbp), %edx
 2481      F1FFFF
 2482              		.loc 2 397 28
 2483 214b 4863D2   		movslq	%edx, %rdx
 2484 214e 4898     		cltq
 2485 2150 48C1E005 		salq	$5, %rax
 2486 2154 4801D0   		addq	%rdx, %rax
 2487 2157 C78485A0 		movl	$0, -3680(%rbp,%rax,4)
 2487      F1FFFF00 
 2487      000000
 398:prog.c        **** 	pinMap[donePort][doneBit] = PIN_UNUSED;
 2488              		.loc 2 398 18
 2489 2162 0FB68583 		movzbl	-3709(%rbp), %eax
 2489      F1FFFF
 2490 2169 0FB69584 		movzbl	-3708(%rbp), %edx
 2490      F1FFFF
 2491              		.loc 2 398 28
 2492 2170 4863D2   		movslq	%edx, %rdx
 2493 2173 4898     		cltq
 2494 2175 48C1E005 		salq	$5, %rax
 2495 2179 4801D0   		addq	%rdx, %rax
 2496 217c C78485A0 		movl	$0, -3680(%rbp,%rax,4)
 2496      F1FFFF00 
 2496      000000
 399:prog.c        **** 	for ( port = 0; port < 26; port++ ) {
 2497              		.loc 2 399 13
 2498 2187 C6857CF1 		movb	$0, -3716(%rbp)
 2498      FFFF00
 2499              		.loc 2 399 2
 2500 218e E9D80000 		jmp	.L135
 2500      00
 2501              	.L139:
 400:prog.c        **** 		for ( bit = 0; bit < 32; bit++ ) {
 2502              		.loc 2 400 13
 2503 2193 C6857DF1 		movb	$0, -3715(%rbp)
 2503      FFFF00
 2504              		.loc 2 400 3
 2505 219a E9AF0000 		jmp	.L136
 2505      00
 2506              	.L138:
 401:prog.c        **** 			thisPin = pinMap[port][bit];
 2507              		.loc 2 401 26
 2508 219f 0FB6857C 		movzbl	-3716(%rbp), %eax
 2508      F1FFFF
 2509 21a6 0FB6957D 		movzbl	-3715(%rbp), %edx
 2509      F1FFFF
 2510              		.loc 2 401 12
 2511 21ad 4863D2   		movslq	%edx, %rdx
 2512 21b0 4898     		cltq
 2513 21b2 48C1E005 		salq	$5, %rax
 2514 21b6 4801D0   		addq	%rdx, %rax
 2515 21b9 8B8485A0 		movl	-3680(%rbp,%rax,4), %eax
 2515      F1FFFF
 2516 21c0 898594F1 		movl	%eax, -3692(%rbp)
 2516      FFFF
 402:prog.c        **** 			if ( thisPin != PIN_UNUSED ) {
 2517              		.loc 2 402 7
 2518 21c6 83BD94F1 		cmpl	$0, -3692(%rbp)
 2518      FFFF00
 2519 21cd 746F     		je	.L137
 403:prog.c        **** 				fStatus = flSingleBitPortAccess(handle, port, bit, thisPin, NULL, error);
 2520              		.loc 2 403 15
 2521 21cf 8B8594F1 		movl	-3692(%rbp), %eax
 2521      FFFF
 2522 21d5 0FB6C8   		movzbl	%al, %ecx
 2523 21d8 0FB6957D 		movzbl	-3715(%rbp), %edx
 2523      F1FFFF
 2524 21df 0FB6B57C 		movzbl	-3716(%rbp), %esi
 2524      F1FFFF
 2525 21e6 488BBD48 		movq	-3768(%rbp), %rdi
 2525      F1FFFF
 2526 21ed 488B8568 		movq	-3736(%rbp), %rax
 2526      F1FFFF
 2527 21f4 4989F9   		movq	%rdi, %r9
 2528 21f7 41B80000 		movl	$0, %r8d
 2528      0000
 2529 21fd 4889C7   		movq	%rax, %rdi
 2530 2200 E8000000 		call	flSingleBitPortAccess@PLT
 2530      00
 2531 2205 898590F1 		movl	%eax, -3696(%rbp)
 2531      FFFF
 404:prog.c        **** 				CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2532              		.loc 2 404 5
 2533 220b 83BD90F1 		cmpl	$0, -3696(%rbp)
 2533      FFFF00
 2534 2212 742A     		je	.L137
 2535              		.loc 2 404 5 is_stmt 0 discriminator 1
 2536 2214 488B8548 		movq	-3768(%rbp), %rax
 2536      F1FFFF
 2537 221b 488D1500 		leaq	.LC18(%rip), %rdx
 2537      000000
 2538 2222 4889D6   		movq	%rdx, %rsi
 2539 2225 4889C7   		movq	%rax, %rdi
 2540 2228 E8000000 		call	errPrefix@PLT
 2540      00
 2541 222d 8B8590F1 		movl	-3696(%rbp), %eax
 2541      FFFF
 2542 2233 898588F1 		movl	%eax, -3704(%rbp)
 2542      FFFF
 2543 2239 E9520400 		jmp	.L72
 2543      00
 2544              	.L137:
 400:prog.c        **** 			thisPin = pinMap[port][bit];
 2545              		.loc 2 400 31 is_stmt 1 discriminator 2
 2546 223e 0FB6857D 		movzbl	-3715(%rbp), %eax
 2546      F1FFFF
 2547 2245 83C001   		addl	$1, %eax
 2548 2248 88857DF1 		movb	%al, -3715(%rbp)
 2548      FFFF
 2549              	.L136:
 400:prog.c        **** 			thisPin = pinMap[port][bit];
 2550              		.loc 2 400 22 discriminator 1
 2551 224e 80BD7DF1 		cmpb	$31, -3715(%rbp)
 2551      FFFF1F
 2552 2255 0F8644FF 		jbe	.L138
 2552      FFFF
 399:prog.c        **** 		for ( bit = 0; bit < 32; bit++ ) {
 2553              		.loc 2 399 33 discriminator 2
 2554 225b 0FB6857C 		movzbl	-3716(%rbp), %eax
 2554      F1FFFF
 2555 2262 83C001   		addl	$1, %eax
 2556 2265 88857CF1 		movb	%al, -3716(%rbp)
 2556      FFFF
 2557              	.L135:
 399:prog.c        **** 		for ( bit = 0; bit < 32; bit++ ) {
 2558              		.loc 2 399 23 discriminator 1
 2559 226b 80BD7CF1 		cmpb	$25, -3716(%rbp)
 2559      FFFF19
 2560 2272 0F861BFF 		jbe	.L139
 2560      FFFF
 405:prog.c        **** 			}
 406:prog.c        **** 		}
 407:prog.c        **** 	}
 408:prog.c        **** 
 409:prog.c        **** 	// Deassert PROG and wait for INIT to go high
 410:prog.c        **** 	fStatus = flSingleBitPortAccess(handle, progPort, progBit, PIN_HIGH, NULL, error); // PROG is high
 2561              		.loc 2 410 12
 2562 2278 0FB69580 		movzbl	-3712(%rbp), %edx
 2562      F1FFFF
 2563 227f 0FB6B57F 		movzbl	-3713(%rbp), %esi
 2563      F1FFFF
 2564 2286 488B8D48 		movq	-3768(%rbp), %rcx
 2564      F1FFFF
 2565 228d 488B8568 		movq	-3736(%rbp), %rax
 2565      F1FFFF
 2566 2294 4989C9   		movq	%rcx, %r9
 2567 2297 41B80000 		movl	$0, %r8d
 2567      0000
 2568 229d B9010000 		movl	$1, %ecx
 2568      00
 2569 22a2 4889C7   		movq	%rax, %rdi
 2570 22a5 E8000000 		call	flSingleBitPortAccess@PLT
 2570      00
 2571 22aa 898590F1 		movl	%eax, -3696(%rbp)
 2571      FFFF
 411:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2572              		.loc 2 411 2
 2573 22b0 83BD90F1 		cmpl	$0, -3696(%rbp)
 2573      FFFF00
 2574 22b7 742A     		je	.L140
 2575              		.loc 2 411 2 is_stmt 0 discriminator 1
 2576 22b9 488B8548 		movq	-3768(%rbp), %rax
 2576      F1FFFF
 2577 22c0 488D1500 		leaq	.LC18(%rip), %rdx
 2577      000000
 2578 22c7 4889D6   		movq	%rdx, %rsi
 2579 22ca 4889C7   		movq	%rax, %rdi
 2580 22cd E8000000 		call	errPrefix@PLT
 2580      00
 2581 22d2 8B8590F1 		movl	-3696(%rbp), %eax
 2581      FFFF
 2582 22d8 898588F1 		movl	%eax, -3704(%rbp)
 2582      FFFF
 2583 22de E9AD0300 		jmp	.L72
 2583      00
 2584              	.L140:
 412:prog.c        **** 	do {
 413:prog.c        **** 		fStatus = flSingleBitPortAccess(handle, initPort, initBit, PIN_INPUT, &initStatus, error);
 2585              		.loc 2 413 13 is_stmt 1
 2586 22e3 0FB69582 		movzbl	-3710(%rbp), %edx
 2586      F1FFFF
 2587 22ea 0FB6B581 		movzbl	-3711(%rbp), %esi
 2587      F1FFFF
 2588 22f1 488BBD48 		movq	-3768(%rbp), %rdi
 2588      F1FFFF
 2589 22f8 488D8D7A 		leaq	-3718(%rbp), %rcx
 2589      F1FFFF
 2590 22ff 488B8568 		movq	-3736(%rbp), %rax
 2590      F1FFFF
 2591 2306 4989F9   		movq	%rdi, %r9
 2592 2309 4989C8   		movq	%rcx, %r8
 2593 230c B9030000 		movl	$3, %ecx
 2593      00
 2594 2311 4889C7   		movq	%rax, %rdi
 2595 2314 E8000000 		call	flSingleBitPortAccess@PLT
 2595      00
 2596 2319 898590F1 		movl	%eax, -3696(%rbp)
 2596      FFFF
 414:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2597              		.loc 2 414 3
 2598 231f 83BD90F1 		cmpl	$0, -3696(%rbp)
 2598      FFFF00
 2599 2326 742A     		je	.L141
 2600              		.loc 2 414 3 is_stmt 0 discriminator 1
 2601 2328 488B8548 		movq	-3768(%rbp), %rax
 2601      F1FFFF
 2602 232f 488D1500 		leaq	.LC18(%rip), %rdx
 2602      000000
 2603 2336 4889D6   		movq	%rdx, %rsi
 2604 2339 4889C7   		movq	%rax, %rdi
 2605 233c E8000000 		call	errPrefix@PLT
 2605      00
 2606 2341 8B8590F1 		movl	-3696(%rbp), %eax
 2606      FFFF
 2607 2347 898588F1 		movl	%eax, -3704(%rbp)
 2607      FFFF
 2608 234d E93E0300 		jmp	.L72
 2608      00
 2609              	.L141:
 415:prog.c        **** 	} while ( !initStatus );
 2610              		.loc 2 415 12 is_stmt 1
 2611 2352 0FB6857A 		movzbl	-3718(%rbp), %eax
 2611      F1FFFF
 2612 2359 84C0     		testb	%al, %al
 2613 235b 7486     		je	.L140
 416:prog.c        **** 
 417:prog.c        **** 	// Write the programming file into the FPGA
 418:prog.c        **** 	fStatus = dataWrite(handle, progOp, data, len, lookupTable, error);
 2614              		.loc 2 418 12
 2615 235d 4C8B8548 		movq	-3768(%rbp), %r8
 2615      F1FFFF
 2616 2364 488DBDF0 		leaq	-272(%rbp), %rdi
 2616      FEFFFF
 2617 236b 8B8D60F1 		movl	-3744(%rbp), %ecx
 2617      FFFF
 2618 2371 488B9550 		movq	-3760(%rbp), %rdx
 2618      F1FFFF
 2619 2378 8BB564F1 		movl	-3740(%rbp), %esi
 2619      FFFF
 2620 237e 488B8568 		movq	-3736(%rbp), %rax
 2620      F1FFFF
 2621 2385 4D89C1   		movq	%r8, %r9
 2622 2388 4989F8   		movq	%rdi, %r8
 2623 238b 4889C7   		movq	%rax, %rdi
 2624 238e E8E3E4FF 		call	dataWrite
 2624      FF
 2625 2393 898590F1 		movl	%eax, -3696(%rbp)
 2625      FFFF
 419:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2626              		.loc 2 419 2
 2627 2399 83BD90F1 		cmpl	$0, -3696(%rbp)
 2627      FFFF00
 2628 23a0 742A     		je	.L142
 2629              		.loc 2 419 2 is_stmt 0 discriminator 1
 2630 23a2 488B8548 		movq	-3768(%rbp), %rax
 2630      F1FFFF
 2631 23a9 488D1500 		leaq	.LC18(%rip), %rdx
 2631      000000
 2632 23b0 4889D6   		movq	%rdx, %rsi
 2633 23b3 4889C7   		movq	%rax, %rdi
 2634 23b6 E8000000 		call	errPrefix@PLT
 2634      00
 2635 23bb 8B8590F1 		movl	-3696(%rbp), %eax
 2635      FFFF
 2636 23c1 898588F1 		movl	%eax, -3704(%rbp)
 2636      FFFF
 2637 23c7 E9C40200 		jmp	.L72
 2637      00
 2638              	.L142:
 420:prog.c        **** 
 421:prog.c        **** 	i = 0;
 2639              		.loc 2 421 4 is_stmt 1
 2640 23cc C7858CF1 		movl	$0, -3700(%rbp)
 2640      FFFF0000 
 2640      0000
 2641              	.L150:
 422:prog.c        **** 	for ( ; ; ) {
 423:prog.c        **** 		fStatus = flSingleBitPortAccess(handle, initPort, initBit, PIN_INPUT, &initStatus, error);
 2642              		.loc 2 423 13
 2643 23d6 0FB69582 		movzbl	-3710(%rbp), %edx
 2643      F1FFFF
 2644 23dd 0FB6B581 		movzbl	-3711(%rbp), %esi
 2644      F1FFFF
 2645 23e4 488BBD48 		movq	-3768(%rbp), %rdi
 2645      F1FFFF
 2646 23eb 488D8D7A 		leaq	-3718(%rbp), %rcx
 2646      F1FFFF
 2647 23f2 488B8568 		movq	-3736(%rbp), %rax
 2647      F1FFFF
 2648 23f9 4989F9   		movq	%rdi, %r9
 2649 23fc 4989C8   		movq	%rcx, %r8
 2650 23ff B9030000 		movl	$3, %ecx
 2650      00
 2651 2404 4889C7   		movq	%rax, %rdi
 2652 2407 E8000000 		call	flSingleBitPortAccess@PLT
 2652      00
 2653 240c 898590F1 		movl	%eax, -3696(%rbp)
 2653      FFFF
 424:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2654              		.loc 2 424 3
 2655 2412 83BD90F1 		cmpl	$0, -3696(%rbp)
 2655      FFFF00
 2656 2419 742A     		je	.L143
 2657              		.loc 2 424 3 is_stmt 0 discriminator 1
 2658 241b 488B8548 		movq	-3768(%rbp), %rax
 2658      F1FFFF
 2659 2422 488D1500 		leaq	.LC18(%rip), %rdx
 2659      000000
 2660 2429 4889D6   		movq	%rdx, %rsi
 2661 242c 4889C7   		movq	%rax, %rdi
 2662 242f E8000000 		call	errPrefix@PLT
 2662      00
 2663 2434 8B8590F1 		movl	-3696(%rbp), %eax
 2663      FFFF
 2664 243a 898588F1 		movl	%eax, -3704(%rbp)
 2664      FFFF
 2665 2440 E94B0200 		jmp	.L72
 2665      00
 2666              	.L143:
 425:prog.c        **** 		fStatus = flSingleBitPortAccess(handle, donePort, doneBit, PIN_INPUT, &doneStatus, error);
 2667              		.loc 2 425 13 is_stmt 1
 2668 2445 0FB69584 		movzbl	-3708(%rbp), %edx
 2668      F1FFFF
 2669 244c 0FB6B583 		movzbl	-3709(%rbp), %esi
 2669      F1FFFF
 2670 2453 488BBD48 		movq	-3768(%rbp), %rdi
 2670      F1FFFF
 2671 245a 488D8D7B 		leaq	-3717(%rbp), %rcx
 2671      F1FFFF
 2672 2461 488B8568 		movq	-3736(%rbp), %rax
 2672      F1FFFF
 2673 2468 4989F9   		movq	%rdi, %r9
 2674 246b 4989C8   		movq	%rcx, %r8
 2675 246e B9030000 		movl	$3, %ecx
 2675      00
 2676 2473 4889C7   		movq	%rax, %rdi
 2677 2476 E8000000 		call	flSingleBitPortAccess@PLT
 2677      00
 2678 247b 898590F1 		movl	%eax, -3696(%rbp)
 2678      FFFF
 426:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2679              		.loc 2 426 3
 2680 2481 83BD90F1 		cmpl	$0, -3696(%rbp)
 2680      FFFF00
 2681 2488 742A     		je	.L144
 2682              		.loc 2 426 3 is_stmt 0 discriminator 1
 2683 248a 488B8548 		movq	-3768(%rbp), %rax
 2683      F1FFFF
 2684 2491 488D1500 		leaq	.LC18(%rip), %rdx
 2684      000000
 2685 2498 4889D6   		movq	%rdx, %rsi
 2686 249b 4889C7   		movq	%rax, %rdi
 2687 249e E8000000 		call	errPrefix@PLT
 2687      00
 2688 24a3 8B8590F1 		movl	-3696(%rbp), %eax
 2688      FFFF
 2689 24a9 898588F1 		movl	%eax, -3704(%rbp)
 2689      FFFF
 2690 24af E9DC0100 		jmp	.L72
 2690      00
 2691              	.L144:
 427:prog.c        **** 		if ( doneStatus ) {
 2692              		.loc 2 427 8 is_stmt 1
 2693 24b4 0FB6857B 		movzbl	-3717(%rbp), %eax
 2693      F1FFFF
 2694              		.loc 2 427 6
 2695 24bb 84C0     		testb	%al, %al
 2696 24bd 0F85E100 		jne	.L159
 2696      0000
 428:prog.c        **** 			// If DONE goes high, we've finished.
 429:prog.c        **** 			break;
 430:prog.c        **** 		} else if ( initStatus ) {
 2697              		.loc 2 430 15
 2698 24c3 0FB6857A 		movzbl	-3718(%rbp), %eax
 2698      F1FFFF
 2699              		.loc 2 430 13
 2700 24ca 84C0     		testb	%al, %al
 2701 24cc 0F84AA00 		je	.L147
 2701      0000
 431:prog.c        **** 			// If DONE remains low and INIT remains high, we probably just need more clocks
 432:prog.c        **** 			i++;
 2702              		.loc 2 432 5
 2703 24d2 83858CF1 		addl	$1, -3700(%rbp)
 2703      FFFF01
 433:prog.c        **** 			CHECK_STATUS(i == 10, FL_PROG_ERR, cleanup, "xProgram(): DONE did not assert");
 2704              		.loc 2 433 4
 2705 24d9 83BD8CF1 		cmpl	$10, -3700(%rbp)
 2705      FFFF0A
 2706 24e0 7528     		jne	.L148
 2707              		.loc 2 433 4 is_stmt 0 discriminator 1
 2708 24e2 488B8548 		movq	-3768(%rbp), %rax
 2708      F1FFFF
 2709 24e9 488D1500 		leaq	.LC21(%rip), %rdx
 2709      000000
 2710 24f0 4889D6   		movq	%rdx, %rsi
 2711 24f3 4889C7   		movq	%rax, %rdi
 2712 24f6 E8000000 		call	errPrefix@PLT
 2712      00
 2713 24fb C78588F1 		movl	$20, -3704(%rbp)
 2713      FFFF1400 
 2713      0000
 2714 2505 E9860100 		jmp	.L72
 2714      00
 2715              	.L148:
 434:prog.c        **** 			fStatus = dataWrite(handle, progOp, zeroBlock, 64, lookupTable, error);
 2716              		.loc 2 434 14 is_stmt 1
 2717 250a 488BBD48 		movq	-3768(%rbp), %rdi
 2717      F1FFFF
 2718 2511 488D8DF0 		leaq	-272(%rbp), %rcx
 2718      FEFFFF
 2719 2518 488D95B0 		leaq	-336(%rbp), %rdx
 2719      FEFFFF
 2720 251f 8BB564F1 		movl	-3740(%rbp), %esi
 2720      FFFF
 2721 2525 488B8568 		movq	-3736(%rbp), %rax
 2721      F1FFFF
 2722 252c 4989F9   		movq	%rdi, %r9
 2723 252f 4989C8   		movq	%rcx, %r8
 2724 2532 B9400000 		movl	$64, %ecx
 2724      00
 2725 2537 4889C7   		movq	%rax, %rdi
 2726 253a E837E3FF 		call	dataWrite
 2726      FF
 2727 253f 898590F1 		movl	%eax, -3696(%rbp)
 2727      FFFF
 435:prog.c        **** 			CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2728              		.loc 2 435 4
 2729 2545 83BD90F1 		cmpl	$0, -3696(%rbp)
 2729      FFFF00
 2730 254c 0F8484FE 		je	.L150
 2730      FFFF
 2731              		.loc 2 435 4 is_stmt 0 discriminator 1
 2732 2552 488B8548 		movq	-3768(%rbp), %rax
 2732      F1FFFF
 2733 2559 488D1500 		leaq	.LC18(%rip), %rdx
 2733      000000
 2734 2560 4889D6   		movq	%rdx, %rsi
 2735 2563 4889C7   		movq	%rax, %rdi
 2736 2566 E8000000 		call	errPrefix@PLT
 2736      00
 2737 256b 8B8590F1 		movl	-3696(%rbp), %eax
 2737      FFFF
 2738 2571 898588F1 		movl	%eax, -3704(%rbp)
 2738      FFFF
 2739 2577 E9140100 		jmp	.L72
 2739      00
 2740              	.L147:
 436:prog.c        **** 		} else {
 437:prog.c        **** 			// If DONE remains low and INIT goes low, an error occurred
 438:prog.c        **** 			CHECK_STATUS(
 2741              		.loc 2 438 4 is_stmt 1 discriminator 1
 2742 257c 488B8548 		movq	-3768(%rbp), %rax
 2742      F1FFFF
 2743 2583 488D1500 		leaq	.LC22(%rip), %rdx
 2743      000000
 2744 258a 4889D6   		movq	%rdx, %rsi
 2745 258d 4889C7   		movq	%rax, %rdi
 2746 2590 E8000000 		call	errPrefix@PLT
 2746      00
 2747 2595 C78588F1 		movl	$20, -3704(%rbp)
 2747      FFFF1400 
 2747      0000
 2748 259f E9EC0000 		jmp	.L72
 2748      00
 2749              	.L159:
 429:prog.c        **** 		} else if ( initStatus ) {
 2750              		.loc 2 429 4
 2751 25a4 90       		nop
 439:prog.c        **** 				true, FL_PROG_ERR, cleanup,
 440:prog.c        **** 				"xProgram(): INIT unexpectedly low (CRC error during config)");
 441:prog.c        **** 		}
 442:prog.c        **** 	}
 443:prog.c        **** 
 444:prog.c        **** 	// Make all specified pins inputs; leave INIT & DONE as inputs and leave PROG driven high
 445:prog.c        **** 	for ( port = 0; port < 26; port++ ) {
 2752              		.loc 2 445 13
 2753 25a5 C6857CF1 		movb	$0, -3716(%rbp)
 2753      FFFF00
 2754              		.loc 2 445 2
 2755 25ac E9D10000 		jmp	.L151
 2755      00
 2756              	.L155:
 446:prog.c        **** 		for ( bit = 0; bit < 32; bit++ ) {
 2757              		.loc 2 446 13
 2758 25b1 C6857DF1 		movb	$0, -3715(%rbp)
 2758      FFFF00
 2759              		.loc 2 446 3
 2760 25b8 E9A80000 		jmp	.L152
 2760      00
 2761              	.L154:
 447:prog.c        **** 			thisPin = pinMap[port][bit];
 2762              		.loc 2 447 26
 2763 25bd 0FB6857C 		movzbl	-3716(%rbp), %eax
 2763      F1FFFF
 2764 25c4 0FB6957D 		movzbl	-3715(%rbp), %edx
 2764      F1FFFF
 2765              		.loc 2 447 12
 2766 25cb 4863D2   		movslq	%edx, %rdx
 2767 25ce 4898     		cltq
 2768 25d0 48C1E005 		salq	$5, %rax
 2769 25d4 4801D0   		addq	%rdx, %rax
 2770 25d7 8B8485A0 		movl	-3680(%rbp,%rax,4), %eax
 2770      F1FFFF
 2771 25de 898594F1 		movl	%eax, -3692(%rbp)
 2771      FFFF
 448:prog.c        **** 			if ( thisPin != PIN_UNUSED ) {
 2772              		.loc 2 448 7
 2773 25e4 83BD94F1 		cmpl	$0, -3692(%rbp)
 2773      FFFF00
 2774 25eb 7468     		je	.L153
 449:prog.c        **** 				fStatus = flSingleBitPortAccess(handle, port, bit, PIN_INPUT, NULL, error);
 2775              		.loc 2 449 15
 2776 25ed 0FB6957D 		movzbl	-3715(%rbp), %edx
 2776      F1FFFF
 2777 25f4 0FB6B57C 		movzbl	-3716(%rbp), %esi
 2777      F1FFFF
 2778 25fb 488B8D48 		movq	-3768(%rbp), %rcx
 2778      F1FFFF
 2779 2602 488B8568 		movq	-3736(%rbp), %rax
 2779      F1FFFF
 2780 2609 4989C9   		movq	%rcx, %r9
 2781 260c 41B80000 		movl	$0, %r8d
 2781      0000
 2782 2612 B9030000 		movl	$3, %ecx
 2782      00
 2783 2617 4889C7   		movq	%rax, %rdi
 2784 261a E8000000 		call	flSingleBitPortAccess@PLT
 2784      00
 2785 261f 898590F1 		movl	%eax, -3696(%rbp)
 2785      FFFF
 450:prog.c        **** 				CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2786              		.loc 2 450 5
 2787 2625 83BD90F1 		cmpl	$0, -3696(%rbp)
 2787      FFFF00
 2788 262c 7427     		je	.L153
 2789              		.loc 2 450 5 is_stmt 0 discriminator 1
 2790 262e 488B8548 		movq	-3768(%rbp), %rax
 2790      F1FFFF
 2791 2635 488D1500 		leaq	.LC18(%rip), %rdx
 2791      000000
 2792 263c 4889D6   		movq	%rdx, %rsi
 2793 263f 4889C7   		movq	%rax, %rdi
 2794 2642 E8000000 		call	errPrefix@PLT
 2794      00
 2795 2647 8B8590F1 		movl	-3696(%rbp), %eax
 2795      FFFF
 2796 264d 898588F1 		movl	%eax, -3704(%rbp)
 2796      FFFF
 2797 2653 EB3B     		jmp	.L72
 2798              	.L153:
 446:prog.c        **** 			thisPin = pinMap[port][bit];
 2799              		.loc 2 446 31 is_stmt 1 discriminator 2
 2800 2655 0FB6857D 		movzbl	-3715(%rbp), %eax
 2800      F1FFFF
 2801 265c 83C001   		addl	$1, %eax
 2802 265f 88857DF1 		movb	%al, -3715(%rbp)
 2802      FFFF
 2803              	.L152:
 446:prog.c        **** 			thisPin = pinMap[port][bit];
 2804              		.loc 2 446 22 discriminator 1
 2805 2665 80BD7DF1 		cmpb	$31, -3715(%rbp)
 2805      FFFF1F
 2806 266c 0F864BFF 		jbe	.L154
 2806      FFFF
 445:prog.c        **** 		for ( bit = 0; bit < 32; bit++ ) {
 2807              		.loc 2 445 33 discriminator 2
 2808 2672 0FB6857C 		movzbl	-3716(%rbp), %eax
 2808      F1FFFF
 2809 2679 83C001   		addl	$1, %eax
 2810 267c 88857CF1 		movb	%al, -3716(%rbp)
 2810      FFFF
 2811              	.L151:
 445:prog.c        **** 		for ( bit = 0; bit < 32; bit++ ) {
 2812              		.loc 2 445 23 discriminator 1
 2813 2682 80BD7CF1 		cmpb	$25, -3716(%rbp)
 2813      FFFF19
 2814 2689 0F8622FF 		jbe	.L155
 2814      FFFF
 451:prog.c        **** 			}
 452:prog.c        **** 		}
 453:prog.c        **** 	}
 454:prog.c        **** cleanup:
 2815              		.loc 2 454 1
 2816 268f 90       		nop
 2817              	.L72:
 455:prog.c        **** 	return retVal;
 2818              		.loc 2 455 9
 2819 2690 8B8588F1 		movl	-3704(%rbp), %eax
 2819      FFFF
 456:prog.c        **** }
 2820              		.loc 2 456 1
 2821 2696 488B55F8 		movq	-8(%rbp), %rdx
 2822 269a 64482B14 		subq	%fs:40, %rdx
 2822      25280000 
 2822      00
 2823 26a3 7405     		je	.L157
 2824 26a5 E8000000 		call	__stack_chk_fail@PLT
 2824      00
 2825              	.L157:
 2826 26aa C9       		leave
 2827              		.cfi_def_cfa 7, 8
 2828 26ab C3       		ret
 2829              		.cfi_endproc
 2830              	.LFE12:
 2832              		.section	.rodata
 2833 049c 00000000 		.align 8
 2834              	.LC23:
 2835 04a0 6150726F 		.string	"aProgram(): Unexpected end of config string:\n  %s\n  %s^"
 2835      6772616D 
 2835      28293A20 
 2835      556E6578 
 2835      70656374 
 2836              		.align 8
 2837              	.LC24:
 2838 04d8 6150726F 		.string	"aProgram(): Expecting ':':\n  %s\n  %s^"
 2838      6772616D 
 2838      28293A20 
 2838      45787065 
 2838      6374696E 
 2839 04fe 0000     		.align 8
 2840              	.LC25:
 2841 0500 6150726F 		.string	"aProgram(): Port is not valid (try 'A', 'B', 'C', etc):\n  %s\n  %s^"
 2841      6772616D 
 2841      28293A20 
 2841      506F7274 
 2841      20697320 
 2842 0543 00000000 		.align 8
 2842      00
 2843              	.LC26:
 2844 0548 6150726F 		.string	"aProgram(): Bit number is not valid:\n  %s\n  %s^"
 2844      6772616D 
 2844      28293A20 
 2844      42697420 
 2844      6E756D62 
 2845              		.align 8
 2846              	.LC27:
 2847 0578 6150726F 		.string	"aProgram(): port '%c%d' is already used:\n  %s\n  %s^"
 2847      6772616D 
 2847      28293A20 
 2847      706F7274 
 2847      20272563 
 2848              	.LC28:
 2849 05ac 6150726F 		.string	"aProgram()"
 2849      6772616D 
 2849      282900
 2850 05b7 00       		.align 8
 2851              	.LC29:
 2852 05b8 6150726F 		.string	"aProgram(): Expecting ']':\n  %s\n  %s^"
 2852      6772616D 
 2852      28293A20 
 2852      45787065 
 2852      6374696E 
 2853 05de 0000     		.align 8
 2854              	.LC30:
 2855 05e0 6150726F 		.string	"aProgram(): Expecting ':' or end-of-string:\n  %s\n  %s^"
 2855      6772616D 
 2855      28293A20 
 2855      45787065 
 2855      6374696E 
 2856 0617 00       		.align 8
 2857              	.LC31:
 2858 0618 6150726F 		.string	"aProgram(): CONF_DONE remained low (CRC error during config)"
 2858      6772616D 
 2858      28293A20 
 2858      434F4E46 
 2858      5F444F4E 
 2859              		.text
 2861              	aProgram:
 2862              	.LFB13:
 457:prog.c        **** 
 458:prog.c        **** // This function performs a "passive" serial programming operation on Altera FPGAs.
 459:prog.c        **** //
 460:prog.c        **** // Called by:
 461:prog.c        **** //   flProgramBlob() -> xProgram()
 462:prog.c        **** //
 463:prog.c        **** static FLStatus aProgram(struct FLContext *handle, const char *portConfig, const uint8 *data, uint3
 2863              		.loc 2 463 127
 2864              		.cfi_startproc
 2865 26ac F30F1EFA 		endbr64
 2866 26b0 55       		pushq	%rbp
 2867              		.cfi_def_cfa_offset 16
 2868              		.cfi_offset 6, -16
 2869 26b1 4889E5   		movq	%rsp, %rbp
 2870              		.cfi_def_cfa_register 6
 2871 26b4 4881EC70 		subq	$3696, %rsp
 2871      0E0000
 2872 26bb 4889BDB8 		movq	%rdi, -3656(%rbp)
 2872      F1FFFF
 2873 26c2 4889B5B0 		movq	%rsi, -3664(%rbp)
 2873      F1FFFF
 2874 26c9 488995A8 		movq	%rdx, -3672(%rbp)
 2874      F1FFFF
 2875 26d0 898DA4F1 		movl	%ecx, -3676(%rbp)
 2875      FFFF
 2876 26d6 4C898598 		movq	%r8, -3688(%rbp)
 2876      F1FFFF
 2877              		.loc 2 463 127
 2878 26dd 64488B04 		movq	%fs:40, %rax
 2878      25280000 
 2878      00
 2879 26e6 488945F8 		movq	%rax, -8(%rbp)
 2880 26ea 31C0     		xorl	%eax, %eax
 464:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
 2881              		.loc 2 464 11
 2882 26ec C785CCF1 		movl	$0, -3636(%rbp)
 2882      FFFF0000 
 2882      0000
 465:prog.c        **** 	FLStatus fStatus;
 466:prog.c        **** 	uint8 ncfgPort, ncfgBit;
 467:prog.c        **** 	uint8 donePort, doneBit;
 468:prog.c        **** 	uint8 dclkPort, dclkBit;
 469:prog.c        **** 	uint8 dataPort, dataBit;
 470:prog.c        **** 	uint8 port, bit;
 471:prog.c        **** 	uint8 doneStatus;
 472:prog.c        **** 	const char *ptr = portConfig + 2;
 2883              		.loc 2 472 31
 2884 26f6 488B85B0 		movq	-3664(%rbp), %rax
 2884      F1FFFF
 2885 26fd 4883C002 		addq	$2, %rax
 2886              		.loc 2 472 14
 2887 2701 488985D8 		movq	%rax, -3624(%rbp)
 2887      F1FFFF
 473:prog.c        **** 	PinConfig pinMap[26][32] = {{0,},};
 2888              		.loc 2 473 12
 2889 2708 488D95E0 		leaq	-3616(%rbp), %rdx
 2889      F1FFFF
 2890 270f B8000000 		movl	$0, %eax
 2890      00
 2891 2714 B9A00100 		movl	$416, %ecx
 2891      00
 2892 2719 4889D7   		movq	%rdx, %rdi
 2893 271c F348AB   		rep stosq
 474:prog.c        **** 	PinConfig thisPin;
 475:prog.c        **** 	uint8 lookupTable[256];
 476:prog.c        **** 	const uint8 bitOrder[8] = {0,1,2,3,4,5,6,7};
 2894              		.loc 2 476 14
 2895 271f 48B80001 		movabsq	$506097522914230528, %rax
 2895      02030405 
 2895      0607
 2896 2729 488985E8 		movq	%rax, -280(%rbp)
 2896      FEFFFF
 477:prog.c        **** 	char ch;
 478:prog.c        **** 	EXPECT_CHAR(':', "aProgram");
 2897              		.loc 2 478 2
 2898 2730 488B85D8 		movq	-3624(%rbp), %rax
 2898      F1FFFF
 2899 2737 0FB600   		movzbl	(%rax), %eax
 2900 273a 8885C3F1 		movb	%al, -3645(%rbp)
 2900      FFFF
 2901 2740 80BDC3F1 		cmpb	$0, -3645(%rbp)
 2901      FFFF00
 2902 2747 754A     		jne	.L161
 2903              		.loc 2 478 2 is_stmt 0 discriminator 1
 2904 2749 488B85D8 		movq	-3624(%rbp), %rax
 2904      F1FFFF
 2905 2750 482B85B0 		subq	-3664(%rbp), %rax
 2905      F1FFFF
 2906 2757 4889C7   		movq	%rax, %rdi
 2907 275a E86CDAFF 		call	spaces
 2907      FF
 2908 275f 4889C1   		movq	%rax, %rcx
 2909 2762 488B95B0 		movq	-3664(%rbp), %rdx
 2909      F1FFFF
 2910 2769 488B8598 		movq	-3688(%rbp), %rax
 2910      F1FFFF
 2911 2770 488D3500 		leaq	.LC23(%rip), %rsi
 2911      000000
 2912 2777 4889C7   		movq	%rax, %rdi
 2913 277a B8000000 		movl	$0, %eax
 2913      00
 2914 277f E8000000 		call	errRender@PLT
 2914      00
 2915 2784 C785CCF1 		movl	$11, -3636(%rbp)
 2915      FFFF0B00 
 2915      0000
 2916 278e E9DD1100 		jmp	.L162
 2916      00
 2917              	.L161:
 2918              		.loc 2 478 2 discriminator 2
 2919 2793 80BDC3F1 		cmpb	$58, -3645(%rbp)
 2919      FFFF3A
 2920 279a 744A     		je	.L163
 2921              		.loc 2 478 2 discriminator 3
 2922 279c 488B85D8 		movq	-3624(%rbp), %rax
 2922      F1FFFF
 2923 27a3 482B85B0 		subq	-3664(%rbp), %rax
 2923      F1FFFF
 2924 27aa 4889C7   		movq	%rax, %rdi
 2925 27ad E819DAFF 		call	spaces
 2925      FF
 2926 27b2 4889C1   		movq	%rax, %rcx
 2927 27b5 488B95B0 		movq	-3664(%rbp), %rdx
 2927      F1FFFF
 2928 27bc 488B8598 		movq	-3688(%rbp), %rax
 2928      F1FFFF
 2929 27c3 488D3500 		leaq	.LC24(%rip), %rsi
 2929      000000
 2930 27ca 4889C7   		movq	%rax, %rdi
 2931 27cd B8000000 		movl	$0, %eax
 2931      00
 2932 27d2 E8000000 		call	errRender@PLT
 2932      00
 2933 27d7 C785CCF1 		movl	$11, -3636(%rbp)
 2933      FFFF0B00 
 2933      0000
 2934 27e1 E98A1100 		jmp	.L162
 2934      00
 2935              	.L163:
 2936              		.loc 2 478 2 discriminator 4
 2937 27e6 488B85D8 		movq	-3624(%rbp), %rax
 2937      F1FFFF
 2938 27ed 4883C001 		addq	$1, %rax
 2939 27f1 488985D8 		movq	%rax, -3624(%rbp)
 2939      F1FFFF
 479:prog.c        **** 
 480:prog.c        **** 	GET_PAIR(ncfgPort, ncfgBit, "aProgram");
 2940              		.loc 2 480 2 is_stmt 1 discriminator 4
 2941 27f8 488B85D8 		movq	-3624(%rbp), %rax
 2941      F1FFFF
 2942 27ff 0FB600   		movzbl	(%rax), %eax
 2943 2802 8885C3F1 		movb	%al, -3645(%rbp)
 2943      FFFF
 2944 2808 80BDC3F1 		cmpb	$0, -3645(%rbp)
 2944      FFFF00
 2945 280f 754A     		jne	.L164
 2946              		.loc 2 480 2 is_stmt 0 discriminator 1
 2947 2811 488B85D8 		movq	-3624(%rbp), %rax
 2947      F1FFFF
 2948 2818 482B85B0 		subq	-3664(%rbp), %rax
 2948      F1FFFF
 2949 281f 4889C7   		movq	%rax, %rdi
 2950 2822 E8A4D9FF 		call	spaces
 2950      FF
 2951 2827 4889C1   		movq	%rax, %rcx
 2952 282a 488B95B0 		movq	-3664(%rbp), %rdx
 2952      F1FFFF
 2953 2831 488B8598 		movq	-3688(%rbp), %rax
 2953      F1FFFF
 2954 2838 488D3500 		leaq	.LC23(%rip), %rsi
 2954      000000
 2955 283f 4889C7   		movq	%rax, %rdi
 2956 2842 B8000000 		movl	$0, %eax
 2956      00
 2957 2847 E8000000 		call	errRender@PLT
 2957      00
 2958 284c C785CCF1 		movl	$11, -3636(%rbp)
 2958      FFFF0B00 
 2958      0000
 2959 2856 E9151100 		jmp	.L162
 2959      00
 2960              	.L164:
 2961              		.loc 2 480 2 discriminator 2
 2962 285b 80BDC3F1 		cmpb	$64, -3645(%rbp)
 2962      FFFF40
 2963 2862 7E09     		jle	.L165
 2964              		.loc 2 480 2 discriminator 4
 2965 2864 80BDC3F1 		cmpb	$90, -3645(%rbp)
 2965      FFFF5A
 2966 286b 7E4A     		jle	.L166
 2967              	.L165:
 2968              		.loc 2 480 2 discriminator 5
 2969 286d 488B85D8 		movq	-3624(%rbp), %rax
 2969      F1FFFF
 2970 2874 482B85B0 		subq	-3664(%rbp), %rax
 2970      F1FFFF
 2971 287b 4889C7   		movq	%rax, %rdi
 2972 287e E848D9FF 		call	spaces
 2972      FF
 2973 2883 4889C1   		movq	%rax, %rcx
 2974 2886 488B95B0 		movq	-3664(%rbp), %rdx
 2974      F1FFFF
 2975 288d 488B8598 		movq	-3688(%rbp), %rax
 2975      F1FFFF
 2976 2894 488D3500 		leaq	.LC25(%rip), %rsi
 2976      000000
 2977 289b 4889C7   		movq	%rax, %rdi
 2978 289e B8000000 		movl	$0, %eax
 2978      00
 2979 28a3 E8000000 		call	errRender@PLT
 2979      00
 2980 28a8 C785CCF1 		movl	$11, -3636(%rbp)
 2980      FFFF0B00 
 2980      0000
 2981 28b2 E9B91000 		jmp	.L162
 2981      00
 2982              	.L166:
 2983              		.loc 2 480 2 discriminator 6
 2984 28b7 0FB685C3 		movzbl	-3645(%rbp), %eax
 2984      F1FFFF
 2985 28be 83E841   		subl	$65, %eax
 2986 28c1 8885C4F1 		movb	%al, -3644(%rbp)
 2986      FFFF
 2987 28c7 488B85D8 		movq	-3624(%rbp), %rax
 2987      F1FFFF
 2988 28ce 4883C001 		addq	$1, %rax
 2989 28d2 488985D8 		movq	%rax, -3624(%rbp)
 2989      F1FFFF
 2990 28d9 488B85D8 		movq	-3624(%rbp), %rax
 2990      F1FFFF
 2991 28e0 0FB600   		movzbl	(%rax), %eax
 2992 28e3 8885C3F1 		movb	%al, -3645(%rbp)
 2992      FFFF
 2993 28e9 80BDC3F1 		cmpb	$0, -3645(%rbp)
 2993      FFFF00
 2994 28f0 754A     		jne	.L167
 2995              		.loc 2 480 2 discriminator 7
 2996 28f2 488B85D8 		movq	-3624(%rbp), %rax
 2996      F1FFFF
 2997 28f9 482B85B0 		subq	-3664(%rbp), %rax
 2997      F1FFFF
 2998 2900 4889C7   		movq	%rax, %rdi
 2999 2903 E8C3D8FF 		call	spaces
 2999      FF
 3000 2908 4889C1   		movq	%rax, %rcx
 3001 290b 488B95B0 		movq	-3664(%rbp), %rdx
 3001      F1FFFF
 3002 2912 488B8598 		movq	-3688(%rbp), %rax
 3002      F1FFFF
 3003 2919 488D3500 		leaq	.LC23(%rip), %rsi
 3003      000000
 3004 2920 4889C7   		movq	%rax, %rdi
 3005 2923 B8000000 		movl	$0, %eax
 3005      00
 3006 2928 E8000000 		call	errRender@PLT
 3006      00
 3007 292d C785CCF1 		movl	$11, -3636(%rbp)
 3007      FFFF0B00 
 3007      0000
 3008 2937 E9341000 		jmp	.L162
 3008      00
 3009              	.L167:
 3010              		.loc 2 480 2 discriminator 8
 3011 293c 80BDC3F1 		cmpb	$47, -3645(%rbp)
 3011      FFFF2F
 3012 2943 7E09     		jle	.L168
 3013              		.loc 2 480 2 discriminator 10
 3014 2945 80BDC3F1 		cmpb	$57, -3645(%rbp)
 3014      FFFF39
 3015 294c 7E4A     		jle	.L169
 3016              	.L168:
 3017              		.loc 2 480 2 discriminator 11
 3018 294e 488B85D8 		movq	-3624(%rbp), %rax
 3018      F1FFFF
 3019 2955 482B85B0 		subq	-3664(%rbp), %rax
 3019      F1FFFF
 3020 295c 4889C7   		movq	%rax, %rdi
 3021 295f E867D8FF 		call	spaces
 3021      FF
 3022 2964 4889C1   		movq	%rax, %rcx
 3023 2967 488B95B0 		movq	-3664(%rbp), %rdx
 3023      F1FFFF
 3024 296e 488B8598 		movq	-3688(%rbp), %rax
 3024      F1FFFF
 3025 2975 488D3500 		leaq	.LC26(%rip), %rsi
 3025      000000
 3026 297c 4889C7   		movq	%rax, %rdi
 3027 297f B8000000 		movl	$0, %eax
 3027      00
 3028 2984 E8000000 		call	errRender@PLT
 3028      00
 3029 2989 C785CCF1 		movl	$11, -3636(%rbp)
 3029      FFFF0B00 
 3029      0000
 3030 2993 E9D80F00 		jmp	.L162
 3030      00
 3031              	.L169:
 3032              		.loc 2 480 2 discriminator 12
 3033 2998 488B85D8 		movq	-3624(%rbp), %rax
 3033      F1FFFF
 3034 299f 488D8DD8 		leaq	-3624(%rbp), %rcx
 3034      F1FFFF
 3035 29a6 BA0A0000 		movl	$10, %edx
 3035      00
 3036 29ab 4889CE   		movq	%rcx, %rsi
 3037 29ae 4889C7   		movq	%rax, %rdi
 3038 29b1 E8000000 		call	strtoul@PLT
 3038      00
 3039 29b6 8885C5F1 		movb	%al, -3643(%rbp)
 3039      FFFF
 481:prog.c        **** 	SET_BIT(ncfgPort, ncfgBit, PIN_LOW, "aProgram");
 3040              		.loc 2 481 2 is_stmt 1 discriminator 12
 3041 29bc 0FB685C4 		movzbl	-3644(%rbp), %eax
 3041      F1FFFF
 3042 29c3 0FB695C5 		movzbl	-3643(%rbp), %edx
 3042      F1FFFF
 3043 29ca 4863D2   		movslq	%edx, %rdx
 3044 29cd 4898     		cltq
 3045 29cf 48C1E005 		salq	$5, %rax
 3046 29d3 4801D0   		addq	%rdx, %rax
 3047 29d6 8B8485E0 		movl	-3616(%rbp,%rax,4), %eax
 3047      F1FFFF
 3048 29dd 85C0     		testl	%eax, %eax
 3049 29df 7469     		je	.L170
 3050              		.loc 2 481 2 is_stmt 0 discriminator 1
 3051 29e1 488B85D8 		movq	-3624(%rbp), %rax
 3051      F1FFFF
 3052 29e8 482B85B0 		subq	-3664(%rbp), %rax
 3052      F1FFFF
 3053 29ef 4883E801 		subq	$1, %rax
 3054 29f3 4889C7   		movq	%rax, %rdi
 3055 29f6 E8D0D7FF 		call	spaces
 3055      FF
 3056 29fb 4889C1   		movq	%rax, %rcx
 3057 29fe 0FB695C5 		movzbl	-3643(%rbp), %edx
 3057      F1FFFF
 3058 2a05 0FB685C4 		movzbl	-3644(%rbp), %eax
 3058      F1FFFF
 3059 2a0c 8D7041   		leal	65(%rax), %esi
 3060 2a0f 488BBDB0 		movq	-3664(%rbp), %rdi
 3060      F1FFFF
 3061 2a16 488B8598 		movq	-3688(%rbp), %rax
 3061      F1FFFF
 3062 2a1d 4989C9   		movq	%rcx, %r9
 3063 2a20 4989F8   		movq	%rdi, %r8
 3064 2a23 89D1     		movl	%edx, %ecx
 3065 2a25 89F2     		movl	%esi, %edx
 3066 2a27 488D3500 		leaq	.LC27(%rip), %rsi
 3066      000000
 3067 2a2e 4889C7   		movq	%rax, %rdi
 3068 2a31 B8000000 		movl	$0, %eax
 3068      00
 3069 2a36 E8000000 		call	errRender@PLT
 3069      00
 3070 2a3b C785CCF1 		movl	$11, -3636(%rbp)
 3070      FFFF0B00 
 3070      0000
 3071 2a45 E9260F00 		jmp	.L162
 3071      00
 3072              	.L170:
 3073              		.loc 2 481 2 discriminator 2
 3074 2a4a 0FB685C4 		movzbl	-3644(%rbp), %eax
 3074      F1FFFF
 3075 2a51 0FB695C5 		movzbl	-3643(%rbp), %edx
 3075      F1FFFF
 3076 2a58 4863D2   		movslq	%edx, %rdx
 3077 2a5b 4898     		cltq
 3078 2a5d 48C1E005 		salq	$5, %rax
 3079 2a61 4801D0   		addq	%rdx, %rax
 3080 2a64 C78485E0 		movl	$2, -3616(%rbp,%rax,4)
 3080      F1FFFF02 
 3080      000000
 482:prog.c        **** 
 483:prog.c        **** 	fStatus = flSingleBitPortAccess(handle, ncfgPort, ncfgBit, PIN_LOW, NULL, error); // nCONFIG is lo
 3081              		.loc 2 483 12 is_stmt 1 discriminator 2
 3082 2a6f 0FB695C5 		movzbl	-3643(%rbp), %edx
 3082      F1FFFF
 3083 2a76 0FB6B5C4 		movzbl	-3644(%rbp), %esi
 3083      F1FFFF
 3084 2a7d 488B8D98 		movq	-3688(%rbp), %rcx
 3084      F1FFFF
 3085 2a84 488B85B8 		movq	-3656(%rbp), %rax
 3085      F1FFFF
 3086 2a8b 4989C9   		movq	%rcx, %r9
 3087 2a8e 41B80000 		movl	$0, %r8d
 3087      0000
 3088 2a94 B9020000 		movl	$2, %ecx
 3088      00
 3089 2a99 4889C7   		movq	%rax, %rdi
 3090 2a9c E8000000 		call	flSingleBitPortAccess@PLT
 3090      00
 3091 2aa1 8985D0F1 		movl	%eax, -3632(%rbp)
 3091      FFFF
 484:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "aProgram()");
 3092              		.loc 2 484 2 discriminator 2
 3093 2aa7 83BDD0F1 		cmpl	$0, -3632(%rbp)
 3093      FFFF00
 3094 2aae 742A     		je	.L171
 3095              		.loc 2 484 2 is_stmt 0 discriminator 1
 3096 2ab0 488B8598 		movq	-3688(%rbp), %rax
 3096      F1FFFF
 3097 2ab7 488D1500 		leaq	.LC28(%rip), %rdx
 3097      000000
 3098 2abe 4889D6   		movq	%rdx, %rsi
 3099 2ac1 4889C7   		movq	%rax, %rdi
 3100 2ac4 E8000000 		call	errPrefix@PLT
 3100      00
 3101 2ac9 8B85D0F1 		movl	-3632(%rbp), %eax
 3101      FFFF
 3102 2acf 8985CCF1 		movl	%eax, -3636(%rbp)
 3102      FFFF
 3103 2ad5 E9960E00 		jmp	.L162
 3103      00
 3104              	.L171:
 485:prog.c        **** 
 486:prog.c        **** 	GET_PAIR(donePort, doneBit, "aProgram");
 3105              		.loc 2 486 2 is_stmt 1
 3106 2ada 488B85D8 		movq	-3624(%rbp), %rax
 3106      F1FFFF
 3107 2ae1 0FB600   		movzbl	(%rax), %eax
 3108 2ae4 8885C3F1 		movb	%al, -3645(%rbp)
 3108      FFFF
 3109 2aea 80BDC3F1 		cmpb	$0, -3645(%rbp)
 3109      FFFF00
 3110 2af1 754A     		jne	.L172
 3111              		.loc 2 486 2 is_stmt 0 discriminator 1
 3112 2af3 488B85D8 		movq	-3624(%rbp), %rax
 3112      F1FFFF
 3113 2afa 482B85B0 		subq	-3664(%rbp), %rax
 3113      F1FFFF
 3114 2b01 4889C7   		movq	%rax, %rdi
 3115 2b04 E8C2D6FF 		call	spaces
 3115      FF
 3116 2b09 4889C1   		movq	%rax, %rcx
 3117 2b0c 488B95B0 		movq	-3664(%rbp), %rdx
 3117      F1FFFF
 3118 2b13 488B8598 		movq	-3688(%rbp), %rax
 3118      F1FFFF
 3119 2b1a 488D3500 		leaq	.LC23(%rip), %rsi
 3119      000000
 3120 2b21 4889C7   		movq	%rax, %rdi
 3121 2b24 B8000000 		movl	$0, %eax
 3121      00
 3122 2b29 E8000000 		call	errRender@PLT
 3122      00
 3123 2b2e C785CCF1 		movl	$11, -3636(%rbp)
 3123      FFFF0B00 
 3123      0000
 3124 2b38 E9330E00 		jmp	.L162
 3124      00
 3125              	.L172:
 3126              		.loc 2 486 2 discriminator 2
 3127 2b3d 80BDC3F1 		cmpb	$64, -3645(%rbp)
 3127      FFFF40
 3128 2b44 7E09     		jle	.L173
 3129              		.loc 2 486 2 discriminator 4
 3130 2b46 80BDC3F1 		cmpb	$90, -3645(%rbp)
 3130      FFFF5A
 3131 2b4d 7E4A     		jle	.L174
 3132              	.L173:
 3133              		.loc 2 486 2 discriminator 5
 3134 2b4f 488B85D8 		movq	-3624(%rbp), %rax
 3134      F1FFFF
 3135 2b56 482B85B0 		subq	-3664(%rbp), %rax
 3135      F1FFFF
 3136 2b5d 4889C7   		movq	%rax, %rdi
 3137 2b60 E866D6FF 		call	spaces
 3137      FF
 3138 2b65 4889C1   		movq	%rax, %rcx
 3139 2b68 488B95B0 		movq	-3664(%rbp), %rdx
 3139      F1FFFF
 3140 2b6f 488B8598 		movq	-3688(%rbp), %rax
 3140      F1FFFF
 3141 2b76 488D3500 		leaq	.LC25(%rip), %rsi
 3141      000000
 3142 2b7d 4889C7   		movq	%rax, %rdi
 3143 2b80 B8000000 		movl	$0, %eax
 3143      00
 3144 2b85 E8000000 		call	errRender@PLT
 3144      00
 3145 2b8a C785CCF1 		movl	$11, -3636(%rbp)
 3145      FFFF0B00 
 3145      0000
 3146 2b94 E9D70D00 		jmp	.L162
 3146      00
 3147              	.L174:
 3148              		.loc 2 486 2 discriminator 6
 3149 2b99 0FB685C3 		movzbl	-3645(%rbp), %eax
 3149      F1FFFF
 3150 2ba0 83E841   		subl	$65, %eax
 3151 2ba3 8885C6F1 		movb	%al, -3642(%rbp)
 3151      FFFF
 3152 2ba9 488B85D8 		movq	-3624(%rbp), %rax
 3152      F1FFFF
 3153 2bb0 4883C001 		addq	$1, %rax
 3154 2bb4 488985D8 		movq	%rax, -3624(%rbp)
 3154      F1FFFF
 3155 2bbb 488B85D8 		movq	-3624(%rbp), %rax
 3155      F1FFFF
 3156 2bc2 0FB600   		movzbl	(%rax), %eax
 3157 2bc5 8885C3F1 		movb	%al, -3645(%rbp)
 3157      FFFF
 3158 2bcb 80BDC3F1 		cmpb	$0, -3645(%rbp)
 3158      FFFF00
 3159 2bd2 754A     		jne	.L175
 3160              		.loc 2 486 2 discriminator 7
 3161 2bd4 488B85D8 		movq	-3624(%rbp), %rax
 3161      F1FFFF
 3162 2bdb 482B85B0 		subq	-3664(%rbp), %rax
 3162      F1FFFF
 3163 2be2 4889C7   		movq	%rax, %rdi
 3164 2be5 E8E1D5FF 		call	spaces
 3164      FF
 3165 2bea 4889C1   		movq	%rax, %rcx
 3166 2bed 488B95B0 		movq	-3664(%rbp), %rdx
 3166      F1FFFF
 3167 2bf4 488B8598 		movq	-3688(%rbp), %rax
 3167      F1FFFF
 3168 2bfb 488D3500 		leaq	.LC23(%rip), %rsi
 3168      000000
 3169 2c02 4889C7   		movq	%rax, %rdi
 3170 2c05 B8000000 		movl	$0, %eax
 3170      00
 3171 2c0a E8000000 		call	errRender@PLT
 3171      00
 3172 2c0f C785CCF1 		movl	$11, -3636(%rbp)
 3172      FFFF0B00 
 3172      0000
 3173 2c19 E9520D00 		jmp	.L162
 3173      00
 3174              	.L175:
 3175              		.loc 2 486 2 discriminator 8
 3176 2c1e 80BDC3F1 		cmpb	$47, -3645(%rbp)
 3176      FFFF2F
 3177 2c25 7E09     		jle	.L176
 3178              		.loc 2 486 2 discriminator 10
 3179 2c27 80BDC3F1 		cmpb	$57, -3645(%rbp)
 3179      FFFF39
 3180 2c2e 7E4A     		jle	.L177
 3181              	.L176:
 3182              		.loc 2 486 2 discriminator 11
 3183 2c30 488B85D8 		movq	-3624(%rbp), %rax
 3183      F1FFFF
 3184 2c37 482B85B0 		subq	-3664(%rbp), %rax
 3184      F1FFFF
 3185 2c3e 4889C7   		movq	%rax, %rdi
 3186 2c41 E885D5FF 		call	spaces
 3186      FF
 3187 2c46 4889C1   		movq	%rax, %rcx
 3188 2c49 488B95B0 		movq	-3664(%rbp), %rdx
 3188      F1FFFF
 3189 2c50 488B8598 		movq	-3688(%rbp), %rax
 3189      F1FFFF
 3190 2c57 488D3500 		leaq	.LC26(%rip), %rsi
 3190      000000
 3191 2c5e 4889C7   		movq	%rax, %rdi
 3192 2c61 B8000000 		movl	$0, %eax
 3192      00
 3193 2c66 E8000000 		call	errRender@PLT
 3193      00
 3194 2c6b C785CCF1 		movl	$11, -3636(%rbp)
 3194      FFFF0B00 
 3194      0000
 3195 2c75 E9F60C00 		jmp	.L162
 3195      00
 3196              	.L177:
 3197              		.loc 2 486 2 discriminator 12
 3198 2c7a 488B85D8 		movq	-3624(%rbp), %rax
 3198      F1FFFF
 3199 2c81 488D8DD8 		leaq	-3624(%rbp), %rcx
 3199      F1FFFF
 3200 2c88 BA0A0000 		movl	$10, %edx
 3200      00
 3201 2c8d 4889CE   		movq	%rcx, %rsi
 3202 2c90 4889C7   		movq	%rax, %rdi
 3203 2c93 E8000000 		call	strtoul@PLT
 3203      00
 3204 2c98 8885C7F1 		movb	%al, -3641(%rbp)
 3204      FFFF
 487:prog.c        **** 	SET_BIT(donePort, doneBit, PIN_INPUT, "aProgram");
 3205              		.loc 2 487 2 is_stmt 1 discriminator 12
 3206 2c9e 0FB685C6 		movzbl	-3642(%rbp), %eax
 3206      F1FFFF
 3207 2ca5 0FB695C7 		movzbl	-3641(%rbp), %edx
 3207      F1FFFF
 3208 2cac 4863D2   		movslq	%edx, %rdx
 3209 2caf 4898     		cltq
 3210 2cb1 48C1E005 		salq	$5, %rax
 3211 2cb5 4801D0   		addq	%rdx, %rax
 3212 2cb8 8B8485E0 		movl	-3616(%rbp,%rax,4), %eax
 3212      F1FFFF
 3213 2cbf 85C0     		testl	%eax, %eax
 3214 2cc1 7469     		je	.L178
 3215              		.loc 2 487 2 is_stmt 0 discriminator 1
 3216 2cc3 488B85D8 		movq	-3624(%rbp), %rax
 3216      F1FFFF
 3217 2cca 482B85B0 		subq	-3664(%rbp), %rax
 3217      F1FFFF
 3218 2cd1 4883E801 		subq	$1, %rax
 3219 2cd5 4889C7   		movq	%rax, %rdi
 3220 2cd8 E8EED4FF 		call	spaces
 3220      FF
 3221 2cdd 4889C1   		movq	%rax, %rcx
 3222 2ce0 0FB695C7 		movzbl	-3641(%rbp), %edx
 3222      F1FFFF
 3223 2ce7 0FB685C6 		movzbl	-3642(%rbp), %eax
 3223      F1FFFF
 3224 2cee 8D7041   		leal	65(%rax), %esi
 3225 2cf1 488BBDB0 		movq	-3664(%rbp), %rdi
 3225      F1FFFF
 3226 2cf8 488B8598 		movq	-3688(%rbp), %rax
 3226      F1FFFF
 3227 2cff 4989C9   		movq	%rcx, %r9
 3228 2d02 4989F8   		movq	%rdi, %r8
 3229 2d05 89D1     		movl	%edx, %ecx
 3230 2d07 89F2     		movl	%esi, %edx
 3231 2d09 488D3500 		leaq	.LC27(%rip), %rsi
 3231      000000
 3232 2d10 4889C7   		movq	%rax, %rdi
 3233 2d13 B8000000 		movl	$0, %eax
 3233      00
 3234 2d18 E8000000 		call	errRender@PLT
 3234      00
 3235 2d1d C785CCF1 		movl	$11, -3636(%rbp)
 3235      FFFF0B00 
 3235      0000
 3236 2d27 E9440C00 		jmp	.L162
 3236      00
 3237              	.L178:
 3238              		.loc 2 487 2 discriminator 2
 3239 2d2c 0FB685C6 		movzbl	-3642(%rbp), %eax
 3239      F1FFFF
 3240 2d33 0FB695C7 		movzbl	-3641(%rbp), %edx
 3240      F1FFFF
 3241 2d3a 4863D2   		movslq	%edx, %rdx
 3242 2d3d 4898     		cltq
 3243 2d3f 48C1E005 		salq	$5, %rax
 3244 2d43 4801D0   		addq	%rdx, %rax
 3245 2d46 C78485E0 		movl	$3, -3616(%rbp,%rax,4)
 3245      F1FFFF03 
 3245      000000
 488:prog.c        **** 
 489:prog.c        **** 	GET_PAIR(dclkPort, dclkBit, "aProgram");
 3246              		.loc 2 489 2 is_stmt 1 discriminator 2
 3247 2d51 488B85D8 		movq	-3624(%rbp), %rax
 3247      F1FFFF
 3248 2d58 0FB600   		movzbl	(%rax), %eax
 3249 2d5b 8885C3F1 		movb	%al, -3645(%rbp)
 3249      FFFF
 3250 2d61 80BDC3F1 		cmpb	$0, -3645(%rbp)
 3250      FFFF00
 3251 2d68 754A     		jne	.L179
 3252              		.loc 2 489 2 is_stmt 0 discriminator 1
 3253 2d6a 488B85D8 		movq	-3624(%rbp), %rax
 3253      F1FFFF
 3254 2d71 482B85B0 		subq	-3664(%rbp), %rax
 3254      F1FFFF
 3255 2d78 4889C7   		movq	%rax, %rdi
 3256 2d7b E84BD4FF 		call	spaces
 3256      FF
 3257 2d80 4889C1   		movq	%rax, %rcx
 3258 2d83 488B95B0 		movq	-3664(%rbp), %rdx
 3258      F1FFFF
 3259 2d8a 488B8598 		movq	-3688(%rbp), %rax
 3259      F1FFFF
 3260 2d91 488D3500 		leaq	.LC23(%rip), %rsi
 3260      000000
 3261 2d98 4889C7   		movq	%rax, %rdi
 3262 2d9b B8000000 		movl	$0, %eax
 3262      00
 3263 2da0 E8000000 		call	errRender@PLT
 3263      00
 3264 2da5 C785CCF1 		movl	$11, -3636(%rbp)
 3264      FFFF0B00 
 3264      0000
 3265 2daf E9BC0B00 		jmp	.L162
 3265      00
 3266              	.L179:
 3267              		.loc 2 489 2 discriminator 2
 3268 2db4 80BDC3F1 		cmpb	$64, -3645(%rbp)
 3268      FFFF40
 3269 2dbb 7E09     		jle	.L180
 3270              		.loc 2 489 2 discriminator 4
 3271 2dbd 80BDC3F1 		cmpb	$90, -3645(%rbp)
 3271      FFFF5A
 3272 2dc4 7E4A     		jle	.L181
 3273              	.L180:
 3274              		.loc 2 489 2 discriminator 5
 3275 2dc6 488B85D8 		movq	-3624(%rbp), %rax
 3275      F1FFFF
 3276 2dcd 482B85B0 		subq	-3664(%rbp), %rax
 3276      F1FFFF
 3277 2dd4 4889C7   		movq	%rax, %rdi
 3278 2dd7 E8EFD3FF 		call	spaces
 3278      FF
 3279 2ddc 4889C1   		movq	%rax, %rcx
 3280 2ddf 488B95B0 		movq	-3664(%rbp), %rdx
 3280      F1FFFF
 3281 2de6 488B8598 		movq	-3688(%rbp), %rax
 3281      F1FFFF
 3282 2ded 488D3500 		leaq	.LC25(%rip), %rsi
 3282      000000
 3283 2df4 4889C7   		movq	%rax, %rdi
 3284 2df7 B8000000 		movl	$0, %eax
 3284      00
 3285 2dfc E8000000 		call	errRender@PLT
 3285      00
 3286 2e01 C785CCF1 		movl	$11, -3636(%rbp)
 3286      FFFF0B00 
 3286      0000
 3287 2e0b E9600B00 		jmp	.L162
 3287      00
 3288              	.L181:
 3289              		.loc 2 489 2 discriminator 6
 3290 2e10 0FB685C3 		movzbl	-3645(%rbp), %eax
 3290      F1FFFF
 3291 2e17 83E841   		subl	$65, %eax
 3292 2e1a 8885C8F1 		movb	%al, -3640(%rbp)
 3292      FFFF
 3293 2e20 488B85D8 		movq	-3624(%rbp), %rax
 3293      F1FFFF
 3294 2e27 4883C001 		addq	$1, %rax
 3295 2e2b 488985D8 		movq	%rax, -3624(%rbp)
 3295      F1FFFF
 3296 2e32 488B85D8 		movq	-3624(%rbp), %rax
 3296      F1FFFF
 3297 2e39 0FB600   		movzbl	(%rax), %eax
 3298 2e3c 8885C3F1 		movb	%al, -3645(%rbp)
 3298      FFFF
 3299 2e42 80BDC3F1 		cmpb	$0, -3645(%rbp)
 3299      FFFF00
 3300 2e49 754A     		jne	.L182
 3301              		.loc 2 489 2 discriminator 7
 3302 2e4b 488B85D8 		movq	-3624(%rbp), %rax
 3302      F1FFFF
 3303 2e52 482B85B0 		subq	-3664(%rbp), %rax
 3303      F1FFFF
 3304 2e59 4889C7   		movq	%rax, %rdi
 3305 2e5c E86AD3FF 		call	spaces
 3305      FF
 3306 2e61 4889C1   		movq	%rax, %rcx
 3307 2e64 488B95B0 		movq	-3664(%rbp), %rdx
 3307      F1FFFF
 3308 2e6b 488B8598 		movq	-3688(%rbp), %rax
 3308      F1FFFF
 3309 2e72 488D3500 		leaq	.LC23(%rip), %rsi
 3309      000000
 3310 2e79 4889C7   		movq	%rax, %rdi
 3311 2e7c B8000000 		movl	$0, %eax
 3311      00
 3312 2e81 E8000000 		call	errRender@PLT
 3312      00
 3313 2e86 C785CCF1 		movl	$11, -3636(%rbp)
 3313      FFFF0B00 
 3313      0000
 3314 2e90 E9DB0A00 		jmp	.L162
 3314      00
 3315              	.L182:
 3316              		.loc 2 489 2 discriminator 8
 3317 2e95 80BDC3F1 		cmpb	$47, -3645(%rbp)
 3317      FFFF2F
 3318 2e9c 7E09     		jle	.L183
 3319              		.loc 2 489 2 discriminator 10
 3320 2e9e 80BDC3F1 		cmpb	$57, -3645(%rbp)
 3320      FFFF39
 3321 2ea5 7E4A     		jle	.L184
 3322              	.L183:
 3323              		.loc 2 489 2 discriminator 11
 3324 2ea7 488B85D8 		movq	-3624(%rbp), %rax
 3324      F1FFFF
 3325 2eae 482B85B0 		subq	-3664(%rbp), %rax
 3325      F1FFFF
 3326 2eb5 4889C7   		movq	%rax, %rdi
 3327 2eb8 E80ED3FF 		call	spaces
 3327      FF
 3328 2ebd 4889C1   		movq	%rax, %rcx
 3329 2ec0 488B95B0 		movq	-3664(%rbp), %rdx
 3329      F1FFFF
 3330 2ec7 488B8598 		movq	-3688(%rbp), %rax
 3330      F1FFFF
 3331 2ece 488D3500 		leaq	.LC26(%rip), %rsi
 3331      000000
 3332 2ed5 4889C7   		movq	%rax, %rdi
 3333 2ed8 B8000000 		movl	$0, %eax
 3333      00
 3334 2edd E8000000 		call	errRender@PLT
 3334      00
 3335 2ee2 C785CCF1 		movl	$11, -3636(%rbp)
 3335      FFFF0B00 
 3335      0000
 3336 2eec E97F0A00 		jmp	.L162
 3336      00
 3337              	.L184:
 3338              		.loc 2 489 2 discriminator 12
 3339 2ef1 488B85D8 		movq	-3624(%rbp), %rax
 3339      F1FFFF
 3340 2ef8 488D8DD8 		leaq	-3624(%rbp), %rcx
 3340      F1FFFF
 3341 2eff BA0A0000 		movl	$10, %edx
 3341      00
 3342 2f04 4889CE   		movq	%rcx, %rsi
 3343 2f07 4889C7   		movq	%rax, %rdi
 3344 2f0a E8000000 		call	strtoul@PLT
 3344      00
 3345 2f0f 8885C9F1 		movb	%al, -3639(%rbp)
 3345      FFFF
 490:prog.c        **** 	SET_BIT(dclkPort, dclkBit, PIN_LOW, "aProgram");
 3346              		.loc 2 490 2 is_stmt 1 discriminator 12
 3347 2f15 0FB685C8 		movzbl	-3640(%rbp), %eax
 3347      F1FFFF
 3348 2f1c 0FB695C9 		movzbl	-3639(%rbp), %edx
 3348      F1FFFF
 3349 2f23 4863D2   		movslq	%edx, %rdx
 3350 2f26 4898     		cltq
 3351 2f28 48C1E005 		salq	$5, %rax
 3352 2f2c 4801D0   		addq	%rdx, %rax
 3353 2f2f 8B8485E0 		movl	-3616(%rbp,%rax,4), %eax
 3353      F1FFFF
 3354 2f36 85C0     		testl	%eax, %eax
 3355 2f38 7469     		je	.L185
 3356              		.loc 2 490 2 is_stmt 0 discriminator 1
 3357 2f3a 488B85D8 		movq	-3624(%rbp), %rax
 3357      F1FFFF
 3358 2f41 482B85B0 		subq	-3664(%rbp), %rax
 3358      F1FFFF
 3359 2f48 4883E801 		subq	$1, %rax
 3360 2f4c 4889C7   		movq	%rax, %rdi
 3361 2f4f E877D2FF 		call	spaces
 3361      FF
 3362 2f54 4889C1   		movq	%rax, %rcx
 3363 2f57 0FB695C9 		movzbl	-3639(%rbp), %edx
 3363      F1FFFF
 3364 2f5e 0FB685C8 		movzbl	-3640(%rbp), %eax
 3364      F1FFFF
 3365 2f65 8D7041   		leal	65(%rax), %esi
 3366 2f68 488BBDB0 		movq	-3664(%rbp), %rdi
 3366      F1FFFF
 3367 2f6f 488B8598 		movq	-3688(%rbp), %rax
 3367      F1FFFF
 3368 2f76 4989C9   		movq	%rcx, %r9
 3369 2f79 4989F8   		movq	%rdi, %r8
 3370 2f7c 89D1     		movl	%edx, %ecx
 3371 2f7e 89F2     		movl	%esi, %edx
 3372 2f80 488D3500 		leaq	.LC27(%rip), %rsi
 3372      000000
 3373 2f87 4889C7   		movq	%rax, %rdi
 3374 2f8a B8000000 		movl	$0, %eax
 3374      00
 3375 2f8f E8000000 		call	errRender@PLT
 3375      00
 3376 2f94 C785CCF1 		movl	$11, -3636(%rbp)
 3376      FFFF0B00 
 3376      0000
 3377 2f9e E9CD0900 		jmp	.L162
 3377      00
 3378              	.L185:
 3379              		.loc 2 490 2 discriminator 2
 3380 2fa3 0FB685C8 		movzbl	-3640(%rbp), %eax
 3380      F1FFFF
 3381 2faa 0FB695C9 		movzbl	-3639(%rbp), %edx
 3381      F1FFFF
 3382 2fb1 4863D2   		movslq	%edx, %rdx
 3383 2fb4 4898     		cltq
 3384 2fb6 48C1E005 		salq	$5, %rax
 3385 2fba 4801D0   		addq	%rdx, %rax
 3386 2fbd C78485E0 		movl	$2, -3616(%rbp,%rax,4)
 3386      F1FFFF02 
 3386      000000
 491:prog.c        **** 
 492:prog.c        **** 	GET_PAIR(dataPort, dataBit, "aProgram");
 3387              		.loc 2 492 2 is_stmt 1 discriminator 2
 3388 2fc8 488B85D8 		movq	-3624(%rbp), %rax
 3388      F1FFFF
 3389 2fcf 0FB600   		movzbl	(%rax), %eax
 3390 2fd2 8885C3F1 		movb	%al, -3645(%rbp)
 3390      FFFF
 3391 2fd8 80BDC3F1 		cmpb	$0, -3645(%rbp)
 3391      FFFF00
 3392 2fdf 754A     		jne	.L186
 3393              		.loc 2 492 2 is_stmt 0 discriminator 1
 3394 2fe1 488B85D8 		movq	-3624(%rbp), %rax
 3394      F1FFFF
 3395 2fe8 482B85B0 		subq	-3664(%rbp), %rax
 3395      F1FFFF
 3396 2fef 4889C7   		movq	%rax, %rdi
 3397 2ff2 E8D4D1FF 		call	spaces
 3397      FF
 3398 2ff7 4889C1   		movq	%rax, %rcx
 3399 2ffa 488B95B0 		movq	-3664(%rbp), %rdx
 3399      F1FFFF
 3400 3001 488B8598 		movq	-3688(%rbp), %rax
 3400      F1FFFF
 3401 3008 488D3500 		leaq	.LC23(%rip), %rsi
 3401      000000
 3402 300f 4889C7   		movq	%rax, %rdi
 3403 3012 B8000000 		movl	$0, %eax
 3403      00
 3404 3017 E8000000 		call	errRender@PLT
 3404      00
 3405 301c C785CCF1 		movl	$11, -3636(%rbp)
 3405      FFFF0B00 
 3405      0000
 3406 3026 E9450900 		jmp	.L162
 3406      00
 3407              	.L186:
 3408              		.loc 2 492 2 discriminator 2
 3409 302b 80BDC3F1 		cmpb	$64, -3645(%rbp)
 3409      FFFF40
 3410 3032 7E09     		jle	.L187
 3411              		.loc 2 492 2 discriminator 4
 3412 3034 80BDC3F1 		cmpb	$90, -3645(%rbp)
 3412      FFFF5A
 3413 303b 7E4A     		jle	.L188
 3414              	.L187:
 3415              		.loc 2 492 2 discriminator 5
 3416 303d 488B85D8 		movq	-3624(%rbp), %rax
 3416      F1FFFF
 3417 3044 482B85B0 		subq	-3664(%rbp), %rax
 3417      F1FFFF
 3418 304b 4889C7   		movq	%rax, %rdi
 3419 304e E878D1FF 		call	spaces
 3419      FF
 3420 3053 4889C1   		movq	%rax, %rcx
 3421 3056 488B95B0 		movq	-3664(%rbp), %rdx
 3421      F1FFFF
 3422 305d 488B8598 		movq	-3688(%rbp), %rax
 3422      F1FFFF
 3423 3064 488D3500 		leaq	.LC25(%rip), %rsi
 3423      000000
 3424 306b 4889C7   		movq	%rax, %rdi
 3425 306e B8000000 		movl	$0, %eax
 3425      00
 3426 3073 E8000000 		call	errRender@PLT
 3426      00
 3427 3078 C785CCF1 		movl	$11, -3636(%rbp)
 3427      FFFF0B00 
 3427      0000
 3428 3082 E9E90800 		jmp	.L162
 3428      00
 3429              	.L188:
 3430              		.loc 2 492 2 discriminator 6
 3431 3087 0FB685C3 		movzbl	-3645(%rbp), %eax
 3431      F1FFFF
 3432 308e 83E841   		subl	$65, %eax
 3433 3091 8885CAF1 		movb	%al, -3638(%rbp)
 3433      FFFF
 3434 3097 488B85D8 		movq	-3624(%rbp), %rax
 3434      F1FFFF
 3435 309e 4883C001 		addq	$1, %rax
 3436 30a2 488985D8 		movq	%rax, -3624(%rbp)
 3436      F1FFFF
 3437 30a9 488B85D8 		movq	-3624(%rbp), %rax
 3437      F1FFFF
 3438 30b0 0FB600   		movzbl	(%rax), %eax
 3439 30b3 8885C3F1 		movb	%al, -3645(%rbp)
 3439      FFFF
 3440 30b9 80BDC3F1 		cmpb	$0, -3645(%rbp)
 3440      FFFF00
 3441 30c0 754A     		jne	.L189
 3442              		.loc 2 492 2 discriminator 7
 3443 30c2 488B85D8 		movq	-3624(%rbp), %rax
 3443      F1FFFF
 3444 30c9 482B85B0 		subq	-3664(%rbp), %rax
 3444      F1FFFF
 3445 30d0 4889C7   		movq	%rax, %rdi
 3446 30d3 E8F3D0FF 		call	spaces
 3446      FF
 3447 30d8 4889C1   		movq	%rax, %rcx
 3448 30db 488B95B0 		movq	-3664(%rbp), %rdx
 3448      F1FFFF
 3449 30e2 488B8598 		movq	-3688(%rbp), %rax
 3449      F1FFFF
 3450 30e9 488D3500 		leaq	.LC23(%rip), %rsi
 3450      000000
 3451 30f0 4889C7   		movq	%rax, %rdi
 3452 30f3 B8000000 		movl	$0, %eax
 3452      00
 3453 30f8 E8000000 		call	errRender@PLT
 3453      00
 3454 30fd C785CCF1 		movl	$11, -3636(%rbp)
 3454      FFFF0B00 
 3454      0000
 3455 3107 E9640800 		jmp	.L162
 3455      00
 3456              	.L189:
 3457              		.loc 2 492 2 discriminator 8
 3458 310c 80BDC3F1 		cmpb	$47, -3645(%rbp)
 3458      FFFF2F
 3459 3113 7E09     		jle	.L190
 3460              		.loc 2 492 2 discriminator 10
 3461 3115 80BDC3F1 		cmpb	$57, -3645(%rbp)
 3461      FFFF39
 3462 311c 7E4A     		jle	.L191
 3463              	.L190:
 3464              		.loc 2 492 2 discriminator 11
 3465 311e 488B85D8 		movq	-3624(%rbp), %rax
 3465      F1FFFF
 3466 3125 482B85B0 		subq	-3664(%rbp), %rax
 3466      F1FFFF
 3467 312c 4889C7   		movq	%rax, %rdi
 3468 312f E897D0FF 		call	spaces
 3468      FF
 3469 3134 4889C1   		movq	%rax, %rcx
 3470 3137 488B95B0 		movq	-3664(%rbp), %rdx
 3470      F1FFFF
 3471 313e 488B8598 		movq	-3688(%rbp), %rax
 3471      F1FFFF
 3472 3145 488D3500 		leaq	.LC26(%rip), %rsi
 3472      000000
 3473 314c 4889C7   		movq	%rax, %rdi
 3474 314f B8000000 		movl	$0, %eax
 3474      00
 3475 3154 E8000000 		call	errRender@PLT
 3475      00
 3476 3159 C785CCF1 		movl	$11, -3636(%rbp)
 3476      FFFF0B00 
 3476      0000
 3477 3163 E9080800 		jmp	.L162
 3477      00
 3478              	.L191:
 3479              		.loc 2 492 2 discriminator 12
 3480 3168 488B85D8 		movq	-3624(%rbp), %rax
 3480      F1FFFF
 3481 316f 488D8DD8 		leaq	-3624(%rbp), %rcx
 3481      F1FFFF
 3482 3176 BA0A0000 		movl	$10, %edx
 3482      00
 3483 317b 4889CE   		movq	%rcx, %rsi
 3484 317e 4889C7   		movq	%rax, %rdi
 3485 3181 E8000000 		call	strtoul@PLT
 3485      00
 3486 3186 8885CBF1 		movb	%al, -3637(%rbp)
 3486      FFFF
 493:prog.c        **** 	SET_BIT(dataPort, dataBit, PIN_LOW, "aProgram");
 3487              		.loc 2 493 2 is_stmt 1 discriminator 12
 3488 318c 0FB685CA 		movzbl	-3638(%rbp), %eax
 3488      F1FFFF
 3489 3193 0FB695CB 		movzbl	-3637(%rbp), %edx
 3489      F1FFFF
 3490 319a 4863D2   		movslq	%edx, %rdx
 3491 319d 4898     		cltq
 3492 319f 48C1E005 		salq	$5, %rax
 3493 31a3 4801D0   		addq	%rdx, %rax
 3494 31a6 8B8485E0 		movl	-3616(%rbp,%rax,4), %eax
 3494      F1FFFF
 3495 31ad 85C0     		testl	%eax, %eax
 3496 31af 7469     		je	.L192
 3497              		.loc 2 493 2 is_stmt 0 discriminator 1
 3498 31b1 488B85D8 		movq	-3624(%rbp), %rax
 3498      F1FFFF
 3499 31b8 482B85B0 		subq	-3664(%rbp), %rax
 3499      F1FFFF
 3500 31bf 4883E801 		subq	$1, %rax
 3501 31c3 4889C7   		movq	%rax, %rdi
 3502 31c6 E800D0FF 		call	spaces
 3502      FF
 3503 31cb 4889C1   		movq	%rax, %rcx
 3504 31ce 0FB695CB 		movzbl	-3637(%rbp), %edx
 3504      F1FFFF
 3505 31d5 0FB685CA 		movzbl	-3638(%rbp), %eax
 3505      F1FFFF
 3506 31dc 8D7041   		leal	65(%rax), %esi
 3507 31df 488BBDB0 		movq	-3664(%rbp), %rdi
 3507      F1FFFF
 3508 31e6 488B8598 		movq	-3688(%rbp), %rax
 3508      F1FFFF
 3509 31ed 4989C9   		movq	%rcx, %r9
 3510 31f0 4989F8   		movq	%rdi, %r8
 3511 31f3 89D1     		movl	%edx, %ecx
 3512 31f5 89F2     		movl	%esi, %edx
 3513 31f7 488D3500 		leaq	.LC27(%rip), %rsi
 3513      000000
 3514 31fe 4889C7   		movq	%rax, %rdi
 3515 3201 B8000000 		movl	$0, %eax
 3515      00
 3516 3206 E8000000 		call	errRender@PLT
 3516      00
 3517 320b C785CCF1 		movl	$11, -3636(%rbp)
 3517      FFFF0B00 
 3517      0000
 3518 3215 E9560700 		jmp	.L162
 3518      00
 3519              	.L192:
 3520              		.loc 2 493 2 discriminator 2
 3521 321a 0FB685CA 		movzbl	-3638(%rbp), %eax
 3521      F1FFFF
 3522 3221 0FB695CB 		movzbl	-3637(%rbp), %edx
 3522      F1FFFF
 3523 3228 4863D2   		movslq	%edx, %rdx
 3524 322b 4898     		cltq
 3525 322d 48C1E005 		salq	$5, %rax
 3526 3231 4801D0   		addq	%rdx, %rax
 3527 3234 C78485E0 		movl	$2, -3616(%rbp,%rax,4)
 3527      F1FFFF02 
 3527      000000
 494:prog.c        **** 
 495:prog.c        **** 	GET_CHAR("aProgram");
 3528              		.loc 2 495 2 is_stmt 1 discriminator 2
 3529 323f 488B85D8 		movq	-3624(%rbp), %rax
 3529      F1FFFF
 3530 3246 0FB600   		movzbl	(%rax), %eax
 3531 3249 8885C3F1 		movb	%al, -3645(%rbp)
 3531      FFFF
 3532 324f 80BDC3F1 		cmpb	$0, -3645(%rbp)
 3532      FFFF00
 3533 3256 754A     		jne	.L193
 3534              		.loc 2 495 2 is_stmt 0 discriminator 1
 3535 3258 488B85D8 		movq	-3624(%rbp), %rax
 3535      F1FFFF
 3536 325f 482B85B0 		subq	-3664(%rbp), %rax
 3536      F1FFFF
 3537 3266 4889C7   		movq	%rax, %rdi
 3538 3269 E85DCFFF 		call	spaces
 3538      FF
 3539 326e 4889C1   		movq	%rax, %rcx
 3540 3271 488B95B0 		movq	-3664(%rbp), %rdx
 3540      F1FFFF
 3541 3278 488B8598 		movq	-3688(%rbp), %rax
 3541      F1FFFF
 3542 327f 488D3500 		leaq	.LC23(%rip), %rsi
 3542      000000
 3543 3286 4889C7   		movq	%rax, %rdi
 3544 3289 B8000000 		movl	$0, %eax
 3544      00
 3545 328e E8000000 		call	errRender@PLT
 3545      00
 3546 3293 C785CCF1 		movl	$11, -3636(%rbp)
 3546      FFFF0B00 
 3546      0000
 3547 329d E9CE0600 		jmp	.L162
 3547      00
 3548              	.L193:
 496:prog.c        **** 	if ( ch == '[' ) {
 3549              		.loc 2 496 5 is_stmt 1
 3550 32a2 80BDC3F1 		cmpb	$91, -3645(%rbp)
 3550      FFFF5B
 3551 32a9 0F854101 		jne	.L194
 3551      0000
 497:prog.c        **** 		ptr++;
 3552              		.loc 2 497 6
 3553 32af 488B85D8 		movq	-3624(%rbp), %rax
 3553      F1FFFF
 3554 32b6 4883C001 		addq	$1, %rax
 3555 32ba 488985D8 		movq	%rax, -3624(%rbp)
 3555      F1FFFF
 498:prog.c        **** 		fStatus = populateMap(portConfig, ptr, &ptr, pinMap, error);
 3556              		.loc 2 498 13
 3557 32c1 488BB5D8 		movq	-3624(%rbp), %rsi
 3557      F1FFFF
 3558 32c8 488BBD98 		movq	-3688(%rbp), %rdi
 3558      F1FFFF
 3559 32cf 488D8DE0 		leaq	-3616(%rbp), %rcx
 3559      F1FFFF
 3560 32d6 488D95D8 		leaq	-3624(%rbp), %rdx
 3560      F1FFFF
 3561 32dd 488B85B0 		movq	-3664(%rbp), %rax
 3561      F1FFFF
 3562 32e4 4989F8   		movq	%rdi, %r8
 3563 32e7 4889C7   		movq	%rax, %rdi
 3564 32ea E808CFFF 		call	populateMap
 3564      FF
 3565 32ef 8985D0F1 		movl	%eax, -3632(%rbp)
 3565      FFFF
 499:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "aProgram()");
 3566              		.loc 2 499 3
 3567 32f5 83BDD0F1 		cmpl	$0, -3632(%rbp)
 3567      FFFF00
 3568 32fc 742A     		je	.L195
 3569              		.loc 2 499 3 is_stmt 0 discriminator 1
 3570 32fe 488B8598 		movq	-3688(%rbp), %rax
 3570      F1FFFF
 3571 3305 488D1500 		leaq	.LC28(%rip), %rdx
 3571      000000
 3572 330c 4889D6   		movq	%rdx, %rsi
 3573 330f 4889C7   		movq	%rax, %rdi
 3574 3312 E8000000 		call	errPrefix@PLT
 3574      00
 3575 3317 8B85D0F1 		movl	-3632(%rbp), %eax
 3575      FFFF
 3576 331d 8985CCF1 		movl	%eax, -3636(%rbp)
 3576      FFFF
 3577 3323 E9480600 		jmp	.L162
 3577      00
 3578              	.L195:
 500:prog.c        **** 		EXPECT_CHAR(']', "aProgram");
 3579              		.loc 2 500 3 is_stmt 1
 3580 3328 488B85D8 		movq	-3624(%rbp), %rax
 3580      F1FFFF
 3581 332f 0FB600   		movzbl	(%rax), %eax
 3582 3332 8885C3F1 		movb	%al, -3645(%rbp)
 3582      FFFF
 3583 3338 80BDC3F1 		cmpb	$0, -3645(%rbp)
 3583      FFFF00
 3584 333f 754A     		jne	.L196
 3585              		.loc 2 500 3 is_stmt 0 discriminator 1
 3586 3341 488B85D8 		movq	-3624(%rbp), %rax
 3586      F1FFFF
 3587 3348 482B85B0 		subq	-3664(%rbp), %rax
 3587      F1FFFF
 3588 334f 4889C7   		movq	%rax, %rdi
 3589 3352 E874CEFF 		call	spaces
 3589      FF
 3590 3357 4889C1   		movq	%rax, %rcx
 3591 335a 488B95B0 		movq	-3664(%rbp), %rdx
 3591      F1FFFF
 3592 3361 488B8598 		movq	-3688(%rbp), %rax
 3592      F1FFFF
 3593 3368 488D3500 		leaq	.LC23(%rip), %rsi
 3593      000000
 3594 336f 4889C7   		movq	%rax, %rdi
 3595 3372 B8000000 		movl	$0, %eax
 3595      00
 3596 3377 E8000000 		call	errRender@PLT
 3596      00
 3597 337c C785CCF1 		movl	$11, -3636(%rbp)
 3597      FFFF0B00 
 3597      0000
 3598 3386 E9E50500 		jmp	.L162
 3598      00
 3599              	.L196:
 3600              		.loc 2 500 3 discriminator 2
 3601 338b 80BDC3F1 		cmpb	$93, -3645(%rbp)
 3601      FFFF5D
 3602 3392 744A     		je	.L197
 3603              		.loc 2 500 3 discriminator 3
 3604 3394 488B85D8 		movq	-3624(%rbp), %rax
 3604      F1FFFF
 3605 339b 482B85B0 		subq	-3664(%rbp), %rax
 3605      F1FFFF
 3606 33a2 4889C7   		movq	%rax, %rdi
 3607 33a5 E821CEFF 		call	spaces
 3607      FF
 3608 33aa 4889C1   		movq	%rax, %rcx
 3609 33ad 488B95B0 		movq	-3664(%rbp), %rdx
 3609      F1FFFF
 3610 33b4 488B8598 		movq	-3688(%rbp), %rax
 3610      F1FFFF
 3611 33bb 488D3500 		leaq	.LC29(%rip), %rsi
 3611      000000
 3612 33c2 4889C7   		movq	%rax, %rdi
 3613 33c5 B8000000 		movl	$0, %eax
 3613      00
 3614 33ca E8000000 		call	errRender@PLT
 3614      00
 3615 33cf C785CCF1 		movl	$11, -3636(%rbp)
 3615      FFFF0B00 
 3615      0000
 3616 33d9 E9920500 		jmp	.L162
 3616      00
 3617              	.L197:
 3618              		.loc 2 500 3 discriminator 4
 3619 33de 488B85D8 		movq	-3624(%rbp), %rax
 3619      F1FFFF
 3620 33e5 4883C001 		addq	$1, %rax
 3621 33e9 488985D8 		movq	%rax, -3624(%rbp)
 3621      F1FFFF
 3622              	.L194:
 501:prog.c        **** 	}
 502:prog.c        **** 	ch = *ptr;
 3623              		.loc 2 502 7 is_stmt 1
 3624 33f0 488B85D8 		movq	-3624(%rbp), %rax
 3624      F1FFFF
 3625              		.loc 2 502 5
 3626 33f7 0FB600   		movzbl	(%rax), %eax
 3627 33fa 8885C3F1 		movb	%al, -3645(%rbp)
 3627      FFFF
 503:prog.c        **** 	CHECK_STATUS(
 3628              		.loc 2 503 2
 3629 3400 80BDC3F1 		cmpb	$0, -3645(%rbp)
 3629      FFFF00
 3630 3407 7453     		je	.L198
 3631              		.loc 2 503 2 is_stmt 0 discriminator 1
 3632 3409 80BDC3F1 		cmpb	$58, -3645(%rbp)
 3632      FFFF3A
 3633 3410 744A     		je	.L198
 3634              		.loc 2 503 2 discriminator 2
 3635 3412 488B85D8 		movq	-3624(%rbp), %rax
 3635      F1FFFF
 3636 3419 482B85B0 		subq	-3664(%rbp), %rax
 3636      F1FFFF
 3637 3420 4889C7   		movq	%rax, %rdi
 3638 3423 E8A3CDFF 		call	spaces
 3638      FF
 3639 3428 4889C1   		movq	%rax, %rcx
 3640 342b 488B95B0 		movq	-3664(%rbp), %rdx
 3640      F1FFFF
 3641 3432 488B8598 		movq	-3688(%rbp), %rax
 3641      F1FFFF
 3642 3439 488D3500 		leaq	.LC30(%rip), %rsi
 3642      000000
 3643 3440 4889C7   		movq	%rax, %rdi
 3644 3443 B8000000 		movl	$0, %eax
 3644      00
 3645 3448 E8000000 		call	errRender@PLT
 3645      00
 3646 344d C785CCF1 		movl	$11, -3636(%rbp)
 3646      FFFF0B00 
 3646      0000
 3647 3457 E9140500 		jmp	.L162
 3647      00
 3648              	.L198:
 504:prog.c        **** 		ch != '\0' && ch != ':', FL_CONF_FORMAT, cleanup,
 505:prog.c        **** 		"aProgram(): Expecting ':' or end-of-string:\n  %s\n  %s^", portConfig, spaces(ptr-portConfig));
 506:prog.c        **** 
 507:prog.c        **** 	// Make a lookup table to swap the bits
 508:prog.c        **** 	makeLookup(bitOrder, lookupTable);
 3649              		.loc 2 508 2 is_stmt 1
 3650 345c 488D95F0 		leaq	-272(%rbp), %rdx
 3650      FEFFFF
 3651 3463 488D85E8 		leaq	-280(%rbp), %rax
 3651      FEFFFF
 3652 346a 4889D6   		movq	%rdx, %rsi
 3653 346d 4889C7   		movq	%rax, %rdi
 3654 3470 E840D2FF 		call	makeLookup
 3654      FF
 509:prog.c        **** 
 510:prog.c        **** 	// Map DCLK & DATA0
 511:prog.c        **** 	fStatus = portMap(handle, LP_SCK, dclkPort, dclkBit, error);
 3655              		.loc 2 511 12
 3656 3475 0FB68DC9 		movzbl	-3639(%rbp), %ecx
 3656      F1FFFF
 3657 347c 0FB695C8 		movzbl	-3640(%rbp), %edx
 3657      F1FFFF
 3658 3483 488BB598 		movq	-3688(%rbp), %rsi
 3658      F1FFFF
 3659 348a 488B85B8 		movq	-3656(%rbp), %rax
 3659      F1FFFF
 3660 3491 4989F0   		movq	%rsi, %r8
 3661 3494 BE040000 		movl	$4, %esi
 3661      00
 3662 3499 4889C7   		movq	%rax, %rdi
 3663 349c E872D1FF 		call	portMap
 3663      FF
 3664 34a1 8985D0F1 		movl	%eax, -3632(%rbp)
 3664      FFFF
 512:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "aProgram()");
 3665              		.loc 2 512 2
 3666 34a7 83BDD0F1 		cmpl	$0, -3632(%rbp)
 3666      FFFF00
 3667 34ae 742A     		je	.L199
 3668              		.loc 2 512 2 is_stmt 0 discriminator 1
 3669 34b0 488B8598 		movq	-3688(%rbp), %rax
 3669      F1FFFF
 3670 34b7 488D1500 		leaq	.LC28(%rip), %rdx
 3670      000000
 3671 34be 4889D6   		movq	%rdx, %rsi
 3672 34c1 4889C7   		movq	%rax, %rdi
 3673 34c4 E8000000 		call	errPrefix@PLT
 3673      00
 3674 34c9 8B85D0F1 		movl	-3632(%rbp), %eax
 3674      FFFF
 3675 34cf 8985CCF1 		movl	%eax, -3636(%rbp)
 3675      FFFF
 3676 34d5 E9960400 		jmp	.L162
 3676      00
 3677              	.L199:
 513:prog.c        **** 	fStatus = portMap(handle, LP_MOSI, dataPort, dataBit, error);
 3678              		.loc 2 513 12 is_stmt 1
 3679 34da 0FB68DCB 		movzbl	-3637(%rbp), %ecx
 3679      F1FFFF
 3680 34e1 0FB695CA 		movzbl	-3638(%rbp), %edx
 3680      F1FFFF
 3681 34e8 488BB598 		movq	-3688(%rbp), %rsi
 3681      F1FFFF
 3682 34ef 488B85B8 		movq	-3656(%rbp), %rax
 3682      F1FFFF
 3683 34f6 4989F0   		movq	%rsi, %r8
 3684 34f9 BE020000 		movl	$2, %esi
 3684      00
 3685 34fe 4889C7   		movq	%rax, %rdi
 3686 3501 E80DD1FF 		call	portMap
 3686      FF
 3687 3506 8985D0F1 		movl	%eax, -3632(%rbp)
 3687      FFFF
 514:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "aProgram()");
 3688              		.loc 2 514 2
 3689 350c 83BDD0F1 		cmpl	$0, -3632(%rbp)
 3689      FFFF00
 3690 3513 742A     		je	.L200
 3691              		.loc 2 514 2 is_stmt 0 discriminator 1
 3692 3515 488B8598 		movq	-3688(%rbp), %rax
 3692      F1FFFF
 3693 351c 488D1500 		leaq	.LC28(%rip), %rdx
 3693      000000
 3694 3523 4889D6   		movq	%rdx, %rsi
 3695 3526 4889C7   		movq	%rax, %rdi
 3696 3529 E8000000 		call	errPrefix@PLT
 3696      00
 3697 352e 8B85D0F1 		movl	-3632(%rbp), %eax
 3697      FFFF
 3698 3534 8985CCF1 		movl	%eax, -3636(%rbp)
 3698      FFFF
 3699 353a E9310400 		jmp	.L162
 3699      00
 3700              	.L200:
 515:prog.c        **** 	fStatus = portMap(handle, LP_CHOOSE, 0x00, 0x00, error);
 3701              		.loc 2 515 12 is_stmt 1
 3702 353f 488B9598 		movq	-3688(%rbp), %rdx
 3702      F1FFFF
 3703 3546 488B85B8 		movq	-3656(%rbp), %rax
 3703      F1FFFF
 3704 354d 4989D0   		movq	%rdx, %r8
 3705 3550 B9000000 		movl	$0, %ecx
 3705      00
 3706 3555 BA000000 		movl	$0, %edx
 3706      00
 3707 355a BE000000 		movl	$0, %esi
 3707      00
 3708 355f 4889C7   		movq	%rax, %rdi
 3709 3562 E8ACD0FF 		call	portMap
 3709      FF
 3710 3567 8985D0F1 		movl	%eax, -3632(%rbp)
 3710      FFFF
 516:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "aProgram()");
 3711              		.loc 2 516 2
 3712 356d 83BDD0F1 		cmpl	$0, -3632(%rbp)
 3712      FFFF00
 3713 3574 742A     		je	.L201
 3714              		.loc 2 516 2 is_stmt 0 discriminator 1
 3715 3576 488B8598 		movq	-3688(%rbp), %rax
 3715      F1FFFF
 3716 357d 488D1500 		leaq	.LC28(%rip), %rdx
 3716      000000
 3717 3584 4889D6   		movq	%rdx, %rsi
 3718 3587 4889C7   		movq	%rax, %rdi
 3719 358a E8000000 		call	errPrefix@PLT
 3719      00
 3720 358f 8B85D0F1 		movl	-3632(%rbp), %eax
 3720      FFFF
 3721 3595 8985CCF1 		movl	%eax, -3636(%rbp)
 3721      FFFF
 3722 359b E9D00300 		jmp	.L162
 3722      00
 3723              	.L201:
 517:prog.c        **** 
 518:prog.c        **** 	// Switch to conduit mode zero (=JTAG, etc)
 519:prog.c        **** 	fStatus = flSelectConduit(handle, 0x00, error);
 3724              		.loc 2 519 12 is_stmt 1
 3725 35a0 488B9598 		movq	-3688(%rbp), %rdx
 3725      F1FFFF
 3726 35a7 488B85B8 		movq	-3656(%rbp), %rax
 3726      F1FFFF
 3727 35ae BE000000 		movl	$0, %esi
 3727      00
 3728 35b3 4889C7   		movq	%rax, %rdi
 3729 35b6 E8000000 		call	flSelectConduit@PLT
 3729      00
 3730 35bb 8985D0F1 		movl	%eax, -3632(%rbp)
 3730      FFFF
 520:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "aProgram()");
 3731              		.loc 2 520 2
 3732 35c1 83BDD0F1 		cmpl	$0, -3632(%rbp)
 3732      FFFF00
 3733 35c8 742A     		je	.L202
 3734              		.loc 2 520 2 is_stmt 0 discriminator 1
 3735 35ca 488B8598 		movq	-3688(%rbp), %rax
 3735      F1FFFF
 3736 35d1 488D1500 		leaq	.LC28(%rip), %rdx
 3736      000000
 3737 35d8 4889D6   		movq	%rdx, %rsi
 3738 35db 4889C7   		movq	%rax, %rdi
 3739 35de E8000000 		call	errPrefix@PLT
 3739      00
 3740 35e3 8B85D0F1 		movl	-3632(%rbp), %eax
 3740      FFFF
 3741 35e9 8985CCF1 		movl	%eax, -3636(%rbp)
 3741      FFFF
 3742 35ef E97C0300 		jmp	.L162
 3742      00
 3743              	.L202:
 521:prog.c        **** 
 522:prog.c        **** 	// Apply requested configuration to each specified pin
 523:prog.c        **** 	pinMap[ncfgPort][ncfgBit] = PIN_UNUSED;
 3744              		.loc 2 523 18 is_stmt 1
 3745 35f4 0FB685C4 		movzbl	-3644(%rbp), %eax
 3745      F1FFFF
 3746 35fb 0FB695C5 		movzbl	-3643(%rbp), %edx
 3746      F1FFFF
 3747              		.loc 2 523 28
 3748 3602 4863D2   		movslq	%edx, %rdx
 3749 3605 4898     		cltq
 3750 3607 48C1E005 		salq	$5, %rax
 3751 360b 4801D0   		addq	%rdx, %rax
 3752 360e C78485E0 		movl	$0, -3616(%rbp,%rax,4)
 3752      F1FFFF00 
 3752      000000
 524:prog.c        **** 	for ( port = 0; port < 26; port++ ) {
 3753              		.loc 2 524 13
 3754 3619 C685C1F1 		movb	$0, -3647(%rbp)
 3754      FFFF00
 3755              		.loc 2 524 2
 3756 3620 E9D80000 		jmp	.L203
 3756      00
 3757              	.L207:
 525:prog.c        **** 		for ( bit = 0; bit < 32; bit++ ) {
 3758              		.loc 2 525 13
 3759 3625 C685C2F1 		movb	$0, -3646(%rbp)
 3759      FFFF00
 3760              		.loc 2 525 3
 3761 362c E9AF0000 		jmp	.L204
 3761      00
 3762              	.L206:
 526:prog.c        **** 			thisPin = pinMap[port][bit];
 3763              		.loc 2 526 26
 3764 3631 0FB685C1 		movzbl	-3647(%rbp), %eax
 3764      F1FFFF
 3765 3638 0FB695C2 		movzbl	-3646(%rbp), %edx
 3765      F1FFFF
 3766              		.loc 2 526 12
 3767 363f 4863D2   		movslq	%edx, %rdx
 3768 3642 4898     		cltq
 3769 3644 48C1E005 		salq	$5, %rax
 3770 3648 4801D0   		addq	%rdx, %rax
 3771 364b 8B8485E0 		movl	-3616(%rbp,%rax,4), %eax
 3771      F1FFFF
 3772 3652 8985D4F1 		movl	%eax, -3628(%rbp)
 3772      FFFF
 527:prog.c        **** 			if ( thisPin != PIN_UNUSED ) {
 3773              		.loc 2 527 7
 3774 3658 83BDD4F1 		cmpl	$0, -3628(%rbp)
 3774      FFFF00
 3775 365f 746F     		je	.L205
 528:prog.c        **** 				fStatus = flSingleBitPortAccess(handle, port, bit, thisPin, NULL, error);
 3776              		.loc 2 528 15
 3777 3661 8B85D4F1 		movl	-3628(%rbp), %eax
 3777      FFFF
 3778 3667 0FB6C8   		movzbl	%al, %ecx
 3779 366a 0FB695C2 		movzbl	-3646(%rbp), %edx
 3779      F1FFFF
 3780 3671 0FB6B5C1 		movzbl	-3647(%rbp), %esi
 3780      F1FFFF
 3781 3678 488BBD98 		movq	-3688(%rbp), %rdi
 3781      F1FFFF
 3782 367f 488B85B8 		movq	-3656(%rbp), %rax
 3782      F1FFFF
 3783 3686 4989F9   		movq	%rdi, %r9
 3784 3689 41B80000 		movl	$0, %r8d
 3784      0000
 3785 368f 4889C7   		movq	%rax, %rdi
 3786 3692 E8000000 		call	flSingleBitPortAccess@PLT
 3786      00
 3787 3697 8985D0F1 		movl	%eax, -3632(%rbp)
 3787      FFFF
 529:prog.c        **** 				CHECK_STATUS(fStatus, fStatus, cleanup, "aProgram()");
 3788              		.loc 2 529 5
 3789 369d 83BDD0F1 		cmpl	$0, -3632(%rbp)
 3789      FFFF00
 3790 36a4 742A     		je	.L205
 3791              		.loc 2 529 5 is_stmt 0 discriminator 1
 3792 36a6 488B8598 		movq	-3688(%rbp), %rax
 3792      F1FFFF
 3793 36ad 488D1500 		leaq	.LC28(%rip), %rdx
 3793      000000
 3794 36b4 4889D6   		movq	%rdx, %rsi
 3795 36b7 4889C7   		movq	%rax, %rdi
 3796 36ba E8000000 		call	errPrefix@PLT
 3796      00
 3797 36bf 8B85D0F1 		movl	-3632(%rbp), %eax
 3797      FFFF
 3798 36c5 8985CCF1 		movl	%eax, -3636(%rbp)
 3798      FFFF
 3799 36cb E9A00200 		jmp	.L162
 3799      00
 3800              	.L205:
 525:prog.c        **** 			thisPin = pinMap[port][bit];
 3801              		.loc 2 525 31 is_stmt 1 discriminator 2
 3802 36d0 0FB685C2 		movzbl	-3646(%rbp), %eax
 3802      F1FFFF
 3803 36d7 83C001   		addl	$1, %eax
 3804 36da 8885C2F1 		movb	%al, -3646(%rbp)
 3804      FFFF
 3805              	.L204:
 525:prog.c        **** 			thisPin = pinMap[port][bit];
 3806              		.loc 2 525 22 discriminator 1
 3807 36e0 80BDC2F1 		cmpb	$31, -3646(%rbp)
 3807      FFFF1F
 3808 36e7 0F8644FF 		jbe	.L206
 3808      FFFF
 524:prog.c        **** 		for ( bit = 0; bit < 32; bit++ ) {
 3809              		.loc 2 524 33 discriminator 2
 3810 36ed 0FB685C1 		movzbl	-3647(%rbp), %eax
 3810      F1FFFF
 3811 36f4 83C001   		addl	$1, %eax
 3812 36f7 8885C1F1 		movb	%al, -3647(%rbp)
 3812      FFFF
 3813              	.L203:
 524:prog.c        **** 		for ( bit = 0; bit < 32; bit++ ) {
 3814              		.loc 2 524 23 discriminator 1
 3815 36fd 80BDC1F1 		cmpb	$25, -3647(%rbp)
 3815      FFFF19
 3816 3704 0F861BFF 		jbe	.L207
 3816      FFFF
 530:prog.c        **** 			}
 531:prog.c        **** 		}
 532:prog.c        **** 	}
 533:prog.c        **** 
 534:prog.c        **** 	// Deassert nCONFIG
 535:prog.c        **** 	fStatus = flSingleBitPortAccess(handle, ncfgPort, ncfgBit, PIN_INPUT, NULL, error); // nCONFIG pul
 3817              		.loc 2 535 12
 3818 370a 0FB695C5 		movzbl	-3643(%rbp), %edx
 3818      F1FFFF
 3819 3711 0FB6B5C4 		movzbl	-3644(%rbp), %esi
 3819      F1FFFF
 3820 3718 488B8D98 		movq	-3688(%rbp), %rcx
 3820      F1FFFF
 3821 371f 488B85B8 		movq	-3656(%rbp), %rax
 3821      F1FFFF
 3822 3726 4989C9   		movq	%rcx, %r9
 3823 3729 41B80000 		movl	$0, %r8d
 3823      0000
 3824 372f B9030000 		movl	$3, %ecx
 3824      00
 3825 3734 4889C7   		movq	%rax, %rdi
 3826 3737 E8000000 		call	flSingleBitPortAccess@PLT
 3826      00
 3827 373c 8985D0F1 		movl	%eax, -3632(%rbp)
 3827      FFFF
 536:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "aProgram()");
 3828              		.loc 2 536 2
 3829 3742 83BDD0F1 		cmpl	$0, -3632(%rbp)
 3829      FFFF00
 3830 3749 742A     		je	.L208
 3831              		.loc 2 536 2 is_stmt 0 discriminator 1
 3832 374b 488B8598 		movq	-3688(%rbp), %rax
 3832      F1FFFF
 3833 3752 488D1500 		leaq	.LC28(%rip), %rdx
 3833      000000
 3834 3759 4889D6   		movq	%rdx, %rsi
 3835 375c 4889C7   		movq	%rax, %rdi
 3836 375f E8000000 		call	errPrefix@PLT
 3836      00
 3837 3764 8B85D0F1 		movl	-3632(%rbp), %eax
 3837      FFFF
 3838 376a 8985CCF1 		movl	%eax, -3636(%rbp)
 3838      FFFF
 3839 3770 E9FB0100 		jmp	.L162
 3839      00
 3840              	.L208:
 537:prog.c        **** 
 538:prog.c        **** 	// Write the programming file into the FPGA
 539:prog.c        **** 	fStatus = dataWrite(handle, PROG_SPI_SEND, data, len, lookupTable, error);
 3841              		.loc 2 539 12 is_stmt 1
 3842 3775 488BBD98 		movq	-3688(%rbp), %rdi
 3842      F1FFFF
 3843 377c 488DB5F0 		leaq	-272(%rbp), %rsi
 3843      FEFFFF
 3844 3783 8B8DA4F1 		movl	-3676(%rbp), %ecx
 3844      FFFF
 3845 3789 488B95A8 		movq	-3672(%rbp), %rdx
 3845      F1FFFF
 3846 3790 488B85B8 		movq	-3656(%rbp), %rax
 3846      F1FFFF
 3847 3797 4989F9   		movq	%rdi, %r9
 3848 379a 4989F0   		movq	%rsi, %r8
 3849 379d BE060000 		movl	$6, %esi
 3849      00
 3850 37a2 4889C7   		movq	%rax, %rdi
 3851 37a5 E8CCD0FF 		call	dataWrite
 3851      FF
 3852 37aa 8985D0F1 		movl	%eax, -3632(%rbp)
 3852      FFFF
 540:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "aProgram()");
 3853              		.loc 2 540 2
 3854 37b0 83BDD0F1 		cmpl	$0, -3632(%rbp)
 3854      FFFF00
 3855 37b7 742A     		je	.L209
 3856              		.loc 2 540 2 is_stmt 0 discriminator 1
 3857 37b9 488B8598 		movq	-3688(%rbp), %rax
 3857      F1FFFF
 3858 37c0 488D1500 		leaq	.LC28(%rip), %rdx
 3858      000000
 3859 37c7 4889D6   		movq	%rdx, %rsi
 3860 37ca 4889C7   		movq	%rax, %rdi
 3861 37cd E8000000 		call	errPrefix@PLT
 3861      00
 3862 37d2 8B85D0F1 		movl	-3632(%rbp), %eax
 3862      FFFF
 3863 37d8 8985CCF1 		movl	%eax, -3636(%rbp)
 3863      FFFF
 3864 37de E98D0100 		jmp	.L162
 3864      00
 3865              	.L209:
 541:prog.c        **** 
 542:prog.c        **** 	// Verify that CONF_DONE went high
 543:prog.c        **** 	fStatus = flSingleBitPortAccess(handle, donePort, doneBit, PIN_INPUT, &doneStatus, error);
 3866              		.loc 2 543 12 is_stmt 1
 3867 37e3 0FB695C7 		movzbl	-3641(%rbp), %edx
 3867      F1FFFF
 3868 37ea 0FB6B5C6 		movzbl	-3642(%rbp), %esi
 3868      F1FFFF
 3869 37f1 488BBD98 		movq	-3688(%rbp), %rdi
 3869      F1FFFF
 3870 37f8 488D8DC0 		leaq	-3648(%rbp), %rcx
 3870      F1FFFF
 3871 37ff 488B85B8 		movq	-3656(%rbp), %rax
 3871      F1FFFF
 3872 3806 4989F9   		movq	%rdi, %r9
 3873 3809 4989C8   		movq	%rcx, %r8
 3874 380c B9030000 		movl	$3, %ecx
 3874      00
 3875 3811 4889C7   		movq	%rax, %rdi
 3876 3814 E8000000 		call	flSingleBitPortAccess@PLT
 3876      00
 3877 3819 8985D0F1 		movl	%eax, -3632(%rbp)
 3877      FFFF
 544:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "aProgram()");
 3878              		.loc 2 544 2
 3879 381f 83BDD0F1 		cmpl	$0, -3632(%rbp)
 3879      FFFF00
 3880 3826 742A     		je	.L210
 3881              		.loc 2 544 2 is_stmt 0 discriminator 1
 3882 3828 488B8598 		movq	-3688(%rbp), %rax
 3882      F1FFFF
 3883 382f 488D1500 		leaq	.LC28(%rip), %rdx
 3883      000000
 3884 3836 4889D6   		movq	%rdx, %rsi
 3885 3839 4889C7   		movq	%rax, %rdi
 3886 383c E8000000 		call	errPrefix@PLT
 3886      00
 3887 3841 8B85D0F1 		movl	-3632(%rbp), %eax
 3887      FFFF
 3888 3847 8985CCF1 		movl	%eax, -3636(%rbp)
 3888      FFFF
 3889 384d E91E0100 		jmp	.L162
 3889      00
 3890              	.L210:
 545:prog.c        **** 	CHECK_STATUS(
 3891              		.loc 2 545 2 is_stmt 1
 3892 3852 0FB685C0 		movzbl	-3648(%rbp), %eax
 3892      F1FFFF
 3893 3859 84C0     		testb	%al, %al
 3894 385b 7528     		jne	.L211
 3895              		.loc 2 545 2 is_stmt 0 discriminator 1
 3896 385d 488B8598 		movq	-3688(%rbp), %rax
 3896      F1FFFF
 3897 3864 488D1500 		leaq	.LC31(%rip), %rdx
 3897      000000
 3898 386b 4889D6   		movq	%rdx, %rsi
 3899 386e 4889C7   		movq	%rax, %rdi
 3900 3871 E8000000 		call	errPrefix@PLT
 3900      00
 3901 3876 C785CCF1 		movl	$20, -3636(%rbp)
 3901      FFFF1400 
 3901      0000
 3902 3880 E9EB0000 		jmp	.L162
 3902      00
 3903              	.L211:
 546:prog.c        **** 		!doneStatus, FL_PROG_ERR, cleanup,
 547:prog.c        **** 		"aProgram(): CONF_DONE remained low (CRC error during config)");
 548:prog.c        **** 
 549:prog.c        **** 	// Make all specified pins inputs; leave CONF_DONE as input and leave nCONFIG driven high
 550:prog.c        **** 	for ( port = 0; port < 26; port++ ) {
 3904              		.loc 2 550 13 is_stmt 1
 3905 3885 C685C1F1 		movb	$0, -3647(%rbp)
 3905      FFFF00
 3906              		.loc 2 550 2
 3907 388c E9D10000 		jmp	.L212
 3907      00
 3908              	.L216:
 551:prog.c        **** 		for ( bit = 0; bit < 32; bit++ ) {
 3909              		.loc 2 551 13
 3910 3891 C685C2F1 		movb	$0, -3646(%rbp)
 3910      FFFF00
 3911              		.loc 2 551 3
 3912 3898 E9A80000 		jmp	.L213
 3912      00
 3913              	.L215:
 552:prog.c        **** 			thisPin = pinMap[port][bit];
 3914              		.loc 2 552 26
 3915 389d 0FB685C1 		movzbl	-3647(%rbp), %eax
 3915      F1FFFF
 3916 38a4 0FB695C2 		movzbl	-3646(%rbp), %edx
 3916      F1FFFF
 3917              		.loc 2 552 12
 3918 38ab 4863D2   		movslq	%edx, %rdx
 3919 38ae 4898     		cltq
 3920 38b0 48C1E005 		salq	$5, %rax
 3921 38b4 4801D0   		addq	%rdx, %rax
 3922 38b7 8B8485E0 		movl	-3616(%rbp,%rax,4), %eax
 3922      F1FFFF
 3923 38be 8985D4F1 		movl	%eax, -3628(%rbp)
 3923      FFFF
 553:prog.c        **** 			if ( thisPin != PIN_UNUSED ) {
 3924              		.loc 2 553 7
 3925 38c4 83BDD4F1 		cmpl	$0, -3628(%rbp)
 3925      FFFF00
 3926 38cb 7468     		je	.L214
 554:prog.c        **** 				fStatus = flSingleBitPortAccess(handle, port, bit, PIN_INPUT, NULL, error);
 3927              		.loc 2 554 15
 3928 38cd 0FB695C2 		movzbl	-3646(%rbp), %edx
 3928      F1FFFF
 3929 38d4 0FB6B5C1 		movzbl	-3647(%rbp), %esi
 3929      F1FFFF
 3930 38db 488B8D98 		movq	-3688(%rbp), %rcx
 3930      F1FFFF
 3931 38e2 488B85B8 		movq	-3656(%rbp), %rax
 3931      F1FFFF
 3932 38e9 4989C9   		movq	%rcx, %r9
 3933 38ec 41B80000 		movl	$0, %r8d
 3933      0000
 3934 38f2 B9030000 		movl	$3, %ecx
 3934      00
 3935 38f7 4889C7   		movq	%rax, %rdi
 3936 38fa E8000000 		call	flSingleBitPortAccess@PLT
 3936      00
 3937 38ff 8985D0F1 		movl	%eax, -3632(%rbp)
 3937      FFFF
 555:prog.c        **** 				CHECK_STATUS(fStatus, fStatus, cleanup, "aProgram()");
 3938              		.loc 2 555 5
 3939 3905 83BDD0F1 		cmpl	$0, -3632(%rbp)
 3939      FFFF00
 3940 390c 7427     		je	.L214
 3941              		.loc 2 555 5 is_stmt 0 discriminator 1
 3942 390e 488B8598 		movq	-3688(%rbp), %rax
 3942      F1FFFF
 3943 3915 488D1500 		leaq	.LC28(%rip), %rdx
 3943      000000
 3944 391c 4889D6   		movq	%rdx, %rsi
 3945 391f 4889C7   		movq	%rax, %rdi
 3946 3922 E8000000 		call	errPrefix@PLT
 3946      00
 3947 3927 8B85D0F1 		movl	-3632(%rbp), %eax
 3947      FFFF
 3948 392d 8985CCF1 		movl	%eax, -3636(%rbp)
 3948      FFFF
 3949 3933 EB3B     		jmp	.L162
 3950              	.L214:
 551:prog.c        **** 			thisPin = pinMap[port][bit];
 3951              		.loc 2 551 31 is_stmt 1 discriminator 2
 3952 3935 0FB685C2 		movzbl	-3646(%rbp), %eax
 3952      F1FFFF
 3953 393c 83C001   		addl	$1, %eax
 3954 393f 8885C2F1 		movb	%al, -3646(%rbp)
 3954      FFFF
 3955              	.L213:
 551:prog.c        **** 			thisPin = pinMap[port][bit];
 3956              		.loc 2 551 22 discriminator 1
 3957 3945 80BDC2F1 		cmpb	$31, -3646(%rbp)
 3957      FFFF1F
 3958 394c 0F864BFF 		jbe	.L215
 3958      FFFF
 550:prog.c        **** 		for ( bit = 0; bit < 32; bit++ ) {
 3959              		.loc 2 550 33 discriminator 2
 3960 3952 0FB685C1 		movzbl	-3647(%rbp), %eax
 3960      F1FFFF
 3961 3959 83C001   		addl	$1, %eax
 3962 395c 8885C1F1 		movb	%al, -3647(%rbp)
 3962      FFFF
 3963              	.L212:
 550:prog.c        **** 		for ( bit = 0; bit < 32; bit++ ) {
 3964              		.loc 2 550 23 discriminator 1
 3965 3962 80BDC1F1 		cmpb	$25, -3647(%rbp)
 3965      FFFF19
 3966 3969 0F8622FF 		jbe	.L216
 3966      FFFF
 556:prog.c        **** 			}
 557:prog.c        **** 		}
 558:prog.c        **** 	}
 559:prog.c        **** cleanup:
 3967              		.loc 2 559 1
 3968 396f 90       		nop
 3969              	.L162:
 560:prog.c        **** 	return retVal;
 3970              		.loc 2 560 9
 3971 3970 8B85CCF1 		movl	-3636(%rbp), %eax
 3971      FFFF
 561:prog.c        **** }
 3972              		.loc 2 561 1
 3973 3976 488B55F8 		movq	-8(%rbp), %rdx
 3974 397a 64482B14 		subq	%fs:40, %rdx
 3974      25280000 
 3974      00
 3975 3983 7405     		je	.L218
 3976 3985 E8000000 		call	__stack_chk_fail@PLT
 3976      00
 3977              	.L218:
 3978 398a C9       		leave
 3979              		.cfi_def_cfa 7, 8
 3980 398b C3       		ret
 3981              		.cfi_endproc
 3982              	.LFE13:
 3984              		.section	.rodata
 3985 0655 000000   		.align 8
 3986              	.LC32:
 3987 0658 70726F67 		.string	"progOpen(): Unexpected end of config string:\n  %s\n  %s^"
 3987      4F70656E 
 3987      28293A20 
 3987      556E6578 
 3987      70656374 
 3988              		.align 8
 3989              	.LC33:
 3990 0690 70726F67 		.string	"progOpen(): Port is not valid (try 'A', 'B', 'C', etc):\n  %s\n  %s^"
 3990      4F70656E 
 3990      28293A20 
 3990      506F7274 
 3990      20697320 
 3991 06d3 00000000 		.align 8
 3991      00
 3992              	.LC34:
 3993 06d8 70726F67 		.string	"progOpen(): Bit number is not valid:\n  %s\n  %s^"
 3993      4F70656E 
 3993      28293A20 
 3993      42697420 
 3993      6E756D62 
 3994              		.align 8
 3995              	.LC35:
 3996 0708 70726F67 		.string	"progOpen(): port '%c%d' is already used:\n  %s\n  %s^"
 3996      4F70656E 
 3996      28293A20 
 3996      706F7274 
 3996      20272563 
 3997              	.LC36:
 3998 073c 70726F67 		.string	"progOpen()"
 3998      4F70656E 
 3998      282900
 3999              		.text
 4001              	progOpenInternal:
 4002              	.LFB14:
 562:prog.c        **** 
 563:prog.c        **** static FLStatus progOpenInternal(struct FLContext *handle, const char *portConfig, const char *ptr,
 4003              		.loc 2 563 121
 4004              		.cfi_startproc
 4005 398c F30F1EFA 		endbr64
 4006 3990 55       		pushq	%rbp
 4007              		.cfi_def_cfa_offset 16
 4008              		.cfi_offset 6, -16
 4009 3991 4889E5   		movq	%rsp, %rbp
 4010              		.cfi_def_cfa_register 6
 4011 3994 4881EC50 		subq	$3408, %rsp
 4011      0D0000
 4012 399b 4889BDC8 		movq	%rdi, -3384(%rbp)
 4012      F2FFFF
 4013 39a2 4889B5C0 		movq	%rsi, -3392(%rbp)
 4013      F2FFFF
 4014 39a9 488995B8 		movq	%rdx, -3400(%rbp)
 4014      F2FFFF
 4015 39b0 48898DB0 		movq	%rcx, -3408(%rbp)
 4015      F2FFFF
 4016              		.loc 2 563 121
 4017 39b7 64488B04 		movq	%fs:40, %rax
 4017      25280000 
 4017      00
 4018 39c0 488945F8 		movq	%rax, -8(%rbp)
 4019 39c4 31C0     		xorl	%eax, %eax
 564:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
 4020              		.loc 2 564 11
 4021 39c6 C785E8F2 		movl	$0, -3352(%rbp)
 4021      FFFF0000 
 4021      0000
 565:prog.c        **** 	FLStatus fStatus;
 566:prog.c        **** 	uint8 misoPort, misoBit;
 567:prog.c        **** 	uint8 mosiPort, mosiBit;
 568:prog.c        **** 	uint8 ssPort, ssBit;
 569:prog.c        **** 	uint8 sckPort, sckBit;
 570:prog.c        **** 	PinConfig pinMap[26][32] = {{0,},};
 4022              		.loc 2 570 12
 4023 39d0 488D95F0 		leaq	-3344(%rbp), %rdx
 4023      F2FFFF
 4024 39d7 B8000000 		movl	$0, %eax
 4024      00
 4025 39dc B9A00100 		movl	$416, %ecx
 4025      00
 4026 39e1 4889D7   		movq	%rdx, %rdi
 4027 39e4 F348AB   		rep stosq
 571:prog.c        **** 	char ch;
 572:prog.c        **** 
 573:prog.c        **** 	// Get all four JTAG bits and tell the micro which ones to use
 574:prog.c        **** 	GET_PAIR(misoPort, misoBit, "progOpen");        // MISO/TDO
 4028              		.loc 2 574 2
 4029 39e7 488B85B8 		movq	-3400(%rbp), %rax
 4029      F2FFFF
 4030 39ee 0FB600   		movzbl	(%rax), %eax
 4031 39f1 8885DFF2 		movb	%al, -3361(%rbp)
 4031      FFFF
 4032 39f7 80BDDFF2 		cmpb	$0, -3361(%rbp)
 4032      FFFF00
 4033 39fe 754A     		jne	.L220
 4034              		.loc 2 574 2 is_stmt 0 discriminator 1
 4035 3a00 488B85B8 		movq	-3400(%rbp), %rax
 4035      F2FFFF
 4036 3a07 482B85C0 		subq	-3392(%rbp), %rax
 4036      F2FFFF
 4037 3a0e 4889C7   		movq	%rax, %rdi
 4038 3a11 E8B5C7FF 		call	spaces
 4038      FF
 4039 3a16 4889C1   		movq	%rax, %rcx
 4040 3a19 488B95C0 		movq	-3392(%rbp), %rdx
 4040      F2FFFF
 4041 3a20 488B85B0 		movq	-3408(%rbp), %rax
 4041      F2FFFF
 4042 3a27 488D3500 		leaq	.LC32(%rip), %rsi
 4042      000000
 4043 3a2e 4889C7   		movq	%rax, %rdi
 4044 3a31 B8000000 		movl	$0, %eax
 4044      00
 4045 3a36 E8000000 		call	errRender@PLT
 4045      00
 4046 3a3b C785E8F2 		movl	$11, -3352(%rbp)
 4046      FFFF0B00 
 4046      0000
 4047 3a45 E9A20D00 		jmp	.L221
 4047      00
 4048              	.L220:
 4049              		.loc 2 574 2 discriminator 2
 4050 3a4a 80BDDFF2 		cmpb	$64, -3361(%rbp)
 4050      FFFF40
 4051 3a51 7E09     		jle	.L222
 4052              		.loc 2 574 2 discriminator 4
 4053 3a53 80BDDFF2 		cmpb	$90, -3361(%rbp)
 4053      FFFF5A
 4054 3a5a 7E4A     		jle	.L223
 4055              	.L222:
 4056              		.loc 2 574 2 discriminator 5
 4057 3a5c 488B85B8 		movq	-3400(%rbp), %rax
 4057      F2FFFF
 4058 3a63 482B85C0 		subq	-3392(%rbp), %rax
 4058      F2FFFF
 4059 3a6a 4889C7   		movq	%rax, %rdi
 4060 3a6d E859C7FF 		call	spaces
 4060      FF
 4061 3a72 4889C1   		movq	%rax, %rcx
 4062 3a75 488B95C0 		movq	-3392(%rbp), %rdx
 4062      F2FFFF
 4063 3a7c 488B85B0 		movq	-3408(%rbp), %rax
 4063      F2FFFF
 4064 3a83 488D3500 		leaq	.LC33(%rip), %rsi
 4064      000000
 4065 3a8a 4889C7   		movq	%rax, %rdi
 4066 3a8d B8000000 		movl	$0, %eax
 4066      00
 4067 3a92 E8000000 		call	errRender@PLT
 4067      00
 4068 3a97 C785E8F2 		movl	$11, -3352(%rbp)
 4068      FFFF0B00 
 4068      0000
 4069 3aa1 E9460D00 		jmp	.L221
 4069      00
 4070              	.L223:
 4071              		.loc 2 574 2 discriminator 6
 4072 3aa6 0FB685DF 		movzbl	-3361(%rbp), %eax
 4072      F2FFFF
 4073 3aad 83E841   		subl	$65, %eax
 4074 3ab0 8885E0F2 		movb	%al, -3360(%rbp)
 4074      FFFF
 4075 3ab6 488B85B8 		movq	-3400(%rbp), %rax
 4075      F2FFFF
 4076 3abd 4883C001 		addq	$1, %rax
 4077 3ac1 488985B8 		movq	%rax, -3400(%rbp)
 4077      F2FFFF
 4078 3ac8 488B85B8 		movq	-3400(%rbp), %rax
 4078      F2FFFF
 4079 3acf 0FB600   		movzbl	(%rax), %eax
 4080 3ad2 8885DFF2 		movb	%al, -3361(%rbp)
 4080      FFFF
 4081 3ad8 80BDDFF2 		cmpb	$0, -3361(%rbp)
 4081      FFFF00
 4082 3adf 754A     		jne	.L224
 4083              		.loc 2 574 2 discriminator 7
 4084 3ae1 488B85B8 		movq	-3400(%rbp), %rax
 4084      F2FFFF
 4085 3ae8 482B85C0 		subq	-3392(%rbp), %rax
 4085      F2FFFF
 4086 3aef 4889C7   		movq	%rax, %rdi
 4087 3af2 E8D4C6FF 		call	spaces
 4087      FF
 4088 3af7 4889C1   		movq	%rax, %rcx
 4089 3afa 488B95C0 		movq	-3392(%rbp), %rdx
 4089      F2FFFF
 4090 3b01 488B85B0 		movq	-3408(%rbp), %rax
 4090      F2FFFF
 4091 3b08 488D3500 		leaq	.LC32(%rip), %rsi
 4091      000000
 4092 3b0f 4889C7   		movq	%rax, %rdi
 4093 3b12 B8000000 		movl	$0, %eax
 4093      00
 4094 3b17 E8000000 		call	errRender@PLT
 4094      00
 4095 3b1c C785E8F2 		movl	$11, -3352(%rbp)
 4095      FFFF0B00 
 4095      0000
 4096 3b26 E9C10C00 		jmp	.L221
 4096      00
 4097              	.L224:
 4098              		.loc 2 574 2 discriminator 8
 4099 3b2b 80BDDFF2 		cmpb	$47, -3361(%rbp)
 4099      FFFF2F
 4100 3b32 7E09     		jle	.L225
 4101              		.loc 2 574 2 discriminator 10
 4102 3b34 80BDDFF2 		cmpb	$57, -3361(%rbp)
 4102      FFFF39
 4103 3b3b 7E4A     		jle	.L226
 4104              	.L225:
 4105              		.loc 2 574 2 discriminator 11
 4106 3b3d 488B85B8 		movq	-3400(%rbp), %rax
 4106      F2FFFF
 4107 3b44 482B85C0 		subq	-3392(%rbp), %rax
 4107      F2FFFF
 4108 3b4b 4889C7   		movq	%rax, %rdi
 4109 3b4e E878C6FF 		call	spaces
 4109      FF
 4110 3b53 4889C1   		movq	%rax, %rcx
 4111 3b56 488B95C0 		movq	-3392(%rbp), %rdx
 4111      F2FFFF
 4112 3b5d 488B85B0 		movq	-3408(%rbp), %rax
 4112      F2FFFF
 4113 3b64 488D3500 		leaq	.LC34(%rip), %rsi
 4113      000000
 4114 3b6b 4889C7   		movq	%rax, %rdi
 4115 3b6e B8000000 		movl	$0, %eax
 4115      00
 4116 3b73 E8000000 		call	errRender@PLT
 4116      00
 4117 3b78 C785E8F2 		movl	$11, -3352(%rbp)
 4117      FFFF0B00 
 4117      0000
 4118 3b82 E9650C00 		jmp	.L221
 4118      00
 4119              	.L226:
 4120              		.loc 2 574 2 discriminator 12
 4121 3b87 488B85B8 		movq	-3400(%rbp), %rax
 4121      F2FFFF
 4122 3b8e 488D8DB8 		leaq	-3400(%rbp), %rcx
 4122      F2FFFF
 4123 3b95 BA0A0000 		movl	$10, %edx
 4123      00
 4124 3b9a 4889CE   		movq	%rcx, %rsi
 4125 3b9d 4889C7   		movq	%rax, %rdi
 4126 3ba0 E8000000 		call	strtoul@PLT
 4126      00
 4127 3ba5 8885E1F2 		movb	%al, -3359(%rbp)
 4127      FFFF
 575:prog.c        **** 	SET_BIT(misoPort, misoBit, PIN_INPUT, "progOpen");
 4128              		.loc 2 575 2 is_stmt 1 discriminator 12
 4129 3bab 0FB685E0 		movzbl	-3360(%rbp), %eax
 4129      F2FFFF
 4130 3bb2 0FB695E1 		movzbl	-3359(%rbp), %edx
 4130      F2FFFF
 4131 3bb9 4863D2   		movslq	%edx, %rdx
 4132 3bbc 4898     		cltq
 4133 3bbe 48C1E005 		salq	$5, %rax
 4134 3bc2 4801D0   		addq	%rdx, %rax
 4135 3bc5 8B8485F0 		movl	-3344(%rbp,%rax,4), %eax
 4135      F2FFFF
 4136 3bcc 85C0     		testl	%eax, %eax
 4137 3bce 7469     		je	.L227
 4138              		.loc 2 575 2 is_stmt 0 discriminator 1
 4139 3bd0 488B85B8 		movq	-3400(%rbp), %rax
 4139      F2FFFF
 4140 3bd7 482B85C0 		subq	-3392(%rbp), %rax
 4140      F2FFFF
 4141 3bde 4883E801 		subq	$1, %rax
 4142 3be2 4889C7   		movq	%rax, %rdi
 4143 3be5 E8E1C5FF 		call	spaces
 4143      FF
 4144 3bea 4889C1   		movq	%rax, %rcx
 4145 3bed 0FB695E1 		movzbl	-3359(%rbp), %edx
 4145      F2FFFF
 4146 3bf4 0FB685E0 		movzbl	-3360(%rbp), %eax
 4146      F2FFFF
 4147 3bfb 8D7041   		leal	65(%rax), %esi
 4148 3bfe 488BBDC0 		movq	-3392(%rbp), %rdi
 4148      F2FFFF
 4149 3c05 488B85B0 		movq	-3408(%rbp), %rax
 4149      F2FFFF
 4150 3c0c 4989C9   		movq	%rcx, %r9
 4151 3c0f 4989F8   		movq	%rdi, %r8
 4152 3c12 89D1     		movl	%edx, %ecx
 4153 3c14 89F2     		movl	%esi, %edx
 4154 3c16 488D3500 		leaq	.LC35(%rip), %rsi
 4154      000000
 4155 3c1d 4889C7   		movq	%rax, %rdi
 4156 3c20 B8000000 		movl	$0, %eax
 4156      00
 4157 3c25 E8000000 		call	errRender@PLT
 4157      00
 4158 3c2a C785E8F2 		movl	$11, -3352(%rbp)
 4158      FFFF0B00 
 4158      0000
 4159 3c34 E9B30B00 		jmp	.L221
 4159      00
 4160              	.L227:
 4161              		.loc 2 575 2 discriminator 2
 4162 3c39 0FB685E0 		movzbl	-3360(%rbp), %eax
 4162      F2FFFF
 4163 3c40 0FB695E1 		movzbl	-3359(%rbp), %edx
 4163      F2FFFF
 4164 3c47 4863D2   		movslq	%edx, %rdx
 4165 3c4a 4898     		cltq
 4166 3c4c 48C1E005 		salq	$5, %rax
 4167 3c50 4801D0   		addq	%rdx, %rax
 4168 3c53 C78485F0 		movl	$3, -3344(%rbp,%rax,4)
 4168      F2FFFF03 
 4168      000000
 576:prog.c        **** 	fStatus = portMap(handle, LP_MISO, misoPort, misoBit, error);
 4169              		.loc 2 576 12 is_stmt 1 discriminator 2
 4170 3c5e 0FB68DE1 		movzbl	-3359(%rbp), %ecx
 4170      F2FFFF
 4171 3c65 0FB695E0 		movzbl	-3360(%rbp), %edx
 4171      F2FFFF
 4172 3c6c 488BB5B0 		movq	-3408(%rbp), %rsi
 4172      F2FFFF
 4173 3c73 488B85C8 		movq	-3384(%rbp), %rax
 4173      F2FFFF
 4174 3c7a 4989F0   		movq	%rsi, %r8
 4175 3c7d BE010000 		movl	$1, %esi
 4175      00
 4176 3c82 4889C7   		movq	%rax, %rdi
 4177 3c85 E889C9FF 		call	portMap
 4177      FF
 4178 3c8a 8985ECF2 		movl	%eax, -3348(%rbp)
 4178      FFFF
 577:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "progOpen()");
 4179              		.loc 2 577 2 discriminator 2
 4180 3c90 83BDECF2 		cmpl	$0, -3348(%rbp)
 4180      FFFF00
 4181 3c97 742A     		je	.L228
 4182              		.loc 2 577 2 is_stmt 0 discriminator 1
 4183 3c99 488B85B0 		movq	-3408(%rbp), %rax
 4183      F2FFFF
 4184 3ca0 488D1500 		leaq	.LC36(%rip), %rdx
 4184      000000
 4185 3ca7 4889D6   		movq	%rdx, %rsi
 4186 3caa 4889C7   		movq	%rax, %rdi
 4187 3cad E8000000 		call	errPrefix@PLT
 4187      00
 4188 3cb2 8B85ECF2 		movl	-3348(%rbp), %eax
 4188      FFFF
 4189 3cb8 8985E8F2 		movl	%eax, -3352(%rbp)
 4189      FFFF
 4190 3cbe E9290B00 		jmp	.L221
 4190      00
 4191              	.L228:
 578:prog.c        **** 
 579:prog.c        **** 	GET_PAIR(mosiPort, mosiBit, "progOpen");        // MOSI/TDI
 4192              		.loc 2 579 2 is_stmt 1
 4193 3cc3 488B85B8 		movq	-3400(%rbp), %rax
 4193      F2FFFF
 4194 3cca 0FB600   		movzbl	(%rax), %eax
 4195 3ccd 8885DFF2 		movb	%al, -3361(%rbp)
 4195      FFFF
 4196 3cd3 80BDDFF2 		cmpb	$0, -3361(%rbp)
 4196      FFFF00
 4197 3cda 754A     		jne	.L229
 4198              		.loc 2 579 2 is_stmt 0 discriminator 1
 4199 3cdc 488B85B8 		movq	-3400(%rbp), %rax
 4199      F2FFFF
 4200 3ce3 482B85C0 		subq	-3392(%rbp), %rax
 4200      F2FFFF
 4201 3cea 4889C7   		movq	%rax, %rdi
 4202 3ced E8D9C4FF 		call	spaces
 4202      FF
 4203 3cf2 4889C1   		movq	%rax, %rcx
 4204 3cf5 488B95C0 		movq	-3392(%rbp), %rdx
 4204      F2FFFF
 4205 3cfc 488B85B0 		movq	-3408(%rbp), %rax
 4205      F2FFFF
 4206 3d03 488D3500 		leaq	.LC32(%rip), %rsi
 4206      000000
 4207 3d0a 4889C7   		movq	%rax, %rdi
 4208 3d0d B8000000 		movl	$0, %eax
 4208      00
 4209 3d12 E8000000 		call	errRender@PLT
 4209      00
 4210 3d17 C785E8F2 		movl	$11, -3352(%rbp)
 4210      FFFF0B00 
 4210      0000
 4211 3d21 E9C60A00 		jmp	.L221
 4211      00
 4212              	.L229:
 4213              		.loc 2 579 2 discriminator 2
 4214 3d26 80BDDFF2 		cmpb	$64, -3361(%rbp)
 4214      FFFF40
 4215 3d2d 7E09     		jle	.L230
 4216              		.loc 2 579 2 discriminator 4
 4217 3d2f 80BDDFF2 		cmpb	$90, -3361(%rbp)
 4217      FFFF5A
 4218 3d36 7E4A     		jle	.L231
 4219              	.L230:
 4220              		.loc 2 579 2 discriminator 5
 4221 3d38 488B85B8 		movq	-3400(%rbp), %rax
 4221      F2FFFF
 4222 3d3f 482B85C0 		subq	-3392(%rbp), %rax
 4222      F2FFFF
 4223 3d46 4889C7   		movq	%rax, %rdi
 4224 3d49 E87DC4FF 		call	spaces
 4224      FF
 4225 3d4e 4889C1   		movq	%rax, %rcx
 4226 3d51 488B95C0 		movq	-3392(%rbp), %rdx
 4226      F2FFFF
 4227 3d58 488B85B0 		movq	-3408(%rbp), %rax
 4227      F2FFFF
 4228 3d5f 488D3500 		leaq	.LC33(%rip), %rsi
 4228      000000
 4229 3d66 4889C7   		movq	%rax, %rdi
 4230 3d69 B8000000 		movl	$0, %eax
 4230      00
 4231 3d6e E8000000 		call	errRender@PLT
 4231      00
 4232 3d73 C785E8F2 		movl	$11, -3352(%rbp)
 4232      FFFF0B00 
 4232      0000
 4233 3d7d E96A0A00 		jmp	.L221
 4233      00
 4234              	.L231:
 4235              		.loc 2 579 2 discriminator 6
 4236 3d82 0FB685DF 		movzbl	-3361(%rbp), %eax
 4236      F2FFFF
 4237 3d89 83E841   		subl	$65, %eax
 4238 3d8c 8885E2F2 		movb	%al, -3358(%rbp)
 4238      FFFF
 4239 3d92 488B85B8 		movq	-3400(%rbp), %rax
 4239      F2FFFF
 4240 3d99 4883C001 		addq	$1, %rax
 4241 3d9d 488985B8 		movq	%rax, -3400(%rbp)
 4241      F2FFFF
 4242 3da4 488B85B8 		movq	-3400(%rbp), %rax
 4242      F2FFFF
 4243 3dab 0FB600   		movzbl	(%rax), %eax
 4244 3dae 8885DFF2 		movb	%al, -3361(%rbp)
 4244      FFFF
 4245 3db4 80BDDFF2 		cmpb	$0, -3361(%rbp)
 4245      FFFF00
 4246 3dbb 754A     		jne	.L232
 4247              		.loc 2 579 2 discriminator 7
 4248 3dbd 488B85B8 		movq	-3400(%rbp), %rax
 4248      F2FFFF
 4249 3dc4 482B85C0 		subq	-3392(%rbp), %rax
 4249      F2FFFF
 4250 3dcb 4889C7   		movq	%rax, %rdi
 4251 3dce E8F8C3FF 		call	spaces
 4251      FF
 4252 3dd3 4889C1   		movq	%rax, %rcx
 4253 3dd6 488B95C0 		movq	-3392(%rbp), %rdx
 4253      F2FFFF
 4254 3ddd 488B85B0 		movq	-3408(%rbp), %rax
 4254      F2FFFF
 4255 3de4 488D3500 		leaq	.LC32(%rip), %rsi
 4255      000000
 4256 3deb 4889C7   		movq	%rax, %rdi
 4257 3dee B8000000 		movl	$0, %eax
 4257      00
 4258 3df3 E8000000 		call	errRender@PLT
 4258      00
 4259 3df8 C785E8F2 		movl	$11, -3352(%rbp)
 4259      FFFF0B00 
 4259      0000
 4260 3e02 E9E50900 		jmp	.L221
 4260      00
 4261              	.L232:
 4262              		.loc 2 579 2 discriminator 8
 4263 3e07 80BDDFF2 		cmpb	$47, -3361(%rbp)
 4263      FFFF2F
 4264 3e0e 7E09     		jle	.L233
 4265              		.loc 2 579 2 discriminator 10
 4266 3e10 80BDDFF2 		cmpb	$57, -3361(%rbp)
 4266      FFFF39
 4267 3e17 7E4A     		jle	.L234
 4268              	.L233:
 4269              		.loc 2 579 2 discriminator 11
 4270 3e19 488B85B8 		movq	-3400(%rbp), %rax
 4270      F2FFFF
 4271 3e20 482B85C0 		subq	-3392(%rbp), %rax
 4271      F2FFFF
 4272 3e27 4889C7   		movq	%rax, %rdi
 4273 3e2a E89CC3FF 		call	spaces
 4273      FF
 4274 3e2f 4889C1   		movq	%rax, %rcx
 4275 3e32 488B95C0 		movq	-3392(%rbp), %rdx
 4275      F2FFFF
 4276 3e39 488B85B0 		movq	-3408(%rbp), %rax
 4276      F2FFFF
 4277 3e40 488D3500 		leaq	.LC34(%rip), %rsi
 4277      000000
 4278 3e47 4889C7   		movq	%rax, %rdi
 4279 3e4a B8000000 		movl	$0, %eax
 4279      00
 4280 3e4f E8000000 		call	errRender@PLT
 4280      00
 4281 3e54 C785E8F2 		movl	$11, -3352(%rbp)
 4281      FFFF0B00 
 4281      0000
 4282 3e5e E9890900 		jmp	.L221
 4282      00
 4283              	.L234:
 4284              		.loc 2 579 2 discriminator 12
 4285 3e63 488B85B8 		movq	-3400(%rbp), %rax
 4285      F2FFFF
 4286 3e6a 488D8DB8 		leaq	-3400(%rbp), %rcx
 4286      F2FFFF
 4287 3e71 BA0A0000 		movl	$10, %edx
 4287      00
 4288 3e76 4889CE   		movq	%rcx, %rsi
 4289 3e79 4889C7   		movq	%rax, %rdi
 4290 3e7c E8000000 		call	strtoul@PLT
 4290      00
 4291 3e81 8885E3F2 		movb	%al, -3357(%rbp)
 4291      FFFF
 580:prog.c        **** 	SET_BIT(mosiPort, mosiBit, PIN_LOW, "progOpen");
 4292              		.loc 2 580 2 is_stmt 1 discriminator 12
 4293 3e87 0FB685E2 		movzbl	-3358(%rbp), %eax
 4293      F2FFFF
 4294 3e8e 0FB695E3 		movzbl	-3357(%rbp), %edx
 4294      F2FFFF
 4295 3e95 4863D2   		movslq	%edx, %rdx
 4296 3e98 4898     		cltq
 4297 3e9a 48C1E005 		salq	$5, %rax
 4298 3e9e 4801D0   		addq	%rdx, %rax
 4299 3ea1 8B8485F0 		movl	-3344(%rbp,%rax,4), %eax
 4299      F2FFFF
 4300 3ea8 85C0     		testl	%eax, %eax
 4301 3eaa 7469     		je	.L235
 4302              		.loc 2 580 2 is_stmt 0 discriminator 1
 4303 3eac 488B85B8 		movq	-3400(%rbp), %rax
 4303      F2FFFF
 4304 3eb3 482B85C0 		subq	-3392(%rbp), %rax
 4304      F2FFFF
 4305 3eba 4883E801 		subq	$1, %rax
 4306 3ebe 4889C7   		movq	%rax, %rdi
 4307 3ec1 E805C3FF 		call	spaces
 4307      FF
 4308 3ec6 4889C1   		movq	%rax, %rcx
 4309 3ec9 0FB695E3 		movzbl	-3357(%rbp), %edx
 4309      F2FFFF
 4310 3ed0 0FB685E2 		movzbl	-3358(%rbp), %eax
 4310      F2FFFF
 4311 3ed7 8D7041   		leal	65(%rax), %esi
 4312 3eda 488BBDC0 		movq	-3392(%rbp), %rdi
 4312      F2FFFF
 4313 3ee1 488B85B0 		movq	-3408(%rbp), %rax
 4313      F2FFFF
 4314 3ee8 4989C9   		movq	%rcx, %r9
 4315 3eeb 4989F8   		movq	%rdi, %r8
 4316 3eee 89D1     		movl	%edx, %ecx
 4317 3ef0 89F2     		movl	%esi, %edx
 4318 3ef2 488D3500 		leaq	.LC35(%rip), %rsi
 4318      000000
 4319 3ef9 4889C7   		movq	%rax, %rdi
 4320 3efc B8000000 		movl	$0, %eax
 4320      00
 4321 3f01 E8000000 		call	errRender@PLT
 4321      00
 4322 3f06 C785E8F2 		movl	$11, -3352(%rbp)
 4322      FFFF0B00 
 4322      0000
 4323 3f10 E9D70800 		jmp	.L221
 4323      00
 4324              	.L235:
 4325              		.loc 2 580 2 discriminator 2
 4326 3f15 0FB685E2 		movzbl	-3358(%rbp), %eax
 4326      F2FFFF
 4327 3f1c 0FB695E3 		movzbl	-3357(%rbp), %edx
 4327      F2FFFF
 4328 3f23 4863D2   		movslq	%edx, %rdx
 4329 3f26 4898     		cltq
 4330 3f28 48C1E005 		salq	$5, %rax
 4331 3f2c 4801D0   		addq	%rdx, %rax
 4332 3f2f C78485F0 		movl	$2, -3344(%rbp,%rax,4)
 4332      F2FFFF02 
 4332      000000
 581:prog.c        **** 	fStatus = portMap(handle, LP_MOSI, mosiPort, mosiBit, error);
 4333              		.loc 2 581 12 is_stmt 1 discriminator 2
 4334 3f3a 0FB68DE3 		movzbl	-3357(%rbp), %ecx
 4334      F2FFFF
 4335 3f41 0FB695E2 		movzbl	-3358(%rbp), %edx
 4335      F2FFFF
 4336 3f48 488BB5B0 		movq	-3408(%rbp), %rsi
 4336      F2FFFF
 4337 3f4f 488B85C8 		movq	-3384(%rbp), %rax
 4337      F2FFFF
 4338 3f56 4989F0   		movq	%rsi, %r8
 4339 3f59 BE020000 		movl	$2, %esi
 4339      00
 4340 3f5e 4889C7   		movq	%rax, %rdi
 4341 3f61 E8ADC6FF 		call	portMap
 4341      FF
 4342 3f66 8985ECF2 		movl	%eax, -3348(%rbp)
 4342      FFFF
 582:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "progOpen()");
 4343              		.loc 2 582 2 discriminator 2
 4344 3f6c 83BDECF2 		cmpl	$0, -3348(%rbp)
 4344      FFFF00
 4345 3f73 742A     		je	.L236
 4346              		.loc 2 582 2 is_stmt 0 discriminator 1
 4347 3f75 488B85B0 		movq	-3408(%rbp), %rax
 4347      F2FFFF
 4348 3f7c 488D1500 		leaq	.LC36(%rip), %rdx
 4348      000000
 4349 3f83 4889D6   		movq	%rdx, %rsi
 4350 3f86 4889C7   		movq	%rax, %rdi
 4351 3f89 E8000000 		call	errPrefix@PLT
 4351      00
 4352 3f8e 8B85ECF2 		movl	-3348(%rbp), %eax
 4352      FFFF
 4353 3f94 8985E8F2 		movl	%eax, -3352(%rbp)
 4353      FFFF
 4354 3f9a E94D0800 		jmp	.L221
 4354      00
 4355              	.L236:
 583:prog.c        **** 
 584:prog.c        **** 	GET_PAIR(ssPort, ssBit, "progOpen");        // SS/TMS
 4356              		.loc 2 584 2 is_stmt 1
 4357 3f9f 488B85B8 		movq	-3400(%rbp), %rax
 4357      F2FFFF
 4358 3fa6 0FB600   		movzbl	(%rax), %eax
 4359 3fa9 8885DFF2 		movb	%al, -3361(%rbp)
 4359      FFFF
 4360 3faf 80BDDFF2 		cmpb	$0, -3361(%rbp)
 4360      FFFF00
 4361 3fb6 754A     		jne	.L237
 4362              		.loc 2 584 2 is_stmt 0 discriminator 1
 4363 3fb8 488B85B8 		movq	-3400(%rbp), %rax
 4363      F2FFFF
 4364 3fbf 482B85C0 		subq	-3392(%rbp), %rax
 4364      F2FFFF
 4365 3fc6 4889C7   		movq	%rax, %rdi
 4366 3fc9 E8FDC1FF 		call	spaces
 4366      FF
 4367 3fce 4889C1   		movq	%rax, %rcx
 4368 3fd1 488B95C0 		movq	-3392(%rbp), %rdx
 4368      F2FFFF
 4369 3fd8 488B85B0 		movq	-3408(%rbp), %rax
 4369      F2FFFF
 4370 3fdf 488D3500 		leaq	.LC32(%rip), %rsi
 4370      000000
 4371 3fe6 4889C7   		movq	%rax, %rdi
 4372 3fe9 B8000000 		movl	$0, %eax
 4372      00
 4373 3fee E8000000 		call	errRender@PLT
 4373      00
 4374 3ff3 C785E8F2 		movl	$11, -3352(%rbp)
 4374      FFFF0B00 
 4374      0000
 4375 3ffd E9EA0700 		jmp	.L221
 4375      00
 4376              	.L237:
 4377              		.loc 2 584 2 discriminator 2
 4378 4002 80BDDFF2 		cmpb	$64, -3361(%rbp)
 4378      FFFF40
 4379 4009 7E09     		jle	.L238
 4380              		.loc 2 584 2 discriminator 4
 4381 400b 80BDDFF2 		cmpb	$90, -3361(%rbp)
 4381      FFFF5A
 4382 4012 7E4A     		jle	.L239
 4383              	.L238:
 4384              		.loc 2 584 2 discriminator 5
 4385 4014 488B85B8 		movq	-3400(%rbp), %rax
 4385      F2FFFF
 4386 401b 482B85C0 		subq	-3392(%rbp), %rax
 4386      F2FFFF
 4387 4022 4889C7   		movq	%rax, %rdi
 4388 4025 E8A1C1FF 		call	spaces
 4388      FF
 4389 402a 4889C1   		movq	%rax, %rcx
 4390 402d 488B95C0 		movq	-3392(%rbp), %rdx
 4390      F2FFFF
 4391 4034 488B85B0 		movq	-3408(%rbp), %rax
 4391      F2FFFF
 4392 403b 488D3500 		leaq	.LC33(%rip), %rsi
 4392      000000
 4393 4042 4889C7   		movq	%rax, %rdi
 4394 4045 B8000000 		movl	$0, %eax
 4394      00
 4395 404a E8000000 		call	errRender@PLT
 4395      00
 4396 404f C785E8F2 		movl	$11, -3352(%rbp)
 4396      FFFF0B00 
 4396      0000
 4397 4059 E98E0700 		jmp	.L221
 4397      00
 4398              	.L239:
 4399              		.loc 2 584 2 discriminator 6
 4400 405e 0FB685DF 		movzbl	-3361(%rbp), %eax
 4400      F2FFFF
 4401 4065 83E841   		subl	$65, %eax
 4402 4068 8885E4F2 		movb	%al, -3356(%rbp)
 4402      FFFF
 4403 406e 488B85B8 		movq	-3400(%rbp), %rax
 4403      F2FFFF
 4404 4075 4883C001 		addq	$1, %rax
 4405 4079 488985B8 		movq	%rax, -3400(%rbp)
 4405      F2FFFF
 4406 4080 488B85B8 		movq	-3400(%rbp), %rax
 4406      F2FFFF
 4407 4087 0FB600   		movzbl	(%rax), %eax
 4408 408a 8885DFF2 		movb	%al, -3361(%rbp)
 4408      FFFF
 4409 4090 80BDDFF2 		cmpb	$0, -3361(%rbp)
 4409      FFFF00
 4410 4097 754A     		jne	.L240
 4411              		.loc 2 584 2 discriminator 7
 4412 4099 488B85B8 		movq	-3400(%rbp), %rax
 4412      F2FFFF
 4413 40a0 482B85C0 		subq	-3392(%rbp), %rax
 4413      F2FFFF
 4414 40a7 4889C7   		movq	%rax, %rdi
 4415 40aa E81CC1FF 		call	spaces
 4415      FF
 4416 40af 4889C1   		movq	%rax, %rcx
 4417 40b2 488B95C0 		movq	-3392(%rbp), %rdx
 4417      F2FFFF
 4418 40b9 488B85B0 		movq	-3408(%rbp), %rax
 4418      F2FFFF
 4419 40c0 488D3500 		leaq	.LC32(%rip), %rsi
 4419      000000
 4420 40c7 4889C7   		movq	%rax, %rdi
 4421 40ca B8000000 		movl	$0, %eax
 4421      00
 4422 40cf E8000000 		call	errRender@PLT
 4422      00
 4423 40d4 C785E8F2 		movl	$11, -3352(%rbp)
 4423      FFFF0B00 
 4423      0000
 4424 40de E9090700 		jmp	.L221
 4424      00
 4425              	.L240:
 4426              		.loc 2 584 2 discriminator 8
 4427 40e3 80BDDFF2 		cmpb	$47, -3361(%rbp)
 4427      FFFF2F
 4428 40ea 7E09     		jle	.L241
 4429              		.loc 2 584 2 discriminator 10
 4430 40ec 80BDDFF2 		cmpb	$57, -3361(%rbp)
 4430      FFFF39
 4431 40f3 7E4A     		jle	.L242
 4432              	.L241:
 4433              		.loc 2 584 2 discriminator 11
 4434 40f5 488B85B8 		movq	-3400(%rbp), %rax
 4434      F2FFFF
 4435 40fc 482B85C0 		subq	-3392(%rbp), %rax
 4435      F2FFFF
 4436 4103 4889C7   		movq	%rax, %rdi
 4437 4106 E8C0C0FF 		call	spaces
 4437      FF
 4438 410b 4889C1   		movq	%rax, %rcx
 4439 410e 488B95C0 		movq	-3392(%rbp), %rdx
 4439      F2FFFF
 4440 4115 488B85B0 		movq	-3408(%rbp), %rax
 4440      F2FFFF
 4441 411c 488D3500 		leaq	.LC34(%rip), %rsi
 4441      000000
 4442 4123 4889C7   		movq	%rax, %rdi
 4443 4126 B8000000 		movl	$0, %eax
 4443      00
 4444 412b E8000000 		call	errRender@PLT
 4444      00
 4445 4130 C785E8F2 		movl	$11, -3352(%rbp)
 4445      FFFF0B00 
 4445      0000
 4446 413a E9AD0600 		jmp	.L221
 4446      00
 4447              	.L242:
 4448              		.loc 2 584 2 discriminator 12
 4449 413f 488B85B8 		movq	-3400(%rbp), %rax
 4449      F2FFFF
 4450 4146 488D8DB8 		leaq	-3400(%rbp), %rcx
 4450      F2FFFF
 4451 414d BA0A0000 		movl	$10, %edx
 4451      00
 4452 4152 4889CE   		movq	%rcx, %rsi
 4453 4155 4889C7   		movq	%rax, %rdi
 4454 4158 E8000000 		call	strtoul@PLT
 4454      00
 4455 415d 8885E5F2 		movb	%al, -3355(%rbp)
 4455      FFFF
 585:prog.c        **** 	SET_BIT(ssPort, ssBit, PIN_LOW, "progOpen");
 4456              		.loc 2 585 2 is_stmt 1 discriminator 12
 4457 4163 0FB685E4 		movzbl	-3356(%rbp), %eax
 4457      F2FFFF
 4458 416a 0FB695E5 		movzbl	-3355(%rbp), %edx
 4458      F2FFFF
 4459 4171 4863D2   		movslq	%edx, %rdx
 4460 4174 4898     		cltq
 4461 4176 48C1E005 		salq	$5, %rax
 4462 417a 4801D0   		addq	%rdx, %rax
 4463 417d 8B8485F0 		movl	-3344(%rbp,%rax,4), %eax
 4463      F2FFFF
 4464 4184 85C0     		testl	%eax, %eax
 4465 4186 7469     		je	.L243
 4466              		.loc 2 585 2 is_stmt 0 discriminator 1
 4467 4188 488B85B8 		movq	-3400(%rbp), %rax
 4467      F2FFFF
 4468 418f 482B85C0 		subq	-3392(%rbp), %rax
 4468      F2FFFF
 4469 4196 4883E801 		subq	$1, %rax
 4470 419a 4889C7   		movq	%rax, %rdi
 4471 419d E829C0FF 		call	spaces
 4471      FF
 4472 41a2 4889C1   		movq	%rax, %rcx
 4473 41a5 0FB695E5 		movzbl	-3355(%rbp), %edx
 4473      F2FFFF
 4474 41ac 0FB685E4 		movzbl	-3356(%rbp), %eax
 4474      F2FFFF
 4475 41b3 8D7041   		leal	65(%rax), %esi
 4476 41b6 488BBDC0 		movq	-3392(%rbp), %rdi
 4476      F2FFFF
 4477 41bd 488B85B0 		movq	-3408(%rbp), %rax
 4477      F2FFFF
 4478 41c4 4989C9   		movq	%rcx, %r9
 4479 41c7 4989F8   		movq	%rdi, %r8
 4480 41ca 89D1     		movl	%edx, %ecx
 4481 41cc 89F2     		movl	%esi, %edx
 4482 41ce 488D3500 		leaq	.LC35(%rip), %rsi
 4482      000000
 4483 41d5 4889C7   		movq	%rax, %rdi
 4484 41d8 B8000000 		movl	$0, %eax
 4484      00
 4485 41dd E8000000 		call	errRender@PLT
 4485      00
 4486 41e2 C785E8F2 		movl	$11, -3352(%rbp)
 4486      FFFF0B00 
 4486      0000
 4487 41ec E9FB0500 		jmp	.L221
 4487      00
 4488              	.L243:
 4489              		.loc 2 585 2 discriminator 2
 4490 41f1 0FB685E4 		movzbl	-3356(%rbp), %eax
 4490      F2FFFF
 4491 41f8 0FB695E5 		movzbl	-3355(%rbp), %edx
 4491      F2FFFF
 4492 41ff 4863D2   		movslq	%edx, %rdx
 4493 4202 4898     		cltq
 4494 4204 48C1E005 		salq	$5, %rax
 4495 4208 4801D0   		addq	%rdx, %rax
 4496 420b C78485F0 		movl	$2, -3344(%rbp,%rax,4)
 4496      F2FFFF02 
 4496      000000
 586:prog.c        **** 	fStatus = portMap(handle, LP_SS, ssPort, ssBit, error);
 4497              		.loc 2 586 12 is_stmt 1 discriminator 2
 4498 4216 0FB68DE5 		movzbl	-3355(%rbp), %ecx
 4498      F2FFFF
 4499 421d 0FB695E4 		movzbl	-3356(%rbp), %edx
 4499      F2FFFF
 4500 4224 488BB5B0 		movq	-3408(%rbp), %rsi
 4500      F2FFFF
 4501 422b 488B85C8 		movq	-3384(%rbp), %rax
 4501      F2FFFF
 4502 4232 4989F0   		movq	%rsi, %r8
 4503 4235 BE030000 		movl	$3, %esi
 4503      00
 4504 423a 4889C7   		movq	%rax, %rdi
 4505 423d E8D1C3FF 		call	portMap
 4505      FF
 4506 4242 8985ECF2 		movl	%eax, -3348(%rbp)
 4506      FFFF
 587:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "progOpen()");
 4507              		.loc 2 587 2 discriminator 2
 4508 4248 83BDECF2 		cmpl	$0, -3348(%rbp)
 4508      FFFF00
 4509 424f 742A     		je	.L244
 4510              		.loc 2 587 2 is_stmt 0 discriminator 1
 4511 4251 488B85B0 		movq	-3408(%rbp), %rax
 4511      F2FFFF
 4512 4258 488D1500 		leaq	.LC36(%rip), %rdx
 4512      000000
 4513 425f 4889D6   		movq	%rdx, %rsi
 4514 4262 4889C7   		movq	%rax, %rdi
 4515 4265 E8000000 		call	errPrefix@PLT
 4515      00
 4516 426a 8B85ECF2 		movl	-3348(%rbp), %eax
 4516      FFFF
 4517 4270 8985E8F2 		movl	%eax, -3352(%rbp)
 4517      FFFF
 4518 4276 E9710500 		jmp	.L221
 4518      00
 4519              	.L244:
 588:prog.c        **** 
 589:prog.c        **** 	GET_PAIR(sckPort, sckBit, "progOpen");        // SCK/TCK
 4520              		.loc 2 589 2 is_stmt 1
 4521 427b 488B85B8 		movq	-3400(%rbp), %rax
 4521      F2FFFF
 4522 4282 0FB600   		movzbl	(%rax), %eax
 4523 4285 8885DFF2 		movb	%al, -3361(%rbp)
 4523      FFFF
 4524 428b 80BDDFF2 		cmpb	$0, -3361(%rbp)
 4524      FFFF00
 4525 4292 754A     		jne	.L245
 4526              		.loc 2 589 2 is_stmt 0 discriminator 1
 4527 4294 488B85B8 		movq	-3400(%rbp), %rax
 4527      F2FFFF
 4528 429b 482B85C0 		subq	-3392(%rbp), %rax
 4528      F2FFFF
 4529 42a2 4889C7   		movq	%rax, %rdi
 4530 42a5 E821BFFF 		call	spaces
 4530      FF
 4531 42aa 4889C1   		movq	%rax, %rcx
 4532 42ad 488B95C0 		movq	-3392(%rbp), %rdx
 4532      F2FFFF
 4533 42b4 488B85B0 		movq	-3408(%rbp), %rax
 4533      F2FFFF
 4534 42bb 488D3500 		leaq	.LC32(%rip), %rsi
 4534      000000
 4535 42c2 4889C7   		movq	%rax, %rdi
 4536 42c5 B8000000 		movl	$0, %eax
 4536      00
 4537 42ca E8000000 		call	errRender@PLT
 4537      00
 4538 42cf C785E8F2 		movl	$11, -3352(%rbp)
 4538      FFFF0B00 
 4538      0000
 4539 42d9 E90E0500 		jmp	.L221
 4539      00
 4540              	.L245:
 4541              		.loc 2 589 2 discriminator 2
 4542 42de 80BDDFF2 		cmpb	$64, -3361(%rbp)
 4542      FFFF40
 4543 42e5 7E09     		jle	.L246
 4544              		.loc 2 589 2 discriminator 4
 4545 42e7 80BDDFF2 		cmpb	$90, -3361(%rbp)
 4545      FFFF5A
 4546 42ee 7E4A     		jle	.L247
 4547              	.L246:
 4548              		.loc 2 589 2 discriminator 5
 4549 42f0 488B85B8 		movq	-3400(%rbp), %rax
 4549      F2FFFF
 4550 42f7 482B85C0 		subq	-3392(%rbp), %rax
 4550      F2FFFF
 4551 42fe 4889C7   		movq	%rax, %rdi
 4552 4301 E8C5BEFF 		call	spaces
 4552      FF
 4553 4306 4889C1   		movq	%rax, %rcx
 4554 4309 488B95C0 		movq	-3392(%rbp), %rdx
 4554      F2FFFF
 4555 4310 488B85B0 		movq	-3408(%rbp), %rax
 4555      F2FFFF
 4556 4317 488D3500 		leaq	.LC33(%rip), %rsi
 4556      000000
 4557 431e 4889C7   		movq	%rax, %rdi
 4558 4321 B8000000 		movl	$0, %eax
 4558      00
 4559 4326 E8000000 		call	errRender@PLT
 4559      00
 4560 432b C785E8F2 		movl	$11, -3352(%rbp)
 4560      FFFF0B00 
 4560      0000
 4561 4335 E9B20400 		jmp	.L221
 4561      00
 4562              	.L247:
 4563              		.loc 2 589 2 discriminator 6
 4564 433a 0FB685DF 		movzbl	-3361(%rbp), %eax
 4564      F2FFFF
 4565 4341 83E841   		subl	$65, %eax
 4566 4344 8885E6F2 		movb	%al, -3354(%rbp)
 4566      FFFF
 4567 434a 488B85B8 		movq	-3400(%rbp), %rax
 4567      F2FFFF
 4568 4351 4883C001 		addq	$1, %rax
 4569 4355 488985B8 		movq	%rax, -3400(%rbp)
 4569      F2FFFF
 4570 435c 488B85B8 		movq	-3400(%rbp), %rax
 4570      F2FFFF
 4571 4363 0FB600   		movzbl	(%rax), %eax
 4572 4366 8885DFF2 		movb	%al, -3361(%rbp)
 4572      FFFF
 4573 436c 80BDDFF2 		cmpb	$0, -3361(%rbp)
 4573      FFFF00
 4574 4373 754A     		jne	.L248
 4575              		.loc 2 589 2 discriminator 7
 4576 4375 488B85B8 		movq	-3400(%rbp), %rax
 4576      F2FFFF
 4577 437c 482B85C0 		subq	-3392(%rbp), %rax
 4577      F2FFFF
 4578 4383 4889C7   		movq	%rax, %rdi
 4579 4386 E840BEFF 		call	spaces
 4579      FF
 4580 438b 4889C1   		movq	%rax, %rcx
 4581 438e 488B95C0 		movq	-3392(%rbp), %rdx
 4581      F2FFFF
 4582 4395 488B85B0 		movq	-3408(%rbp), %rax
 4582      F2FFFF
 4583 439c 488D3500 		leaq	.LC32(%rip), %rsi
 4583      000000
 4584 43a3 4889C7   		movq	%rax, %rdi
 4585 43a6 B8000000 		movl	$0, %eax
 4585      00
 4586 43ab E8000000 		call	errRender@PLT
 4586      00
 4587 43b0 C785E8F2 		movl	$11, -3352(%rbp)
 4587      FFFF0B00 
 4587      0000
 4588 43ba E92D0400 		jmp	.L221
 4588      00
 4589              	.L248:
 4590              		.loc 2 589 2 discriminator 8
 4591 43bf 80BDDFF2 		cmpb	$47, -3361(%rbp)
 4591      FFFF2F
 4592 43c6 7E09     		jle	.L249
 4593              		.loc 2 589 2 discriminator 10
 4594 43c8 80BDDFF2 		cmpb	$57, -3361(%rbp)
 4594      FFFF39
 4595 43cf 7E4A     		jle	.L250
 4596              	.L249:
 4597              		.loc 2 589 2 discriminator 11
 4598 43d1 488B85B8 		movq	-3400(%rbp), %rax
 4598      F2FFFF
 4599 43d8 482B85C0 		subq	-3392(%rbp), %rax
 4599      F2FFFF
 4600 43df 4889C7   		movq	%rax, %rdi
 4601 43e2 E8E4BDFF 		call	spaces
 4601      FF
 4602 43e7 4889C1   		movq	%rax, %rcx
 4603 43ea 488B95C0 		movq	-3392(%rbp), %rdx
 4603      F2FFFF
 4604 43f1 488B85B0 		movq	-3408(%rbp), %rax
 4604      F2FFFF
 4605 43f8 488D3500 		leaq	.LC34(%rip), %rsi
 4605      000000
 4606 43ff 4889C7   		movq	%rax, %rdi
 4607 4402 B8000000 		movl	$0, %eax
 4607      00
 4608 4407 E8000000 		call	errRender@PLT
 4608      00
 4609 440c C785E8F2 		movl	$11, -3352(%rbp)
 4609      FFFF0B00 
 4609      0000
 4610 4416 E9D10300 		jmp	.L221
 4610      00
 4611              	.L250:
 4612              		.loc 2 589 2 discriminator 12
 4613 441b 488B85B8 		movq	-3400(%rbp), %rax
 4613      F2FFFF
 4614 4422 488D8DB8 		leaq	-3400(%rbp), %rcx
 4614      F2FFFF
 4615 4429 BA0A0000 		movl	$10, %edx
 4615      00
 4616 442e 4889CE   		movq	%rcx, %rsi
 4617 4431 4889C7   		movq	%rax, %rdi
 4618 4434 E8000000 		call	strtoul@PLT
 4618      00
 4619 4439 8885E7F2 		movb	%al, -3353(%rbp)
 4619      FFFF
 590:prog.c        **** 	SET_BIT(sckPort, sckBit, PIN_LOW, "progOpen");
 4620              		.loc 2 590 2 is_stmt 1 discriminator 12
 4621 443f 0FB685E6 		movzbl	-3354(%rbp), %eax
 4621      F2FFFF
 4622 4446 0FB695E7 		movzbl	-3353(%rbp), %edx
 4622      F2FFFF
 4623 444d 4863D2   		movslq	%edx, %rdx
 4624 4450 4898     		cltq
 4625 4452 48C1E005 		salq	$5, %rax
 4626 4456 4801D0   		addq	%rdx, %rax
 4627 4459 8B8485F0 		movl	-3344(%rbp,%rax,4), %eax
 4627      F2FFFF
 4628 4460 85C0     		testl	%eax, %eax
 4629 4462 7469     		je	.L251
 4630              		.loc 2 590 2 is_stmt 0 discriminator 1
 4631 4464 488B85B8 		movq	-3400(%rbp), %rax
 4631      F2FFFF
 4632 446b 482B85C0 		subq	-3392(%rbp), %rax
 4632      F2FFFF
 4633 4472 4883E801 		subq	$1, %rax
 4634 4476 4889C7   		movq	%rax, %rdi
 4635 4479 E84DBDFF 		call	spaces
 4635      FF
 4636 447e 4889C1   		movq	%rax, %rcx
 4637 4481 0FB695E7 		movzbl	-3353(%rbp), %edx
 4637      F2FFFF
 4638 4488 0FB685E6 		movzbl	-3354(%rbp), %eax
 4638      F2FFFF
 4639 448f 8D7041   		leal	65(%rax), %esi
 4640 4492 488BBDC0 		movq	-3392(%rbp), %rdi
 4640      F2FFFF
 4641 4499 488B85B0 		movq	-3408(%rbp), %rax
 4641      F2FFFF
 4642 44a0 4989C9   		movq	%rcx, %r9
 4643 44a3 4989F8   		movq	%rdi, %r8
 4644 44a6 89D1     		movl	%edx, %ecx
 4645 44a8 89F2     		movl	%esi, %edx
 4646 44aa 488D3500 		leaq	.LC35(%rip), %rsi
 4646      000000
 4647 44b1 4889C7   		movq	%rax, %rdi
 4648 44b4 B8000000 		movl	$0, %eax
 4648      00
 4649 44b9 E8000000 		call	errRender@PLT
 4649      00
 4650 44be C785E8F2 		movl	$11, -3352(%rbp)
 4650      FFFF0B00 
 4650      0000
 4651 44c8 E91F0300 		jmp	.L221
 4651      00
 4652              	.L251:
 4653              		.loc 2 590 2 discriminator 2
 4654 44cd 0FB685E6 		movzbl	-3354(%rbp), %eax
 4654      F2FFFF
 4655 44d4 0FB695E7 		movzbl	-3353(%rbp), %edx
 4655      F2FFFF
 4656 44db 4863D2   		movslq	%edx, %rdx
 4657 44de 4898     		cltq
 4658 44e0 48C1E005 		salq	$5, %rax
 4659 44e4 4801D0   		addq	%rdx, %rax
 4660 44e7 C78485F0 		movl	$2, -3344(%rbp,%rax,4)
 4660      F2FFFF02 
 4660      000000
 591:prog.c        **** 	fStatus = portMap(handle, LP_SCK, sckPort, sckBit, error);
 4661              		.loc 2 591 12 is_stmt 1 discriminator 2
 4662 44f2 0FB68DE7 		movzbl	-3353(%rbp), %ecx
 4662      F2FFFF
 4663 44f9 0FB695E6 		movzbl	-3354(%rbp), %edx
 4663      F2FFFF
 4664 4500 488BB5B0 		movq	-3408(%rbp), %rsi
 4664      F2FFFF
 4665 4507 488B85C8 		movq	-3384(%rbp), %rax
 4665      F2FFFF
 4666 450e 4989F0   		movq	%rsi, %r8
 4667 4511 BE040000 		movl	$4, %esi
 4667      00
 4668 4516 4889C7   		movq	%rax, %rdi
 4669 4519 E8F5C0FF 		call	portMap
 4669      FF
 4670 451e 8985ECF2 		movl	%eax, -3348(%rbp)
 4670      FFFF
 592:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "progOpen()");
 4671              		.loc 2 592 2 discriminator 2
 4672 4524 83BDECF2 		cmpl	$0, -3348(%rbp)
 4672      FFFF00
 4673 452b 742A     		je	.L252
 4674              		.loc 2 592 2 is_stmt 0 discriminator 1
 4675 452d 488B85B0 		movq	-3408(%rbp), %rax
 4675      F2FFFF
 4676 4534 488D1500 		leaq	.LC36(%rip), %rdx
 4676      000000
 4677 453b 4889D6   		movq	%rdx, %rsi
 4678 453e 4889C7   		movq	%rax, %rdi
 4679 4541 E8000000 		call	errPrefix@PLT
 4679      00
 4680 4546 8B85ECF2 		movl	-3348(%rbp), %eax
 4680      FFFF
 4681 454c 8985E8F2 		movl	%eax, -3352(%rbp)
 4681      FFFF
 4682 4552 E9950200 		jmp	.L221
 4682      00
 4683              	.L252:
 593:prog.c        **** 
 594:prog.c        **** 	fStatus = portMap(handle, LP_CHOOSE, 0x00, 0x00, error);
 4684              		.loc 2 594 12 is_stmt 1
 4685 4557 488B95B0 		movq	-3408(%rbp), %rdx
 4685      F2FFFF
 4686 455e 488B85C8 		movq	-3384(%rbp), %rax
 4686      F2FFFF
 4687 4565 4989D0   		movq	%rdx, %r8
 4688 4568 B9000000 		movl	$0, %ecx
 4688      00
 4689 456d BA000000 		movl	$0, %edx
 4689      00
 4690 4572 BE000000 		movl	$0, %esi
 4690      00
 4691 4577 4889C7   		movq	%rax, %rdi
 4692 457a E894C0FF 		call	portMap
 4692      FF
 4693 457f 8985ECF2 		movl	%eax, -3348(%rbp)
 4693      FFFF
 595:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "progOpen()");
 4694              		.loc 2 595 2
 4695 4585 83BDECF2 		cmpl	$0, -3348(%rbp)
 4695      FFFF00
 4696 458c 742A     		je	.L253
 4697              		.loc 2 595 2 is_stmt 0 discriminator 1
 4698 458e 488B85B0 		movq	-3408(%rbp), %rax
 4698      F2FFFF
 4699 4595 488D1500 		leaq	.LC36(%rip), %rdx
 4699      000000
 4700 459c 4889D6   		movq	%rdx, %rsi
 4701 459f 4889C7   		movq	%rax, %rdi
 4702 45a2 E8000000 		call	errPrefix@PLT
 4702      00
 4703 45a7 8B85ECF2 		movl	-3348(%rbp), %eax
 4703      FFFF
 4704 45ad 8985E8F2 		movl	%eax, -3352(%rbp)
 4704      FFFF
 4705 45b3 E9340200 		jmp	.L221
 4705      00
 4706              	.L253:
 596:prog.c        **** 
 597:prog.c        **** 	// Set MISO/TDO as an input and the other three as outputs
 598:prog.c        **** 	fStatus = flSingleBitPortAccess(handle, misoPort, misoBit, PIN_INPUT, NULL, error);
 4707              		.loc 2 598 12 is_stmt 1
 4708 45b8 0FB695E1 		movzbl	-3359(%rbp), %edx
 4708      F2FFFF
 4709 45bf 0FB6B5E0 		movzbl	-3360(%rbp), %esi
 4709      F2FFFF
 4710 45c6 488B8DB0 		movq	-3408(%rbp), %rcx
 4710      F2FFFF
 4711 45cd 488B85C8 		movq	-3384(%rbp), %rax
 4711      F2FFFF
 4712 45d4 4989C9   		movq	%rcx, %r9
 4713 45d7 41B80000 		movl	$0, %r8d
 4713      0000
 4714 45dd B9030000 		movl	$3, %ecx
 4714      00
 4715 45e2 4889C7   		movq	%rax, %rdi
 4716 45e5 E8000000 		call	flSingleBitPortAccess@PLT
 4716      00
 4717 45ea 8985ECF2 		movl	%eax, -3348(%rbp)
 4717      FFFF
 599:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "progOpen()");
 4718              		.loc 2 599 2
 4719 45f0 83BDECF2 		cmpl	$0, -3348(%rbp)
 4719      FFFF00
 4720 45f7 742A     		je	.L254
 4721              		.loc 2 599 2 is_stmt 0 discriminator 1
 4722 45f9 488B85B0 		movq	-3408(%rbp), %rax
 4722      F2FFFF
 4723 4600 488D1500 		leaq	.LC36(%rip), %rdx
 4723      000000
 4724 4607 4889D6   		movq	%rdx, %rsi
 4725 460a 4889C7   		movq	%rax, %rdi
 4726 460d E8000000 		call	errPrefix@PLT
 4726      00
 4727 4612 8B85ECF2 		movl	-3348(%rbp), %eax
 4727      FFFF
 4728 4618 8985E8F2 		movl	%eax, -3352(%rbp)
 4728      FFFF
 4729 461e E9C90100 		jmp	.L221
 4729      00
 4730              	.L254:
 600:prog.c        **** 	fStatus = flSingleBitPortAccess(handle, mosiPort, mosiBit, PIN_LOW, NULL, error);
 4731              		.loc 2 600 12 is_stmt 1
 4732 4623 0FB695E3 		movzbl	-3357(%rbp), %edx
 4732      F2FFFF
 4733 462a 0FB6B5E2 		movzbl	-3358(%rbp), %esi
 4733      F2FFFF
 4734 4631 488B8DB0 		movq	-3408(%rbp), %rcx
 4734      F2FFFF
 4735 4638 488B85C8 		movq	-3384(%rbp), %rax
 4735      F2FFFF
 4736 463f 4989C9   		movq	%rcx, %r9
 4737 4642 41B80000 		movl	$0, %r8d
 4737      0000
 4738 4648 B9020000 		movl	$2, %ecx
 4738      00
 4739 464d 4889C7   		movq	%rax, %rdi
 4740 4650 E8000000 		call	flSingleBitPortAccess@PLT
 4740      00
 4741 4655 8985ECF2 		movl	%eax, -3348(%rbp)
 4741      FFFF
 601:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "progOpen()");
 4742              		.loc 2 601 2
 4743 465b 83BDECF2 		cmpl	$0, -3348(%rbp)
 4743      FFFF00
 4744 4662 742A     		je	.L255
 4745              		.loc 2 601 2 is_stmt 0 discriminator 1
 4746 4664 488B85B0 		movq	-3408(%rbp), %rax
 4746      F2FFFF
 4747 466b 488D1500 		leaq	.LC36(%rip), %rdx
 4747      000000
 4748 4672 4889D6   		movq	%rdx, %rsi
 4749 4675 4889C7   		movq	%rax, %rdi
 4750 4678 E8000000 		call	errPrefix@PLT
 4750      00
 4751 467d 8B85ECF2 		movl	-3348(%rbp), %eax
 4751      FFFF
 4752 4683 8985E8F2 		movl	%eax, -3352(%rbp)
 4752      FFFF
 4753 4689 E95E0100 		jmp	.L221
 4753      00
 4754              	.L255:
 602:prog.c        **** 	fStatus = flSingleBitPortAccess(handle, ssPort, ssBit, PIN_LOW, NULL, error);
 4755              		.loc 2 602 12 is_stmt 1
 4756 468e 0FB695E5 		movzbl	-3355(%rbp), %edx
 4756      F2FFFF
 4757 4695 0FB6B5E4 		movzbl	-3356(%rbp), %esi
 4757      F2FFFF
 4758 469c 488B8DB0 		movq	-3408(%rbp), %rcx
 4758      F2FFFF
 4759 46a3 488B85C8 		movq	-3384(%rbp), %rax
 4759      F2FFFF
 4760 46aa 4989C9   		movq	%rcx, %r9
 4761 46ad 41B80000 		movl	$0, %r8d
 4761      0000
 4762 46b3 B9020000 		movl	$2, %ecx
 4762      00
 4763 46b8 4889C7   		movq	%rax, %rdi
 4764 46bb E8000000 		call	flSingleBitPortAccess@PLT
 4764      00
 4765 46c0 8985ECF2 		movl	%eax, -3348(%rbp)
 4765      FFFF
 603:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "progOpen()");
 4766              		.loc 2 603 2
 4767 46c6 83BDECF2 		cmpl	$0, -3348(%rbp)
 4767      FFFF00
 4768 46cd 742A     		je	.L256
 4769              		.loc 2 603 2 is_stmt 0 discriminator 1
 4770 46cf 488B85B0 		movq	-3408(%rbp), %rax
 4770      F2FFFF
 4771 46d6 488D1500 		leaq	.LC36(%rip), %rdx
 4771      000000
 4772 46dd 4889D6   		movq	%rdx, %rsi
 4773 46e0 4889C7   		movq	%rax, %rdi
 4774 46e3 E8000000 		call	errPrefix@PLT
 4774      00
 4775 46e8 8B85ECF2 		movl	-3348(%rbp), %eax
 4775      FFFF
 4776 46ee 8985E8F2 		movl	%eax, -3352(%rbp)
 4776      FFFF
 4777 46f4 E9F30000 		jmp	.L221
 4777      00
 4778              	.L256:
 604:prog.c        **** 	fStatus = flSingleBitPortAccess(handle, sckPort, sckBit, PIN_LOW, NULL, error);
 4779              		.loc 2 604 12 is_stmt 1
 4780 46f9 0FB695E7 		movzbl	-3353(%rbp), %edx
 4780      F2FFFF
 4781 4700 0FB6B5E6 		movzbl	-3354(%rbp), %esi
 4781      F2FFFF
 4782 4707 488B8DB0 		movq	-3408(%rbp), %rcx
 4782      F2FFFF
 4783 470e 488B85C8 		movq	-3384(%rbp), %rax
 4783      F2FFFF
 4784 4715 4989C9   		movq	%rcx, %r9
 4785 4718 41B80000 		movl	$0, %r8d
 4785      0000
 4786 471e B9020000 		movl	$2, %ecx
 4786      00
 4787 4723 4889C7   		movq	%rax, %rdi
 4788 4726 E8000000 		call	flSingleBitPortAccess@PLT
 4788      00
 4789 472b 8985ECF2 		movl	%eax, -3348(%rbp)
 4789      FFFF
 605:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "progOpen()");
 4790              		.loc 2 605 2
 4791 4731 83BDECF2 		cmpl	$0, -3348(%rbp)
 4791      FFFF00
 4792 4738 742A     		je	.L257
 4793              		.loc 2 605 2 is_stmt 0 discriminator 1
 4794 473a 488B85B0 		movq	-3408(%rbp), %rax
 4794      F2FFFF
 4795 4741 488D1500 		leaq	.LC36(%rip), %rdx
 4795      000000
 4796 4748 4889D6   		movq	%rdx, %rsi
 4797 474b 4889C7   		movq	%rax, %rdi
 4798 474e E8000000 		call	errPrefix@PLT
 4798      00
 4799 4753 8B85ECF2 		movl	-3348(%rbp), %eax
 4799      FFFF
 4800 4759 8985E8F2 		movl	%eax, -3352(%rbp)
 4800      FFFF
 4801 475f E9880000 		jmp	.L221
 4801      00
 4802              	.L257:
 606:prog.c        **** 
 607:prog.c        **** 	// Remember the ports and bits for the benefit of progClose()
 608:prog.c        **** 	handle->misoPort = misoPort;
 4803              		.loc 2 608 19 is_stmt 1
 4804 4764 488B85C8 		movq	-3384(%rbp), %rax
 4804      F2FFFF
 4805 476b 0FB695E0 		movzbl	-3360(%rbp), %edx
 4805      F2FFFF
 4806 4772 885017   		movb	%dl, 23(%rax)
 609:prog.c        **** 	handle->misoBit = misoBit;
 4807              		.loc 2 609 18
 4808 4775 488B85C8 		movq	-3384(%rbp), %rax
 4808      F2FFFF
 4809 477c 0FB695E1 		movzbl	-3359(%rbp), %edx
 4809      F2FFFF
 4810 4783 885018   		movb	%dl, 24(%rax)
 610:prog.c        **** 	handle->mosiPort = mosiPort;
 4811              		.loc 2 610 19
 4812 4786 488B85C8 		movq	-3384(%rbp), %rax
 4812      F2FFFF
 4813 478d 0FB695E2 		movzbl	-3358(%rbp), %edx
 4813      F2FFFF
 4814 4794 885019   		movb	%dl, 25(%rax)
 611:prog.c        **** 	handle->mosiBit = mosiBit;
 4815              		.loc 2 611 18
 4816 4797 488B85C8 		movq	-3384(%rbp), %rax
 4816      F2FFFF
 4817 479e 0FB695E3 		movzbl	-3357(%rbp), %edx
 4817      F2FFFF
 4818 47a5 88501A   		movb	%dl, 26(%rax)
 612:prog.c        **** 	handle->ssPort = ssPort;
 4819              		.loc 2 612 17
 4820 47a8 488B85C8 		movq	-3384(%rbp), %rax
 4820      F2FFFF
 4821 47af 0FB695E4 		movzbl	-3356(%rbp), %edx
 4821      F2FFFF
 4822 47b6 88501B   		movb	%dl, 27(%rax)
 613:prog.c        **** 	handle->ssBit = ssBit;
 4823              		.loc 2 613 16
 4824 47b9 488B85C8 		movq	-3384(%rbp), %rax
 4824      F2FFFF
 4825 47c0 0FB695E5 		movzbl	-3355(%rbp), %edx
 4825      F2FFFF
 4826 47c7 88501C   		movb	%dl, 28(%rax)
 614:prog.c        **** 	handle->sckPort = sckPort;
 4827              		.loc 2 614 18
 4828 47ca 488B85C8 		movq	-3384(%rbp), %rax
 4828      F2FFFF
 4829 47d1 0FB695E6 		movzbl	-3354(%rbp), %edx
 4829      F2FFFF
 4830 47d8 88501D   		movb	%dl, 29(%rax)
 615:prog.c        **** 	handle->sckBit = sckBit;
 4831              		.loc 2 615 17
 4832 47db 488B85C8 		movq	-3384(%rbp), %rax
 4832      F2FFFF
 4833 47e2 0FB695E7 		movzbl	-3353(%rbp), %edx
 4833      F2FFFF
 4834 47e9 88501E   		movb	%dl, 30(%rax)
 4835              	.L221:
 616:prog.c        **** cleanup:
 617:prog.c        **** 	return retVal;
 4836              		.loc 2 617 9
 4837 47ec 8B85E8F2 		movl	-3352(%rbp), %eax
 4837      FFFF
 618:prog.c        **** }
 4838              		.loc 2 618 1
 4839 47f2 488B55F8 		movq	-8(%rbp), %rdx
 4840 47f6 64482B14 		subq	%fs:40, %rdx
 4840      25280000 
 4840      00
 4841 47ff 7405     		je	.L259
 4842 4801 E8000000 		call	__stack_chk_fail@PLT
 4842      00
 4843              	.L259:
 4844 4806 C9       		leave
 4845              		.cfi_def_cfa 7, 8
 4846 4807 C3       		ret
 4847              		.cfi_endproc
 4848              	.LFE14:
 4850              		.section	.rodata
 4851 0747 00       		.align 8
 4852              	.LC37:
 4853 0748 6A50726F 		.string	"jProgram(): Unexpected end of config string:\n  %s\n  %s^"
 4853      6772616D 
 4853      28293A20 
 4853      556E6578 
 4853      70656374 
 4854              		.align 8
 4855              	.LC38:
 4856 0780 6A50726F 		.string	"jProgram(): Expecting ':':\n  %s\n  %s^"
 4856      6772616D 
 4856      28293A20 
 4856      45787065 
 4856      6374696E 
 4857              	.LC39:
 4858 07a6 6A50726F 		.string	"jProgram()"
 4858      6772616D 
 4858      282900
 4859              		.text
 4861              	jProgram:
 4862              	.LFB15:
 619:prog.c        **** 
 620:prog.c        **** // Program a device over JTAG.
 621:prog.c        **** //
 622:prog.c        **** // Called by:
 623:prog.c        **** //   flProgram() -> jProgram()
 624:prog.c        **** //
 625:prog.c        **** static FLStatus jProgram(struct FLContext *handle, const char *portConfig, const uint8 *csvfData, c
 4863              		.loc 2 625 119
 4864              		.cfi_startproc
 4865 4808 F30F1EFA 		endbr64
 4866 480c 55       		pushq	%rbp
 4867              		.cfi_def_cfa_offset 16
 4868              		.cfi_offset 6, -16
 4869 480d 4889E5   		movq	%rsp, %rbp
 4870              		.cfi_def_cfa_register 6
 4871 4810 4883EC40 		subq	$64, %rsp
 4872 4814 48897DD8 		movq	%rdi, -40(%rbp)
 4873 4818 488975D0 		movq	%rsi, -48(%rbp)
 4874 481c 488955C8 		movq	%rdx, -56(%rbp)
 4875 4820 48894DC0 		movq	%rcx, -64(%rbp)
 626:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
 4876              		.loc 2 626 11
 4877 4824 C745F000 		movl	$0, -16(%rbp)
 4877      000000
 627:prog.c        **** 	FLStatus fStatus;
 628:prog.c        **** 	const char *ptr = portConfig + 1;
 4878              		.loc 2 628 14
 4879 482b 488B45D0 		movq	-48(%rbp), %rax
 4880 482f 4883C001 		addq	$1, %rax
 4881 4833 488945F8 		movq	%rax, -8(%rbp)
 629:prog.c        **** 	char ch;
 630:prog.c        **** 	EXPECT_CHAR(':', "jProgram");
 4882              		.loc 2 630 2
 4883 4837 488B45F8 		movq	-8(%rbp), %rax
 4884 483b 0FB600   		movzbl	(%rax), %eax
 4885 483e 8845EF   		movb	%al, -17(%rbp)
 4886 4841 807DEF00 		cmpb	$0, -17(%rbp)
 4887 4845 753B     		jne	.L261
 4888              		.loc 2 630 2 is_stmt 0 discriminator 1
 4889 4847 488B45F8 		movq	-8(%rbp), %rax
 4890 484b 482B45D0 		subq	-48(%rbp), %rax
 4891 484f 4889C7   		movq	%rax, %rdi
 4892 4852 E874B9FF 		call	spaces
 4892      FF
 4893 4857 4889C1   		movq	%rax, %rcx
 4894 485a 488B55D0 		movq	-48(%rbp), %rdx
 4895 485e 488B45C0 		movq	-64(%rbp), %rax
 4896 4862 488D3500 		leaq	.LC37(%rip), %rsi
 4896      000000
 4897 4869 4889C7   		movq	%rax, %rdi
 4898 486c B8000000 		movl	$0, %eax
 4898      00
 4899 4871 E8000000 		call	errRender@PLT
 4899      00
 4900 4876 C745F00B 		movl	$11, -16(%rbp)
 4900      000000
 4901 487d E9FE0000 		jmp	.L262
 4901      00
 4902              	.L261:
 4903              		.loc 2 630 2 discriminator 2
 4904 4882 807DEF3A 		cmpb	$58, -17(%rbp)
 4905 4886 743B     		je	.L263
 4906              		.loc 2 630 2 discriminator 3
 4907 4888 488B45F8 		movq	-8(%rbp), %rax
 4908 488c 482B45D0 		subq	-48(%rbp), %rax
 4909 4890 4889C7   		movq	%rax, %rdi
 4910 4893 E833B9FF 		call	spaces
 4910      FF
 4911 4898 4889C1   		movq	%rax, %rcx
 4912 489b 488B55D0 		movq	-48(%rbp), %rdx
 4913 489f 488B45C0 		movq	-64(%rbp), %rax
 4914 48a3 488D3500 		leaq	.LC38(%rip), %rsi
 4914      000000
 4915 48aa 4889C7   		movq	%rax, %rdi
 4916 48ad B8000000 		movl	$0, %eax
 4916      00
 4917 48b2 E8000000 		call	errRender@PLT
 4917      00
 4918 48b7 C745F00B 		movl	$11, -16(%rbp)
 4918      000000
 4919 48be E9BD0000 		jmp	.L262
 4919      00
 4920              	.L263:
 4921              		.loc 2 630 2 discriminator 4
 4922 48c3 488345F8 		addq	$1, -8(%rbp)
 4922      01
 631:prog.c        **** 	fStatus = progOpenInternal(handle, portConfig, ptr, error);
 4923              		.loc 2 631 12 is_stmt 1 discriminator 4
 4924 48c8 488B4DC0 		movq	-64(%rbp), %rcx
 4925 48cc 488B55F8 		movq	-8(%rbp), %rdx
 4926 48d0 488B75D0 		movq	-48(%rbp), %rsi
 4927 48d4 488B45D8 		movq	-40(%rbp), %rax
 4928 48d8 4889C7   		movq	%rax, %rdi
 4929 48db E8ACF0FF 		call	progOpenInternal
 4929      FF
 4930 48e0 8945F4   		movl	%eax, -12(%rbp)
 632:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "jProgram()");
 4931              		.loc 2 632 2 discriminator 4
 4932 48e3 837DF400 		cmpl	$0, -12(%rbp)
 4933 48e7 741E     		je	.L264
 4934              		.loc 2 632 2 is_stmt 0 discriminator 1
 4935 48e9 488B45C0 		movq	-64(%rbp), %rax
 4936 48ed 488D1500 		leaq	.LC39(%rip), %rdx
 4936      000000
 4937 48f4 4889D6   		movq	%rdx, %rsi
 4938 48f7 4889C7   		movq	%rax, %rdi
 4939 48fa E8000000 		call	errPrefix@PLT
 4939      00
 4940 48ff 8B45F4   		movl	-12(%rbp), %eax
 4941 4902 8945F0   		movl	%eax, -16(%rbp)
 4942 4905 EB79     		jmp	.L262
 4943              	.L264:
 633:prog.c        **** 	fStatus = csvfPlay(handle, csvfData, error);
 4944              		.loc 2 633 12 is_stmt 1
 4945 4907 488B55C0 		movq	-64(%rbp), %rdx
 4946 490b 488B4DC8 		movq	-56(%rbp), %rcx
 4947 490f 488B45D8 		movq	-40(%rbp), %rax
 4948 4913 4889CE   		movq	%rcx, %rsi
 4949 4916 4889C7   		movq	%rax, %rdi
 4950 4919 E8000000 		call	csvfPlay@PLT
 4950      00
 4951 491e 8945F4   		movl	%eax, -12(%rbp)
 634:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "jProgram()");
 4952              		.loc 2 634 2
 4953 4921 837DF400 		cmpl	$0, -12(%rbp)
 4954 4925 741E     		je	.L265
 4955              		.loc 2 634 2 is_stmt 0 discriminator 1
 4956 4927 488B45C0 		movq	-64(%rbp), %rax
 4957 492b 488D1500 		leaq	.LC39(%rip), %rdx
 4957      000000
 4958 4932 4889D6   		movq	%rdx, %rsi
 4959 4935 4889C7   		movq	%rax, %rdi
 4960 4938 E8000000 		call	errPrefix@PLT
 4960      00
 4961 493d 8B45F4   		movl	-12(%rbp), %eax
 4962 4940 8945F0   		movl	%eax, -16(%rbp)
 4963 4943 EB3B     		jmp	.L262
 4964              	.L265:
 635:prog.c        **** 	fStatus = progClose(handle, error);
 4965              		.loc 2 635 12 is_stmt 1
 4966 4945 488B55C0 		movq	-64(%rbp), %rdx
 4967 4949 488B45D8 		movq	-40(%rbp), %rax
 4968 494d 4889D6   		movq	%rdx, %rsi
 4969 4950 4889C7   		movq	%rax, %rdi
 4970 4953 E8000000 		call	progClose@PLT
 4970      00
 4971 4958 8945F4   		movl	%eax, -12(%rbp)
 636:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "jProgram()");
 4972              		.loc 2 636 2
 4973 495b 837DF400 		cmpl	$0, -12(%rbp)
 4974 495f 741E     		je	.L267
 4975              		.loc 2 636 2 is_stmt 0 discriminator 1
 4976 4961 488B45C0 		movq	-64(%rbp), %rax
 4977 4965 488D1500 		leaq	.LC39(%rip), %rdx
 4977      000000
 4978 496c 4889D6   		movq	%rdx, %rsi
 4979 496f 4889C7   		movq	%rax, %rdi
 4980 4972 E8000000 		call	errPrefix@PLT
 4980      00
 4981 4977 8B45F4   		movl	-12(%rbp), %eax
 4982 497a 8945F0   		movl	%eax, -16(%rbp)
 4983 497d EB01     		jmp	.L262
 4984              	.L267:
 637:prog.c        **** cleanup:
 4985              		.loc 2 637 1 is_stmt 1
 4986 497f 90       		nop
 4987              	.L262:
 638:prog.c        **** 	return retVal;
 4988              		.loc 2 638 9
 4989 4980 8B45F0   		movl	-16(%rbp), %eax
 639:prog.c        **** }
 4990              		.loc 2 639 1
 4991 4983 C9       		leave
 4992              		.cfi_def_cfa 7, 8
 4993 4984 C3       		ret
 4994              		.cfi_endproc
 4995              	.LFE15:
 4998              	swap:
 4999              	.LFB16:
 640:prog.c        **** 
 641:prog.c        **** // Reverse the array in-place by swapping the outer items and progressing inward until we meet in
 642:prog.c        **** // the middle.
 643:prog.c        **** //
 644:prog.c        **** // Called by:
 645:prog.c        **** //   jtagScanChain()
 646:prog.c        **** //
 647:prog.c        **** static void swap(uint32 *array, uint32 numWritten) {
 5000              		.loc 2 647 52
 5001              		.cfi_startproc
 5002 4985 F30F1EFA 		endbr64
 5003 4989 55       		pushq	%rbp
 5004              		.cfi_def_cfa_offset 16
 5005              		.cfi_offset 6, -16
 5006 498a 4889E5   		movq	%rsp, %rbp
 5007              		.cfi_def_cfa_register 6
 5008 498d 48897DD8 		movq	%rdi, -40(%rbp)
 5009 4991 8975D4   		movl	%esi, -44(%rbp)
 648:prog.c        **** 	uint32 *hiPtr = array + numWritten - 1;  // last one
 5010              		.loc 2 648 24
 5011 4994 8B45D4   		movl	-44(%rbp), %eax
 5012 4997 48C1E002 		salq	$2, %rax
 5013              		.loc 2 648 37
 5014 499b 488D50FC 		leaq	-4(%rax), %rdx
 5015              		.loc 2 648 10
 5016 499f 488B45D8 		movq	-40(%rbp), %rax
 5017 49a3 4801D0   		addq	%rdx, %rax
 5018 49a6 488945F0 		movq	%rax, -16(%rbp)
 649:prog.c        **** 	uint32 *loPtr = array; // first one
 5019              		.loc 2 649 10
 5020 49aa 488B45D8 		movq	-40(%rbp), %rax
 5021 49ae 488945F8 		movq	%rax, -8(%rbp)
 650:prog.c        **** 	uint32 temp;
 651:prog.c        **** 	while ( loPtr < hiPtr ) {
 5022              		.loc 2 651 8
 5023 49b2 EB2E     		jmp	.L269
 5024              	.L270:
 652:prog.c        **** 		temp = *loPtr;
 5025              		.loc 2 652 8
 5026 49b4 488B45F8 		movq	-8(%rbp), %rax
 5027 49b8 8B00     		movl	(%rax), %eax
 5028 49ba 8945EC   		movl	%eax, -20(%rbp)
 653:prog.c        **** 		*loPtr++ = *hiPtr;
 5029              		.loc 2 653 9
 5030 49bd 488B45F8 		movq	-8(%rbp), %rax
 5031 49c1 488D5004 		leaq	4(%rax), %rdx
 5032 49c5 488955F8 		movq	%rdx, -8(%rbp)
 5033              		.loc 2 653 14
 5034 49c9 488B55F0 		movq	-16(%rbp), %rdx
 5035 49cd 8B12     		movl	(%rdx), %edx
 5036              		.loc 2 653 12
 5037 49cf 8910     		movl	%edx, (%rax)
 654:prog.c        **** 		*hiPtr-- = temp;
 5038              		.loc 2 654 9
 5039 49d1 488B45F0 		movq	-16(%rbp), %rax
 5040 49d5 488D50FC 		leaq	-4(%rax), %rdx
 5041 49d9 488955F0 		movq	%rdx, -16(%rbp)
 5042              		.loc 2 654 12
 5043 49dd 8B55EC   		movl	-20(%rbp), %edx
 5044 49e0 8910     		movl	%edx, (%rax)
 5045              	.L269:
 651:prog.c        **** 		temp = *loPtr;
 5046              		.loc 2 651 16
 5047 49e2 488B45F8 		movq	-8(%rbp), %rax
 5048 49e6 483B45F0 		cmpq	-16(%rbp), %rax
 5049 49ea 72C8     		jb	.L270
 655:prog.c        **** 	}
 656:prog.c        **** }	
 5050              		.loc 2 656 1
 5051 49ec 90       		nop
 5052 49ed 90       		nop
 5053 49ee 5D       		popq	%rbp
 5054              		.cfi_def_cfa 7, 8
 5055 49ef C3       		ret
 5056              		.cfi_endproc
 5057              	.LFE16:
 5059              		.globl	progOpen
 5061              	progOpen:
 5062              	.LFB17:
 657:prog.c        **** 
 658:prog.c        **** // ------------------------------------------------------------------------------------------------
 659:prog.c        **** // Implementation of public functions
 660:prog.c        **** // ------------------------------------------------------------------------------------------------
 661:prog.c        **** 
 662:prog.c        **** DLLEXPORT(FLStatus) progOpen(struct FLContext *handle, const char *portConfig, const char **error) 
 5063              		.loc 2 662 100
 5064              		.cfi_startproc
 5065 49f0 F30F1EFA 		endbr64
 5066 49f4 55       		pushq	%rbp
 5067              		.cfi_def_cfa_offset 16
 5068              		.cfi_offset 6, -16
 5069 49f5 4889E5   		movq	%rsp, %rbp
 5070              		.cfi_def_cfa_register 6
 5071 49f8 4883EC20 		subq	$32, %rsp
 5072 49fc 48897DF8 		movq	%rdi, -8(%rbp)
 5073 4a00 488975F0 		movq	%rsi, -16(%rbp)
 5074 4a04 488955E8 		movq	%rdx, -24(%rbp)
 663:prog.c        **** 	return progOpenInternal(handle, portConfig, portConfig, error);
 5075              		.loc 2 663 9
 5076 4a08 488B4DE8 		movq	-24(%rbp), %rcx
 5077 4a0c 488B55F0 		movq	-16(%rbp), %rdx
 5078 4a10 488B75F0 		movq	-16(%rbp), %rsi
 5079 4a14 488B45F8 		movq	-8(%rbp), %rax
 5080 4a18 4889C7   		movq	%rax, %rdi
 5081 4a1b E86CEFFF 		call	progOpenInternal
 5081      FF
 664:prog.c        **** }
 5082              		.loc 2 664 1
 5083 4a20 C9       		leave
 5084              		.cfi_def_cfa 7, 8
 5085 4a21 C3       		ret
 5086              		.cfi_endproc
 5087              	.LFE17:
 5089              		.section	.rodata
 5090              	.LC40:
 5091 07b1 70726F67 		.string	"progClose()"
 5091      436C6F73 
 5091      65282900 
 5092              		.text
 5093              		.globl	progClose
 5095              	progClose:
 5096              	.LFB18:
 665:prog.c        **** 
 666:prog.c        **** DLLEXPORT(FLStatus) progClose(struct FLContext *handle, const char **error) {
 5097              		.loc 2 666 77
 5098              		.cfi_startproc
 5099 4a22 F30F1EFA 		endbr64
 5100 4a26 55       		pushq	%rbp
 5101              		.cfi_def_cfa_offset 16
 5102              		.cfi_offset 6, -16
 5103 4a27 4889E5   		movq	%rsp, %rbp
 5104              		.cfi_def_cfa_register 6
 5105 4a2a 4883EC20 		subq	$32, %rsp
 5106 4a2e 48897DE8 		movq	%rdi, -24(%rbp)
 5107 4a32 488975E0 		movq	%rsi, -32(%rbp)
 667:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
 5108              		.loc 2 667 11
 5109 4a36 C745F800 		movl	$0, -8(%rbp)
 5109      000000
 668:prog.c        **** 	FLStatus fStatus;
 669:prog.c        **** 
 670:prog.c        **** 	// Set MISO/TDO, MOSI/TDI, SS/TMS & SCK/TCK as inputs
 671:prog.c        **** 	fStatus = flSingleBitPortAccess(handle, handle->misoPort, handle->misoBit, PIN_INPUT, NULL, error)
 5110              		.loc 2 671 66
 5111 4a3d 488B45E8 		movq	-24(%rbp), %rax
 5112 4a41 0FB64018 		movzbl	24(%rax), %eax
 5113              		.loc 2 671 12
 5114 4a45 0FB6D0   		movzbl	%al, %edx
 5115              		.loc 2 671 48
 5116 4a48 488B45E8 		movq	-24(%rbp), %rax
 5117 4a4c 0FB64017 		movzbl	23(%rax), %eax
 5118              		.loc 2 671 12
 5119 4a50 0FB6F0   		movzbl	%al, %esi
 5120 4a53 488B4DE0 		movq	-32(%rbp), %rcx
 5121 4a57 488B45E8 		movq	-24(%rbp), %rax
 5122 4a5b 4989C9   		movq	%rcx, %r9
 5123 4a5e 41B80000 		movl	$0, %r8d
 5123      0000
 5124 4a64 B9030000 		movl	$3, %ecx
 5124      00
 5125 4a69 4889C7   		movq	%rax, %rdi
 5126 4a6c E8000000 		call	flSingleBitPortAccess@PLT
 5126      00
 5127 4a71 8945FC   		movl	%eax, -4(%rbp)
 672:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "progClose()");
 5128              		.loc 2 672 2
 5129 4a74 837DFC00 		cmpl	$0, -4(%rbp)
 5130 4a78 7421     		je	.L274
 5131              		.loc 2 672 2 is_stmt 0 discriminator 1
 5132 4a7a 488B45E0 		movq	-32(%rbp), %rax
 5133 4a7e 488D1500 		leaq	.LC40(%rip), %rdx
 5133      000000
 5134 4a85 4889D6   		movq	%rdx, %rsi
 5135 4a88 4889C7   		movq	%rax, %rdi
 5136 4a8b E8000000 		call	errPrefix@PLT
 5136      00
 5137 4a90 8B45FC   		movl	-4(%rbp), %eax
 5138 4a93 8945F8   		movl	%eax, -8(%rbp)
 5139 4a96 E9150100 		jmp	.L275
 5139      00
 5140              	.L274:
 673:prog.c        **** 	fStatus = flSingleBitPortAccess(handle, handle->mosiPort, handle->mosiBit, PIN_INPUT, NULL, error)
 5141              		.loc 2 673 66 is_stmt 1
 5142 4a9b 488B45E8 		movq	-24(%rbp), %rax
 5143 4a9f 0FB6401A 		movzbl	26(%rax), %eax
 5144              		.loc 2 673 12
 5145 4aa3 0FB6D0   		movzbl	%al, %edx
 5146              		.loc 2 673 48
 5147 4aa6 488B45E8 		movq	-24(%rbp), %rax
 5148 4aaa 0FB64019 		movzbl	25(%rax), %eax
 5149              		.loc 2 673 12
 5150 4aae 0FB6F0   		movzbl	%al, %esi
 5151 4ab1 488B4DE0 		movq	-32(%rbp), %rcx
 5152 4ab5 488B45E8 		movq	-24(%rbp), %rax
 5153 4ab9 4989C9   		movq	%rcx, %r9
 5154 4abc 41B80000 		movl	$0, %r8d
 5154      0000
 5155 4ac2 B9030000 		movl	$3, %ecx
 5155      00
 5156 4ac7 4889C7   		movq	%rax, %rdi
 5157 4aca E8000000 		call	flSingleBitPortAccess@PLT
 5157      00
 5158 4acf 8945FC   		movl	%eax, -4(%rbp)
 674:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "progClose()");
 5159              		.loc 2 674 2
 5160 4ad2 837DFC00 		cmpl	$0, -4(%rbp)
 5161 4ad6 7421     		je	.L276
 5162              		.loc 2 674 2 is_stmt 0 discriminator 1
 5163 4ad8 488B45E0 		movq	-32(%rbp), %rax
 5164 4adc 488D1500 		leaq	.LC40(%rip), %rdx
 5164      000000
 5165 4ae3 4889D6   		movq	%rdx, %rsi
 5166 4ae6 4889C7   		movq	%rax, %rdi
 5167 4ae9 E8000000 		call	errPrefix@PLT
 5167      00
 5168 4aee 8B45FC   		movl	-4(%rbp), %eax
 5169 4af1 8945F8   		movl	%eax, -8(%rbp)
 5170 4af4 E9B70000 		jmp	.L275
 5170      00
 5171              	.L276:
 675:prog.c        **** 	fStatus = flSingleBitPortAccess(handle, handle->ssPort, handle->ssBit, PIN_INPUT, NULL, error);
 5172              		.loc 2 675 64 is_stmt 1
 5173 4af9 488B45E8 		movq	-24(%rbp), %rax
 5174 4afd 0FB6401C 		movzbl	28(%rax), %eax
 5175              		.loc 2 675 12
 5176 4b01 0FB6D0   		movzbl	%al, %edx
 5177              		.loc 2 675 48
 5178 4b04 488B45E8 		movq	-24(%rbp), %rax
 5179 4b08 0FB6401B 		movzbl	27(%rax), %eax
 5180              		.loc 2 675 12
 5181 4b0c 0FB6F0   		movzbl	%al, %esi
 5182 4b0f 488B4DE0 		movq	-32(%rbp), %rcx
 5183 4b13 488B45E8 		movq	-24(%rbp), %rax
 5184 4b17 4989C9   		movq	%rcx, %r9
 5185 4b1a 41B80000 		movl	$0, %r8d
 5185      0000
 5186 4b20 B9030000 		movl	$3, %ecx
 5186      00
 5187 4b25 4889C7   		movq	%rax, %rdi
 5188 4b28 E8000000 		call	flSingleBitPortAccess@PLT
 5188      00
 5189 4b2d 8945FC   		movl	%eax, -4(%rbp)
 676:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "progClose()");
 5190              		.loc 2 676 2
 5191 4b30 837DFC00 		cmpl	$0, -4(%rbp)
 5192 4b34 741E     		je	.L277
 5193              		.loc 2 676 2 is_stmt 0 discriminator 1
 5194 4b36 488B45E0 		movq	-32(%rbp), %rax
 5195 4b3a 488D1500 		leaq	.LC40(%rip), %rdx
 5195      000000
 5196 4b41 4889D6   		movq	%rdx, %rsi
 5197 4b44 4889C7   		movq	%rax, %rdi
 5198 4b47 E8000000 		call	errPrefix@PLT
 5198      00
 5199 4b4c 8B45FC   		movl	-4(%rbp), %eax
 5200 4b4f 8945F8   		movl	%eax, -8(%rbp)
 5201 4b52 EB5C     		jmp	.L275
 5202              	.L277:
 677:prog.c        **** 	fStatus = flSingleBitPortAccess(handle, handle->sckPort, handle->sckBit, PIN_INPUT, NULL, error);
 5203              		.loc 2 677 65 is_stmt 1
 5204 4b54 488B45E8 		movq	-24(%rbp), %rax
 5205 4b58 0FB6401E 		movzbl	30(%rax), %eax
 5206              		.loc 2 677 12
 5207 4b5c 0FB6D0   		movzbl	%al, %edx
 5208              		.loc 2 677 48
 5209 4b5f 488B45E8 		movq	-24(%rbp), %rax
 5210 4b63 0FB6401D 		movzbl	29(%rax), %eax
 5211              		.loc 2 677 12
 5212 4b67 0FB6F0   		movzbl	%al, %esi
 5213 4b6a 488B4DE0 		movq	-32(%rbp), %rcx
 5214 4b6e 488B45E8 		movq	-24(%rbp), %rax
 5215 4b72 4989C9   		movq	%rcx, %r9
 5216 4b75 41B80000 		movl	$0, %r8d
 5216      0000
 5217 4b7b B9030000 		movl	$3, %ecx
 5217      00
 5218 4b80 4889C7   		movq	%rax, %rdi
 5219 4b83 E8000000 		call	flSingleBitPortAccess@PLT
 5219      00
 5220 4b88 8945FC   		movl	%eax, -4(%rbp)
 678:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "progClose()");
 5221              		.loc 2 678 2
 5222 4b8b 837DFC00 		cmpl	$0, -4(%rbp)
 5223 4b8f 741E     		je	.L279
 5224              		.loc 2 678 2 is_stmt 0 discriminator 1
 5225 4b91 488B45E0 		movq	-32(%rbp), %rax
 5226 4b95 488D1500 		leaq	.LC40(%rip), %rdx
 5226      000000
 5227 4b9c 4889D6   		movq	%rdx, %rsi
 5228 4b9f 4889C7   		movq	%rax, %rdi
 5229 4ba2 E8000000 		call	errPrefix@PLT
 5229      00
 5230 4ba7 8B45FC   		movl	-4(%rbp), %eax
 5231 4baa 8945F8   		movl	%eax, -8(%rbp)
 5232 4bad EB01     		jmp	.L275
 5233              	.L279:
 679:prog.c        **** cleanup:
 5234              		.loc 2 679 1 is_stmt 1
 5235 4baf 90       		nop
 5236              	.L275:
 680:prog.c        **** 	return retVal;
 5237              		.loc 2 680 9
 5238 4bb0 8B45F8   		movl	-8(%rbp), %eax
 681:prog.c        **** }
 5239              		.loc 2 681 1
 5240 4bb3 C9       		leave
 5241              		.cfi_def_cfa 7, 8
 5242 4bb4 C3       		ret
 5243              		.cfi_endproc
 5244              	.LFE18:
 5246              		.section	.rodata
 5247              	.LC41:
 5248 07bd 6A746167 		.string	"jtagShiftInOut()"
 5248      53686966 
 5248      74496E4F 
 5248      75742829 
 5248      00
 5249              		.text
 5250              		.globl	jtagShiftInOut
 5252              	jtagShiftInOut:
 5253              	.LFB19:
 682:prog.c        **** 
 683:prog.c        **** // Shift data into and out of JTAG chain.
 684:prog.c        **** //   In pointer may be SHIFT_ZEROS (shift in zeros) or SHIFT_ONES (shift in ones).
 685:prog.c        **** //   Out pointer may be NULL (not interested in data shifted out of the chain).
 686:prog.c        **** //
 687:prog.c        **** DLLEXPORT(FLStatus) jtagShiftInOut(
 688:prog.c        **** 	struct FLContext *handle, uint32 numBits, const uint8 *inData, uint8 *outData, uint8 isLast,
 689:prog.c        **** 	const char **error)
 690:prog.c        **** {
 5254              		.loc 2 690 1
 5255              		.cfi_startproc
 5256 4bb5 F30F1EFA 		endbr64
 5257 4bb9 55       		pushq	%rbp
 5258              		.cfi_def_cfa_offset 16
 5259              		.cfi_offset 6, -16
 5260 4bba 4889E5   		movq	%rsp, %rbp
 5261              		.cfi_def_cfa_register 6
 5262 4bbd 4883EC40 		subq	$64, %rsp
 5263 4bc1 48897DE8 		movq	%rdi, -24(%rbp)
 5264 4bc5 8975E4   		movl	%esi, -28(%rbp)
 5265 4bc8 488955D8 		movq	%rdx, -40(%rbp)
 5266 4bcc 48894DD0 		movq	%rcx, -48(%rbp)
 5267 4bd0 4489C0   		movl	%r8d, %eax
 5268 4bd3 4C894DC8 		movq	%r9, -56(%rbp)
 5269 4bd7 8845E0   		movb	%al, -32(%rbp)
 691:prog.c        **** 	FLStatus retVal = FL_SUCCESS, fStatus;
 5270              		.loc 2 691 11
 5271 4bda C745F400 		movl	$0, -12(%rbp)
 5271      000000
 692:prog.c        **** 	uint32 numBytes = bitsToBytes(numBits);
 5272              		.loc 2 692 20
 5273 4be1 8B45E4   		movl	-28(%rbp), %eax
 5274 4be4 C1E803   		shrl	$3, %eax
 5275 4be7 89C2     		movl	%eax, %edx
 5276 4be9 8B45E4   		movl	-28(%rbp), %eax
 5277 4bec 83E007   		andl	$7, %eax
 5278 4bef 85C0     		testl	%eax, %eax
 5279 4bf1 7407     		je	.L281
 5280              		.loc 2 692 20 is_stmt 0 discriminator 1
 5281 4bf3 B8010000 		movl	$1, %eax
 5281      00
 5282 4bf8 EB05     		jmp	.L282
 5283              	.L281:
 5284              		.loc 2 692 20 discriminator 2
 5285 4bfa B8000000 		movl	$0, %eax
 5285      00
 5286              	.L282:
 5287              		.loc 2 692 9 is_stmt 1 discriminator 4
 5288 4bff 01D0     		addl	%edx, %eax
 5289 4c01 8945F8   		movl	%eax, -8(%rbp)
 693:prog.c        **** 	uint16 chunkSize;
 694:prog.c        **** 	uint8 mode = 0x00;
 5290              		.loc 2 694 8 discriminator 4
 5291 4c04 C645F000 		movb	$0, -16(%rbp)
 695:prog.c        **** 	bool isSending = false;
 5292              		.loc 2 695 7 discriminator 4
 5293 4c08 C645F100 		movb	$0, -15(%rbp)
 696:prog.c        **** 
 697:prog.c        **** 	if ( inData == SHIFT_ONES ) {
 5294              		.loc 2 697 5 discriminator 4
 5295 4c0c 48837DD8 		cmpq	$-1, -40(%rbp)
 5295      FF
 5296 4c11 7506     		jne	.L283
 698:prog.c        **** 		mode |= bmSENDONES;
 5297              		.loc 2 698 8
 5298 4c13 804DF002 		orb	$2, -16(%rbp)
 5299 4c17 EB0B     		jmp	.L284
 5300              	.L283:
 699:prog.c        **** 	} else if ( inData != SHIFT_ZEROS ) {
 5301              		.loc 2 699 12
 5302 4c19 48837DD8 		cmpq	$0, -40(%rbp)
 5302      00
 5303 4c1e 7404     		je	.L284
 700:prog.c        **** 		isSending = true;
 5304              		.loc 2 700 13
 5305 4c20 C645F101 		movb	$1, -15(%rbp)
 5306              	.L284:
 701:prog.c        **** 	}
 702:prog.c        **** 	if ( isLast ) {
 5307              		.loc 2 702 5
 5308 4c24 807DE000 		cmpb	$0, -32(%rbp)
 5309 4c28 7404     		je	.L285
 703:prog.c        **** 		mode |= bmISLAST;
 5310              		.loc 2 703 8
 5311 4c2a 804DF001 		orb	$1, -16(%rbp)
 5312              	.L285:
 704:prog.c        **** 	}
 705:prog.c        **** 	if ( isSending ) {
 5313              		.loc 2 705 5
 5314 4c2e 807DF100 		cmpb	$0, -15(%rbp)
 5315 4c32 0F840D01 		je	.L286
 5315      0000
 706:prog.c        **** 		fStatus = beginShift(handle, numBits, PROG_JTAG_ISSENDING_ISRECEIVING, mode, error);
 5316              		.loc 2 706 13
 5317 4c38 0FB655F0 		movzbl	-16(%rbp), %edx
 5318 4c3c 488B4DC8 		movq	-56(%rbp), %rcx
 5319 4c40 8B75E4   		movl	-28(%rbp), %esi
 5320 4c43 488B45E8 		movq	-24(%rbp), %rax
 5321 4c47 4989C8   		movq	%rcx, %r8
 5322 4c4a 89D1     		movl	%edx, %ecx
 5323 4c4c BA010000 		movl	$1, %edx
 5323      00
 5324 4c51 4889C7   		movq	%rax, %rdi
 5325 4c54 E8B3B3FF 		call	beginShift
 5325      FF
 5326 4c59 8945FC   		movl	%eax, -4(%rbp)
 707:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "jtagShiftInOut()");
 5327              		.loc 2 707 3
 5328 4c5c 837DFC00 		cmpl	$0, -4(%rbp)
 5329 4c60 0F84D000 		je	.L289
 5329      0000
 5330              		.loc 2 707 3 is_stmt 0 discriminator 1
 5331 4c66 488B45C8 		movq	-56(%rbp), %rax
 5332 4c6a 488D1500 		leaq	.LC41(%rip), %rdx
 5332      000000
 5333 4c71 4889D6   		movq	%rdx, %rsi
 5334 4c74 4889C7   		movq	%rax, %rdi
 5335 4c77 E8000000 		call	errPrefix@PLT
 5335      00
 5336 4c7c 8B45FC   		movl	-4(%rbp), %eax
 5337 4c7f 8945F4   		movl	%eax, -12(%rbp)
 5338 4c82 E9730100 		jmp	.L288
 5338      00
 5339              	.L294:
 708:prog.c        **** 		while ( numBytes ) {
 709:prog.c        **** 			chunkSize = (uint16)((numBytes >= 64) ? 64 : numBytes);
 5340              		.loc 2 709 16 is_stmt 1
 5341 4c87 837DF83F 		cmpl	$63, -8(%rbp)
 5342 4c8b 7705     		ja	.L290
 5343              		.loc 2 709 16 is_stmt 0 discriminator 1
 5344 4c8d 8B45F8   		movl	-8(%rbp), %eax
 5345 4c90 EB05     		jmp	.L291
 5346              	.L290:
 5347              		.loc 2 709 16 discriminator 2
 5348 4c92 B8400000 		movl	$64, %eax
 5348      00
 5349              	.L291:
 5350              		.loc 2 709 14 is_stmt 1 discriminator 4
 5351 4c97 668945F2 		movw	%ax, -14(%rbp)
 710:prog.c        **** 			fStatus = doSend(handle, inData, chunkSize, error);
 5352              		.loc 2 710 14 discriminator 4
 5353 4c9b 0FB755F2 		movzwl	-14(%rbp), %edx
 5354 4c9f 488B4DC8 		movq	-56(%rbp), %rcx
 5355 4ca3 488B75D8 		movq	-40(%rbp), %rsi
 5356 4ca7 488B45E8 		movq	-24(%rbp), %rax
 5357 4cab 4889C7   		movq	%rax, %rdi
 5358 4cae E814B4FF 		call	doSend
 5358      FF
 5359 4cb3 8945FC   		movl	%eax, -4(%rbp)
 711:prog.c        **** 			CHECK_STATUS(fStatus, fStatus, cleanup, "jtagShiftInOut()");
 5360              		.loc 2 711 4 discriminator 4
 5361 4cb6 837DFC00 		cmpl	$0, -4(%rbp)
 5362 4cba 7421     		je	.L292
 5363              		.loc 2 711 4 is_stmt 0 discriminator 1
 5364 4cbc 488B45C8 		movq	-56(%rbp), %rax
 5365 4cc0 488D1500 		leaq	.LC41(%rip), %rdx
 5365      000000
 5366 4cc7 4889D6   		movq	%rdx, %rsi
 5367 4cca 4889C7   		movq	%rax, %rdi
 5368 4ccd E8000000 		call	errPrefix@PLT
 5368      00
 5369 4cd2 8B45FC   		movl	-4(%rbp), %eax
 5370 4cd5 8945F4   		movl	%eax, -12(%rbp)
 5371 4cd8 E91D0100 		jmp	.L288
 5371      00
 5372              	.L292:
 712:prog.c        **** 			inData += chunkSize;
 5373              		.loc 2 712 11 is_stmt 1
 5374 4cdd 0FB745F2 		movzwl	-14(%rbp), %eax
 5375 4ce1 480145D8 		addq	%rax, -40(%rbp)
 713:prog.c        **** 			fStatus = doReceive(handle, outData, chunkSize, error);
 5376              		.loc 2 713 14
 5377 4ce5 0FB755F2 		movzwl	-14(%rbp), %edx
 5378 4ce9 488B4DC8 		movq	-56(%rbp), %rcx
 5379 4ced 488B75D0 		movq	-48(%rbp), %rsi
 5380 4cf1 488B45E8 		movq	-24(%rbp), %rax
 5381 4cf5 4889C7   		movq	%rax, %rdi
 5382 4cf8 E84CB4FF 		call	doReceive
 5382      FF
 5383 4cfd 8945FC   		movl	%eax, -4(%rbp)
 714:prog.c        **** 			CHECK_STATUS(fStatus, fStatus, cleanup, "jtagShiftInOut()");
 5384              		.loc 2 714 4
 5385 4d00 837DFC00 		cmpl	$0, -4(%rbp)
 5386 4d04 7421     		je	.L293
 5387              		.loc 2 714 4 is_stmt 0 discriminator 1
 5388 4d06 488B45C8 		movq	-56(%rbp), %rax
 5389 4d0a 488D1500 		leaq	.LC41(%rip), %rdx
 5389      000000
 5390 4d11 4889D6   		movq	%rdx, %rsi
 5391 4d14 4889C7   		movq	%rax, %rdi
 5392 4d17 E8000000 		call	errPrefix@PLT
 5392      00
 5393 4d1c 8B45FC   		movl	-4(%rbp), %eax
 5394 4d1f 8945F4   		movl	%eax, -12(%rbp)
 5395 4d22 E9D30000 		jmp	.L288
 5395      00
 5396              	.L293:
 715:prog.c        **** 			outData += chunkSize;
 5397              		.loc 2 715 12 is_stmt 1
 5398 4d27 0FB745F2 		movzwl	-14(%rbp), %eax
 5399 4d2b 480145D0 		addq	%rax, -48(%rbp)
 716:prog.c        **** 			numBytes -= chunkSize;
 5400              		.loc 2 716 13
 5401 4d2f 0FB745F2 		movzwl	-14(%rbp), %eax
 5402 4d33 2945F8   		subl	%eax, -8(%rbp)
 5403              	.L289:
 708:prog.c        **** 			chunkSize = (uint16)((numBytes >= 64) ? 64 : numBytes);
 5404              		.loc 2 708 11
 5405 4d36 837DF800 		cmpl	$0, -8(%rbp)
 5406 4d3a 0F8547FF 		jne	.L294
 5406      FFFF
 5407 4d40 E9B50000 		jmp	.L288
 5407      00
 5408              	.L286:
 717:prog.c        **** 		}
 718:prog.c        **** 	} else {
 719:prog.c        **** 		fStatus = beginShift(handle, numBits, PROG_JTAG_NOTSENDING_ISRECEIVING, mode, error);
 5409              		.loc 2 719 13
 5410 4d45 0FB655F0 		movzbl	-16(%rbp), %edx
 5411 4d49 488B4DC8 		movq	-56(%rbp), %rcx
 5412 4d4d 8B75E4   		movl	-28(%rbp), %esi
 5413 4d50 488B45E8 		movq	-24(%rbp), %rax
 5414 4d54 4989C8   		movq	%rcx, %r8
 5415 4d57 89D1     		movl	%edx, %ecx
 5416 4d59 BA030000 		movl	$3, %edx
 5416      00
 5417 4d5e 4889C7   		movq	%rax, %rdi
 5418 4d61 E8A6B2FF 		call	beginShift
 5418      FF
 5419 4d66 8945FC   		movl	%eax, -4(%rbp)
 720:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "jtagShiftInOut()");
 5420              		.loc 2 720 3
 5421 4d69 837DFC00 		cmpl	$0, -4(%rbp)
 5422 4d6d 0F848000 		je	.L296
 5422      0000
 5423              		.loc 2 720 3 is_stmt 0 discriminator 1
 5424 4d73 488B45C8 		movq	-56(%rbp), %rax
 5425 4d77 488D1500 		leaq	.LC41(%rip), %rdx
 5425      000000
 5426 4d7e 4889D6   		movq	%rdx, %rsi
 5427 4d81 4889C7   		movq	%rax, %rdi
 5428 4d84 E8000000 		call	errPrefix@PLT
 5428      00
 5429 4d89 8B45FC   		movl	-4(%rbp), %eax
 5430 4d8c 8945F4   		movl	%eax, -12(%rbp)
 5431 4d8f EB69     		jmp	.L288
 5432              	.L300:
 721:prog.c        **** 		while ( numBytes ) {
 722:prog.c        **** 			chunkSize = (uint16)((numBytes >= 64) ? 64 : numBytes);
 5433              		.loc 2 722 16 is_stmt 1
 5434 4d91 837DF83F 		cmpl	$63, -8(%rbp)
 5435 4d95 7705     		ja	.L297
 5436              		.loc 2 722 16 is_stmt 0 discriminator 1
 5437 4d97 8B45F8   		movl	-8(%rbp), %eax
 5438 4d9a EB05     		jmp	.L298
 5439              	.L297:
 5440              		.loc 2 722 16 discriminator 2
 5441 4d9c B8400000 		movl	$64, %eax
 5441      00
 5442              	.L298:
 5443              		.loc 2 722 14 is_stmt 1 discriminator 4
 5444 4da1 668945F2 		movw	%ax, -14(%rbp)
 723:prog.c        **** 			fStatus = doReceive(handle, outData, chunkSize, error);
 5445              		.loc 2 723 14 discriminator 4
 5446 4da5 0FB755F2 		movzwl	-14(%rbp), %edx
 5447 4da9 488B4DC8 		movq	-56(%rbp), %rcx
 5448 4dad 488B75D0 		movq	-48(%rbp), %rsi
 5449 4db1 488B45E8 		movq	-24(%rbp), %rax
 5450 4db5 4889C7   		movq	%rax, %rdi
 5451 4db8 E88CB3FF 		call	doReceive
 5451      FF
 5452 4dbd 8945FC   		movl	%eax, -4(%rbp)
 724:prog.c        **** 			CHECK_STATUS(fStatus, fStatus, cleanup, "jtagShiftInOut()");
 5453              		.loc 2 724 4 discriminator 4
 5454 4dc0 837DFC00 		cmpl	$0, -4(%rbp)
 5455 4dc4 741E     		je	.L299
 5456              		.loc 2 724 4 is_stmt 0 discriminator 1
 5457 4dc6 488B45C8 		movq	-56(%rbp), %rax
 5458 4dca 488D1500 		leaq	.LC41(%rip), %rdx
 5458      000000
 5459 4dd1 4889D6   		movq	%rdx, %rsi
 5460 4dd4 4889C7   		movq	%rax, %rdi
 5461 4dd7 E8000000 		call	errPrefix@PLT
 5461      00
 5462 4ddc 8B45FC   		movl	-4(%rbp), %eax
 5463 4ddf 8945F4   		movl	%eax, -12(%rbp)
 5464 4de2 EB16     		jmp	.L288
 5465              	.L299:
 725:prog.c        **** 			outData += chunkSize;
 5466              		.loc 2 725 12 is_stmt 1
 5467 4de4 0FB745F2 		movzwl	-14(%rbp), %eax
 5468 4de8 480145D0 		addq	%rax, -48(%rbp)
 726:prog.c        **** 			numBytes -= chunkSize;
 5469              		.loc 2 726 13
 5470 4dec 0FB745F2 		movzwl	-14(%rbp), %eax
 5471 4df0 2945F8   		subl	%eax, -8(%rbp)
 5472              	.L296:
 721:prog.c        **** 			chunkSize = (uint16)((numBytes >= 64) ? 64 : numBytes);
 5473              		.loc 2 721 11
 5474 4df3 837DF800 		cmpl	$0, -8(%rbp)
 5475 4df7 7598     		jne	.L300
 727:prog.c        **** 		}
 728:prog.c        **** 	}
 729:prog.c        **** cleanup:
 5476              		.loc 2 729 1
 5477 4df9 90       		nop
 5478              	.L288:
 730:prog.c        **** 	return retVal;
 5479              		.loc 2 730 9
 5480 4dfa 8B45F4   		movl	-12(%rbp), %eax
 731:prog.c        **** }
 5481              		.loc 2 731 1
 5482 4dfd C9       		leave
 5483              		.cfi_def_cfa 7, 8
 5484 4dfe C3       		ret
 5485              		.cfi_endproc
 5486              	.LFE19:
 5488              		.globl	jtagShiftInOnly
 5490              	jtagShiftInOnly:
 5491              	.LFB20:
 732:prog.c        **** 
 733:prog.c        **** DLLEXPORT(FLStatus) jtagShiftInOnly(
 734:prog.c        **** 	struct FLContext *handle, uint32 numBits, const uint8 *inData, uint8 isLast,
 735:prog.c        **** 	const char **error)
 736:prog.c        **** {
 5492              		.loc 2 736 1
 5493              		.cfi_startproc
 5494 4dff F30F1EFA 		endbr64
 5495 4e03 55       		pushq	%rbp
 5496              		.cfi_def_cfa_offset 16
 5497              		.cfi_offset 6, -16
 5498 4e04 4889E5   		movq	%rsp, %rbp
 5499              		.cfi_def_cfa_register 6
 5500 4e07 4883EC30 		subq	$48, %rsp
 5501 4e0b 48897DE8 		movq	%rdi, -24(%rbp)
 5502 4e0f 8975E4   		movl	%esi, -28(%rbp)
 5503 4e12 488955D8 		movq	%rdx, -40(%rbp)
 5504 4e16 89C8     		movl	%ecx, %eax
 5505 4e18 4C8945D0 		movq	%r8, -48(%rbp)
 5506 4e1c 8845E0   		movb	%al, -32(%rbp)
 737:prog.c        **** 	FLStatus retVal = FL_SUCCESS, fStatus;
 5507              		.loc 2 737 11
 5508 4e1f C745F400 		movl	$0, -12(%rbp)
 5508      000000
 738:prog.c        **** 	uint32 numBytes = bitsToBytes(numBits);
 5509              		.loc 2 738 20
 5510 4e26 8B45E4   		movl	-28(%rbp), %eax
 5511 4e29 C1E803   		shrl	$3, %eax
 5512 4e2c 89C2     		movl	%eax, %edx
 5513 4e2e 8B45E4   		movl	-28(%rbp), %eax
 5514 4e31 83E007   		andl	$7, %eax
 5515 4e34 85C0     		testl	%eax, %eax
 5516 4e36 7407     		je	.L303
 5517              		.loc 2 738 20 is_stmt 0 discriminator 1
 5518 4e38 B8010000 		movl	$1, %eax
 5518      00
 5519 4e3d EB05     		jmp	.L304
 5520              	.L303:
 5521              		.loc 2 738 20 discriminator 2
 5522 4e3f B8000000 		movl	$0, %eax
 5522      00
 5523              	.L304:
 5524              		.loc 2 738 9 is_stmt 1 discriminator 4
 5525 4e44 01D0     		addl	%edx, %eax
 5526 4e46 8945F8   		movl	%eax, -8(%rbp)
 739:prog.c        **** 	uint16 chunkSize;
 740:prog.c        **** 	uint8 mode = 0x00;
 5527              		.loc 2 740 8 discriminator 4
 5528 4e49 C645F000 		movb	$0, -16(%rbp)
 741:prog.c        **** 	bool isSending = false;
 5529              		.loc 2 741 7 discriminator 4
 5530 4e4d C645F100 		movb	$0, -15(%rbp)
 742:prog.c        **** 	if ( inData == SHIFT_ONES ) {
 5531              		.loc 2 742 5 discriminator 4
 5532 4e51 48837DD8 		cmpq	$-1, -40(%rbp)
 5532      FF
 5533 4e56 7506     		jne	.L305
 743:prog.c        **** 		mode |= bmSENDONES;
 5534              		.loc 2 743 8
 5535 4e58 804DF002 		orb	$2, -16(%rbp)
 5536 4e5c EB0B     		jmp	.L306
 5537              	.L305:
 744:prog.c        **** 	} else if ( inData != SHIFT_ZEROS ) {
 5538              		.loc 2 744 12
 5539 4e5e 48837DD8 		cmpq	$0, -40(%rbp)
 5539      00
 5540 4e63 7404     		je	.L306
 745:prog.c        **** 		isSending = true;
 5541              		.loc 2 745 13
 5542 4e65 C645F101 		movb	$1, -15(%rbp)
 5543              	.L306:
 746:prog.c        **** 	}
 747:prog.c        **** 	if ( isLast ) {
 5544              		.loc 2 747 5
 5545 4e69 807DE000 		cmpb	$0, -32(%rbp)
 5546 4e6d 7404     		je	.L307
 748:prog.c        **** 		mode |= bmISLAST;
 5547              		.loc 2 748 8
 5548 4e6f 804DF001 		orb	$1, -16(%rbp)
 5549              	.L307:
 749:prog.c        **** 	}
 750:prog.c        **** 	if ( isSending ) {
 5550              		.loc 2 750 5
 5551 4e73 807DF100 		cmpb	$0, -15(%rbp)
 5552 4e77 0F84B900 		je	.L308
 5552      0000
 751:prog.c        **** 		fStatus = beginShift(handle, numBits, PROG_JTAG_ISSENDING_NOTRECEIVING, mode, error);
 5553              		.loc 2 751 13
 5554 4e7d 0FB655F0 		movzbl	-16(%rbp), %edx
 5555 4e81 488B4DD0 		movq	-48(%rbp), %rcx
 5556 4e85 8B75E4   		movl	-28(%rbp), %esi
 5557 4e88 488B45E8 		movq	-24(%rbp), %rax
 5558 4e8c 4989C8   		movq	%rcx, %r8
 5559 4e8f 89D1     		movl	%edx, %ecx
 5560 4e91 BA020000 		movl	$2, %edx
 5560      00
 5561 4e96 4889C7   		movq	%rax, %rdi
 5562 4e99 E86EB1FF 		call	beginShift
 5562      FF
 5563 4e9e 8945FC   		movl	%eax, -4(%rbp)
 752:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "jtagShiftInOut()");
 5564              		.loc 2 752 3
 5565 4ea1 837DFC00 		cmpl	$0, -4(%rbp)
 5566 4ea5 0F848300 		je	.L311
 5566      0000
 5567              		.loc 2 752 3 is_stmt 0 discriminator 1
 5568 4eab 488B45D0 		movq	-48(%rbp), %rax
 5569 4eaf 488D1500 		leaq	.LC41(%rip), %rdx
 5569      000000
 5570 4eb6 4889D6   		movq	%rdx, %rsi
 5571 4eb9 4889C7   		movq	%rax, %rdi
 5572 4ebc E8000000 		call	errPrefix@PLT
 5572      00
 5573 4ec1 8B45FC   		movl	-4(%rbp), %eax
 5574 4ec4 8945F4   		movl	%eax, -12(%rbp)
 5575 4ec7 E9B30000 		jmp	.L310
 5575      00
 5576              	.L315:
 753:prog.c        **** 		while ( numBytes ) {
 754:prog.c        **** 			chunkSize = (uint16)((numBytes >= 64) ? 64 : numBytes);
 5577              		.loc 2 754 16 is_stmt 1
 5578 4ecc 837DF83F 		cmpl	$63, -8(%rbp)
 5579 4ed0 7705     		ja	.L312
 5580              		.loc 2 754 16 is_stmt 0 discriminator 1
 5581 4ed2 8B45F8   		movl	-8(%rbp), %eax
 5582 4ed5 EB05     		jmp	.L313
 5583              	.L312:
 5584              		.loc 2 754 16 discriminator 2
 5585 4ed7 B8400000 		movl	$64, %eax
 5585      00
 5586              	.L313:
 5587              		.loc 2 754 14 is_stmt 1 discriminator 4
 5588 4edc 668945F2 		movw	%ax, -14(%rbp)
 755:prog.c        **** 			fStatus = doSend(handle, inData, chunkSize, error);
 5589              		.loc 2 755 14 discriminator 4
 5590 4ee0 0FB755F2 		movzwl	-14(%rbp), %edx
 5591 4ee4 488B4DD0 		movq	-48(%rbp), %rcx
 5592 4ee8 488B75D8 		movq	-40(%rbp), %rsi
 5593 4eec 488B45E8 		movq	-24(%rbp), %rax
 5594 4ef0 4889C7   		movq	%rax, %rdi
 5595 4ef3 E8CFB1FF 		call	doSend
 5595      FF
 5596 4ef8 8945FC   		movl	%eax, -4(%rbp)
 756:prog.c        **** 			CHECK_STATUS(fStatus, fStatus, cleanup, "jtagShiftInOut()");
 5597              		.loc 2 756 4 discriminator 4
 5598 4efb 837DFC00 		cmpl	$0, -4(%rbp)
 5599 4eff 741E     		je	.L314
 5600              		.loc 2 756 4 is_stmt 0 discriminator 1
 5601 4f01 488B45D0 		movq	-48(%rbp), %rax
 5602 4f05 488D1500 		leaq	.LC41(%rip), %rdx
 5602      000000
 5603 4f0c 4889D6   		movq	%rdx, %rsi
 5604 4f0f 4889C7   		movq	%rax, %rdi
 5605 4f12 E8000000 		call	errPrefix@PLT
 5605      00
 5606 4f17 8B45FC   		movl	-4(%rbp), %eax
 5607 4f1a 8945F4   		movl	%eax, -12(%rbp)
 5608 4f1d EB60     		jmp	.L310
 5609              	.L314:
 757:prog.c        **** 			inData += chunkSize;
 5610              		.loc 2 757 11 is_stmt 1
 5611 4f1f 0FB745F2 		movzwl	-14(%rbp), %eax
 5612 4f23 480145D8 		addq	%rax, -40(%rbp)
 758:prog.c        **** 			numBytes -= chunkSize;
 5613              		.loc 2 758 13
 5614 4f27 0FB745F2 		movzwl	-14(%rbp), %eax
 5615 4f2b 2945F8   		subl	%eax, -8(%rbp)
 5616              	.L311:
 753:prog.c        **** 			chunkSize = (uint16)((numBytes >= 64) ? 64 : numBytes);
 5617              		.loc 2 753 11
 5618 4f2e 837DF800 		cmpl	$0, -8(%rbp)
 5619 4f32 7598     		jne	.L315
 5620 4f34 EB49     		jmp	.L310
 5621              	.L308:
 759:prog.c        **** 		}
 760:prog.c        **** 	} else {
 761:prog.c        **** 		fStatus = beginShift(handle, numBits, PROG_JTAG_NOTSENDING_NOTRECEIVING, mode, error);
 5622              		.loc 2 761 13
 5623 4f36 0FB655F0 		movzbl	-16(%rbp), %edx
 5624 4f3a 488B4DD0 		movq	-48(%rbp), %rcx
 5625 4f3e 8B75E4   		movl	-28(%rbp), %esi
 5626 4f41 488B45E8 		movq	-24(%rbp), %rax
 5627 4f45 4989C8   		movq	%rcx, %r8
 5628 4f48 89D1     		movl	%edx, %ecx
 5629 4f4a BA040000 		movl	$4, %edx
 5629      00
 5630 4f4f 4889C7   		movq	%rax, %rdi
 5631 4f52 E8B5B0FF 		call	beginShift
 5631      FF
 5632 4f57 8945FC   		movl	%eax, -4(%rbp)
 762:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "jtagShiftInOut()");
 5633              		.loc 2 762 3
 5634 4f5a 837DFC00 		cmpl	$0, -4(%rbp)
 5635 4f5e 741E     		je	.L317
 5636              		.loc 2 762 3 is_stmt 0 discriminator 1
 5637 4f60 488B45D0 		movq	-48(%rbp), %rax
 5638 4f64 488D1500 		leaq	.LC41(%rip), %rdx
 5638      000000
 5639 4f6b 4889D6   		movq	%rdx, %rsi
 5640 4f6e 4889C7   		movq	%rax, %rdi
 5641 4f71 E8000000 		call	errPrefix@PLT
 5641      00
 5642 4f76 8B45FC   		movl	-4(%rbp), %eax
 5643 4f79 8945F4   		movl	%eax, -12(%rbp)
 5644 4f7c EB01     		jmp	.L310
 5645              	.L317:
 763:prog.c        **** 	}
 764:prog.c        **** cleanup:
 5646              		.loc 2 764 1 is_stmt 1
 5647 4f7e 90       		nop
 5648              	.L310:
 765:prog.c        **** 	return retVal;
 5649              		.loc 2 765 9
 5650 4f7f 8B45F4   		movl	-12(%rbp), %eax
 766:prog.c        **** }
 5651              		.loc 2 766 1
 5652 4f82 C9       		leave
 5653              		.cfi_def_cfa 7, 8
 5654 4f83 C3       		ret
 5655              		.cfi_endproc
 5656              	.LFE20:
 5658              		.section	.rodata
 5659              	.LC42:
 5660 07ce 6A746167 		.string	"jtagClockFSM()"
 5660      436C6F63 
 5660      6B46534D 
 5660      282900
 5661              		.text
 5662              		.globl	jtagClockFSM
 5664              	jtagClockFSM:
 5665              	.LFB21:
 767:prog.c        **** 
 768:prog.c        **** // Apply the supplied bit pattern to SS/TMS, to move the TAP to a specific state.
 769:prog.c        **** //
 770:prog.c        **** DLLEXPORT(FLStatus) jtagClockFSM(
 771:prog.c        **** 	struct FLContext *handle, uint32 bitPattern, uint8 transitionCount, const char **error)
 772:prog.c        **** {
 5666              		.loc 2 772 1
 5667              		.cfi_startproc
 5668 4f84 F30F1EFA 		endbr64
 5669 4f88 55       		pushq	%rbp
 5670              		.cfi_def_cfa_offset 16
 5671              		.cfi_offset 6, -16
 5672 4f89 4889E5   		movq	%rsp, %rbp
 5673              		.cfi_def_cfa_register 6
 5674 4f8c 4883EC40 		subq	$64, %rsp
 5675 4f90 48897DD8 		movq	%rdi, -40(%rbp)
 5676 4f94 8975D4   		movl	%esi, -44(%rbp)
 5677 4f97 89D0     		movl	%edx, %eax
 5678 4f99 48894DC8 		movq	%rcx, -56(%rbp)
 5679 4f9d 8845D0   		movb	%al, -48(%rbp)
 5680              		.loc 2 772 1
 5681 4fa0 64488B04 		movq	%fs:40, %rax
 5681      25280000 
 5681      00
 5682 4fa9 488945F8 		movq	%rax, -8(%rbp)
 5683 4fad 31C0     		xorl	%eax, %eax
 773:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
 5684              		.loc 2 773 11
 5685 4faf C745EC00 		movl	$0, -20(%rbp)
 5685      000000
 774:prog.c        **** 	USBStatus uStatus;
 775:prog.c        **** 	union {
 776:prog.c        **** 		uint32 u32;
 777:prog.c        **** 		uint8 bytes[4];
 778:prog.c        **** 	} lePattern;
 779:prog.c        **** 	lePattern.u32 = littleEndian32(bitPattern);
 5686              		.loc 2 779 18
 5687 4fb6 8B45D4   		movl	-44(%rbp), %eax
 5688 4fb9 89C7     		movl	%eax, %edi
 5689 4fbb E840B0FF 		call	littleEndian32
 5689      FF
 5690              		.loc 2 779 16
 5691 4fc0 8945F4   		movl	%eax, -12(%rbp)
 780:prog.c        **** 	uStatus = usbControlWrite(
 5692              		.loc 2 780 12
 5693 4fc3 0FB655D0 		movzbl	-48(%rbp), %edx
 5694 4fc7 488B45D8 		movq	-40(%rbp), %rax
 5695 4fcb 488B00   		movq	(%rax), %rax
 5696 4fce 488D4DF4 		leaq	-12(%rbp), %rcx
 5697 4fd2 FF75C8   		pushq	-56(%rbp)
 5698 4fd5 68881300 		pushq	$5000
 5698      00
 5699 4fda 41B90400 		movl	$4, %r9d
 5699      0000
 5700 4fe0 4989C8   		movq	%rcx, %r8
 5701 4fe3 B9000000 		movl	$0, %ecx
 5701      00
 5702 4fe8 BE820000 		movl	$130, %esi
 5702      00
 5703 4fed 4889C7   		movq	%rax, %rdi
 5704 4ff0 E8000000 		call	usbControlWrite@PLT
 5704      00
 5705 4ff5 4883C410 		addq	$16, %rsp
 5706 4ff9 8945F0   		movl	%eax, -16(%rbp)
 781:prog.c        **** 		handle->device,
 782:prog.c        **** 		CMD_JTAG_CLOCK_FSM,       // bRequest
 783:prog.c        **** 		(uint16)transitionCount,  // wValue
 784:prog.c        **** 		0x0000,                   // wIndex
 785:prog.c        **** 		lePattern.bytes,          // bit pattern
 786:prog.c        **** 		4,                        // wLength
 787:prog.c        **** 		5000,                     // timeout (ms)
 788:prog.c        **** 		error
 789:prog.c        **** 	);
 790:prog.c        **** 	CHECK_STATUS(uStatus, FL_PROG_JTAG_FSM, cleanup, "jtagClockFSM()");
 5707              		.loc 2 790 2
 5708 4ffc 837DF000 		cmpl	$0, -16(%rbp)
 5709 5000 741F     		je	.L322
 5710              		.loc 2 790 2 is_stmt 0 discriminator 1
 5711 5002 488B45C8 		movq	-56(%rbp), %rax
 5712 5006 488D1500 		leaq	.LC42(%rip), %rdx
 5712      000000
 5713 500d 4889D6   		movq	%rdx, %rsi
 5714 5010 4889C7   		movq	%rax, %rdi
 5715 5013 E8000000 		call	errPrefix@PLT
 5715      00
 5716 5018 C745EC10 		movl	$16, -20(%rbp)
 5716      000000
 5717 501f EB01     		jmp	.L319
 5718              	.L322:
 791:prog.c        **** cleanup:
 5719              		.loc 2 791 1 is_stmt 1
 5720 5021 90       		nop
 5721              	.L319:
 792:prog.c        **** 	return retVal;
 5722              		.loc 2 792 9
 5723 5022 8B45EC   		movl	-20(%rbp), %eax
 793:prog.c        **** }
 5724              		.loc 2 793 1
 5725 5025 488B55F8 		movq	-8(%rbp), %rdx
 5726 5029 64482B14 		subq	%fs:40, %rdx
 5726      25280000 
 5726      00
 5727 5032 7405     		je	.L321
 5728 5034 E8000000 		call	__stack_chk_fail@PLT
 5728      00
 5729              	.L321:
 5730 5039 C9       		leave
 5731              		.cfi_def_cfa 7, 8
 5732 503a C3       		ret
 5733              		.cfi_endproc
 5734              	.LFE21:
 5736              		.section	.rodata
 5737              	.LC43:
 5738 07dd 6A746167 		.string	"jtagClocks()"
 5738      436C6F63 
 5738      6B732829 
 5738      00
 5739              		.text
 5740              		.globl	jtagClocks
 5742              	jtagClocks:
 5743              	.LFB22:
 794:prog.c        **** 
 795:prog.c        **** // Cycle the SCK/TCK line for the given number of times.
 796:prog.c        **** //
 797:prog.c        **** DLLEXPORT(FLStatus) jtagClocks(struct FLContext *handle, uint32 numClocks, const char **error) {
 5744              		.loc 2 797 96
 5745              		.cfi_startproc
 5746 503b F30F1EFA 		endbr64
 5747 503f 55       		pushq	%rbp
 5748              		.cfi_def_cfa_offset 16
 5749              		.cfi_offset 6, -16
 5750 5040 4889E5   		movq	%rsp, %rbp
 5751              		.cfi_def_cfa_register 6
 5752 5043 4883EC30 		subq	$48, %rsp
 5753 5047 48897DE8 		movq	%rdi, -24(%rbp)
 5754 504b 8975E4   		movl	%esi, -28(%rbp)
 5755 504e 488955D8 		movq	%rdx, -40(%rbp)
 798:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
 5756              		.loc 2 798 11
 5757 5052 C745F800 		movl	$0, -8(%rbp)
 5757      000000
 799:prog.c        **** 	USBStatus uStatus = usbControlWrite(
 800:prog.c        **** 		handle->device,
 801:prog.c        **** 		CMD_JTAG_CLOCK,                // bRequest
 802:prog.c        **** 		(uint16)(numClocks & 0xFFFF),  // wValue
 803:prog.c        **** 		(uint16)(numClocks >> 16),     // wIndex
 5758              		.loc 2 803 22
 5759 5059 8B45E4   		movl	-28(%rbp), %eax
 5760 505c C1E810   		shrl	$16, %eax
 799:prog.c        **** 	USBStatus uStatus = usbControlWrite(
 5761              		.loc 2 799 22
 5762 505f 0FB7C8   		movzwl	%ax, %ecx
 802:prog.c        **** 		(uint16)(numClocks >> 16),     // wIndex
 5763              		.loc 2 802 3
 5764 5062 8B45E4   		movl	-28(%rbp), %eax
 799:prog.c        **** 	USBStatus uStatus = usbControlWrite(
 5765              		.loc 2 799 22
 5766 5065 0FB7D0   		movzwl	%ax, %edx
 5767 5068 488B45E8 		movq	-24(%rbp), %rax
 5768 506c 488B00   		movq	(%rax), %rax
 5769 506f FF75D8   		pushq	-40(%rbp)
 5770 5072 6860EA00 		pushq	$60000
 5770      00
 5771 5077 41B90000 		movl	$0, %r9d
 5771      0000
 5772 507d 41B80000 		movl	$0, %r8d
 5772      0000
 5773 5083 BE830000 		movl	$131, %esi
 5773      00
 5774 5088 4889C7   		movq	%rax, %rdi
 5775 508b E8000000 		call	usbControlWrite@PLT
 5775      00
 5776 5090 4883C410 		addq	$16, %rsp
 5777 5094 8945FC   		movl	%eax, -4(%rbp)
 804:prog.c        **** 		NULL,                          // no data
 805:prog.c        **** 		0,                             // wLength
 806:prog.c        **** 		60000,                         // timeout (ms)
 807:prog.c        **** 		error
 808:prog.c        **** 	);
 809:prog.c        **** 	CHECK_STATUS(uStatus, FL_PROG_JTAG_CLOCKS, cleanup, "jtagClocks()");
 5778              		.loc 2 809 2
 5779 5097 837DFC00 		cmpl	$0, -4(%rbp)
 5780 509b 741F     		je	.L326
 5781              		.loc 2 809 2 is_stmt 0 discriminator 1
 5782 509d 488B45D8 		movq	-40(%rbp), %rax
 5783 50a1 488D1500 		leaq	.LC43(%rip), %rdx
 5783      000000
 5784 50a8 4889D6   		movq	%rdx, %rsi
 5785 50ab 4889C7   		movq	%rax, %rdi
 5786 50ae E8000000 		call	errPrefix@PLT
 5786      00
 5787 50b3 C745F811 		movl	$17, -8(%rbp)
 5787      000000
 5788 50ba EB01     		jmp	.L324
 5789              	.L326:
 810:prog.c        **** cleanup:
 5790              		.loc 2 810 1 is_stmt 1
 5791 50bc 90       		nop
 5792              	.L324:
 811:prog.c        **** 	return retVal;
 5793              		.loc 2 811 9
 5794 50bd 8B45F8   		movl	-8(%rbp), %eax
 812:prog.c        **** }
 5795              		.loc 2 812 1
 5796 50c0 C9       		leave
 5797              		.cfi_def_cfa 7, 8
 5798 50c1 C3       		ret
 5799              		.cfi_endproc
 5800              	.LFE22:
 5802              		.section	.rodata
 5803              	.LC44:
 5804 07ea 6A746167 		.string	"jtagScanChain()"
 5804      5363616E 
 5804      43686169 
 5804      6E282900 
 5805              		.text
 5806              		.globl	jtagScanChain
 5808              	jtagScanChain:
 5809              	.LFB23:
 813:prog.c        **** 
 814:prog.c        **** // Scan the JTAG chain and return an array of IDCODEs
 815:prog.c        **** //
 816:prog.c        **** DLLEXPORT(FLStatus) jtagScanChain(
 817:prog.c        **** 	struct FLContext *handle, const char *portConfig,
 818:prog.c        **** 	uint32 *numDevices, uint32 *deviceArray, uint32 arraySize,
 819:prog.c        **** 	const char **error)
 820:prog.c        **** {
 5810              		.loc 2 820 1
 5811              		.cfi_startproc
 5812 50c2 F30F1EFA 		endbr64
 5813 50c6 55       		pushq	%rbp
 5814              		.cfi_def_cfa_offset 16
 5815              		.cfi_offset 6, -16
 5816 50c7 4889E5   		movq	%rsp, %rbp
 5817              		.cfi_def_cfa_register 6
 5818 50ca 53       		pushq	%rbx
 5819 50cb 4883EC58 		subq	$88, %rsp
 5820              		.cfi_offset 3, -24
 5821 50cf 48897DC8 		movq	%rdi, -56(%rbp)
 5822 50d3 488975C0 		movq	%rsi, -64(%rbp)
 5823 50d7 488955B8 		movq	%rdx, -72(%rbp)
 5824 50db 48894DB0 		movq	%rcx, -80(%rbp)
 5825 50df 448945AC 		movl	%r8d, -84(%rbp)
 5826 50e3 4C894DA0 		movq	%r9, -96(%rbp)
 5827              		.loc 2 820 1
 5828 50e7 64488B04 		movq	%fs:40, %rax
 5828      25280000 
 5828      00
 5829 50f0 488945E8 		movq	%rax, -24(%rbp)
 5830 50f4 31C0     		xorl	%eax, %eax
 821:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
 5831              		.loc 2 821 11
 5832 50f6 C745D800 		movl	$0, -40(%rbp)
 5832      000000
 822:prog.c        **** 	FLStatus fStatus;
 823:prog.c        **** 	uint32 i = 0;
 5833              		.loc 2 823 9
 5834 50fd C745DC00 		movl	$0, -36(%rbp)
 5834      000000
 824:prog.c        **** 	union {
 825:prog.c        **** 		uint32 idCode;
 826:prog.c        **** 		uint8 bytes[4];
 827:prog.c        **** 	} u;
 828:prog.c        **** 	fStatus = progOpenInternal(handle, portConfig, portConfig, error);
 5835              		.loc 2 828 12
 5836 5104 488B4DA0 		movq	-96(%rbp), %rcx
 5837 5108 488B55C0 		movq	-64(%rbp), %rdx
 5838 510c 488B75C0 		movq	-64(%rbp), %rsi
 5839 5110 488B45C8 		movq	-56(%rbp), %rax
 5840 5114 4889C7   		movq	%rax, %rdi
 5841 5117 E870E8FF 		call	progOpenInternal
 5841      FF
 5842 511c 8945E0   		movl	%eax, -32(%rbp)
 829:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "jtagScanChain()");
 5843              		.loc 2 829 2
 5844 511f 837DE000 		cmpl	$0, -32(%rbp)
 5845 5123 7421     		je	.L328
 5846              		.loc 2 829 2 is_stmt 0 discriminator 1
 5847 5125 488B45A0 		movq	-96(%rbp), %rax
 5848 5129 488D1500 		leaq	.LC44(%rip), %rdx
 5848      000000
 5849 5130 4889D6   		movq	%rdx, %rsi
 5850 5133 4889C7   		movq	%rax, %rdi
 5851 5136 E8000000 		call	errPrefix@PLT
 5851      00
 5852 513b 8B45E0   		movl	-32(%rbp), %eax
 5853 513e 8945D8   		movl	%eax, -40(%rbp)
 5854 5141 E9590100 		jmp	.L329
 5854      00
 5855              	.L328:
 830:prog.c        **** 
 831:prog.c        **** 	i = 0;
 5856              		.loc 2 831 4 is_stmt 1
 5857 5146 C745DC00 		movl	$0, -36(%rbp)
 5857      000000
 832:prog.c        **** 	fStatus = jtagClockFSM(handle, 0x0000005F, 9, error);  // Reset TAP, goto Shift-DR
 5858              		.loc 2 832 12
 5859 514d 488B55A0 		movq	-96(%rbp), %rdx
 5860 5151 488B45C8 		movq	-56(%rbp), %rax
 5861 5155 4889D1   		movq	%rdx, %rcx
 5862 5158 BA090000 		movl	$9, %edx
 5862      00
 5863 515d BE5F0000 		movl	$95, %esi
 5863      00
 5864 5162 4889C7   		movq	%rax, %rdi
 5865 5165 E8000000 		call	jtagClockFSM@PLT
 5865      00
 5866 516a 8945E0   		movl	%eax, -32(%rbp)
 833:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "jtagScanChain()");
 5867              		.loc 2 833 2
 5868 516d 837DE000 		cmpl	$0, -32(%rbp)
 5869 5171 7421     		je	.L330
 5870              		.loc 2 833 2 is_stmt 0 discriminator 1
 5871 5173 488B45A0 		movq	-96(%rbp), %rax
 5872 5177 488D1500 		leaq	.LC44(%rip), %rdx
 5872      000000
 5873 517e 4889D6   		movq	%rdx, %rsi
 5874 5181 4889C7   		movq	%rax, %rdi
 5875 5184 E8000000 		call	errPrefix@PLT
 5875      00
 5876 5189 8B45E0   		movl	-32(%rbp), %eax
 5877 518c 8945D8   		movl	%eax, -40(%rbp)
 5878 518f E90B0100 		jmp	.L329
 5878      00
 5879              	.L330:
 834:prog.c        **** 	for ( ; ; ) {
 835:prog.c        **** 		fStatus = jtagShiftInOut(handle, 32, SHIFT_ZEROS, u.bytes, false, error);
 5880              		.loc 2 835 13 is_stmt 1
 5881 5194 488B4DA0 		movq	-96(%rbp), %rcx
 5882 5198 488D55E4 		leaq	-28(%rbp), %rdx
 5883 519c 488B45C8 		movq	-56(%rbp), %rax
 5884 51a0 4989C9   		movq	%rcx, %r9
 5885 51a3 41B80000 		movl	$0, %r8d
 5885      0000
 5886 51a9 4889D1   		movq	%rdx, %rcx
 5887 51ac BA000000 		movl	$0, %edx
 5887      00
 5888 51b1 BE200000 		movl	$32, %esi
 5888      00
 5889 51b6 4889C7   		movq	%rax, %rdi
 5890 51b9 E8000000 		call	jtagShiftInOut@PLT
 5890      00
 5891 51be 8945E0   		movl	%eax, -32(%rbp)
 836:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "jtagScanChain()");
 5892              		.loc 2 836 3
 5893 51c1 837DE000 		cmpl	$0, -32(%rbp)
 5894 51c5 7421     		je	.L331
 5895              		.loc 2 836 3 is_stmt 0 discriminator 1
 5896 51c7 488B45A0 		movq	-96(%rbp), %rax
 5897 51cb 488D1500 		leaq	.LC44(%rip), %rdx
 5897      000000
 5898 51d2 4889D6   		movq	%rdx, %rsi
 5899 51d5 4889C7   		movq	%rax, %rdi
 5900 51d8 E8000000 		call	errPrefix@PLT
 5900      00
 5901 51dd 8B45E0   		movl	-32(%rbp), %eax
 5902 51e0 8945D8   		movl	%eax, -40(%rbp)
 5903 51e3 E9B70000 		jmp	.L329
 5903      00
 5904              	.L331:
 837:prog.c        **** 		if ( u.idCode == 0x00000000 || u.idCode == U32MAX ) {
 5905              		.loc 2 837 9 is_stmt 1
 5906 51e8 8B45E4   		movl	-28(%rbp), %eax
 5907              		.loc 2 837 6
 5908 51eb 85C0     		testl	%eax, %eax
 5909 51ed 743F     		je	.L332
 5910              		.loc 2 837 35 discriminator 1
 5911 51ef 8B45E4   		movl	-28(%rbp), %eax
 5912              		.loc 2 837 31 discriminator 1
 5913 51f2 83F8FF   		cmpl	$-1, %eax
 5914 51f5 7437     		je	.L332
 838:prog.c        **** 			break;
 839:prog.c        **** 		}
 840:prog.c        **** 		if ( deviceArray && i < arraySize ) {
 5915              		.loc 2 840 6
 5916 51f7 48837DB0 		cmpq	$0, -80(%rbp)
 5916      00
 5917 51fc 7427     		je	.L333
 5918              		.loc 2 840 20 discriminator 1
 5919 51fe 8B45DC   		movl	-36(%rbp), %eax
 5920 5201 3B45AC   		cmpl	-84(%rbp), %eax
 5921 5204 731F     		jnb	.L333
 841:prog.c        **** 			deviceArray[i] = littleEndian32(u.idCode);
 5922              		.loc 2 841 21
 5923 5206 8B45E4   		movl	-28(%rbp), %eax
 5924              		.loc 2 841 15
 5925 5209 8B55DC   		movl	-36(%rbp), %edx
 5926 520c 488D0C95 		leaq	0(,%rdx,4), %rcx
 5926      00000000 
 5927 5214 488B55B0 		movq	-80(%rbp), %rdx
 5928 5218 488D1C11 		leaq	(%rcx,%rdx), %rbx
 5929              		.loc 2 841 21
 5930 521c 89C7     		movl	%eax, %edi
 5931 521e E8DDADFF 		call	littleEndian32
 5931      FF
 5932              		.loc 2 841 19
 5933 5223 8903     		movl	%eax, (%rbx)
 5934              	.L333:
 842:prog.c        **** 		}
 843:prog.c        **** 		i++;
 5935              		.loc 2 843 4
 5936 5225 8345DC01 		addl	$1, -36(%rbp)
 835:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "jtagScanChain()");
 5937              		.loc 2 835 11
 5938 5229 E966FFFF 		jmp	.L330
 5938      FF
 5939              	.L332:
 844:prog.c        **** 	}
 845:prog.c        **** 	if ( deviceArray && i ) {
 5940              		.loc 2 845 5
 5941 522e 48837DB0 		cmpq	$0, -80(%rbp)
 5941      00
 5942 5233 741F     		je	.L334
 5943              		.loc 2 845 19 discriminator 1
 5944 5235 837DDC00 		cmpl	$0, -36(%rbp)
 5945 5239 7419     		je	.L334
 846:prog.c        **** 		// The IDCODEs we have are in reverse order, so swap them to get the correct chain order.
 847:prog.c        **** 		swap(deviceArray, (i > arraySize) ? arraySize : i);
 5946              		.loc 2 847 3
 5947 523b 8B55DC   		movl	-36(%rbp), %edx
 5948 523e 8B45AC   		movl	-84(%rbp), %eax
 5949 5241 39C2     		cmpl	%eax, %edx
 5950 5243 0F47D0   		cmova	%eax, %edx
 5951 5246 488B45B0 		movq	-80(%rbp), %rax
 5952 524a 89D6     		movl	%edx, %esi
 5953 524c 4889C7   		movq	%rax, %rdi
 5954 524f E831F7FF 		call	swap
 5954      FF
 5955              	.L334:
 848:prog.c        **** 	}
 849:prog.c        **** 	if ( numDevices ) {
 5956              		.loc 2 849 5
 5957 5254 48837DB8 		cmpq	$0, -72(%rbp)
 5957      00
 5958 5259 7409     		je	.L335
 850:prog.c        **** 		*numDevices = i;
 5959              		.loc 2 850 15
 5960 525b 488B45B8 		movq	-72(%rbp), %rax
 5961 525f 8B55DC   		movl	-36(%rbp), %edx
 5962 5262 8910     		movl	%edx, (%rax)
 5963              	.L335:
 851:prog.c        **** 	}
 852:prog.c        **** 
 853:prog.c        **** 	fStatus = progClose(handle, error);
 5964              		.loc 2 853 12
 5965 5264 488B55A0 		movq	-96(%rbp), %rdx
 5966 5268 488B45C8 		movq	-56(%rbp), %rax
 5967 526c 4889D6   		movq	%rdx, %rsi
 5968 526f 4889C7   		movq	%rax, %rdi
 5969 5272 E8000000 		call	progClose@PLT
 5969      00
 5970 5277 8945E0   		movl	%eax, -32(%rbp)
 854:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "jtagScanChain()");
 5971              		.loc 2 854 2
 5972 527a 837DE000 		cmpl	$0, -32(%rbp)
 5973 527e 741E     		je	.L338
 5974              		.loc 2 854 2 is_stmt 0 discriminator 1
 5975 5280 488B45A0 		movq	-96(%rbp), %rax
 5976 5284 488D1500 		leaq	.LC44(%rip), %rdx
 5976      000000
 5977 528b 4889D6   		movq	%rdx, %rsi
 5978 528e 4889C7   		movq	%rax, %rdi
 5979 5291 E8000000 		call	errPrefix@PLT
 5979      00
 5980 5296 8B45E0   		movl	-32(%rbp), %eax
 5981 5299 8945D8   		movl	%eax, -40(%rbp)
 5982 529c EB01     		jmp	.L329
 5983              	.L338:
 855:prog.c        **** 
 856:prog.c        **** cleanup:
 5984              		.loc 2 856 1 is_stmt 1
 5985 529e 90       		nop
 5986              	.L329:
 857:prog.c        **** 	return retVal;
 5987              		.loc 2 857 9
 5988 529f 8B45D8   		movl	-40(%rbp), %eax
 858:prog.c        **** }
 5989              		.loc 2 858 1
 5990 52a2 488B55E8 		movq	-24(%rbp), %rdx
 5991 52a6 64482B14 		subq	%fs:40, %rdx
 5991      25280000 
 5991      00
 5992 52af 7405     		je	.L337
 5993 52b1 E8000000 		call	__stack_chk_fail@PLT
 5993      00
 5994              	.L337:
 5995 52b6 488B5DF8 		movq	-8(%rbp), %rbx
 5996 52ba C9       		leave
 5997              		.cfi_def_cfa 7, 8
 5998 52bb C3       		ret
 5999              		.cfi_endproc
 6000              	.LFE23:
 6002              		.section	.rodata
 6003 07fa 00000000 		.align 8
 6003      0000
 6004              	.LC45:
 6005 0800 666C5072 		.string	"flProgram(): Missing Xilinx algorithm code"
 6005      6F677261 
 6005      6D28293A 
 6005      204D6973 
 6005      73696E67 
 6006 082b 00000000 		.align 8
 6006      00
 6007              	.LC46:
 6008 0830 666C5072 		.string	"flProgram(): '%c' is not a valid Xilinx algorithm code"
 6008      6F677261 
 6008      6D28293A 
 6008      20272563 
 6008      27206973 
 6009 0867 00       		.align 8
 6010              	.LC47:
 6011 0868 666C5072 		.string	"flProgram(): Missing Altera algorithm code"
 6011      6F677261 
 6011      6D28293A 
 6011      204D6973 
 6011      73696E67 
 6012 0893 00000000 		.align 8
 6012      00
 6013              	.LC48:
 6014 0898 666C5072 		.string	"flProgram(): '%c' is not a valid Altera algorithm code"
 6014      6F677261 
 6014      6D28293A 
 6014      20272563 
 6014      27206973 
 6015 08cf 00       		.align 8
 6016              	.LC49:
 6017 08d0 666C5072 		.string	"flProgram(): Missing algorithm vendor code"
 6017      6F677261 
 6017      6D28293A 
 6017      204D6973 
 6017      73696E67 
 6018 08fb 00000000 		.align 8
 6018      00
 6019              	.LC50:
 6020 0900 666C5072 		.string	"flProgram(): '%c' is not a valid algorithm vendor code"
 6020      6F677261 
 6020      6D28293A 
 6020      20272563 
 6020      27206973 
 6021              		.text
 6022              		.globl	flProgramBlob
 6024              	flProgramBlob:
 6025              	.LFB24:
 859:prog.c        **** 
 860:prog.c        **** // Programs a device using in-memory configuration information
 861:prog.c        **** //
 862:prog.c        **** DLLEXPORT(FLStatus) flProgramBlob(
 863:prog.c        **** 	struct FLContext *handle, const char *portConfig, uint32 blobLength, const uint8 *blobData,
 864:prog.c        **** 	const char **error)
 865:prog.c        **** {
 6026              		.loc 2 865 1
 6027              		.cfi_startproc
 6028 52bc F30F1EFA 		endbr64
 6029 52c0 55       		pushq	%rbp
 6030              		.cfi_def_cfa_offset 16
 6031              		.cfi_offset 6, -16
 6032 52c1 4889E5   		movq	%rsp, %rbp
 6033              		.cfi_def_cfa_register 6
 6034 52c4 4883EC40 		subq	$64, %rsp
 6035 52c8 48897DE8 		movq	%rdi, -24(%rbp)
 6036 52cc 488975E0 		movq	%rsi, -32(%rbp)
 6037 52d0 8955DC   		movl	%edx, -36(%rbp)
 6038 52d3 48894DD0 		movq	%rcx, -48(%rbp)
 6039 52d7 4C8945C8 		movq	%r8, -56(%rbp)
 866:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
 6040              		.loc 2 866 11
 6041 52db C745FC00 		movl	$0, -4(%rbp)
 6041      000000
 867:prog.c        **** 	const char algoVendor = portConfig[0];
 6042              		.loc 2 867 13
 6043 52e2 488B45E0 		movq	-32(%rbp), %rax
 6044 52e6 0FB600   		movzbl	(%rax), %eax
 6045 52e9 8845F9   		movb	%al, -7(%rbp)
 868:prog.c        **** 	if ( algoVendor == 'X' ) {
 6046              		.loc 2 868 5
 6047 52ec 807DF958 		cmpb	$88, -7(%rbp)
 6048 52f0 0F85C300 		jne	.L340
 6048      0000
 6049              	.LBB4:
 869:prog.c        **** 		// This is a Xilinx algorithm
 870:prog.c        **** 		const char algoType = portConfig[1];
 6050              		.loc 2 870 35
 6051 52f6 488B45E0 		movq	-32(%rbp), %rax
 6052 52fa 4883C001 		addq	$1, %rax
 6053              		.loc 2 870 14
 6054 52fe 0FB600   		movzbl	(%rax), %eax
 6055 5301 8845FB   		movb	%al, -5(%rbp)
 871:prog.c        **** 		if ( algoType == 'P' ) {
 6056              		.loc 2 871 6
 6057 5304 807DFB50 		cmpb	$80, -5(%rbp)
 6058 5308 752B     		jne	.L341
 872:prog.c        **** 			// This is Xilinx Slave Parallel ("SelectMAP")
 873:prog.c        **** 			return xProgram(handle, PROG_PARALLEL, portConfig, blobData, blobLength, error);
 6059              		.loc 2 873 11
 6060 530a 488B7DC8 		movq	-56(%rbp), %rdi
 6061 530e 8B75DC   		movl	-36(%rbp), %esi
 6062 5311 488B4DD0 		movq	-48(%rbp), %rcx
 6063 5315 488B55E0 		movq	-32(%rbp), %rdx
 6064 5319 488B45E8 		movq	-24(%rbp), %rax
 6065 531d 4989F9   		movq	%rdi, %r9
 6066 5320 4189F0   		movl	%esi, %r8d
 6067 5323 BE050000 		movl	$5, %esi
 6067      00
 6068 5328 4889C7   		movq	%rax, %rdi
 6069 532b E823B7FF 		call	xProgram
 6069      FF
 6070 5330 E9830100 		jmp	.L342
 6070      00
 6071              	.L341:
 874:prog.c        **** 		} else if ( algoType == 'S' ) {
 6072              		.loc 2 874 13
 6073 5335 807DFB53 		cmpb	$83, -5(%rbp)
 6074 5339 752B     		jne	.L343
 875:prog.c        **** 			// This is Xilinx Slave Serial
 876:prog.c        **** 			return xProgram(handle, PROG_SPI_SEND, portConfig, blobData, blobLength, error);
 6075              		.loc 2 876 11
 6076 533b 488B7DC8 		movq	-56(%rbp), %rdi
 6077 533f 8B75DC   		movl	-36(%rbp), %esi
 6078 5342 488B4DD0 		movq	-48(%rbp), %rcx
 6079 5346 488B55E0 		movq	-32(%rbp), %rdx
 6080 534a 488B45E8 		movq	-24(%rbp), %rax
 6081 534e 4989F9   		movq	%rdi, %r9
 6082 5351 4189F0   		movl	%esi, %r8d
 6083 5354 BE060000 		movl	$6, %esi
 6083      00
 6084 5359 4889C7   		movq	%rax, %rdi
 6085 535c E8F2B6FF 		call	xProgram
 6085      FF
 6086 5361 E9520100 		jmp	.L342
 6086      00
 6087              	.L343:
 877:prog.c        **** 		} else if ( algoType == '\0' ) {
 6088              		.loc 2 877 13
 6089 5366 807DFB00 		cmpb	$0, -5(%rbp)
 6090 536a 7522     		jne	.L344
 878:prog.c        **** 			CHECK_STATUS(true, FL_CONF_FORMAT, cleanup, "flProgram(): Missing Xilinx algorithm code");
 6091              		.loc 2 878 4 discriminator 1
 6092 536c 488B45C8 		movq	-56(%rbp), %rax
 6093 5370 488D1500 		leaq	.LC45(%rip), %rdx
 6093      000000
 6094 5377 4889D6   		movq	%rdx, %rsi
 6095 537a 4889C7   		movq	%rax, %rdi
 6096 537d E8000000 		call	errPrefix@PLT
 6096      00
 6097 5382 C745FC0B 		movl	$11, -4(%rbp)
 6097      000000
 6098 5389 E9270100 		jmp	.L345
 6098      00
 6099              	.L344:
 879:prog.c        **** 		} else {
 880:prog.c        **** 			CHECK_STATUS(
 6100              		.loc 2 880 4 discriminator 1
 6101 538e 0FBE55FB 		movsbl	-5(%rbp), %edx
 6102 5392 488B45C8 		movq	-56(%rbp), %rax
 6103 5396 488D0D00 		leaq	.LC46(%rip), %rcx
 6103      000000
 6104 539d 4889CE   		movq	%rcx, %rsi
 6105 53a0 4889C7   		movq	%rax, %rdi
 6106 53a3 B8000000 		movl	$0, %eax
 6106      00
 6107 53a8 E8000000 		call	errRender@PLT
 6107      00
 6108 53ad C745FC0B 		movl	$11, -4(%rbp)
 6108      000000
 6109 53b4 E9FC0000 		jmp	.L345
 6109      00
 6110              	.L340:
 6111              	.LBE4:
 881:prog.c        **** 				true, FL_CONF_FORMAT, cleanup,
 882:prog.c        **** 				"flProgram(): '%c' is not a valid Xilinx algorithm code", algoType);
 883:prog.c        **** 		}
 884:prog.c        **** 	} else if ( algoVendor == 'A' ) {
 6112              		.loc 2 884 12
 6113 53b9 807DF941 		cmpb	$65, -7(%rbp)
 6114 53bd 0F858700 		jne	.L346
 6114      0000
 6115              	.LBB5:
 885:prog.c        **** 		// This is an Altera algorithm
 886:prog.c        **** 		const char algoType = portConfig[1];
 6116              		.loc 2 886 35
 6117 53c3 488B45E0 		movq	-32(%rbp), %rax
 6118 53c7 4883C001 		addq	$1, %rax
 6119              		.loc 2 886 14
 6120 53cb 0FB600   		movzbl	(%rax), %eax
 6121 53ce 8845FA   		movb	%al, -6(%rbp)
 887:prog.c        **** 		if ( algoType == 'S' ) {
 6122              		.loc 2 887 6
 6123 53d1 807DFA53 		cmpb	$83, -6(%rbp)
 6124 53d5 7523     		jne	.L347
 888:prog.c        **** 			// This is Altera Passive Serial
 889:prog.c        **** 			return aProgram(handle, portConfig, blobData, blobLength, error);
 6125              		.loc 2 889 11
 6126 53d7 488B7DC8 		movq	-56(%rbp), %rdi
 6127 53db 8B4DDC   		movl	-36(%rbp), %ecx
 6128 53de 488B55D0 		movq	-48(%rbp), %rdx
 6129 53e2 488B75E0 		movq	-32(%rbp), %rsi
 6130 53e6 488B45E8 		movq	-24(%rbp), %rax
 6131 53ea 4989F8   		movq	%rdi, %r8
 6132 53ed 4889C7   		movq	%rax, %rdi
 6133 53f0 E8B7D2FF 		call	aProgram
 6133      FF
 6134 53f5 E9BE0000 		jmp	.L342
 6134      00
 6135              	.L347:
 890:prog.c        **** 		} else if ( algoType == '\0' ) {
 6136              		.loc 2 890 13
 6137 53fa 807DFA00 		cmpb	$0, -6(%rbp)
 6138 53fe 7522     		jne	.L348
 891:prog.c        **** 			CHECK_STATUS(true, FL_CONF_FORMAT, cleanup, "flProgram(): Missing Altera algorithm code");
 6139              		.loc 2 891 4 discriminator 1
 6140 5400 488B45C8 		movq	-56(%rbp), %rax
 6141 5404 488D1500 		leaq	.LC47(%rip), %rdx
 6141      000000
 6142 540b 4889D6   		movq	%rdx, %rsi
 6143 540e 4889C7   		movq	%rax, %rdi
 6144 5411 E8000000 		call	errPrefix@PLT
 6144      00
 6145 5416 C745FC0B 		movl	$11, -4(%rbp)
 6145      000000
 6146 541d E9930000 		jmp	.L345
 6146      00
 6147              	.L348:
 892:prog.c        **** 		} else {
 893:prog.c        **** 			CHECK_STATUS(
 6148              		.loc 2 893 4 discriminator 1
 6149 5422 0FBE55FA 		movsbl	-6(%rbp), %edx
 6150 5426 488B45C8 		movq	-56(%rbp), %rax
 6151 542a 488D0D00 		leaq	.LC48(%rip), %rcx
 6151      000000
 6152 5431 4889CE   		movq	%rcx, %rsi
 6153 5434 4889C7   		movq	%rax, %rdi
 6154 5437 B8000000 		movl	$0, %eax
 6154      00
 6155 543c E8000000 		call	errRender@PLT
 6155      00
 6156 5441 C745FC0B 		movl	$11, -4(%rbp)
 6156      000000
 6157 5448 EB6B     		jmp	.L345
 6158              	.L346:
 6159              	.LBE5:
 894:prog.c        **** 				true, FL_CONF_FORMAT, cleanup,
 895:prog.c        **** 				"flProgram(): '%c' is not a valid Altera algorithm code", algoType);
 896:prog.c        **** 		}
 897:prog.c        **** 	} else if ( algoVendor == 'J' ) {
 6160              		.loc 2 897 12
 6161 544a 807DF94A 		cmpb	$74, -7(%rbp)
 6162 544e 751A     		jne	.L349
 898:prog.c        **** 		// This is a JTAG algorithm
 899:prog.c        **** 		return jProgram(handle, portConfig, blobData, error);
 6163              		.loc 2 899 10
 6164 5450 488B4DC8 		movq	-56(%rbp), %rcx
 6165 5454 488B55D0 		movq	-48(%rbp), %rdx
 6166 5458 488B75E0 		movq	-32(%rbp), %rsi
 6167 545c 488B45E8 		movq	-24(%rbp), %rax
 6168 5460 4889C7   		movq	%rax, %rdi
 6169 5463 E8A0F3FF 		call	jProgram
 6169      FF
 6170 5468 EB4E     		jmp	.L342
 6171              	.L349:
 900:prog.c        **** 	} else if ( algoVendor == '\0' ) {
 6172              		.loc 2 900 12
 6173 546a 807DF900 		cmpb	$0, -7(%rbp)
 6174 546e 751F     		jne	.L350
 901:prog.c        **** 		CHECK_STATUS(true, FL_CONF_FORMAT, cleanup, "flProgram(): Missing algorithm vendor code");
 6175              		.loc 2 901 3 discriminator 1
 6176 5470 488B45C8 		movq	-56(%rbp), %rax
 6177 5474 488D1500 		leaq	.LC49(%rip), %rdx
 6177      000000
 6178 547b 4889D6   		movq	%rdx, %rsi
 6179 547e 4889C7   		movq	%rax, %rdi
 6180 5481 E8000000 		call	errPrefix@PLT
 6180      00
 6181 5486 C745FC0B 		movl	$11, -4(%rbp)
 6181      000000
 6182 548d EB26     		jmp	.L345
 6183              	.L350:
 902:prog.c        **** 	} else {
 903:prog.c        **** 		CHECK_STATUS(
 6184              		.loc 2 903 3 discriminator 1
 6185 548f 0FBE55F9 		movsbl	-7(%rbp), %edx
 6186 5493 488B45C8 		movq	-56(%rbp), %rax
 6187 5497 488D0D00 		leaq	.LC50(%rip), %rcx
 6187      000000
 6188 549e 4889CE   		movq	%rcx, %rsi
 6189 54a1 4889C7   		movq	%rax, %rdi
 6190 54a4 B8000000 		movl	$0, %eax
 6190      00
 6191 54a9 E8000000 		call	errRender@PLT
 6191      00
 6192 54ae C745FC0B 		movl	$11, -4(%rbp)
 6192      000000
 6193              	.L345:
 904:prog.c        **** 			true, FL_CONF_FORMAT, cleanup,
 905:prog.c        **** 			"flProgram(): '%c' is not a valid algorithm vendor code", algoVendor);
 906:prog.c        **** 	}
 907:prog.c        **** cleanup:
 908:prog.c        **** 	return retVal;
 6194              		.loc 2 908 9
 6195 54b5 8B45FC   		movl	-4(%rbp), %eax
 6196              	.L342:
 909:prog.c        **** }
 6197              		.loc 2 909 1
 6198 54b8 C9       		leave
 6199              		.cfi_def_cfa 7, 8
 6200 54b9 C3       		ret
 6201              		.cfi_endproc
 6202              	.LFE24:
 6204              		.section	.rodata
 6205              	.LC51:
 6206 0937 706C6179 		.string	"playSVF()"
 6206      53564628 
 6206      2900
 6207 0941 00000000 		.align 8
 6207      000000
 6208              	.LC52:
 6209 0948 666C5072 		.string	"flProgram(): portConfig terminated before first ':'"
 6209      6F677261 
 6209      6D28293A 
 6209      20706F72 
 6209      74436F6E 
 6210 097c 00000000 		.align 8
 6211              	.LC53:
 6212 0980 666C5072 		.string	"flProgram(): progFile was NULL, and portConfig didn't specify a file"
 6212      6F677261 
 6212      6D28293A 
 6212      2070726F 
 6212      6746696C 
 6213              	.LC54:
 6214 09c5 2E737666 		.string	".svf"
 6214      00
 6215              	.LC55:
 6216 09ca 666C5072 		.string	"flProgram()"
 6216      6F677261 
 6216      6D282900 
 6217              	.LC56:
 6218 09d6 2E787376 		.string	".xsvf"
 6218      6600
 6219              	.LC57:
 6220 09dc 2E637376 		.string	".csvf"
 6220      6600
 6221 09e2 00000000 		.align 8
 6221      0000
 6222              	.LC58:
 6223 09e8 666C5072 		.string	"flProgram(): JTAG files should have .svf, .xsvf or .csvf extension"
 6223      6F677261 
 6223      6D28293A 
 6223      204A5441 
 6223      47206669 
 6224              		.text
 6225              		.globl	flProgram
 6227              	flProgram:
 6228              	.LFB25:
 910:prog.c        **** 	
 911:prog.c        **** // Programs a device using configuration information loaded from a file. If progFile is NULL,
 912:prog.c        **** // it expects to find a filename at the end of portConfig.
 913:prog.c        **** //
 914:prog.c        **** DLLEXPORT(FLStatus) flProgram(
 915:prog.c        **** 	struct FLContext *handle, const char *portConfig, const char *progFile, const char **error) {
 6229              		.loc 2 915 94
 6230              		.cfi_startproc
 6231 54ba F30F1EFA 		endbr64
 6232 54be 55       		pushq	%rbp
 6233              		.cfi_def_cfa_offset 16
 6234              		.cfi_offset 6, -16
 6235 54bf 4889E5   		movq	%rsp, %rbp
 6236              		.cfi_def_cfa_register 6
 6237 54c2 4883EC70 		subq	$112, %rsp
 6238 54c6 48897DA8 		movq	%rdi, -88(%rbp)
 6239 54ca 488975A0 		movq	%rsi, -96(%rbp)
 6240 54ce 48895598 		movq	%rdx, -104(%rbp)
 6241 54d2 48894D90 		movq	%rcx, -112(%rbp)
 6242              		.loc 2 915 94
 6243 54d6 64488B04 		movq	%fs:40, %rax
 6243      25280000 
 6243      00
 6244 54df 488945F8 		movq	%rax, -8(%rbp)
 6245 54e3 31C0     		xorl	%eax, %eax
 916:prog.c        **** 	FLStatus retVal = FL_SUCCESS, fStatus;
 6246              		.loc 2 916 11
 6247 54e5 C745BC00 		movl	$0, -68(%rbp)
 6247      000000
 917:prog.c        **** 	const char algoVendor = portConfig[0];
 6248              		.loc 2 917 13
 6249 54ec 488B45A0 		movq	-96(%rbp), %rax
 6250 54f0 0FB600   		movzbl	(%rax), %eax
 6251 54f3 8845BB   		movb	%al, -69(%rbp)
 918:prog.c        **** 	struct Buffer fileBuf = {0,};
 6252              		.loc 2 918 16
 6253 54f6 48C745D0 		movq	$0, -48(%rbp)
 6253      00000000 
 6254 54fe 48C745D8 		movq	$0, -40(%rbp)
 6254      00000000 
 6255 5506 48C745E0 		movq	$0, -32(%rbp)
 6255      00000000 
 6256 550e 48C745E8 		movq	$0, -24(%rbp)
 6256      00000000 
 919:prog.c        **** 	BufferStatus bStatus = bufInitialise(&fileBuf, 0x20000, 0, error);
 6257              		.loc 2 919 25
 6258 5516 488B5590 		movq	-112(%rbp), %rdx
 6259 551a 488D45D0 		leaq	-48(%rbp), %rax
 6260 551e 4889D1   		movq	%rdx, %rcx
 6261 5521 BA000000 		movl	$0, %edx
 6261      00
 6262 5526 BE000002 		movl	$131072, %esi
 6262      00
 6263 552b 4889C7   		movq	%rax, %rdi
 6264 552e E8000000 		call	bufInitialise@PLT
 6264      00
 6265 5533 8945C0   		movl	%eax, -64(%rbp)
 920:prog.c        **** 	CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "playSVF()");
 6266              		.loc 2 920 2
 6267 5536 837DC000 		cmpl	$0, -64(%rbp)
 6268 553a 7422     		je	.L352
 6269              		.loc 2 920 2 is_stmt 0 discriminator 1
 6270 553c 488B4590 		movq	-112(%rbp), %rax
 6271 5540 488D1500 		leaq	.LC51(%rip), %rdx
 6271      000000
 6272 5547 4889D6   		movq	%rdx, %rsi
 6273 554a 4889C7   		movq	%rax, %rdi
 6274 554d E8000000 		call	errPrefix@PLT
 6274      00
 6275 5552 C745BC01 		movl	$1, -68(%rbp)
 6275      000000
 6276 5559 E9B10200 		jmp	.L353
 6276      00
 6277              	.L352:
 921:prog.c        **** 	if ( progFile == NULL ) {
 6278              		.loc 2 921 5 is_stmt 1
 6279 555e 48837D98 		cmpq	$0, -104(%rbp)
 6279      00
 6280 5563 0F85A600 		jne	.L354
 6280      0000
 922:prog.c        **** 		// Expect to find prog file at the end of portConfig
 923:prog.c        **** 		progFile = portConfig;
 6281              		.loc 2 923 12
 6282 5569 488B45A0 		movq	-96(%rbp), %rax
 6283 556d 48894598 		movq	%rax, -104(%rbp)
 924:prog.c        **** 		while ( *progFile && *progFile != ':' ) {
 6284              		.loc 2 924 9
 6285 5571 EB05     		jmp	.L355
 6286              	.L357:
 925:prog.c        **** 			progFile++;
 6287              		.loc 2 925 12
 6288 5573 48834598 		addq	$1, -104(%rbp)
 6288      01
 6289              	.L355:
 924:prog.c        **** 		while ( *progFile && *progFile != ':' ) {
 6290              		.loc 2 924 11
 6291 5578 488B4598 		movq	-104(%rbp), %rax
 6292 557c 0FB600   		movzbl	(%rax), %eax
 924:prog.c        **** 		while ( *progFile && *progFile != ':' ) {
 6293              		.loc 2 924 21
 6294 557f 84C0     		testb	%al, %al
 6295 5581 740B     		je	.L356
 924:prog.c        **** 		while ( *progFile && *progFile != ':' ) {
 6296              		.loc 2 924 24 discriminator 1
 6297 5583 488B4598 		movq	-104(%rbp), %rax
 6298 5587 0FB600   		movzbl	(%rax), %eax
 924:prog.c        **** 		while ( *progFile && *progFile != ':' ) {
 6299              		.loc 2 924 21 discriminator 1
 6300 558a 3C3A     		cmpb	$58, %al
 6301 558c 75E5     		jne	.L357
 6302              	.L356:
 926:prog.c        **** 		}
 927:prog.c        **** 		CHECK_STATUS(
 6303              		.loc 2 927 3
 6304 558e 488B4598 		movq	-104(%rbp), %rax
 6305 5592 0FB600   		movzbl	(%rax), %eax
 6306 5595 84C0     		testb	%al, %al
 6307 5597 7522     		jne	.L358
 6308              		.loc 2 927 3 is_stmt 0 discriminator 1
 6309 5599 488B4590 		movq	-112(%rbp), %rax
 6310 559d 488D1500 		leaq	.LC52(%rip), %rdx
 6310      000000
 6311 55a4 4889D6   		movq	%rdx, %rsi
 6312 55a7 4889C7   		movq	%rax, %rdi
 6313 55aa E8000000 		call	errPrefix@PLT
 6313      00
 6314 55af C745BC0B 		movl	$11, -68(%rbp)
 6314      000000
 6315 55b6 E9540200 		jmp	.L353
 6315      00
 6316              	.L358:
 928:prog.c        **** 			*progFile == '\0', FL_CONF_FORMAT, cleanup,
 929:prog.c        **** 			"flProgram(): portConfig terminated before first ':'");
 930:prog.c        **** 		progFile++;
 6317              		.loc 2 930 11 is_stmt 1
 6318 55bb 48834598 		addq	$1, -104(%rbp)
 6318      01
 931:prog.c        **** 		while ( *progFile && *progFile != ':' ) {
 6319              		.loc 2 931 9
 6320 55c0 EB05     		jmp	.L359
 6321              	.L361:
 932:prog.c        **** 			progFile++;
 6322              		.loc 2 932 12
 6323 55c2 48834598 		addq	$1, -104(%rbp)
 6323      01
 6324              	.L359:
 931:prog.c        **** 		while ( *progFile && *progFile != ':' ) {
 6325              		.loc 2 931 11
 6326 55c7 488B4598 		movq	-104(%rbp), %rax
 6327 55cb 0FB600   		movzbl	(%rax), %eax
 931:prog.c        **** 		while ( *progFile && *progFile != ':' ) {
 6328              		.loc 2 931 21
 6329 55ce 84C0     		testb	%al, %al
 6330 55d0 740B     		je	.L360
 931:prog.c        **** 		while ( *progFile && *progFile != ':' ) {
 6331              		.loc 2 931 24 discriminator 1
 6332 55d2 488B4598 		movq	-104(%rbp), %rax
 6333 55d6 0FB600   		movzbl	(%rax), %eax
 931:prog.c        **** 		while ( *progFile && *progFile != ':' ) {
 6334              		.loc 2 931 21 discriminator 1
 6335 55d9 3C3A     		cmpb	$58, %al
 6336 55db 75E5     		jne	.L361
 6337              	.L360:
 933:prog.c        **** 		}
 934:prog.c        **** 		CHECK_STATUS(
 6338              		.loc 2 934 3
 6339 55dd 488B4598 		movq	-104(%rbp), %rax
 6340 55e1 0FB600   		movzbl	(%rax), %eax
 6341 55e4 84C0     		testb	%al, %al
 6342 55e6 7522     		jne	.L362
 6343              		.loc 2 934 3 is_stmt 0 discriminator 1
 6344 55e8 488B4590 		movq	-112(%rbp), %rax
 6345 55ec 488D1500 		leaq	.LC53(%rip), %rdx
 6345      000000
 6346 55f3 4889D6   		movq	%rdx, %rsi
 6347 55f6 4889C7   		movq	%rax, %rdi
 6348 55f9 E8000000 		call	errPrefix@PLT
 6348      00
 6349 55fe C745BC0B 		movl	$11, -68(%rbp)
 6349      000000
 6350 5605 E9050200 		jmp	.L353
 6350      00
 6351              	.L362:
 935:prog.c        **** 			*progFile == '\0', FL_CONF_FORMAT, cleanup,
 936:prog.c        **** 			"flProgram(): progFile was NULL, and portConfig didn't specify a file");
 937:prog.c        **** 		progFile++;
 6352              		.loc 2 937 11 is_stmt 1
 6353 560a 48834598 		addq	$1, -104(%rbp)
 6353      01
 6354              	.L354:
 938:prog.c        **** 	}
 939:prog.c        **** 	if ( algoVendor == 'J' ) {
 6355              		.loc 2 939 5
 6356 560f 807DBB4A 		cmpb	$74, -69(%rbp)
 6357 5613 0F856901 		jne	.L363
 6357      0000
 6358              	.LBB6:
 940:prog.c        **** 		// JTAG file
 941:prog.c        **** 		const char *const ext = progFile + strlen(progFile) - 5;
 6359              		.loc 2 941 38
 6360 5619 488B4598 		movq	-104(%rbp), %rax
 6361 561d 4889C7   		movq	%rax, %rdi
 6362 5620 E8000000 		call	strlen@PLT
 6362      00
 6363              		.loc 2 941 55
 6364 5625 488D50FB 		leaq	-5(%rax), %rdx
 6365              		.loc 2 941 21
 6366 5629 488B4598 		movq	-104(%rbp), %rax
 6367 562d 4801D0   		addq	%rdx, %rax
 6368 5630 488945C8 		movq	%rax, -56(%rbp)
 942:prog.c        **** 		if ( strcmp(".svf", ext+1) == 0 ) {
 6369              		.loc 2 942 8
 6370 5634 488B45C8 		movq	-56(%rbp), %rax
 6371 5638 4883C001 		addq	$1, %rax
 6372 563c 4889C6   		movq	%rax, %rsi
 6373 563f 488D0500 		leaq	.LC54(%rip), %rax
 6373      000000
 6374 5646 4889C7   		movq	%rax, %rdi
 6375 5649 E8000000 		call	strcmp@PLT
 6375      00
 6376              		.loc 2 942 6
 6377 564e 85C0     		testl	%eax, %eax
 6378 5650 754A     		jne	.L364
 943:prog.c        **** 			fStatus = flLoadSvfAndConvertToCsvf(progFile, &fileBuf, NULL, error);
 6379              		.loc 2 943 14
 6380 5652 488B5590 		movq	-112(%rbp), %rdx
 6381 5656 488D75D0 		leaq	-48(%rbp), %rsi
 6382 565a 488B4598 		movq	-104(%rbp), %rax
 6383 565e 4889D1   		movq	%rdx, %rcx
 6384 5661 BA000000 		movl	$0, %edx
 6384      00
 6385 5666 4889C7   		movq	%rax, %rdi
 6386 5669 E8000000 		call	flLoadSvfAndConvertToCsvf@PLT
 6386      00
 6387 566e 8945C4   		movl	%eax, -60(%rbp)
 944:prog.c        **** 			CHECK_STATUS(fStatus, fStatus, cleanup, "flProgram()");
 6388              		.loc 2 944 4
 6389 5671 837DC400 		cmpl	$0, -60(%rbp)
 6390 5675 0F844601 		je	.L365
 6390      0000
 6391              		.loc 2 944 4 is_stmt 0 discriminator 1
 6392 567b 488B4590 		movq	-112(%rbp), %rax
 6393 567f 488D1500 		leaq	.LC55(%rip), %rdx
 6393      000000
 6394 5686 4889D6   		movq	%rdx, %rsi
 6395 5689 4889C7   		movq	%rax, %rdi
 6396 568c E8000000 		call	errPrefix@PLT
 6396      00
 6397 5691 8B45C4   		movl	-60(%rbp), %eax
 6398 5694 8945BC   		movl	%eax, -68(%rbp)
 6399 5697 E9730100 		jmp	.L353
 6399      00
 6400              	.L364:
 945:prog.c        **** 		} else if ( strcmp(".xsvf", ext) == 0 ) {
 6401              		.loc 2 945 15 is_stmt 1
 6402 569c 488B45C8 		movq	-56(%rbp), %rax
 6403 56a0 4889C6   		movq	%rax, %rsi
 6404 56a3 488D0500 		leaq	.LC56(%rip), %rax
 6404      000000
 6405 56aa 4889C7   		movq	%rax, %rdi
 6406 56ad E8000000 		call	strcmp@PLT
 6406      00
 6407              		.loc 2 945 13
 6408 56b2 85C0     		testl	%eax, %eax
 6409 56b4 754A     		jne	.L366
 946:prog.c        **** 			fStatus = flLoadXsvfAndConvertToCsvf(progFile, &fileBuf, NULL, error);
 6410              		.loc 2 946 14
 6411 56b6 488B5590 		movq	-112(%rbp), %rdx
 6412 56ba 488D75D0 		leaq	-48(%rbp), %rsi
 6413 56be 488B4598 		movq	-104(%rbp), %rax
 6414 56c2 4889D1   		movq	%rdx, %rcx
 6415 56c5 BA000000 		movl	$0, %edx
 6415      00
 6416 56ca 4889C7   		movq	%rax, %rdi
 6417 56cd E8000000 		call	flLoadXsvfAndConvertToCsvf@PLT
 6417      00
 6418 56d2 8945C4   		movl	%eax, -60(%rbp)
 947:prog.c        **** 			CHECK_STATUS(fStatus, fStatus, cleanup, "flProgram()");
 6419              		.loc 2 947 4
 6420 56d5 837DC400 		cmpl	$0, -60(%rbp)
 6421 56d9 0F84E200 		je	.L365
 6421      0000
 6422              		.loc 2 947 4 is_stmt 0 discriminator 1
 6423 56df 488B4590 		movq	-112(%rbp), %rax
 6424 56e3 488D1500 		leaq	.LC55(%rip), %rdx
 6424      000000
 6425 56ea 4889D6   		movq	%rdx, %rsi
 6426 56ed 4889C7   		movq	%rax, %rdi
 6427 56f0 E8000000 		call	errPrefix@PLT
 6427      00
 6428 56f5 8B45C4   		movl	-60(%rbp), %eax
 6429 56f8 8945BC   		movl	%eax, -68(%rbp)
 6430 56fb E90F0100 		jmp	.L353
 6430      00
 6431              	.L366:
 948:prog.c        **** 		} else if ( strcmp(".csvf", ext) == 0 ) {
 6432              		.loc 2 948 15 is_stmt 1
 6433 5700 488B45C8 		movq	-56(%rbp), %rax
 6434 5704 4889C6   		movq	%rax, %rsi
 6435 5707 488D0500 		leaq	.LC57(%rip), %rax
 6435      000000
 6436 570e 4889C7   		movq	%rax, %rdi
 6437 5711 E8000000 		call	strcmp@PLT
 6437      00
 6438              		.loc 2 948 13
 6439 5716 85C0     		testl	%eax, %eax
 6440 5718 7546     		jne	.L367
 949:prog.c        **** 			bStatus = bufAppendFromBinaryFile(&fileBuf, progFile, error);
 6441              		.loc 2 949 14
 6442 571a 488B5590 		movq	-112(%rbp), %rdx
 6443 571e 488B4D98 		movq	-104(%rbp), %rcx
 6444 5722 488D45D0 		leaq	-48(%rbp), %rax
 6445 5726 4889CE   		movq	%rcx, %rsi
 6446 5729 4889C7   		movq	%rax, %rdi
 6447 572c E8000000 		call	bufAppendFromBinaryFile@PLT
 6447      00
 6448 5731 8945C0   		movl	%eax, -64(%rbp)
 950:prog.c        **** 			CHECK_STATUS(bStatus, FL_FILE_ERR, cleanup, "flProgram()");
 6449              		.loc 2 950 4
 6450 5734 837DC000 		cmpl	$0, -64(%rbp)
 6451 5738 0F848300 		je	.L365
 6451      0000
 6452              		.loc 2 950 4 is_stmt 0 discriminator 1
 6453 573e 488B4590 		movq	-112(%rbp), %rax
 6454 5742 488D1500 		leaq	.LC55(%rip), %rdx
 6454      000000
 6455 5749 4889D6   		movq	%rdx, %rsi
 6456 574c 4889C7   		movq	%rax, %rdi
 6457 574f E8000000 		call	errPrefix@PLT
 6457      00
 6458 5754 C745BC06 		movl	$6, -68(%rbp)
 6458      000000
 6459 575b E9AF0000 		jmp	.L353
 6459      00
 6460              	.L367:
 951:prog.c        **** 		} else {
 952:prog.c        **** 			CHECK_STATUS(
 6461              		.loc 2 952 4 is_stmt 1 discriminator 1
 6462 5760 488B4590 		movq	-112(%rbp), %rax
 6463 5764 488D1500 		leaq	.LC58(%rip), %rdx
 6463      000000
 6464 576b 4889D6   		movq	%rdx, %rsi
 6465 576e 4889C7   		movq	%rax, %rdi
 6466 5771 E8000000 		call	errPrefix@PLT
 6466      00
 6467 5776 C745BC06 		movl	$6, -68(%rbp)
 6467      000000
 6468 577d E98D0000 		jmp	.L353
 6468      00
 6469              	.L363:
 6470              	.LBE6:
 953:prog.c        **** 				true, FL_FILE_ERR, cleanup,
 954:prog.c        **** 				"flProgram(): JTAG files should have .svf, .xsvf or .csvf extension");
 955:prog.c        **** 		}
 956:prog.c        **** 	} else {
 957:prog.c        **** 		// Just load it
 958:prog.c        **** 		bStatus = bufAppendFromBinaryFile(&fileBuf, progFile, error);
 6471              		.loc 2 958 13
 6472 5782 488B5590 		movq	-112(%rbp), %rdx
 6473 5786 488B4D98 		movq	-104(%rbp), %rcx
 6474 578a 488D45D0 		leaq	-48(%rbp), %rax
 6475 578e 4889CE   		movq	%rcx, %rsi
 6476 5791 4889C7   		movq	%rax, %rdi
 6477 5794 E8000000 		call	bufAppendFromBinaryFile@PLT
 6477      00
 6478 5799 8945C0   		movl	%eax, -64(%rbp)
 959:prog.c        **** 		CHECK_STATUS(bStatus, FL_FILE_ERR, cleanup, "flProgram()");
 6479              		.loc 2 959 3
 6480 579c 837DC000 		cmpl	$0, -64(%rbp)
 6481 57a0 741F     		je	.L365
 6482              		.loc 2 959 3 is_stmt 0 discriminator 1
 6483 57a2 488B4590 		movq	-112(%rbp), %rax
 6484 57a6 488D1500 		leaq	.LC55(%rip), %rdx
 6484      000000
 6485 57ad 4889D6   		movq	%rdx, %rsi
 6486 57b0 4889C7   		movq	%rax, %rdi
 6487 57b3 E8000000 		call	errPrefix@PLT
 6487      00
 6488 57b8 C745BC06 		movl	$6, -68(%rbp)
 6488      000000
 6489 57bf EB4E     		jmp	.L353
 6490              	.L365:
 960:prog.c        **** 	}
 961:prog.c        **** 	fStatus = flProgramBlob(handle, portConfig, (uint32)fileBuf.length, fileBuf.data, error);
 6491              		.loc 2 961 77 is_stmt 1
 6492 57c1 488B55D0 		movq	-48(%rbp), %rdx
 6493              		.loc 2 961 61
 6494 57c5 488B45D8 		movq	-40(%rbp), %rax
 6495              		.loc 2 961 12
 6496 57c9 89C7     		movl	%eax, %edi
 6497 57cb 488B4D90 		movq	-112(%rbp), %rcx
 6498 57cf 488B75A0 		movq	-96(%rbp), %rsi
 6499 57d3 488B45A8 		movq	-88(%rbp), %rax
 6500 57d7 4989C8   		movq	%rcx, %r8
 6501 57da 4889D1   		movq	%rdx, %rcx
 6502 57dd 89FA     		movl	%edi, %edx
 6503 57df 4889C7   		movq	%rax, %rdi
 6504 57e2 E8000000 		call	flProgramBlob@PLT
 6504      00
 6505 57e7 8945C4   		movl	%eax, -60(%rbp)
 962:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "flProgram()");
 6506              		.loc 2 962 2
 6507 57ea 837DC400 		cmpl	$0, -60(%rbp)
 6508 57ee 741E     		je	.L370
 6509              		.loc 2 962 2 is_stmt 0 discriminator 1
 6510 57f0 488B4590 		movq	-112(%rbp), %rax
 6511 57f4 488D1500 		leaq	.LC55(%rip), %rdx
 6511      000000
 6512 57fb 4889D6   		movq	%rdx, %rsi
 6513 57fe 4889C7   		movq	%rax, %rdi
 6514 5801 E8000000 		call	errPrefix@PLT
 6514      00
 6515 5806 8B45C4   		movl	-60(%rbp), %eax
 6516 5809 8945BC   		movl	%eax, -68(%rbp)
 6517 580c EB01     		jmp	.L353
 6518              	.L370:
 963:prog.c        **** cleanup:
 6519              		.loc 2 963 1 is_stmt 1
 6520 580e 90       		nop
 6521              	.L353:
 964:prog.c        **** 	bufDestroy(&fileBuf);
 6522              		.loc 2 964 2
 6523 580f 488D45D0 		leaq	-48(%rbp), %rax
 6524 5813 4889C7   		movq	%rax, %rdi
 6525 5816 E8000000 		call	bufDestroy@PLT
 6525      00
 965:prog.c        **** 	return retVal;
 6526              		.loc 2 965 9
 6527 581b 8B45BC   		movl	-68(%rbp), %eax
 966:prog.c        **** }
 6528              		.loc 2 966 1
 6529 581e 488B55F8 		movq	-8(%rbp), %rdx
 6530 5822 64482B14 		subq	%fs:40, %rdx
 6530      25280000 
 6530      00
 6531 582b 7405     		je	.L369
 6532 582d E8000000 		call	__stack_chk_fail@PLT
 6532      00
 6533              	.L369:
 6534 5832 C9       		leave
 6535              		.cfi_def_cfa 7, 8
 6536 5833 C3       		ret
 6537              		.cfi_endproc
 6538              	.LFE25:
 6540              		.section	.rodata
 6541 0a2b 00000000 		.align 8
 6541      00
 6544              	indexValues:
 6549              	.LC59:
 6550 0a38 666C5369 		.string	"flSingleBitPortAccess()"
 6550      6E676C65 
 6550      42697450 
 6550      6F727441 
 6550      63636573 
 6551              		.text
 6552              		.globl	flSingleBitPortAccess
 6554              	flSingleBitPortAccess:
 6555              	.LFB26:
 967:prog.c        **** 
 968:prog.c        **** // Actual values to send to microcontroller for PIN_UNUSED, PIN_HIGH, PIN_LOW and PIN_INPUT:
 969:prog.c        **** static const uint16 indexValues[] = {0xFFFF, 0x0101, 0x0001, 0x0000};
 970:prog.c        **** 
 971:prog.c        **** DLLEXPORT(FLStatus) flSingleBitPortAccess(
 972:prog.c        **** 	struct FLContext *handle, uint8 portNumber, uint8 bitNumber,
 973:prog.c        ****    uint8 pinConfig, uint8 *pinRead, const char **error)
 974:prog.c        **** {
 6556              		.loc 2 974 1
 6557              		.cfi_startproc
 6558 5834 F30F1EFA 		endbr64
 6559 5838 55       		pushq	%rbp
 6560              		.cfi_def_cfa_offset 16
 6561              		.cfi_offset 6, -16
 6562 5839 4889E5   		movq	%rsp, %rbp
 6563              		.cfi_def_cfa_register 6
 6564 583c 4883EC50 		subq	$80, %rsp
 6565 5840 48897DD8 		movq	%rdi, -40(%rbp)
 6566 5844 89C8     		movl	%ecx, %eax
 6567 5846 4C8945C0 		movq	%r8, -64(%rbp)
 6568 584a 4C894DB8 		movq	%r9, -72(%rbp)
 6569 584e 89F1     		movl	%esi, %ecx
 6570 5850 884DD4   		movb	%cl, -44(%rbp)
 6571 5853 8855D0   		movb	%dl, -48(%rbp)
 6572 5856 8845CC   		movb	%al, -52(%rbp)
 6573              		.loc 2 974 1
 6574 5859 64488B04 		movq	%fs:40, %rax
 6574      25280000 
 6574      00
 6575 5862 488945F8 		movq	%rax, -8(%rbp)
 6576 5866 31C0     		xorl	%eax, %eax
 975:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
 6577              		.loc 2 975 11
 6578 5868 C745F000 		movl	$0, -16(%rbp)
 6578      000000
 976:prog.c        **** 	USBStatus uStatus;
 977:prog.c        **** 	uint8 byte;
 978:prog.c        **** 	const uint16 value = (uint16)((bitNumber << 8) | portNumber);
 6579              		.loc 2 978 43
 6580 586f 0FB645D0 		movzbl	-48(%rbp), %eax
 6581 5873 C1E008   		sall	$8, %eax
 6582              		.loc 2 978 49
 6583 5876 89C2     		movl	%eax, %edx
 6584 5878 0FB645D4 		movzbl	-44(%rbp), %eax
 6585 587c 09D0     		orl	%edx, %eax
 6586              		.loc 2 978 15
 6587 587e 668945EC 		movw	%ax, -20(%rbp)
 979:prog.c        **** 	const uint16 index = indexValues[pinConfig];
 6588              		.loc 2 979 34
 6589 5882 0FB645CC 		movzbl	-52(%rbp), %eax
 6590              		.loc 2 979 15
 6591 5886 4898     		cltq
 6592 5888 488D1400 		leaq	(%rax,%rax), %rdx
 6593 588c 488D0500 		leaq	indexValues(%rip), %rax
 6593      000000
 6594 5893 0FB70402 		movzwl	(%rdx,%rax), %eax
 6595 5897 668945EE 		movw	%ax, -18(%rbp)
 980:prog.c        **** 	uStatus = usbControlRead(
 6596              		.loc 2 980 12
 6597 589b 0FB74DEE 		movzwl	-18(%rbp), %ecx
 6598 589f 0FB755EC 		movzwl	-20(%rbp), %edx
 6599 58a3 488B45D8 		movq	-40(%rbp), %rax
 6600 58a7 488B00   		movq	(%rax), %rax
 6601 58aa 488D75EB 		leaq	-21(%rbp), %rsi
 6602 58ae FF75B8   		pushq	-72(%rbp)
 6603 58b1 68E80300 		pushq	$1000
 6603      00
 6604 58b6 41B90100 		movl	$1, %r9d
 6604      0000
 6605 58bc 4989F0   		movq	%rsi, %r8
 6606 58bf BE850000 		movl	$133, %esi
 6606      00
 6607 58c4 4889C7   		movq	%rax, %rdi
 6608 58c7 E8000000 		call	usbControlRead@PLT
 6608      00
 6609 58cc 4883C410 		addq	$16, %rsp
 6610 58d0 8945F4   		movl	%eax, -12(%rbp)
 981:prog.c        **** 		handle->device,
 982:prog.c        **** 		CMD_PORT_BIT_IO, // bRequest
 983:prog.c        **** 		value,           // wValue
 984:prog.c        **** 		index,           // wIndex
 985:prog.c        **** 		&byte,           // buffer to receive current state of ports
 986:prog.c        **** 		1,               // wLength
 987:prog.c        **** 		1000,            // timeout (ms)
 988:prog.c        **** 		error
 989:prog.c        **** 	);
 990:prog.c        **** 	CHECK_STATUS(uStatus, FL_PORT_IO, cleanup, "flSingleBitPortAccess()");
 6611              		.loc 2 990 2
 6612 58d3 837DF400 		cmpl	$0, -12(%rbp)
 6613 58d7 741F     		je	.L372
 6614              		.loc 2 990 2 is_stmt 0 discriminator 1
 6615 58d9 488B45B8 		movq	-72(%rbp), %rax
 6616 58dd 488D1500 		leaq	.LC59(%rip), %rdx
 6616      000000
 6617 58e4 4889D6   		movq	%rdx, %rsi
 6618 58e7 4889C7   		movq	%rax, %rdi
 6619 58ea E8000000 		call	errPrefix@PLT
 6619      00
 6620 58ef C745F015 		movl	$21, -16(%rbp)
 6620      000000
 6621 58f6 EB14     		jmp	.L373
 6622              	.L372:
 991:prog.c        **** 	if ( pinRead ) {
 6623              		.loc 2 991 5 is_stmt 1
 6624 58f8 48837DC0 		cmpq	$0, -64(%rbp)
 6624      00
 6625 58fd 740C     		je	.L376
 992:prog.c        **** 		*pinRead = byte;
 6626              		.loc 2 992 12
 6627 58ff 0FB655EB 		movzbl	-21(%rbp), %edx
 6628 5903 488B45C0 		movq	-64(%rbp), %rax
 6629 5907 8810     		movb	%dl, (%rax)
 6630 5909 EB01     		jmp	.L373
 6631              	.L376:
 993:prog.c        **** 	}
 994:prog.c        **** cleanup:
 6632              		.loc 2 994 1
 6633 590b 90       		nop
 6634              	.L373:
 995:prog.c        **** 	return retVal;
 6635              		.loc 2 995 9
 6636 590c 8B45F0   		movl	-16(%rbp), %eax
 996:prog.c        **** }
 6637              		.loc 2 996 1
 6638 590f 488B55F8 		movq	-8(%rbp), %rdx
 6639 5913 64482B14 		subq	%fs:40, %rdx
 6639      25280000 
 6639      00
 6640 591c 7405     		je	.L375
 6641 591e E8000000 		call	__stack_chk_fail@PLT
 6641      00
 6642              	.L375:
 6643 5923 C9       		leave
 6644              		.cfi_def_cfa 7, 8
 6645 5924 C3       		ret
 6646              		.cfi_endproc
 6647              	.LFE26:
 6649              		.section	.rodata
 6650              		.align 8
 6651              	.LC60:
 6652 0a50 666C4D75 		.string	"flMultiBitPortAccess(): Unexpected end of config string:\n  %s\n  %s^"
 6652      6C746942 
 6652      6974506F 
 6652      72744163 
 6652      63657373 
 6653 0a94 00000000 		.align 8
 6654              	.LC61:
 6655 0a98 666C4D75 		.string	"flMultiBitPortAccess(): Port is not valid (try 'A', 'B', 'C', etc):\n  %s\n  %s^"
 6655      6C746942 
 6655      6974506F 
 6655      72744163 
 6655      63657373 
 6656 0ae7 00       		.align 8
 6657              	.LC62:
 6658 0ae8 666C4D75 		.string	"flMultiBitPortAccess(): Bit number is not valid:\n  %s\n  %s^"
 6658      6C746942 
 6658      6974506F 
 6658      72744163 
 6658      63657373 
 6659 0b24 00000000 		.align 8
 6660              	.LC63:
 6661 0b28 666C4D75 		.string	"flMultiBitPortAccess(): Expecting '+', '-' or '?':\n  %s\n  %s^"
 6661      6C746942 
 6661      6974506F 
 6661      72744163 
 6661      63657373 
 6662 0b66 0000     		.align 8
 6663              	.LC64:
 6664 0b68 666C4D75 		.string	"flMultiBitPortAccess(): Expecting ',' or '\\0' here:\n  %s\n  %s^"
 6664      6C746942 
 6664      6974506F 
 6664      72744163 
 6664      63657373 
 6665              		.text
 6666              		.globl	flMultiBitPortAccess
 6668              	flMultiBitPortAccess:
 6669              	.LFB27:
 997:prog.c        **** 
 998:prog.c        **** DLLEXPORT(FLStatus) flMultiBitPortAccess(
 999:prog.c        **** 	struct FLContext *handle, const char *portConfig, uint32 *readState, const char **error)
1000:prog.c        **** {
 6670              		.loc 2 1000 1
 6671              		.cfi_startproc
 6672 5925 F30F1EFA 		endbr64
 6673 5929 55       		pushq	%rbp
 6674              		.cfi_def_cfa_offset 16
 6675              		.cfi_offset 6, -16
 6676 592a 4889E5   		movq	%rsp, %rbp
 6677              		.cfi_def_cfa_register 6
 6678 592d 4883EC50 		subq	$80, %rsp
 6679 5931 48897DC8 		movq	%rdi, -56(%rbp)
 6680 5935 488975C0 		movq	%rsi, -64(%rbp)
 6681 5939 488955B8 		movq	%rdx, -72(%rbp)
 6682 593d 48894DB0 		movq	%rcx, -80(%rbp)
 6683              		.loc 2 1000 1
 6684 5941 64488B04 		movq	%fs:40, %rax
 6684      25280000 
 6684      00
 6685 594a 488945F8 		movq	%rax, -8(%rbp)
 6686 594e 31C0     		xorl	%eax, %eax
1001:prog.c        **** 	FLStatus retVal = FL_SUCCESS, fStatus;
 6687              		.loc 2 1001 11
 6688 5950 C745E000 		movl	$0, -32(%rbp)
 6688      000000
1002:prog.c        **** 	const char *ptr = portConfig;
 6689              		.loc 2 1002 14
 6690 5957 488B45C0 		movq	-64(%rbp), %rax
 6691 595b 488945F0 		movq	%rax, -16(%rbp)
1003:prog.c        **** 	uint32 result = 0;
 6692              		.loc 2 1003 9
 6693 595f C745E400 		movl	$0, -28(%rbp)
 6693      000000
 6694              	.L392:
1004:prog.c        **** 	uint8 thisPort, thisBit;
1005:prog.c        **** 	char ch;
1006:prog.c        **** 	PinConfig pinConfig;
1007:prog.c        **** 	uint8 bitState;
1008:prog.c        **** 	do {
1009:prog.c        **** 		GET_PAIR(thisPort, thisBit, "flMultiBitPortAccess");
 6695              		.loc 2 1009 3
 6696 5966 488B45F0 		movq	-16(%rbp), %rax
 6697 596a 0FB600   		movzbl	(%rax), %eax
 6698 596d 8845DD   		movb	%al, -35(%rbp)
 6699 5970 807DDD00 		cmpb	$0, -35(%rbp)
 6700 5974 753B     		jne	.L378
 6701              		.loc 2 1009 3 is_stmt 0 discriminator 1
 6702 5976 488B45F0 		movq	-16(%rbp), %rax
 6703 597a 482B45C0 		subq	-64(%rbp), %rax
 6704 597e 4889C7   		movq	%rax, %rdi
 6705 5981 E845A8FF 		call	spaces
 6705      FF
 6706 5986 4889C1   		movq	%rax, %rcx
 6707 5989 488B55C0 		movq	-64(%rbp), %rdx
 6708 598d 488B45B0 		movq	-80(%rbp), %rax
 6709 5991 488D3500 		leaq	.LC60(%rip), %rsi
 6709      000000
 6710 5998 4889C7   		movq	%rax, %rdi
 6711 599b B8000000 		movl	$0, %eax
 6711      00
 6712 59a0 E8000000 		call	errRender@PLT
 6712      00
 6713 59a5 C745E00B 		movl	$11, -32(%rbp)
 6713      000000
 6714 59ac E9850200 		jmp	.L379
 6714      00
 6715              	.L378:
 6716              		.loc 2 1009 3 discriminator 2
 6717 59b1 807DDD40 		cmpb	$64, -35(%rbp)
 6718 59b5 7E06     		jle	.L380
 6719              		.loc 2 1009 3 discriminator 4
 6720 59b7 807DDD5A 		cmpb	$90, -35(%rbp)
 6721 59bb 7E3B     		jle	.L381
 6722              	.L380:
 6723              		.loc 2 1009 3 discriminator 5
 6724 59bd 488B45F0 		movq	-16(%rbp), %rax
 6725 59c1 482B45C0 		subq	-64(%rbp), %rax
 6726 59c5 4889C7   		movq	%rax, %rdi
 6727 59c8 E8FEA7FF 		call	spaces
 6727      FF
 6728 59cd 4889C1   		movq	%rax, %rcx
 6729 59d0 488B55C0 		movq	-64(%rbp), %rdx
 6730 59d4 488B45B0 		movq	-80(%rbp), %rax
 6731 59d8 488D3500 		leaq	.LC61(%rip), %rsi
 6731      000000
 6732 59df 4889C7   		movq	%rax, %rdi
 6733 59e2 B8000000 		movl	$0, %eax
 6733      00
 6734 59e7 E8000000 		call	errRender@PLT
 6734      00
 6735 59ec C745E00B 		movl	$11, -32(%rbp)
 6735      000000
 6736 59f3 E93E0200 		jmp	.L379
 6736      00
 6737              	.L381:
 6738              		.loc 2 1009 3 discriminator 6
 6739 59f8 0FB645DD 		movzbl	-35(%rbp), %eax
 6740 59fc 83E841   		subl	$65, %eax
 6741 59ff 8845DE   		movb	%al, -34(%rbp)
 6742 5a02 488B45F0 		movq	-16(%rbp), %rax
 6743 5a06 4883C001 		addq	$1, %rax
 6744 5a0a 488945F0 		movq	%rax, -16(%rbp)
 6745 5a0e 488B45F0 		movq	-16(%rbp), %rax
 6746 5a12 0FB600   		movzbl	(%rax), %eax
 6747 5a15 8845DD   		movb	%al, -35(%rbp)
 6748 5a18 807DDD00 		cmpb	$0, -35(%rbp)
 6749 5a1c 753B     		jne	.L382
 6750              		.loc 2 1009 3 discriminator 7
 6751 5a1e 488B45F0 		movq	-16(%rbp), %rax
 6752 5a22 482B45C0 		subq	-64(%rbp), %rax
 6753 5a26 4889C7   		movq	%rax, %rdi
 6754 5a29 E89DA7FF 		call	spaces
 6754      FF
 6755 5a2e 4889C1   		movq	%rax, %rcx
 6756 5a31 488B55C0 		movq	-64(%rbp), %rdx
 6757 5a35 488B45B0 		movq	-80(%rbp), %rax
 6758 5a39 488D3500 		leaq	.LC60(%rip), %rsi
 6758      000000
 6759 5a40 4889C7   		movq	%rax, %rdi
 6760 5a43 B8000000 		movl	$0, %eax
 6760      00
 6761 5a48 E8000000 		call	errRender@PLT
 6761      00
 6762 5a4d C745E00B 		movl	$11, -32(%rbp)
 6762      000000
 6763 5a54 E9DD0100 		jmp	.L379
 6763      00
 6764              	.L382:
 6765              		.loc 2 1009 3 discriminator 8
 6766 5a59 807DDD2F 		cmpb	$47, -35(%rbp)
 6767 5a5d 7E06     		jle	.L383
 6768              		.loc 2 1009 3 discriminator 10
 6769 5a5f 807DDD39 		cmpb	$57, -35(%rbp)
 6770 5a63 7E3B     		jle	.L384
 6771              	.L383:
 6772              		.loc 2 1009 3 discriminator 11
 6773 5a65 488B45F0 		movq	-16(%rbp), %rax
 6774 5a69 482B45C0 		subq	-64(%rbp), %rax
 6775 5a6d 4889C7   		movq	%rax, %rdi
 6776 5a70 E856A7FF 		call	spaces
 6776      FF
 6777 5a75 4889C1   		movq	%rax, %rcx
 6778 5a78 488B55C0 		movq	-64(%rbp), %rdx
 6779 5a7c 488B45B0 		movq	-80(%rbp), %rax
 6780 5a80 488D3500 		leaq	.LC62(%rip), %rsi
 6780      000000
 6781 5a87 4889C7   		movq	%rax, %rdi
 6782 5a8a B8000000 		movl	$0, %eax
 6782      00
 6783 5a8f E8000000 		call	errRender@PLT
 6783      00
 6784 5a94 C745E00B 		movl	$11, -32(%rbp)
 6784      000000
 6785 5a9b E9960100 		jmp	.L379
 6785      00
 6786              	.L384:
 6787              		.loc 2 1009 3 discriminator 12
 6788 5aa0 488B45F0 		movq	-16(%rbp), %rax
 6789 5aa4 488D4DF0 		leaq	-16(%rbp), %rcx
 6790 5aa8 BA0A0000 		movl	$10, %edx
 6790      00
 6791 5aad 4889CE   		movq	%rcx, %rsi
 6792 5ab0 4889C7   		movq	%rax, %rdi
 6793 5ab3 E8000000 		call	strtoul@PLT
 6793      00
 6794 5ab8 8845DF   		movb	%al, -33(%rbp)
1010:prog.c        **** 		GET_CHAR("flMultiBitPortAccess");
 6795              		.loc 2 1010 3 is_stmt 1 discriminator 12
 6796 5abb 488B45F0 		movq	-16(%rbp), %rax
 6797 5abf 0FB600   		movzbl	(%rax), %eax
 6798 5ac2 8845DD   		movb	%al, -35(%rbp)
 6799 5ac5 807DDD00 		cmpb	$0, -35(%rbp)
 6800 5ac9 753B     		jne	.L385
 6801              		.loc 2 1010 3 is_stmt 0 discriminator 1
 6802 5acb 488B45F0 		movq	-16(%rbp), %rax
 6803 5acf 482B45C0 		subq	-64(%rbp), %rax
 6804 5ad3 4889C7   		movq	%rax, %rdi
 6805 5ad6 E8F0A6FF 		call	spaces
 6805      FF
 6806 5adb 4889C1   		movq	%rax, %rcx
 6807 5ade 488B55C0 		movq	-64(%rbp), %rdx
 6808 5ae2 488B45B0 		movq	-80(%rbp), %rax
 6809 5ae6 488D3500 		leaq	.LC60(%rip), %rsi
 6809      000000
 6810 5aed 4889C7   		movq	%rax, %rdi
 6811 5af0 B8000000 		movl	$0, %eax
 6811      00
 6812 5af5 E8000000 		call	errRender@PLT
 6812      00
 6813 5afa C745E00B 		movl	$11, -32(%rbp)
 6813      000000
 6814 5b01 E9300100 		jmp	.L379
 6814      00
 6815              	.L385:
1011:prog.c        **** 		if ( ch == '+' ) {
 6816              		.loc 2 1011 6 is_stmt 1
 6817 5b06 807DDD2B 		cmpb	$43, -35(%rbp)
 6818 5b0a 7509     		jne	.L386
1012:prog.c        **** 			pinConfig = PIN_HIGH;
 6819              		.loc 2 1012 14
 6820 5b0c C745E801 		movl	$1, -24(%rbp)
 6820      000000
 6821 5b13 EB59     		jmp	.L387
 6822              	.L386:
1013:prog.c        **** 		} else if ( ch == '-' ) {
 6823              		.loc 2 1013 13
 6824 5b15 807DDD2D 		cmpb	$45, -35(%rbp)
 6825 5b19 7509     		jne	.L388
1014:prog.c        **** 			pinConfig = PIN_LOW;
 6826              		.loc 2 1014 14
 6827 5b1b C745E802 		movl	$2, -24(%rbp)
 6827      000000
 6828 5b22 EB4A     		jmp	.L387
 6829              	.L388:
1015:prog.c        **** 		} else if ( ch == '?' ) {
 6830              		.loc 2 1015 13
 6831 5b24 807DDD3F 		cmpb	$63, -35(%rbp)
 6832 5b28 7509     		jne	.L389
1016:prog.c        **** 			pinConfig = PIN_INPUT;
 6833              		.loc 2 1016 14
 6834 5b2a C745E803 		movl	$3, -24(%rbp)
 6834      000000
 6835 5b31 EB3B     		jmp	.L387
 6836              	.L389:
1017:prog.c        **** 		} else {
1018:prog.c        **** 			CHECK_STATUS(
 6837              		.loc 2 1018 4 discriminator 1
 6838 5b33 488B45F0 		movq	-16(%rbp), %rax
 6839 5b37 482B45C0 		subq	-64(%rbp), %rax
 6840 5b3b 4889C7   		movq	%rax, %rdi
 6841 5b3e E888A6FF 		call	spaces
 6841      FF
 6842 5b43 4889C1   		movq	%rax, %rcx
 6843 5b46 488B55C0 		movq	-64(%rbp), %rdx
 6844 5b4a 488B45B0 		movq	-80(%rbp), %rax
 6845 5b4e 488D3500 		leaq	.LC63(%rip), %rsi
 6845      000000
 6846 5b55 4889C7   		movq	%rax, %rdi
 6847 5b58 B8000000 		movl	$0, %eax
 6847      00
 6848 5b5d E8000000 		call	errRender@PLT
 6848      00
 6849 5b62 C745E00B 		movl	$11, -32(%rbp)
 6849      000000
 6850 5b69 E9C80000 		jmp	.L379
 6850      00
 6851              	.L387:
1019:prog.c        **** 				true, FL_CONF_FORMAT, cleanup,
1020:prog.c        **** 				"flMultiBitPortAccess(): Expecting '+', '-' or '?':\n  %s\n  %s^", portConfig, spaces(ptr-portC
1021:prog.c        **** 		}
1022:prog.c        **** 		fStatus = flSingleBitPortAccess(handle, thisPort, thisBit, pinConfig, &bitState, error);
 6852              		.loc 2 1022 13
 6853 5b6e 8B45E8   		movl	-24(%rbp), %eax
 6854 5b71 0FB6C8   		movzbl	%al, %ecx
 6855 5b74 0FB655DF 		movzbl	-33(%rbp), %edx
 6856 5b78 0FB675DE 		movzbl	-34(%rbp), %esi
 6857 5b7c 4C8B45B0 		movq	-80(%rbp), %r8
 6858 5b80 488D7DDC 		leaq	-36(%rbp), %rdi
 6859 5b84 488B45C8 		movq	-56(%rbp), %rax
 6860 5b88 4D89C1   		movq	%r8, %r9
 6861 5b8b 4989F8   		movq	%rdi, %r8
 6862 5b8e 4889C7   		movq	%rax, %rdi
 6863 5b91 E8000000 		call	flSingleBitPortAccess@PLT
 6863      00
 6864 5b96 8945EC   		movl	%eax, -20(%rbp)
1023:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup);
 6865              		.loc 2 1023 3
 6866 5b99 837DEC00 		cmpl	$0, -20(%rbp)
 6867 5b9d 740B     		je	.L390
 6868              		.loc 2 1023 3 is_stmt 0 discriminator 1
 6869 5b9f 8B45EC   		movl	-20(%rbp), %eax
 6870 5ba2 8945E0   		movl	%eax, -32(%rbp)
 6871 5ba5 E98C0000 		jmp	.L379
 6871      00
 6872              	.L390:
1024:prog.c        **** 		result <<= 1;
 6873              		.loc 2 1024 10 is_stmt 1
 6874 5baa D165E4   		sall	-28(%rbp)
1025:prog.c        **** 		if ( bitState ) {
 6875              		.loc 2 1025 8
 6876 5bad 0FB645DC 		movzbl	-36(%rbp), %eax
 6877              		.loc 2 1025 6
 6878 5bb1 84C0     		testb	%al, %al
 6879 5bb3 7404     		je	.L391
1026:prog.c        **** 			result |= 1;
 6880              		.loc 2 1026 11
 6881 5bb5 834DE401 		orl	$1, -28(%rbp)
 6882              	.L391:
1027:prog.c        **** 		}
1028:prog.c        **** 		ptr++;
 6883              		.loc 2 1028 6
 6884 5bb9 488B45F0 		movq	-16(%rbp), %rax
 6885 5bbd 4883C001 		addq	$1, %rax
 6886 5bc1 488945F0 		movq	%rax, -16(%rbp)
1029:prog.c        **** 		ch = *ptr++;
 6887              		.loc 2 1029 12
 6888 5bc5 488B45F0 		movq	-16(%rbp), %rax
 6889 5bc9 488D5001 		leaq	1(%rax), %rdx
 6890 5bcd 488955F0 		movq	%rdx, -16(%rbp)
 6891              		.loc 2 1029 6
 6892 5bd1 0FB600   		movzbl	(%rax), %eax
 6893 5bd4 8845DD   		movb	%al, -35(%rbp)
1030:prog.c        **** 	} while ( ch == ',' );
 6894              		.loc 2 1030 15
 6895 5bd7 807DDD2C 		cmpb	$44, -35(%rbp)
 6896 5bdb 0F8485FD 		je	.L392
 6896      FFFF
1031:prog.c        **** 	CHECK_STATUS(
 6897              		.loc 2 1031 2
 6898 5be1 807DDD00 		cmpb	$0, -35(%rbp)
 6899 5be5 743C     		je	.L393
 6900              		.loc 2 1031 2 is_stmt 0 discriminator 1
 6901 5be7 488B45F0 		movq	-16(%rbp), %rax
 6902 5beb 482B45C0 		subq	-64(%rbp), %rax
 6903 5bef 4883E801 		subq	$1, %rax
 6904 5bf3 4889C7   		movq	%rax, %rdi
 6905 5bf6 E8D0A5FF 		call	spaces
 6905      FF
 6906 5bfb 4889C1   		movq	%rax, %rcx
 6907 5bfe 488B55C0 		movq	-64(%rbp), %rdx
 6908 5c02 488B45B0 		movq	-80(%rbp), %rax
 6909 5c06 488D3500 		leaq	.LC64(%rip), %rsi
 6909      000000
 6910 5c0d 4889C7   		movq	%rax, %rdi
 6911 5c10 B8000000 		movl	$0, %eax
 6911      00
 6912 5c15 E8000000 		call	errRender@PLT
 6912      00
 6913 5c1a C745E00B 		movl	$11, -32(%rbp)
 6913      000000
 6914 5c21 EB13     		jmp	.L379
 6915              	.L393:
1032:prog.c        **** 		ch != '\0', FL_CONF_FORMAT, cleanup,
1033:prog.c        **** 		"flMultiBitPortAccess(): Expecting ',' or '\\0' here:\n  %s\n  %s^", portConfig, spaces(ptr-portC
1034:prog.c        **** 	if ( readState ) {
 6916              		.loc 2 1034 5 is_stmt 1
 6917 5c23 48837DB8 		cmpq	$0, -72(%rbp)
 6917      00
 6918 5c28 740B     		je	.L396
1035:prog.c        **** 		*readState = result;
 6919              		.loc 2 1035 14
 6920 5c2a 488B45B8 		movq	-72(%rbp), %rax
 6921 5c2e 8B55E4   		movl	-28(%rbp), %edx
 6922 5c31 8910     		movl	%edx, (%rax)
 6923 5c33 EB01     		jmp	.L379
 6924              	.L396:
1036:prog.c        **** 	}
1037:prog.c        **** cleanup:
 6925              		.loc 2 1037 1
 6926 5c35 90       		nop
 6927              	.L379:
1038:prog.c        **** 	return retVal;
 6928              		.loc 2 1038 9
 6929 5c36 8B45E0   		movl	-32(%rbp), %eax
1039:prog.c        **** }
 6930              		.loc 2 1039 1
 6931 5c39 488B55F8 		movq	-8(%rbp), %rdx
 6932 5c3d 64482B14 		subq	%fs:40, %rdx
 6932      25280000 
 6932      00
 6933 5c46 7405     		je	.L395
 6934 5c48 E8000000 		call	__stack_chk_fail@PLT
 6934      00
 6935              	.L395:
 6936 5c4d C9       		leave
 6937              		.cfi_def_cfa 7, 8
 6938 5c4e C3       		ret
 6939              		.cfi_endproc
 6940              	.LFE27:
 6942              	.Letext0:
 6943              		.file 3 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h"
 6944              		.file 4 "/home/pong/FPGALink/makestuff/libs/libusbwrap/libusbwrap.h"
 6945              		.file 5 "libfpgalink.h"
 6946              		.file 6 "/home/pong/FPGALink/makestuff/libs/libbuffer/libbuffer.h"
 6947              		.file 7 "private.h"
 6948              		.file 8 "vendorCommands.h"
 6949              		.file 9 "/usr/include/string.h"
 6950              		.file 10 "csvfplay.h"
 6951              		.file 11 "/usr/include/stdlib.h"
 6952              		.file 12 "/home/pong/FPGALink/makestuff/libs/liberror/liberror.h"
 11544              		.section	.note.gnu.property,"a"
 11545              		.align 8
 11546 0000 04000000 		.long	1f - 0f
 11547 0004 10000000 		.long	4f - 1f
 11548 0008 05000000 		.long	5
 11549              	0:
 11550 000c 474E5500 		.string	"GNU"
 11551              	1:
 11552              		.align 8
 11553 0010 020000C0 		.long	0xc0000002
 11554 0014 04000000 		.long	3f - 2f
 11555              	2:
 11556 0018 03000000 		.long	0x3
 11557              	3:
 11558 001c 00000000 		.align 8
 11559              	4:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 prog.c
     /tmp/cckWQPOy.s:6      .text:0000000000000000 littleEndian32
     /tmp/cckWQPOy.s:31     .text:000000000000000c beginShift
     /tmp/cckWQPOy.s:112    .text:00000000000000c7 doSend
     /tmp/cckWQPOy.s:175    .text:0000000000000149 doReceive
     /tmp/cckWQPOy.s:239    .text:00000000000001cb spaces
     /tmp/cckWQPOy.s:284    .text:00000000000001f7 populateMap
     /tmp/cckWQPOy.s:623    .text:0000000000000613 portMap
     /tmp/cckWQPOy.s:693    .text:00000000000006b5 makeLookup
     /tmp/cckWQPOy.s:924    .text:0000000000000876 dataWrite
     /tmp/cckWQPOy.s:1151   .text:0000000000000a53 xProgram
     /tmp/cckWQPOy.s:6554   .text:0000000000005834 flSingleBitPortAccess
     /tmp/cckWQPOy.s:2861   .text:00000000000026ac aProgram
     /tmp/cckWQPOy.s:4001   .text:000000000000398c progOpenInternal
     /tmp/cckWQPOy.s:4861   .text:0000000000004808 jProgram
     /tmp/cckWQPOy.s:5095   .text:0000000000004a22 progClose
     /tmp/cckWQPOy.s:4998   .text:0000000000004985 swap
     /tmp/cckWQPOy.s:5061   .text:00000000000049f0 progOpen
     /tmp/cckWQPOy.s:5252   .text:0000000000004bb5 jtagShiftInOut
     /tmp/cckWQPOy.s:5490   .text:0000000000004dff jtagShiftInOnly
     /tmp/cckWQPOy.s:5664   .text:0000000000004f84 jtagClockFSM
     /tmp/cckWQPOy.s:5742   .text:000000000000503b jtagClocks
     /tmp/cckWQPOy.s:5808   .text:00000000000050c2 jtagScanChain
     /tmp/cckWQPOy.s:6024   .text:00000000000052bc flProgramBlob
     /tmp/cckWQPOy.s:6227   .text:00000000000054ba flProgram
     /tmp/cckWQPOy.s:6544   .rodata:0000000000000a30 indexValues
     /tmp/cckWQPOy.s:6668   .text:0000000000005925 flMultiBitPortAccess

UNDEFINED SYMBOLS
usbControlWrite
errPrefix
__stack_chk_fail
usbBulkWrite
usbBulkRead
errRender
strtoul
flSelectConduit
csvfPlay
bufInitialise
strlen
strcmp
flLoadSvfAndConvertToCsvf
flLoadXsvfAndConvertToCsvf
bufAppendFromBinaryFile
bufDestroy
usbControlRead
