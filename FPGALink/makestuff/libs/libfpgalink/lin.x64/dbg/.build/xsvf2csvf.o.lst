   1              		.file	"xsvf2csvf.c"
   2              		.text
   3              	.Ltext0:
   4              		.file 0 "/home/pong/FPGALink/makestuff/libs/libfpgalink" "xsvf2csvf.c"
   6              	getNextByte:
   7              	.LFB4:
   8              		.file 1 "xsvf2csvf.c"
   1:xsvf2csvf.c   **** /*
   2:xsvf2csvf.c   ****  * Copyright (C) 2009-2012 Chris McClelland
   3:xsvf2csvf.c   ****  *
   4:xsvf2csvf.c   ****  * This program is free software: you can redistribute it and/or modify
   5:xsvf2csvf.c   ****  * it under the terms of the GNU Lesser General Public License as published by
   6:xsvf2csvf.c   ****  * the Free Software Foundation, either version 3 of the License, or
   7:xsvf2csvf.c   ****  * (at your option) any later version.
   8:xsvf2csvf.c   ****  *
   9:xsvf2csvf.c   ****  * This program is distributed in the hope that it will be useful,
  10:xsvf2csvf.c   ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:xsvf2csvf.c   ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:xsvf2csvf.c   ****  * GNU Lesser General Public License for more details.
  13:xsvf2csvf.c   ****  *
  14:xsvf2csvf.c   ****  * You should have received a copy of the GNU Lesser General Public License
  15:xsvf2csvf.c   ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:xsvf2csvf.c   ****  */
  17:xsvf2csvf.c   **** #include <makestuff.h>
  18:xsvf2csvf.c   **** #include <libfpgalink.h>
  19:xsvf2csvf.c   **** #include <libbuffer.h>
  20:xsvf2csvf.c   **** #include <liberror.h>
  21:xsvf2csvf.c   **** #include "xsvf.h"
  22:xsvf2csvf.c   **** #include "private.h"
  23:xsvf2csvf.c   **** 
  24:xsvf2csvf.c   **** #define ENABLE_SWAP
  25:xsvf2csvf.c   **** 
  26:xsvf2csvf.c   **** // Global buffer and offset used to implement the iterator
  27:xsvf2csvf.c   **** //
  28:xsvf2csvf.c   **** typedef struct {
  29:xsvf2csvf.c   **** 	struct Buffer xsvfBuf;
  30:xsvf2csvf.c   **** 	uint32 offset;
  31:xsvf2csvf.c   **** } XC;
  32:xsvf2csvf.c   **** 
  33:xsvf2csvf.c   **** // The buffer iterator. TODO: refactor to return error code on end of buffer.
  34:xsvf2csvf.c   **** //
  35:xsvf2csvf.c   **** static uint8 getNextByte(XC *xc) {
   9              		.loc 1 35 34
  10              		.cfi_startproc
  11 0000 F30F1EFA 		endbr64
  12 0004 55       		pushq	%rbp
  13              		.cfi_def_cfa_offset 16
  14              		.cfi_offset 6, -16
  15 0005 4889E5   		movq	%rsp, %rbp
  16              		.cfi_def_cfa_register 6
  17 0008 48897DF8 		movq	%rdi, -8(%rbp)
  36:xsvf2csvf.c   **** 	return xc->xsvfBuf.data[xc->offset++];
  18              		.loc 1 36 20
  19 000c 488B45F8 		movq	-8(%rbp), %rax
  20 0010 488B30   		movq	(%rax), %rsi
  21              		.loc 1 36 28
  22 0013 488B45F8 		movq	-8(%rbp), %rax
  23 0017 8B4020   		movl	32(%rax), %eax
  24              		.loc 1 36 36
  25 001a 8D4801   		leal	1(%rax), %ecx
  26 001d 488B55F8 		movq	-8(%rbp), %rdx
  27 0021 894A20   		movl	%ecx, 32(%rdx)
  28 0024 89C0     		movl	%eax, %eax
  29              		.loc 1 36 25
  30 0026 4801F0   		addq	%rsi, %rax
  31 0029 0FB600   		movzbl	(%rax), %eax
  37:xsvf2csvf.c   **** }
  32              		.loc 1 37 1
  33 002c 5D       		popq	%rbp
  34              		.cfi_def_cfa 7, 8
  35 002d C3       		ret
  36              		.cfi_endproc
  37              	.LFE4:
  39              		.section	.rodata
  40              	.LC0:
  41 0000 73776170 		.string	"swapBytes()"
  41      42797465 
  41      73282900 
  42              		.text
  44              	swapBytes:
  45              	.LFB5:
  38:xsvf2csvf.c   **** 
  39:xsvf2csvf.c   **** // Read "numBytes" bytes from the stream and write them out in reverse order to the supplied buffer
  40:xsvf2csvf.c   **** // "outBuf". If ENABLE_SWAP is undefined, no swapping is done.
  41:xsvf2csvf.c   **** //
  42:xsvf2csvf.c   **** static FLStatus swapBytes(XC *xc, uint32 numBytes, struct Buffer *outBuf, const char **error) {
  46              		.loc 1 42 95
  47              		.cfi_startproc
  48 002e F30F1EFA 		endbr64
  49 0032 55       		pushq	%rbp
  50              		.cfi_def_cfa_offset 16
  51              		.cfi_offset 6, -16
  52 0033 4889E5   		movq	%rsp, %rbp
  53              		.cfi_def_cfa_register 6
  54 0036 53       		pushq	%rbx
  55 0037 4883EC38 		subq	$56, %rsp
  56              		.cfi_offset 3, -24
  57 003b 48897DD8 		movq	%rdi, -40(%rbp)
  58 003f 8975D4   		movl	%esi, -44(%rbp)
  59 0042 488955C8 		movq	%rdx, -56(%rbp)
  60 0046 48894DC0 		movq	%rcx, -64(%rbp)
  43:xsvf2csvf.c   **** 	FLStatus retVal = FL_SUCCESS;
  61              		.loc 1 43 11
  62 004a C745E000 		movl	$0, -32(%rbp)
  62      000000
  44:xsvf2csvf.c   **** 	uint8 *ptr;
  45:xsvf2csvf.c   **** 	BufferStatus bStatus;
  46:xsvf2csvf.c   **** 	#ifdef ENABLE_SWAP
  47:xsvf2csvf.c   **** 		bStatus = bufAppendConst(outBuf, 0x00, numBytes, error);
  63              		.loc 1 47 13
  64 0051 8B55D4   		movl	-44(%rbp), %edx
  65 0054 488B4DC0 		movq	-64(%rbp), %rcx
  66 0058 488B45C8 		movq	-56(%rbp), %rax
  67 005c BE000000 		movl	$0, %esi
  67      00
  68 0061 4889C7   		movq	%rax, %rdi
  69 0064 E8000000 		call	bufAppendConst@PLT
  69      00
  70 0069 8945E4   		movl	%eax, -28(%rbp)
  48:xsvf2csvf.c   **** 		CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "swapBytes()");
  71              		.loc 1 48 3
  72 006c 837DE400 		cmpl	$0, -28(%rbp)
  73 0070 741F     		je	.L4
  74              		.loc 1 48 3 is_stmt 0 discriminator 1
  75 0072 488B45C0 		movq	-64(%rbp), %rax
  76 0076 488D1500 		leaq	.LC0(%rip), %rdx
  76      000000
  77 007d 4889D6   		movq	%rdx, %rsi
  78 0080 4889C7   		movq	%rax, %rdi
  79 0083 E8000000 		call	errPrefix@PLT
  79      00
  80 0088 C745E001 		movl	$1, -32(%rbp)
  80      000000
  81 008f EB44     		jmp	.L5
  82              	.L4:
  49:xsvf2csvf.c   **** 		ptr = outBuf->data + outBuf->length - 1;
  83              		.loc 1 49 15 is_stmt 1
  84 0091 488B45C8 		movq	-56(%rbp), %rax
  85 0095 488B10   		movq	(%rax), %rdx
  86              		.loc 1 49 30
  87 0098 488B45C8 		movq	-56(%rbp), %rax
  88 009c 488B4008 		movq	8(%rax), %rax
  89              		.loc 1 49 39
  90 00a0 4883E801 		subq	$1, %rax
  91              		.loc 1 49 7
  92 00a4 4801D0   		addq	%rdx, %rax
  93 00a7 488945E8 		movq	%rax, -24(%rbp)
  50:xsvf2csvf.c   **** 		while ( numBytes-- ) {
  94              		.loc 1 50 9
  95 00ab EB1A     		jmp	.L6
  96              	.L7:
  51:xsvf2csvf.c   **** 			*ptr-- = getNextByte(xc);
  97              		.loc 1 51 8
  98 00ad 488B5DE8 		movq	-24(%rbp), %rbx
  99 00b1 488D43FF 		leaq	-1(%rbx), %rax
 100 00b5 488945E8 		movq	%rax, -24(%rbp)
 101              		.loc 1 51 13
 102 00b9 488B45D8 		movq	-40(%rbp), %rax
 103 00bd 4889C7   		movq	%rax, %rdi
 104 00c0 E83BFFFF 		call	getNextByte
 104      FF
 105              		.loc 1 51 11
 106 00c5 8803     		movb	%al, (%rbx)
 107              	.L6:
  50:xsvf2csvf.c   **** 		while ( numBytes-- ) {
 108              		.loc 1 50 19
 109 00c7 8B45D4   		movl	-44(%rbp), %eax
 110 00ca 8D50FF   		leal	-1(%rax), %edx
 111 00cd 8955D4   		movl	%edx, -44(%rbp)
  50:xsvf2csvf.c   **** 		while ( numBytes-- ) {
 112              		.loc 1 50 11
 113 00d0 85C0     		testl	%eax, %eax
 114 00d2 75D9     		jne	.L7
  52:xsvf2csvf.c   **** 		}
  53:xsvf2csvf.c   **** 	#else
  54:xsvf2csvf.c   **** 		const uint32 initLength = outBuf->length;
  55:xsvf2csvf.c   **** 		bStatus = bufAppendConst(outBuf, 0x00, numBytes, error);
  56:xsvf2csvf.c   **** 		CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "swapBytes()");
  57:xsvf2csvf.c   **** 		ptr = outBuf->data + initLength - 1;
  58:xsvf2csvf.c   **** 		while ( numBytes-- ) {
  59:xsvf2csvf.c   **** 			*ptr++ = getNextByte(xc);
  60:xsvf2csvf.c   **** 		}
  61:xsvf2csvf.c   **** 	#endif
  62:xsvf2csvf.c   **** cleanup:
 115              		.loc 1 62 1
 116 00d4 90       		nop
 117              	.L5:
  63:xsvf2csvf.c   **** 	return retVal;
 118              		.loc 1 63 9
 119 00d5 8B45E0   		movl	-32(%rbp), %eax
  64:xsvf2csvf.c   **** }
 120              		.loc 1 64 1
 121 00d8 488B5DF8 		movq	-8(%rbp), %rbx
 122 00dc C9       		leave
 123              		.cfi_def_cfa 7, 8
 124 00dd C3       		ret
 125              		.cfi_endproc
 126              	.LFE5:
 128              		.section	.rodata
 129              	.LC1:
 130 000c 73776170 		.string	"swapAndInterleaveBytes()"
 130      416E6449 
 130      6E746572 
 130      6C656176 
 130      65427974 
 131              		.text
 133              	swapAndInterleaveBytes:
 134              	.LFB6:
  65:xsvf2csvf.c   **** 
  66:xsvf2csvf.c   **** // Reverse and interleave the incoming tdi, tdoExpected arrays:
  67:xsvf2csvf.c   **** // 0123456789ABCDEFGHIJ -> 9J8I7H6G5F4E3D2C1B0A
  68:xsvf2csvf.c   **** //
  69:xsvf2csvf.c   **** static FLStatus swapAndInterleaveBytes(XC *xc, uint32 numBytes, struct Buffer *outBuf, const char *
 135              		.loc 1 69 108
 136              		.cfi_startproc
 137 00de F30F1EFA 		endbr64
 138 00e2 55       		pushq	%rbp
 139              		.cfi_def_cfa_offset 16
 140              		.cfi_offset 6, -16
 141 00e3 4889E5   		movq	%rsp, %rbp
 142              		.cfi_def_cfa_register 6
 143 00e6 4883EC40 		subq	$64, %rsp
 144 00ea 48897DD8 		movq	%rdi, -40(%rbp)
 145 00ee 8975D4   		movl	%esi, -44(%rbp)
 146 00f1 488955C8 		movq	%rdx, -56(%rbp)
 147 00f5 48894DC0 		movq	%rcx, -64(%rbp)
  70:xsvf2csvf.c   **** 	FLStatus retVal = FL_SUCCESS;
 148              		.loc 1 70 11
 149 00f9 C745EC00 		movl	$0, -20(%rbp)
 149      000000
  71:xsvf2csvf.c   **** 	uint8 *ptr;
  72:xsvf2csvf.c   **** 	BufferStatus bStatus;
  73:xsvf2csvf.c   **** 	uint32 i = numBytes;
 150              		.loc 1 73 9
 151 0100 8B45D4   		movl	-44(%rbp), %eax
 152 0103 8945F0   		movl	%eax, -16(%rbp)
  74:xsvf2csvf.c   **** 	bStatus = bufAppendConst(outBuf, 0x00, numBytes*2, error);
 153              		.loc 1 74 49
 154 0106 8B45D4   		movl	-44(%rbp), %eax
 155 0109 01C0     		addl	%eax, %eax
 156              		.loc 1 74 12
 157 010b 89C6     		movl	%eax, %esi
 158 010d 488B55C0 		movq	-64(%rbp), %rdx
 159 0111 488B45C8 		movq	-56(%rbp), %rax
 160 0115 4889D1   		movq	%rdx, %rcx
 161 0118 4889F2   		movq	%rsi, %rdx
 162 011b BE000000 		movl	$0, %esi
 162      00
 163 0120 4889C7   		movq	%rax, %rdi
 164 0123 E8000000 		call	bufAppendConst@PLT
 164      00
 165 0128 8945F4   		movl	%eax, -12(%rbp)
  75:xsvf2csvf.c   **** 	CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "swapAndInterleaveBytes()");
 166              		.loc 1 75 2
 167 012b 837DF400 		cmpl	$0, -12(%rbp)
 168 012f 7422     		je	.L10
 169              		.loc 1 75 2 is_stmt 0 discriminator 1
 170 0131 488B45C0 		movq	-64(%rbp), %rax
 171 0135 488D1500 		leaq	.LC1(%rip), %rdx
 171      000000
 172 013c 4889D6   		movq	%rdx, %rsi
 173 013f 4889C7   		movq	%rax, %rdi
 174 0142 E8000000 		call	errPrefix@PLT
 174      00
 175 0147 C745EC01 		movl	$1, -20(%rbp)
 175      000000
 176 014e E9870000 		jmp	.L11
 176      00
 177              	.L10:
  76:xsvf2csvf.c   **** 	ptr = outBuf->data + outBuf->length - 2;
 178              		.loc 1 76 14 is_stmt 1
 179 0153 488B45C8 		movq	-56(%rbp), %rax
 180 0157 488B10   		movq	(%rax), %rdx
 181              		.loc 1 76 29
 182 015a 488B45C8 		movq	-56(%rbp), %rax
 183 015e 488B4008 		movq	8(%rax), %rax
 184              		.loc 1 76 38
 185 0162 4883E802 		subq	$2, %rax
 186              		.loc 1 76 6
 187 0166 4801D0   		addq	%rdx, %rax
 188 0169 488945F8 		movq	%rax, -8(%rbp)
  77:xsvf2csvf.c   **** 	while ( i-- ) {
 189              		.loc 1 77 8
 190 016d EB17     		jmp	.L12
 191              	.L13:
  78:xsvf2csvf.c   **** 		*ptr = getNextByte(xc);
 192              		.loc 1 78 10
 193 016f 488B45D8 		movq	-40(%rbp), %rax
 194 0173 4889C7   		movq	%rax, %rdi
 195 0176 E885FEFF 		call	getNextByte
 195      FF
 196              		.loc 1 78 8
 197 017b 488B55F8 		movq	-8(%rbp), %rdx
 198 017f 8802     		movb	%al, (%rdx)
  79:xsvf2csvf.c   **** 		ptr -= 2;
 199              		.loc 1 79 7
 200 0181 48836DF8 		subq	$2, -8(%rbp)
 200      02
 201              	.L12:
  77:xsvf2csvf.c   **** 	while ( i-- ) {
 202              		.loc 1 77 11
 203 0186 8B45F0   		movl	-16(%rbp), %eax
 204 0189 8D50FF   		leal	-1(%rax), %edx
 205 018c 8955F0   		movl	%edx, -16(%rbp)
  77:xsvf2csvf.c   **** 	while ( i-- ) {
 206              		.loc 1 77 10
 207 018f 85C0     		testl	%eax, %eax
 208 0191 75DC     		jne	.L13
  80:xsvf2csvf.c   **** 	}
  81:xsvf2csvf.c   **** 	i = numBytes;
 209              		.loc 1 81 4
 210 0193 8B45D4   		movl	-44(%rbp), %eax
 211 0196 8945F0   		movl	%eax, -16(%rbp)
  82:xsvf2csvf.c   **** 	ptr = outBuf->data + outBuf->length - 1;
 212              		.loc 1 82 14
 213 0199 488B45C8 		movq	-56(%rbp), %rax
 214 019d 488B10   		movq	(%rax), %rdx
 215              		.loc 1 82 29
 216 01a0 488B45C8 		movq	-56(%rbp), %rax
 217 01a4 488B4008 		movq	8(%rax), %rax
 218              		.loc 1 82 38
 219 01a8 4883E801 		subq	$1, %rax
 220              		.loc 1 82 6
 221 01ac 4801D0   		addq	%rdx, %rax
 222 01af 488945F8 		movq	%rax, -8(%rbp)
  83:xsvf2csvf.c   **** 	while ( i-- ) {
 223              		.loc 1 83 8
 224 01b3 EB17     		jmp	.L14
 225              	.L15:
  84:xsvf2csvf.c   **** 		*ptr = getNextByte(xc);
 226              		.loc 1 84 10
 227 01b5 488B45D8 		movq	-40(%rbp), %rax
 228 01b9 4889C7   		movq	%rax, %rdi
 229 01bc E83FFEFF 		call	getNextByte
 229      FF
 230              		.loc 1 84 8
 231 01c1 488B55F8 		movq	-8(%rbp), %rdx
 232 01c5 8802     		movb	%al, (%rdx)
  85:xsvf2csvf.c   **** 		ptr -= 2;
 233              		.loc 1 85 7
 234 01c7 48836DF8 		subq	$2, -8(%rbp)
 234      02
 235              	.L14:
  83:xsvf2csvf.c   **** 	while ( i-- ) {
 236              		.loc 1 83 11
 237 01cc 8B45F0   		movl	-16(%rbp), %eax
 238 01cf 8D50FF   		leal	-1(%rax), %edx
 239 01d2 8955F0   		movl	%edx, -16(%rbp)
  83:xsvf2csvf.c   **** 	while ( i-- ) {
 240              		.loc 1 83 10
 241 01d5 85C0     		testl	%eax, %eax
 242 01d7 75DC     		jne	.L15
  86:xsvf2csvf.c   **** 	}
  87:xsvf2csvf.c   **** cleanup:
 243              		.loc 1 87 1
 244 01d9 90       		nop
 245              	.L11:
  88:xsvf2csvf.c   **** 	return retVal;
 246              		.loc 1 88 9
 247 01da 8B45EC   		movl	-20(%rbp), %eax
  89:xsvf2csvf.c   **** }
 248              		.loc 1 89 1
 249 01dd C9       		leave
 250              		.cfi_def_cfa 7, 8
 251 01de C3       		ret
 252              		.cfi_endproc
 253              	.LFE6:
 255              		.section	.rodata
 256              	.LC2:
 257 0025 73656E64 		.string	"sendXSize()"
 257      5853697A 
 257      65282900 
 258              		.text
 260              	sendXSize:
 261              	.LFB7:
  90:xsvf2csvf.c   **** 
  91:xsvf2csvf.c   **** static FLStatus sendXSize(struct Buffer *outBuf, uint32 xSize, const char **error) {
 262              		.loc 1 91 84
 263              		.cfi_startproc
 264 01df F30F1EFA 		endbr64
 265 01e3 55       		pushq	%rbp
 266              		.cfi_def_cfa_offset 16
 267              		.cfi_offset 6, -16
 268 01e4 4889E5   		movq	%rsp, %rbp
 269              		.cfi_def_cfa_register 6
 270 01e7 4883EC30 		subq	$48, %rsp
 271 01eb 48897DE8 		movq	%rdi, -24(%rbp)
 272 01ef 8975E4   		movl	%esi, -28(%rbp)
 273 01f2 488955D8 		movq	%rdx, -40(%rbp)
  92:xsvf2csvf.c   **** 	FLStatus retVal = FL_SUCCESS;
 274              		.loc 1 92 11
 275 01f6 C745F800 		movl	$0, -8(%rbp)
 275      000000
  93:xsvf2csvf.c   **** 	BufferStatus bStatus;
  94:xsvf2csvf.c   **** 	bStatus = bufAppendByte(outBuf, XSDRSIZE, error);
 276              		.loc 1 94 12
 277 01fd 488B55D8 		movq	-40(%rbp), %rdx
 278 0201 488B45E8 		movq	-24(%rbp), %rax
 279 0205 BE080000 		movl	$8, %esi
 279      00
 280 020a 4889C7   		movq	%rax, %rdi
 281 020d E8000000 		call	bufAppendByte@PLT
 281      00
 282 0212 8945FC   		movl	%eax, -4(%rbp)
  95:xsvf2csvf.c   **** 	CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "sendXSize()");
 283              		.loc 1 95 2
 284 0215 837DFC00 		cmpl	$0, -4(%rbp)
 285 0219 741F     		je	.L18
 286              		.loc 1 95 2 is_stmt 0 discriminator 1
 287 021b 488B45D8 		movq	-40(%rbp), %rax
 288 021f 488D1500 		leaq	.LC2(%rip), %rdx
 288      000000
 289 0226 4889D6   		movq	%rdx, %rsi
 290 0229 4889C7   		movq	%rax, %rdi
 291 022c E8000000 		call	errPrefix@PLT
 291      00
 292 0231 C745F801 		movl	$1, -8(%rbp)
 292      000000
 293 0238 EB3E     		jmp	.L19
 294              	.L18:
  96:xsvf2csvf.c   **** 	bStatus = bufAppendLongBE(outBuf, xSize, error);
 295              		.loc 1 96 12 is_stmt 1
 296 023a 488B55D8 		movq	-40(%rbp), %rdx
 297 023e 8B4DE4   		movl	-28(%rbp), %ecx
 298 0241 488B45E8 		movq	-24(%rbp), %rax
 299 0245 89CE     		movl	%ecx, %esi
 300 0247 4889C7   		movq	%rax, %rdi
 301 024a E8000000 		call	bufAppendLongBE@PLT
 301      00
 302 024f 8945FC   		movl	%eax, -4(%rbp)
  97:xsvf2csvf.c   **** 	CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "sendXSize()");
 303              		.loc 1 97 2
 304 0252 837DFC00 		cmpl	$0, -4(%rbp)
 305 0256 741F     		je	.L21
 306              		.loc 1 97 2 is_stmt 0 discriminator 1
 307 0258 488B45D8 		movq	-40(%rbp), %rax
 308 025c 488D1500 		leaq	.LC2(%rip), %rdx
 308      000000
 309 0263 4889D6   		movq	%rdx, %rsi
 310 0266 4889C7   		movq	%rax, %rdi
 311 0269 E8000000 		call	errPrefix@PLT
 311      00
 312 026e C745F801 		movl	$1, -8(%rbp)
 312      000000
 313 0275 EB01     		jmp	.L19
 314              	.L21:
  98:xsvf2csvf.c   **** cleanup:
 315              		.loc 1 98 1 is_stmt 1
 316 0277 90       		nop
 317              	.L19:
  99:xsvf2csvf.c   **** 	return retVal;
 318              		.loc 1 99 9
 319 0278 8B45F8   		movl	-8(%rbp), %eax
 100:xsvf2csvf.c   **** }
 320              		.loc 1 100 1
 321 027b C9       		leave
 322              		.cfi_def_cfa 7, 8
 323 027c C3       		ret
 324              		.cfi_endproc
 325              	.LFE7:
 327              		.section	.rodata
 328              	.LC3:
 329 0031 78737666 		.string	"xsvfSwapBytes()"
 329      53776170 
 329      42797465 
 329      73282900 
 330 0041 00000000 		.align 8
 330      000000
 331              	.LC4:
 332 0048 78737666 		.string	"xsvfSwapBytes(): Previous mask was nonzero, but no room to compare %d bytes"
 332      53776170 
 332      42797465 
 332      7328293A 
 332      20507265 
 333 0094 00000000 		.align 8
 334              	.LC5:
 335 0098 78737666 		.string	"xsvfSwapBytes(): Only XENDIR(TAPSTATE_RUN_TEST_IDLE) is supported!"
 335      53776170 
 335      42797465 
 335      7328293A 
 335      204F6E6C 
 336 00db 00000000 		.align 8
 336      00
 337              	.LC6:
 338 00e0 78737666 		.string	"xsvfSwapBytes(): Only XENDDR(TAPSTATE_RUN_TEST_IDLE) is supported!"
 338      53776170 
 338      42797465 
 338      7328293A 
 338      204F6E6C 
 339 0123 00000000 		.align 8
 339      00
 340              	.LC7:
 341 0128 78737666 		.string	"xsvfSwapBytes(): Unsupported command 0x%02X!"
 341      53776170 
 341      42797465 
 341      7328293A 
 341      20556E73 
 342              		.text
 344              	xsvfSwapBytes:
 345              	.LFB8:
 101:xsvf2csvf.c   **** 
 102:xsvf2csvf.c   **** // Parse the XSVF, reversing the byte-ordering of all the bytestreams.
 103:xsvf2csvf.c   **** //
 104:xsvf2csvf.c   **** static FLStatus xsvfSwapBytes(XC *xc, struct Buffer *outBuf, uint32 *maxBufSize, const char **error
 346              		.loc 1 104 102
 347              		.cfi_startproc
 348 027d F30F1EFA 		endbr64
 349 0281 55       		pushq	%rbp
 350              		.cfi_def_cfa_offset 16
 351              		.cfi_offset 6, -16
 352 0282 4889E5   		movq	%rsp, %rbp
 353              		.cfi_def_cfa_register 6
 354 0285 4883EC60 		subq	$96, %rsp
 355 0289 48897DB8 		movq	%rdi, -72(%rbp)
 356 028d 488975B0 		movq	%rsi, -80(%rbp)
 357 0291 488955A8 		movq	%rdx, -88(%rbp)
 358 0295 48894DA0 		movq	%rcx, -96(%rbp)
 359              		.loc 1 104 102
 360 0299 64488B04 		movq	%fs:40, %rax
 360      25280000 
 360      00
 361 02a2 488945F8 		movq	%rax, -8(%rbp)
 362 02a6 31C0     		xorl	%eax, %eax
 105:xsvf2csvf.c   **** 	FLStatus fStatus, retVal = FL_SUCCESS;
 363              		.loc 1 105 20
 364 02a8 C745C800 		movl	$0, -56(%rbp)
 364      000000
 106:xsvf2csvf.c   **** 	uint32 newXSize = 0, curXSize = 0, totOffset = 0;
 365              		.loc 1 106 9
 366 02af C745CC00 		movl	$0, -52(%rbp)
 366      000000
 367              		.loc 1 106 23
 368 02b6 C745D000 		movl	$0, -48(%rbp)
 368      000000
 369              		.loc 1 106 37
 370 02bd C745D400 		movl	$0, -44(%rbp)
 370      000000
 107:xsvf2csvf.c   **** 	uint32 numBytes;
 108:xsvf2csvf.c   **** 	BufferStatus bStatus;
 109:xsvf2csvf.c   **** 	uint8 thisByte;
 110:xsvf2csvf.c   **** 	uint32 dummy;
 111:xsvf2csvf.c   **** 	bool zeroMask = false;
 371              		.loc 1 111 7
 372 02c4 C645C300 		movb	$0, -61(%rbp)
 112:xsvf2csvf.c   **** 
 113:xsvf2csvf.c   **** 	if ( !maxBufSize ) {
 373              		.loc 1 113 5
 374 02c8 48837DA8 		cmpq	$0, -88(%rbp)
 374      00
 375 02cd 7508     		jne	.L23
 114:xsvf2csvf.c   **** 		maxBufSize = &dummy;
 376              		.loc 1 114 14
 377 02cf 488D45C4 		leaq	-60(%rbp), %rax
 378 02d3 488945A8 		movq	%rax, -88(%rbp)
 379              	.L23:
 115:xsvf2csvf.c   **** 	}
 116:xsvf2csvf.c   **** 	*maxBufSize = 0;
 380              		.loc 1 116 14
 381 02d7 488B45A8 		movq	-88(%rbp), %rax
 382 02db C7000000 		movl	$0, (%rax)
 382      0000
 117:xsvf2csvf.c   **** 	thisByte = getNextByte(xc);
 383              		.loc 1 117 13
 384 02e1 488B45B8 		movq	-72(%rbp), %rax
 385 02e5 4889C7   		movq	%rax, %rdi
 386 02e8 E813FDFF 		call	getNextByte
 386      FF
 387 02ed 8845C2   		movb	%al, -62(%rbp)
 118:xsvf2csvf.c   **** 	while ( thisByte != XCOMPLETE ) {
 388              		.loc 1 118 8
 389 02f0 E9C50900 		jmp	.L24
 389      00
 390              	.L92:
 119:xsvf2csvf.c   **** 		switch ( thisByte ) {
 391              		.loc 1 119 3
 392 02f5 0FB645C2 		movzbl	-62(%rbp), %eax
 393 02f9 83F814   		cmpl	$20, %eax
 394 02fc 0F876809 		ja	.L95
 394      0000
 395 0302 89C0     		movl	%eax, %eax
 396 0304 488D1485 		leaq	0(,%rax,4), %rdx
 396      00000000 
 397 030c 488D0500 		leaq	.L27(%rip), %rax
 397      000000
 398 0313 8B0402   		movl	(%rdx,%rax), %eax
 399 0316 4898     		cltq
 400 0318 488D1500 		leaq	.L27(%rip), %rdx
 400      000000
 401 031f 4801D0   		addq	%rdx, %rax
 402 0322 3EFFE0   		notrack jmp	*%rax
 403              		.section	.rodata
 404 0155 000000   		.align 4
 405              		.align 4
 406              	.L27:
 407 0158 00000000 		.long	.L95-.L27
 408 015c 00000000 		.long	.L39-.L27
 409 0160 00000000 		.long	.L38-.L27
 410 0164 00000000 		.long	.L37-.L27
 411 0168 00000000 		.long	.L36-.L27
 412 016c 00000000 		.long	.L95-.L27
 413 0170 00000000 		.long	.L95-.L27
 414 0174 00000000 		.long	.L35-.L27
 415 0178 00000000 		.long	.L34-.L27
 416 017c 00000000 		.long	.L33-.L27
 417 0180 00000000 		.long	.L95-.L27
 418 0184 00000000 		.long	.L95-.L27
 419 0188 00000000 		.long	.L32-.L27
 420 018c 00000000 		.long	.L31-.L27
 421 0190 00000000 		.long	.L30-.L27
 422 0194 00000000 		.long	.L95-.L27
 423 0198 00000000 		.long	.L95-.L27
 424 019c 00000000 		.long	.L95-.L27
 425 01a0 00000000 		.long	.L29-.L27
 426 01a4 00000000 		.long	.L28-.L27
 427 01a8 00000000 		.long	.L26-.L27
 428              		.text
 429              	.L39:
 430              	.LBB2:
 120:xsvf2csvf.c   **** 		case XTDOMASK:{
 121:xsvf2csvf.c   **** 			// Swap the XTDOMASK bytes.
 122:xsvf2csvf.c   **** 			uint32 initLength;
 123:xsvf2csvf.c   **** 			const uint8 *p;
 124:xsvf2csvf.c   **** 			const uint8 *end;
 125:xsvf2csvf.c   **** 			if ( newXSize != curXSize ) {
 431              		.loc 1 125 7
 432 0325 8B45CC   		movl	-52(%rbp), %eax
 433 0328 3B45D0   		cmpl	-48(%rbp), %eax
 434 032b 741B     		je	.L40
 126:xsvf2csvf.c   **** 				curXSize = newXSize;
 435              		.loc 1 126 14
 436 032d 8B45CC   		movl	-52(%rbp), %eax
 437 0330 8945D0   		movl	%eax, -48(%rbp)
 127:xsvf2csvf.c   **** 				sendXSize(outBuf, curXSize, error);
 438              		.loc 1 127 5
 439 0333 488B55A0 		movq	-96(%rbp), %rdx
 440 0337 8B4DD0   		movl	-48(%rbp), %ecx
 441 033a 488B45B0 		movq	-80(%rbp), %rax
 442 033e 89CE     		movl	%ecx, %esi
 443 0340 4889C7   		movq	%rax, %rdi
 444 0343 E897FEFF 		call	sendXSize
 444      FF
 445              	.L40:
 128:xsvf2csvf.c   **** 			}
 129:xsvf2csvf.c   **** 			initLength = (uint32)outBuf->length;
 446              		.loc 1 129 31
 447 0348 488B45B0 		movq	-80(%rbp), %rax
 448 034c 488B4008 		movq	8(%rax), %rax
 449              		.loc 1 129 15
 450 0350 8945E4   		movl	%eax, -28(%rbp)
 130:xsvf2csvf.c   **** 			numBytes = bitsToBytes(curXSize);
 451              		.loc 1 130 15
 452 0353 8B45D0   		movl	-48(%rbp), %eax
 453 0356 C1E803   		shrl	$3, %eax
 454 0359 89C2     		movl	%eax, %edx
 455 035b 8B45D0   		movl	-48(%rbp), %eax
 456 035e 83E007   		andl	$7, %eax
 457 0361 85C0     		testl	%eax, %eax
 458 0363 7407     		je	.L41
 459              		.loc 1 130 15 is_stmt 0 discriminator 1
 460 0365 B8010000 		movl	$1, %eax
 460      00
 461 036a EB05     		jmp	.L42
 462              	.L41:
 463              		.loc 1 130 15 discriminator 2
 464 036c B8000000 		movl	$0, %eax
 464      00
 465              	.L42:
 466              		.loc 1 130 13 is_stmt 1 discriminator 4
 467 0371 01D0     		addl	%edx, %eax
 468 0373 8945D8   		movl	%eax, -40(%rbp)
 131:xsvf2csvf.c   **** 			bStatus = bufAppendByte(outBuf, XTDOMASK, error);
 469              		.loc 1 131 14 discriminator 4
 470 0376 488B55A0 		movq	-96(%rbp), %rdx
 471 037a 488B45B0 		movq	-80(%rbp), %rax
 472 037e BE010000 		movl	$1, %esi
 472      00
 473 0383 4889C7   		movq	%rax, %rdi
 474 0386 E8000000 		call	bufAppendByte@PLT
 474      00
 475 038b 8945DC   		movl	%eax, -36(%rbp)
 132:xsvf2csvf.c   **** 			CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "xsvfSwapBytes()");
 476              		.loc 1 132 4 discriminator 4
 477 038e 837DDC00 		cmpl	$0, -36(%rbp)
 478 0392 7422     		je	.L43
 479              		.loc 1 132 4 is_stmt 0 discriminator 1
 480 0394 488B45A0 		movq	-96(%rbp), %rax
 481 0398 488D1500 		leaq	.LC3(%rip), %rdx
 481      000000
 482 039f 4889D6   		movq	%rdx, %rsi
 483 03a2 4889C7   		movq	%rax, %rdi
 484 03a5 E8000000 		call	errPrefix@PLT
 484      00
 485 03aa C745C801 		movl	$1, -56(%rbp)
 485      000000
 486 03b1 E94C0900 		jmp	.L44
 486      00
 487              	.L43:
 133:xsvf2csvf.c   **** 			fStatus = swapBytes(xc, numBytes, outBuf, error);
 488              		.loc 1 133 14 is_stmt 1
 489 03b6 488B4DA0 		movq	-96(%rbp), %rcx
 490 03ba 488B55B0 		movq	-80(%rbp), %rdx
 491 03be 8B75D8   		movl	-40(%rbp), %esi
 492 03c1 488B45B8 		movq	-72(%rbp), %rax
 493 03c5 4889C7   		movq	%rax, %rdi
 494 03c8 E861FCFF 		call	swapBytes
 494      FF
 495 03cd 8945E0   		movl	%eax, -32(%rbp)
 134:xsvf2csvf.c   **** 			CHECK_STATUS(fStatus, fStatus, cleanup, "xsvfSwapBytes()");
 496              		.loc 1 134 4
 497 03d0 837DE000 		cmpl	$0, -32(%rbp)
 498 03d4 7421     		je	.L45
 499              		.loc 1 134 4 is_stmt 0 discriminator 1
 500 03d6 488B45A0 		movq	-96(%rbp), %rax
 501 03da 488D1500 		leaq	.LC3(%rip), %rdx
 501      000000
 502 03e1 4889D6   		movq	%rdx, %rsi
 503 03e4 4889C7   		movq	%rax, %rdi
 504 03e7 E8000000 		call	errPrefix@PLT
 504      00
 505 03ec 8B45E0   		movl	-32(%rbp), %eax
 506 03ef 8945C8   		movl	%eax, -56(%rbp)
 507 03f2 E90B0900 		jmp	.L44
 507      00
 508              	.L45:
 135:xsvf2csvf.c   **** 			p = outBuf->data + initLength + 1;
 509              		.loc 1 135 14 is_stmt 1
 510 03f7 488B45B0 		movq	-80(%rbp), %rax
 511 03fb 488B10   		movq	(%rax), %rdx
 512              		.loc 1 135 34
 513 03fe 8B45E4   		movl	-28(%rbp), %eax
 514 0401 4883C001 		addq	$1, %rax
 515              		.loc 1 135 6
 516 0405 4801D0   		addq	%rdx, %rax
 517 0408 488945E8 		movq	%rax, -24(%rbp)
 136:xsvf2csvf.c   **** 			end = outBuf->data + outBuf->length;
 518              		.loc 1 136 16
 519 040c 488B45B0 		movq	-80(%rbp), %rax
 520 0410 488B10   		movq	(%rax), %rdx
 521              		.loc 1 136 31
 522 0413 488B45B0 		movq	-80(%rbp), %rax
 523 0417 488B4008 		movq	8(%rax), %rax
 524              		.loc 1 136 8
 525 041b 4801D0   		addq	%rdx, %rax
 526 041e 488945F0 		movq	%rax, -16(%rbp)
 137:xsvf2csvf.c   **** 			while ( *p == 0 && p < end ) p++;
 527              		.loc 1 137 10
 528 0422 EB05     		jmp	.L46
 529              	.L48:
 530              		.loc 1 137 34 discriminator 3
 531 0424 488345E8 		addq	$1, -24(%rbp)
 531      01
 532              	.L46:
 533              		.loc 1 137 12 discriminator 1
 534 0429 488B45E8 		movq	-24(%rbp), %rax
 535 042d 0FB600   		movzbl	(%rax), %eax
 536              		.loc 1 137 20 discriminator 1
 537 0430 84C0     		testb	%al, %al
 538 0432 750A     		jne	.L47
 539              		.loc 1 137 20 is_stmt 0 discriminator 2
 540 0434 488B45E8 		movq	-24(%rbp), %rax
 541 0438 483B45F0 		cmpq	-16(%rbp), %rax
 542 043c 72E6     		jb	.L48
 543              	.L47:
 138:xsvf2csvf.c   **** 			if ( p == end ) {
 544              		.loc 1 138 7 is_stmt 1
 545 043e 488B45E8 		movq	-24(%rbp), %rax
 546 0442 483B45F0 		cmpq	-16(%rbp), %rax
 547 0446 7514     		jne	.L49
 139:xsvf2csvf.c   **** 				// All zeros so delete the command
 140:xsvf2csvf.c   **** 				outBuf->length = initLength;
 548              		.loc 1 140 20
 549 0448 8B55E4   		movl	-28(%rbp), %edx
 550 044b 488B45B0 		movq	-80(%rbp), %rax
 551 044f 48895008 		movq	%rdx, 8(%rax)
 141:xsvf2csvf.c   **** 				zeroMask = true;
 552              		.loc 1 141 14
 553 0453 C645C301 		movb	$1, -61(%rbp)
 142:xsvf2csvf.c   **** 			} else {
 143:xsvf2csvf.c   **** 				// Keep the command
 144:xsvf2csvf.c   **** 				if ( numBytes > *maxBufSize ) {
 145:xsvf2csvf.c   **** 					*maxBufSize = numBytes;
 146:xsvf2csvf.c   **** 				}
 147:xsvf2csvf.c   **** 				zeroMask = false;
 148:xsvf2csvf.c   **** 			}
 149:xsvf2csvf.c   **** 			break;
 554              		.loc 1 149 4
 555 0457 E94F0800 		jmp	.L52
 555      00
 556              	.L49:
 144:xsvf2csvf.c   **** 					*maxBufSize = numBytes;
 557              		.loc 1 144 21
 558 045c 488B45A8 		movq	-88(%rbp), %rax
 559 0460 8B00     		movl	(%rax), %eax
 144:xsvf2csvf.c   **** 					*maxBufSize = numBytes;
 560              		.loc 1 144 8
 561 0462 3945D8   		cmpl	%eax, -40(%rbp)
 562 0465 7609     		jbe	.L51
 145:xsvf2csvf.c   **** 				}
 563              		.loc 1 145 18
 564 0467 488B45A8 		movq	-88(%rbp), %rax
 565 046b 8B55D8   		movl	-40(%rbp), %edx
 566 046e 8910     		movl	%edx, (%rax)
 567              	.L51:
 147:xsvf2csvf.c   **** 			}
 568              		.loc 1 147 14
 569 0470 C645C300 		movb	$0, -61(%rbp)
 570              		.loc 1 149 4
 571 0474 E9320800 		jmp	.L52
 571      00
 572              	.L33:
 573              	.LBE2:
 150:xsvf2csvf.c   **** 		}
 151:xsvf2csvf.c   **** 
 152:xsvf2csvf.c   **** 		case XSDRTDO:
 153:xsvf2csvf.c   **** 			// Swap the tdiValue and tdoExpected bytes.
 154:xsvf2csvf.c   **** 			if ( newXSize != curXSize ) {
 574              		.loc 1 154 7
 575 0479 8B45CC   		movl	-52(%rbp), %eax
 576 047c 3B45D0   		cmpl	-48(%rbp), %eax
 577 047f 741B     		je	.L53
 155:xsvf2csvf.c   **** 				curXSize = newXSize;
 578              		.loc 1 155 14
 579 0481 8B45CC   		movl	-52(%rbp), %eax
 580 0484 8945D0   		movl	%eax, -48(%rbp)
 156:xsvf2csvf.c   **** 				sendXSize(outBuf, curXSize, error);
 581              		.loc 1 156 5
 582 0487 488B55A0 		movq	-96(%rbp), %rdx
 583 048b 8B4DD0   		movl	-48(%rbp), %ecx
 584 048e 488B45B0 		movq	-80(%rbp), %rax
 585 0492 89CE     		movl	%ecx, %esi
 586 0494 4889C7   		movq	%rax, %rdi
 587 0497 E843FDFF 		call	sendXSize
 587      FF
 588              	.L53:
 157:xsvf2csvf.c   **** 			}
 158:xsvf2csvf.c   **** 			numBytes = bitsToBytes(curXSize);
 589              		.loc 1 158 15
 590 049c 8B45D0   		movl	-48(%rbp), %eax
 591 049f C1E803   		shrl	$3, %eax
 592 04a2 89C2     		movl	%eax, %edx
 593 04a4 8B45D0   		movl	-48(%rbp), %eax
 594 04a7 83E007   		andl	$7, %eax
 595 04aa 85C0     		testl	%eax, %eax
 596 04ac 7407     		je	.L54
 597              		.loc 1 158 15 is_stmt 0 discriminator 1
 598 04ae B8010000 		movl	$1, %eax
 598      00
 599 04b3 EB05     		jmp	.L55
 600              	.L54:
 601              		.loc 1 158 15 discriminator 2
 602 04b5 B8000000 		movl	$0, %eax
 602      00
 603              	.L55:
 604              		.loc 1 158 13 is_stmt 1 discriminator 4
 605 04ba 01D0     		addl	%edx, %eax
 606 04bc 8945D8   		movl	%eax, -40(%rbp)
 159:xsvf2csvf.c   **** 			if ( zeroMask ) {
 607              		.loc 1 159 7 discriminator 4
 608 04bf 807DC300 		cmpb	$0, -61(%rbp)
 609 04c3 0F849F00 		je	.L56
 609      0000
 160:xsvf2csvf.c   **** 				// The last mask was all zeros, so replace this XSDRTDO with an XSDR and throw away
 161:xsvf2csvf.c   **** 				// the tdoExpected bytes.
 162:xsvf2csvf.c   **** 				bStatus = bufAppendByte(outBuf, XSDR, error);
 610              		.loc 1 162 15
 611 04c9 488B55A0 		movq	-96(%rbp), %rdx
 612 04cd 488B45B0 		movq	-80(%rbp), %rax
 613 04d1 BE030000 		movl	$3, %esi
 613      00
 614 04d6 4889C7   		movq	%rax, %rdi
 615 04d9 E8000000 		call	bufAppendByte@PLT
 615      00
 616 04de 8945DC   		movl	%eax, -36(%rbp)
 163:xsvf2csvf.c   **** 				CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "xsvfSwapBytes()");
 617              		.loc 1 163 5
 618 04e1 837DDC00 		cmpl	$0, -36(%rbp)
 619 04e5 7422     		je	.L57
 620              		.loc 1 163 5 is_stmt 0 discriminator 1
 621 04e7 488B45A0 		movq	-96(%rbp), %rax
 622 04eb 488D1500 		leaq	.LC3(%rip), %rdx
 622      000000
 623 04f2 4889D6   		movq	%rdx, %rsi
 624 04f5 4889C7   		movq	%rax, %rdi
 625 04f8 E8000000 		call	errPrefix@PLT
 625      00
 626 04fd C745C801 		movl	$1, -56(%rbp)
 626      000000
 627 0504 E9F90700 		jmp	.L44
 627      00
 628              	.L57:
 164:xsvf2csvf.c   **** 				fStatus = swapBytes(xc, numBytes, outBuf, error);
 629              		.loc 1 164 15 is_stmt 1
 630 0509 488B4DA0 		movq	-96(%rbp), %rcx
 631 050d 488B55B0 		movq	-80(%rbp), %rdx
 632 0511 8B75D8   		movl	-40(%rbp), %esi
 633 0514 488B45B8 		movq	-72(%rbp), %rax
 634 0518 4889C7   		movq	%rax, %rdi
 635 051b E80EFBFF 		call	swapBytes
 635      FF
 636 0520 8945E0   		movl	%eax, -32(%rbp)
 165:xsvf2csvf.c   **** 				CHECK_STATUS(fStatus, fStatus, cleanup, "xsvfSwapBytes()");
 637              		.loc 1 165 5
 638 0523 837DE000 		cmpl	$0, -32(%rbp)
 639 0527 742D     		je	.L59
 640              		.loc 1 165 5 is_stmt 0 discriminator 1
 641 0529 488B45A0 		movq	-96(%rbp), %rax
 642 052d 488D1500 		leaq	.LC3(%rip), %rdx
 642      000000
 643 0534 4889D6   		movq	%rdx, %rsi
 644 0537 4889C7   		movq	%rax, %rdi
 645 053a E8000000 		call	errPrefix@PLT
 645      00
 646 053f 8B45E0   		movl	-32(%rbp), %eax
 647 0542 8945C8   		movl	%eax, -56(%rbp)
 648 0545 E9B80700 		jmp	.L44
 648      00
 649              	.L60:
 166:xsvf2csvf.c   **** 				while ( numBytes-- ) {
 167:xsvf2csvf.c   **** 					getNextByte(xc);
 650              		.loc 1 167 6 is_stmt 1
 651 054a 488B45B8 		movq	-72(%rbp), %rax
 652 054e 4889C7   		movq	%rax, %rdi
 653 0551 E8AAFAFF 		call	getNextByte
 653      FF
 654              	.L59:
 166:xsvf2csvf.c   **** 				while ( numBytes-- ) {
 655              		.loc 1 166 21
 656 0556 8B45D8   		movl	-40(%rbp), %eax
 657 0559 8D50FF   		leal	-1(%rax), %edx
 658 055c 8955D8   		movl	%edx, -40(%rbp)
 166:xsvf2csvf.c   **** 				while ( numBytes-- ) {
 659              		.loc 1 166 13
 660 055f 85C0     		testl	%eax, %eax
 661 0561 75E7     		jne	.L60
 168:xsvf2csvf.c   **** 				}
 169:xsvf2csvf.c   **** 			} else {
 170:xsvf2csvf.c   **** 				// The last mask was not all zeros, so we must honour the XSDRTDO's tdoExpected bytes.
 171:xsvf2csvf.c   **** 				CHECK_STATUS(
 172:xsvf2csvf.c   **** 					numBytes > BUF_SIZE, FL_UNSUPPORTED_SIZE_ERR, cleanup,
 173:xsvf2csvf.c   **** 					"xsvfSwapBytes(): Previous mask was nonzero, but no room to compare %d bytes", numBytes);
 174:xsvf2csvf.c   **** 				if ( numBytes > *maxBufSize ) {
 175:xsvf2csvf.c   **** 					*maxBufSize = numBytes;
 176:xsvf2csvf.c   **** 				}
 177:xsvf2csvf.c   **** 				bStatus = bufAppendByte(outBuf, XSDRTDO, error);
 178:xsvf2csvf.c   **** 				CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "xsvfSwapBytes()");
 179:xsvf2csvf.c   **** 				fStatus = swapAndInterleaveBytes(xc, numBytes, outBuf, error);
 180:xsvf2csvf.c   **** 				CHECK_STATUS(fStatus, fStatus, cleanup, "xsvfSwapBytes()");
 181:xsvf2csvf.c   **** 			}
 182:xsvf2csvf.c   **** 			break;
 662              		.loc 1 182 4
 663 0563 E92A0700 		jmp	.L96
 663      00
 664              	.L56:
 171:xsvf2csvf.c   **** 					numBytes > BUF_SIZE, FL_UNSUPPORTED_SIZE_ERR, cleanup,
 665              		.loc 1 171 5
 666 0568 817DD800 		cmpl	$2048, -40(%rbp)
 666      080000
 667 056f 762A     		jbe	.L62
 171:xsvf2csvf.c   **** 					numBytes > BUF_SIZE, FL_UNSUPPORTED_SIZE_ERR, cleanup,
 668              		.loc 1 171 5 is_stmt 0 discriminator 1
 669 0571 8B55D8   		movl	-40(%rbp), %edx
 670 0574 488B45A0 		movq	-96(%rbp), %rax
 671 0578 488D0D00 		leaq	.LC4(%rip), %rcx
 671      000000
 672 057f 4889CE   		movq	%rcx, %rsi
 673 0582 4889C7   		movq	%rax, %rdi
 674 0585 B8000000 		movl	$0, %eax
 674      00
 675 058a E8000000 		call	errRender@PLT
 675      00
 676 058f C745C809 		movl	$9, -56(%rbp)
 676      000000
 677 0596 E9670700 		jmp	.L44
 677      00
 678              	.L62:
 174:xsvf2csvf.c   **** 					*maxBufSize = numBytes;
 679              		.loc 1 174 21 is_stmt 1
 680 059b 488B45A8 		movq	-88(%rbp), %rax
 681 059f 8B00     		movl	(%rax), %eax
 174:xsvf2csvf.c   **** 					*maxBufSize = numBytes;
 682              		.loc 1 174 8
 683 05a1 3945D8   		cmpl	%eax, -40(%rbp)
 684 05a4 7609     		jbe	.L63
 175:xsvf2csvf.c   **** 				}
 685              		.loc 1 175 18
 686 05a6 488B45A8 		movq	-88(%rbp), %rax
 687 05aa 8B55D8   		movl	-40(%rbp), %edx
 688 05ad 8910     		movl	%edx, (%rax)
 689              	.L63:
 177:xsvf2csvf.c   **** 				CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "xsvfSwapBytes()");
 690              		.loc 1 177 15
 691 05af 488B55A0 		movq	-96(%rbp), %rdx
 692 05b3 488B45B0 		movq	-80(%rbp), %rax
 693 05b7 BE090000 		movl	$9, %esi
 693      00
 694 05bc 4889C7   		movq	%rax, %rdi
 695 05bf E8000000 		call	bufAppendByte@PLT
 695      00
 696 05c4 8945DC   		movl	%eax, -36(%rbp)
 178:xsvf2csvf.c   **** 				fStatus = swapAndInterleaveBytes(xc, numBytes, outBuf, error);
 697              		.loc 1 178 5
 698 05c7 837DDC00 		cmpl	$0, -36(%rbp)
 699 05cb 7422     		je	.L64
 178:xsvf2csvf.c   **** 				fStatus = swapAndInterleaveBytes(xc, numBytes, outBuf, error);
 700              		.loc 1 178 5 is_stmt 0 discriminator 1
 701 05cd 488B45A0 		movq	-96(%rbp), %rax
 702 05d1 488D1500 		leaq	.LC3(%rip), %rdx
 702      000000
 703 05d8 4889D6   		movq	%rdx, %rsi
 704 05db 4889C7   		movq	%rax, %rdi
 705 05de E8000000 		call	errPrefix@PLT
 705      00
 706 05e3 C745C801 		movl	$1, -56(%rbp)
 706      000000
 707 05ea E9130700 		jmp	.L44
 707      00
 708              	.L64:
 179:xsvf2csvf.c   **** 				CHECK_STATUS(fStatus, fStatus, cleanup, "xsvfSwapBytes()");
 709              		.loc 1 179 15 is_stmt 1
 710 05ef 488B4DA0 		movq	-96(%rbp), %rcx
 711 05f3 488B55B0 		movq	-80(%rbp), %rdx
 712 05f7 8B75D8   		movl	-40(%rbp), %esi
 713 05fa 488B45B8 		movq	-72(%rbp), %rax
 714 05fe 4889C7   		movq	%rax, %rdi
 715 0601 E8D8FAFF 		call	swapAndInterleaveBytes
 715      FF
 716 0606 8945E0   		movl	%eax, -32(%rbp)
 180:xsvf2csvf.c   **** 			}
 717              		.loc 1 180 5
 718 0609 837DE000 		cmpl	$0, -32(%rbp)
 719 060d 0F847F06 		je	.L96
 719      0000
 180:xsvf2csvf.c   **** 			}
 720              		.loc 1 180 5 is_stmt 0 discriminator 1
 721 0613 488B45A0 		movq	-96(%rbp), %rax
 722 0617 488D1500 		leaq	.LC3(%rip), %rdx
 722      000000
 723 061e 4889D6   		movq	%rdx, %rsi
 724 0621 4889C7   		movq	%rax, %rdi
 725 0624 E8000000 		call	errPrefix@PLT
 725      00
 726 0629 8B45E0   		movl	-32(%rbp), %eax
 727 062c 8945C8   		movl	%eax, -56(%rbp)
 728 062f E9CE0600 		jmp	.L44
 728      00
 729              	.L35:
 183:xsvf2csvf.c   **** 
 184:xsvf2csvf.c   **** 		case XREPEAT:
 185:xsvf2csvf.c   **** 			// Drop XREPEAT for now. Will probably be needed for CPLDs.
 186:xsvf2csvf.c   **** 			getNextByte(xc);
 730              		.loc 1 186 4 is_stmt 1
 731 0634 488B45B8 		movq	-72(%rbp), %rax
 732 0638 4889C7   		movq	%rax, %rdi
 733 063b E8C0F9FF 		call	getNextByte
 733      FF
 187:xsvf2csvf.c   **** 			break;
 734              		.loc 1 187 4
 735 0640 E9660600 		jmp	.L52
 735      00
 736              	.L36:
 188:xsvf2csvf.c   **** 			
 189:xsvf2csvf.c   **** 		case XRUNTEST:
 190:xsvf2csvf.c   **** 			// Copy the XRUNTEST bytes as-is.
 191:xsvf2csvf.c   **** 			bStatus = bufAppendByte(outBuf, XRUNTEST, error);
 737              		.loc 1 191 14
 738 0645 488B55A0 		movq	-96(%rbp), %rdx
 739 0649 488B45B0 		movq	-80(%rbp), %rax
 740 064d BE040000 		movl	$4, %esi
 740      00
 741 0652 4889C7   		movq	%rax, %rdi
 742 0655 E8000000 		call	bufAppendByte@PLT
 742      00
 743 065a 8945DC   		movl	%eax, -36(%rbp)
 192:xsvf2csvf.c   **** 			CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "xsvfSwapBytes()");
 744              		.loc 1 192 4
 745 065d 837DDC00 		cmpl	$0, -36(%rbp)
 746 0661 7422     		je	.L65
 747              		.loc 1 192 4 is_stmt 0 discriminator 1
 748 0663 488B45A0 		movq	-96(%rbp), %rax
 749 0667 488D1500 		leaq	.LC3(%rip), %rdx
 749      000000
 750 066e 4889D6   		movq	%rdx, %rsi
 751 0671 4889C7   		movq	%rax, %rdi
 752 0674 E8000000 		call	errPrefix@PLT
 752      00
 753 0679 C745C801 		movl	$1, -56(%rbp)
 753      000000
 754 0680 E97D0600 		jmp	.L44
 754      00
 755              	.L65:
 193:xsvf2csvf.c   **** 			bStatus = bufAppendByte(outBuf, getNextByte(xc), error);
 756              		.loc 1 193 36 is_stmt 1
 757 0685 488B45B8 		movq	-72(%rbp), %rax
 758 0689 4889C7   		movq	%rax, %rdi
 759 068c E86FF9FF 		call	getNextByte
 759      FF
 760              		.loc 1 193 14
 761 0691 0FB6C8   		movzbl	%al, %ecx
 762 0694 488B55A0 		movq	-96(%rbp), %rdx
 763 0698 488B45B0 		movq	-80(%rbp), %rax
 764 069c 89CE     		movl	%ecx, %esi
 765 069e 4889C7   		movq	%rax, %rdi
 766 06a1 E8000000 		call	bufAppendByte@PLT
 766      00
 767 06a6 8945DC   		movl	%eax, -36(%rbp)
 194:xsvf2csvf.c   **** 			CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "xsvfSwapBytes()");
 768              		.loc 1 194 4
 769 06a9 837DDC00 		cmpl	$0, -36(%rbp)
 770 06ad 7422     		je	.L66
 771              		.loc 1 194 4 is_stmt 0 discriminator 1
 772 06af 488B45A0 		movq	-96(%rbp), %rax
 773 06b3 488D1500 		leaq	.LC3(%rip), %rdx
 773      000000
 774 06ba 4889D6   		movq	%rdx, %rsi
 775 06bd 4889C7   		movq	%rax, %rdi
 776 06c0 E8000000 		call	errPrefix@PLT
 776      00
 777 06c5 C745C801 		movl	$1, -56(%rbp)
 777      000000
 778 06cc E9310600 		jmp	.L44
 778      00
 779              	.L66:
 195:xsvf2csvf.c   **** 			bStatus = bufAppendByte(outBuf, getNextByte(xc), error);
 780              		.loc 1 195 36 is_stmt 1
 781 06d1 488B45B8 		movq	-72(%rbp), %rax
 782 06d5 4889C7   		movq	%rax, %rdi
 783 06d8 E823F9FF 		call	getNextByte
 783      FF
 784              		.loc 1 195 14
 785 06dd 0FB6C8   		movzbl	%al, %ecx
 786 06e0 488B55A0 		movq	-96(%rbp), %rdx
 787 06e4 488B45B0 		movq	-80(%rbp), %rax
 788 06e8 89CE     		movl	%ecx, %esi
 789 06ea 4889C7   		movq	%rax, %rdi
 790 06ed E8000000 		call	bufAppendByte@PLT
 790      00
 791 06f2 8945DC   		movl	%eax, -36(%rbp)
 196:xsvf2csvf.c   **** 			CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "xsvfSwapBytes()");
 792              		.loc 1 196 4
 793 06f5 837DDC00 		cmpl	$0, -36(%rbp)
 794 06f9 7422     		je	.L67
 795              		.loc 1 196 4 is_stmt 0 discriminator 1
 796 06fb 488B45A0 		movq	-96(%rbp), %rax
 797 06ff 488D1500 		leaq	.LC3(%rip), %rdx
 797      000000
 798 0706 4889D6   		movq	%rdx, %rsi
 799 0709 4889C7   		movq	%rax, %rdi
 800 070c E8000000 		call	errPrefix@PLT
 800      00
 801 0711 C745C801 		movl	$1, -56(%rbp)
 801      000000
 802 0718 E9E50500 		jmp	.L44
 802      00
 803              	.L67:
 197:xsvf2csvf.c   **** 			bStatus = bufAppendByte(outBuf, getNextByte(xc), error);
 804              		.loc 1 197 36 is_stmt 1
 805 071d 488B45B8 		movq	-72(%rbp), %rax
 806 0721 4889C7   		movq	%rax, %rdi
 807 0724 E8D7F8FF 		call	getNextByte
 807      FF
 808              		.loc 1 197 14
 809 0729 0FB6C8   		movzbl	%al, %ecx
 810 072c 488B55A0 		movq	-96(%rbp), %rdx
 811 0730 488B45B0 		movq	-80(%rbp), %rax
 812 0734 89CE     		movl	%ecx, %esi
 813 0736 4889C7   		movq	%rax, %rdi
 814 0739 E8000000 		call	bufAppendByte@PLT
 814      00
 815 073e 8945DC   		movl	%eax, -36(%rbp)
 198:xsvf2csvf.c   **** 			CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "xsvfSwapBytes()");
 816              		.loc 1 198 4
 817 0741 837DDC00 		cmpl	$0, -36(%rbp)
 818 0745 7422     		je	.L68
 819              		.loc 1 198 4 is_stmt 0 discriminator 1
 820 0747 488B45A0 		movq	-96(%rbp), %rax
 821 074b 488D1500 		leaq	.LC3(%rip), %rdx
 821      000000
 822 0752 4889D6   		movq	%rdx, %rsi
 823 0755 4889C7   		movq	%rax, %rdi
 824 0758 E8000000 		call	errPrefix@PLT
 824      00
 825 075d C745C801 		movl	$1, -56(%rbp)
 825      000000
 826 0764 E9990500 		jmp	.L44
 826      00
 827              	.L68:
 199:xsvf2csvf.c   **** 			bStatus = bufAppendByte(outBuf, getNextByte(xc), error);
 828              		.loc 1 199 36 is_stmt 1
 829 0769 488B45B8 		movq	-72(%rbp), %rax
 830 076d 4889C7   		movq	%rax, %rdi
 831 0770 E88BF8FF 		call	getNextByte
 831      FF
 832              		.loc 1 199 14
 833 0775 0FB6C8   		movzbl	%al, %ecx
 834 0778 488B55A0 		movq	-96(%rbp), %rdx
 835 077c 488B45B0 		movq	-80(%rbp), %rax
 836 0780 89CE     		movl	%ecx, %esi
 837 0782 4889C7   		movq	%rax, %rdi
 838 0785 E8000000 		call	bufAppendByte@PLT
 838      00
 839 078a 8945DC   		movl	%eax, -36(%rbp)
 200:xsvf2csvf.c   **** 			CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "xsvfSwapBytes()");
 840              		.loc 1 200 4
 841 078d 837DDC00 		cmpl	$0, -36(%rbp)
 842 0791 0F84FE04 		je	.L97
 842      0000
 843              		.loc 1 200 4 is_stmt 0 discriminator 1
 844 0797 488B45A0 		movq	-96(%rbp), %rax
 845 079b 488D1500 		leaq	.LC3(%rip), %rdx
 845      000000
 846 07a2 4889D6   		movq	%rdx, %rsi
 847 07a5 4889C7   		movq	%rax, %rdi
 848 07a8 E8000000 		call	errPrefix@PLT
 848      00
 849 07ad C745C801 		movl	$1, -56(%rbp)
 849      000000
 850 07b4 E9490500 		jmp	.L44
 850      00
 851              	.L38:
 201:xsvf2csvf.c   **** 			break;
 202:xsvf2csvf.c   **** 
 203:xsvf2csvf.c   **** 		case XSIR:
 204:xsvf2csvf.c   **** 			// Swap the XSIR bytes.
 205:xsvf2csvf.c   **** 			bStatus = bufAppendByte(outBuf, XSIR, error);
 852              		.loc 1 205 14 is_stmt 1
 853 07b9 488B55A0 		movq	-96(%rbp), %rdx
 854 07bd 488B45B0 		movq	-80(%rbp), %rax
 855 07c1 BE020000 		movl	$2, %esi
 855      00
 856 07c6 4889C7   		movq	%rax, %rdi
 857 07c9 E8000000 		call	bufAppendByte@PLT
 857      00
 858 07ce 8945DC   		movl	%eax, -36(%rbp)
 206:xsvf2csvf.c   **** 			CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "xsvfSwapBytes()");
 859              		.loc 1 206 4
 860 07d1 837DDC00 		cmpl	$0, -36(%rbp)
 861 07d5 7422     		je	.L70
 862              		.loc 1 206 4 is_stmt 0 discriminator 1
 863 07d7 488B45A0 		movq	-96(%rbp), %rax
 864 07db 488D1500 		leaq	.LC3(%rip), %rdx
 864      000000
 865 07e2 4889D6   		movq	%rdx, %rsi
 866 07e5 4889C7   		movq	%rax, %rdi
 867 07e8 E8000000 		call	errPrefix@PLT
 867      00
 868 07ed C745C801 		movl	$1, -56(%rbp)
 868      000000
 869 07f4 E9090500 		jmp	.L44
 869      00
 870              	.L70:
 207:xsvf2csvf.c   **** 			thisByte = getNextByte(xc);
 871              		.loc 1 207 15 is_stmt 1
 872 07f9 488B45B8 		movq	-72(%rbp), %rax
 873 07fd 4889C7   		movq	%rax, %rdi
 874 0800 E8FBF7FF 		call	getNextByte
 874      FF
 875 0805 8845C2   		movb	%al, -62(%rbp)
 208:xsvf2csvf.c   **** 			bStatus = bufAppendByte(outBuf, thisByte, error);
 876              		.loc 1 208 14
 877 0808 0FB64DC2 		movzbl	-62(%rbp), %ecx
 878 080c 488B55A0 		movq	-96(%rbp), %rdx
 879 0810 488B45B0 		movq	-80(%rbp), %rax
 880 0814 89CE     		movl	%ecx, %esi
 881 0816 4889C7   		movq	%rax, %rdi
 882 0819 E8000000 		call	bufAppendByte@PLT
 882      00
 883 081e 8945DC   		movl	%eax, -36(%rbp)
 209:xsvf2csvf.c   **** 			CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "xsvfSwapBytes()");
 884              		.loc 1 209 4
 885 0821 837DDC00 		cmpl	$0, -36(%rbp)
 886 0825 7422     		je	.L71
 887              		.loc 1 209 4 is_stmt 0 discriminator 1
 888 0827 488B45A0 		movq	-96(%rbp), %rax
 889 082b 488D1500 		leaq	.LC3(%rip), %rdx
 889      000000
 890 0832 4889D6   		movq	%rdx, %rsi
 891 0835 4889C7   		movq	%rax, %rdi
 892 0838 E8000000 		call	errPrefix@PLT
 892      00
 893 083d C745C801 		movl	$1, -56(%rbp)
 893      000000
 894 0844 E9B90400 		jmp	.L44
 894      00
 895              	.L71:
 210:xsvf2csvf.c   **** 			fStatus = swapBytes(xc, (uint32)bitsToBytes(thisByte), outBuf, error);
 896              		.loc 1 210 36 is_stmt 1
 897 0849 0FB645C2 		movzbl	-62(%rbp), %eax
 898 084d C0E803   		shrb	$3, %al
 899 0850 0FB6D0   		movzbl	%al, %edx
 900 0853 0FB645C2 		movzbl	-62(%rbp), %eax
 901 0857 83E007   		andl	$7, %eax
 902 085a 85C0     		testl	%eax, %eax
 903 085c 0F95C0   		setne	%al
 904 085f 0FB6C0   		movzbl	%al, %eax
 905 0862 01D0     		addl	%edx, %eax
 906              		.loc 1 210 14
 907 0864 89C6     		movl	%eax, %esi
 908 0866 488B4DA0 		movq	-96(%rbp), %rcx
 909 086a 488B55B0 		movq	-80(%rbp), %rdx
 910 086e 488B45B8 		movq	-72(%rbp), %rax
 911 0872 4889C7   		movq	%rax, %rdi
 912 0875 E8B4F7FF 		call	swapBytes
 912      FF
 913 087a 8945E0   		movl	%eax, -32(%rbp)
 211:xsvf2csvf.c   **** 			CHECK_STATUS(fStatus, fStatus, cleanup, "xsvfSwapBytes()");
 914              		.loc 1 211 4
 915 087d 837DE000 		cmpl	$0, -32(%rbp)
 916 0881 0F841104 		je	.L98
 916      0000
 917              		.loc 1 211 4 is_stmt 0 discriminator 1
 918 0887 488B45A0 		movq	-96(%rbp), %rax
 919 088b 488D1500 		leaq	.LC3(%rip), %rdx
 919      000000
 920 0892 4889D6   		movq	%rdx, %rsi
 921 0895 4889C7   		movq	%rax, %rdi
 922 0898 E8000000 		call	errPrefix@PLT
 922      00
 923 089d 8B45E0   		movl	-32(%rbp), %eax
 924 08a0 8945C8   		movl	%eax, -56(%rbp)
 925 08a3 E95A0400 		jmp	.L44
 925      00
 926              	.L34:
 212:xsvf2csvf.c   **** 			break;
 213:xsvf2csvf.c   **** 
 214:xsvf2csvf.c   **** 		case XSDRSIZE:
 215:xsvf2csvf.c   **** 			// Just store it; if it differs from the old one it will be sent when required
 216:xsvf2csvf.c   **** 			newXSize = getNextByte(xc);  // Get MSB
 927              		.loc 1 216 15 is_stmt 1
 928 08a8 488B45B8 		movq	-72(%rbp), %rax
 929 08ac 4889C7   		movq	%rax, %rdi
 930 08af E84CF7FF 		call	getNextByte
 930      FF
 931              		.loc 1 216 13
 932 08b4 0FB6C0   		movzbl	%al, %eax
 933 08b7 8945CC   		movl	%eax, -52(%rbp)
 217:xsvf2csvf.c   **** 			newXSize <<= 8;
 934              		.loc 1 217 13
 935 08ba C165CC08 		sall	$8, -52(%rbp)
 218:xsvf2csvf.c   **** 			newXSize |= getNextByte(xc);
 936              		.loc 1 218 16
 937 08be 488B45B8 		movq	-72(%rbp), %rax
 938 08c2 4889C7   		movq	%rax, %rdi
 939 08c5 E836F7FF 		call	getNextByte
 939      FF
 940 08ca 0FB6C0   		movzbl	%al, %eax
 941              		.loc 1 218 13
 942 08cd 0945CC   		orl	%eax, -52(%rbp)
 219:xsvf2csvf.c   **** 			newXSize <<= 8;
 943              		.loc 1 219 13
 944 08d0 C165CC08 		sall	$8, -52(%rbp)
 220:xsvf2csvf.c   **** 			newXSize |= getNextByte(xc);
 945              		.loc 1 220 16
 946 08d4 488B45B8 		movq	-72(%rbp), %rax
 947 08d8 4889C7   		movq	%rax, %rdi
 948 08db E820F7FF 		call	getNextByte
 948      FF
 949 08e0 0FB6C0   		movzbl	%al, %eax
 950              		.loc 1 220 13
 951 08e3 0945CC   		orl	%eax, -52(%rbp)
 221:xsvf2csvf.c   **** 			newXSize <<= 8;
 952              		.loc 1 221 13
 953 08e6 C165CC08 		sall	$8, -52(%rbp)
 222:xsvf2csvf.c   **** 			newXSize |= getNextByte(xc); // Get LSB
 954              		.loc 1 222 16
 955 08ea 488B45B8 		movq	-72(%rbp), %rax
 956 08ee 4889C7   		movq	%rax, %rdi
 957 08f1 E80AF7FF 		call	getNextByte
 957      FF
 958 08f6 0FB6C0   		movzbl	%al, %eax
 959              		.loc 1 222 13
 960 08f9 0945CC   		orl	%eax, -52(%rbp)
 223:xsvf2csvf.c   **** 			break;
 961              		.loc 1 223 4
 962 08fc E9AA0300 		jmp	.L52
 962      00
 963              	.L37:
 224:xsvf2csvf.c   **** 
 225:xsvf2csvf.c   **** 		case XSDR:
 226:xsvf2csvf.c   **** 			// Copy over
 227:xsvf2csvf.c   **** 			if ( newXSize != curXSize ) {
 964              		.loc 1 227 7
 965 0901 8B45CC   		movl	-52(%rbp), %eax
 966 0904 3B45D0   		cmpl	-48(%rbp), %eax
 967 0907 741B     		je	.L73
 228:xsvf2csvf.c   **** 				curXSize = newXSize;
 968              		.loc 1 228 14
 969 0909 8B45CC   		movl	-52(%rbp), %eax
 970 090c 8945D0   		movl	%eax, -48(%rbp)
 229:xsvf2csvf.c   **** 				sendXSize(outBuf, curXSize, error);
 971              		.loc 1 229 5
 972 090f 488B55A0 		movq	-96(%rbp), %rdx
 973 0913 8B4DD0   		movl	-48(%rbp), %ecx
 974 0916 488B45B0 		movq	-80(%rbp), %rax
 975 091a 89CE     		movl	%ecx, %esi
 976 091c 4889C7   		movq	%rax, %rdi
 977 091f E8BBF8FF 		call	sendXSize
 977      FF
 978              	.L73:
 230:xsvf2csvf.c   **** 			}
 231:xsvf2csvf.c   **** 			bStatus = bufAppendByte(outBuf, XSDR, error);
 979              		.loc 1 231 14
 980 0924 488B55A0 		movq	-96(%rbp), %rdx
 981 0928 488B45B0 		movq	-80(%rbp), %rax
 982 092c BE030000 		movl	$3, %esi
 982      00
 983 0931 4889C7   		movq	%rax, %rdi
 984 0934 E8000000 		call	bufAppendByte@PLT
 984      00
 985 0939 8945DC   		movl	%eax, -36(%rbp)
 232:xsvf2csvf.c   **** 			CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "xsvfSwapBytes()");
 986              		.loc 1 232 4
 987 093c 837DDC00 		cmpl	$0, -36(%rbp)
 988 0940 7422     		je	.L74
 989              		.loc 1 232 4 is_stmt 0 discriminator 1
 990 0942 488B45A0 		movq	-96(%rbp), %rax
 991 0946 488D1500 		leaq	.LC3(%rip), %rdx
 991      000000
 992 094d 4889D6   		movq	%rdx, %rsi
 993 0950 4889C7   		movq	%rax, %rdi
 994 0953 E8000000 		call	errPrefix@PLT
 994      00
 995 0958 C745C801 		movl	$1, -56(%rbp)
 995      000000
 996 095f E99E0300 		jmp	.L44
 996      00
 997              	.L74:
 233:xsvf2csvf.c   **** 			fStatus = swapBytes(xc, bitsToBytes(curXSize), outBuf, error);
 998              		.loc 1 233 28 is_stmt 1
 999 0964 8B45D0   		movl	-48(%rbp), %eax
 1000 0967 C1E803   		shrl	$3, %eax
 1001 096a 89C2     		movl	%eax, %edx
 1002 096c 8B45D0   		movl	-48(%rbp), %eax
 1003 096f 83E007   		andl	$7, %eax
 1004 0972 85C0     		testl	%eax, %eax
 1005 0974 7407     		je	.L75
 1006              		.loc 1 233 28 is_stmt 0 discriminator 1
 1007 0976 B8010000 		movl	$1, %eax
 1007      00
 1008 097b EB05     		jmp	.L76
 1009              	.L75:
 1010              		.loc 1 233 28 discriminator 2
 1011 097d B8000000 		movl	$0, %eax
 1011      00
 1012              	.L76:
 1013              		.loc 1 233 14 is_stmt 1 discriminator 4
 1014 0982 8D3410   		leal	(%rax,%rdx), %esi
 1015 0985 488B4DA0 		movq	-96(%rbp), %rcx
 1016 0989 488B55B0 		movq	-80(%rbp), %rdx
 1017 098d 488B45B8 		movq	-72(%rbp), %rax
 1018 0991 4889C7   		movq	%rax, %rdi
 1019 0994 E895F6FF 		call	swapBytes
 1019      FF
 1020 0999 8945E0   		movl	%eax, -32(%rbp)
 234:xsvf2csvf.c   **** 			CHECK_STATUS(fStatus, fStatus, cleanup, "xsvfSwapBytes()");
 1021              		.loc 1 234 4 discriminator 4
 1022 099c 837DE000 		cmpl	$0, -32(%rbp)
 1023 09a0 0F84F502 		je	.L99
 1023      0000
 1024              		.loc 1 234 4 is_stmt 0 discriminator 1
 1025 09a6 488B45A0 		movq	-96(%rbp), %rax
 1026 09aa 488D1500 		leaq	.LC3(%rip), %rdx
 1026      000000
 1027 09b1 4889D6   		movq	%rdx, %rsi
 1028 09b4 4889C7   		movq	%rax, %rdi
 1029 09b7 E8000000 		call	errPrefix@PLT
 1029      00
 1030 09bc 8B45E0   		movl	-32(%rbp), %eax
 1031 09bf 8945C8   		movl	%eax, -56(%rbp)
 1032 09c2 E93B0300 		jmp	.L44
 1032      00
 1033              	.L32:
 235:xsvf2csvf.c   **** 			break;
 236:xsvf2csvf.c   **** 
 237:xsvf2csvf.c   **** 		case XSDRB:
 238:xsvf2csvf.c   **** 			// Roll XSDRB, XSDRC*, XSDRE into one XSDR
 239:xsvf2csvf.c   **** 			curXSize = newXSize;
 1034              		.loc 1 239 13 is_stmt 1
 1035 09c7 8B45CC   		movl	-52(%rbp), %eax
 1036 09ca 8945D0   		movl	%eax, -48(%rbp)
 240:xsvf2csvf.c   **** 			sendXSize(outBuf, curXSize, error);
 1037              		.loc 1 240 4
 1038 09cd 488B55A0 		movq	-96(%rbp), %rdx
 1039 09d1 8B4DD0   		movl	-48(%rbp), %ecx
 1040 09d4 488B45B0 		movq	-80(%rbp), %rax
 1041 09d8 89CE     		movl	%ecx, %esi
 1042 09da 4889C7   		movq	%rax, %rdi
 1043 09dd E8FDF7FF 		call	sendXSize
 1043      FF
 241:xsvf2csvf.c   **** 			totOffset = (uint32)outBuf->length - 4; // each subsequent XSDRC & XSDRE updates this XSDRSIZE
 1044              		.loc 1 241 30
 1045 09e2 488B45B0 		movq	-80(%rbp), %rax
 1046 09e6 488B4008 		movq	8(%rax), %rax
 1047              		.loc 1 241 14
 1048 09ea 83E804   		subl	$4, %eax
 1049 09ed 8945D4   		movl	%eax, -44(%rbp)
 242:xsvf2csvf.c   **** 			bStatus = bufAppendByte(outBuf, XSDR, error);
 1050              		.loc 1 242 14
 1051 09f0 488B55A0 		movq	-96(%rbp), %rdx
 1052 09f4 488B45B0 		movq	-80(%rbp), %rax
 1053 09f8 BE030000 		movl	$3, %esi
 1053      00
 1054 09fd 4889C7   		movq	%rax, %rdi
 1055 0a00 E8000000 		call	bufAppendByte@PLT
 1055      00
 1056 0a05 8945DC   		movl	%eax, -36(%rbp)
 243:xsvf2csvf.c   **** 			CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "xsvfSwapBytes()");
 1057              		.loc 1 243 4
 1058 0a08 837DDC00 		cmpl	$0, -36(%rbp)
 1059 0a0c 7422     		je	.L78
 1060              		.loc 1 243 4 is_stmt 0 discriminator 1
 1061 0a0e 488B45A0 		movq	-96(%rbp), %rax
 1062 0a12 488D1500 		leaq	.LC3(%rip), %rdx
 1062      000000
 1063 0a19 4889D6   		movq	%rdx, %rsi
 1064 0a1c 4889C7   		movq	%rax, %rdi
 1065 0a1f E8000000 		call	errPrefix@PLT
 1065      00
 1066 0a24 C745C801 		movl	$1, -56(%rbp)
 1066      000000
 1067 0a2b E9D20200 		jmp	.L44
 1067      00
 1068              	.L78:
 244:xsvf2csvf.c   **** 			fStatus = swapBytes(xc, bitsToBytes(newXSize), outBuf, error);
 1069              		.loc 1 244 28 is_stmt 1
 1070 0a30 8B45CC   		movl	-52(%rbp), %eax
 1071 0a33 C1E803   		shrl	$3, %eax
 1072 0a36 89C2     		movl	%eax, %edx
 1073 0a38 8B45CC   		movl	-52(%rbp), %eax
 1074 0a3b 83E007   		andl	$7, %eax
 1075 0a3e 85C0     		testl	%eax, %eax
 1076 0a40 7407     		je	.L79
 1077              		.loc 1 244 28 is_stmt 0 discriminator 1
 1078 0a42 B8010000 		movl	$1, %eax
 1078      00
 1079 0a47 EB05     		jmp	.L80
 1080              	.L79:
 1081              		.loc 1 244 28 discriminator 2
 1082 0a49 B8000000 		movl	$0, %eax
 1082      00
 1083              	.L80:
 1084              		.loc 1 244 14 is_stmt 1 discriminator 4
 1085 0a4e 8D3410   		leal	(%rax,%rdx), %esi
 1086 0a51 488B4DA0 		movq	-96(%rbp), %rcx
 1087 0a55 488B55B0 		movq	-80(%rbp), %rdx
 1088 0a59 488B45B8 		movq	-72(%rbp), %rax
 1089 0a5d 4889C7   		movq	%rax, %rdi
 1090 0a60 E8C9F5FF 		call	swapBytes
 1090      FF
 1091 0a65 8945E0   		movl	%eax, -32(%rbp)
 245:xsvf2csvf.c   **** 			CHECK_STATUS(fStatus, fStatus, cleanup, "xsvfSwapBytes()");
 1092              		.loc 1 245 4 discriminator 4
 1093 0a68 837DE000 		cmpl	$0, -32(%rbp)
 1094 0a6c 0F842C02 		je	.L100
 1094      0000
 1095              		.loc 1 245 4 is_stmt 0 discriminator 1
 1096 0a72 488B45A0 		movq	-96(%rbp), %rax
 1097 0a76 488D1500 		leaq	.LC3(%rip), %rdx
 1097      000000
 1098 0a7d 4889D6   		movq	%rdx, %rsi
 1099 0a80 4889C7   		movq	%rax, %rdi
 1100 0a83 E8000000 		call	errPrefix@PLT
 1100      00
 1101 0a88 8B45E0   		movl	-32(%rbp), %eax
 1102 0a8b 8945C8   		movl	%eax, -56(%rbp)
 1103 0a8e E96F0200 		jmp	.L44
 1103      00
 1104              	.L31:
 246:xsvf2csvf.c   **** 			break;
 247:xsvf2csvf.c   **** 
 248:xsvf2csvf.c   **** 		case XSDRC:
 249:xsvf2csvf.c   **** 			// Just add the XSDRC data to the end of the previous XSDR
 250:xsvf2csvf.c   **** 			curXSize += newXSize;
 1105              		.loc 1 250 13 is_stmt 1
 1106 0a93 8B45CC   		movl	-52(%rbp), %eax
 1107 0a96 0145D0   		addl	%eax, -48(%rbp)
 251:xsvf2csvf.c   **** 			bStatus = bufWriteLongBE(outBuf, totOffset, curXSize, error);
 1108              		.loc 1 251 14
 1109 0a99 8B75D4   		movl	-44(%rbp), %esi
 1110 0a9c 488B4DA0 		movq	-96(%rbp), %rcx
 1111 0aa0 8B55D0   		movl	-48(%rbp), %edx
 1112 0aa3 488B45B0 		movq	-80(%rbp), %rax
 1113 0aa7 4889C7   		movq	%rax, %rdi
 1114 0aaa E8000000 		call	bufWriteLongBE@PLT
 1114      00
 1115 0aaf 8945DC   		movl	%eax, -36(%rbp)
 252:xsvf2csvf.c   **** 			CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "xsvfSwapBytes()");
 1116              		.loc 1 252 4
 1117 0ab2 837DDC00 		cmpl	$0, -36(%rbp)
 1118 0ab6 7422     		je	.L82
 1119              		.loc 1 252 4 is_stmt 0 discriminator 1
 1120 0ab8 488B45A0 		movq	-96(%rbp), %rax
 1121 0abc 488D1500 		leaq	.LC3(%rip), %rdx
 1121      000000
 1122 0ac3 4889D6   		movq	%rdx, %rsi
 1123 0ac6 4889C7   		movq	%rax, %rdi
 1124 0ac9 E8000000 		call	errPrefix@PLT
 1124      00
 1125 0ace C745C801 		movl	$1, -56(%rbp)
 1125      000000
 1126 0ad5 E9280200 		jmp	.L44
 1126      00
 1127              	.L82:
 253:xsvf2csvf.c   **** 			fStatus = swapBytes(xc, bitsToBytes(newXSize), outBuf, error);
 1128              		.loc 1 253 28 is_stmt 1
 1129 0ada 8B45CC   		movl	-52(%rbp), %eax
 1130 0add C1E803   		shrl	$3, %eax
 1131 0ae0 89C2     		movl	%eax, %edx
 1132 0ae2 8B45CC   		movl	-52(%rbp), %eax
 1133 0ae5 83E007   		andl	$7, %eax
 1134 0ae8 85C0     		testl	%eax, %eax
 1135 0aea 7407     		je	.L83
 1136              		.loc 1 253 28 is_stmt 0 discriminator 1
 1137 0aec B8010000 		movl	$1, %eax
 1137      00
 1138 0af1 EB05     		jmp	.L84
 1139              	.L83:
 1140              		.loc 1 253 28 discriminator 2
 1141 0af3 B8000000 		movl	$0, %eax
 1141      00
 1142              	.L84:
 1143              		.loc 1 253 14 is_stmt 1 discriminator 4
 1144 0af8 8D3410   		leal	(%rax,%rdx), %esi
 1145 0afb 488B4DA0 		movq	-96(%rbp), %rcx
 1146 0aff 488B55B0 		movq	-80(%rbp), %rdx
 1147 0b03 488B45B8 		movq	-72(%rbp), %rax
 1148 0b07 4889C7   		movq	%rax, %rdi
 1149 0b0a E81FF5FF 		call	swapBytes
 1149      FF
 1150 0b0f 8945E0   		movl	%eax, -32(%rbp)
 254:xsvf2csvf.c   **** 			CHECK_STATUS(fStatus, fStatus, cleanup, "xsvfSwapBytes()");
 1151              		.loc 1 254 4 discriminator 4
 1152 0b12 837DE000 		cmpl	$0, -32(%rbp)
 1153 0b16 0F848501 		je	.L101
 1153      0000
 1154              		.loc 1 254 4 is_stmt 0 discriminator 1
 1155 0b1c 488B45A0 		movq	-96(%rbp), %rax
 1156 0b20 488D1500 		leaq	.LC3(%rip), %rdx
 1156      000000
 1157 0b27 4889D6   		movq	%rdx, %rsi
 1158 0b2a 4889C7   		movq	%rax, %rdi
 1159 0b2d E8000000 		call	errPrefix@PLT
 1159      00
 1160 0b32 8B45E0   		movl	-32(%rbp), %eax
 1161 0b35 8945C8   		movl	%eax, -56(%rbp)
 1162 0b38 E9C50100 		jmp	.L44
 1162      00
 1163              	.L30:
 255:xsvf2csvf.c   **** 			break;
 256:xsvf2csvf.c   **** 
 257:xsvf2csvf.c   **** 		case XSDRE:
 258:xsvf2csvf.c   **** 			// Just add the XSDRE data to the end of the previous XSDR
 259:xsvf2csvf.c   **** 			curXSize += newXSize;
 1164              		.loc 1 259 13 is_stmt 1
 1165 0b3d 8B45CC   		movl	-52(%rbp), %eax
 1166 0b40 0145D0   		addl	%eax, -48(%rbp)
 260:xsvf2csvf.c   **** 			bStatus = bufWriteLongBE(outBuf, totOffset, curXSize, error);
 1167              		.loc 1 260 14
 1168 0b43 8B75D4   		movl	-44(%rbp), %esi
 1169 0b46 488B4DA0 		movq	-96(%rbp), %rcx
 1170 0b4a 8B55D0   		movl	-48(%rbp), %edx
 1171 0b4d 488B45B0 		movq	-80(%rbp), %rax
 1172 0b51 4889C7   		movq	%rax, %rdi
 1173 0b54 E8000000 		call	bufWriteLongBE@PLT
 1173      00
 1174 0b59 8945DC   		movl	%eax, -36(%rbp)
 261:xsvf2csvf.c   **** 			CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "xsvfSwapBytes()");
 1175              		.loc 1 261 4
 1176 0b5c 837DDC00 		cmpl	$0, -36(%rbp)
 1177 0b60 7422     		je	.L86
 1178              		.loc 1 261 4 is_stmt 0 discriminator 1
 1179 0b62 488B45A0 		movq	-96(%rbp), %rax
 1180 0b66 488D1500 		leaq	.LC3(%rip), %rdx
 1180      000000
 1181 0b6d 4889D6   		movq	%rdx, %rsi
 1182 0b70 4889C7   		movq	%rax, %rdi
 1183 0b73 E8000000 		call	errPrefix@PLT
 1183      00
 1184 0b78 C745C801 		movl	$1, -56(%rbp)
 1184      000000
 1185 0b7f E97E0100 		jmp	.L44
 1185      00
 1186              	.L86:
 262:xsvf2csvf.c   **** 			fStatus = swapBytes(xc, bitsToBytes(newXSize), outBuf, error);
 1187              		.loc 1 262 28 is_stmt 1
 1188 0b84 8B45CC   		movl	-52(%rbp), %eax
 1189 0b87 C1E803   		shrl	$3, %eax
 1190 0b8a 89C2     		movl	%eax, %edx
 1191 0b8c 8B45CC   		movl	-52(%rbp), %eax
 1192 0b8f 83E007   		andl	$7, %eax
 1193 0b92 85C0     		testl	%eax, %eax
 1194 0b94 7407     		je	.L87
 1195              		.loc 1 262 28 is_stmt 0 discriminator 1
 1196 0b96 B8010000 		movl	$1, %eax
 1196      00
 1197 0b9b EB05     		jmp	.L88
 1198              	.L87:
 1199              		.loc 1 262 28 discriminator 2
 1200 0b9d B8000000 		movl	$0, %eax
 1200      00
 1201              	.L88:
 1202              		.loc 1 262 14 is_stmt 1 discriminator 4
 1203 0ba2 8D3410   		leal	(%rax,%rdx), %esi
 1204 0ba5 488B4DA0 		movq	-96(%rbp), %rcx
 1205 0ba9 488B55B0 		movq	-80(%rbp), %rdx
 1206 0bad 488B45B8 		movq	-72(%rbp), %rax
 1207 0bb1 4889C7   		movq	%rax, %rdi
 1208 0bb4 E875F4FF 		call	swapBytes
 1208      FF
 1209 0bb9 8945E0   		movl	%eax, -32(%rbp)
 263:xsvf2csvf.c   **** 			CHECK_STATUS(fStatus, fStatus, cleanup, "xsvfSwapBytes()");
 1210              		.loc 1 263 4 discriminator 4
 1211 0bbc 837DE000 		cmpl	$0, -32(%rbp)
 1212 0bc0 0F84DE00 		je	.L102
 1212      0000
 1213              		.loc 1 263 4 is_stmt 0 discriminator 1
 1214 0bc6 488B45A0 		movq	-96(%rbp), %rax
 1215 0bca 488D1500 		leaq	.LC3(%rip), %rdx
 1215      000000
 1216 0bd1 4889D6   		movq	%rdx, %rsi
 1217 0bd4 4889C7   		movq	%rax, %rdi
 1218 0bd7 E8000000 		call	errPrefix@PLT
 1218      00
 1219 0bdc 8B45E0   		movl	-32(%rbp), %eax
 1220 0bdf 8945C8   		movl	%eax, -56(%rbp)
 1221 0be2 E91B0100 		jmp	.L44
 1221      00
 1222              	.L29:
 264:xsvf2csvf.c   **** 			break;
 265:xsvf2csvf.c   **** 
 266:xsvf2csvf.c   **** 		case XSTATE:
 267:xsvf2csvf.c   **** 			// There doesn't seem to be much point in these commands, since the other commands have
 268:xsvf2csvf.c   **** 			// implied state transitions anyway. Just make sure the TAP is initialised to be at
 269:xsvf2csvf.c   **** 			// Run-Test/Idle before playing the CSVF stream.
 270:xsvf2csvf.c   **** 			getNextByte(xc);
 1223              		.loc 1 270 4 is_stmt 1
 1224 0be7 488B45B8 		movq	-72(%rbp), %rax
 1225 0beb 4889C7   		movq	%rax, %rdi
 1226 0bee E80DF4FF 		call	getNextByte
 1226      FF
 271:xsvf2csvf.c   **** 			break;
 1227              		.loc 1 271 4
 1228 0bf3 E9B30000 		jmp	.L52
 1228      00
 1229              	.L28:
 272:xsvf2csvf.c   **** 
 273:xsvf2csvf.c   **** 		case XENDIR:
 274:xsvf2csvf.c   **** 			// Only the default XENDIR state (TAPSTATE_RUN_TEST_IDLE) is supported. Fail fast if
 275:xsvf2csvf.c   **** 			// there's an attempt to switch the XENDIR state to PAUSE_IR.
 276:xsvf2csvf.c   **** 			thisByte = getNextByte(xc);
 1230              		.loc 1 276 15
 1231 0bf8 488B45B8 		movq	-72(%rbp), %rax
 1232 0bfc 4889C7   		movq	%rax, %rdi
 1233 0bff E8FCF3FF 		call	getNextByte
 1233      FF
 1234 0c04 8845C2   		movb	%al, -62(%rbp)
 277:xsvf2csvf.c   **** 			CHECK_STATUS(
 1235              		.loc 1 277 4
 1236 0c07 807DC200 		cmpb	$0, -62(%rbp)
 1237 0c0b 0F849600 		je	.L103
 1237      0000
 1238              		.loc 1 277 4 is_stmt 0 discriminator 1
 1239 0c11 488B45A0 		movq	-96(%rbp), %rax
 1240 0c15 488D1500 		leaq	.LC5(%rip), %rdx
 1240      000000
 1241 0c1c 4889D6   		movq	%rdx, %rsi
 1242 0c1f 4889C7   		movq	%rax, %rdi
 1243 0c22 E8000000 		call	errPrefix@PLT
 1243      00
 1244 0c27 C745C808 		movl	$8, -56(%rbp)
 1244      000000
 1245 0c2e E9CF0000 		jmp	.L44
 1245      00
 1246              	.L26:
 278:xsvf2csvf.c   **** 				thisByte, FL_UNSUPPORTED_DATA_ERR, cleanup,
 279:xsvf2csvf.c   **** 				"xsvfSwapBytes(): Only XENDIR(TAPSTATE_RUN_TEST_IDLE) is supported!");
 280:xsvf2csvf.c   **** 			break;
 281:xsvf2csvf.c   **** 
 282:xsvf2csvf.c   **** 		case XENDDR:
 283:xsvf2csvf.c   **** 			// Only the default XENDDR state (TAPSTATE_RUN_TEST_IDLE) is supported. Fail fast if
 284:xsvf2csvf.c   **** 			// there's an attempt to switch the XENDDR state to PAUSE_DR.
 285:xsvf2csvf.c   **** 			thisByte = getNextByte(xc);
 1247              		.loc 1 285 15 is_stmt 1
 1248 0c33 488B45B8 		movq	-72(%rbp), %rax
 1249 0c37 4889C7   		movq	%rax, %rdi
 1250 0c3a E8C1F3FF 		call	getNextByte
 1250      FF
 1251 0c3f 8845C2   		movb	%al, -62(%rbp)
 286:xsvf2csvf.c   **** 			CHECK_STATUS(
 1252              		.loc 1 286 4
 1253 0c42 807DC200 		cmpb	$0, -62(%rbp)
 1254 0c46 7462     		je	.L104
 1255              		.loc 1 286 4 is_stmt 0 discriminator 1
 1256 0c48 488B45A0 		movq	-96(%rbp), %rax
 1257 0c4c 488D1500 		leaq	.LC6(%rip), %rdx
 1257      000000
 1258 0c53 4889D6   		movq	%rdx, %rsi
 1259 0c56 4889C7   		movq	%rax, %rdi
 1260 0c59 E8000000 		call	errPrefix@PLT
 1260      00
 1261 0c5e C745C808 		movl	$8, -56(%rbp)
 1261      000000
 1262 0c65 E9980000 		jmp	.L44
 1262      00
 1263              	.L95:
 287:xsvf2csvf.c   **** 				thisByte, FL_UNSUPPORTED_DATA_ERR, cleanup,
 288:xsvf2csvf.c   **** 				"xsvfSwapBytes(): Only XENDDR(TAPSTATE_RUN_TEST_IDLE) is supported!");
 289:xsvf2csvf.c   **** 			break;
 290:xsvf2csvf.c   **** 
 291:xsvf2csvf.c   **** 		default:
 292:xsvf2csvf.c   **** 			// All other commands are unsupported, so fail if they're encountered.
 293:xsvf2csvf.c   **** 			CHECK_STATUS(
 1264              		.loc 1 293 4 is_stmt 1 discriminator 1
 1265 0c6a 0FB655C2 		movzbl	-62(%rbp), %edx
 1266 0c6e 488B45A0 		movq	-96(%rbp), %rax
 1267 0c72 488D0D00 		leaq	.LC7(%rip), %rcx
 1267      000000
 1268 0c79 4889CE   		movq	%rcx, %rsi
 1269 0c7c 4889C7   		movq	%rax, %rdi
 1270 0c7f B8000000 		movl	$0, %eax
 1270      00
 1271 0c84 E8000000 		call	errRender@PLT
 1271      00
 1272 0c89 C745C807 		movl	$7, -56(%rbp)
 1272      000000
 1273 0c90 EB70     		jmp	.L44
 1274              	.L96:
 182:xsvf2csvf.c   **** 
 1275              		.loc 1 182 4
 1276 0c92 90       		nop
 1277 0c93 EB16     		jmp	.L52
 1278              	.L97:
 201:xsvf2csvf.c   **** 
 1279              		.loc 1 201 4
 1280 0c95 90       		nop
 1281 0c96 EB13     		jmp	.L52
 1282              	.L98:
 212:xsvf2csvf.c   **** 
 1283              		.loc 1 212 4
 1284 0c98 90       		nop
 1285 0c99 EB10     		jmp	.L52
 1286              	.L99:
 235:xsvf2csvf.c   **** 
 1287              		.loc 1 235 4
 1288 0c9b 90       		nop
 1289 0c9c EB0D     		jmp	.L52
 1290              	.L100:
 246:xsvf2csvf.c   **** 
 1291              		.loc 1 246 4
 1292 0c9e 90       		nop
 1293 0c9f EB0A     		jmp	.L52
 1294              	.L101:
 255:xsvf2csvf.c   **** 
 1295              		.loc 1 255 4
 1296 0ca1 90       		nop
 1297 0ca2 EB07     		jmp	.L52
 1298              	.L102:
 264:xsvf2csvf.c   **** 
 1299              		.loc 1 264 4
 1300 0ca4 90       		nop
 1301 0ca5 EB04     		jmp	.L52
 1302              	.L103:
 280:xsvf2csvf.c   **** 
 1303              		.loc 1 280 4
 1304 0ca7 90       		nop
 1305 0ca8 EB01     		jmp	.L52
 1306              	.L104:
 289:xsvf2csvf.c   **** 
 1307              		.loc 1 289 4
 1308 0caa 90       		nop
 1309              	.L52:
 294:xsvf2csvf.c   **** 				true, FL_UNSUPPORTED_CMD_ERR, cleanup,
 295:xsvf2csvf.c   **** 				"xsvfSwapBytes(): Unsupported command 0x%02X!", thisByte);
 296:xsvf2csvf.c   **** 		}
 297:xsvf2csvf.c   **** 		thisByte = getNextByte(xc);
 1310              		.loc 1 297 14
 1311 0cab 488B45B8 		movq	-72(%rbp), %rax
 1312 0caf 4889C7   		movq	%rax, %rdi
 1313 0cb2 E849F3FF 		call	getNextByte
 1313      FF
 1314 0cb7 8845C2   		movb	%al, -62(%rbp)
 1315              	.L24:
 118:xsvf2csvf.c   **** 		switch ( thisByte ) {
 1316              		.loc 1 118 19
 1317 0cba 807DC200 		cmpb	$0, -62(%rbp)
 1318 0cbe 0F8531F6 		jne	.L92
 1318      FFFF
 298:xsvf2csvf.c   **** 	}
 299:xsvf2csvf.c   **** 
 300:xsvf2csvf.c   **** 	// Add the XCOMPLETE command
 301:xsvf2csvf.c   **** 	bStatus = bufAppendByte(outBuf, XCOMPLETE, error);
 1319              		.loc 1 301 12
 1320 0cc4 488B55A0 		movq	-96(%rbp), %rdx
 1321 0cc8 488B45B0 		movq	-80(%rbp), %rax
 1322 0ccc BE000000 		movl	$0, %esi
 1322      00
 1323 0cd1 4889C7   		movq	%rax, %rdi
 1324 0cd4 E8000000 		call	bufAppendByte@PLT
 1324      00
 1325 0cd9 8945DC   		movl	%eax, -36(%rbp)
 302:xsvf2csvf.c   **** 	CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "xsvfSwapBytes()");
 1326              		.loc 1 302 2
 1327 0cdc 837DDC00 		cmpl	$0, -36(%rbp)
 1328 0ce0 741F     		je	.L105
 1329              		.loc 1 302 2 is_stmt 0 discriminator 1
 1330 0ce2 488B45A0 		movq	-96(%rbp), %rax
 1331 0ce6 488D1500 		leaq	.LC3(%rip), %rdx
 1331      000000
 1332 0ced 4889D6   		movq	%rdx, %rsi
 1333 0cf0 4889C7   		movq	%rax, %rdi
 1334 0cf3 E8000000 		call	errPrefix@PLT
 1334      00
 1335 0cf8 C745C801 		movl	$1, -56(%rbp)
 1335      000000
 1336 0cff EB01     		jmp	.L44
 1337              	.L105:
 303:xsvf2csvf.c   **** 
 304:xsvf2csvf.c   **** cleanup:
 1338              		.loc 1 304 1 is_stmt 1
 1339 0d01 90       		nop
 1340              	.L44:
 305:xsvf2csvf.c   **** 	return retVal;
 1341              		.loc 1 305 9
 1342 0d02 8B45C8   		movl	-56(%rbp), %eax
 306:xsvf2csvf.c   **** }
 1343              		.loc 1 306 1
 1344 0d05 488B55F8 		movq	-8(%rbp), %rdx
 1345 0d09 64482B14 		subq	%fs:40, %rdx
 1345      25280000 
 1345      00
 1346 0d12 7405     		je	.L94
 1347 0d14 E8000000 		call	__stack_chk_fail@PLT
 1347      00
 1348              	.L94:
 1349 0d19 C9       		leave
 1350              		.cfi_def_cfa 7, 8
 1351 0d1a C3       		ret
 1352              		.cfi_endproc
 1353              	.LFE8:
 1355              		.section	.rodata
 1356              	.LC8:
 1357 01ac 666C4C6F 		.string	"flLoadXsvfAndConvertToCsvf()"
 1357      61645873 
 1357      7666416E 
 1357      64436F6E 
 1357      76657274 
 1358              		.text
 1359              		.globl	flLoadXsvfAndConvertToCsvf
 1361              	flLoadXsvfAndConvertToCsvf:
 1362              	.LFB9:
 307:xsvf2csvf.c   **** 
 308:xsvf2csvf.c   **** DLLEXPORT(FLStatus) flLoadXsvfAndConvertToCsvf(
 309:xsvf2csvf.c   **** 	const char *xsvfFile, struct Buffer *csvfBuf, uint32 *maxBufSize, const char **error)
 310:xsvf2csvf.c   **** {
 1363              		.loc 1 310 1
 1364              		.cfi_startproc
 1365 0d1b F30F1EFA 		endbr64
 1366 0d1f 55       		pushq	%rbp
 1367              		.cfi_def_cfa_offset 16
 1368              		.cfi_offset 6, -16
 1369 0d20 4889E5   		movq	%rsp, %rbp
 1370              		.cfi_def_cfa_register 6
 1371 0d23 4883EC60 		subq	$96, %rsp
 1372 0d27 48897DB8 		movq	%rdi, -72(%rbp)
 1373 0d2b 488975B0 		movq	%rsi, -80(%rbp)
 1374 0d2f 488955A8 		movq	%rdx, -88(%rbp)
 1375 0d33 48894DA0 		movq	%rcx, -96(%rbp)
 1376              		.loc 1 310 1
 1377 0d37 64488B04 		movq	%fs:40, %rax
 1377      25280000 
 1377      00
 1378 0d40 488945F8 		movq	%rax, -8(%rbp)
 1379 0d44 31C0     		xorl	%eax, %eax
 311:xsvf2csvf.c   **** 	FLStatus fStatus, retVal = FL_SUCCESS;
 1380              		.loc 1 311 20
 1381 0d46 C745C400 		movl	$0, -60(%rbp)
 1381      000000
 312:xsvf2csvf.c   **** 	BufferStatus bStatus;
 313:xsvf2csvf.c   **** 	XC xc;
 314:xsvf2csvf.c   **** 	xc.offset = 0;
 1382              		.loc 1 314 12
 1383 0d4d C745F000 		movl	$0, -16(%rbp)
 1383      000000
 315:xsvf2csvf.c   **** 	bStatus = bufInitialise(&xc.xsvfBuf, 0x20000, 0, error);
 1384              		.loc 1 315 12
 1385 0d54 488B55A0 		movq	-96(%rbp), %rdx
 1386 0d58 488D45D0 		leaq	-48(%rbp), %rax
 1387 0d5c 4889D1   		movq	%rdx, %rcx
 1388 0d5f BA000000 		movl	$0, %edx
 1388      00
 1389 0d64 BE000002 		movl	$131072, %esi
 1389      00
 1390 0d69 4889C7   		movq	%rax, %rdi
 1391 0d6c E8000000 		call	bufInitialise@PLT
 1391      00
 1392 0d71 8945C8   		movl	%eax, -56(%rbp)
 316:xsvf2csvf.c   **** 	CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "flLoadXsvfAndConvertToCsvf()");
 1393              		.loc 1 316 2
 1394 0d74 837DC800 		cmpl	$0, -56(%rbp)
 1395 0d78 741F     		je	.L107
 1396              		.loc 1 316 2 is_stmt 0 discriminator 1
 1397 0d7a 488B45A0 		movq	-96(%rbp), %rax
 1398 0d7e 488D1500 		leaq	.LC8(%rip), %rdx
 1398      000000
 1399 0d85 4889D6   		movq	%rdx, %rsi
 1400 0d88 4889C7   		movq	%rax, %rdi
 1401 0d8b E8000000 		call	errPrefix@PLT
 1401      00
 1402 0d90 C745C401 		movl	$1, -60(%rbp)
 1402      000000
 1403 0d97 EB7F     		jmp	.L108
 1404              	.L107:
 317:xsvf2csvf.c   **** 	bStatus = bufAppendFromBinaryFile(&xc.xsvfBuf, xsvfFile, error);
 1405              		.loc 1 317 12 is_stmt 1
 1406 0d99 488B55A0 		movq	-96(%rbp), %rdx
 1407 0d9d 488B4DB8 		movq	-72(%rbp), %rcx
 1408 0da1 488D45D0 		leaq	-48(%rbp), %rax
 1409 0da5 4889CE   		movq	%rcx, %rsi
 1410 0da8 4889C7   		movq	%rax, %rdi
 1411 0dab E8000000 		call	bufAppendFromBinaryFile@PLT
 1411      00
 1412 0db0 8945C8   		movl	%eax, -56(%rbp)
 318:xsvf2csvf.c   **** 	CHECK_STATUS(bStatus, FL_FILE_ERR, cleanup, "flLoadXsvfAndConvertToCsvf()");
 1413              		.loc 1 318 2
 1414 0db3 837DC800 		cmpl	$0, -56(%rbp)
 1415 0db7 741F     		je	.L109
 1416              		.loc 1 318 2 is_stmt 0 discriminator 1
 1417 0db9 488B45A0 		movq	-96(%rbp), %rax
 1418 0dbd 488D1500 		leaq	.LC8(%rip), %rdx
 1418      000000
 1419 0dc4 4889D6   		movq	%rdx, %rsi
 1420 0dc7 4889C7   		movq	%rax, %rdi
 1421 0dca E8000000 		call	errPrefix@PLT
 1421      00
 1422 0dcf C745C406 		movl	$6, -60(%rbp)
 1422      000000
 1423 0dd6 EB40     		jmp	.L108
 1424              	.L109:
 319:xsvf2csvf.c   **** 	fStatus = xsvfSwapBytes(&xc, csvfBuf, maxBufSize, error);
 1425              		.loc 1 319 12 is_stmt 1
 1426 0dd8 488B4DA0 		movq	-96(%rbp), %rcx
 1427 0ddc 488B55A8 		movq	-88(%rbp), %rdx
 1428 0de0 488B75B0 		movq	-80(%rbp), %rsi
 1429 0de4 488D45D0 		leaq	-48(%rbp), %rax
 1430 0de8 4889C7   		movq	%rax, %rdi
 1431 0deb E88DF4FF 		call	xsvfSwapBytes
 1431      FF
 1432 0df0 8945CC   		movl	%eax, -52(%rbp)
 320:xsvf2csvf.c   **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "flLoadXsvfAndConvertToCsvf()");
 1433              		.loc 1 320 2
 1434 0df3 837DCC00 		cmpl	$0, -52(%rbp)
 1435 0df7 741E     		je	.L112
 1436              		.loc 1 320 2 is_stmt 0 discriminator 1
 1437 0df9 488B45A0 		movq	-96(%rbp), %rax
 1438 0dfd 488D1500 		leaq	.LC8(%rip), %rdx
 1438      000000
 1439 0e04 4889D6   		movq	%rdx, %rsi
 1440 0e07 4889C7   		movq	%rax, %rdi
 1441 0e0a E8000000 		call	errPrefix@PLT
 1441      00
 1442 0e0f 8B45CC   		movl	-52(%rbp), %eax
 1443 0e12 8945C4   		movl	%eax, -60(%rbp)
 1444 0e15 EB01     		jmp	.L108
 1445              	.L112:
 321:xsvf2csvf.c   **** cleanup:
 1446              		.loc 1 321 1 is_stmt 1
 1447 0e17 90       		nop
 1448              	.L108:
 322:xsvf2csvf.c   **** 	bufDestroy(&xc.xsvfBuf);
 1449              		.loc 1 322 2
 1450 0e18 488D45D0 		leaq	-48(%rbp), %rax
 1451 0e1c 4889C7   		movq	%rax, %rdi
 1452 0e1f E8000000 		call	bufDestroy@PLT
 1452      00
 323:xsvf2csvf.c   **** 	return retVal;
 1453              		.loc 1 323 9
 1454 0e24 8B45C4   		movl	-60(%rbp), %eax
 324:xsvf2csvf.c   **** }
 1455              		.loc 1 324 1
 1456 0e27 488B55F8 		movq	-8(%rbp), %rdx
 1457 0e2b 64482B14 		subq	%fs:40, %rdx
 1457      25280000 
 1457      00
 1458 0e34 7405     		je	.L111
 1459 0e36 E8000000 		call	__stack_chk_fail@PLT
 1459      00
 1460              	.L111:
 1461 0e3b C9       		leave
 1462              		.cfi_def_cfa 7, 8
 1463 0e3c C3       		ret
 1464              		.cfi_endproc
 1465              	.LFE9:
 1467              	.Letext0:
 1468              		.file 2 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h"
 1469              		.file 3 "/home/pong/FPGALink/makestuff/common/makestuff.h"
 1470              		.file 4 "./libfpgalink.h"
 1471              		.file 5 "/home/pong/FPGALink/makestuff/libs/libbuffer/libbuffer.h"
 1472              		.file 6 "xsvf.h"
 1473              		.file 7 "/home/pong/FPGALink/makestuff/libs/liberror/liberror.h"
 3201              		.section	.note.gnu.property,"a"
 3202              		.align 8
 3203 0000 04000000 		.long	1f - 0f
 3204 0004 10000000 		.long	4f - 1f
 3205 0008 05000000 		.long	5
 3206              	0:
 3207 000c 474E5500 		.string	"GNU"
 3208              	1:
 3209              		.align 8
 3210 0010 020000C0 		.long	0xc0000002
 3211 0014 04000000 		.long	3f - 2f
 3212              	2:
 3213 0018 03000000 		.long	0x3
 3214              	3:
 3215 001c 00000000 		.align 8
 3216              	4:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 xsvf2csvf.c
     /tmp/ccdAjDIN.s:6      .text:0000000000000000 getNextByte
     /tmp/ccdAjDIN.s:44     .text:000000000000002e swapBytes
     /tmp/ccdAjDIN.s:133    .text:00000000000000de swapAndInterleaveBytes
     /tmp/ccdAjDIN.s:260    .text:00000000000001df sendXSize
     /tmp/ccdAjDIN.s:344    .text:000000000000027d xsvfSwapBytes
     /tmp/ccdAjDIN.s:1361   .text:0000000000000d1b flLoadXsvfAndConvertToCsvf

UNDEFINED SYMBOLS
bufAppendConst
errPrefix
bufAppendByte
bufAppendLongBE
errRender
bufWriteLongBE
__stack_chk_fail
bufInitialise
bufAppendFromBinaryFile
bufDestroy
