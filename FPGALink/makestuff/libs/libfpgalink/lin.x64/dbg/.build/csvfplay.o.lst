   1              		.file	"csvfplay.c"
   2              		.text
   3              	.Ltext0:
   4              		.file 0 "/home/pong/FPGALink/makestuff/libs/libfpgalink" "csvfplay.c"
   5              		.section	.rodata
   6              	.LC0:
   7 0000 63737666 		.string	"csvfPlay()"
   7      506C6179 
   7      282900
   8 000b 00000000 		.align 8
   8      00
   9              	.LC1:
  10 0010 63737666 		.string	"csvfPlay(): XSDRTDO failed:\n  Got: %s\n  Mask: %s\n  Expecting: %s"
  10      506C6179 
  10      28293A20 
  10      58534452 
  10      54444F20 
  11 0051 00000000 		.align 8
  11      000000
  12              	.LC2:
  13 0058 63737666 		.string	"csvfPlay(): Unsupported command 0x%02X"
  13      506C6179 
  13      28293A20 
  13      556E7375 
  13      70706F72 
  14              		.text
  15              		.globl	csvfPlay
  17              	csvfPlay:
  18              	.LFB4:
  19              		.file 1 "csvfplay.c"
   1:csvfplay.c    **** /*
   2:csvfplay.c    ****  * Copyright (C) 2009-2012 Chris McClelland
   3:csvfplay.c    ****  *
   4:csvfplay.c    ****  * This program is free software: you can redistribute it and/or modify
   5:csvfplay.c    ****  * it under the terms of the GNU Lesser General Public License as published by
   6:csvfplay.c    ****  * the Free Software Foundation, either version 3 of the License, or
   7:csvfplay.c    ****  * (at your option) any later version.
   8:csvfplay.c    ****  *
   9:csvfplay.c    ****  * This program is distributed in the hope that it will be useful,
  10:csvfplay.c    ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:csvfplay.c    ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:csvfplay.c    ****  * GNU Lesser General Public License for more details.
  13:csvfplay.c    ****  *
  14:csvfplay.c    ****  * You should have received a copy of the GNU Lesser General Public License
  15:csvfplay.c    ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:csvfplay.c    ****  */
  17:csvfplay.c    **** // Uncomment for help debugging JTAG issues
  18:csvfplay.c    **** //#define DEBUG
  19:csvfplay.c    **** 
  20:csvfplay.c    **** #ifdef DEBUG
  21:csvfplay.c    **** #include <stdio.h>
  22:csvfplay.c    **** #endif
  23:csvfplay.c    **** #include <stdlib.h>
  24:csvfplay.c    **** #include <makestuff.h>
  25:csvfplay.c    **** #include <liberror.h>
  26:csvfplay.c    **** #include "private.h"
  27:csvfplay.c    **** #include "vendorCommands.h"
  28:csvfplay.c    **** #include "xsvf.h"
  29:csvfplay.c    **** #include "csvfplay.h"
  30:csvfplay.c    **** 
  31:csvfplay.c    **** // ------------------------------------------------------------------------------------------------
  32:csvfplay.c    **** // Declaration of private types & functions
  33:csvfplay.c    **** // ------------------------------------------------------------------------------------------------
  34:csvfplay.c    **** 
  35:csvfplay.c    **** static void dumpSimple(const unsigned char *input, unsigned int length, char *p);
  36:csvfplay.c    **** static bool tdoMatchFailed(
  37:csvfplay.c    **** 	const uint8 *tdoData, const uint8 *tdoMask, const uint8 *tdoExpected, uint32 numBytes);
  38:csvfplay.c    **** 
  39:csvfplay.c    **** // ------------------------------------------------------------------------------------------------
  40:csvfplay.c    **** // Public functions
  41:csvfplay.c    **** // ------------------------------------------------------------------------------------------------
  42:csvfplay.c    **** 
  43:csvfplay.c    **** // Play the CSVF stream into the JTAG port.
  44:csvfplay.c    **** //
  45:csvfplay.c    **** FLStatus csvfPlay(struct FLContext *handle, const uint8 *csvfData, const char **error) {
  20              		.loc 1 45 88
  21              		.cfi_startproc
  22 0000 F30F1EFA 		endbr64
  23 0004 55       		pushq	%rbp
  24              		.cfi_def_cfa_offset 16
  25              		.cfi_offset 6, -16
  26 0005 4889E5   		movq	%rsp, %rbp
  27              		.cfi_def_cfa_register 6
  28 0008 4C8D9C24 		leaq	-20480(%rsp), %r11
  28      00B0FFFF 
  29              	.LPSRL0:
  30 0010 4881EC00 		subq	$4096, %rsp
  30      100000
  31 0017 48830C24 		orq	$0, (%rsp)
  31      00
  32 001c 4C39DC   		cmpq	%r11, %rsp
  33 001f 75EF     		jne	.LPSRL0
  34 0021 4881EC90 		subq	$144, %rsp
  34      000000
  35 0028 4889BD88 		movq	%rdi, -20600(%rbp)
  35      AFFFFF
  36 002f 4889B580 		movq	%rsi, -20608(%rbp)
  36      AFFFFF
  37 0036 48899578 		movq	%rdx, -20616(%rbp)
  37      AFFFFF
  38              		.loc 1 45 88
  39 003d 64488B04 		movq	%fs:40, %rax
  39      25280000 
  39      00
  40 0046 488945F8 		movq	%rax, -8(%rbp)
  41 004a 31C0     		xorl	%eax, %eax
  46:csvfplay.c    **** 	FLStatus retVal = FL_SUCCESS;
  42              		.loc 1 46 11
  43 004c C7859CAF 		movl	$0, -20580(%rbp)
  43      FFFF0000 
  43      0000
  47:csvfplay.c    **** 	FLStatus fStatus;
  48:csvfplay.c    **** 	uint8 thisByte, numBits;
  49:csvfplay.c    **** 	uint32 numBytes;
  50:csvfplay.c    **** 	uint8 *tdoPtr, *tdiPtr;
  51:csvfplay.c    **** 	uint8 i;
  52:csvfplay.c    **** 	uint32 xsdrSize = 0;
  44              		.loc 1 52 9
  45 0056 C785A4AF 		movl	$0, -20572(%rbp)
  45      FFFF0000 
  45      0000
  53:csvfplay.c    **** 	uint32 xruntest = 0;
  46              		.loc 1 53 9
  47 0060 C785A8AF 		movl	$0, -20568(%rbp)
  47      FFFF0000 
  47      0000
  54:csvfplay.c    **** 	uint8 tdoMask[BUF_SIZE];
  55:csvfplay.c    **** 	uint8 tdiData[BUF_SIZE];
  56:csvfplay.c    **** 	uint8 tdoData[BUF_SIZE];
  57:csvfplay.c    **** 	uint8 tdoExpected[BUF_SIZE];
  58:csvfplay.c    **** 	
  59:csvfplay.c    **** 	char data[BUF_SIZE*2+1];
  60:csvfplay.c    **** 	char mask[BUF_SIZE*2+1];
  61:csvfplay.c    **** 	char expected[BUF_SIZE*2+1];
  62:csvfplay.c    **** 	
  63:csvfplay.c    **** 	uint8 *tdiAll;
  64:csvfplay.c    **** 	const uint8 *ptr = csvfData;
  48              		.loc 1 64 15
  49 006a 488B8580 		movq	-20608(%rbp), %rax
  49      AFFFFF
  50 0071 488985C0 		movq	%rax, -20544(%rbp)
  50      AFFFFF
  65:csvfplay.c    **** 
  66:csvfplay.c    **** 	fStatus = jtagClockFSM(handle, 0x0000001F, 6, error);  // Reset TAP, goto Run-Test/Idle
  51              		.loc 1 66 12
  52 0078 488B9578 		movq	-20616(%rbp), %rdx
  52      AFFFFF
  53 007f 488B8588 		movq	-20600(%rbp), %rax
  53      AFFFFF
  54 0086 4889D1   		movq	%rdx, %rcx
  55 0089 BA060000 		movl	$6, %edx
  55      00
  56 008e BE1F0000 		movl	$31, %esi
  56      00
  57 0093 4889C7   		movq	%rax, %rdi
  58 0096 E8000000 		call	jtagClockFSM@PLT
  58      00
  59 009b 8985ACAF 		movl	%eax, -20564(%rbp)
  59      FFFF
  67:csvfplay.c    **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "csvfPlay()");
  60              		.loc 1 67 2
  61 00a1 83BDACAF 		cmpl	$0, -20564(%rbp)
  61      FFFF00
  62 00a8 742A     		je	.L2
  63              		.loc 1 67 2 is_stmt 0 discriminator 1
  64 00aa 488B8578 		movq	-20616(%rbp), %rax
  64      AFFFFF
  65 00b1 488D1500 		leaq	.LC0(%rip), %rdx
  65      000000
  66 00b8 4889D6   		movq	%rdx, %rsi
  67 00bb 4889C7   		movq	%rax, %rdi
  68 00be E8000000 		call	errPrefix@PLT
  68      00
  69 00c3 8B85ACAF 		movl	-20564(%rbp), %eax
  69      FFFF
  70 00c9 89859CAF 		movl	%eax, -20580(%rbp)
  70      FFFF
  71 00cf E9F60900 		jmp	.L3
  71      00
  72              	.L2:
  68:csvfplay.c    **** 
  69:csvfplay.c    **** 	thisByte = *ptr++;
  73              		.loc 1 69 17 is_stmt 1
  74 00d4 488B85C0 		movq	-20544(%rbp), %rax
  74      AFFFFF
  75 00db 488D5001 		leaq	1(%rax), %rdx
  76 00df 488995C0 		movq	%rdx, -20544(%rbp)
  76      AFFFFF
  77              		.loc 1 69 11
  78 00e6 0FB600   		movzbl	(%rax), %eax
  79 00e9 888599AF 		movb	%al, -20583(%rbp)
  79      FFFF
  70:csvfplay.c    **** 	while ( thisByte != XCOMPLETE ) {
  80              		.loc 1 70 8
  81 00ef E9C80900 		jmp	.L4
  81      00
  82              	.L47:
  71:csvfplay.c    **** 		switch ( thisByte ) {
  83              		.loc 1 71 3
  84 00f4 0FB68599 		movzbl	-20583(%rbp), %eax
  84      AFFFFF
  85 00fb 83F809   		cmpl	$9, %eax
  86 00fe 0F876509 		ja	.L50
  86      0000
  87 0104 89C0     		movl	%eax, %eax
  88 0106 488D1485 		leaq	0(,%rax,4), %rdx
  88      00000000 
  89 010e 488D0500 		leaq	.L7(%rip), %rax
  89      000000
  90 0115 8B0402   		movl	(%rdx,%rax), %eax
  91 0118 4898     		cltq
  92 011a 488D1500 		leaq	.L7(%rip), %rdx
  92      000000
  93 0121 4801D0   		addq	%rdx, %rax
  94 0124 3EFFE0   		notrack jmp	*%rax
  95              		.section	.rodata
  96 007f 00       		.align 4
  97              		.align 4
  98              	.L7:
  99 0080 00000000 		.long	.L50-.L7
 100 0084 00000000 		.long	.L12-.L7
 101 0088 00000000 		.long	.L11-.L7
 102 008c 00000000 		.long	.L10-.L7
 103 0090 00000000 		.long	.L9-.L7
 104 0094 00000000 		.long	.L50-.L7
 105 0098 00000000 		.long	.L50-.L7
 106 009c 00000000 		.long	.L50-.L7
 107 00a0 00000000 		.long	.L8-.L7
 108 00a4 00000000 		.long	.L6-.L7
 109              		.text
 110              	.L12:
  72:csvfplay.c    **** 		case XTDOMASK:
  73:csvfplay.c    **** 			#ifdef DEBUG
  74:csvfplay.c    **** 				printf("XTDOMASK(");
  75:csvfplay.c    **** 			#endif
  76:csvfplay.c    **** 			numBytes = bitsToBytes(xsdrSize);
 111              		.loc 1 76 15
 112 0127 8B85A4AF 		movl	-20572(%rbp), %eax
 112      FFFF
 113 012d C1E803   		shrl	$3, %eax
 114 0130 89C2     		movl	%eax, %edx
 115 0132 8B85A4AF 		movl	-20572(%rbp), %eax
 115      FFFF
 116 0138 83E007   		andl	$7, %eax
 117 013b 85C0     		testl	%eax, %eax
 118 013d 7407     		je	.L13
 119              		.loc 1 76 15 is_stmt 0 discriminator 1
 120 013f B8010000 		movl	$1, %eax
 120      00
 121 0144 EB05     		jmp	.L14
 122              	.L13:
 123              		.loc 1 76 15 discriminator 2
 124 0146 B8000000 		movl	$0, %eax
 124      00
 125              	.L14:
 126              		.loc 1 76 13 is_stmt 1 discriminator 4
 127 014b 01D0     		addl	%edx, %eax
 128 014d 8985A0AF 		movl	%eax, -20576(%rbp)
 128      FFFF
  77:csvfplay.c    **** 			tdoPtr = tdoMask;
 129              		.loc 1 77 11 discriminator 4
 130 0153 488D85D0 		leaq	-20528(%rbp), %rax
 130      AFFFFF
 131 015a 488985B0 		movq	%rax, -20560(%rbp)
 131      AFFFFF
  78:csvfplay.c    **** 			while ( numBytes-- ) {
 132              		.loc 1 78 10 discriminator 4
 133 0161 EB36     		jmp	.L15
 134              	.L16:
  79:csvfplay.c    **** 				thisByte = *ptr++;
 135              		.loc 1 79 20
 136 0163 488B85C0 		movq	-20544(%rbp), %rax
 136      AFFFFF
 137 016a 488D5001 		leaq	1(%rax), %rdx
 138 016e 488995C0 		movq	%rdx, -20544(%rbp)
 138      AFFFFF
 139              		.loc 1 79 14
 140 0175 0FB600   		movzbl	(%rax), %eax
 141 0178 888599AF 		movb	%al, -20583(%rbp)
 141      FFFF
  80:csvfplay.c    **** 				#ifdef DEBUG
  81:csvfplay.c    **** 					printf("%02X", thisByte);
  82:csvfplay.c    **** 				#endif
  83:csvfplay.c    **** 				*tdoPtr++ = thisByte;
 142              		.loc 1 83 12
 143 017e 488B85B0 		movq	-20560(%rbp), %rax
 143      AFFFFF
 144 0185 488D5001 		leaq	1(%rax), %rdx
 145 0189 488995B0 		movq	%rdx, -20560(%rbp)
 145      AFFFFF
 146              		.loc 1 83 15
 147 0190 0FB69599 		movzbl	-20583(%rbp), %edx
 147      AFFFFF
 148 0197 8810     		movb	%dl, (%rax)
 149              	.L15:
  78:csvfplay.c    **** 				thisByte = *ptr++;
 150              		.loc 1 78 20
 151 0199 8B85A0AF 		movl	-20576(%rbp), %eax
 151      FFFF
 152 019f 8D50FF   		leal	-1(%rax), %edx
 153 01a2 8995A0AF 		movl	%edx, -20576(%rbp)
 153      FFFF
  78:csvfplay.c    **** 				thisByte = *ptr++;
 154              		.loc 1 78 12
 155 01a8 85C0     		testl	%eax, %eax
 156 01aa 75B7     		jne	.L16
  84:csvfplay.c    **** 			}
  85:csvfplay.c    **** 			#ifdef DEBUG
  86:csvfplay.c    **** 				printf(")\n");
  87:csvfplay.c    **** 			#endif
  88:csvfplay.c    **** 			break;
 157              		.loc 1 88 4
 158 01ac E9F00800 		jmp	.L17
 158      00
 159              	.L9:
  89:csvfplay.c    **** 
  90:csvfplay.c    **** 		case XRUNTEST:
  91:csvfplay.c    **** 			xruntest = *ptr++;
 160              		.loc 1 91 19
 161 01b1 488B85C0 		movq	-20544(%rbp), %rax
 161      AFFFFF
 162 01b8 488D5001 		leaq	1(%rax), %rdx
 163 01bc 488995C0 		movq	%rdx, -20544(%rbp)
 163      AFFFFF
 164              		.loc 1 91 15
 165 01c3 0FB600   		movzbl	(%rax), %eax
 166              		.loc 1 91 13
 167 01c6 0FB6C0   		movzbl	%al, %eax
 168 01c9 8985A8AF 		movl	%eax, -20568(%rbp)
 168      FFFF
  92:csvfplay.c    **** 			xruntest <<= 8;
 169              		.loc 1 92 13
 170 01cf C1A5A8AF 		sall	$8, -20568(%rbp)
 170      FFFF08
  93:csvfplay.c    **** 			xruntest |= *ptr++;
 171              		.loc 1 93 20
 172 01d6 488B85C0 		movq	-20544(%rbp), %rax
 172      AFFFFF
 173 01dd 488D5001 		leaq	1(%rax), %rdx
 174 01e1 488995C0 		movq	%rdx, -20544(%rbp)
 174      AFFFFF
 175              		.loc 1 93 16
 176 01e8 0FB600   		movzbl	(%rax), %eax
 177 01eb 0FB6C0   		movzbl	%al, %eax
 178              		.loc 1 93 13
 179 01ee 0985A8AF 		orl	%eax, -20568(%rbp)
 179      FFFF
  94:csvfplay.c    **** 			xruntest <<= 8;
 180              		.loc 1 94 13
 181 01f4 C1A5A8AF 		sall	$8, -20568(%rbp)
 181      FFFF08
  95:csvfplay.c    **** 			xruntest |= *ptr++;
 182              		.loc 1 95 20
 183 01fb 488B85C0 		movq	-20544(%rbp), %rax
 183      AFFFFF
 184 0202 488D5001 		leaq	1(%rax), %rdx
 185 0206 488995C0 		movq	%rdx, -20544(%rbp)
 185      AFFFFF
 186              		.loc 1 95 16
 187 020d 0FB600   		movzbl	(%rax), %eax
 188 0210 0FB6C0   		movzbl	%al, %eax
 189              		.loc 1 95 13
 190 0213 0985A8AF 		orl	%eax, -20568(%rbp)
 190      FFFF
  96:csvfplay.c    **** 			xruntest <<= 8;
 191              		.loc 1 96 13
 192 0219 C1A5A8AF 		sall	$8, -20568(%rbp)
 192      FFFF08
  97:csvfplay.c    **** 			xruntest |= *ptr++;
 193              		.loc 1 97 20
 194 0220 488B85C0 		movq	-20544(%rbp), %rax
 194      AFFFFF
 195 0227 488D5001 		leaq	1(%rax), %rdx
 196 022b 488995C0 		movq	%rdx, -20544(%rbp)
 196      AFFFFF
 197              		.loc 1 97 16
 198 0232 0FB600   		movzbl	(%rax), %eax
 199 0235 0FB6C0   		movzbl	%al, %eax
 200              		.loc 1 97 13
 201 0238 0985A8AF 		orl	%eax, -20568(%rbp)
 201      FFFF
  98:csvfplay.c    **** 			#ifdef DEBUG
  99:csvfplay.c    **** 				printf("XRUNTEST(%08X)\n", xruntest);
 100:csvfplay.c    **** 			#endif
 101:csvfplay.c    **** 			break;
 202              		.loc 1 101 4
 203 023e E95E0800 		jmp	.L17
 203      00
 204              	.L11:
 102:csvfplay.c    **** 
 103:csvfplay.c    **** 		case XSIR:
 104:csvfplay.c    **** 			fStatus = jtagClockFSM(handle, 0x00000003, 4, error);  // -> Shift-IR
 205              		.loc 1 104 14
 206 0243 488B9578 		movq	-20616(%rbp), %rdx
 206      AFFFFF
 207 024a 488B8588 		movq	-20600(%rbp), %rax
 207      AFFFFF
 208 0251 4889D1   		movq	%rdx, %rcx
 209 0254 BA040000 		movl	$4, %edx
 209      00
 210 0259 BE030000 		movl	$3, %esi
 210      00
 211 025e 4889C7   		movq	%rax, %rdi
 212 0261 E8000000 		call	jtagClockFSM@PLT
 212      00
 213 0266 8985ACAF 		movl	%eax, -20564(%rbp)
 213      FFFF
 105:csvfplay.c    **** 			CHECK_STATUS(fStatus, fStatus, cleanup, "csvfPlay()");
 214              		.loc 1 105 4
 215 026c 83BDACAF 		cmpl	$0, -20564(%rbp)
 215      FFFF00
 216 0273 742A     		je	.L18
 217              		.loc 1 105 4 is_stmt 0 discriminator 1
 218 0275 488B8578 		movq	-20616(%rbp), %rax
 218      AFFFFF
 219 027c 488D1500 		leaq	.LC0(%rip), %rdx
 219      000000
 220 0283 4889D6   		movq	%rdx, %rsi
 221 0286 4889C7   		movq	%rax, %rdi
 222 0289 E8000000 		call	errPrefix@PLT
 222      00
 223 028e 8B85ACAF 		movl	-20564(%rbp), %eax
 223      FFFF
 224 0294 89859CAF 		movl	%eax, -20580(%rbp)
 224      FFFF
 225 029a E92B0800 		jmp	.L3
 225      00
 226              	.L18:
 106:csvfplay.c    **** 			numBits = *ptr++;
 227              		.loc 1 106 18 is_stmt 1
 228 029f 488B85C0 		movq	-20544(%rbp), %rax
 228      AFFFFF
 229 02a6 488D5001 		leaq	1(%rax), %rdx
 230 02aa 488995C0 		movq	%rdx, -20544(%rbp)
 230      AFFFFF
 231              		.loc 1 106 12
 232 02b1 0FB600   		movzbl	(%rax), %eax
 233 02b4 88859BAF 		movb	%al, -20581(%rbp)
 233      FFFF
 107:csvfplay.c    **** 			#ifdef DEBUG
 108:csvfplay.c    **** 				printf("XSIR(%02X, ", numBits);
 109:csvfplay.c    **** 			#endif
 110:csvfplay.c    **** 				numBytes = bitsToBytes((uint32)numBits);
 234              		.loc 1 110 16
 235 02ba 0FB6859B 		movzbl	-20581(%rbp), %eax
 235      AFFFFF
 236 02c1 C0E803   		shrb	$3, %al
 237 02c4 0FB6D0   		movzbl	%al, %edx
 238 02c7 0FB6859B 		movzbl	-20581(%rbp), %eax
 238      AFFFFF
 239 02ce 83E007   		andl	$7, %eax
 240 02d1 85C0     		testl	%eax, %eax
 241 02d3 7407     		je	.L19
 242              		.loc 1 110 16 is_stmt 0 discriminator 1
 243 02d5 B8010000 		movl	$1, %eax
 243      00
 244 02da EB05     		jmp	.L20
 245              	.L19:
 246              		.loc 1 110 16 discriminator 2
 247 02dc B8000000 		movl	$0, %eax
 247      00
 248              	.L20:
 249              		.loc 1 110 14 is_stmt 1 discriminator 4
 250 02e1 01D0     		addl	%edx, %eax
 251 02e3 8985A0AF 		movl	%eax, -20576(%rbp)
 251      FFFF
 111:csvfplay.c    **** 			tdiPtr = tdiData;
 252              		.loc 1 111 11 discriminator 4
 253 02e9 488D85D0 		leaq	-18480(%rbp), %rax
 253      B7FFFF
 254 02f0 488985B8 		movq	%rax, -20552(%rbp)
 254      AFFFFF
 112:csvfplay.c    **** 			while ( numBytes-- ) {
 255              		.loc 1 112 10 discriminator 4
 256 02f7 EB36     		jmp	.L21
 257              	.L22:
 113:csvfplay.c    **** 				thisByte = *ptr++;
 258              		.loc 1 113 20
 259 02f9 488B85C0 		movq	-20544(%rbp), %rax
 259      AFFFFF
 260 0300 488D5001 		leaq	1(%rax), %rdx
 261 0304 488995C0 		movq	%rdx, -20544(%rbp)
 261      AFFFFF
 262              		.loc 1 113 14
 263 030b 0FB600   		movzbl	(%rax), %eax
 264 030e 888599AF 		movb	%al, -20583(%rbp)
 264      FFFF
 114:csvfplay.c    **** 				#ifdef DEBUG
 115:csvfplay.c    **** 					printf("%02X", thisByte);
 116:csvfplay.c    **** 				#endif
 117:csvfplay.c    **** 				*tdiPtr++ = thisByte;
 265              		.loc 1 117 12
 266 0314 488B85B8 		movq	-20552(%rbp), %rax
 266      AFFFFF
 267 031b 488D5001 		leaq	1(%rax), %rdx
 268 031f 488995B8 		movq	%rdx, -20552(%rbp)
 268      AFFFFF
 269              		.loc 1 117 15
 270 0326 0FB69599 		movzbl	-20583(%rbp), %edx
 270      AFFFFF
 271 032d 8810     		movb	%dl, (%rax)
 272              	.L21:
 112:csvfplay.c    **** 				thisByte = *ptr++;
 273              		.loc 1 112 20
 274 032f 8B85A0AF 		movl	-20576(%rbp), %eax
 274      FFFF
 275 0335 8D50FF   		leal	-1(%rax), %edx
 276 0338 8995A0AF 		movl	%edx, -20576(%rbp)
 276      FFFF
 112:csvfplay.c    **** 				thisByte = *ptr++;
 277              		.loc 1 112 12
 278 033e 85C0     		testl	%eax, %eax
 279 0340 75B7     		jne	.L22
 118:csvfplay.c    **** 			}
 119:csvfplay.c    **** 			#ifdef DEBUG
 120:csvfplay.c    **** 				printf(")\n");
 121:csvfplay.c    **** 			#endif
 122:csvfplay.c    **** 			fStatus = jtagShiftInOnly(handle, numBits, tdiData, true, error);  // -> Exit1-DR
 280              		.loc 1 122 14
 281 0342 0FB6B59B 		movzbl	-20581(%rbp), %esi
 281      AFFFFF
 282 0349 488B8D78 		movq	-20616(%rbp), %rcx
 282      AFFFFF
 283 0350 488D95D0 		leaq	-18480(%rbp), %rdx
 283      B7FFFF
 284 0357 488B8588 		movq	-20600(%rbp), %rax
 284      AFFFFF
 285 035e 4989C8   		movq	%rcx, %r8
 286 0361 B9010000 		movl	$1, %ecx
 286      00
 287 0366 4889C7   		movq	%rax, %rdi
 288 0369 E8000000 		call	jtagShiftInOnly@PLT
 288      00
 289 036e 8985ACAF 		movl	%eax, -20564(%rbp)
 289      FFFF
 123:csvfplay.c    **** 			CHECK_STATUS(fStatus, fStatus, cleanup, "csvfPlay()");
 290              		.loc 1 123 4
 291 0374 83BDACAF 		cmpl	$0, -20564(%rbp)
 291      FFFF00
 292 037b 742A     		je	.L23
 293              		.loc 1 123 4 is_stmt 0 discriminator 1
 294 037d 488B8578 		movq	-20616(%rbp), %rax
 294      AFFFFF
 295 0384 488D1500 		leaq	.LC0(%rip), %rdx
 295      000000
 296 038b 4889D6   		movq	%rdx, %rsi
 297 038e 4889C7   		movq	%rax, %rdi
 298 0391 E8000000 		call	errPrefix@PLT
 298      00
 299 0396 8B85ACAF 		movl	-20564(%rbp), %eax
 299      FFFF
 300 039c 89859CAF 		movl	%eax, -20580(%rbp)
 300      FFFF
 301 03a2 E9230700 		jmp	.L3
 301      00
 302              	.L23:
 124:csvfplay.c    **** 			fStatus = jtagClockFSM(handle, 0x00000001, 2, error);  // -> Run-Test/Idle
 303              		.loc 1 124 14 is_stmt 1
 304 03a7 488B9578 		movq	-20616(%rbp), %rdx
 304      AFFFFF
 305 03ae 488B8588 		movq	-20600(%rbp), %rax
 305      AFFFFF
 306 03b5 4889D1   		movq	%rdx, %rcx
 307 03b8 BA020000 		movl	$2, %edx
 307      00
 308 03bd BE010000 		movl	$1, %esi
 308      00
 309 03c2 4889C7   		movq	%rax, %rdi
 310 03c5 E8000000 		call	jtagClockFSM@PLT
 310      00
 311 03ca 8985ACAF 		movl	%eax, -20564(%rbp)
 311      FFFF
 125:csvfplay.c    **** 			CHECK_STATUS(fStatus, fStatus, cleanup, "csvfPlay()");
 312              		.loc 1 125 4
 313 03d0 83BDACAF 		cmpl	$0, -20564(%rbp)
 313      FFFF00
 314 03d7 742A     		je	.L24
 315              		.loc 1 125 4 is_stmt 0 discriminator 1
 316 03d9 488B8578 		movq	-20616(%rbp), %rax
 316      AFFFFF
 317 03e0 488D1500 		leaq	.LC0(%rip), %rdx
 317      000000
 318 03e7 4889D6   		movq	%rdx, %rsi
 319 03ea 4889C7   		movq	%rax, %rdi
 320 03ed E8000000 		call	errPrefix@PLT
 320      00
 321 03f2 8B85ACAF 		movl	-20564(%rbp), %eax
 321      FFFF
 322 03f8 89859CAF 		movl	%eax, -20580(%rbp)
 322      FFFF
 323 03fe E9C70600 		jmp	.L3
 323      00
 324              	.L24:
 126:csvfplay.c    **** 			if ( xruntest ) {
 325              		.loc 1 126 7 is_stmt 1
 326 0403 83BDA8AF 		cmpl	$0, -20568(%rbp)
 326      FFFF00
 327 040a 0F848A06 		je	.L51
 327      0000
 127:csvfplay.c    **** 				fStatus = jtagClocks(handle, xruntest, error);
 328              		.loc 1 127 15
 329 0410 488B9578 		movq	-20616(%rbp), %rdx
 329      AFFFFF
 330 0417 8B8DA8AF 		movl	-20568(%rbp), %ecx
 330      FFFF
 331 041d 488B8588 		movq	-20600(%rbp), %rax
 331      AFFFFF
 332 0424 89CE     		movl	%ecx, %esi
 333 0426 4889C7   		movq	%rax, %rdi
 334 0429 E8000000 		call	jtagClocks@PLT
 334      00
 335 042e 8985ACAF 		movl	%eax, -20564(%rbp)
 335      FFFF
 128:csvfplay.c    **** 				CHECK_STATUS(fStatus, fStatus, cleanup, "csvfPlay()");
 336              		.loc 1 128 5
 337 0434 83BDACAF 		cmpl	$0, -20564(%rbp)
 337      FFFF00
 338 043b 0F845906 		je	.L51
 338      0000
 339              		.loc 1 128 5 is_stmt 0 discriminator 1
 340 0441 488B8578 		movq	-20616(%rbp), %rax
 340      AFFFFF
 341 0448 488D1500 		leaq	.LC0(%rip), %rdx
 341      000000
 342 044f 4889D6   		movq	%rdx, %rsi
 343 0452 4889C7   		movq	%rax, %rdi
 344 0455 E8000000 		call	errPrefix@PLT
 344      00
 345 045a 8B85ACAF 		movl	-20564(%rbp), %eax
 345      FFFF
 346 0460 89859CAF 		movl	%eax, -20580(%rbp)
 346      FFFF
 347 0466 E95F0600 		jmp	.L3
 347      00
 348              	.L8:
 129:csvfplay.c    **** 			}
 130:csvfplay.c    **** 			break;
 131:csvfplay.c    **** 
 132:csvfplay.c    **** 		case XSDRSIZE:
 133:csvfplay.c    **** 			xsdrSize = *ptr++;
 349              		.loc 1 133 19 is_stmt 1
 350 046b 488B85C0 		movq	-20544(%rbp), %rax
 350      AFFFFF
 351 0472 488D5001 		leaq	1(%rax), %rdx
 352 0476 488995C0 		movq	%rdx, -20544(%rbp)
 352      AFFFFF
 353              		.loc 1 133 15
 354 047d 0FB600   		movzbl	(%rax), %eax
 355              		.loc 1 133 13
 356 0480 0FB6C0   		movzbl	%al, %eax
 357 0483 8985A4AF 		movl	%eax, -20572(%rbp)
 357      FFFF
 134:csvfplay.c    **** 			xsdrSize <<= 8;
 358              		.loc 1 134 13
 359 0489 C1A5A4AF 		sall	$8, -20572(%rbp)
 359      FFFF08
 135:csvfplay.c    **** 			xsdrSize |= *ptr++;
 360              		.loc 1 135 20
 361 0490 488B85C0 		movq	-20544(%rbp), %rax
 361      AFFFFF
 362 0497 488D5001 		leaq	1(%rax), %rdx
 363 049b 488995C0 		movq	%rdx, -20544(%rbp)
 363      AFFFFF
 364              		.loc 1 135 16
 365 04a2 0FB600   		movzbl	(%rax), %eax
 366 04a5 0FB6C0   		movzbl	%al, %eax
 367              		.loc 1 135 13
 368 04a8 0985A4AF 		orl	%eax, -20572(%rbp)
 368      FFFF
 136:csvfplay.c    **** 			xsdrSize <<= 8;
 369              		.loc 1 136 13
 370 04ae C1A5A4AF 		sall	$8, -20572(%rbp)
 370      FFFF08
 137:csvfplay.c    **** 			xsdrSize |= *ptr++;
 371              		.loc 1 137 20
 372 04b5 488B85C0 		movq	-20544(%rbp), %rax
 372      AFFFFF
 373 04bc 488D5001 		leaq	1(%rax), %rdx
 374 04c0 488995C0 		movq	%rdx, -20544(%rbp)
 374      AFFFFF
 375              		.loc 1 137 16
 376 04c7 0FB600   		movzbl	(%rax), %eax
 377 04ca 0FB6C0   		movzbl	%al, %eax
 378              		.loc 1 137 13
 379 04cd 0985A4AF 		orl	%eax, -20572(%rbp)
 379      FFFF
 138:csvfplay.c    **** 			xsdrSize <<= 8;
 380              		.loc 1 138 13
 381 04d3 C1A5A4AF 		sall	$8, -20572(%rbp)
 381      FFFF08
 139:csvfplay.c    **** 			xsdrSize |= *ptr++;
 382              		.loc 1 139 20
 383 04da 488B85C0 		movq	-20544(%rbp), %rax
 383      AFFFFF
 384 04e1 488D5001 		leaq	1(%rax), %rdx
 385 04e5 488995C0 		movq	%rdx, -20544(%rbp)
 385      AFFFFF
 386              		.loc 1 139 16
 387 04ec 0FB600   		movzbl	(%rax), %eax
 388 04ef 0FB6C0   		movzbl	%al, %eax
 389              		.loc 1 139 13
 390 04f2 0985A4AF 		orl	%eax, -20572(%rbp)
 390      FFFF
 140:csvfplay.c    **** 			#ifdef DEBUG
 141:csvfplay.c    **** 				printf("XSDRSIZE(%08X)\n", xsdrSize);
 142:csvfplay.c    **** 			#endif
 143:csvfplay.c    **** 			break;
 391              		.loc 1 143 4
 392 04f8 E9A40500 		jmp	.L17
 392      00
 393              	.L6:
 144:csvfplay.c    **** 
 145:csvfplay.c    **** 		case XSDRTDO:
 146:csvfplay.c    **** 			numBytes = bitsToBytes(xsdrSize);
 394              		.loc 1 146 15
 395 04fd 8B85A4AF 		movl	-20572(%rbp), %eax
 395      FFFF
 396 0503 C1E803   		shrl	$3, %eax
 397 0506 89C2     		movl	%eax, %edx
 398 0508 8B85A4AF 		movl	-20572(%rbp), %eax
 398      FFFF
 399 050e 83E007   		andl	$7, %eax
 400 0511 85C0     		testl	%eax, %eax
 401 0513 7407     		je	.L26
 402              		.loc 1 146 15 is_stmt 0 discriminator 1
 403 0515 B8010000 		movl	$1, %eax
 403      00
 404 051a EB05     		jmp	.L27
 405              	.L26:
 406              		.loc 1 146 15 discriminator 2
 407 051c B8000000 		movl	$0, %eax
 407      00
 408              	.L27:
 409              		.loc 1 146 13 is_stmt 1 discriminator 4
 410 0521 01D0     		addl	%edx, %eax
 411 0523 8985A0AF 		movl	%eax, -20576(%rbp)
 411      FFFF
 147:csvfplay.c    **** 			tdiPtr = tdiData;
 412              		.loc 1 147 11 discriminator 4
 413 0529 488D85D0 		leaq	-18480(%rbp), %rax
 413      B7FFFF
 414 0530 488985B8 		movq	%rax, -20552(%rbp)
 414      AFFFFF
 148:csvfplay.c    **** 			tdoPtr = tdoExpected;
 415              		.loc 1 148 11 discriminator 4
 416 0537 488D85D0 		leaq	-14384(%rbp), %rax
 416      C7FFFF
 417 053e 488985B0 		movq	%rax, -20560(%rbp)
 417      AFFFFF
 149:csvfplay.c    **** 			while ( numBytes-- ) {
 418              		.loc 1 149 10 discriminator 4
 419 0545 EB52     		jmp	.L28
 420              	.L29:
 150:csvfplay.c    **** 				*tdiPtr++ = *ptr++;
 421              		.loc 1 150 21
 422 0547 488B95C0 		movq	-20544(%rbp), %rdx
 422      AFFFFF
 423 054e 488D4201 		leaq	1(%rdx), %rax
 424 0552 488985C0 		movq	%rax, -20544(%rbp)
 424      AFFFFF
 425              		.loc 1 150 12
 426 0559 488B85B8 		movq	-20552(%rbp), %rax
 426      AFFFFF
 427 0560 488D4801 		leaq	1(%rax), %rcx
 428 0564 48898DB8 		movq	%rcx, -20552(%rbp)
 428      AFFFFF
 429              		.loc 1 150 17
 430 056b 0FB612   		movzbl	(%rdx), %edx
 431              		.loc 1 150 15
 432 056e 8810     		movb	%dl, (%rax)
 151:csvfplay.c    **** 				*tdoPtr++ = *ptr++;
 433              		.loc 1 151 21
 434 0570 488B95C0 		movq	-20544(%rbp), %rdx
 434      AFFFFF
 435 0577 488D4201 		leaq	1(%rdx), %rax
 436 057b 488985C0 		movq	%rax, -20544(%rbp)
 436      AFFFFF
 437              		.loc 1 151 12
 438 0582 488B85B0 		movq	-20560(%rbp), %rax
 438      AFFFFF
 439 0589 488D4801 		leaq	1(%rax), %rcx
 440 058d 48898DB0 		movq	%rcx, -20560(%rbp)
 440      AFFFFF
 441              		.loc 1 151 17
 442 0594 0FB612   		movzbl	(%rdx), %edx
 443              		.loc 1 151 15
 444 0597 8810     		movb	%dl, (%rax)
 445              	.L28:
 149:csvfplay.c    **** 			while ( numBytes-- ) {
 446              		.loc 1 149 20
 447 0599 8B85A0AF 		movl	-20576(%rbp), %eax
 447      FFFF
 448 059f 8D50FF   		leal	-1(%rax), %edx
 449 05a2 8995A0AF 		movl	%edx, -20576(%rbp)
 449      FFFF
 149:csvfplay.c    **** 			while ( numBytes-- ) {
 450              		.loc 1 149 12
 451 05a8 85C0     		testl	%eax, %eax
 452 05aa 759B     		jne	.L29
 152:csvfplay.c    **** 			}
 153:csvfplay.c    **** 			numBytes = bitsToBytes(xsdrSize);
 453              		.loc 1 153 15
 454 05ac 8B85A4AF 		movl	-20572(%rbp), %eax
 454      FFFF
 455 05b2 C1E803   		shrl	$3, %eax
 456 05b5 89C2     		movl	%eax, %edx
 457 05b7 8B85A4AF 		movl	-20572(%rbp), %eax
 457      FFFF
 458 05bd 83E007   		andl	$7, %eax
 459 05c0 85C0     		testl	%eax, %eax
 460 05c2 7407     		je	.L30
 461              		.loc 1 153 15 is_stmt 0 discriminator 1
 462 05c4 B8010000 		movl	$1, %eax
 462      00
 463 05c9 EB05     		jmp	.L31
 464              	.L30:
 465              		.loc 1 153 15 discriminator 2
 466 05cb B8000000 		movl	$0, %eax
 466      00
 467              	.L31:
 468              		.loc 1 153 13 is_stmt 1 discriminator 4
 469 05d0 01D0     		addl	%edx, %eax
 470 05d2 8985A0AF 		movl	%eax, -20576(%rbp)
 470      FFFF
 154:csvfplay.c    **** 			i = 0;
 471              		.loc 1 154 6 discriminator 4
 472 05d8 C6859AAF 		movb	$0, -20582(%rbp)
 472      FFFF00
 473              	.L37:
 155:csvfplay.c    **** 			do {
 156:csvfplay.c    **** 				fStatus = jtagClockFSM(handle, 0x00000001, 3, error);  // -> Shift-DR
 474              		.loc 1 156 15
 475 05df 488B9578 		movq	-20616(%rbp), %rdx
 475      AFFFFF
 476 05e6 488B8588 		movq	-20600(%rbp), %rax
 476      AFFFFF
 477 05ed 4889D1   		movq	%rdx, %rcx
 478 05f0 BA030000 		movl	$3, %edx
 478      00
 479 05f5 BE010000 		movl	$1, %esi
 479      00
 480 05fa 4889C7   		movq	%rax, %rdi
 481 05fd E8000000 		call	jtagClockFSM@PLT
 481      00
 482 0602 8985ACAF 		movl	%eax, -20564(%rbp)
 482      FFFF
 157:csvfplay.c    **** 				CHECK_STATUS(fStatus, fStatus, cleanup, "csvfPlay()");
 483              		.loc 1 157 5
 484 0608 83BDACAF 		cmpl	$0, -20564(%rbp)
 484      FFFF00
 485 060f 742A     		je	.L32
 486              		.loc 1 157 5 is_stmt 0 discriminator 1
 487 0611 488B8578 		movq	-20616(%rbp), %rax
 487      AFFFFF
 488 0618 488D1500 		leaq	.LC0(%rip), %rdx
 488      000000
 489 061f 4889D6   		movq	%rdx, %rsi
 490 0622 4889C7   		movq	%rax, %rdi
 491 0625 E8000000 		call	errPrefix@PLT
 491      00
 492 062a 8B85ACAF 		movl	-20564(%rbp), %eax
 492      FFFF
 493 0630 89859CAF 		movl	%eax, -20580(%rbp)
 493      FFFF
 494 0636 E98F0400 		jmp	.L3
 494      00
 495              	.L32:
 158:csvfplay.c    **** 				fStatus = jtagShiftInOut(handle, xsdrSize, tdiData, tdoData, true, error);  // -> Exit1-DR
 496              		.loc 1 158 15 is_stmt 1
 497 063b 488BBD78 		movq	-20616(%rbp), %rdi
 497      AFFFFF
 498 0642 488D8DD0 		leaq	-16432(%rbp), %rcx
 498      BFFFFF
 499 0649 488D95D0 		leaq	-18480(%rbp), %rdx
 499      B7FFFF
 500 0650 8BB5A4AF 		movl	-20572(%rbp), %esi
 500      FFFF
 501 0656 488B8588 		movq	-20600(%rbp), %rax
 501      AFFFFF
 502 065d 4989F9   		movq	%rdi, %r9
 503 0660 41B80100 		movl	$1, %r8d
 503      0000
 504 0666 4889C7   		movq	%rax, %rdi
 505 0669 E8000000 		call	jtagShiftInOut@PLT
 505      00
 506 066e 8985ACAF 		movl	%eax, -20564(%rbp)
 506      FFFF
 159:csvfplay.c    **** 				CHECK_STATUS(fStatus, fStatus, cleanup, "csvfPlay()");
 507              		.loc 1 159 5
 508 0674 83BDACAF 		cmpl	$0, -20564(%rbp)
 508      FFFF00
 509 067b 742A     		je	.L33
 510              		.loc 1 159 5 is_stmt 0 discriminator 1
 511 067d 488B8578 		movq	-20616(%rbp), %rax
 511      AFFFFF
 512 0684 488D1500 		leaq	.LC0(%rip), %rdx
 512      000000
 513 068b 4889D6   		movq	%rdx, %rsi
 514 068e 4889C7   		movq	%rax, %rdi
 515 0691 E8000000 		call	errPrefix@PLT
 515      00
 516 0696 8B85ACAF 		movl	-20564(%rbp), %eax
 516      FFFF
 517 069c 89859CAF 		movl	%eax, -20580(%rbp)
 517      FFFF
 518 06a2 E9230400 		jmp	.L3
 518      00
 519              	.L33:
 160:csvfplay.c    **** 				fStatus = jtagClockFSM(handle, 0x0000001A, 6, error);  // -> Run-Test/Idle
 520              		.loc 1 160 15 is_stmt 1
 521 06a7 488B9578 		movq	-20616(%rbp), %rdx
 521      AFFFFF
 522 06ae 488B8588 		movq	-20600(%rbp), %rax
 522      AFFFFF
 523 06b5 4889D1   		movq	%rdx, %rcx
 524 06b8 BA060000 		movl	$6, %edx
 524      00
 525 06bd BE1A0000 		movl	$26, %esi
 525      00
 526 06c2 4889C7   		movq	%rax, %rdi
 527 06c5 E8000000 		call	jtagClockFSM@PLT
 527      00
 528 06ca 8985ACAF 		movl	%eax, -20564(%rbp)
 528      FFFF
 161:csvfplay.c    **** 				CHECK_STATUS(fStatus, fStatus, cleanup, "csvfPlay()");
 529              		.loc 1 161 5
 530 06d0 83BDACAF 		cmpl	$0, -20564(%rbp)
 530      FFFF00
 531 06d7 742A     		je	.L34
 532              		.loc 1 161 5 is_stmt 0 discriminator 1
 533 06d9 488B8578 		movq	-20616(%rbp), %rax
 533      AFFFFF
 534 06e0 488D1500 		leaq	.LC0(%rip), %rdx
 534      000000
 535 06e7 4889D6   		movq	%rdx, %rsi
 536 06ea 4889C7   		movq	%rax, %rdi
 537 06ed E8000000 		call	errPrefix@PLT
 537      00
 538 06f2 8B85ACAF 		movl	-20564(%rbp), %eax
 538      FFFF
 539 06f8 89859CAF 		movl	%eax, -20580(%rbp)
 539      FFFF
 540 06fe E9C70300 		jmp	.L3
 540      00
 541              	.L34:
 162:csvfplay.c    **** 				if ( xruntest ) {
 542              		.loc 1 162 8 is_stmt 1
 543 0703 83BDA8AF 		cmpl	$0, -20568(%rbp)
 543      FFFF00
 544 070a 7457     		je	.L35
 163:csvfplay.c    **** 					fStatus = jtagClocks(handle, xruntest, error);
 545              		.loc 1 163 16
 546 070c 488B9578 		movq	-20616(%rbp), %rdx
 546      AFFFFF
 547 0713 8B8DA8AF 		movl	-20568(%rbp), %ecx
 547      FFFF
 548 0719 488B8588 		movq	-20600(%rbp), %rax
 548      AFFFFF
 549 0720 89CE     		movl	%ecx, %esi
 550 0722 4889C7   		movq	%rax, %rdi
 551 0725 E8000000 		call	jtagClocks@PLT
 551      00
 552 072a 8985ACAF 		movl	%eax, -20564(%rbp)
 552      FFFF
 164:csvfplay.c    **** 					CHECK_STATUS(fStatus, fStatus, cleanup, "csvfPlay()");
 553              		.loc 1 164 6
 554 0730 83BDACAF 		cmpl	$0, -20564(%rbp)
 554      FFFF00
 555 0737 742A     		je	.L35
 556              		.loc 1 164 6 is_stmt 0 discriminator 1
 557 0739 488B8578 		movq	-20616(%rbp), %rax
 557      AFFFFF
 558 0740 488D1500 		leaq	.LC0(%rip), %rdx
 558      000000
 559 0747 4889D6   		movq	%rdx, %rsi
 560 074a 4889C7   		movq	%rax, %rdi
 561 074d E8000000 		call	errPrefix@PLT
 561      00
 562 0752 8B85ACAF 		movl	-20564(%rbp), %eax
 562      FFFF
 563 0758 89859CAF 		movl	%eax, -20580(%rbp)
 563      FFFF
 564 075e E9670300 		jmp	.L3
 564      00
 565              	.L35:
 165:csvfplay.c    **** 				}
 166:csvfplay.c    **** 				i++;
 566              		.loc 1 166 6 is_stmt 1
 567 0763 0FB6859A 		movzbl	-20582(%rbp), %eax
 567      AFFFFF
 568 076a 83C001   		addl	$1, %eax
 569 076d 88859AAF 		movb	%al, -20582(%rbp)
 569      FFFF
 167:csvfplay.c    **** 				#ifdef DEBUG
 168:csvfplay.c    **** 					dumpSimple(tdoData, numBytes, data);
 169:csvfplay.c    **** 					dumpSimple(tdoMask, numBytes, mask);
 170:csvfplay.c    **** 					dumpSimple(tdoExpected, numBytes, expected);
 171:csvfplay.c    **** 					printf("XSDRTDO(attempt: %d; mask: %s; expecting: %s; got: %s)\n", i, mask, expected, data);
 172:csvfplay.c    **** 				#endif
 173:csvfplay.c    **** 			} while ( tdoMatchFailed(tdoData, tdoMask, tdoExpected, numBytes) && i < 32 );
 570              		.loc 1 173 14
 571 0773 8B8DA0AF 		movl	-20576(%rbp), %ecx
 571      FFFF
 572 0779 488D95D0 		leaq	-14384(%rbp), %rdx
 572      C7FFFF
 573 0780 488DB5D0 		leaq	-20528(%rbp), %rsi
 573      AFFFFF
 574 0787 488D85D0 		leaq	-16432(%rbp), %rax
 574      BFFFFF
 575 078e 4889C7   		movq	%rax, %rdi
 576 0791 E8DA0300 		call	tdoMatchFailed
 576      00
 577              		.loc 1 173 70
 578 0796 84C0     		testb	%al, %al
 579 0798 740D     		je	.L36
 580              		.loc 1 173 70 is_stmt 0 discriminator 1
 581 079a 80BD9AAF 		cmpb	$31, -20582(%rbp)
 581      FFFF1F
 582 07a1 0F8638FE 		jbe	.L37
 582      FFFF
 583              	.L36:
 174:csvfplay.c    **** 
 175:csvfplay.c    **** 			if ( i == 32 ) {
 584              		.loc 1 175 7 is_stmt 1
 585 07a7 80BD9AAF 		cmpb	$32, -20582(%rbp)
 585      FFFF20
 586 07ae 0F85E902 		jne	.L52
 586      0000
 176:csvfplay.c    **** 				dumpSimple(tdoData, numBytes, data);
 587              		.loc 1 176 5
 588 07b4 488D95D0 		leaq	-12336(%rbp), %rdx
 588      CFFFFF
 589 07bb 8B8DA0AF 		movl	-20576(%rbp), %ecx
 589      FFFF
 590 07c1 488D85D0 		leaq	-16432(%rbp), %rax
 590      BFFFFF
 591 07c8 89CE     		movl	%ecx, %esi
 592 07ca 4889C7   		movq	%rax, %rdi
 593 07cd E8140300 		call	dumpSimple
 593      00
 177:csvfplay.c    **** 				dumpSimple(tdoMask, numBytes, mask);
 594              		.loc 1 177 5
 595 07d2 488D95E0 		leaq	-8224(%rbp), %rdx
 595      DFFFFF
 596 07d9 8B8DA0AF 		movl	-20576(%rbp), %ecx
 596      FFFF
 597 07df 488D85D0 		leaq	-20528(%rbp), %rax
 597      AFFFFF
 598 07e6 89CE     		movl	%ecx, %esi
 599 07e8 4889C7   		movq	%rax, %rdi
 600 07eb E8F60200 		call	dumpSimple
 600      00
 178:csvfplay.c    **** 				dumpSimple(tdoExpected, numBytes, expected);
 601              		.loc 1 178 5
 602 07f0 488D95F0 		leaq	-4112(%rbp), %rdx
 602      EFFFFF
 603 07f7 8B8DA0AF 		movl	-20576(%rbp), %ecx
 603      FFFF
 604 07fd 488D85D0 		leaq	-14384(%rbp), %rax
 604      C7FFFF
 605 0804 89CE     		movl	%ecx, %esi
 606 0806 4889C7   		movq	%rax, %rdi
 607 0809 E8D80200 		call	dumpSimple
 607      00
 179:csvfplay.c    **** 				CHECK_STATUS(
 608              		.loc 1 179 5
 609 080e 488DB5F0 		leaq	-4112(%rbp), %rsi
 609      EFFFFF
 610 0815 488D8DE0 		leaq	-8224(%rbp), %rcx
 610      DFFFFF
 611 081c 488D95D0 		leaq	-12336(%rbp), %rdx
 611      CFFFFF
 612 0823 488B8578 		movq	-20616(%rbp), %rax
 612      AFFFFF
 613 082a 4989F0   		movq	%rsi, %r8
 614 082d 488D3500 		leaq	.LC1(%rip), %rsi
 614      000000
 615 0834 4889C7   		movq	%rax, %rdi
 616 0837 B8000000 		movl	$0, %eax
 616      00
 617 083c E8000000 		call	errRender@PLT
 617      00
 618 0841 C7859CAF 		movl	$18, -20580(%rbp)
 618      FFFF1200 
 618      0000
 619 084b E97A0200 		jmp	.L3
 619      00
 620              	.L10:
 180:csvfplay.c    **** 					true, FL_PROG_SVF_COMPARE, cleanup,
 181:csvfplay.c    **** 					"csvfPlay(): XSDRTDO failed:\n  Got: %s\n  Mask: %s\n  Expecting: %s",
 182:csvfplay.c    **** 					data, mask, expected);
 183:csvfplay.c    **** 			}
 184:csvfplay.c    **** 			break;
 185:csvfplay.c    **** 
 186:csvfplay.c    **** 		case XSDR:
 187:csvfplay.c    **** 			#ifdef DEBUG
 188:csvfplay.c    **** 				// TODO: Need to print actual TDO data too
 189:csvfplay.c    **** 				printf("XSDR(%08X)\n", xsdrSize);
 190:csvfplay.c    **** 			#endif
 191:csvfplay.c    **** 			fStatus = jtagClockFSM(handle, 0x00000001, 3, error);  // -> Shift-DR
 621              		.loc 1 191 14
 622 0850 488B9578 		movq	-20616(%rbp), %rdx
 622      AFFFFF
 623 0857 488B8588 		movq	-20600(%rbp), %rax
 623      AFFFFF
 624 085e 4889D1   		movq	%rdx, %rcx
 625 0861 BA030000 		movl	$3, %edx
 625      00
 626 0866 BE010000 		movl	$1, %esi
 626      00
 627 086b 4889C7   		movq	%rax, %rdi
 628 086e E8000000 		call	jtagClockFSM@PLT
 628      00
 629 0873 8985ACAF 		movl	%eax, -20564(%rbp)
 629      FFFF
 192:csvfplay.c    **** 			CHECK_STATUS(fStatus, fStatus, cleanup, "csvfPlay()");
 630              		.loc 1 192 4
 631 0879 83BDACAF 		cmpl	$0, -20564(%rbp)
 631      FFFF00
 632 0880 742A     		je	.L39
 633              		.loc 1 192 4 is_stmt 0 discriminator 1
 634 0882 488B8578 		movq	-20616(%rbp), %rax
 634      AFFFFF
 635 0889 488D1500 		leaq	.LC0(%rip), %rdx
 635      000000
 636 0890 4889D6   		movq	%rdx, %rsi
 637 0893 4889C7   		movq	%rax, %rdi
 638 0896 E8000000 		call	errPrefix@PLT
 638      00
 639 089b 8B85ACAF 		movl	-20564(%rbp), %eax
 639      FFFF
 640 08a1 89859CAF 		movl	%eax, -20580(%rbp)
 640      FFFF
 641 08a7 E91E0200 		jmp	.L3
 641      00
 642              	.L39:
 193:csvfplay.c    **** 			numBytes = bitsToBytes(xsdrSize);
 643              		.loc 1 193 15 is_stmt 1
 644 08ac 8B85A4AF 		movl	-20572(%rbp), %eax
 644      FFFF
 645 08b2 C1E803   		shrl	$3, %eax
 646 08b5 89C2     		movl	%eax, %edx
 647 08b7 8B85A4AF 		movl	-20572(%rbp), %eax
 647      FFFF
 648 08bd 83E007   		andl	$7, %eax
 649 08c0 85C0     		testl	%eax, %eax
 650 08c2 7407     		je	.L40
 651              		.loc 1 193 15 is_stmt 0 discriminator 1
 652 08c4 B8010000 		movl	$1, %eax
 652      00
 653 08c9 EB05     		jmp	.L41
 654              	.L40:
 655              		.loc 1 193 15 discriminator 2
 656 08cb B8000000 		movl	$0, %eax
 656      00
 657              	.L41:
 658              		.loc 1 193 13 is_stmt 1 discriminator 4
 659 08d0 01D0     		addl	%edx, %eax
 660 08d2 8985A0AF 		movl	%eax, -20576(%rbp)
 660      FFFF
 194:csvfplay.c    **** 			tdiAll = malloc(numBytes);
 661              		.loc 1 194 13 discriminator 4
 662 08d8 8B85A0AF 		movl	-20576(%rbp), %eax
 662      FFFF
 663 08de 4889C7   		movq	%rax, %rdi
 664 08e1 E8000000 		call	malloc@PLT
 664      00
 665 08e6 488985C8 		movq	%rax, -20536(%rbp)
 665      AFFFFF
 195:csvfplay.c    **** 			tdiPtr = tdiAll;
 666              		.loc 1 195 11 discriminator 4
 667 08ed 488B85C8 		movq	-20536(%rbp), %rax
 667      AFFFFF
 668 08f4 488985B8 		movq	%rax, -20552(%rbp)
 668      AFFFFF
 196:csvfplay.c    **** 			while ( numBytes-- ) {
 669              		.loc 1 196 10 discriminator 4
 670 08fb EB29     		jmp	.L42
 671              	.L43:
 197:csvfplay.c    **** 				*tdiPtr++ = *ptr++;
 672              		.loc 1 197 21
 673 08fd 488B95C0 		movq	-20544(%rbp), %rdx
 673      AFFFFF
 674 0904 488D4201 		leaq	1(%rdx), %rax
 675 0908 488985C0 		movq	%rax, -20544(%rbp)
 675      AFFFFF
 676              		.loc 1 197 12
 677 090f 488B85B8 		movq	-20552(%rbp), %rax
 677      AFFFFF
 678 0916 488D4801 		leaq	1(%rax), %rcx
 679 091a 48898DB8 		movq	%rcx, -20552(%rbp)
 679      AFFFFF
 680              		.loc 1 197 17
 681 0921 0FB612   		movzbl	(%rdx), %edx
 682              		.loc 1 197 15
 683 0924 8810     		movb	%dl, (%rax)
 684              	.L42:
 196:csvfplay.c    **** 			while ( numBytes-- ) {
 685              		.loc 1 196 20
 686 0926 8B85A0AF 		movl	-20576(%rbp), %eax
 686      FFFF
 687 092c 8D50FF   		leal	-1(%rax), %edx
 688 092f 8995A0AF 		movl	%edx, -20576(%rbp)
 688      FFFF
 196:csvfplay.c    **** 			while ( numBytes-- ) {
 689              		.loc 1 196 12
 690 0935 85C0     		testl	%eax, %eax
 691 0937 75C4     		jne	.L43
 198:csvfplay.c    **** 			}
 199:csvfplay.c    **** 			fStatus = jtagShiftInOnly(handle, xsdrSize, tdiAll, true, error);  // -> Exit1-DR
 692              		.loc 1 199 14
 693 0939 488B8D78 		movq	-20616(%rbp), %rcx
 693      AFFFFF
 694 0940 488B95C8 		movq	-20536(%rbp), %rdx
 694      AFFFFF
 695 0947 8BB5A4AF 		movl	-20572(%rbp), %esi
 695      FFFF
 696 094d 488B8588 		movq	-20600(%rbp), %rax
 696      AFFFFF
 697 0954 4989C8   		movq	%rcx, %r8
 698 0957 B9010000 		movl	$1, %ecx
 698      00
 699 095c 4889C7   		movq	%rax, %rdi
 700 095f E8000000 		call	jtagShiftInOnly@PLT
 700      00
 701 0964 8985ACAF 		movl	%eax, -20564(%rbp)
 701      FFFF
 200:csvfplay.c    **** 			free(tdiAll);
 702              		.loc 1 200 4
 703 096a 488B85C8 		movq	-20536(%rbp), %rax
 703      AFFFFF
 704 0971 4889C7   		movq	%rax, %rdi
 705 0974 E8000000 		call	free@PLT
 705      00
 201:csvfplay.c    **** 			CHECK_STATUS(fStatus, fStatus, cleanup, "csvfPlay()");
 706              		.loc 1 201 4
 707 0979 83BDACAF 		cmpl	$0, -20564(%rbp)
 707      FFFF00
 708 0980 742A     		je	.L44
 709              		.loc 1 201 4 is_stmt 0 discriminator 1
 710 0982 488B8578 		movq	-20616(%rbp), %rax
 710      AFFFFF
 711 0989 488D1500 		leaq	.LC0(%rip), %rdx
 711      000000
 712 0990 4889D6   		movq	%rdx, %rsi
 713 0993 4889C7   		movq	%rax, %rdi
 714 0996 E8000000 		call	errPrefix@PLT
 714      00
 715 099b 8B85ACAF 		movl	-20564(%rbp), %eax
 715      FFFF
 716 09a1 89859CAF 		movl	%eax, -20580(%rbp)
 716      FFFF
 717 09a7 E91E0100 		jmp	.L3
 717      00
 718              	.L44:
 202:csvfplay.c    **** 			fStatus = jtagClockFSM(handle, 0x00000001, 2, error);  // -> Run-Test/Idle
 719              		.loc 1 202 14 is_stmt 1
 720 09ac 488B9578 		movq	-20616(%rbp), %rdx
 720      AFFFFF
 721 09b3 488B8588 		movq	-20600(%rbp), %rax
 721      AFFFFF
 722 09ba 4889D1   		movq	%rdx, %rcx
 723 09bd BA020000 		movl	$2, %edx
 723      00
 724 09c2 BE010000 		movl	$1, %esi
 724      00
 725 09c7 4889C7   		movq	%rax, %rdi
 726 09ca E8000000 		call	jtagClockFSM@PLT
 726      00
 727 09cf 8985ACAF 		movl	%eax, -20564(%rbp)
 727      FFFF
 203:csvfplay.c    **** 			CHECK_STATUS(fStatus, fStatus, cleanup, "csvfPlay()");
 728              		.loc 1 203 4
 729 09d5 83BDACAF 		cmpl	$0, -20564(%rbp)
 729      FFFF00
 730 09dc 742A     		je	.L45
 731              		.loc 1 203 4 is_stmt 0 discriminator 1
 732 09de 488B8578 		movq	-20616(%rbp), %rax
 732      AFFFFF
 733 09e5 488D1500 		leaq	.LC0(%rip), %rdx
 733      000000
 734 09ec 4889D6   		movq	%rdx, %rsi
 735 09ef 4889C7   		movq	%rax, %rdi
 736 09f2 E8000000 		call	errPrefix@PLT
 736      00
 737 09f7 8B85ACAF 		movl	-20564(%rbp), %eax
 737      FFFF
 738 09fd 89859CAF 		movl	%eax, -20580(%rbp)
 738      FFFF
 739 0a03 E9C20000 		jmp	.L3
 739      00
 740              	.L45:
 204:csvfplay.c    **** 			if ( xruntest ) {
 741              		.loc 1 204 7 is_stmt 1
 742 0a08 83BDA8AF 		cmpl	$0, -20568(%rbp)
 742      FFFF00
 743 0a0f 0F848B00 		je	.L53
 743      0000
 205:csvfplay.c    **** 				fStatus = jtagClocks(handle, xruntest, error);
 744              		.loc 1 205 15
 745 0a15 488B9578 		movq	-20616(%rbp), %rdx
 745      AFFFFF
 746 0a1c 8B8DA8AF 		movl	-20568(%rbp), %ecx
 746      FFFF
 747 0a22 488B8588 		movq	-20600(%rbp), %rax
 747      AFFFFF
 748 0a29 89CE     		movl	%ecx, %esi
 749 0a2b 4889C7   		movq	%rax, %rdi
 750 0a2e E8000000 		call	jtagClocks@PLT
 750      00
 751 0a33 8985ACAF 		movl	%eax, -20564(%rbp)
 751      FFFF
 206:csvfplay.c    **** 				CHECK_STATUS(fStatus, fStatus, cleanup, "csvfPlay()");
 752              		.loc 1 206 5
 753 0a39 83BDACAF 		cmpl	$0, -20564(%rbp)
 753      FFFF00
 754 0a40 745E     		je	.L53
 755              		.loc 1 206 5 is_stmt 0 discriminator 1
 756 0a42 488B8578 		movq	-20616(%rbp), %rax
 756      AFFFFF
 757 0a49 488D1500 		leaq	.LC0(%rip), %rdx
 757      000000
 758 0a50 4889D6   		movq	%rdx, %rsi
 759 0a53 4889C7   		movq	%rax, %rdi
 760 0a56 E8000000 		call	errPrefix@PLT
 760      00
 761 0a5b 8B85ACAF 		movl	-20564(%rbp), %eax
 761      FFFF
 762 0a61 89859CAF 		movl	%eax, -20580(%rbp)
 762      FFFF
 763 0a67 EB61     		jmp	.L3
 764              	.L50:
 207:csvfplay.c    **** 			}
 208:csvfplay.c    **** 			break;
 209:csvfplay.c    **** 
 210:csvfplay.c    **** 		default:
 211:csvfplay.c    **** 			CHECK_STATUS(
 765              		.loc 1 211 4 is_stmt 1 discriminator 1
 766 0a69 0FB69599 		movzbl	-20583(%rbp), %edx
 766      AFFFFF
 767 0a70 488B8578 		movq	-20616(%rbp), %rax
 767      AFFFFF
 768 0a77 488D0D00 		leaq	.LC2(%rip), %rcx
 768      000000
 769 0a7e 4889CE   		movq	%rcx, %rsi
 770 0a81 4889C7   		movq	%rax, %rdi
 771 0a84 B8000000 		movl	$0, %eax
 771      00
 772 0a89 E8000000 		call	errRender@PLT
 772      00
 773 0a8e C7859CAF 		movl	$19, -20580(%rbp)
 773      FFFF1300 
 773      0000
 774 0a98 EB30     		jmp	.L3
 775              	.L51:
 130:csvfplay.c    **** 
 776              		.loc 1 130 4
 777 0a9a 90       		nop
 778 0a9b EB04     		jmp	.L17
 779              	.L52:
 184:csvfplay.c    **** 
 780              		.loc 1 184 4
 781 0a9d 90       		nop
 782 0a9e EB01     		jmp	.L17
 783              	.L53:
 208:csvfplay.c    **** 
 784              		.loc 1 208 4
 785 0aa0 90       		nop
 786              	.L17:
 212:csvfplay.c    **** 				true, FL_PROG_SVF_UNKNOWN_CMD, cleanup,
 213:csvfplay.c    **** 				"csvfPlay(): Unsupported command 0x%02X", thisByte);
 214:csvfplay.c    **** 		}
 215:csvfplay.c    **** 		thisByte = *ptr++;
 787              		.loc 1 215 18
 788 0aa1 488B85C0 		movq	-20544(%rbp), %rax
 788      AFFFFF
 789 0aa8 488D5001 		leaq	1(%rax), %rdx
 790 0aac 488995C0 		movq	%rdx, -20544(%rbp)
 790      AFFFFF
 791              		.loc 1 215 12
 792 0ab3 0FB600   		movzbl	(%rax), %eax
 793 0ab6 888599AF 		movb	%al, -20583(%rbp)
 793      FFFF
 794              	.L4:
  70:csvfplay.c    **** 		switch ( thisByte ) {
 795              		.loc 1 70 19
 796 0abc 80BD99AF 		cmpb	$0, -20583(%rbp)
 796      FFFF00
 797 0ac3 0F852BF6 		jne	.L47
 797      FFFF
 216:csvfplay.c    **** 	}
 217:csvfplay.c    **** cleanup:
 798              		.loc 1 217 1
 799 0ac9 90       		nop
 800              	.L3:
 218:csvfplay.c    **** 	return retVal;
 801              		.loc 1 218 9
 802 0aca 8B859CAF 		movl	-20580(%rbp), %eax
 802      FFFF
 219:csvfplay.c    **** }
 803              		.loc 1 219 1
 804 0ad0 488B55F8 		movq	-8(%rbp), %rdx
 805 0ad4 64482B14 		subq	%fs:40, %rdx
 805      25280000 
 805      00
 806 0add 7405     		je	.L49
 807 0adf E8000000 		call	__stack_chk_fail@PLT
 807      00
 808              	.L49:
 809 0ae4 C9       		leave
 810              		.cfi_def_cfa 7, 8
 811 0ae5 C3       		ret
 812              		.cfi_endproc
 813              	.LFE4:
 815              		.section	.rodata
 816              	.LC3:
 817 00a8 30313233 		.string	"0123456789ABCDEF"
 817      34353637 
 817      38394142 
 817      43444546 
 817      00
 818              		.section	.data.rel.ro.local,"aw"
 819              		.align 8
 822              	nibbles:
 823 0000 00000000 		.quad	.LC3
 823      00000000 
 824              		.text
 826              	dumpSimple:
 827              	.LFB5:
 220:csvfplay.c    **** 
 221:csvfplay.c    **** // ------------------------------------------------------------------------------------------------
 222:csvfplay.c    **** // Implementation of private functions
 223:csvfplay.c    **** // ------------------------------------------------------------------------------------------------
 224:csvfplay.c    **** 
 225:csvfplay.c    **** static const char *const nibbles = "0123456789ABCDEF";
 226:csvfplay.c    **** 
 227:csvfplay.c    **** // Dump some hex bytes to a buffer.
 228:csvfplay.c    **** //
 229:csvfplay.c    **** static void dumpSimple(const unsigned char *input, unsigned int length, char *p) {
 828              		.loc 1 229 82
 829              		.cfi_startproc
 830 0ae6 F30F1EFA 		endbr64
 831 0aea 55       		pushq	%rbp
 832              		.cfi_def_cfa_offset 16
 833              		.cfi_offset 6, -16
 834 0aeb 4889E5   		movq	%rsp, %rbp
 835              		.cfi_def_cfa_register 6
 836 0aee 48897DE8 		movq	%rdi, -24(%rbp)
 837 0af2 8975E4   		movl	%esi, -28(%rbp)
 838 0af5 488955D8 		movq	%rdx, -40(%rbp)
 230:csvfplay.c    **** 	uint8 upperNibble, lowerNibble;
 231:csvfplay.c    **** 	while ( length ) {
 839              		.loc 1 231 8
 840 0af9 EB65     		jmp	.L55
 841              	.L56:
 232:csvfplay.c    **** 		upperNibble = lowerNibble = *input++;
 842              		.loc 1 232 37
 843 0afb 488B45E8 		movq	-24(%rbp), %rax
 844 0aff 488D5001 		leaq	1(%rax), %rdx
 845 0b03 488955E8 		movq	%rdx, -24(%rbp)
 846              		.loc 1 232 29
 847 0b07 0FB600   		movzbl	(%rax), %eax
 848 0b0a 8845FE   		movb	%al, -2(%rbp)
 849              		.loc 1 232 15
 850 0b0d 0FB645FE 		movzbl	-2(%rbp), %eax
 851 0b11 8845FF   		movb	%al, -1(%rbp)
 233:csvfplay.c    **** 		upperNibble >>= 4;
 852              		.loc 1 233 15
 853 0b14 C06DFF04 		shrb	$4, -1(%rbp)
 234:csvfplay.c    **** 		lowerNibble &= 15;
 854              		.loc 1 234 15
 855 0b18 8065FE0F 		andb	$15, -2(%rbp)
 235:csvfplay.c    **** 		*p++ = nibbles[upperNibble];
 856              		.loc 1 235 17
 857 0b1c 488D1500 		leaq	.LC3(%rip), %rdx
 857      000000
 858 0b23 0FB645FF 		movzbl	-1(%rbp), %eax
 859 0b27 488D0C02 		leaq	(%rdx,%rax), %rcx
 860              		.loc 1 235 5
 861 0b2b 488B45D8 		movq	-40(%rbp), %rax
 862 0b2f 488D5001 		leaq	1(%rax), %rdx
 863 0b33 488955D8 		movq	%rdx, -40(%rbp)
 864              		.loc 1 235 17
 865 0b37 0FB611   		movzbl	(%rcx), %edx
 866              		.loc 1 235 8
 867 0b3a 8810     		movb	%dl, (%rax)
 236:csvfplay.c    **** 		*p++ = nibbles[lowerNibble];
 868              		.loc 1 236 17
 869 0b3c 488D1500 		leaq	.LC3(%rip), %rdx
 869      000000
 870 0b43 0FB645FE 		movzbl	-2(%rbp), %eax
 871 0b47 488D0C02 		leaq	(%rdx,%rax), %rcx
 872              		.loc 1 236 5
 873 0b4b 488B45D8 		movq	-40(%rbp), %rax
 874 0b4f 488D5001 		leaq	1(%rax), %rdx
 875 0b53 488955D8 		movq	%rdx, -40(%rbp)
 876              		.loc 1 236 17
 877 0b57 0FB611   		movzbl	(%rcx), %edx
 878              		.loc 1 236 8
 879 0b5a 8810     		movb	%dl, (%rax)
 237:csvfplay.c    **** 		--length;
 880              		.loc 1 237 3
 881 0b5c 836DE401 		subl	$1, -28(%rbp)
 882              	.L55:
 231:csvfplay.c    **** 		upperNibble = lowerNibble = *input++;
 883              		.loc 1 231 10
 884 0b60 837DE400 		cmpl	$0, -28(%rbp)
 885 0b64 7595     		jne	.L56
 238:csvfplay.c    **** 	}
 239:csvfplay.c    **** 	*p = '\0';
 886              		.loc 1 239 5
 887 0b66 488B45D8 		movq	-40(%rbp), %rax
 888 0b6a C60000   		movb	$0, (%rax)
 240:csvfplay.c    **** }
 889              		.loc 1 240 1
 890 0b6d 90       		nop
 891 0b6e 5D       		popq	%rbp
 892              		.cfi_def_cfa 7, 8
 893 0b6f C3       		ret
 894              		.cfi_endproc
 895              	.LFE5:
 898              	tdoMatchFailed:
 899              	.LFB6:
 241:csvfplay.c    **** 
 242:csvfplay.c    **** static bool tdoMatchFailed(
 243:csvfplay.c    **** 	const uint8 *tdoData, const uint8 *tdoMask, const uint8 *tdoExpected, uint32 numBytes)
 244:csvfplay.c    **** {
 900              		.loc 1 244 1
 901              		.cfi_startproc
 902 0b70 F30F1EFA 		endbr64
 903 0b74 55       		pushq	%rbp
 904              		.cfi_def_cfa_offset 16
 905              		.cfi_offset 6, -16
 906 0b75 4889E5   		movq	%rsp, %rbp
 907              		.cfi_def_cfa_register 6
 908 0b78 48897DF8 		movq	%rdi, -8(%rbp)
 909 0b7c 488975F0 		movq	%rsi, -16(%rbp)
 910 0b80 488955E8 		movq	%rdx, -24(%rbp)
 911 0b84 894DE4   		movl	%ecx, -28(%rbp)
 245:csvfplay.c    **** 	while ( numBytes-- ) {
 912              		.loc 1 245 8
 913 0b87 EB33     		jmp	.L58
 914              	.L61:
 246:csvfplay.c    **** 		if ( (*tdoData & *tdoMask) != (*tdoExpected & *tdoMask) ) {
 915              		.loc 1 246 9
 916 0b89 488B45F8 		movq	-8(%rbp), %rax
 917 0b8d 0FB610   		movzbl	(%rax), %edx
 918              		.loc 1 246 34
 919 0b90 488B45E8 		movq	-24(%rbp), %rax
 920 0b94 0FB600   		movzbl	(%rax), %eax
 921              		.loc 1 246 30
 922 0b97 31C2     		xorl	%eax, %edx
 923              		.loc 1 246 20
 924 0b99 488B45F0 		movq	-16(%rbp), %rax
 925 0b9d 0FB600   		movzbl	(%rax), %eax
 926              		.loc 1 246 30
 927 0ba0 21D0     		andl	%edx, %eax
 928              		.loc 1 246 6
 929 0ba2 84C0     		testb	%al, %al
 930 0ba4 7407     		je	.L59
 247:csvfplay.c    **** 			return true;
 931              		.loc 1 247 11
 932 0ba6 B8010000 		movl	$1, %eax
 932      00
 933 0bab EB21     		jmp	.L60
 934              	.L59:
 248:csvfplay.c    **** 		}
 249:csvfplay.c    **** 		tdoData++;
 935              		.loc 1 249 10
 936 0bad 488345F8 		addq	$1, -8(%rbp)
 936      01
 250:csvfplay.c    **** 		tdoExpected++;
 937              		.loc 1 250 14
 938 0bb2 488345E8 		addq	$1, -24(%rbp)
 938      01
 251:csvfplay.c    **** 		tdoMask++;
 939              		.loc 1 251 10
 940 0bb7 488345F0 		addq	$1, -16(%rbp)
 940      01
 941              	.L58:
 245:csvfplay.c    **** 		if ( (*tdoData & *tdoMask) != (*tdoExpected & *tdoMask) ) {
 942              		.loc 1 245 18
 943 0bbc 8B45E4   		movl	-28(%rbp), %eax
 944 0bbf 8D50FF   		leal	-1(%rax), %edx
 945 0bc2 8955E4   		movl	%edx, -28(%rbp)
 245:csvfplay.c    **** 		if ( (*tdoData & *tdoMask) != (*tdoExpected & *tdoMask) ) {
 946              		.loc 1 245 10
 947 0bc5 85C0     		testl	%eax, %eax
 948 0bc7 75C0     		jne	.L61
 252:csvfplay.c    **** 	}
 253:csvfplay.c    **** 	return false;
 949              		.loc 1 253 9
 950 0bc9 B8000000 		movl	$0, %eax
 950      00
 951              	.L60:
 254:csvfplay.c    **** }
 952              		.loc 1 254 1
 953 0bce 5D       		popq	%rbp
 954              		.cfi_def_cfa 7, 8
 955 0bcf C3       		ret
 956              		.cfi_endproc
 957              	.LFE6:
 959              	.Letext0:
 960              		.file 2 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h"
 961              		.file 3 "/home/pong/FPGALink/makestuff/common/makestuff.h"
 962              		.file 4 "libfpgalink.h"
 963              		.file 5 "/home/pong/FPGALink/makestuff/libs/libusbwrap/libusbwrap.h"
 964              		.file 6 "private.h"
 965              		.file 7 "xsvf.h"
 966              		.file 8 "/usr/include/stdlib.h"
 967              		.file 9 "/home/pong/FPGALink/makestuff/libs/liberror/liberror.h"
 2592              		.section	.note.gnu.property,"a"
 2593              		.align 8
 2594 0000 04000000 		.long	1f - 0f
 2595 0004 10000000 		.long	4f - 1f
 2596 0008 05000000 		.long	5
 2597              	0:
 2598 000c 474E5500 		.string	"GNU"
 2599              	1:
 2600              		.align 8
 2601 0010 020000C0 		.long	0xc0000002
 2602 0014 04000000 		.long	3f - 2f
 2603              	2:
 2604 0018 03000000 		.long	0x3
 2605              	3:
 2606 001c 00000000 		.align 8
 2607              	4:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 csvfplay.c
     /tmp/cc0mgcMN.s:17     .text:0000000000000000 csvfPlay
     /tmp/cc0mgcMN.s:898    .text:0000000000000b70 tdoMatchFailed
     /tmp/cc0mgcMN.s:826    .text:0000000000000ae6 dumpSimple
     /tmp/cc0mgcMN.s:822    .data.rel.ro.local:0000000000000000 nibbles

UNDEFINED SYMBOLS
jtagClockFSM
errPrefix
jtagShiftInOnly
jtagClocks
jtagShiftInOut
errRender
malloc
free
__stack_chk_fail
