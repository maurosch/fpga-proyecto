   1              		.file	"libdump.c"
   2              		.text
   3              	.Ltext0:
   4              		.file 0 "/home/pong/FPGALink/makestuff/libs/libdump" "libdump.c"
   5              		.section	.rodata
   6              	.LC0:
   7 0000 25303458 		.string	"%04X "
   7      2000
   8              		.text
  10              	printAddr16:
  11              	.LFB4:
  12              		.file 1 "libdump.c"
   1:libdump.c     **** /*
   2:libdump.c     ****  * Copyright (C) 2009-2012 Chris McClelland
   3:libdump.c     ****  *
   4:libdump.c     ****  * This program is free software: you can redistribute it and/or modify
   5:libdump.c     ****  * it under the terms of the GNU Lesser General Public License as published by
   6:libdump.c     ****  * the Free Software Foundation, either version 3 of the License, or
   7:libdump.c     ****  * (at your option) any later version.
   8:libdump.c     ****  *
   9:libdump.c     ****  * This program is distributed in the hope that it will be useful,
  10:libdump.c     ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:libdump.c     ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:libdump.c     ****  * GNU Lesser General Public License for more details.
  13:libdump.c     ****  *
  14:libdump.c     ****  * You should have received a copy of the GNU Lesser General Public License
  15:libdump.c     ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:libdump.c     ****  */
  17:libdump.c     **** #include <stdio.h>
  18:libdump.c     **** #include <makestuff.h>
  19:libdump.c     **** #include "libdump.h"
  20:libdump.c     **** 
  21:libdump.c     **** static void printAddr16(size_t address) {
  13              		.loc 1 21 41
  14              		.cfi_startproc
  15 0000 F30F1EFA 		endbr64
  16 0004 55       		pushq	%rbp
  17              		.cfi_def_cfa_offset 16
  18              		.cfi_offset 6, -16
  19 0005 4889E5   		movq	%rsp, %rbp
  20              		.cfi_def_cfa_register 6
  21 0008 4883EC10 		subq	$16, %rsp
  22 000c 48897DF8 		movq	%rdi, -8(%rbp)
  22:libdump.c     **** 	printf("%04X ", (uint32)address);
  23              		.loc 1 22 2
  24 0010 488B45F8 		movq	-8(%rbp), %rax
  25 0014 89C6     		movl	%eax, %esi
  26 0016 488D0500 		leaq	.LC0(%rip), %rax
  26      000000
  27 001d 4889C7   		movq	%rax, %rdi
  28 0020 B8000000 		movl	$0, %eax
  28      00
  29 0025 E8000000 		call	printf@PLT
  29      00
  23:libdump.c     **** }
  30              		.loc 1 23 1
  31 002a 90       		nop
  32 002b C9       		leave
  33              		.cfi_def_cfa 7, 8
  34 002c C3       		ret
  35              		.cfi_endproc
  36              	.LFE4:
  38              		.section	.rodata
  39              	.LC1:
  40 0006 25303858 		.string	"%08X "
  40      2000
  41              		.text
  43              	printAddr32:
  44              	.LFB5:
  24:libdump.c     **** static void printAddr32(size_t address) {
  45              		.loc 1 24 41
  46              		.cfi_startproc
  47 002d F30F1EFA 		endbr64
  48 0031 55       		pushq	%rbp
  49              		.cfi_def_cfa_offset 16
  50              		.cfi_offset 6, -16
  51 0032 4889E5   		movq	%rsp, %rbp
  52              		.cfi_def_cfa_register 6
  53 0035 4883EC10 		subq	$16, %rsp
  54 0039 48897DF8 		movq	%rdi, -8(%rbp)
  25:libdump.c     **** 	printf("%08X ", (uint32)address);
  55              		.loc 1 25 2
  56 003d 488B45F8 		movq	-8(%rbp), %rax
  57 0041 89C6     		movl	%eax, %esi
  58 0043 488D0500 		leaq	.LC1(%rip), %rax
  58      000000
  59 004a 4889C7   		movq	%rax, %rdi
  60 004d B8000000 		movl	$0, %eax
  60      00
  61 0052 E8000000 		call	printf@PLT
  61      00
  26:libdump.c     **** }
  62              		.loc 1 26 1
  63 0057 90       		nop
  64 0058 C9       		leave
  65              		.cfi_def_cfa 7, 8
  66 0059 C3       		ret
  67              		.cfi_endproc
  68              	.LFE5:
  70              		.section	.rodata
  71              	.LC2:
  72 000c 25303136 		.string	"%016zX "
  72      7A582000 
  73              		.text
  75              	printAddr64:
  76              	.LFB6:
  27:libdump.c     **** static void printAddr64(size_t address) {
  77              		.loc 1 27 41
  78              		.cfi_startproc
  79 005a F30F1EFA 		endbr64
  80 005e 55       		pushq	%rbp
  81              		.cfi_def_cfa_offset 16
  82              		.cfi_offset 6, -16
  83 005f 4889E5   		movq	%rsp, %rbp
  84              		.cfi_def_cfa_register 6
  85 0062 4883EC10 		subq	$16, %rsp
  86 0066 48897DF8 		movq	%rdi, -8(%rbp)
  28:libdump.c     **** 	printf(PFSZH" ", address);
  87              		.loc 1 28 2
  88 006a 488B45F8 		movq	-8(%rbp), %rax
  89 006e 4889C6   		movq	%rax, %rsi
  90 0071 488D0500 		leaq	.LC2(%rip), %rax
  90      000000
  91 0078 4889C7   		movq	%rax, %rdi
  92 007b B8000000 		movl	$0, %eax
  92      00
  93 0080 E8000000 		call	printf@PLT
  93      00
  29:libdump.c     **** }
  94              		.loc 1 29 1
  95 0085 90       		nop
  96 0086 C9       		leave
  97              		.cfi_def_cfa 7, 8
  98 0087 C3       		ret
  99              		.cfi_endproc
 100              	.LFE6:
 102              		.section	.rodata
 103              	.LC3:
 104 0014 20202020 		.string	"                "
 104      20202020 
 104      20202020 
 104      20202020 
 104      00
 105              	.LC4:
 106 0025 20202020 		.string	"        "
 106      20202020 
 106      00
 107              	.LC5:
 108 002e 20202020 		.string	"    "
 108      00
 109 0033 00000000 		.align 8
 109      00
 110              	.LC6:
 111 0038 25732030 		.string	"%s 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\n"
 111      30203031 
 111      20303220 
 111      30332030 
 111      34203035 
 112              	.LC7:
 113 006c 25303258 		.string	"%02X "
 113      2000
 114              	.LC8:
 115 0072 20202000 		.string	"   "
 116              		.text
 117              		.globl	dump
 119              	dump:
 120              	.LFB7:
  30:libdump.c     **** typedef void (*FuncPtr)(size_t address);
  31:libdump.c     **** 
  32:libdump.c     **** void dump(size_t address, const uint8 *input, size_t length) {
 121              		.loc 1 32 62
 122              		.cfi_startproc
 123 0088 F30F1EFA 		endbr64
 124 008c 55       		pushq	%rbp
 125              		.cfi_def_cfa_offset 16
 126              		.cfi_offset 6, -16
 127 008d 4889E5   		movq	%rsp, %rbp
 128              		.cfi_def_cfa_register 6
 129 0090 4883EC50 		subq	$80, %rsp
 130 0094 48897DC8 		movq	%rdi, -56(%rbp)
 131 0098 488975C0 		movq	%rsi, -64(%rbp)
 132 009c 488955B8 		movq	%rdx, -72(%rbp)
  33:libdump.c     **** 	if ( length ) {
 133              		.loc 1 33 5
 134 00a0 48837DB8 		cmpq	$0, -72(%rbp)
 134      00
 135 00a5 0F846701 		je	.L19
 135      0000
 136              	.LBB2:
  34:libdump.c     **** 		uint8 ch;
  35:libdump.c     **** 		char x;
  36:libdump.c     **** 		const uint8 *p;
  37:libdump.c     **** 		FuncPtr printAddr;
  38:libdump.c     **** 		const size_t nextAddr = address + length;
 137              		.loc 1 38 16
 138 00ab 488B55C8 		movq	-56(%rbp), %rdx
 139 00af 488B45B8 		movq	-72(%rbp), %rax
 140 00b3 4801D0   		addq	%rdx, %rax
 141 00b6 488945F8 		movq	%rax, -8(%rbp)
  39:libdump.c     **** 		const char *spaces;
  40:libdump.c     **** 		#if WORD_LENGTH == 64
  41:libdump.c     **** 			if ( nextAddr >= 0x100000000ULL ) {
 142              		.loc 1 41 7
 143 00ba B8FFFFFF 		movl	$4294967295, %eax
 143      FF
 144 00bf 483945F8 		cmpq	%rax, -8(%rbp)
 145 00c3 7618     		jbe	.L6
  42:libdump.c     **** 				printAddr = printAddr64;
 146              		.loc 1 42 15
 147 00c5 488D058E 		leaq	printAddr64(%rip), %rax
 147      FFFFFF
 148 00cc 488945E8 		movq	%rax, -24(%rbp)
  43:libdump.c     **** 				spaces = "                ";
 149              		.loc 1 43 12
 150 00d0 488D0500 		leaq	.LC3(%rip), %rax
 150      000000
 151 00d7 488945F0 		movq	%rax, -16(%rbp)
 152 00db EB38     		jmp	.L7
 153              	.L6:
  44:libdump.c     **** 			} else
  45:libdump.c     **** 		#endif
  46:libdump.c     **** 		if ( nextAddr >= 0x10000 ) {
 154              		.loc 1 46 6
 155 00dd 48817DF8 		cmpq	$65535, -8(%rbp)
 155      FFFF0000 
 156 00e5 7618     		jbe	.L8
  47:libdump.c     **** 			printAddr = printAddr32;
 157              		.loc 1 47 14
 158 00e7 488D053F 		leaq	printAddr32(%rip), %rax
 158      FFFFFF
 159 00ee 488945E8 		movq	%rax, -24(%rbp)
  48:libdump.c     **** 			spaces = "        ";
 160              		.loc 1 48 11
 161 00f2 488D0500 		leaq	.LC4(%rip), %rax
 161      000000
 162 00f9 488945F0 		movq	%rax, -16(%rbp)
 163 00fd EB16     		jmp	.L7
 164              	.L8:
  49:libdump.c     **** 		} else {
  50:libdump.c     **** 			printAddr = printAddr16;
 165              		.loc 1 50 14
 166 00ff 488D05FA 		leaq	printAddr16(%rip), %rax
 166      FEFFFF
 167 0106 488945E8 		movq	%rax, -24(%rbp)
  51:libdump.c     **** 			spaces = "    ";
 168              		.loc 1 51 11
 169 010a 488D0500 		leaq	.LC5(%rip), %rax
 169      000000
 170 0111 488945F0 		movq	%rax, -16(%rbp)
 171              	.L7:
  52:libdump.c     **** 		}
  53:libdump.c     **** 		printf("%s 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\n", spaces);
 172              		.loc 1 53 3
 173 0115 488B45F0 		movq	-16(%rbp), %rax
 174 0119 4889C6   		movq	%rax, %rsi
 175 011c 488D0500 		leaq	.LC6(%rip), %rax
 175      000000
 176 0123 4889C7   		movq	%rax, %rdi
 177 0126 B8000000 		movl	$0, %eax
 177      00
 178 012b E8000000 		call	printf@PLT
 178      00
  54:libdump.c     **** 		while ( length ) {
 179              		.loc 1 54 9
 180 0130 E9D20000 		jmp	.L9
 180      00
 181              	.L18:
  55:libdump.c     **** 			x = 0;
 182              		.loc 1 55 6
 183 0135 C645DE00 		movb	$0, -34(%rbp)
  56:libdump.c     **** 			p = input;
 184              		.loc 1 56 6
 185 0139 488B45C0 		movq	-64(%rbp), %rax
 186 013d 488945E0 		movq	%rax, -32(%rbp)
  57:libdump.c     **** 			printAddr(address);
 187              		.loc 1 57 4
 188 0141 488B45C8 		movq	-56(%rbp), %rax
 189 0145 488B55E8 		movq	-24(%rbp), %rdx
 190 0149 4889C7   		movq	%rax, %rdi
 191 014c FFD2     		call	*%rdx
 192              	.LVL0:
 193              	.L11:
  58:libdump.c     **** 			do {
  59:libdump.c     **** 				ch = *input++;
 194              		.loc 1 59 16 discriminator 2
 195 014e 488B45C0 		movq	-64(%rbp), %rax
 196 0152 488D5001 		leaq	1(%rax), %rdx
 197 0156 488955C0 		movq	%rdx, -64(%rbp)
 198              		.loc 1 59 8 discriminator 2
 199 015a 0FB600   		movzbl	(%rax), %eax
 200 015d 8845DF   		movb	%al, -33(%rbp)
  60:libdump.c     **** 				printf("%02X ", ch);
 201              		.loc 1 60 5 discriminator 2
 202 0160 0FB645DF 		movzbl	-33(%rbp), %eax
 203 0164 89C6     		movl	%eax, %esi
 204 0166 488D0500 		leaq	.LC7(%rip), %rax
 204      000000
 205 016d 4889C7   		movq	%rax, %rdi
 206 0170 B8000000 		movl	$0, %eax
 206      00
 207 0175 E8000000 		call	printf@PLT
 207      00
  61:libdump.c     **** 				--length;
 208              		.loc 1 61 5 discriminator 2
 209 017a 48836DB8 		subq	$1, -72(%rbp)
 209      01
  62:libdump.c     **** 				x++;
 210              		.loc 1 62 6 discriminator 2
 211 017f 0FB645DE 		movzbl	-34(%rbp), %eax
 212 0183 83C001   		addl	$1, %eax
 213 0186 8845DE   		movb	%al, -34(%rbp)
  63:libdump.c     **** 				address++;
 214              		.loc 1 63 12 discriminator 2
 215 0189 488345C8 		addq	$1, -56(%rbp)
 215      01
  64:libdump.c     **** 			} while ( x < 16 && length );
 216              		.loc 1 64 21 discriminator 2
 217 018e 807DDE0F 		cmpb	$15, -34(%rbp)
 218 0192 7F1D     		jg	.L12
 219              		.loc 1 64 21 is_stmt 0 discriminator 1
 220 0194 48837DB8 		cmpq	$0, -72(%rbp)
 220      00
 221 0199 75B3     		jne	.L11
  65:libdump.c     **** 			while ( x++ < 16 ) {
 222              		.loc 1 65 10 is_stmt 1
 223 019b EB14     		jmp	.L12
 224              	.L13:
  66:libdump.c     **** 				printf("   ");
 225              		.loc 1 66 5
 226 019d 488D0500 		leaq	.LC8(%rip), %rax
 226      000000
 227 01a4 4889C7   		movq	%rax, %rdi
 228 01a7 B8000000 		movl	$0, %eax
 228      00
 229 01ac E8000000 		call	printf@PLT
 229      00
 230              	.L12:
  65:libdump.c     **** 			while ( x++ < 16 ) {
 231              		.loc 1 65 13
 232 01b1 0FB645DE 		movzbl	-34(%rbp), %eax
 233 01b5 89C2     		movl	%eax, %edx
 234 01b7 83C201   		addl	$1, %edx
 235 01ba 8855DE   		movb	%dl, -34(%rbp)
  65:libdump.c     **** 			while ( x++ < 16 ) {
 236              		.loc 1 65 16
 237 01bd 3C0F     		cmpb	$15, %al
 238 01bf 7EDC     		jle	.L13
  67:libdump.c     **** 			}
  68:libdump.c     **** 			while ( p < input ) {
 239              		.loc 1 68 10
 240 01c1 EB30     		jmp	.L14
 241              	.L17:
  69:libdump.c     **** 				ch = *p++;
 242              		.loc 1 69 12
 243 01c3 488B45E0 		movq	-32(%rbp), %rax
 244 01c7 488D5001 		leaq	1(%rax), %rdx
 245 01cb 488955E0 		movq	%rdx, -32(%rbp)
 246              		.loc 1 69 8
 247 01cf 0FB600   		movzbl	(%rax), %eax
 248 01d2 8845DF   		movb	%al, -33(%rbp)
  70:libdump.c     **** 				printf("%c", (ch >= 32 && ch <=126) ? ch : '.');
 249              		.loc 1 70 5
 250 01d5 807DDF1F 		cmpb	$31, -33(%rbp)
 251 01d9 760C     		jbe	.L15
 252              		.loc 1 70 28 discriminator 1
 253 01db 807DDF7E 		cmpb	$126, -33(%rbp)
 254 01df 7706     		ja	.L15
 255              		.loc 1 70 5 discriminator 3
 256 01e1 0FB645DF 		movzbl	-33(%rbp), %eax
 257 01e5 EB05     		jmp	.L16
 258              	.L15:
 259              		.loc 1 70 5 is_stmt 0 discriminator 4
 260 01e7 B82E0000 		movl	$46, %eax
 260      00
 261              	.L16:
 262              		.loc 1 70 5 discriminator 6
 263 01ec 89C7     		movl	%eax, %edi
 264 01ee E8000000 		call	putchar@PLT
 264      00
 265              	.L14:
  68:libdump.c     **** 				ch = *p++;
 266              		.loc 1 68 14 is_stmt 1
 267 01f3 488B45E0 		movq	-32(%rbp), %rax
 268 01f7 483B45C0 		cmpq	-64(%rbp), %rax
 269 01fb 72C6     		jb	.L17
  71:libdump.c     **** 			}
  72:libdump.c     **** 			printf("\n");
 270              		.loc 1 72 4
 271 01fd BF0A0000 		movl	$10, %edi
 271      00
 272 0202 E8000000 		call	putchar@PLT
 272      00
 273              	.L9:
  54:libdump.c     **** 			x = 0;
 274              		.loc 1 54 11
 275 0207 48837DB8 		cmpq	$0, -72(%rbp)
 275      00
 276 020c 0F8523FF 		jne	.L18
 276      FFFF
 277              	.L19:
 278              	.LBE2:
  73:libdump.c     **** 		}
  74:libdump.c     **** 	}
  75:libdump.c     **** }
 279              		.loc 1 75 1
 280 0212 90       		nop
 281 0213 C9       		leave
 282              		.cfi_def_cfa 7, 8
 283 0214 C3       		ret
 284              		.cfi_endproc
 285              	.LFE7:
 287              		.section	.rodata
 288              	.LC9:
 289 0076 20253032 		.string	" %02X"
 289      5800
 290              		.text
 291              		.globl	dumpSimple
 293              	dumpSimple:
 294              	.LFB8:
  76:libdump.c     **** 
  77:libdump.c     **** void dumpSimple(const uint8 *input, size_t length) {
 295              		.loc 1 77 52
 296              		.cfi_startproc
 297 0215 F30F1EFA 		endbr64
 298 0219 55       		pushq	%rbp
 299              		.cfi_def_cfa_offset 16
 300              		.cfi_offset 6, -16
 301 021a 4889E5   		movq	%rsp, %rbp
 302              		.cfi_def_cfa_register 6
 303 021d 4883EC10 		subq	$16, %rsp
 304 0221 48897DF8 		movq	%rdi, -8(%rbp)
 305 0225 488975F0 		movq	%rsi, -16(%rbp)
  78:libdump.c     **** 	while ( length ) {
 306              		.loc 1 78 8
 307 0229 EB2D     		jmp	.L21
 308              	.L22:
  79:libdump.c     **** 		printf(" %02X", *input++);
 309              		.loc 1 79 25
 310 022b 488B45F8 		movq	-8(%rbp), %rax
 311 022f 488D5001 		leaq	1(%rax), %rdx
 312 0233 488955F8 		movq	%rdx, -8(%rbp)
 313              		.loc 1 79 19
 314 0237 0FB600   		movzbl	(%rax), %eax
 315              		.loc 1 79 3
 316 023a 0FB6C0   		movzbl	%al, %eax
 317 023d 89C6     		movl	%eax, %esi
 318 023f 488D0500 		leaq	.LC9(%rip), %rax
 318      000000
 319 0246 4889C7   		movq	%rax, %rdi
 320 0249 B8000000 		movl	$0, %eax
 320      00
 321 024e E8000000 		call	printf@PLT
 321      00
  80:libdump.c     **** 		--length;
 322              		.loc 1 80 3
 323 0253 48836DF0 		subq	$1, -16(%rbp)
 323      01
 324              	.L21:
  78:libdump.c     **** 	while ( length ) {
 325              		.loc 1 78 10
 326 0258 48837DF0 		cmpq	$0, -16(%rbp)
 326      00
 327 025d 75CC     		jne	.L22
  81:libdump.c     **** 	}
  82:libdump.c     **** 	printf("\n");
 328              		.loc 1 82 2
 329 025f BF0A0000 		movl	$10, %edi
 329      00
 330 0264 E8000000 		call	putchar@PLT
 330      00
  83:libdump.c     **** }
 331              		.loc 1 83 1
 332 0269 90       		nop
 333 026a C9       		leave
 334              		.cfi_def_cfa 7, 8
 335 026b C3       		ret
 336              		.cfi_endproc
 337              	.LFE8:
 339              	.Letext0:
 340              		.file 2 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h"
 341              		.file 3 "/home/pong/FPGALink/makestuff/common/makestuff.h"
 342              		.file 4 "/usr/include/stdio.h"
 955              		.section	.note.gnu.property,"a"
 956              		.align 8
 957 0000 04000000 		.long	1f - 0f
 958 0004 10000000 		.long	4f - 1f
 959 0008 05000000 		.long	5
 960              	0:
 961 000c 474E5500 		.string	"GNU"
 962              	1:
 963              		.align 8
 964 0010 020000C0 		.long	0xc0000002
 965 0014 04000000 		.long	3f - 2f
 966              	2:
 967 0018 03000000 		.long	0x3
 968              	3:
 969 001c 00000000 		.align 8
 970              	4:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 libdump.c
     /tmp/ccmm8UXH.s:10     .text:0000000000000000 printAddr16
     /tmp/ccmm8UXH.s:43     .text:000000000000002d printAddr32
     /tmp/ccmm8UXH.s:75     .text:000000000000005a printAddr64
     /tmp/ccmm8UXH.s:119    .text:0000000000000088 dump
     /tmp/ccmm8UXH.s:293    .text:0000000000000215 dumpSimple

UNDEFINED SYMBOLS
printf
putchar
