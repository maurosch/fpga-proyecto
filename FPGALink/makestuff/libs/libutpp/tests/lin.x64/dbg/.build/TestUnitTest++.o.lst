   1              		.file	"TestUnitTest++.cpp"
   2              		.text
   3              	.Ltext0:
   4              		.file 0 "/home/pong/FPGALink/makestuff/libs/libutpp/tests" "TestUnitTest++.cpp"
   5              		.section	.rodata
   6              	.LC0:
   7 0000 44656661 		.string	"DefaultSuite"
   7      756C7453 
   7      75697465 
   7      00
   8              		.section	.text._ZN13UnitTestSuite12GetSuiteNameEv,"axG",@progbits,_ZN13UnitTestSuite12GetSuiteName
   9              		.weak	_ZN13UnitTestSuite12GetSuiteNameEv
  11              	_ZN13UnitTestSuite12GetSuiteNameEv:
  12              	.LFB0:
  13              		.file 1 "../TestSuite.h"
   1:../TestSuite.h **** #ifndef UNITTEST_TESTSUITE_H
   2:../TestSuite.h **** #define UNITTEST_TESTSUITE_H
   3:../TestSuite.h **** 
   4:../TestSuite.h **** namespace UnitTestSuite {
   5:../TestSuite.h **** 
   6:../TestSuite.h ****     inline char const* GetSuiteName ()
   7:../TestSuite.h ****     {
  14              		.loc 1 7 5
  15              		.cfi_startproc
  16 0000 F30F1EFA 		endbr64
  17 0004 55       		pushq	%rbp
  18              		.cfi_def_cfa_offset 16
  19              		.cfi_offset 6, -16
  20 0005 4889E5   		movq	%rsp, %rbp
  21              		.cfi_def_cfa_register 6
   8:../TestSuite.h ****         return "DefaultSuite";
  22              		.loc 1 8 16
  23 0008 488D0500 		leaq	.LC0(%rip), %rax
  23      000000
   9:../TestSuite.h ****     }
  24              		.loc 1 9 5
  25 000f 5D       		popq	%rbp
  26              		.cfi_def_cfa 7, 8
  27 0010 C3       		ret
  28              		.cfi_endproc
  29              	.LFE0:
  31              		.section	.text._ZSt17__size_to_integerm,"axG",@progbits,_ZSt17__size_to_integerm,comdat
  32              		.weak	_ZSt17__size_to_integerm
  34              	_ZSt17__size_to_integerm:
  35              	.LFB217:
  36              		.file 2 "/usr/include/c++/11/bits/stl_algobase.h"
   1:/usr/include/c++/11/bits/stl_algobase.h **** // Core algorithmic facilities -*- C++ -*-
   2:/usr/include/c++/11/bits/stl_algobase.h **** 
   3:/usr/include/c++/11/bits/stl_algobase.h **** // Copyright (C) 2001-2021 Free Software Foundation, Inc.
   4:/usr/include/c++/11/bits/stl_algobase.h **** //
   5:/usr/include/c++/11/bits/stl_algobase.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/11/bits/stl_algobase.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/11/bits/stl_algobase.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/11/bits/stl_algobase.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/11/bits/stl_algobase.h **** // any later version.
  10:/usr/include/c++/11/bits/stl_algobase.h **** 
  11:/usr/include/c++/11/bits/stl_algobase.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/11/bits/stl_algobase.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/11/bits/stl_algobase.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/11/bits/stl_algobase.h **** // GNU General Public License for more details.
  15:/usr/include/c++/11/bits/stl_algobase.h **** 
  16:/usr/include/c++/11/bits/stl_algobase.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/11/bits/stl_algobase.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/11/bits/stl_algobase.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/11/bits/stl_algobase.h **** 
  20:/usr/include/c++/11/bits/stl_algobase.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/11/bits/stl_algobase.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/11/bits/stl_algobase.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/11/bits/stl_algobase.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/11/bits/stl_algobase.h **** 
  25:/usr/include/c++/11/bits/stl_algobase.h **** /*
  26:/usr/include/c++/11/bits/stl_algobase.h ****  *
  27:/usr/include/c++/11/bits/stl_algobase.h ****  * Copyright (c) 1994
  28:/usr/include/c++/11/bits/stl_algobase.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/11/bits/stl_algobase.h ****  *
  30:/usr/include/c++/11/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/11/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/11/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/11/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/11/bits/stl_algobase.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/11/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/11/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/11/bits/stl_algobase.h ****  *
  38:/usr/include/c++/11/bits/stl_algobase.h ****  *
  39:/usr/include/c++/11/bits/stl_algobase.h ****  * Copyright (c) 1996-1998
  40:/usr/include/c++/11/bits/stl_algobase.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/11/bits/stl_algobase.h ****  *
  42:/usr/include/c++/11/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/11/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/11/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/11/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/11/bits/stl_algobase.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/11/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/11/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/11/bits/stl_algobase.h ****  */
  50:/usr/include/c++/11/bits/stl_algobase.h **** 
  51:/usr/include/c++/11/bits/stl_algobase.h **** /** @file bits/stl_algobase.h
  52:/usr/include/c++/11/bits/stl_algobase.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/11/bits/stl_algobase.h ****  *  Do not attempt to use it directly. @headername{algorithm}
  54:/usr/include/c++/11/bits/stl_algobase.h ****  */
  55:/usr/include/c++/11/bits/stl_algobase.h **** 
  56:/usr/include/c++/11/bits/stl_algobase.h **** #ifndef _STL_ALGOBASE_H
  57:/usr/include/c++/11/bits/stl_algobase.h **** #define _STL_ALGOBASE_H 1
  58:/usr/include/c++/11/bits/stl_algobase.h **** 
  59:/usr/include/c++/11/bits/stl_algobase.h **** #include <bits/c++config.h>
  60:/usr/include/c++/11/bits/stl_algobase.h **** #include <bits/functexcept.h>
  61:/usr/include/c++/11/bits/stl_algobase.h **** #include <bits/cpp_type_traits.h>
  62:/usr/include/c++/11/bits/stl_algobase.h **** #include <ext/type_traits.h>
  63:/usr/include/c++/11/bits/stl_algobase.h **** #include <ext/numeric_traits.h>
  64:/usr/include/c++/11/bits/stl_algobase.h **** #include <bits/stl_pair.h>
  65:/usr/include/c++/11/bits/stl_algobase.h **** #include <bits/stl_iterator_base_types.h>
  66:/usr/include/c++/11/bits/stl_algobase.h **** #include <bits/stl_iterator_base_funcs.h>
  67:/usr/include/c++/11/bits/stl_algobase.h **** #include <bits/stl_iterator.h>
  68:/usr/include/c++/11/bits/stl_algobase.h **** #include <bits/concept_check.h>
  69:/usr/include/c++/11/bits/stl_algobase.h **** #include <debug/debug.h>
  70:/usr/include/c++/11/bits/stl_algobase.h **** #include <bits/move.h> // For std::swap
  71:/usr/include/c++/11/bits/stl_algobase.h **** #include <bits/predefined_ops.h>
  72:/usr/include/c++/11/bits/stl_algobase.h **** #if __cplusplus >= 201103L
  73:/usr/include/c++/11/bits/stl_algobase.h **** # include <type_traits>
  74:/usr/include/c++/11/bits/stl_algobase.h **** #endif
  75:/usr/include/c++/11/bits/stl_algobase.h **** #if __cplusplus > 201703L
  76:/usr/include/c++/11/bits/stl_algobase.h **** # include <compare>
  77:/usr/include/c++/11/bits/stl_algobase.h **** #endif
  78:/usr/include/c++/11/bits/stl_algobase.h **** 
  79:/usr/include/c++/11/bits/stl_algobase.h **** namespace std _GLIBCXX_VISIBILITY(default)
  80:/usr/include/c++/11/bits/stl_algobase.h **** {
  81:/usr/include/c++/11/bits/stl_algobase.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  82:/usr/include/c++/11/bits/stl_algobase.h **** 
  83:/usr/include/c++/11/bits/stl_algobase.h ****   /*
  84:/usr/include/c++/11/bits/stl_algobase.h ****    * A constexpr wrapper for __builtin_memcmp.
  85:/usr/include/c++/11/bits/stl_algobase.h ****    * @param __num The number of elements of type _Tp (not bytes).
  86:/usr/include/c++/11/bits/stl_algobase.h ****    */
  87:/usr/include/c++/11/bits/stl_algobase.h ****   template<typename _Tp, typename _Up>
  88:/usr/include/c++/11/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
  89:/usr/include/c++/11/bits/stl_algobase.h ****     inline int
  90:/usr/include/c++/11/bits/stl_algobase.h ****     __memcmp(const _Tp* __first1, const _Up* __first2, size_t __num)
  91:/usr/include/c++/11/bits/stl_algobase.h ****     {
  92:/usr/include/c++/11/bits/stl_algobase.h **** #if __cplusplus >= 201103L
  93:/usr/include/c++/11/bits/stl_algobase.h ****       static_assert(sizeof(_Tp) == sizeof(_Up), "can be compared with memcmp");
  94:/usr/include/c++/11/bits/stl_algobase.h **** #endif
  95:/usr/include/c++/11/bits/stl_algobase.h **** #ifdef __cpp_lib_is_constant_evaluated
  96:/usr/include/c++/11/bits/stl_algobase.h ****       if (std::is_constant_evaluated())
  97:/usr/include/c++/11/bits/stl_algobase.h **** 	{
  98:/usr/include/c++/11/bits/stl_algobase.h **** 	  for(; __num > 0; ++__first1, ++__first2, --__num)
  99:/usr/include/c++/11/bits/stl_algobase.h **** 	    if (*__first1 != *__first2)
 100:/usr/include/c++/11/bits/stl_algobase.h **** 	      return *__first1 < *__first2 ? -1 : 1;
 101:/usr/include/c++/11/bits/stl_algobase.h **** 	  return 0;
 102:/usr/include/c++/11/bits/stl_algobase.h **** 	}
 103:/usr/include/c++/11/bits/stl_algobase.h ****       else
 104:/usr/include/c++/11/bits/stl_algobase.h **** #endif
 105:/usr/include/c++/11/bits/stl_algobase.h **** 	return __builtin_memcmp(__first1, __first2, sizeof(_Tp) * __num);
 106:/usr/include/c++/11/bits/stl_algobase.h ****     }
 107:/usr/include/c++/11/bits/stl_algobase.h **** 
 108:/usr/include/c++/11/bits/stl_algobase.h **** #if __cplusplus < 201103L
 109:/usr/include/c++/11/bits/stl_algobase.h ****   // See http://gcc.gnu.org/ml/libstdc++/2004-08/msg00167.html: in a
 110:/usr/include/c++/11/bits/stl_algobase.h ****   // nutshell, we are partially implementing the resolution of DR 187,
 111:/usr/include/c++/11/bits/stl_algobase.h ****   // when it's safe, i.e., the value_types are equal.
 112:/usr/include/c++/11/bits/stl_algobase.h ****   template<bool _BoolType>
 113:/usr/include/c++/11/bits/stl_algobase.h ****     struct __iter_swap
 114:/usr/include/c++/11/bits/stl_algobase.h ****     {
 115:/usr/include/c++/11/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 116:/usr/include/c++/11/bits/stl_algobase.h **** 	static void
 117:/usr/include/c++/11/bits/stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 118:/usr/include/c++/11/bits/stl_algobase.h **** 	{
 119:/usr/include/c++/11/bits/stl_algobase.h **** 	  typedef typename iterator_traits<_ForwardIterator1>::value_type
 120:/usr/include/c++/11/bits/stl_algobase.h **** 	    _ValueType1;
 121:/usr/include/c++/11/bits/stl_algobase.h **** 	  _ValueType1 __tmp = *__a;
 122:/usr/include/c++/11/bits/stl_algobase.h **** 	  *__a = *__b;
 123:/usr/include/c++/11/bits/stl_algobase.h **** 	  *__b = __tmp;
 124:/usr/include/c++/11/bits/stl_algobase.h **** 	}
 125:/usr/include/c++/11/bits/stl_algobase.h ****     };
 126:/usr/include/c++/11/bits/stl_algobase.h **** 
 127:/usr/include/c++/11/bits/stl_algobase.h ****   template<>
 128:/usr/include/c++/11/bits/stl_algobase.h ****     struct __iter_swap<true>
 129:/usr/include/c++/11/bits/stl_algobase.h ****     {
 130:/usr/include/c++/11/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 131:/usr/include/c++/11/bits/stl_algobase.h **** 	static void
 132:/usr/include/c++/11/bits/stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 133:/usr/include/c++/11/bits/stl_algobase.h **** 	{
 134:/usr/include/c++/11/bits/stl_algobase.h **** 	  swap(*__a, *__b);
 135:/usr/include/c++/11/bits/stl_algobase.h **** 	}
 136:/usr/include/c++/11/bits/stl_algobase.h ****     };
 137:/usr/include/c++/11/bits/stl_algobase.h **** #endif // C++03
 138:/usr/include/c++/11/bits/stl_algobase.h **** 
 139:/usr/include/c++/11/bits/stl_algobase.h ****   /**
 140:/usr/include/c++/11/bits/stl_algobase.h ****    *  @brief Swaps the contents of two iterators.
 141:/usr/include/c++/11/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 142:/usr/include/c++/11/bits/stl_algobase.h ****    *  @param  __a  An iterator.
 143:/usr/include/c++/11/bits/stl_algobase.h ****    *  @param  __b  Another iterator.
 144:/usr/include/c++/11/bits/stl_algobase.h ****    *  @return   Nothing.
 145:/usr/include/c++/11/bits/stl_algobase.h ****    *
 146:/usr/include/c++/11/bits/stl_algobase.h ****    *  This function swaps the values pointed to by two iterators, not the
 147:/usr/include/c++/11/bits/stl_algobase.h ****    *  iterators themselves.
 148:/usr/include/c++/11/bits/stl_algobase.h ****   */
 149:/usr/include/c++/11/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 150:/usr/include/c++/11/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 151:/usr/include/c++/11/bits/stl_algobase.h ****     inline void
 152:/usr/include/c++/11/bits/stl_algobase.h ****     iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 153:/usr/include/c++/11/bits/stl_algobase.h ****     {
 154:/usr/include/c++/11/bits/stl_algobase.h ****       // concept requirements
 155:/usr/include/c++/11/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 156:/usr/include/c++/11/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 157:/usr/include/c++/11/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 158:/usr/include/c++/11/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 159:/usr/include/c++/11/bits/stl_algobase.h **** 
 160:/usr/include/c++/11/bits/stl_algobase.h **** #if __cplusplus < 201103L
 161:/usr/include/c++/11/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::value_type
 162:/usr/include/c++/11/bits/stl_algobase.h **** 	_ValueType1;
 163:/usr/include/c++/11/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::value_type
 164:/usr/include/c++/11/bits/stl_algobase.h **** 	_ValueType2;
 165:/usr/include/c++/11/bits/stl_algobase.h **** 
 166:/usr/include/c++/11/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType1,
 167:/usr/include/c++/11/bits/stl_algobase.h **** 				  _ValueType2>)
 168:/usr/include/c++/11/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType2,
 169:/usr/include/c++/11/bits/stl_algobase.h **** 				  _ValueType1>)
 170:/usr/include/c++/11/bits/stl_algobase.h **** 
 171:/usr/include/c++/11/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::reference
 172:/usr/include/c++/11/bits/stl_algobase.h **** 	_ReferenceType1;
 173:/usr/include/c++/11/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::reference
 174:/usr/include/c++/11/bits/stl_algobase.h **** 	_ReferenceType2;
 175:/usr/include/c++/11/bits/stl_algobase.h ****       std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
 176:/usr/include/c++/11/bits/stl_algobase.h **** 	&& __are_same<_ValueType1&, _ReferenceType1>::__value
 177:/usr/include/c++/11/bits/stl_algobase.h **** 	&& __are_same<_ValueType2&, _ReferenceType2>::__value>::
 178:/usr/include/c++/11/bits/stl_algobase.h **** 	iter_swap(__a, __b);
 179:/usr/include/c++/11/bits/stl_algobase.h **** #else
 180:/usr/include/c++/11/bits/stl_algobase.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 181:/usr/include/c++/11/bits/stl_algobase.h ****       // 187. iter_swap underspecified
 182:/usr/include/c++/11/bits/stl_algobase.h ****       swap(*__a, *__b);
 183:/usr/include/c++/11/bits/stl_algobase.h **** #endif
 184:/usr/include/c++/11/bits/stl_algobase.h ****     }
 185:/usr/include/c++/11/bits/stl_algobase.h **** 
 186:/usr/include/c++/11/bits/stl_algobase.h ****   /**
 187:/usr/include/c++/11/bits/stl_algobase.h ****    *  @brief Swap the elements of two sequences.
 188:/usr/include/c++/11/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 189:/usr/include/c++/11/bits/stl_algobase.h ****    *  @param  __first1  A forward iterator.
 190:/usr/include/c++/11/bits/stl_algobase.h ****    *  @param  __last1   A forward iterator.
 191:/usr/include/c++/11/bits/stl_algobase.h ****    *  @param  __first2  A forward iterator.
 192:/usr/include/c++/11/bits/stl_algobase.h ****    *  @return   An iterator equal to @p first2+(last1-first1).
 193:/usr/include/c++/11/bits/stl_algobase.h ****    *
 194:/usr/include/c++/11/bits/stl_algobase.h ****    *  Swaps each element in the range @p [first1,last1) with the
 195:/usr/include/c++/11/bits/stl_algobase.h ****    *  corresponding element in the range @p [first2,(last1-first1)).
 196:/usr/include/c++/11/bits/stl_algobase.h ****    *  The ranges must not overlap.
 197:/usr/include/c++/11/bits/stl_algobase.h ****   */
 198:/usr/include/c++/11/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 199:/usr/include/c++/11/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 200:/usr/include/c++/11/bits/stl_algobase.h ****     _ForwardIterator2
 201:/usr/include/c++/11/bits/stl_algobase.h ****     swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 202:/usr/include/c++/11/bits/stl_algobase.h **** 		_ForwardIterator2 __first2)
 203:/usr/include/c++/11/bits/stl_algobase.h ****     {
 204:/usr/include/c++/11/bits/stl_algobase.h ****       // concept requirements
 205:/usr/include/c++/11/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 206:/usr/include/c++/11/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 207:/usr/include/c++/11/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 208:/usr/include/c++/11/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 209:/usr/include/c++/11/bits/stl_algobase.h ****       __glibcxx_requires_valid_range(__first1, __last1);
 210:/usr/include/c++/11/bits/stl_algobase.h **** 
 211:/usr/include/c++/11/bits/stl_algobase.h ****       for (; __first1 != __last1; ++__first1, (void)++__first2)
 212:/usr/include/c++/11/bits/stl_algobase.h **** 	std::iter_swap(__first1, __first2);
 213:/usr/include/c++/11/bits/stl_algobase.h ****       return __first2;
 214:/usr/include/c++/11/bits/stl_algobase.h ****     }
 215:/usr/include/c++/11/bits/stl_algobase.h **** 
 216:/usr/include/c++/11/bits/stl_algobase.h ****   /**
 217:/usr/include/c++/11/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 218:/usr/include/c++/11/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 219:/usr/include/c++/11/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 220:/usr/include/c++/11/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 221:/usr/include/c++/11/bits/stl_algobase.h ****    *  @return   The lesser of the parameters.
 222:/usr/include/c++/11/bits/stl_algobase.h ****    *
 223:/usr/include/c++/11/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 224:/usr/include/c++/11/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 225:/usr/include/c++/11/bits/stl_algobase.h ****    *  preprocessor macro.
 226:/usr/include/c++/11/bits/stl_algobase.h ****   */
 227:/usr/include/c++/11/bits/stl_algobase.h ****   template<typename _Tp>
 228:/usr/include/c++/11/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 229:/usr/include/c++/11/bits/stl_algobase.h ****     inline const _Tp&
 230:/usr/include/c++/11/bits/stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b)
 231:/usr/include/c++/11/bits/stl_algobase.h ****     {
 232:/usr/include/c++/11/bits/stl_algobase.h ****       // concept requirements
 233:/usr/include/c++/11/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 234:/usr/include/c++/11/bits/stl_algobase.h ****       //return __b < __a ? __b : __a;
 235:/usr/include/c++/11/bits/stl_algobase.h ****       if (__b < __a)
 236:/usr/include/c++/11/bits/stl_algobase.h **** 	return __b;
 237:/usr/include/c++/11/bits/stl_algobase.h ****       return __a;
 238:/usr/include/c++/11/bits/stl_algobase.h ****     }
 239:/usr/include/c++/11/bits/stl_algobase.h **** 
 240:/usr/include/c++/11/bits/stl_algobase.h ****   /**
 241:/usr/include/c++/11/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 242:/usr/include/c++/11/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 243:/usr/include/c++/11/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 244:/usr/include/c++/11/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 245:/usr/include/c++/11/bits/stl_algobase.h ****    *  @return   The greater of the parameters.
 246:/usr/include/c++/11/bits/stl_algobase.h ****    *
 247:/usr/include/c++/11/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 248:/usr/include/c++/11/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 249:/usr/include/c++/11/bits/stl_algobase.h ****    *  preprocessor macro.
 250:/usr/include/c++/11/bits/stl_algobase.h ****   */
 251:/usr/include/c++/11/bits/stl_algobase.h ****   template<typename _Tp>
 252:/usr/include/c++/11/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 253:/usr/include/c++/11/bits/stl_algobase.h ****     inline const _Tp&
 254:/usr/include/c++/11/bits/stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b)
 255:/usr/include/c++/11/bits/stl_algobase.h ****     {
 256:/usr/include/c++/11/bits/stl_algobase.h ****       // concept requirements
 257:/usr/include/c++/11/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 258:/usr/include/c++/11/bits/stl_algobase.h ****       //return  __a < __b ? __b : __a;
 259:/usr/include/c++/11/bits/stl_algobase.h ****       if (__a < __b)
 260:/usr/include/c++/11/bits/stl_algobase.h **** 	return __b;
 261:/usr/include/c++/11/bits/stl_algobase.h ****       return __a;
 262:/usr/include/c++/11/bits/stl_algobase.h ****     }
 263:/usr/include/c++/11/bits/stl_algobase.h **** 
 264:/usr/include/c++/11/bits/stl_algobase.h ****   /**
 265:/usr/include/c++/11/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 266:/usr/include/c++/11/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 267:/usr/include/c++/11/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 268:/usr/include/c++/11/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 269:/usr/include/c++/11/bits/stl_algobase.h ****    *  @param  __comp  A @link comparison_functors comparison functor@endlink.
 270:/usr/include/c++/11/bits/stl_algobase.h ****    *  @return   The lesser of the parameters.
 271:/usr/include/c++/11/bits/stl_algobase.h ****    *
 272:/usr/include/c++/11/bits/stl_algobase.h ****    *  This will work on temporary expressions, since they are only evaluated
 273:/usr/include/c++/11/bits/stl_algobase.h ****    *  once, unlike a preprocessor macro.
 274:/usr/include/c++/11/bits/stl_algobase.h ****   */
 275:/usr/include/c++/11/bits/stl_algobase.h ****   template<typename _Tp, typename _Compare>
 276:/usr/include/c++/11/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 277:/usr/include/c++/11/bits/stl_algobase.h ****     inline const _Tp&
 278:/usr/include/c++/11/bits/stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b, _Compare __comp)
 279:/usr/include/c++/11/bits/stl_algobase.h ****     {
 280:/usr/include/c++/11/bits/stl_algobase.h ****       //return __comp(__b, __a) ? __b : __a;
 281:/usr/include/c++/11/bits/stl_algobase.h ****       if (__comp(__b, __a))
 282:/usr/include/c++/11/bits/stl_algobase.h **** 	return __b;
 283:/usr/include/c++/11/bits/stl_algobase.h ****       return __a;
 284:/usr/include/c++/11/bits/stl_algobase.h ****     }
 285:/usr/include/c++/11/bits/stl_algobase.h **** 
 286:/usr/include/c++/11/bits/stl_algobase.h ****   /**
 287:/usr/include/c++/11/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 288:/usr/include/c++/11/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 289:/usr/include/c++/11/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 290:/usr/include/c++/11/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 291:/usr/include/c++/11/bits/stl_algobase.h ****    *  @param  __comp  A @link comparison_functors comparison functor@endlink.
 292:/usr/include/c++/11/bits/stl_algobase.h ****    *  @return   The greater of the parameters.
 293:/usr/include/c++/11/bits/stl_algobase.h ****    *
 294:/usr/include/c++/11/bits/stl_algobase.h ****    *  This will work on temporary expressions, since they are only evaluated
 295:/usr/include/c++/11/bits/stl_algobase.h ****    *  once, unlike a preprocessor macro.
 296:/usr/include/c++/11/bits/stl_algobase.h ****   */
 297:/usr/include/c++/11/bits/stl_algobase.h ****   template<typename _Tp, typename _Compare>
 298:/usr/include/c++/11/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 299:/usr/include/c++/11/bits/stl_algobase.h ****     inline const _Tp&
 300:/usr/include/c++/11/bits/stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b, _Compare __comp)
 301:/usr/include/c++/11/bits/stl_algobase.h ****     {
 302:/usr/include/c++/11/bits/stl_algobase.h ****       //return __comp(__a, __b) ? __b : __a;
 303:/usr/include/c++/11/bits/stl_algobase.h ****       if (__comp(__a, __b))
 304:/usr/include/c++/11/bits/stl_algobase.h **** 	return __b;
 305:/usr/include/c++/11/bits/stl_algobase.h ****       return __a;
 306:/usr/include/c++/11/bits/stl_algobase.h ****     }
 307:/usr/include/c++/11/bits/stl_algobase.h **** 
 308:/usr/include/c++/11/bits/stl_algobase.h ****   // Fallback implementation of the function in bits/stl_iterator.h used to
 309:/usr/include/c++/11/bits/stl_algobase.h ****   // remove the __normal_iterator wrapper. See copy, fill, ...
 310:/usr/include/c++/11/bits/stl_algobase.h ****   template<typename _Iterator>
 311:/usr/include/c++/11/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 312:/usr/include/c++/11/bits/stl_algobase.h ****     inline _Iterator
 313:/usr/include/c++/11/bits/stl_algobase.h ****     __niter_base(_Iterator __it)
 314:/usr/include/c++/11/bits/stl_algobase.h ****     _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
 315:/usr/include/c++/11/bits/stl_algobase.h ****     { return __it; }
 316:/usr/include/c++/11/bits/stl_algobase.h **** 
 317:/usr/include/c++/11/bits/stl_algobase.h ****   template<typename _Ite, typename _Seq>
 318:/usr/include/c++/11/bits/stl_algobase.h ****     _Ite
 319:/usr/include/c++/11/bits/stl_algobase.h ****     __niter_base(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq,
 320:/usr/include/c++/11/bits/stl_algobase.h **** 		 std::random_access_iterator_tag>&);
 321:/usr/include/c++/11/bits/stl_algobase.h **** 
 322:/usr/include/c++/11/bits/stl_algobase.h ****   // Reverse the __niter_base transformation to get a
 323:/usr/include/c++/11/bits/stl_algobase.h ****   // __normal_iterator back again (this assumes that __normal_iterator
 324:/usr/include/c++/11/bits/stl_algobase.h ****   // is only used to wrap random access iterators, like pointers).
 325:/usr/include/c++/11/bits/stl_algobase.h ****   template<typename _From, typename _To>
 326:/usr/include/c++/11/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 327:/usr/include/c++/11/bits/stl_algobase.h ****     inline _From
 328:/usr/include/c++/11/bits/stl_algobase.h ****     __niter_wrap(_From __from, _To __res)
 329:/usr/include/c++/11/bits/stl_algobase.h ****     { return __from + (__res - std::__niter_base(__from)); }
 330:/usr/include/c++/11/bits/stl_algobase.h **** 
 331:/usr/include/c++/11/bits/stl_algobase.h ****   // No need to wrap, iterator already has the right type.
 332:/usr/include/c++/11/bits/stl_algobase.h ****   template<typename _Iterator>
 333:/usr/include/c++/11/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 334:/usr/include/c++/11/bits/stl_algobase.h ****     inline _Iterator
 335:/usr/include/c++/11/bits/stl_algobase.h ****     __niter_wrap(const _Iterator&, _Iterator __res)
 336:/usr/include/c++/11/bits/stl_algobase.h ****     { return __res; }
 337:/usr/include/c++/11/bits/stl_algobase.h **** 
 338:/usr/include/c++/11/bits/stl_algobase.h ****   // All of these auxiliary structs serve two purposes.  (1) Replace
 339:/usr/include/c++/11/bits/stl_algobase.h ****   // calls to copy with memmove whenever possible.  (Memmove, not memcpy,
 340:/usr/include/c++/11/bits/stl_algobase.h ****   // because the input and output ranges are permitted to overlap.)
 341:/usr/include/c++/11/bits/stl_algobase.h ****   // (2) If we're using random access iterators, then write the loop as
 342:/usr/include/c++/11/bits/stl_algobase.h ****   // a for loop with an explicit count.
 343:/usr/include/c++/11/bits/stl_algobase.h **** 
 344:/usr/include/c++/11/bits/stl_algobase.h ****   template<bool _IsMove, bool _IsSimple, typename _Category>
 345:/usr/include/c++/11/bits/stl_algobase.h ****     struct __copy_move
 346:/usr/include/c++/11/bits/stl_algobase.h ****     {
 347:/usr/include/c++/11/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 348:/usr/include/c++/11/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 349:/usr/include/c++/11/bits/stl_algobase.h **** 	static _OI
 350:/usr/include/c++/11/bits/stl_algobase.h **** 	__copy_m(_II __first, _II __last, _OI __result)
 351:/usr/include/c++/11/bits/stl_algobase.h **** 	{
 352:/usr/include/c++/11/bits/stl_algobase.h **** 	  for (; __first != __last; ++__result, (void)++__first)
 353:/usr/include/c++/11/bits/stl_algobase.h **** 	    *__result = *__first;
 354:/usr/include/c++/11/bits/stl_algobase.h **** 	  return __result;
 355:/usr/include/c++/11/bits/stl_algobase.h **** 	}
 356:/usr/include/c++/11/bits/stl_algobase.h ****     };
 357:/usr/include/c++/11/bits/stl_algobase.h **** 
 358:/usr/include/c++/11/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 359:/usr/include/c++/11/bits/stl_algobase.h ****   template<typename _Category>
 360:/usr/include/c++/11/bits/stl_algobase.h ****     struct __copy_move<true, false, _Category>
 361:/usr/include/c++/11/bits/stl_algobase.h ****     {
 362:/usr/include/c++/11/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 363:/usr/include/c++/11/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 364:/usr/include/c++/11/bits/stl_algobase.h **** 	static _OI
 365:/usr/include/c++/11/bits/stl_algobase.h **** 	__copy_m(_II __first, _II __last, _OI __result)
 366:/usr/include/c++/11/bits/stl_algobase.h **** 	{
 367:/usr/include/c++/11/bits/stl_algobase.h **** 	  for (; __first != __last; ++__result, (void)++__first)
 368:/usr/include/c++/11/bits/stl_algobase.h **** 	    *__result = std::move(*__first);
 369:/usr/include/c++/11/bits/stl_algobase.h **** 	  return __result;
 370:/usr/include/c++/11/bits/stl_algobase.h **** 	}
 371:/usr/include/c++/11/bits/stl_algobase.h ****     };
 372:/usr/include/c++/11/bits/stl_algobase.h **** #endif
 373:/usr/include/c++/11/bits/stl_algobase.h **** 
 374:/usr/include/c++/11/bits/stl_algobase.h ****   template<>
 375:/usr/include/c++/11/bits/stl_algobase.h ****     struct __copy_move<false, false, random_access_iterator_tag>
 376:/usr/include/c++/11/bits/stl_algobase.h ****     {
 377:/usr/include/c++/11/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 378:/usr/include/c++/11/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 379:/usr/include/c++/11/bits/stl_algobase.h **** 	static _OI
 380:/usr/include/c++/11/bits/stl_algobase.h **** 	__copy_m(_II __first, _II __last, _OI __result)
 381:/usr/include/c++/11/bits/stl_algobase.h **** 	{
 382:/usr/include/c++/11/bits/stl_algobase.h **** 	  typedef typename iterator_traits<_II>::difference_type _Distance;
 383:/usr/include/c++/11/bits/stl_algobase.h **** 	  for(_Distance __n = __last - __first; __n > 0; --__n)
 384:/usr/include/c++/11/bits/stl_algobase.h **** 	    {
 385:/usr/include/c++/11/bits/stl_algobase.h **** 	      *__result = *__first;
 386:/usr/include/c++/11/bits/stl_algobase.h **** 	      ++__first;
 387:/usr/include/c++/11/bits/stl_algobase.h **** 	      ++__result;
 388:/usr/include/c++/11/bits/stl_algobase.h **** 	    }
 389:/usr/include/c++/11/bits/stl_algobase.h **** 	  return __result;
 390:/usr/include/c++/11/bits/stl_algobase.h **** 	}
 391:/usr/include/c++/11/bits/stl_algobase.h ****     };
 392:/usr/include/c++/11/bits/stl_algobase.h **** 
 393:/usr/include/c++/11/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 394:/usr/include/c++/11/bits/stl_algobase.h ****   template<>
 395:/usr/include/c++/11/bits/stl_algobase.h ****     struct __copy_move<true, false, random_access_iterator_tag>
 396:/usr/include/c++/11/bits/stl_algobase.h ****     {
 397:/usr/include/c++/11/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 398:/usr/include/c++/11/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 399:/usr/include/c++/11/bits/stl_algobase.h **** 	static _OI
 400:/usr/include/c++/11/bits/stl_algobase.h **** 	__copy_m(_II __first, _II __last, _OI __result)
 401:/usr/include/c++/11/bits/stl_algobase.h **** 	{
 402:/usr/include/c++/11/bits/stl_algobase.h **** 	  typedef typename iterator_traits<_II>::difference_type _Distance;
 403:/usr/include/c++/11/bits/stl_algobase.h **** 	  for(_Distance __n = __last - __first; __n > 0; --__n)
 404:/usr/include/c++/11/bits/stl_algobase.h **** 	    {
 405:/usr/include/c++/11/bits/stl_algobase.h **** 	      *__result = std::move(*__first);
 406:/usr/include/c++/11/bits/stl_algobase.h **** 	      ++__first;
 407:/usr/include/c++/11/bits/stl_algobase.h **** 	      ++__result;
 408:/usr/include/c++/11/bits/stl_algobase.h **** 	    }
 409:/usr/include/c++/11/bits/stl_algobase.h **** 	  return __result;
 410:/usr/include/c++/11/bits/stl_algobase.h **** 	}
 411:/usr/include/c++/11/bits/stl_algobase.h ****     };
 412:/usr/include/c++/11/bits/stl_algobase.h **** #endif
 413:/usr/include/c++/11/bits/stl_algobase.h **** 
 414:/usr/include/c++/11/bits/stl_algobase.h ****   template<bool _IsMove>
 415:/usr/include/c++/11/bits/stl_algobase.h ****     struct __copy_move<_IsMove, true, random_access_iterator_tag>
 416:/usr/include/c++/11/bits/stl_algobase.h ****     {
 417:/usr/include/c++/11/bits/stl_algobase.h ****       template<typename _Tp>
 418:/usr/include/c++/11/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 419:/usr/include/c++/11/bits/stl_algobase.h **** 	static _Tp*
 420:/usr/include/c++/11/bits/stl_algobase.h **** 	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 421:/usr/include/c++/11/bits/stl_algobase.h **** 	{
 422:/usr/include/c++/11/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 423:/usr/include/c++/11/bits/stl_algobase.h **** 	  using __assignable = conditional<_IsMove,
 424:/usr/include/c++/11/bits/stl_algobase.h **** 					   is_move_assignable<_Tp>,
 425:/usr/include/c++/11/bits/stl_algobase.h **** 					   is_copy_assignable<_Tp>>;
 426:/usr/include/c++/11/bits/stl_algobase.h **** 	  // trivial types can have deleted assignment
 427:/usr/include/c++/11/bits/stl_algobase.h **** 	  static_assert( __assignable::type::value, "type is not assignable" );
 428:/usr/include/c++/11/bits/stl_algobase.h **** #endif
 429:/usr/include/c++/11/bits/stl_algobase.h **** 	  const ptrdiff_t _Num = __last - __first;
 430:/usr/include/c++/11/bits/stl_algobase.h **** 	  if (_Num)
 431:/usr/include/c++/11/bits/stl_algobase.h **** 	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 432:/usr/include/c++/11/bits/stl_algobase.h **** 	  return __result + _Num;
 433:/usr/include/c++/11/bits/stl_algobase.h **** 	}
 434:/usr/include/c++/11/bits/stl_algobase.h ****     };
 435:/usr/include/c++/11/bits/stl_algobase.h **** 
 436:/usr/include/c++/11/bits/stl_algobase.h **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
 437:/usr/include/c++/11/bits/stl_algobase.h **** 
 438:/usr/include/c++/11/bits/stl_algobase.h ****   template<typename _Tp, typename _Ref, typename _Ptr>
 439:/usr/include/c++/11/bits/stl_algobase.h ****     struct _Deque_iterator;
 440:/usr/include/c++/11/bits/stl_algobase.h **** 
 441:/usr/include/c++/11/bits/stl_algobase.h ****   struct _Bit_iterator;
 442:/usr/include/c++/11/bits/stl_algobase.h **** 
 443:/usr/include/c++/11/bits/stl_algobase.h **** _GLIBCXX_END_NAMESPACE_CONTAINER
 444:/usr/include/c++/11/bits/stl_algobase.h **** 
 445:/usr/include/c++/11/bits/stl_algobase.h ****   // Helpers for streambuf iterators (either istream or ostream).
 446:/usr/include/c++/11/bits/stl_algobase.h ****   // NB: avoid including <iosfwd>, relatively large.
 447:/usr/include/c++/11/bits/stl_algobase.h ****   template<typename _CharT>
 448:/usr/include/c++/11/bits/stl_algobase.h ****     struct char_traits;
 449:/usr/include/c++/11/bits/stl_algobase.h **** 
 450:/usr/include/c++/11/bits/stl_algobase.h ****   template<typename _CharT, typename _Traits>
 451:/usr/include/c++/11/bits/stl_algobase.h ****     class istreambuf_iterator;
 452:/usr/include/c++/11/bits/stl_algobase.h **** 
 453:/usr/include/c++/11/bits/stl_algobase.h ****   template<typename _CharT, typename _Traits>
 454:/usr/include/c++/11/bits/stl_algobase.h ****     class ostreambuf_iterator;
 455:/usr/include/c++/11/bits/stl_algobase.h **** 
 456:/usr/include/c++/11/bits/stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 457:/usr/include/c++/11/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
 458:/usr/include/c++/11/bits/stl_algobase.h **** 	     ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
 459:/usr/include/c++/11/bits/stl_algobase.h ****     __copy_move_a2(_CharT*, _CharT*,
 460:/usr/include/c++/11/bits/stl_algobase.h **** 		   ostreambuf_iterator<_CharT, char_traits<_CharT> >);
 461:/usr/include/c++/11/bits/stl_algobase.h **** 
 462:/usr/include/c++/11/bits/stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 463:/usr/include/c++/11/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
 464:/usr/include/c++/11/bits/stl_algobase.h **** 	     ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
 465:/usr/include/c++/11/bits/stl_algobase.h ****     __copy_move_a2(const _CharT*, const _CharT*,
 466:/usr/include/c++/11/bits/stl_algobase.h **** 		   ostreambuf_iterator<_CharT, char_traits<_CharT> >);
 467:/usr/include/c++/11/bits/stl_algobase.h **** 
 468:/usr/include/c++/11/bits/stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 469:/usr/include/c++/11/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
 470:/usr/include/c++/11/bits/stl_algobase.h **** 				    _CharT*>::__type
 471:/usr/include/c++/11/bits/stl_algobase.h ****     __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
 472:/usr/include/c++/11/bits/stl_algobase.h **** 		   istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);
 473:/usr/include/c++/11/bits/stl_algobase.h **** 
 474:/usr/include/c++/11/bits/stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 475:/usr/include/c++/11/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<
 476:/usr/include/c++/11/bits/stl_algobase.h ****       __is_char<_CharT>::__value,
 477:/usr/include/c++/11/bits/stl_algobase.h ****       _GLIBCXX_STD_C::_Deque_iterator<_CharT, _CharT&, _CharT*> >::__type
 478:/usr/include/c++/11/bits/stl_algobase.h ****     __copy_move_a2(
 479:/usr/include/c++/11/bits/stl_algobase.h **** 	istreambuf_iterator<_CharT, char_traits<_CharT> >,
 480:/usr/include/c++/11/bits/stl_algobase.h **** 	istreambuf_iterator<_CharT, char_traits<_CharT> >,
 481:/usr/include/c++/11/bits/stl_algobase.h **** 	_GLIBCXX_STD_C::_Deque_iterator<_CharT, _CharT&, _CharT*>);
 482:/usr/include/c++/11/bits/stl_algobase.h **** 
 483:/usr/include/c++/11/bits/stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 484:/usr/include/c++/11/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 485:/usr/include/c++/11/bits/stl_algobase.h ****     inline _OI
 486:/usr/include/c++/11/bits/stl_algobase.h ****     __copy_move_a2(_II __first, _II __last, _OI __result)
 487:/usr/include/c++/11/bits/stl_algobase.h ****     {
 488:/usr/include/c++/11/bits/stl_algobase.h ****       typedef typename iterator_traits<_II>::iterator_category _Category;
 489:/usr/include/c++/11/bits/stl_algobase.h **** #ifdef __cpp_lib_is_constant_evaluated
 490:/usr/include/c++/11/bits/stl_algobase.h ****       if (std::is_constant_evaluated())
 491:/usr/include/c++/11/bits/stl_algobase.h **** 	return std::__copy_move<_IsMove, false, _Category>::
 492:/usr/include/c++/11/bits/stl_algobase.h **** 	  __copy_m(__first, __last, __result);
 493:/usr/include/c++/11/bits/stl_algobase.h **** #endif
 494:/usr/include/c++/11/bits/stl_algobase.h ****       return std::__copy_move<_IsMove, __memcpyable<_OI, _II>::__value,
 495:/usr/include/c++/11/bits/stl_algobase.h **** 			      _Category>::__copy_m(__first, __last, __result);
 496:/usr/include/c++/11/bits/stl_algobase.h ****     }
 497:/usr/include/c++/11/bits/stl_algobase.h **** 
 498:/usr/include/c++/11/bits/stl_algobase.h ****   template<bool _IsMove,
 499:/usr/include/c++/11/bits/stl_algobase.h **** 	   typename _Tp, typename _Ref, typename _Ptr, typename _OI>
 500:/usr/include/c++/11/bits/stl_algobase.h ****     _OI
 501:/usr/include/c++/11/bits/stl_algobase.h ****     __copy_move_a1(_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,
 502:/usr/include/c++/11/bits/stl_algobase.h **** 		   _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,
 503:/usr/include/c++/11/bits/stl_algobase.h **** 		   _OI);
 504:/usr/include/c++/11/bits/stl_algobase.h **** 
 505:/usr/include/c++/11/bits/stl_algobase.h ****   template<bool _IsMove,
 506:/usr/include/c++/11/bits/stl_algobase.h **** 	   typename _ITp, typename _IRef, typename _IPtr, typename _OTp>
 507:/usr/include/c++/11/bits/stl_algobase.h ****     _GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*>
 508:/usr/include/c++/11/bits/stl_algobase.h ****     __copy_move_a1(_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr>,
 509:/usr/include/c++/11/bits/stl_algobase.h **** 		   _GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr>,
 510:/usr/include/c++/11/bits/stl_algobase.h **** 		   _GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*>);
 511:/usr/include/c++/11/bits/stl_algobase.h **** 
 512:/usr/include/c++/11/bits/stl_algobase.h ****   template<bool _IsMove, typename _II, typename _Tp>
 513:/usr/include/c++/11/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<
 514:/usr/include/c++/11/bits/stl_algobase.h ****       __is_random_access_iter<_II>::__value,
 515:/usr/include/c++/11/bits/stl_algobase.h ****       _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
 516:/usr/include/c++/11/bits/stl_algobase.h ****     __copy_move_a1(_II, _II, _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>);
 517:/usr/include/c++/11/bits/stl_algobase.h **** 
 518:/usr/include/c++/11/bits/stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 519:/usr/include/c++/11/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 520:/usr/include/c++/11/bits/stl_algobase.h ****     inline _OI
 521:/usr/include/c++/11/bits/stl_algobase.h ****     __copy_move_a1(_II __first, _II __last, _OI __result)
 522:/usr/include/c++/11/bits/stl_algobase.h ****     { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 523:/usr/include/c++/11/bits/stl_algobase.h **** 
 524:/usr/include/c++/11/bits/stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 525:/usr/include/c++/11/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 526:/usr/include/c++/11/bits/stl_algobase.h ****     inline _OI
 527:/usr/include/c++/11/bits/stl_algobase.h ****     __copy_move_a(_II __first, _II __last, _OI __result)
 528:/usr/include/c++/11/bits/stl_algobase.h ****     {
 529:/usr/include/c++/11/bits/stl_algobase.h ****       return std::__niter_wrap(__result,
 530:/usr/include/c++/11/bits/stl_algobase.h **** 		std::__copy_move_a1<_IsMove>(std::__niter_base(__first),
 531:/usr/include/c++/11/bits/stl_algobase.h **** 					     std::__niter_base(__last),
 532:/usr/include/c++/11/bits/stl_algobase.h **** 					     std::__niter_base(__result)));
 533:/usr/include/c++/11/bits/stl_algobase.h ****     }
 534:/usr/include/c++/11/bits/stl_algobase.h **** 
 535:/usr/include/c++/11/bits/stl_algobase.h ****   template<bool _IsMove,
 536:/usr/include/c++/11/bits/stl_algobase.h **** 	   typename _Ite, typename _Seq, typename _Cat, typename _OI>
 537:/usr/include/c++/11/bits/stl_algobase.h ****     _OI
 538:/usr/include/c++/11/bits/stl_algobase.h ****     __copy_move_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
 539:/usr/include/c++/11/bits/stl_algobase.h **** 		  const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
 540:/usr/include/c++/11/bits/stl_algobase.h **** 		  _OI);
 541:/usr/include/c++/11/bits/stl_algobase.h **** 
 542:/usr/include/c++/11/bits/stl_algobase.h ****   template<bool _IsMove,
 543:/usr/include/c++/11/bits/stl_algobase.h **** 	   typename _II, typename _Ite, typename _Seq, typename _Cat>
 544:/usr/include/c++/11/bits/stl_algobase.h ****     __gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>
 545:/usr/include/c++/11/bits/stl_algobase.h ****     __copy_move_a(_II, _II,
 546:/usr/include/c++/11/bits/stl_algobase.h **** 		  const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&);
 547:/usr/include/c++/11/bits/stl_algobase.h **** 
 548:/usr/include/c++/11/bits/stl_algobase.h ****   template<bool _IsMove,
 549:/usr/include/c++/11/bits/stl_algobase.h **** 	   typename _IIte, typename _ISeq, typename _ICat,
 550:/usr/include/c++/11/bits/stl_algobase.h **** 	   typename _OIte, typename _OSeq, typename _OCat>
 551:/usr/include/c++/11/bits/stl_algobase.h ****     ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>
 552:/usr/include/c++/11/bits/stl_algobase.h ****     __copy_move_a(const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
 553:/usr/include/c++/11/bits/stl_algobase.h **** 		  const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
 554:/usr/include/c++/11/bits/stl_algobase.h **** 		  const ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>&);
 555:/usr/include/c++/11/bits/stl_algobase.h **** 
 556:/usr/include/c++/11/bits/stl_algobase.h ****   template<typename _InputIterator, typename _Size, typename _OutputIterator>
 557:/usr/include/c++/11/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 558:/usr/include/c++/11/bits/stl_algobase.h ****     _OutputIterator
 559:/usr/include/c++/11/bits/stl_algobase.h ****     __copy_n_a(_InputIterator __first, _Size __n, _OutputIterator __result,
 560:/usr/include/c++/11/bits/stl_algobase.h **** 	       bool)
 561:/usr/include/c++/11/bits/stl_algobase.h ****     {
 562:/usr/include/c++/11/bits/stl_algobase.h ****       if (__n > 0)
 563:/usr/include/c++/11/bits/stl_algobase.h **** 	{
 564:/usr/include/c++/11/bits/stl_algobase.h **** 	  while (true)
 565:/usr/include/c++/11/bits/stl_algobase.h **** 	    {
 566:/usr/include/c++/11/bits/stl_algobase.h **** 	      *__result = *__first;
 567:/usr/include/c++/11/bits/stl_algobase.h **** 	      ++__result;
 568:/usr/include/c++/11/bits/stl_algobase.h **** 	      if (--__n > 0)
 569:/usr/include/c++/11/bits/stl_algobase.h **** 		++__first;
 570:/usr/include/c++/11/bits/stl_algobase.h **** 	      else
 571:/usr/include/c++/11/bits/stl_algobase.h **** 		break;
 572:/usr/include/c++/11/bits/stl_algobase.h **** 	    }
 573:/usr/include/c++/11/bits/stl_algobase.h **** 	}
 574:/usr/include/c++/11/bits/stl_algobase.h ****       return __result;
 575:/usr/include/c++/11/bits/stl_algobase.h ****     }
 576:/usr/include/c++/11/bits/stl_algobase.h **** 
 577:/usr/include/c++/11/bits/stl_algobase.h ****   template<typename _CharT, typename _Size>
 578:/usr/include/c++/11/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<
 579:/usr/include/c++/11/bits/stl_algobase.h ****       __is_char<_CharT>::__value, _CharT*>::__type
 580:/usr/include/c++/11/bits/stl_algobase.h ****     __copy_n_a(istreambuf_iterator<_CharT, char_traits<_CharT> >,
 581:/usr/include/c++/11/bits/stl_algobase.h **** 	       _Size, _CharT*, bool);
 582:/usr/include/c++/11/bits/stl_algobase.h **** 
 583:/usr/include/c++/11/bits/stl_algobase.h ****   template<typename _CharT, typename _Size>
 584:/usr/include/c++/11/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<
 585:/usr/include/c++/11/bits/stl_algobase.h ****       __is_char<_CharT>::__value,
 586:/usr/include/c++/11/bits/stl_algobase.h ****       _GLIBCXX_STD_C::_Deque_iterator<_CharT, _CharT&, _CharT*> >::__type
 587:/usr/include/c++/11/bits/stl_algobase.h ****     __copy_n_a(istreambuf_iterator<_CharT, char_traits<_CharT> >, _Size,
 588:/usr/include/c++/11/bits/stl_algobase.h **** 	       _GLIBCXX_STD_C::_Deque_iterator<_CharT, _CharT&, _CharT*>,
 589:/usr/include/c++/11/bits/stl_algobase.h **** 	       bool);
 590:/usr/include/c++/11/bits/stl_algobase.h **** 
 591:/usr/include/c++/11/bits/stl_algobase.h ****   /**
 592:/usr/include/c++/11/bits/stl_algobase.h ****    *  @brief Copies the range [first,last) into result.
 593:/usr/include/c++/11/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 594:/usr/include/c++/11/bits/stl_algobase.h ****    *  @param  __first  An input iterator.
 595:/usr/include/c++/11/bits/stl_algobase.h ****    *  @param  __last   An input iterator.
 596:/usr/include/c++/11/bits/stl_algobase.h ****    *  @param  __result An output iterator.
 597:/usr/include/c++/11/bits/stl_algobase.h ****    *  @return   result + (last - first)
 598:/usr/include/c++/11/bits/stl_algobase.h ****    *
 599:/usr/include/c++/11/bits/stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 600:/usr/include/c++/11/bits/stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 601:/usr/include/c++/11/bits/stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 602:/usr/include/c++/11/bits/stl_algobase.h ****    *  optimizations such as unrolling).  Result may not be contained within
 603:/usr/include/c++/11/bits/stl_algobase.h ****    *  [first,last); the copy_backward function should be used instead.
 604:/usr/include/c++/11/bits/stl_algobase.h ****    *
 605:/usr/include/c++/11/bits/stl_algobase.h ****    *  Note that the end of the output range is permitted to be contained
 606:/usr/include/c++/11/bits/stl_algobase.h ****    *  within [first,last).
 607:/usr/include/c++/11/bits/stl_algobase.h ****   */
 608:/usr/include/c++/11/bits/stl_algobase.h ****   template<typename _II, typename _OI>
 609:/usr/include/c++/11/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 610:/usr/include/c++/11/bits/stl_algobase.h ****     inline _OI
 611:/usr/include/c++/11/bits/stl_algobase.h ****     copy(_II __first, _II __last, _OI __result)
 612:/usr/include/c++/11/bits/stl_algobase.h ****     {
 613:/usr/include/c++/11/bits/stl_algobase.h ****       // concept requirements
 614:/usr/include/c++/11/bits/stl_algobase.h ****       __glibcxx_function_requires(_InputIteratorConcept<_II>)
 615:/usr/include/c++/11/bits/stl_algobase.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OI,
 616:/usr/include/c++/11/bits/stl_algobase.h **** 	    typename iterator_traits<_II>::value_type>)
 617:/usr/include/c++/11/bits/stl_algobase.h ****       __glibcxx_requires_can_increment_range(__first, __last, __result);
 618:/usr/include/c++/11/bits/stl_algobase.h **** 
 619:/usr/include/c++/11/bits/stl_algobase.h ****       return std::__copy_move_a<__is_move_iterator<_II>::__value>
 620:/usr/include/c++/11/bits/stl_algobase.h **** 	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 621:/usr/include/c++/11/bits/stl_algobase.h ****     }
 622:/usr/include/c++/11/bits/stl_algobase.h **** 
 623:/usr/include/c++/11/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 624:/usr/include/c++/11/bits/stl_algobase.h ****   /**
 625:/usr/include/c++/11/bits/stl_algobase.h ****    *  @brief Moves the range [first,last) into result.
 626:/usr/include/c++/11/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 627:/usr/include/c++/11/bits/stl_algobase.h ****    *  @param  __first  An input iterator.
 628:/usr/include/c++/11/bits/stl_algobase.h ****    *  @param  __last   An input iterator.
 629:/usr/include/c++/11/bits/stl_algobase.h ****    *  @param  __result An output iterator.
 630:/usr/include/c++/11/bits/stl_algobase.h ****    *  @return   result + (last - first)
 631:/usr/include/c++/11/bits/stl_algobase.h ****    *
 632:/usr/include/c++/11/bits/stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 633:/usr/include/c++/11/bits/stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 634:/usr/include/c++/11/bits/stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 635:/usr/include/c++/11/bits/stl_algobase.h ****    *  optimizations such as unrolling).  Result may not be contained within
 636:/usr/include/c++/11/bits/stl_algobase.h ****    *  [first,last); the move_backward function should be used instead.
 637:/usr/include/c++/11/bits/stl_algobase.h ****    *
 638:/usr/include/c++/11/bits/stl_algobase.h ****    *  Note that the end of the output range is permitted to be contained
 639:/usr/include/c++/11/bits/stl_algobase.h ****    *  within [first,last).
 640:/usr/include/c++/11/bits/stl_algobase.h ****   */
 641:/usr/include/c++/11/bits/stl_algobase.h ****   template<typename _II, typename _OI>
 642:/usr/include/c++/11/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 643:/usr/include/c++/11/bits/stl_algobase.h ****     inline _OI
 644:/usr/include/c++/11/bits/stl_algobase.h ****     move(_II __first, _II __last, _OI __result)
 645:/usr/include/c++/11/bits/stl_algobase.h ****     {
 646:/usr/include/c++/11/bits/stl_algobase.h ****       // concept requirements
 647:/usr/include/c++/11/bits/stl_algobase.h ****       __glibcxx_function_requires(_InputIteratorConcept<_II>)
 648:/usr/include/c++/11/bits/stl_algobase.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OI,
 649:/usr/include/c++/11/bits/stl_algobase.h **** 	    typename iterator_traits<_II>::value_type>)
 650:/usr/include/c++/11/bits/stl_algobase.h ****       __glibcxx_requires_can_increment_range(__first, __last, __result);
 651:/usr/include/c++/11/bits/stl_algobase.h **** 
 652:/usr/include/c++/11/bits/stl_algobase.h ****       return std::__copy_move_a<true>(std::__miter_base(__first),
 653:/usr/include/c++/11/bits/stl_algobase.h **** 				      std::__miter_base(__last), __result);
 654:/usr/include/c++/11/bits/stl_algobase.h ****     }
 655:/usr/include/c++/11/bits/stl_algobase.h **** 
 656:/usr/include/c++/11/bits/stl_algobase.h **** #define _GLIBCXX_MOVE3(_Tp, _Up, _Vp) std::move(_Tp, _Up, _Vp)
 657:/usr/include/c++/11/bits/stl_algobase.h **** #else
 658:/usr/include/c++/11/bits/stl_algobase.h **** #define _GLIBCXX_MOVE3(_Tp, _Up, _Vp) std::copy(_Tp, _Up, _Vp)
 659:/usr/include/c++/11/bits/stl_algobase.h **** #endif
 660:/usr/include/c++/11/bits/stl_algobase.h **** 
 661:/usr/include/c++/11/bits/stl_algobase.h ****   template<bool _IsMove, bool _IsSimple, typename _Category>
 662:/usr/include/c++/11/bits/stl_algobase.h ****     struct __copy_move_backward
 663:/usr/include/c++/11/bits/stl_algobase.h ****     {
 664:/usr/include/c++/11/bits/stl_algobase.h ****       template<typename _BI1, typename _BI2>
 665:/usr/include/c++/11/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 666:/usr/include/c++/11/bits/stl_algobase.h **** 	static _BI2
 667:/usr/include/c++/11/bits/stl_algobase.h **** 	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 668:/usr/include/c++/11/bits/stl_algobase.h **** 	{
 669:/usr/include/c++/11/bits/stl_algobase.h **** 	  while (__first != __last)
 670:/usr/include/c++/11/bits/stl_algobase.h **** 	    *--__result = *--__last;
 671:/usr/include/c++/11/bits/stl_algobase.h **** 	  return __result;
 672:/usr/include/c++/11/bits/stl_algobase.h **** 	}
 673:/usr/include/c++/11/bits/stl_algobase.h ****     };
 674:/usr/include/c++/11/bits/stl_algobase.h **** 
 675:/usr/include/c++/11/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 676:/usr/include/c++/11/bits/stl_algobase.h ****   template<typename _Category>
 677:/usr/include/c++/11/bits/stl_algobase.h ****     struct __copy_move_backward<true, false, _Category>
 678:/usr/include/c++/11/bits/stl_algobase.h ****     {
 679:/usr/include/c++/11/bits/stl_algobase.h ****       template<typename _BI1, typename _BI2>
 680:/usr/include/c++/11/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 681:/usr/include/c++/11/bits/stl_algobase.h **** 	static _BI2
 682:/usr/include/c++/11/bits/stl_algobase.h **** 	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 683:/usr/include/c++/11/bits/stl_algobase.h **** 	{
 684:/usr/include/c++/11/bits/stl_algobase.h **** 	  while (__first != __last)
 685:/usr/include/c++/11/bits/stl_algobase.h **** 	    *--__result = std::move(*--__last);
 686:/usr/include/c++/11/bits/stl_algobase.h **** 	  return __result;
 687:/usr/include/c++/11/bits/stl_algobase.h **** 	}
 688:/usr/include/c++/11/bits/stl_algobase.h ****     };
 689:/usr/include/c++/11/bits/stl_algobase.h **** #endif
 690:/usr/include/c++/11/bits/stl_algobase.h **** 
 691:/usr/include/c++/11/bits/stl_algobase.h ****   template<>
 692:/usr/include/c++/11/bits/stl_algobase.h ****     struct __copy_move_backward<false, false, random_access_iterator_tag>
 693:/usr/include/c++/11/bits/stl_algobase.h ****     {
 694:/usr/include/c++/11/bits/stl_algobase.h ****       template<typename _BI1, typename _BI2>
 695:/usr/include/c++/11/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 696:/usr/include/c++/11/bits/stl_algobase.h **** 	static _BI2
 697:/usr/include/c++/11/bits/stl_algobase.h **** 	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 698:/usr/include/c++/11/bits/stl_algobase.h **** 	{
 699:/usr/include/c++/11/bits/stl_algobase.h **** 	  typename iterator_traits<_BI1>::difference_type
 700:/usr/include/c++/11/bits/stl_algobase.h **** 	    __n = __last - __first;
 701:/usr/include/c++/11/bits/stl_algobase.h **** 	  for (; __n > 0; --__n)
 702:/usr/include/c++/11/bits/stl_algobase.h **** 	    *--__result = *--__last;
 703:/usr/include/c++/11/bits/stl_algobase.h **** 	  return __result;
 704:/usr/include/c++/11/bits/stl_algobase.h **** 	}
 705:/usr/include/c++/11/bits/stl_algobase.h ****     };
 706:/usr/include/c++/11/bits/stl_algobase.h **** 
 707:/usr/include/c++/11/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 708:/usr/include/c++/11/bits/stl_algobase.h ****   template<>
 709:/usr/include/c++/11/bits/stl_algobase.h ****     struct __copy_move_backward<true, false, random_access_iterator_tag>
 710:/usr/include/c++/11/bits/stl_algobase.h ****     {
 711:/usr/include/c++/11/bits/stl_algobase.h ****       template<typename _BI1, typename _BI2>
 712:/usr/include/c++/11/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 713:/usr/include/c++/11/bits/stl_algobase.h **** 	static _BI2
 714:/usr/include/c++/11/bits/stl_algobase.h **** 	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 715:/usr/include/c++/11/bits/stl_algobase.h **** 	{
 716:/usr/include/c++/11/bits/stl_algobase.h **** 	  typename iterator_traits<_BI1>::difference_type
 717:/usr/include/c++/11/bits/stl_algobase.h **** 	    __n = __last - __first;
 718:/usr/include/c++/11/bits/stl_algobase.h **** 	  for (; __n > 0; --__n)
 719:/usr/include/c++/11/bits/stl_algobase.h **** 	    *--__result = std::move(*--__last);
 720:/usr/include/c++/11/bits/stl_algobase.h **** 	  return __result;
 721:/usr/include/c++/11/bits/stl_algobase.h **** 	}
 722:/usr/include/c++/11/bits/stl_algobase.h ****     };
 723:/usr/include/c++/11/bits/stl_algobase.h **** #endif
 724:/usr/include/c++/11/bits/stl_algobase.h **** 
 725:/usr/include/c++/11/bits/stl_algobase.h ****   template<bool _IsMove>
 726:/usr/include/c++/11/bits/stl_algobase.h ****     struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>
 727:/usr/include/c++/11/bits/stl_algobase.h ****     {
 728:/usr/include/c++/11/bits/stl_algobase.h ****       template<typename _Tp>
 729:/usr/include/c++/11/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 730:/usr/include/c++/11/bits/stl_algobase.h **** 	static _Tp*
 731:/usr/include/c++/11/bits/stl_algobase.h **** 	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 732:/usr/include/c++/11/bits/stl_algobase.h **** 	{
 733:/usr/include/c++/11/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 734:/usr/include/c++/11/bits/stl_algobase.h **** 	  using __assignable = conditional<_IsMove,
 735:/usr/include/c++/11/bits/stl_algobase.h **** 					   is_move_assignable<_Tp>,
 736:/usr/include/c++/11/bits/stl_algobase.h **** 					   is_copy_assignable<_Tp>>;
 737:/usr/include/c++/11/bits/stl_algobase.h **** 	  // trivial types can have deleted assignment
 738:/usr/include/c++/11/bits/stl_algobase.h **** 	  static_assert( __assignable::type::value, "type is not assignable" );
 739:/usr/include/c++/11/bits/stl_algobase.h **** #endif
 740:/usr/include/c++/11/bits/stl_algobase.h **** 	  const ptrdiff_t _Num = __last - __first;
 741:/usr/include/c++/11/bits/stl_algobase.h **** 	  if (_Num)
 742:/usr/include/c++/11/bits/stl_algobase.h **** 	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 743:/usr/include/c++/11/bits/stl_algobase.h **** 	  return __result - _Num;
 744:/usr/include/c++/11/bits/stl_algobase.h **** 	}
 745:/usr/include/c++/11/bits/stl_algobase.h ****     };
 746:/usr/include/c++/11/bits/stl_algobase.h **** 
 747:/usr/include/c++/11/bits/stl_algobase.h ****   template<bool _IsMove, typename _BI1, typename _BI2>
 748:/usr/include/c++/11/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 749:/usr/include/c++/11/bits/stl_algobase.h ****     inline _BI2
 750:/usr/include/c++/11/bits/stl_algobase.h ****     __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 751:/usr/include/c++/11/bits/stl_algobase.h ****     {
 752:/usr/include/c++/11/bits/stl_algobase.h ****       typedef typename iterator_traits<_BI1>::iterator_category _Category;
 753:/usr/include/c++/11/bits/stl_algobase.h **** #ifdef __cpp_lib_is_constant_evaluated
 754:/usr/include/c++/11/bits/stl_algobase.h ****       if (std::is_constant_evaluated())
 755:/usr/include/c++/11/bits/stl_algobase.h **** 	return std::__copy_move_backward<_IsMove, false, _Category>::
 756:/usr/include/c++/11/bits/stl_algobase.h **** 	  __copy_move_b(__first, __last, __result);
 757:/usr/include/c++/11/bits/stl_algobase.h **** #endif
 758:/usr/include/c++/11/bits/stl_algobase.h ****       return std::__copy_move_backward<_IsMove,
 759:/usr/include/c++/11/bits/stl_algobase.h **** 				       __memcpyable<_BI2, _BI1>::__value,
 760:/usr/include/c++/11/bits/stl_algobase.h **** 				       _Category>::__copy_move_b(__first,
 761:/usr/include/c++/11/bits/stl_algobase.h **** 								 __last,
 762:/usr/include/c++/11/bits/stl_algobase.h **** 								 __result);
 763:/usr/include/c++/11/bits/stl_algobase.h ****     }
 764:/usr/include/c++/11/bits/stl_algobase.h **** 
 765:/usr/include/c++/11/bits/stl_algobase.h ****   template<bool _IsMove, typename _BI1, typename _BI2>
 766:/usr/include/c++/11/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 767:/usr/include/c++/11/bits/stl_algobase.h ****     inline _BI2
 768:/usr/include/c++/11/bits/stl_algobase.h ****     __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 769:/usr/include/c++/11/bits/stl_algobase.h ****     { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 770:/usr/include/c++/11/bits/stl_algobase.h **** 
 771:/usr/include/c++/11/bits/stl_algobase.h ****   template<bool _IsMove,
 772:/usr/include/c++/11/bits/stl_algobase.h **** 	   typename _Tp, typename _Ref, typename _Ptr, typename _OI>
 773:/usr/include/c++/11/bits/stl_algobase.h ****     _OI
 774:/usr/include/c++/11/bits/stl_algobase.h ****     __copy_move_backward_a1(_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,
 775:/usr/include/c++/11/bits/stl_algobase.h **** 			    _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,
 776:/usr/include/c++/11/bits/stl_algobase.h **** 			    _OI);
 777:/usr/include/c++/11/bits/stl_algobase.h **** 
 778:/usr/include/c++/11/bits/stl_algobase.h ****   template<bool _IsMove,
 779:/usr/include/c++/11/bits/stl_algobase.h **** 	   typename _ITp, typename _IRef, typename _IPtr, typename _OTp>
 780:/usr/include/c++/11/bits/stl_algobase.h ****     _GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*>
 781:/usr/include/c++/11/bits/stl_algobase.h ****     __copy_move_backward_a1(
 782:/usr/include/c++/11/bits/stl_algobase.h **** 			_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr>,
 783:/usr/include/c++/11/bits/stl_algobase.h **** 			_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr>,
 784:/usr/include/c++/11/bits/stl_algobase.h **** 			_GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*>);
 785:/usr/include/c++/11/bits/stl_algobase.h **** 
 786:/usr/include/c++/11/bits/stl_algobase.h ****   template<bool _IsMove, typename _II, typename _Tp>
 787:/usr/include/c++/11/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<
 788:/usr/include/c++/11/bits/stl_algobase.h ****       __is_random_access_iter<_II>::__value,
 789:/usr/include/c++/11/bits/stl_algobase.h ****       _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
 790:/usr/include/c++/11/bits/stl_algobase.h ****     __copy_move_backward_a1(_II, _II,
 791:/usr/include/c++/11/bits/stl_algobase.h **** 			    _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>);
 792:/usr/include/c++/11/bits/stl_algobase.h **** 
 793:/usr/include/c++/11/bits/stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 794:/usr/include/c++/11/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 795:/usr/include/c++/11/bits/stl_algobase.h ****     inline _OI
 796:/usr/include/c++/11/bits/stl_algobase.h ****     __copy_move_backward_a(_II __first, _II __last, _OI __result)
 797:/usr/include/c++/11/bits/stl_algobase.h ****     {
 798:/usr/include/c++/11/bits/stl_algobase.h ****       return std::__niter_wrap(__result,
 799:/usr/include/c++/11/bits/stl_algobase.h **** 		std::__copy_move_backward_a1<_IsMove>
 800:/usr/include/c++/11/bits/stl_algobase.h **** 		  (std::__niter_base(__first), std::__niter_base(__last),
 801:/usr/include/c++/11/bits/stl_algobase.h **** 		   std::__niter_base(__result)));
 802:/usr/include/c++/11/bits/stl_algobase.h ****     }
 803:/usr/include/c++/11/bits/stl_algobase.h **** 
 804:/usr/include/c++/11/bits/stl_algobase.h ****   template<bool _IsMove,
 805:/usr/include/c++/11/bits/stl_algobase.h **** 	   typename _Ite, typename _Seq, typename _Cat, typename _OI>
 806:/usr/include/c++/11/bits/stl_algobase.h ****     _OI
 807:/usr/include/c++/11/bits/stl_algobase.h ****     __copy_move_backward_a(
 808:/usr/include/c++/11/bits/stl_algobase.h **** 		const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
 809:/usr/include/c++/11/bits/stl_algobase.h **** 		const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
 810:/usr/include/c++/11/bits/stl_algobase.h **** 		_OI);
 811:/usr/include/c++/11/bits/stl_algobase.h **** 
 812:/usr/include/c++/11/bits/stl_algobase.h ****   template<bool _IsMove,
 813:/usr/include/c++/11/bits/stl_algobase.h **** 	   typename _II, typename _Ite, typename _Seq, typename _Cat>
 814:/usr/include/c++/11/bits/stl_algobase.h ****     __gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>
 815:/usr/include/c++/11/bits/stl_algobase.h ****     __copy_move_backward_a(_II, _II,
 816:/usr/include/c++/11/bits/stl_algobase.h **** 		const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&);
 817:/usr/include/c++/11/bits/stl_algobase.h **** 
 818:/usr/include/c++/11/bits/stl_algobase.h ****   template<bool _IsMove,
 819:/usr/include/c++/11/bits/stl_algobase.h **** 	   typename _IIte, typename _ISeq, typename _ICat,
 820:/usr/include/c++/11/bits/stl_algobase.h **** 	   typename _OIte, typename _OSeq, typename _OCat>
 821:/usr/include/c++/11/bits/stl_algobase.h ****     ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>
 822:/usr/include/c++/11/bits/stl_algobase.h ****     __copy_move_backward_a(
 823:/usr/include/c++/11/bits/stl_algobase.h **** 		const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
 824:/usr/include/c++/11/bits/stl_algobase.h **** 		const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
 825:/usr/include/c++/11/bits/stl_algobase.h **** 		const ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>&);
 826:/usr/include/c++/11/bits/stl_algobase.h **** 
 827:/usr/include/c++/11/bits/stl_algobase.h ****   /**
 828:/usr/include/c++/11/bits/stl_algobase.h ****    *  @brief Copies the range [first,last) into result.
 829:/usr/include/c++/11/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 830:/usr/include/c++/11/bits/stl_algobase.h ****    *  @param  __first  A bidirectional iterator.
 831:/usr/include/c++/11/bits/stl_algobase.h ****    *  @param  __last   A bidirectional iterator.
 832:/usr/include/c++/11/bits/stl_algobase.h ****    *  @param  __result A bidirectional iterator.
 833:/usr/include/c++/11/bits/stl_algobase.h ****    *  @return   result - (last - first)
 834:/usr/include/c++/11/bits/stl_algobase.h ****    *
 835:/usr/include/c++/11/bits/stl_algobase.h ****    *  The function has the same effect as copy, but starts at the end of the
 836:/usr/include/c++/11/bits/stl_algobase.h ****    *  range and works its way to the start, returning the start of the result.
 837:/usr/include/c++/11/bits/stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 838:/usr/include/c++/11/bits/stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 839:/usr/include/c++/11/bits/stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 840:/usr/include/c++/11/bits/stl_algobase.h ****    *  optimizations such as unrolling).
 841:/usr/include/c++/11/bits/stl_algobase.h ****    *
 842:/usr/include/c++/11/bits/stl_algobase.h ****    *  Result may not be in the range (first,last].  Use copy instead.  Note
 843:/usr/include/c++/11/bits/stl_algobase.h ****    *  that the start of the output range may overlap [first,last).
 844:/usr/include/c++/11/bits/stl_algobase.h ****   */
 845:/usr/include/c++/11/bits/stl_algobase.h ****   template<typename _BI1, typename _BI2>
 846:/usr/include/c++/11/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 847:/usr/include/c++/11/bits/stl_algobase.h ****     inline _BI2
 848:/usr/include/c++/11/bits/stl_algobase.h ****     copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 849:/usr/include/c++/11/bits/stl_algobase.h ****     {
 850:/usr/include/c++/11/bits/stl_algobase.h ****       // concept requirements
 851:/usr/include/c++/11/bits/stl_algobase.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<_BI1>)
 852:/usr/include/c++/11/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<_BI2>)
 853:/usr/include/c++/11/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<
 854:/usr/include/c++/11/bits/stl_algobase.h **** 	    typename iterator_traits<_BI1>::value_type,
 855:/usr/include/c++/11/bits/stl_algobase.h **** 	    typename iterator_traits<_BI2>::value_type>)
 856:/usr/include/c++/11/bits/stl_algobase.h ****       __glibcxx_requires_can_decrement_range(__first, __last, __result);
 857:/usr/include/c++/11/bits/stl_algobase.h **** 
 858:/usr/include/c++/11/bits/stl_algobase.h ****       return std::__copy_move_backward_a<__is_move_iterator<_BI1>::__value>
 859:/usr/include/c++/11/bits/stl_algobase.h **** 	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 860:/usr/include/c++/11/bits/stl_algobase.h ****     }
 861:/usr/include/c++/11/bits/stl_algobase.h **** 
 862:/usr/include/c++/11/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 863:/usr/include/c++/11/bits/stl_algobase.h ****   /**
 864:/usr/include/c++/11/bits/stl_algobase.h ****    *  @brief Moves the range [first,last) into result.
 865:/usr/include/c++/11/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 866:/usr/include/c++/11/bits/stl_algobase.h ****    *  @param  __first  A bidirectional iterator.
 867:/usr/include/c++/11/bits/stl_algobase.h ****    *  @param  __last   A bidirectional iterator.
 868:/usr/include/c++/11/bits/stl_algobase.h ****    *  @param  __result A bidirectional iterator.
 869:/usr/include/c++/11/bits/stl_algobase.h ****    *  @return   result - (last - first)
 870:/usr/include/c++/11/bits/stl_algobase.h ****    *
 871:/usr/include/c++/11/bits/stl_algobase.h ****    *  The function has the same effect as move, but starts at the end of the
 872:/usr/include/c++/11/bits/stl_algobase.h ****    *  range and works its way to the start, returning the start of the result.
 873:/usr/include/c++/11/bits/stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 874:/usr/include/c++/11/bits/stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 875:/usr/include/c++/11/bits/stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 876:/usr/include/c++/11/bits/stl_algobase.h ****    *  optimizations such as unrolling).
 877:/usr/include/c++/11/bits/stl_algobase.h ****    *
 878:/usr/include/c++/11/bits/stl_algobase.h ****    *  Result may not be in the range (first,last].  Use move instead.  Note
 879:/usr/include/c++/11/bits/stl_algobase.h ****    *  that the start of the output range may overlap [first,last).
 880:/usr/include/c++/11/bits/stl_algobase.h ****   */
 881:/usr/include/c++/11/bits/stl_algobase.h ****   template<typename _BI1, typename _BI2>
 882:/usr/include/c++/11/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 883:/usr/include/c++/11/bits/stl_algobase.h ****     inline _BI2
 884:/usr/include/c++/11/bits/stl_algobase.h ****     move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 885:/usr/include/c++/11/bits/stl_algobase.h ****     {
 886:/usr/include/c++/11/bits/stl_algobase.h ****       // concept requirements
 887:/usr/include/c++/11/bits/stl_algobase.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<_BI1>)
 888:/usr/include/c++/11/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<_BI2>)
 889:/usr/include/c++/11/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<
 890:/usr/include/c++/11/bits/stl_algobase.h **** 	    typename iterator_traits<_BI1>::value_type,
 891:/usr/include/c++/11/bits/stl_algobase.h **** 	    typename iterator_traits<_BI2>::value_type>)
 892:/usr/include/c++/11/bits/stl_algobase.h ****       __glibcxx_requires_can_decrement_range(__first, __last, __result);
 893:/usr/include/c++/11/bits/stl_algobase.h **** 
 894:/usr/include/c++/11/bits/stl_algobase.h ****       return std::__copy_move_backward_a<true>(std::__miter_base(__first),
 895:/usr/include/c++/11/bits/stl_algobase.h **** 					       std::__miter_base(__last),
 896:/usr/include/c++/11/bits/stl_algobase.h **** 					       __result);
 897:/usr/include/c++/11/bits/stl_algobase.h ****     }
 898:/usr/include/c++/11/bits/stl_algobase.h **** 
 899:/usr/include/c++/11/bits/stl_algobase.h **** #define _GLIBCXX_MOVE_BACKWARD3(_Tp, _Up, _Vp) std::move_backward(_Tp, _Up, _Vp)
 900:/usr/include/c++/11/bits/stl_algobase.h **** #else
 901:/usr/include/c++/11/bits/stl_algobase.h **** #define _GLIBCXX_MOVE_BACKWARD3(_Tp, _Up, _Vp) std::copy_backward(_Tp, _Up, _Vp)
 902:/usr/include/c++/11/bits/stl_algobase.h **** #endif
 903:/usr/include/c++/11/bits/stl_algobase.h **** 
 904:/usr/include/c++/11/bits/stl_algobase.h ****   template<typename _ForwardIterator, typename _Tp>
 905:/usr/include/c++/11/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 906:/usr/include/c++/11/bits/stl_algobase.h ****     inline typename
 907:/usr/include/c++/11/bits/stl_algobase.h ****     __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, void>::__type
 908:/usr/include/c++/11/bits/stl_algobase.h ****     __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 909:/usr/include/c++/11/bits/stl_algobase.h **** 	      const _Tp& __value)
 910:/usr/include/c++/11/bits/stl_algobase.h ****     {
 911:/usr/include/c++/11/bits/stl_algobase.h ****       for (; __first != __last; ++__first)
 912:/usr/include/c++/11/bits/stl_algobase.h **** 	*__first = __value;
 913:/usr/include/c++/11/bits/stl_algobase.h ****     }
 914:/usr/include/c++/11/bits/stl_algobase.h **** 
 915:/usr/include/c++/11/bits/stl_algobase.h ****   template<typename _ForwardIterator, typename _Tp>
 916:/usr/include/c++/11/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 917:/usr/include/c++/11/bits/stl_algobase.h ****     inline typename
 918:/usr/include/c++/11/bits/stl_algobase.h ****     __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
 919:/usr/include/c++/11/bits/stl_algobase.h ****     __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 920:/usr/include/c++/11/bits/stl_algobase.h **** 	      const _Tp& __value)
 921:/usr/include/c++/11/bits/stl_algobase.h ****     {
 922:/usr/include/c++/11/bits/stl_algobase.h ****       const _Tp __tmp = __value;
 923:/usr/include/c++/11/bits/stl_algobase.h ****       for (; __first != __last; ++__first)
 924:/usr/include/c++/11/bits/stl_algobase.h **** 	*__first = __tmp;
 925:/usr/include/c++/11/bits/stl_algobase.h ****     }
 926:/usr/include/c++/11/bits/stl_algobase.h **** 
 927:/usr/include/c++/11/bits/stl_algobase.h ****   // Specialization: for char types we can use memset.
 928:/usr/include/c++/11/bits/stl_algobase.h ****   template<typename _Tp>
 929:/usr/include/c++/11/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 930:/usr/include/c++/11/bits/stl_algobase.h ****     inline typename
 931:/usr/include/c++/11/bits/stl_algobase.h ****     __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, void>::__type
 932:/usr/include/c++/11/bits/stl_algobase.h ****     __fill_a1(_Tp* __first, _Tp* __last, const _Tp& __c)
 933:/usr/include/c++/11/bits/stl_algobase.h ****     {
 934:/usr/include/c++/11/bits/stl_algobase.h ****       const _Tp __tmp = __c;
 935:/usr/include/c++/11/bits/stl_algobase.h **** #if __cpp_lib_is_constant_evaluated
 936:/usr/include/c++/11/bits/stl_algobase.h ****       if (std::is_constant_evaluated())
 937:/usr/include/c++/11/bits/stl_algobase.h **** 	{
 938:/usr/include/c++/11/bits/stl_algobase.h **** 	  for (; __first != __last; ++__first)
 939:/usr/include/c++/11/bits/stl_algobase.h **** 	    *__first = __tmp;
 940:/usr/include/c++/11/bits/stl_algobase.h **** 	  return;
 941:/usr/include/c++/11/bits/stl_algobase.h **** 	}
 942:/usr/include/c++/11/bits/stl_algobase.h **** #endif
 943:/usr/include/c++/11/bits/stl_algobase.h ****       if (const size_t __len = __last - __first)
 944:/usr/include/c++/11/bits/stl_algobase.h **** 	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 945:/usr/include/c++/11/bits/stl_algobase.h ****     }
 946:/usr/include/c++/11/bits/stl_algobase.h **** 
 947:/usr/include/c++/11/bits/stl_algobase.h ****   template<typename _Ite, typename _Cont, typename _Tp>
 948:/usr/include/c++/11/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 949:/usr/include/c++/11/bits/stl_algobase.h ****     inline void
 950:/usr/include/c++/11/bits/stl_algobase.h ****     __fill_a1(::__gnu_cxx::__normal_iterator<_Ite, _Cont> __first,
 951:/usr/include/c++/11/bits/stl_algobase.h **** 	      ::__gnu_cxx::__normal_iterator<_Ite, _Cont> __last,
 952:/usr/include/c++/11/bits/stl_algobase.h **** 	      const _Tp& __value)
 953:/usr/include/c++/11/bits/stl_algobase.h ****     { std::__fill_a1(__first.base(), __last.base(), __value); }
 954:/usr/include/c++/11/bits/stl_algobase.h **** 
 955:/usr/include/c++/11/bits/stl_algobase.h ****   template<typename _Tp, typename _VTp>
 956:/usr/include/c++/11/bits/stl_algobase.h ****     void
 957:/usr/include/c++/11/bits/stl_algobase.h ****     __fill_a1(const _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>&,
 958:/usr/include/c++/11/bits/stl_algobase.h **** 	      const _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>&,
 959:/usr/include/c++/11/bits/stl_algobase.h **** 	      const _VTp&);
 960:/usr/include/c++/11/bits/stl_algobase.h **** 
 961:/usr/include/c++/11/bits/stl_algobase.h ****   void
 962:/usr/include/c++/11/bits/stl_algobase.h ****   __fill_a1(_GLIBCXX_STD_C::_Bit_iterator, _GLIBCXX_STD_C::_Bit_iterator,
 963:/usr/include/c++/11/bits/stl_algobase.h **** 	    const bool&);
 964:/usr/include/c++/11/bits/stl_algobase.h **** 
 965:/usr/include/c++/11/bits/stl_algobase.h ****   template<typename _FIte, typename _Tp>
 966:/usr/include/c++/11/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 967:/usr/include/c++/11/bits/stl_algobase.h ****     inline void
 968:/usr/include/c++/11/bits/stl_algobase.h ****     __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 969:/usr/include/c++/11/bits/stl_algobase.h ****     { std::__fill_a1(__first, __last, __value); }
 970:/usr/include/c++/11/bits/stl_algobase.h **** 
 971:/usr/include/c++/11/bits/stl_algobase.h ****   template<typename _Ite, typename _Seq, typename _Cat, typename _Tp>
 972:/usr/include/c++/11/bits/stl_algobase.h ****     void
 973:/usr/include/c++/11/bits/stl_algobase.h ****     __fill_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
 974:/usr/include/c++/11/bits/stl_algobase.h **** 	     const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
 975:/usr/include/c++/11/bits/stl_algobase.h **** 	     const _Tp&);
 976:/usr/include/c++/11/bits/stl_algobase.h **** 
 977:/usr/include/c++/11/bits/stl_algobase.h ****   /**
 978:/usr/include/c++/11/bits/stl_algobase.h ****    *  @brief Fills the range [first,last) with copies of value.
 979:/usr/include/c++/11/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 980:/usr/include/c++/11/bits/stl_algobase.h ****    *  @param  __first  A forward iterator.
 981:/usr/include/c++/11/bits/stl_algobase.h ****    *  @param  __last   A forward iterator.
 982:/usr/include/c++/11/bits/stl_algobase.h ****    *  @param  __value  A reference-to-const of arbitrary type.
 983:/usr/include/c++/11/bits/stl_algobase.h ****    *  @return   Nothing.
 984:/usr/include/c++/11/bits/stl_algobase.h ****    *
 985:/usr/include/c++/11/bits/stl_algobase.h ****    *  This function fills a range with copies of the same value.  For char
 986:/usr/include/c++/11/bits/stl_algobase.h ****    *  types filling contiguous areas of memory, this becomes an inline call
 987:/usr/include/c++/11/bits/stl_algobase.h ****    *  to @c memset or @c wmemset.
 988:/usr/include/c++/11/bits/stl_algobase.h ****   */
 989:/usr/include/c++/11/bits/stl_algobase.h ****   template<typename _ForwardIterator, typename _Tp>
 990:/usr/include/c++/11/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 991:/usr/include/c++/11/bits/stl_algobase.h ****     inline void
 992:/usr/include/c++/11/bits/stl_algobase.h ****     fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
 993:/usr/include/c++/11/bits/stl_algobase.h ****     {
 994:/usr/include/c++/11/bits/stl_algobase.h ****       // concept requirements
 995:/usr/include/c++/11/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 996:/usr/include/c++/11/bits/stl_algobase.h **** 				  _ForwardIterator>)
 997:/usr/include/c++/11/bits/stl_algobase.h ****       __glibcxx_requires_valid_range(__first, __last);
 998:/usr/include/c++/11/bits/stl_algobase.h **** 
 999:/usr/include/c++/11/bits/stl_algobase.h ****       std::__fill_a(__first, __last, __value);
1000:/usr/include/c++/11/bits/stl_algobase.h ****     }
1001:/usr/include/c++/11/bits/stl_algobase.h **** 
1002:/usr/include/c++/11/bits/stl_algobase.h ****   // Used by fill_n, generate_n, etc. to convert _Size to an integral type:
1003:/usr/include/c++/11/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR int
1004:/usr/include/c++/11/bits/stl_algobase.h ****   __size_to_integer(int __n) { return __n; }
1005:/usr/include/c++/11/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned
1006:/usr/include/c++/11/bits/stl_algobase.h ****   __size_to_integer(unsigned __n) { return __n; }
1007:/usr/include/c++/11/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long
1008:/usr/include/c++/11/bits/stl_algobase.h ****   __size_to_integer(long __n) { return __n; }
1009:/usr/include/c++/11/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned long
1010:/usr/include/c++/11/bits/stl_algobase.h ****   __size_to_integer(unsigned long __n) { return __n; }
  37              		.loc 2 1010 40
  38              		.cfi_startproc
  39 0000 F30F1EFA 		endbr64
  40 0004 55       		pushq	%rbp
  41              		.cfi_def_cfa_offset 16
  42              		.cfi_offset 6, -16
  43 0005 4889E5   		movq	%rsp, %rbp
  44              		.cfi_def_cfa_register 6
  45 0008 48897DF8 		movq	%rdi, -8(%rbp)
  46              		.loc 2 1010 49
  47 000c 488B45F8 		movq	-8(%rbp), %rax
  48              		.loc 2 1010 54
  49 0010 5D       		popq	%rbp
  50              		.cfi_def_cfa 7, 8
  51 0011 C3       		ret
  52              		.cfi_endproc
  53              	.LFE217:
  55              		.section	.text._ZN8UnitTest15MemoryOutStreamC1Ev,"axG",@progbits,_ZN8UnitTest15MemoryOutStreamC1Ev
  56              		.align 2
  57              		.weak	_ZN8UnitTest15MemoryOutStreamC1Ev
  59              	_ZN8UnitTest15MemoryOutStreamC1Ev:
  60              	.LFB1129:
  61              		.file 3 "../MemoryOutStream.h"
   1:../MemoryOutStream.h **** #ifndef UNITTEST_MEMORYOUTSTREAM_H
   2:../MemoryOutStream.h **** #define UNITTEST_MEMORYOUTSTREAM_H
   3:../MemoryOutStream.h **** 
   4:../MemoryOutStream.h **** #include "Config.h"
   5:../MemoryOutStream.h **** 
   6:../MemoryOutStream.h **** #ifndef UNITTEST_USE_CUSTOM_STREAMS
   7:../MemoryOutStream.h **** 
   8:../MemoryOutStream.h **** #include <sstream>
   9:../MemoryOutStream.h **** 
  10:../MemoryOutStream.h **** namespace UnitTest
  11:../MemoryOutStream.h **** {
  12:../MemoryOutStream.h **** 
  13:../MemoryOutStream.h **** class MemoryOutStream : public std::ostringstream
  14:../MemoryOutStream.h **** {
  15:../MemoryOutStream.h **** public:
  16:../MemoryOutStream.h ****     MemoryOutStream() {}
  62              		.loc 3 16 5
  63              		.cfi_startproc
  64              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
  65              		.cfi_lsda 0x1b,.LLSDA1129
  66 0000 F30F1EFA 		endbr64
  67 0004 55       		pushq	%rbp
  68              		.cfi_def_cfa_offset 16
  69              		.cfi_offset 6, -16
  70 0005 4889E5   		movq	%rsp, %rbp
  71              		.cfi_def_cfa_register 6
  72 0008 53       		pushq	%rbx
  73 0009 4883EC18 		subq	$24, %rsp
  74              		.cfi_offset 3, -24
  75 000d 48897DE8 		movq	%rdi, -24(%rbp)
  76              	.LBB2:
  77              		.loc 3 16 23
  78 0011 488B45E8 		movq	-24(%rbp), %rax
  79 0015 48059000 		addq	$144, %rax
  79      0000
  80 001b 4889C7   		movq	%rax, %rdi
  81              	.LEHB0:
  82 001e E8000000 		call	_ZNSt9basic_iosIcSt11char_traitsIcEEC2Ev@PLT
  82      00
  83              	.LEHE0:
  84 0023 488B45E8 		movq	-24(%rbp), %rax
  85 0027 488D1500 		leaq	8+_ZTTN8UnitTest15MemoryOutStreamE(%rip), %rdx
  85      000000
  86 002e 4889D6   		movq	%rdx, %rsi
  87 0031 4889C7   		movq	%rax, %rdi
  88              	.LEHB1:
  89 0034 E8000000 		call	_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEC2Ev@PLT
  89      00
  90              	.LEHE1:
  91              		.loc 3 16 23 is_stmt 0 discriminator 2
  92 0039 488D1500 		leaq	24+_ZTVN8UnitTest15MemoryOutStreamE(%rip), %rdx
  92      000000
  93 0040 488B45E8 		movq	-24(%rbp), %rax
  94 0044 488910   		movq	%rdx, (%rax)
  95 0047 488B45E8 		movq	-24(%rbp), %rax
  96 004b 48059000 		addq	$144, %rax
  96      0000
  97 0051 488D1500 		leaq	64+_ZTVN8UnitTest15MemoryOutStreamE(%rip), %rdx
  97      000000
  98 0058 488910   		movq	%rdx, (%rax)
  99 005b 488B45E8 		movq	-24(%rbp), %rax
 100 005f 4883C070 		addq	$112, %rax
 101 0063 4889C7   		movq	%rax, %rdi
 102              	.LEHB2:
 103 0066 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev@PLT
 103      00
 104              	.LEHE2:
 105              	.LBE2:
 106              		.loc 3 16 24 is_stmt 1
 107 006b EB43     		jmp	.L10
 108              	.L9:
 109 006d F30F1EFA 		endbr64
 110              	.LBB3:
 111 0071 4889C3   		movq	%rax, %rbx
 112 0074 488B45E8 		movq	-24(%rbp), %rax
 113 0078 488D1500 		leaq	8+_ZTTN8UnitTest15MemoryOutStreamE(%rip), %rdx
 113      000000
 114 007f 4889D6   		movq	%rdx, %rsi
 115 0082 4889C7   		movq	%rax, %rdi
 116 0085 E8000000 		call	_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEED2Ev@PLT
 116      00
 117 008a EB07     		jmp	.L7
 118              	.L8:
 119 008c F30F1EFA 		endbr64
 120 0090 4889C3   		movq	%rax, %rbx
 121              	.L7:
 122              		.loc 3 16 24 is_stmt 0 discriminator 1
 123 0093 488B45E8 		movq	-24(%rbp), %rax
 124 0097 48059000 		addq	$144, %rax
 124      0000
 125 009d 4889C7   		movq	%rax, %rdi
 126 00a0 E8000000 		call	_ZNSt9basic_iosIcSt11char_traitsIcEED2Ev@PLT
 126      00
 127 00a5 4889D8   		movq	%rbx, %rax
 128 00a8 4889C7   		movq	%rax, %rdi
 129              	.LEHB3:
 130 00ab E8000000 		call	_Unwind_Resume@PLT
 130      00
 131              	.LEHE3:
 132              	.L10:
 133              	.LBE3:
 134              		.loc 3 16 24
 135 00b0 488B5DF8 		movq	-8(%rbp), %rbx
 136 00b4 C9       		leave
 137              		.cfi_def_cfa 7, 8
 138 00b5 C3       		ret
 139              		.cfi_endproc
 140              	.LFE1129:
 141              		.globl	__gxx_personality_v0
 142              		.section	.gcc_except_table._ZN8UnitTest15MemoryOutStreamC1Ev,"aG",@progbits,_ZN8UnitTest15MemoryOu
 143              	.LLSDA1129:
 144 0000 FF       		.byte	0xff
 145 0001 FF       		.byte	0xff
 146 0002 01       		.byte	0x1
 147 0003 12       		.uleb128 .LLSDACSE1129-.LLSDACSB1129
 148              	.LLSDACSB1129:
 149 0004 1E       		.uleb128 .LEHB0-.LFB1129
 150 0005 05       		.uleb128 .LEHE0-.LEHB0
 151 0006 00       		.uleb128 0
 152 0007 00       		.uleb128 0
 153 0008 34       		.uleb128 .LEHB1-.LFB1129
 154 0009 05       		.uleb128 .LEHE1-.LEHB1
 155 000a 8C01     		.uleb128 .L8-.LFB1129
 156 000c 00       		.uleb128 0
 157 000d 66       		.uleb128 .LEHB2-.LFB1129
 158 000e 05       		.uleb128 .LEHE2-.LEHB2
 159 000f 6D       		.uleb128 .L9-.LFB1129
 160 0010 00       		.uleb128 0
 161 0011 AB01     		.uleb128 .LEHB3-.LFB1129
 162 0013 05       		.uleb128 .LEHE3-.LEHB3
 163 0014 00       		.uleb128 0
 164 0015 00       		.uleb128 0
 165              	.LLSDACSE1129:
 166              		.section	.text._ZN8UnitTest15MemoryOutStreamC1Ev,"axG",@progbits,_ZN8UnitTest15MemoryOutStreamC1Ev
 168              		.section	.text._ZN17ScopedCurrentTestC2ERN8UnitTest11TestResultsEPKNS0_11TestDetailsE,"axG",@progb
 169              		.align 2
 170              		.weak	_ZN17ScopedCurrentTestC2ERN8UnitTest11TestResultsEPKNS0_11TestDetailsE
 172              	_ZN17ScopedCurrentTestC2ERN8UnitTest11TestResultsEPKNS0_11TestDetailsE:
 173              	.LFB1145:
 174              		.file 4 "ScopedCurrentTest.h"
   1:ScopedCurrentTest.h **** #ifndef UNITTEST_SCOPEDCURRENTTEST_H
   2:ScopedCurrentTest.h **** #define UNITTEST_SCOPEDCURRENTTEST_H
   3:ScopedCurrentTest.h **** 
   4:ScopedCurrentTest.h **** #include "../CurrentTest.h"
   5:ScopedCurrentTest.h **** #include <cstddef>
   6:ScopedCurrentTest.h **** 
   7:ScopedCurrentTest.h **** class ScopedCurrentTest
   8:ScopedCurrentTest.h **** {
   9:ScopedCurrentTest.h **** public:
  10:ScopedCurrentTest.h **** 	ScopedCurrentTest()
  11:ScopedCurrentTest.h **** 		: m_oldTestResults(UnitTest::CurrentTest::Results())
  12:ScopedCurrentTest.h **** 		, m_oldTestDetails(UnitTest::CurrentTest::Details())
  13:ScopedCurrentTest.h **** 	{
  14:ScopedCurrentTest.h **** 	}
  15:ScopedCurrentTest.h **** 
  16:ScopedCurrentTest.h **** 	explicit ScopedCurrentTest(UnitTest::TestResults& newResults, const UnitTest::TestDetails* newDeta
 175              		.loc 4 16 11 is_stmt 1
 176              		.cfi_startproc
 177 0000 F30F1EFA 		endbr64
 178 0004 55       		pushq	%rbp
 179              		.cfi_def_cfa_offset 16
 180              		.cfi_offset 6, -16
 181 0005 4889E5   		movq	%rsp, %rbp
 182              		.cfi_def_cfa_register 6
 183 0008 4883EC20 		subq	$32, %rsp
 184 000c 48897DF8 		movq	%rdi, -8(%rbp)
 185 0010 488975F0 		movq	%rsi, -16(%rbp)
 186 0014 488955E8 		movq	%rdx, -24(%rbp)
 187              	.LBB4:
  17:ScopedCurrentTest.h **** 		: m_oldTestResults(UnitTest::CurrentTest::Results())
 188              		.loc 4 17 52
 189 0018 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv@PLT
 189      00
 190 001d 488B10   		movq	(%rax), %rdx
 191              		.loc 4 17 5
 192 0020 488B45F8 		movq	-8(%rbp), %rax
 193 0024 488910   		movq	%rdx, (%rax)
  18:ScopedCurrentTest.h **** 		, m_oldTestDetails(UnitTest::CurrentTest::Details())
 194              		.loc 4 18 52
 195 0027 E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv@PLT
 195      00
 196 002c 488B10   		movq	(%rax), %rdx
 197              		.loc 4 18 5
 198 002f 488B45F8 		movq	-8(%rbp), %rax
 199 0033 48895008 		movq	%rdx, 8(%rax)
  19:ScopedCurrentTest.h **** 	{
  20:ScopedCurrentTest.h **** 		UnitTest::CurrentTest::Results() = &newResults;
 200              		.loc 4 20 33
 201 0037 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv@PLT
 201      00
 202              		.loc 4 20 36
 203 003c 488B55F0 		movq	-16(%rbp), %rdx
 204 0040 488910   		movq	%rdx, (%rax)
  21:ScopedCurrentTest.h **** 
  22:ScopedCurrentTest.h **** 		if (newDetails != NULL)
 205              		.loc 4 22 3
 206 0043 48837DE8 		cmpq	$0, -24(%rbp)
 206      00
 207 0048 740C     		je	.L13
  23:ScopedCurrentTest.h **** 			UnitTest::CurrentTest::Details() = newDetails;
 208              		.loc 4 23 34
 209 004a E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv@PLT
 209      00
 210              		.loc 4 23 37
 211 004f 488B55E8 		movq	-24(%rbp), %rdx
 212 0053 488910   		movq	%rdx, (%rax)
 213              	.L13:
 214              	.LBE4:
  24:ScopedCurrentTest.h **** 	}
 215              		.loc 4 24 2
 216 0056 90       		nop
 217 0057 C9       		leave
 218              		.cfi_def_cfa 7, 8
 219 0058 C3       		ret
 220              		.cfi_endproc
 221              	.LFE1145:
 223              		.weak	_ZN17ScopedCurrentTestC1ERN8UnitTest11TestResultsEPKNS0_11TestDetailsE
 224              		.set	_ZN17ScopedCurrentTestC1ERN8UnitTest11TestResultsEPKNS0_11TestDetailsE,_ZN17ScopedCurrentTest
 225              		.section	.text._ZN17ScopedCurrentTestD2Ev,"axG",@progbits,_ZN17ScopedCurrentTestD5Ev,comdat
 226              		.align 2
 227              		.weak	_ZN17ScopedCurrentTestD2Ev
 229              	_ZN17ScopedCurrentTestD2Ev:
 230              	.LFB1148:
  25:ScopedCurrentTest.h **** 
  26:ScopedCurrentTest.h **** 	~ScopedCurrentTest()
 231              		.loc 4 26 2
 232              		.cfi_startproc
 233 0000 F30F1EFA 		endbr64
 234 0004 55       		pushq	%rbp
 235              		.cfi_def_cfa_offset 16
 236              		.cfi_offset 6, -16
 237 0005 4889E5   		movq	%rsp, %rbp
 238              		.cfi_def_cfa_register 6
 239 0008 4883EC10 		subq	$16, %rsp
 240 000c 48897DF8 		movq	%rdi, -8(%rbp)
 241              	.LBB5:
  27:ScopedCurrentTest.h **** 	{
  28:ScopedCurrentTest.h **** 		UnitTest::CurrentTest::Results() = m_oldTestResults;
 242              		.loc 4 28 33
 243 0010 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv@PLT
 243      00
 244              		.loc 4 28 38
 245 0015 488B55F8 		movq	-8(%rbp), %rdx
 246 0019 488B12   		movq	(%rdx), %rdx
 247              		.loc 4 28 36
 248 001c 488910   		movq	%rdx, (%rax)
  29:ScopedCurrentTest.h **** 		UnitTest::CurrentTest::Details() = m_oldTestDetails;
 249              		.loc 4 29 33
 250 001f E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv@PLT
 250      00
 251              		.loc 4 29 38
 252 0024 488B55F8 		movq	-8(%rbp), %rdx
 253 0028 488B5208 		movq	8(%rdx), %rdx
 254              		.loc 4 29 36
 255 002c 488910   		movq	%rdx, (%rax)
 256              	.LBE5:
  30:ScopedCurrentTest.h **** 	}
 257              		.loc 4 30 2
 258 002f 90       		nop
 259 0030 C9       		leave
 260              		.cfi_def_cfa 7, 8
 261 0031 C3       		ret
 262              		.cfi_endproc
 263              	.LFE1148:
 265              		.weak	_ZN17ScopedCurrentTestD1Ev
 266              		.set	_ZN17ScopedCurrentTestD1Ev,_ZN17ScopedCurrentTestD2Ev
 267              		.section	.rodata
 268              	.LC1:
 269 000d 54657374 		.string	"TestUnitTest++.cpp"
 269      556E6974 
 269      54657374 
 269      2B2B2E63 
 269      707000
 270              	.LC2:
 271 0020 56616C69 		.string	"ValidCheckSucceeds"
 271      64436865 
 271      636B5375 
 271      63636565 
 271      647300
 272              		.text
 273              		.align 2
 275              	_ZN12_GLOBAL__N_122TestValidCheckSucceedsC2Ev:
 276              	.LFB1415:
 277              		.file 5 "TestUnitTest++.cpp"
   1:TestUnitTest++.cpp **** #include "../UnitTest++.h"
   2:TestUnitTest++.cpp **** #include "../ReportAssert.h"
   3:TestUnitTest++.cpp **** #include "ScopedCurrentTest.h"
   4:TestUnitTest++.cpp **** 
   5:TestUnitTest++.cpp **** #include <vector>
   6:TestUnitTest++.cpp **** 
   7:TestUnitTest++.cpp **** // These are sample tests that show the different features of the framework
   8:TestUnitTest++.cpp **** 
   9:TestUnitTest++.cpp **** namespace {
  10:TestUnitTest++.cpp **** 
  11:TestUnitTest++.cpp **** TEST(ValidCheckSucceeds)
 278              		.loc 5 11 1
 279              		.cfi_startproc
 280 0000 55       		pushq	%rbp
 281              		.cfi_def_cfa_offset 16
 282              		.cfi_offset 6, -16
 283 0001 4889E5   		movq	%rsp, %rbp
 284              		.cfi_def_cfa_register 6
 285 0004 53       		pushq	%rbx
 286 0005 4883EC18 		subq	$24, %rsp
 287              		.cfi_offset 3, -24
 288 0009 48897DE8 		movq	%rdi, -24(%rbp)
 289              	.LBB6:
 290              		.loc 5 11 1
 291 000d 488B5DE8 		movq	-24(%rbp), %rbx
 292 0011 E8000000 		call	_ZN13UnitTestSuite12GetSuiteNameEv
 292      00
 293 0016 4889C2   		movq	%rax, %rdx
 294 0019 41B80B00 		movl	$11, %r8d
 294      0000
 295 001f 488D0500 		leaq	.LC1(%rip), %rax
 295      000000
 296 0026 4889C1   		movq	%rax, %rcx
 297 0029 488D0500 		leaq	.LC2(%rip), %rax
 297      000000
 298 0030 4889C6   		movq	%rax, %rsi
 299 0033 4889DF   		movq	%rbx, %rdi
 300 0036 E8000000 		call	_ZN8UnitTest4TestC2EPKcS2_S2_i@PLT
 300      00
 301 003b 488D1500 		leaq	16+_ZTVN12_GLOBAL__N_122TestValidCheckSucceedsE(%rip), %rdx
 301      000000
 302 0042 488B45E8 		movq	-24(%rbp), %rax
 303 0046 488910   		movq	%rdx, (%rax)
 304              	.LBE6:
 305 0049 90       		nop
 306 004a 488B5DF8 		movq	-8(%rbp), %rbx
 307 004e C9       		leave
 308              		.cfi_def_cfa 7, 8
 309 004f C3       		ret
 310              		.cfi_endproc
 311              	.LFE1415:
 313              		.set	_ZN12_GLOBAL__N_122TestValidCheckSucceedsC1Ev,_ZN12_GLOBAL__N_122TestValidCheckSucceedsC2Ev
 314              		.local	_ZN12_GLOBAL__N_130testValidCheckSucceedsInstanceE
 315              		.comm	_ZN12_GLOBAL__N_130testValidCheckSucceedsInstanceE,56,32
 316              		.local	_ZN12_GLOBAL__N_123adderValidCheckSucceedsE
 317              		.comm	_ZN12_GLOBAL__N_123adderValidCheckSucceedsE,1,1
 318              		.section	.rodata
 319              	.LC3:
 320 0033 6200     		.string	"b"
 321 0035 000000   		.align 8
 322              	.LC4:
 323 0038 556E6861 		.string	"Unhandled exception in CHECK(b)"
 323      6E646C65 
 323      64206578 
 323      63657074 
 323      696F6E20 
 324              		.text
 325              		.align 2
 327              	_ZNK12_GLOBAL__N_122TestValidCheckSucceeds7RunImplEv:
 328              	.LFB1417:
  12:TestUnitTest++.cpp **** {
 329              		.loc 5 12 1
 330              		.cfi_startproc
 331              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 332              		.cfi_lsda 0x1b,.LLSDA1417
 333 0050 F30F1EFA 		endbr64
 334 0054 55       		pushq	%rbp
 335              		.cfi_def_cfa_offset 16
 336              		.cfi_offset 6, -16
 337 0055 4889E5   		movq	%rsp, %rbp
 338              		.cfi_def_cfa_register 6
 339 0058 53       		pushq	%rbx
 340 0059 4883EC58 		subq	$88, %rsp
 341              		.cfi_offset 3, -24
 342 005d 48897DA8 		movq	%rdi, -88(%rbp)
 343              		.loc 5 12 1
 344 0061 64488B04 		movq	%fs:40, %rax
 344      25280000 
 344      00
 345 006a 488945E8 		movq	%rax, -24(%rbp)
 346 006e 31C0     		xorl	%eax, %eax
  13:TestUnitTest++.cpp ****     bool const b = true;
 347              		.loc 5 13 16
 348 0070 C645BF01 		movb	$1, -65(%rbp)
  14:TestUnitTest++.cpp ****     CHECK(b);
 349              		.loc 5 14 5
 350 0074 BF010000 		movl	$1, %edi
 350      00
 351 0079 E8000000 		call	_ZN8UnitTest5CheckIbEEbT_
 351      00
 352 007e 83F001   		xorl	$1, %eax
 353 0081 84C0     		testb	%al, %al
 354 0083 0F84A000 		je	.L23
 354      0000
 355              	.LEHB4:
 356              		.loc 5 14 5 is_stmt 0 discriminator 1
 357 0089 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv@PLT
 357      00
 358 008e 488B18   		movq	(%rax), %rbx
 359 0091 E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv@PLT
 359      00
 360              		.loc 5 14 5 discriminator 3
 361 0096 488B08   		movq	(%rax), %rcx
 362 0099 488D45C0 		leaq	-64(%rbp), %rax
 363 009d BA0E0000 		movl	$14, %edx
 363      00
 364 00a2 4889CE   		movq	%rcx, %rsi
 365 00a5 4889C7   		movq	%rax, %rdi
 366 00a8 E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i@PLT
 366      00
 367              		.loc 5 14 5 discriminator 7
 368 00ad 488D45C0 		leaq	-64(%rbp), %rax
 369 00b1 488D1500 		leaq	.LC3(%rip), %rdx
 369      000000
 370 00b8 4889C6   		movq	%rax, %rsi
 371 00bb 4889DF   		movq	%rbx, %rdi
 372 00be E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc@PLT
 372      00
 373              	.LEHE4:
  15:TestUnitTest++.cpp **** }
 374              		.loc 5 15 1 is_stmt 1
 375 00c3 EB64     		jmp	.L23
 376              	.L21:
 377 00c5 F30F1EFA 		endbr64
  14:TestUnitTest++.cpp ****     CHECK(b);
 378              		.loc 5 14 5
 379 00c9 4889C7   		movq	%rax, %rdi
 380 00cc E8000000 		call	__cxa_begin_catch@PLT
 380      00
 381              	.LEHB5:
 382 00d1 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv@PLT
 382      00
  14:TestUnitTest++.cpp ****     CHECK(b);
 383              		.loc 5 14 5 is_stmt 0 discriminator 6
 384 00d6 488B18   		movq	(%rax), %rbx
 385 00d9 E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv@PLT
 385      00
  14:TestUnitTest++.cpp ****     CHECK(b);
 386              		.loc 5 14 5 discriminator 12
 387 00de 488B08   		movq	(%rax), %rcx
 388 00e1 488D45C0 		leaq	-64(%rbp), %rax
 389 00e5 BA0E0000 		movl	$14, %edx
 389      00
 390 00ea 4889CE   		movq	%rcx, %rsi
 391 00ed 4889C7   		movq	%rax, %rdi
 392 00f0 E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i@PLT
 392      00
  14:TestUnitTest++.cpp ****     CHECK(b);
 393              		.loc 5 14 5 discriminator 16
 394 00f5 488D45C0 		leaq	-64(%rbp), %rax
 395 00f9 488D1500 		leaq	.LC4(%rip), %rdx
 395      000000
 396 0100 4889C6   		movq	%rax, %rsi
 397 0103 4889DF   		movq	%rbx, %rdi
 398 0106 E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc@PLT
 398      00
 399              	.LEHE5:
 400              	.LEHB6:
  14:TestUnitTest++.cpp ****     CHECK(b);
 401              		.loc 5 14 5 discriminator 18
 402 010b E8000000 		call	__cxa_end_catch@PLT
 402      00
 403              	.LEHE6:
 404              		.loc 5 15 1 is_stmt 1 discriminator 18
 405 0110 EB17     		jmp	.L23
 406              	.L22:
 407 0112 F30F1EFA 		endbr64
  14:TestUnitTest++.cpp ****     CHECK(b);
 408              		.loc 5 14 5
 409 0116 4889C3   		movq	%rax, %rbx
 410 0119 E8000000 		call	__cxa_end_catch@PLT
 410      00
 411 011e 4889D8   		movq	%rbx, %rax
 412 0121 4889C7   		movq	%rax, %rdi
 413              	.LEHB7:
 414 0124 E8000000 		call	_Unwind_Resume@PLT
 414      00
 415              	.LEHE7:
 416              	.L23:
 417              		.loc 5 15 1
 418 0129 90       		nop
 419 012a 488B45E8 		movq	-24(%rbp), %rax
 420 012e 64482B04 		subq	%fs:40, %rax
 420      25280000 
 420      00
 421 0137 7405     		je	.L20
 422 0139 E8000000 		call	__stack_chk_fail@PLT
 422      00
 423              	.L20:
 424 013e 488B5DF8 		movq	-8(%rbp), %rbx
 425 0142 C9       		leave
 426              		.cfi_def_cfa 7, 8
 427 0143 C3       		ret
 428              		.cfi_endproc
 429              	.LFE1417:
 430              		.section	.gcc_except_table,"a",@progbits
 431              		.align 4
 432              	.LLSDA1417:
 433 0000 FF       		.byte	0xff
 434 0001 9B       		.byte	0x9b
 435 0002 1D       		.uleb128 .LLSDATT1417-.LLSDATTD1417
 436              	.LLSDATTD1417:
 437 0003 01       		.byte	0x1
 438 0004 14       		.uleb128 .LLSDACSE1417-.LLSDACSB1417
 439              	.LLSDACSB1417:
 440 0005 39       		.uleb128 .LEHB4-.LFB1417
 441 0006 3A       		.uleb128 .LEHE4-.LEHB4
 442 0007 75       		.uleb128 .L21-.LFB1417
 443 0008 01       		.uleb128 0x1
 444 0009 8101     		.uleb128 .LEHB5-.LFB1417
 445 000b 3A       		.uleb128 .LEHE5-.LEHB5
 446 000c C201     		.uleb128 .L22-.LFB1417
 447 000e 00       		.uleb128 0
 448 000f BB01     		.uleb128 .LEHB6-.LFB1417
 449 0011 05       		.uleb128 .LEHE6-.LEHB6
 450 0012 00       		.uleb128 0
 451 0013 00       		.uleb128 0
 452 0014 D401     		.uleb128 .LEHB7-.LFB1417
 453 0016 05       		.uleb128 .LEHE7-.LEHB7
 454 0017 00       		.uleb128 0
 455 0018 00       		.uleb128 0
 456              	.LLSDACSE1417:
 457 0019 01       		.byte	0x1
 458 001a 00       		.byte	0
 459 001b 00       		.align 4
 460 001c 00000000 		.long	0
 461              	
 462              	.LLSDATT1417:
 463              		.text
 465              		.section	.rodata
 466              	.LC5:
 467 0058 43686563 		.string	"CheckWorksWithPointers"
 467      6B576F72 
 467      6B735769 
 467      7468506F 
 467      696E7465 
 468              		.text
 469              		.align 2
 471              	_ZN12_GLOBAL__N_126TestCheckWorksWithPointersC2Ev:
 472              	.LFB1419:
  16:TestUnitTest++.cpp **** 
  17:TestUnitTest++.cpp **** TEST(CheckWorksWithPointers)
 473              		.loc 5 17 1
 474              		.cfi_startproc
 475 0144 55       		pushq	%rbp
 476              		.cfi_def_cfa_offset 16
 477              		.cfi_offset 6, -16
 478 0145 4889E5   		movq	%rsp, %rbp
 479              		.cfi_def_cfa_register 6
 480 0148 53       		pushq	%rbx
 481 0149 4883EC18 		subq	$24, %rsp
 482              		.cfi_offset 3, -24
 483 014d 48897DE8 		movq	%rdi, -24(%rbp)
 484              	.LBB7:
 485              		.loc 5 17 1
 486 0151 488B5DE8 		movq	-24(%rbp), %rbx
 487 0155 E8000000 		call	_ZN13UnitTestSuite12GetSuiteNameEv
 487      00
 488 015a 4889C2   		movq	%rax, %rdx
 489 015d 41B81100 		movl	$17, %r8d
 489      0000
 490 0163 488D0500 		leaq	.LC1(%rip), %rax
 490      000000
 491 016a 4889C1   		movq	%rax, %rcx
 492 016d 488D0500 		leaq	.LC5(%rip), %rax
 492      000000
 493 0174 4889C6   		movq	%rax, %rsi
 494 0177 4889DF   		movq	%rbx, %rdi
 495 017a E8000000 		call	_ZN8UnitTest4TestC2EPKcS2_S2_i@PLT
 495      00
 496 017f 488D1500 		leaq	16+_ZTVN12_GLOBAL__N_126TestCheckWorksWithPointersE(%rip), %rdx
 496      000000
 497 0186 488B45E8 		movq	-24(%rbp), %rax
 498 018a 488910   		movq	%rdx, (%rax)
 499              	.LBE7:
 500 018d 90       		nop
 501 018e 488B5DF8 		movq	-8(%rbp), %rbx
 502 0192 C9       		leave
 503              		.cfi_def_cfa 7, 8
 504 0193 C3       		ret
 505              		.cfi_endproc
 506              	.LFE1419:
 508              		.set	_ZN12_GLOBAL__N_126TestCheckWorksWithPointersC1Ev,_ZN12_GLOBAL__N_126TestCheckWorksWithPointe
 509              		.local	_ZN12_GLOBAL__N_134testCheckWorksWithPointersInstanceE
 510              		.comm	_ZN12_GLOBAL__N_134testCheckWorksWithPointersInstanceE,56,32
 511              		.local	_ZN12_GLOBAL__N_127adderCheckWorksWithPointersE
 512              		.comm	_ZN12_GLOBAL__N_127adderCheckWorksWithPointersE,1,1
 513              		.section	.rodata
 514              	.LC6:
 515 006f 7000     		.string	"p"
 516              	.LC7:
 517 0071 7020213D 		.string	"p != 0"
 517      203000
 518              		.align 8
 519              	.LC8:
 520 0078 556E6861 		.string	"Unhandled exception in CHECK(p)"
 520      6E646C65 
 520      64206578 
 520      63657074 
 520      696F6E20 
 521              		.align 8
 522              	.LC9:
 523 0098 556E6861 		.string	"Unhandled exception in CHECK(p != 0)"
 523      6E646C65 
 523      64206578 
 523      63657074 
 523      696F6E20 
 524              		.text
 525              		.align 2
 527              	_ZNK12_GLOBAL__N_126TestCheckWorksWithPointers7RunImplEv:
 528              	.LFB1421:
  18:TestUnitTest++.cpp **** {
 529              		.loc 5 18 1
 530              		.cfi_startproc
 531              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 532              		.cfi_lsda 0x1b,.LLSDA1421
 533 0194 F30F1EFA 		endbr64
 534 0198 55       		pushq	%rbp
 535              		.cfi_def_cfa_offset 16
 536              		.cfi_offset 6, -16
 537 0199 4889E5   		movq	%rsp, %rbp
 538              		.cfi_def_cfa_register 6
 539 019c 53       		pushq	%rbx
 540 019d 4883EC58 		subq	$88, %rsp
 541              		.cfi_offset 3, -24
 542 01a1 48897DA8 		movq	%rdi, -88(%rbp)
 543              		.loc 5 18 1
 544 01a5 64488B04 		movq	%fs:40, %rax
 544      25280000 
 544      00
 545 01ae 488945E8 		movq	%rax, -24(%rbp)
 546 01b2 31C0     		xorl	%eax, %eax
  19:TestUnitTest++.cpp ****     void* p = (void *)0x100;
 547              		.loc 5 19 11
 548 01b4 48C745B8 		movq	$256, -72(%rbp)
 548      00010000 
  20:TestUnitTest++.cpp ****     CHECK(p);
 549              		.loc 5 20 5
 550 01bc 488B45B8 		movq	-72(%rbp), %rax
 551 01c0 4889C7   		movq	%rax, %rdi
 552 01c3 E8000000 		call	_ZN8UnitTest5CheckIPvEEbT_
 552      00
 553 01c8 83F001   		xorl	$1, %eax
 554 01cb 84C0     		testb	%al, %al
 555 01cd 743A     		je	.L26
 556              	.LEHB8:
 557              		.loc 5 20 5 is_stmt 0 discriminator 1
 558 01cf E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv@PLT
 558      00
 559 01d4 488B18   		movq	(%rax), %rbx
 560 01d7 E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv@PLT
 560      00
 561              		.loc 5 20 5 discriminator 3
 562 01dc 488B08   		movq	(%rax), %rcx
 563 01df 488D45C0 		leaq	-64(%rbp), %rax
 564 01e3 BA140000 		movl	$20, %edx
 564      00
 565 01e8 4889CE   		movq	%rcx, %rsi
 566 01eb 4889C7   		movq	%rax, %rdi
 567 01ee E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i@PLT
 567      00
 568              		.loc 5 20 5 discriminator 7
 569 01f3 488D45C0 		leaq	-64(%rbp), %rax
 570 01f7 488D1500 		leaq	.LC6(%rip), %rdx
 570      000000
 571 01fe 4889C6   		movq	%rax, %rsi
 572 0201 4889DF   		movq	%rbx, %rdi
 573 0204 E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc@PLT
 573      00
 574              	.LEHE8:
 575              	.L26:
  21:TestUnitTest++.cpp ****     CHECK(p != 0);
 576              		.loc 5 21 5 is_stmt 1
 577 0209 48837DB8 		cmpq	$0, -72(%rbp)
 577      00
 578 020e 0F95C0   		setne	%al
 579 0211 0FB6C0   		movzbl	%al, %eax
 580 0214 89C7     		movl	%eax, %edi
 581 0216 E8000000 		call	_ZN8UnitTest5CheckIbEEbT_
 581      00
 582 021b 83F001   		xorl	$1, %eax
 583 021e 84C0     		testb	%al, %al
 584 0220 0F840A01 		je	.L37
 584      0000
 585              	.LEHB9:
 586              		.loc 5 21 5 is_stmt 0 discriminator 1
 587 0226 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv@PLT
 587      00
 588 022b 488B18   		movq	(%rax), %rbx
 589 022e E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv@PLT
 589      00
 590              		.loc 5 21 5 discriminator 3
 591 0233 488B08   		movq	(%rax), %rcx
 592 0236 488D45C0 		leaq	-64(%rbp), %rax
 593 023a BA150000 		movl	$21, %edx
 593      00
 594 023f 4889CE   		movq	%rcx, %rsi
 595 0242 4889C7   		movq	%rax, %rdi
 596 0245 E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i@PLT
 596      00
 597              		.loc 5 21 5 discriminator 7
 598 024a 488D45C0 		leaq	-64(%rbp), %rax
 599 024e 488D1500 		leaq	.LC7(%rip), %rdx
 599      000000
 600 0255 4889C6   		movq	%rax, %rsi
 601 0258 4889DF   		movq	%rbx, %rdi
 602 025b E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc@PLT
 602      00
 603              	.LEHE9:
  22:TestUnitTest++.cpp **** }
 604              		.loc 5 22 1 is_stmt 1
 605 0260 E9CB0000 		jmp	.L37
 605      00
 606              	.L33:
 607 0265 F30F1EFA 		endbr64
  20:TestUnitTest++.cpp ****     CHECK(p);
 608              		.loc 5 20 5
 609 0269 4889C7   		movq	%rax, %rdi
 610 026c E8000000 		call	__cxa_begin_catch@PLT
 610      00
 611              	.LEHB10:
 612 0271 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv@PLT
 612      00
  20:TestUnitTest++.cpp ****     CHECK(p);
 613              		.loc 5 20 5 is_stmt 0 discriminator 6
 614 0276 488B18   		movq	(%rax), %rbx
 615 0279 E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv@PLT
 615      00
  20:TestUnitTest++.cpp ****     CHECK(p);
 616              		.loc 5 20 5 discriminator 12
 617 027e 488B08   		movq	(%rax), %rcx
 618 0281 488D45C0 		leaq	-64(%rbp), %rax
 619 0285 BA140000 		movl	$20, %edx
 619      00
 620 028a 4889CE   		movq	%rcx, %rsi
 621 028d 4889C7   		movq	%rax, %rdi
 622 0290 E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i@PLT
 622      00
  20:TestUnitTest++.cpp ****     CHECK(p);
 623              		.loc 5 20 5 discriminator 16
 624 0295 488D45C0 		leaq	-64(%rbp), %rax
 625 0299 488D1500 		leaq	.LC8(%rip), %rdx
 625      000000
 626 02a0 4889C6   		movq	%rax, %rsi
 627 02a3 4889DF   		movq	%rbx, %rdi
 628 02a6 E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc@PLT
 628      00
 629              	.LEHE10:
 630              	.LEHB11:
  20:TestUnitTest++.cpp ****     CHECK(p);
 631              		.loc 5 20 5 discriminator 18
 632 02ab E8000000 		call	__cxa_end_catch@PLT
 632      00
 633              	.LEHE11:
 634 02b0 E954FFFF 		jmp	.L26
 634      FF
 635              	.L34:
 636 02b5 F30F1EFA 		endbr64
  20:TestUnitTest++.cpp ****     CHECK(p);
 637              		.loc 5 20 5
 638 02b9 4889C3   		movq	%rax, %rbx
 639 02bc E8000000 		call	__cxa_end_catch@PLT
 639      00
 640 02c1 4889D8   		movq	%rbx, %rax
 641 02c4 4889C7   		movq	%rax, %rdi
 642              	.LEHB12:
 643 02c7 E8000000 		call	_Unwind_Resume@PLT
 643      00
 644              	.LEHE12:
 645              	.L35:
 646 02cc F30F1EFA 		endbr64
  21:TestUnitTest++.cpp ****     CHECK(p != 0);
 647              		.loc 5 21 5 is_stmt 1
 648 02d0 4889C7   		movq	%rax, %rdi
 649 02d3 E8000000 		call	__cxa_begin_catch@PLT
 649      00
 650              	.LEHB13:
 651 02d8 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv@PLT
 651      00
  21:TestUnitTest++.cpp ****     CHECK(p != 0);
 652              		.loc 5 21 5 is_stmt 0 discriminator 6
 653 02dd 488B18   		movq	(%rax), %rbx
 654 02e0 E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv@PLT
 654      00
  21:TestUnitTest++.cpp ****     CHECK(p != 0);
 655              		.loc 5 21 5 discriminator 12
 656 02e5 488B08   		movq	(%rax), %rcx
 657 02e8 488D45C0 		leaq	-64(%rbp), %rax
 658 02ec BA150000 		movl	$21, %edx
 658      00
 659 02f1 4889CE   		movq	%rcx, %rsi
 660 02f4 4889C7   		movq	%rax, %rdi
 661 02f7 E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i@PLT
 661      00
  21:TestUnitTest++.cpp ****     CHECK(p != 0);
 662              		.loc 5 21 5 discriminator 16
 663 02fc 488D45C0 		leaq	-64(%rbp), %rax
 664 0300 488D1500 		leaq	.LC9(%rip), %rdx
 664      000000
 665 0307 4889C6   		movq	%rax, %rsi
 666 030a 4889DF   		movq	%rbx, %rdi
 667 030d E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc@PLT
 667      00
 668              	.LEHE13:
 669              	.LEHB14:
  21:TestUnitTest++.cpp ****     CHECK(p != 0);
 670              		.loc 5 21 5 discriminator 18
 671 0312 E8000000 		call	__cxa_end_catch@PLT
 671      00
 672              	.LEHE14:
 673              		.loc 5 22 1 is_stmt 1 discriminator 18
 674 0317 EB17     		jmp	.L37
 675              	.L36:
 676 0319 F30F1EFA 		endbr64
  21:TestUnitTest++.cpp ****     CHECK(p != 0);
 677              		.loc 5 21 5
 678 031d 4889C3   		movq	%rax, %rbx
 679 0320 E8000000 		call	__cxa_end_catch@PLT
 679      00
 680 0325 4889D8   		movq	%rbx, %rax
 681 0328 4889C7   		movq	%rax, %rdi
 682              	.LEHB15:
 683 032b E8000000 		call	_Unwind_Resume@PLT
 683      00
 684              	.LEHE15:
 685              	.L37:
 686              		.loc 5 22 1
 687 0330 90       		nop
 688 0331 488B45E8 		movq	-24(%rbp), %rax
 689 0335 64482B04 		subq	%fs:40, %rax
 689      25280000 
 689      00
 690 033e 7405     		je	.L32
 691 0340 E8000000 		call	__stack_chk_fail@PLT
 691      00
 692              	.L32:
 693 0345 488B5DF8 		movq	-8(%rbp), %rbx
 694 0349 C9       		leave
 695              		.cfi_def_cfa 7, 8
 696 034a C3       		ret
 697              		.cfi_endproc
 698              	.LFE1421:
 699              		.section	.gcc_except_table
 700              		.align 4
 701              	.LLSDA1421:
 702 0020 FF       		.byte	0xff
 703 0021 9B       		.byte	0x9b
 704 0022 35       		.uleb128 .LLSDATT1421-.LLSDATTD1421
 705              	.LLSDATTD1421:
 706 0023 01       		.byte	0x1
 707 0024 2B       		.uleb128 .LLSDACSE1421-.LLSDACSB1421
 708              	.LLSDACSB1421:
 709 0025 3B       		.uleb128 .LEHB8-.LFB1421
 710 0026 3A       		.uleb128 .LEHE8-.LEHB8
 711 0027 D101     		.uleb128 .L33-.LFB1421
 712 0029 01       		.uleb128 0x1
 713 002a 9201     		.uleb128 .LEHB9-.LFB1421
 714 002c 3A       		.uleb128 .LEHE9-.LEHB9
 715 002d B802     		.uleb128 .L35-.LFB1421
 716 002f 01       		.uleb128 0x1
 717 0030 DD01     		.uleb128 .LEHB10-.LFB1421
 718 0032 3A       		.uleb128 .LEHE10-.LEHB10
 719 0033 A102     		.uleb128 .L34-.LFB1421
 720 0035 00       		.uleb128 0
 721 0036 9702     		.uleb128 .LEHB11-.LFB1421
 722 0038 05       		.uleb128 .LEHE11-.LEHB11
 723 0039 00       		.uleb128 0
 724 003a 00       		.uleb128 0
 725 003b B302     		.uleb128 .LEHB12-.LFB1421
 726 003d 05       		.uleb128 .LEHE12-.LEHB12
 727 003e 00       		.uleb128 0
 728 003f 00       		.uleb128 0
 729 0040 C402     		.uleb128 .LEHB13-.LFB1421
 730 0042 3A       		.uleb128 .LEHE13-.LEHB13
 731 0043 8503     		.uleb128 .L36-.LFB1421
 732 0045 00       		.uleb128 0
 733 0046 FE02     		.uleb128 .LEHB14-.LFB1421
 734 0048 05       		.uleb128 .LEHE14-.LEHB14
 735 0049 00       		.uleb128 0
 736 004a 00       		.uleb128 0
 737 004b 9703     		.uleb128 .LEHB15-.LFB1421
 738 004d 05       		.uleb128 .LEHE15-.LEHB15
 739 004e 00       		.uleb128 0
 740 004f 00       		.uleb128 0
 741              	.LLSDACSE1421:
 742 0050 01       		.byte	0x1
 743 0051 00       		.byte	0
 744 0052 0000     		.align 4
 745 0054 00000000 		.long	0
 746              	
 747              	.LLSDATT1421:
 748              		.text
 750              		.section	.rodata
 751              	.LC10:
 752 00bd 56616C69 		.string	"ValidCheckEqualSucceeds"
 752      64436865 
 752      636B4571 
 752      75616C53 
 752      75636365 
 753              		.text
 754 034b 90       		.align 2
 756              	_ZN12_GLOBAL__N_127TestValidCheckEqualSucceedsC2Ev:
 757              	.LFB1423:
  23:TestUnitTest++.cpp **** 
  24:TestUnitTest++.cpp **** TEST(ValidCheckEqualSucceeds)
 758              		.loc 5 24 1
 759              		.cfi_startproc
 760 034c 55       		pushq	%rbp
 761              		.cfi_def_cfa_offset 16
 762              		.cfi_offset 6, -16
 763 034d 4889E5   		movq	%rsp, %rbp
 764              		.cfi_def_cfa_register 6
 765 0350 53       		pushq	%rbx
 766 0351 4883EC18 		subq	$24, %rsp
 767              		.cfi_offset 3, -24
 768 0355 48897DE8 		movq	%rdi, -24(%rbp)
 769              	.LBB8:
 770              		.loc 5 24 1
 771 0359 488B5DE8 		movq	-24(%rbp), %rbx
 772 035d E8000000 		call	_ZN13UnitTestSuite12GetSuiteNameEv
 772      00
 773 0362 4889C2   		movq	%rax, %rdx
 774 0365 41B81800 		movl	$24, %r8d
 774      0000
 775 036b 488D0500 		leaq	.LC1(%rip), %rax
 775      000000
 776 0372 4889C1   		movq	%rax, %rcx
 777 0375 488D0500 		leaq	.LC10(%rip), %rax
 777      000000
 778 037c 4889C6   		movq	%rax, %rsi
 779 037f 4889DF   		movq	%rbx, %rdi
 780 0382 E8000000 		call	_ZN8UnitTest4TestC2EPKcS2_S2_i@PLT
 780      00
 781 0387 488D1500 		leaq	16+_ZTVN12_GLOBAL__N_127TestValidCheckEqualSucceedsE(%rip), %rdx
 781      000000
 782 038e 488B45E8 		movq	-24(%rbp), %rax
 783 0392 488910   		movq	%rdx, (%rax)
 784              	.LBE8:
 785 0395 90       		nop
 786 0396 488B5DF8 		movq	-8(%rbp), %rbx
 787 039a C9       		leave
 788              		.cfi_def_cfa 7, 8
 789 039b C3       		ret
 790              		.cfi_endproc
 791              	.LFE1423:
 793              		.set	_ZN12_GLOBAL__N_127TestValidCheckEqualSucceedsC1Ev,_ZN12_GLOBAL__N_127TestValidCheckEqualSucc
 794              		.local	_ZN12_GLOBAL__N_135testValidCheckEqualSucceedsInstanceE
 795              		.comm	_ZN12_GLOBAL__N_135testValidCheckEqualSucceedsInstanceE,56,32
 796              		.local	_ZN12_GLOBAL__N_128adderValidCheckEqualSucceedsE
 797              		.comm	_ZN12_GLOBAL__N_128adderValidCheckEqualSucceedsE,1,1
 798              		.section	.rodata
 799 00d5 000000   		.align 8
 800              	.LC11:
 801 00d8 556E6861 		.string	"Unhandled exception in CHECK_EQUAL(x, y)"
 801      6E646C65 
 801      64206578 
 801      63657074 
 801      696F6E20 
 802              		.text
 803              		.align 2
 805              	_ZNK12_GLOBAL__N_127TestValidCheckEqualSucceeds7RunImplEv:
 806              	.LFB1425:
  25:TestUnitTest++.cpp **** {
 807              		.loc 5 25 1
 808              		.cfi_startproc
 809              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 810              		.cfi_lsda 0x1b,.LLSDA1425
 811 039c F30F1EFA 		endbr64
 812 03a0 55       		pushq	%rbp
 813              		.cfi_def_cfa_offset 16
 814              		.cfi_offset 6, -16
 815 03a1 4889E5   		movq	%rsp, %rbp
 816              		.cfi_def_cfa_register 6
 817 03a4 53       		pushq	%rbx
 818 03a5 4883EC58 		subq	$88, %rsp
 819              		.cfi_offset 3, -24
 820 03a9 48897DA8 		movq	%rdi, -88(%rbp)
 821              		.loc 5 25 1
 822 03ad 64488B04 		movq	%fs:40, %rax
 822      25280000 
 822      00
 823 03b6 488945E8 		movq	%rax, -24(%rbp)
 824 03ba 31C0     		xorl	%eax, %eax
  26:TestUnitTest++.cpp ****     int const x = 3;
 825              		.loc 5 26 15
 826 03bc C745B803 		movl	$3, -72(%rbp)
 826      000000
  27:TestUnitTest++.cpp ****     int const y = 3;
 827              		.loc 5 27 15
 828 03c3 C745BC03 		movl	$3, -68(%rbp)
 828      000000
 829              	.LEHB16:
  28:TestUnitTest++.cpp ****     CHECK_EQUAL(x, y);
 830              		.loc 5 28 5
 831 03ca E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv@PLT
 831      00
 832 03cf 488B08   		movq	(%rax), %rcx
 833 03d2 488D45C0 		leaq	-64(%rbp), %rax
 834 03d6 BA1C0000 		movl	$28, %edx
 834      00
 835 03db 4889CE   		movq	%rcx, %rsi
 836 03de 4889C7   		movq	%rax, %rdi
 837 03e1 E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i@PLT
 837      00
 838              		.loc 5 28 5 is_stmt 0 discriminator 4
 839 03e6 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv@PLT
 839      00
 840 03eb 488B00   		movq	(%rax), %rax
 841 03ee 488D4DC0 		leaq	-64(%rbp), %rcx
 842 03f2 488D55BC 		leaq	-68(%rbp), %rdx
 843 03f6 488D75B8 		leaq	-72(%rbp), %rsi
 844 03fa 4889C7   		movq	%rax, %rdi
 845 03fd E8000000 		call	_ZN8UnitTest10CheckEqualIiiEEvRNS_11TestResultsERKT_RKT0_RKNS_11TestDetailsE
 845      00
 846              	.LEHE16:
  29:TestUnitTest++.cpp **** }
 847              		.loc 5 29 1 is_stmt 1
 848 0402 EB64     		jmp	.L39
 849              	.L44:
 850 0404 F30F1EFA 		endbr64
  28:TestUnitTest++.cpp ****     CHECK_EQUAL(x, y);
 851              		.loc 5 28 5
 852 0408 4889C7   		movq	%rax, %rdi
 853 040b E8000000 		call	__cxa_begin_catch@PLT
 853      00
 854              	.LEHB17:
 855 0410 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv@PLT
 855      00
  28:TestUnitTest++.cpp ****     CHECK_EQUAL(x, y);
 856              		.loc 5 28 5 is_stmt 0 discriminator 3
 857 0415 488B18   		movq	(%rax), %rbx
 858 0418 E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv@PLT
 858      00
  28:TestUnitTest++.cpp ****     CHECK_EQUAL(x, y);
 859              		.loc 5 28 5 discriminator 11
 860 041d 488B08   		movq	(%rax), %rcx
 861 0420 488D45C0 		leaq	-64(%rbp), %rax
 862 0424 BA1C0000 		movl	$28, %edx
 862      00
 863 0429 4889CE   		movq	%rcx, %rsi
 864 042c 4889C7   		movq	%rax, %rdi
 865 042f E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i@PLT
 865      00
  28:TestUnitTest++.cpp ****     CHECK_EQUAL(x, y);
 866              		.loc 5 28 5 discriminator 15
 867 0434 488D45C0 		leaq	-64(%rbp), %rax
 868 0438 488D1500 		leaq	.LC11(%rip), %rdx
 868      000000
 869 043f 4889C6   		movq	%rax, %rsi
 870 0442 4889DF   		movq	%rbx, %rdi
 871 0445 E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc@PLT
 871      00
 872              	.LEHE17:
 873              	.LEHB18:
  28:TestUnitTest++.cpp ****     CHECK_EQUAL(x, y);
 874              		.loc 5 28 5 discriminator 17
 875 044a E8000000 		call	__cxa_end_catch@PLT
 875      00
 876              	.LEHE18:
 877              		.loc 5 29 1 is_stmt 1 discriminator 17
 878 044f EB17     		jmp	.L39
 879              	.L45:
 880 0451 F30F1EFA 		endbr64
  28:TestUnitTest++.cpp ****     CHECK_EQUAL(x, y);
 881              		.loc 5 28 5
 882 0455 4889C3   		movq	%rax, %rbx
 883 0458 E8000000 		call	__cxa_end_catch@PLT
 883      00
 884 045d 4889D8   		movq	%rbx, %rax
 885 0460 4889C7   		movq	%rax, %rdi
 886              	.LEHB19:
 887 0463 E8000000 		call	_Unwind_Resume@PLT
 887      00
 888              	.LEHE19:
 889              	.L39:
 890              		.loc 5 29 1
 891 0468 488B45E8 		movq	-24(%rbp), %rax
 892 046c 64482B04 		subq	%fs:40, %rax
 892      25280000 
 892      00
 893 0475 7405     		je	.L43
 894 0477 E8000000 		call	__stack_chk_fail@PLT
 894      00
 895              	.L43:
 896 047c 488B5DF8 		movq	-8(%rbp), %rbx
 897 0480 C9       		leave
 898              		.cfi_def_cfa 7, 8
 899 0481 C3       		ret
 900              		.cfi_endproc
 901              	.LFE1425:
 902              		.section	.gcc_except_table
 903              		.align 4
 904              	.LLSDA1425:
 905 0058 FF       		.byte	0xff
 906 0059 9B       		.byte	0x9b
 907 005a 1D       		.uleb128 .LLSDATT1425-.LLSDATTD1425
 908              	.LLSDATTD1425:
 909 005b 01       		.byte	0x1
 910 005c 13       		.uleb128 .LLSDACSE1425-.LLSDACSB1425
 911              	.LLSDACSB1425:
 912 005d 2E       		.uleb128 .LEHB16-.LFB1425
 913 005e 38       		.uleb128 .LEHE16-.LEHB16
 914 005f 68       		.uleb128 .L44-.LFB1425
 915 0060 01       		.uleb128 0x1
 916 0061 74       		.uleb128 .LEHB17-.LFB1425
 917 0062 3A       		.uleb128 .LEHE17-.LEHB17
 918 0063 B501     		.uleb128 .L45-.LFB1425
 919 0065 00       		.uleb128 0
 920 0066 AE01     		.uleb128 .LEHB18-.LFB1425
 921 0068 05       		.uleb128 .LEHE18-.LEHB18
 922 0069 00       		.uleb128 0
 923 006a 00       		.uleb128 0
 924 006b C701     		.uleb128 .LEHB19-.LFB1425
 925 006d 05       		.uleb128 .LEHE19-.LEHB19
 926 006e 00       		.uleb128 0
 927 006f 00       		.uleb128 0
 928              	.LLSDACSE1425:
 929 0070 01       		.byte	0x1
 930 0071 00       		.byte	0
 931 0072 0000     		.align 4
 932 0074 00000000 		.long	0
 933              	
 934              	.LLSDATT1425:
 935              		.text
 937              		.section	.rodata
 938              	.LC12:
 939 0101 43686563 		.string	"CheckEqualWorksWithPointers"
 939      6B457175 
 939      616C576F 
 939      726B7357 
 939      69746850 
 940              		.text
 941              		.align 2
 943              	_ZN12_GLOBAL__N_131TestCheckEqualWorksWithPointersC2Ev:
 944              	.LFB1427:
  30:TestUnitTest++.cpp **** 
  31:TestUnitTest++.cpp **** TEST(CheckEqualWorksWithPointers)
 945              		.loc 5 31 1
 946              		.cfi_startproc
 947 0482 55       		pushq	%rbp
 948              		.cfi_def_cfa_offset 16
 949              		.cfi_offset 6, -16
 950 0483 4889E5   		movq	%rsp, %rbp
 951              		.cfi_def_cfa_register 6
 952 0486 53       		pushq	%rbx
 953 0487 4883EC18 		subq	$24, %rsp
 954              		.cfi_offset 3, -24
 955 048b 48897DE8 		movq	%rdi, -24(%rbp)
 956              	.LBB9:
 957              		.loc 5 31 1
 958 048f 488B5DE8 		movq	-24(%rbp), %rbx
 959 0493 E8000000 		call	_ZN13UnitTestSuite12GetSuiteNameEv
 959      00
 960 0498 4889C2   		movq	%rax, %rdx
 961 049b 41B81F00 		movl	$31, %r8d
 961      0000
 962 04a1 488D0500 		leaq	.LC1(%rip), %rax
 962      000000
 963 04a8 4889C1   		movq	%rax, %rcx
 964 04ab 488D0500 		leaq	.LC12(%rip), %rax
 964      000000
 965 04b2 4889C6   		movq	%rax, %rsi
 966 04b5 4889DF   		movq	%rbx, %rdi
 967 04b8 E8000000 		call	_ZN8UnitTest4TestC2EPKcS2_S2_i@PLT
 967      00
 968 04bd 488D1500 		leaq	16+_ZTVN12_GLOBAL__N_131TestCheckEqualWorksWithPointersE(%rip), %rdx
 968      000000
 969 04c4 488B45E8 		movq	-24(%rbp), %rax
 970 04c8 488910   		movq	%rdx, (%rax)
 971              	.LBE9:
 972 04cb 90       		nop
 973 04cc 488B5DF8 		movq	-8(%rbp), %rbx
 974 04d0 C9       		leave
 975              		.cfi_def_cfa 7, 8
 976 04d1 C3       		ret
 977              		.cfi_endproc
 978              	.LFE1427:
 980              		.set	_ZN12_GLOBAL__N_131TestCheckEqualWorksWithPointersC1Ev,_ZN12_GLOBAL__N_131TestCheckEqualWorks
 981              		.local	_ZN12_GLOBAL__N_139testCheckEqualWorksWithPointersInstanceE
 982              		.comm	_ZN12_GLOBAL__N_139testCheckEqualWorksWithPointersInstanceE,56,32
 983              		.local	_ZN12_GLOBAL__N_132adderCheckEqualWorksWithPointersE
 984              		.comm	_ZN12_GLOBAL__N_132adderCheckEqualWorksWithPointersE,1,1
 985              		.section	.rodata
 986 011d 000000   		.align 8
 987              	.LC13:
 988 0120 556E6861 		.string	"Unhandled exception in CHECK_EQUAL((void*)0, p)"
 988      6E646C65 
 988      64206578 
 988      63657074 
 988      696F6E20 
 989              		.text
 990              		.align 2
 992              	_ZNK12_GLOBAL__N_131TestCheckEqualWorksWithPointers7RunImplEv:
 993              	.LFB1429:
  32:TestUnitTest++.cpp **** {
 994              		.loc 5 32 1
 995              		.cfi_startproc
 996              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 997              		.cfi_lsda 0x1b,.LLSDA1429
 998 04d2 F30F1EFA 		endbr64
 999 04d6 55       		pushq	%rbp
 1000              		.cfi_def_cfa_offset 16
 1001              		.cfi_offset 6, -16
 1002 04d7 4889E5   		movq	%rsp, %rbp
 1003              		.cfi_def_cfa_register 6
 1004 04da 53       		pushq	%rbx
 1005 04db 4883EC58 		subq	$88, %rsp
 1006              		.cfi_offset 3, -24
 1007 04df 48897DA8 		movq	%rdi, -88(%rbp)
 1008              		.loc 5 32 1
 1009 04e3 64488B04 		movq	%fs:40, %rax
 1009      25280000 
 1009      00
 1010 04ec 488945E8 		movq	%rax, -24(%rbp)
 1011 04f0 31C0     		xorl	%eax, %eax
  33:TestUnitTest++.cpp ****     void* p = (void *)0;
 1012              		.loc 5 33 11
 1013 04f2 48C745B0 		movq	$0, -80(%rbp)
 1013      00000000 
 1014              	.LEHB20:
  34:TestUnitTest++.cpp ****     CHECK_EQUAL((void*)0, p);
 1015              		.loc 5 34 5
 1016 04fa E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv@PLT
 1016      00
 1017 04ff 488B08   		movq	(%rax), %rcx
 1018 0502 488D45C0 		leaq	-64(%rbp), %rax
 1019 0506 BA220000 		movl	$34, %edx
 1019      00
 1020 050b 4889CE   		movq	%rcx, %rsi
 1021 050e 4889C7   		movq	%rax, %rdi
 1022 0511 E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i@PLT
 1022      00
 1023              		.loc 5 34 5 is_stmt 0 discriminator 4
 1024 0516 48C745B8 		movq	$0, -72(%rbp)
 1024      00000000 
 1025 051e E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv@PLT
 1025      00
 1026 0523 488B00   		movq	(%rax), %rax
 1027 0526 488D4DC0 		leaq	-64(%rbp), %rcx
 1028 052a 488D55B0 		leaq	-80(%rbp), %rdx
 1029 052e 488D75B8 		leaq	-72(%rbp), %rsi
 1030 0532 4889C7   		movq	%rax, %rdi
 1031 0535 E8000000 		call	_ZN8UnitTest10CheckEqualIPvS1_EEvRNS_11TestResultsERKT_RKT0_RKNS_11TestDetailsE
 1031      00
 1032              	.LEHE20:
  35:TestUnitTest++.cpp **** }
 1033              		.loc 5 35 1 is_stmt 1
 1034 053a EB64     		jmp	.L47
 1035              	.L52:
 1036 053c F30F1EFA 		endbr64
  34:TestUnitTest++.cpp ****     CHECK_EQUAL((void*)0, p);
 1037              		.loc 5 34 5
 1038 0540 4889C7   		movq	%rax, %rdi
 1039 0543 E8000000 		call	__cxa_begin_catch@PLT
 1039      00
 1040              	.LEHB21:
 1041 0548 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv@PLT
 1041      00
  34:TestUnitTest++.cpp ****     CHECK_EQUAL((void*)0, p);
 1042              		.loc 5 34 5 is_stmt 0 discriminator 3
 1043 054d 488B18   		movq	(%rax), %rbx
 1044 0550 E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv@PLT
 1044      00
  34:TestUnitTest++.cpp ****     CHECK_EQUAL((void*)0, p);
 1045              		.loc 5 34 5 discriminator 11
 1046 0555 488B08   		movq	(%rax), %rcx
 1047 0558 488D45C0 		leaq	-64(%rbp), %rax
 1048 055c BA220000 		movl	$34, %edx
 1048      00
 1049 0561 4889CE   		movq	%rcx, %rsi
 1050 0564 4889C7   		movq	%rax, %rdi
 1051 0567 E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i@PLT
 1051      00
  34:TestUnitTest++.cpp ****     CHECK_EQUAL((void*)0, p);
 1052              		.loc 5 34 5 discriminator 15
 1053 056c 488D45C0 		leaq	-64(%rbp), %rax
 1054 0570 488D1500 		leaq	.LC13(%rip), %rdx
 1054      000000
 1055 0577 4889C6   		movq	%rax, %rsi
 1056 057a 4889DF   		movq	%rbx, %rdi
 1057 057d E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc@PLT
 1057      00
 1058              	.LEHE21:
 1059              	.LEHB22:
  34:TestUnitTest++.cpp ****     CHECK_EQUAL((void*)0, p);
 1060              		.loc 5 34 5 discriminator 17
 1061 0582 E8000000 		call	__cxa_end_catch@PLT
 1061      00
 1062              	.LEHE22:
 1063              		.loc 5 35 1 is_stmt 1 discriminator 17
 1064 0587 EB17     		jmp	.L47
 1065              	.L53:
 1066 0589 F30F1EFA 		endbr64
  34:TestUnitTest++.cpp ****     CHECK_EQUAL((void*)0, p);
 1067              		.loc 5 34 5
 1068 058d 4889C3   		movq	%rax, %rbx
 1069 0590 E8000000 		call	__cxa_end_catch@PLT
 1069      00
 1070 0595 4889D8   		movq	%rbx, %rax
 1071 0598 4889C7   		movq	%rax, %rdi
 1072              	.LEHB23:
 1073 059b E8000000 		call	_Unwind_Resume@PLT
 1073      00
 1074              	.LEHE23:
 1075              	.L47:
 1076              		.loc 5 35 1
 1077 05a0 488B45E8 		movq	-24(%rbp), %rax
 1078 05a4 64482B04 		subq	%fs:40, %rax
 1078      25280000 
 1078      00
 1079 05ad 7405     		je	.L51
 1080 05af E8000000 		call	__stack_chk_fail@PLT
 1080      00
 1081              	.L51:
 1082 05b4 488B5DF8 		movq	-8(%rbp), %rbx
 1083 05b8 C9       		leave
 1084              		.cfi_def_cfa 7, 8
 1085 05b9 C3       		ret
 1086              		.cfi_endproc
 1087              	.LFE1429:
 1088              		.section	.gcc_except_table
 1089              		.align 4
 1090              	.LLSDA1429:
 1091 0078 FF       		.byte	0xff
 1092 0079 9B       		.byte	0x9b
 1093 007a 1D       		.uleb128 .LLSDATT1429-.LLSDATTD1429
 1094              	.LLSDATTD1429:
 1095 007b 01       		.byte	0x1
 1096 007c 13       		.uleb128 .LLSDACSE1429-.LLSDACSB1429
 1097              	.LLSDACSB1429:
 1098 007d 28       		.uleb128 .LEHB20-.LFB1429
 1099 007e 40       		.uleb128 .LEHE20-.LEHB20
 1100 007f 6A       		.uleb128 .L52-.LFB1429
 1101 0080 01       		.uleb128 0x1
 1102 0081 76       		.uleb128 .LEHB21-.LFB1429
 1103 0082 3A       		.uleb128 .LEHE21-.LEHB21
 1104 0083 B701     		.uleb128 .L53-.LFB1429
 1105 0085 00       		.uleb128 0
 1106 0086 B001     		.uleb128 .LEHB22-.LFB1429
 1107 0088 05       		.uleb128 .LEHE22-.LEHB22
 1108 0089 00       		.uleb128 0
 1109 008a 00       		.uleb128 0
 1110 008b C901     		.uleb128 .LEHB23-.LFB1429
 1111 008d 05       		.uleb128 .LEHE23-.LEHB23
 1112 008e 00       		.uleb128 0
 1113 008f 00       		.uleb128 0
 1114              	.LLSDACSE1429:
 1115 0090 01       		.byte	0x1
 1116 0091 00       		.byte	0
 1117 0092 0000     		.align 4
 1118 0094 00000000 		.long	0
 1119              	
 1120              	.LLSDATT1429:
 1121              		.text
 1123              		.section	.rodata
 1124              	.LC14:
 1125 0150 56616C69 		.string	"ValidCheckCloseSucceeds"
 1125      64436865 
 1125      636B436C 
 1125      6F736553 
 1125      75636365 
 1126              		.text
 1127              		.align 2
 1129              	_ZN12_GLOBAL__N_127TestValidCheckCloseSucceedsC2Ev:
 1130              	.LFB1431:
  36:TestUnitTest++.cpp **** 
  37:TestUnitTest++.cpp **** TEST(ValidCheckCloseSucceeds)
 1131              		.loc 5 37 1
 1132              		.cfi_startproc
 1133 05ba 55       		pushq	%rbp
 1134              		.cfi_def_cfa_offset 16
 1135              		.cfi_offset 6, -16
 1136 05bb 4889E5   		movq	%rsp, %rbp
 1137              		.cfi_def_cfa_register 6
 1138 05be 53       		pushq	%rbx
 1139 05bf 4883EC18 		subq	$24, %rsp
 1140              		.cfi_offset 3, -24
 1141 05c3 48897DE8 		movq	%rdi, -24(%rbp)
 1142              	.LBB10:
 1143              		.loc 5 37 1
 1144 05c7 488B5DE8 		movq	-24(%rbp), %rbx
 1145 05cb E8000000 		call	_ZN13UnitTestSuite12GetSuiteNameEv
 1145      00
 1146 05d0 4889C2   		movq	%rax, %rdx
 1147 05d3 41B82500 		movl	$37, %r8d
 1147      0000
 1148 05d9 488D0500 		leaq	.LC1(%rip), %rax
 1148      000000
 1149 05e0 4889C1   		movq	%rax, %rcx
 1150 05e3 488D0500 		leaq	.LC14(%rip), %rax
 1150      000000
 1151 05ea 4889C6   		movq	%rax, %rsi
 1152 05ed 4889DF   		movq	%rbx, %rdi
 1153 05f0 E8000000 		call	_ZN8UnitTest4TestC2EPKcS2_S2_i@PLT
 1153      00
 1154 05f5 488D1500 		leaq	16+_ZTVN12_GLOBAL__N_127TestValidCheckCloseSucceedsE(%rip), %rdx
 1154      000000
 1155 05fc 488B45E8 		movq	-24(%rbp), %rax
 1156 0600 488910   		movq	%rdx, (%rax)
 1157              	.LBE10:
 1158 0603 90       		nop
 1159 0604 488B5DF8 		movq	-8(%rbp), %rbx
 1160 0608 C9       		leave
 1161              		.cfi_def_cfa 7, 8
 1162 0609 C3       		ret
 1163              		.cfi_endproc
 1164              	.LFE1431:
 1166              		.set	_ZN12_GLOBAL__N_127TestValidCheckCloseSucceedsC1Ev,_ZN12_GLOBAL__N_127TestValidCheckCloseSucc
 1167              		.local	_ZN12_GLOBAL__N_135testValidCheckCloseSucceedsInstanceE
 1168              		.comm	_ZN12_GLOBAL__N_135testValidCheckCloseSucceedsInstanceE,56,32
 1169              		.local	_ZN12_GLOBAL__N_128adderValidCheckCloseSucceedsE
 1170              		.comm	_ZN12_GLOBAL__N_128adderValidCheckCloseSucceedsE,1,1
 1171              		.section	.rodata
 1172              		.align 8
 1173              	.LC18:
 1174 0168 556E6861 		.string	"Unhandled exception in CHECK_CLOSE(2.0f, 2.001f)"
 1174      6E646C65 
 1174      64206578 
 1174      63657074 
 1174      696F6E20 
 1175 0199 00000000 		.align 8
 1175      000000
 1176              	.LC19:
 1177 01a0 556E6861 		.string	"Unhandled exception in CHECK_CLOSE(2.001f, 2.0f)"
 1177      6E646C65 
 1177      64206578 
 1177      63657074 
 1177      696F6E20 
 1178              		.text
 1179              		.align 2
 1181              	_ZNK12_GLOBAL__N_127TestValidCheckCloseSucceeds7RunImplEv:
 1182              	.LFB1433:
  38:TestUnitTest++.cpp **** {
 1183              		.loc 5 38 1
 1184              		.cfi_startproc
 1185              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 1186              		.cfi_lsda 0x1b,.LLSDA1433
 1187 060a F30F1EFA 		endbr64
 1188 060e 55       		pushq	%rbp
 1189              		.cfi_def_cfa_offset 16
 1190              		.cfi_offset 6, -16
 1191 060f 4889E5   		movq	%rsp, %rbp
 1192              		.cfi_def_cfa_register 6
 1193 0612 53       		pushq	%rbx
 1194 0613 4883EC58 		subq	$88, %rsp
 1195              		.cfi_offset 3, -24
 1196 0617 48897DA8 		movq	%rdi, -88(%rbp)
 1197              		.loc 5 38 1
 1198 061b 64488B04 		movq	%fs:40, %rax
 1198      25280000 
 1198      00
 1199 0624 488945E8 		movq	%rax, -24(%rbp)
 1200 0628 31C0     		xorl	%eax, %eax
 1201              	.LEHB24:
  39:TestUnitTest++.cpp ****     CHECK_CLOSE(2.0f, 2.001f, 0.01f);
 1202              		.loc 5 39 5
 1203 062a E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv@PLT
 1203      00
 1204 062f 488B08   		movq	(%rax), %rcx
 1205 0632 488D45C0 		leaq	-64(%rbp), %rax
 1206 0636 BA270000 		movl	$39, %edx
 1206      00
 1207 063b 4889CE   		movq	%rcx, %rsi
 1208 063e 4889C7   		movq	%rax, %rdi
 1209 0641 E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i@PLT
 1209      00
 1210              		.loc 5 39 5 is_stmt 0 discriminator 4
 1211 0646 F30F1005 		movss	.LC15(%rip), %xmm0
 1211      00000000 
 1212 064e F30F1145 		movss	%xmm0, -68(%rbp)
 1212      BC
 1213 0653 F30F1005 		movss	.LC16(%rip), %xmm0
 1213      00000000 
 1214 065b F30F1145 		movss	%xmm0, -72(%rbp)
 1214      B8
 1215 0660 F30F1005 		movss	.LC17(%rip), %xmm0
 1215      00000000 
 1216 0668 F30F1145 		movss	%xmm0, -76(%rbp)
 1216      B4
 1217 066d E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv@PLT
 1217      00
 1218 0672 488B00   		movq	(%rax), %rax
 1219 0675 488D7DC0 		leaq	-64(%rbp), %rdi
 1220 0679 488D4DBC 		leaq	-68(%rbp), %rcx
 1221 067d 488D55B8 		leaq	-72(%rbp), %rdx
 1222 0681 488D75B4 		leaq	-76(%rbp), %rsi
 1223 0685 4989F8   		movq	%rdi, %r8
 1224 0688 4889C7   		movq	%rax, %rdi
 1225 068b E8000000 		call	_ZN8UnitTest10CheckCloseIfffEEvRNS_11TestResultsERKT_RKT0_RKT1_RKNS_11TestDetailsE
 1225      00
 1226              	.LEHE24:
 1227              	.L57:
 1228              	.LEHB25:
  40:TestUnitTest++.cpp ****     CHECK_CLOSE(2.001f, 2.0f, 0.01f);
 1229              		.loc 5 40 5 is_stmt 1
 1230 0690 E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv@PLT
 1230      00
 1231 0695 488B08   		movq	(%rax), %rcx
 1232 0698 488D45C0 		leaq	-64(%rbp), %rax
 1233 069c BA280000 		movl	$40, %edx
 1233      00
 1234 06a1 4889CE   		movq	%rcx, %rsi
 1235 06a4 4889C7   		movq	%rax, %rdi
 1236 06a7 E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i@PLT
 1236      00
 1237              		.loc 5 40 5 is_stmt 0 discriminator 4
 1238 06ac F30F1005 		movss	.LC15(%rip), %xmm0
 1238      00000000 
 1239 06b4 F30F1145 		movss	%xmm0, -68(%rbp)
 1239      BC
 1240 06b9 F30F1005 		movss	.LC17(%rip), %xmm0
 1240      00000000 
 1241 06c1 F30F1145 		movss	%xmm0, -72(%rbp)
 1241      B8
 1242 06c6 F30F1005 		movss	.LC16(%rip), %xmm0
 1242      00000000 
 1243 06ce F30F1145 		movss	%xmm0, -76(%rbp)
 1243      B4
 1244 06d3 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv@PLT
 1244      00
 1245 06d8 488B00   		movq	(%rax), %rax
 1246 06db 488D7DC0 		leaq	-64(%rbp), %rdi
 1247 06df 488D4DBC 		leaq	-68(%rbp), %rcx
 1248 06e3 488D55B8 		leaq	-72(%rbp), %rdx
 1249 06e7 488D75B4 		leaq	-76(%rbp), %rsi
 1250 06eb 4989F8   		movq	%rdi, %r8
 1251 06ee 4889C7   		movq	%rax, %rdi
 1252 06f1 E8000000 		call	_ZN8UnitTest10CheckCloseIfffEEvRNS_11TestResultsERKT_RKT0_RKT1_RKNS_11TestDetailsE
 1252      00
 1253              	.LEHE25:
  41:TestUnitTest++.cpp **** }
 1254              		.loc 5 41 1 is_stmt 1
 1255 06f6 E9CB0000 		jmp	.L55
 1255      00
 1256              	.L63:
 1257 06fb F30F1EFA 		endbr64
  39:TestUnitTest++.cpp ****     CHECK_CLOSE(2.0f, 2.001f, 0.01f);
 1258              		.loc 5 39 5
 1259 06ff 4889C7   		movq	%rax, %rdi
 1260 0702 E8000000 		call	__cxa_begin_catch@PLT
 1260      00
 1261              	.LEHB26:
 1262 0707 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv@PLT
 1262      00
  39:TestUnitTest++.cpp ****     CHECK_CLOSE(2.0f, 2.001f, 0.01f);
 1263              		.loc 5 39 5 is_stmt 0 discriminator 3
 1264 070c 488B18   		movq	(%rax), %rbx
 1265 070f E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv@PLT
 1265      00
  39:TestUnitTest++.cpp ****     CHECK_CLOSE(2.0f, 2.001f, 0.01f);
 1266              		.loc 5 39 5 discriminator 11
 1267 0714 488B08   		movq	(%rax), %rcx
 1268 0717 488D45C0 		leaq	-64(%rbp), %rax
 1269 071b BA270000 		movl	$39, %edx
 1269      00
 1270 0720 4889CE   		movq	%rcx, %rsi
 1271 0723 4889C7   		movq	%rax, %rdi
 1272 0726 E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i@PLT
 1272      00
  39:TestUnitTest++.cpp ****     CHECK_CLOSE(2.0f, 2.001f, 0.01f);
 1273              		.loc 5 39 5 discriminator 15
 1274 072b 488D45C0 		leaq	-64(%rbp), %rax
 1275 072f 488D1500 		leaq	.LC18(%rip), %rdx
 1275      000000
 1276 0736 4889C6   		movq	%rax, %rsi
 1277 0739 4889DF   		movq	%rbx, %rdi
 1278 073c E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc@PLT
 1278      00
 1279              	.LEHE26:
 1280              	.LEHB27:
  39:TestUnitTest++.cpp ****     CHECK_CLOSE(2.0f, 2.001f, 0.01f);
 1281              		.loc 5 39 5 discriminator 17
 1282 0741 E8000000 		call	__cxa_end_catch@PLT
 1282      00
 1283              	.LEHE27:
 1284 0746 E945FFFF 		jmp	.L57
 1284      FF
 1285              	.L64:
 1286 074b F30F1EFA 		endbr64
  39:TestUnitTest++.cpp ****     CHECK_CLOSE(2.0f, 2.001f, 0.01f);
 1287              		.loc 5 39 5
 1288 074f 4889C3   		movq	%rax, %rbx
 1289 0752 E8000000 		call	__cxa_end_catch@PLT
 1289      00
 1290 0757 4889D8   		movq	%rbx, %rax
 1291 075a 4889C7   		movq	%rax, %rdi
 1292              	.LEHB28:
 1293 075d E8000000 		call	_Unwind_Resume@PLT
 1293      00
 1294              	.LEHE28:
 1295              	.L65:
 1296 0762 F30F1EFA 		endbr64
  40:TestUnitTest++.cpp ****     CHECK_CLOSE(2.001f, 2.0f, 0.01f);
 1297              		.loc 5 40 5 is_stmt 1
 1298 0766 4889C7   		movq	%rax, %rdi
 1299 0769 E8000000 		call	__cxa_begin_catch@PLT
 1299      00
 1300              	.LEHB29:
 1301 076e E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv@PLT
 1301      00
  40:TestUnitTest++.cpp ****     CHECK_CLOSE(2.001f, 2.0f, 0.01f);
 1302              		.loc 5 40 5 is_stmt 0 discriminator 3
 1303 0773 488B18   		movq	(%rax), %rbx
 1304 0776 E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv@PLT
 1304      00
  40:TestUnitTest++.cpp ****     CHECK_CLOSE(2.001f, 2.0f, 0.01f);
 1305              		.loc 5 40 5 discriminator 11
 1306 077b 488B08   		movq	(%rax), %rcx
 1307 077e 488D45C0 		leaq	-64(%rbp), %rax
 1308 0782 BA280000 		movl	$40, %edx
 1308      00
 1309 0787 4889CE   		movq	%rcx, %rsi
 1310 078a 4889C7   		movq	%rax, %rdi
 1311 078d E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i@PLT
 1311      00
  40:TestUnitTest++.cpp ****     CHECK_CLOSE(2.001f, 2.0f, 0.01f);
 1312              		.loc 5 40 5 discriminator 15
 1313 0792 488D45C0 		leaq	-64(%rbp), %rax
 1314 0796 488D1500 		leaq	.LC19(%rip), %rdx
 1314      000000
 1315 079d 4889C6   		movq	%rax, %rsi
 1316 07a0 4889DF   		movq	%rbx, %rdi
 1317 07a3 E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc@PLT
 1317      00
 1318              	.LEHE29:
 1319              	.LEHB30:
  40:TestUnitTest++.cpp ****     CHECK_CLOSE(2.001f, 2.0f, 0.01f);
 1320              		.loc 5 40 5 discriminator 17
 1321 07a8 E8000000 		call	__cxa_end_catch@PLT
 1321      00
 1322              	.LEHE30:
 1323              		.loc 5 41 1 is_stmt 1 discriminator 17
 1324 07ad EB17     		jmp	.L55
 1325              	.L66:
 1326 07af F30F1EFA 		endbr64
  40:TestUnitTest++.cpp ****     CHECK_CLOSE(2.001f, 2.0f, 0.01f);
 1327              		.loc 5 40 5
 1328 07b3 4889C3   		movq	%rax, %rbx
 1329 07b6 E8000000 		call	__cxa_end_catch@PLT
 1329      00
 1330 07bb 4889D8   		movq	%rbx, %rax
 1331 07be 4889C7   		movq	%rax, %rdi
 1332              	.LEHB31:
 1333 07c1 E8000000 		call	_Unwind_Resume@PLT
 1333      00
 1334              	.LEHE31:
 1335              	.L55:
 1336              		.loc 5 41 1
 1337 07c6 488B45E8 		movq	-24(%rbp), %rax
 1338 07ca 64482B04 		subq	%fs:40, %rax
 1338      25280000 
 1338      00
 1339 07d3 7405     		je	.L62
 1340 07d5 E8000000 		call	__stack_chk_fail@PLT
 1340      00
 1341              	.L62:
 1342 07da 488B5DF8 		movq	-8(%rbp), %rbx
 1343 07de C9       		leave
 1344              		.cfi_def_cfa 7, 8
 1345 07df C3       		ret
 1346              		.cfi_endproc
 1347              	.LFE1433:
 1348              		.section	.gcc_except_table
 1349              		.align 4
 1350              	.LLSDA1433:
 1351 0098 FF       		.byte	0xff
 1352 0099 9B       		.byte	0x9b
 1353 009a 35       		.uleb128 .LLSDATT1433-.LLSDATTD1433
 1354              	.LLSDATTD1433:
 1355 009b 01       		.byte	0x1
 1356 009c 2B       		.uleb128 .LLSDACSE1433-.LLSDACSB1433
 1357              	.LLSDACSB1433:
 1358 009d 20       		.uleb128 .LEHB24-.LFB1433
 1359 009e 66       		.uleb128 .LEHE24-.LEHB24
 1360 009f F101     		.uleb128 .L63-.LFB1433
 1361 00a1 01       		.uleb128 0x1
 1362 00a2 8601     		.uleb128 .LEHB25-.LFB1433
 1363 00a4 66       		.uleb128 .LEHE25-.LEHB25
 1364 00a5 D802     		.uleb128 .L65-.LFB1433
 1365 00a7 01       		.uleb128 0x1
 1366 00a8 FD01     		.uleb128 .LEHB26-.LFB1433
 1367 00aa 3A       		.uleb128 .LEHE26-.LEHB26
 1368 00ab C102     		.uleb128 .L64-.LFB1433
 1369 00ad 00       		.uleb128 0
 1370 00ae B702     		.uleb128 .LEHB27-.LFB1433
 1371 00b0 05       		.uleb128 .LEHE27-.LEHB27
 1372 00b1 00       		.uleb128 0
 1373 00b2 00       		.uleb128 0
 1374 00b3 D302     		.uleb128 .LEHB28-.LFB1433
 1375 00b5 05       		.uleb128 .LEHE28-.LEHB28
 1376 00b6 00       		.uleb128 0
 1377 00b7 00       		.uleb128 0
 1378 00b8 E402     		.uleb128 .LEHB29-.LFB1433
 1379 00ba 3A       		.uleb128 .LEHE29-.LEHB29
 1380 00bb A503     		.uleb128 .L66-.LFB1433
 1381 00bd 00       		.uleb128 0
 1382 00be 9E03     		.uleb128 .LEHB30-.LFB1433
 1383 00c0 05       		.uleb128 .LEHE30-.LEHB30
 1384 00c1 00       		.uleb128 0
 1385 00c2 00       		.uleb128 0
 1386 00c3 B703     		.uleb128 .LEHB31-.LFB1433
 1387 00c5 05       		.uleb128 .LEHE31-.LEHB31
 1388 00c6 00       		.uleb128 0
 1389 00c7 00       		.uleb128 0
 1390              	.LLSDACSE1433:
 1391 00c8 01       		.byte	0x1
 1392 00c9 00       		.byte	0
 1393 00ca 0000     		.align 4
 1394 00cc 00000000 		.long	0
 1395              	
 1396              	.LLSDATT1433:
 1397              		.text
 1399              		.section	.rodata
 1400              	.LC20:
 1401 01d1 41727261 		.string	"ArrayCloseSucceeds"
 1401      79436C6F 
 1401      73655375 
 1401      63636565 
 1401      647300
 1402              		.text
 1403              		.align 2
 1405              	_ZN12_GLOBAL__N_122TestArrayCloseSucceedsC2Ev:
 1406              	.LFB1435:
  42:TestUnitTest++.cpp **** 
  43:TestUnitTest++.cpp **** TEST(ArrayCloseSucceeds)
 1407              		.loc 5 43 1
 1408              		.cfi_startproc
 1409 07e0 55       		pushq	%rbp
 1410              		.cfi_def_cfa_offset 16
 1411              		.cfi_offset 6, -16
 1412 07e1 4889E5   		movq	%rsp, %rbp
 1413              		.cfi_def_cfa_register 6
 1414 07e4 53       		pushq	%rbx
 1415 07e5 4883EC18 		subq	$24, %rsp
 1416              		.cfi_offset 3, -24
 1417 07e9 48897DE8 		movq	%rdi, -24(%rbp)
 1418              	.LBB11:
 1419              		.loc 5 43 1
 1420 07ed 488B5DE8 		movq	-24(%rbp), %rbx
 1421 07f1 E8000000 		call	_ZN13UnitTestSuite12GetSuiteNameEv
 1421      00
 1422 07f6 4889C2   		movq	%rax, %rdx
 1423 07f9 41B82B00 		movl	$43, %r8d
 1423      0000
 1424 07ff 488D0500 		leaq	.LC1(%rip), %rax
 1424      000000
 1425 0806 4889C1   		movq	%rax, %rcx
 1426 0809 488D0500 		leaq	.LC20(%rip), %rax
 1426      000000
 1427 0810 4889C6   		movq	%rax, %rsi
 1428 0813 4889DF   		movq	%rbx, %rdi
 1429 0816 E8000000 		call	_ZN8UnitTest4TestC2EPKcS2_S2_i@PLT
 1429      00
 1430 081b 488D1500 		leaq	16+_ZTVN12_GLOBAL__N_122TestArrayCloseSucceedsE(%rip), %rdx
 1430      000000
 1431 0822 488B45E8 		movq	-24(%rbp), %rax
 1432 0826 488910   		movq	%rdx, (%rax)
 1433              	.LBE11:
 1434 0829 90       		nop
 1435 082a 488B5DF8 		movq	-8(%rbp), %rbx
 1436 082e C9       		leave
 1437              		.cfi_def_cfa 7, 8
 1438 082f C3       		ret
 1439              		.cfi_endproc
 1440              	.LFE1435:
 1442              		.set	_ZN12_GLOBAL__N_122TestArrayCloseSucceedsC1Ev,_ZN12_GLOBAL__N_122TestArrayCloseSucceedsC2Ev
 1443              		.local	_ZN12_GLOBAL__N_130testArrayCloseSucceedsInstanceE
 1444              		.comm	_ZN12_GLOBAL__N_130testArrayCloseSucceedsInstanceE,56,32
 1445              		.local	_ZN12_GLOBAL__N_123adderArrayCloseSucceedsE
 1446              		.comm	_ZN12_GLOBAL__N_123adderArrayCloseSucceedsE,1,1
 1447              		.section	.rodata
 1448 01e4 00000000 		.align 8
 1449              	.LC25:
 1450 01e8 556E6861 		.string	"Unhandled exception in CHECK_ARRAY_CLOSE(a1, a2)"
 1450      6E646C65 
 1450      64206578 
 1450      63657074 
 1450      696F6E20 
 1451              		.text
 1452              		.align 2
 1454              	_ZNK12_GLOBAL__N_122TestArrayCloseSucceeds7RunImplEv:
 1455              	.LFB1437:
  44:TestUnitTest++.cpp **** {
 1456              		.loc 5 44 1
 1457              		.cfi_startproc
 1458              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 1459              		.cfi_lsda 0x1b,.LLSDA1437
 1460 0830 F30F1EFA 		endbr64
 1461 0834 55       		pushq	%rbp
 1462              		.cfi_def_cfa_offset 16
 1463              		.cfi_offset 6, -16
 1464 0835 4889E5   		movq	%rsp, %rbp
 1465              		.cfi_def_cfa_register 6
 1466 0838 53       		pushq	%rbx
 1467 0839 4883EC68 		subq	$104, %rsp
 1468              		.cfi_offset 3, -24
 1469 083d 48897D98 		movq	%rdi, -104(%rbp)
 1470              		.loc 5 44 1
 1471 0841 64488B04 		movq	%fs:40, %rax
 1471      25280000 
 1471      00
 1472 084a 488945E8 		movq	%rax, -24(%rbp)
 1473 084e 31C0     		xorl	%eax, %eax
  45:TestUnitTest++.cpp ****     float const a1[] = {1, 2, 3};
 1474              		.loc 5 45 17
 1475 0850 F30F1005 		movss	.LC21(%rip), %xmm0
 1475      00000000 
 1476 0858 F30F1145 		movss	%xmm0, -48(%rbp)
 1476      D0
 1477 085d F30F1005 		movss	.LC17(%rip), %xmm0
 1477      00000000 
 1478 0865 F30F1145 		movss	%xmm0, -44(%rbp)
 1478      D4
 1479 086a F30F1005 		movss	.LC22(%rip), %xmm0
 1479      00000000 
 1480 0872 F30F1145 		movss	%xmm0, -40(%rbp)
 1480      D8
  46:TestUnitTest++.cpp ****     float const a2[] = {1, 2.01f, 3};
 1481              		.loc 5 46 17
 1482 0877 F30F1005 		movss	.LC21(%rip), %xmm0
 1482      00000000 
 1483 087f F30F1145 		movss	%xmm0, -36(%rbp)
 1483      DC
 1484 0884 F30F1005 		movss	.LC23(%rip), %xmm0
 1484      00000000 
 1485 088c F30F1145 		movss	%xmm0, -32(%rbp)
 1485      E0
 1486 0891 F30F1005 		movss	.LC22(%rip), %xmm0
 1486      00000000 
 1487 0899 F30F1145 		movss	%xmm0, -28(%rbp)
 1487      E4
 1488              	.LEHB32:
  47:TestUnitTest++.cpp ****     CHECK_ARRAY_CLOSE(a1, a2, 3, 0.1f);
 1489              		.loc 5 47 5
 1490 089e E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv@PLT
 1490      00
 1491 08a3 488B08   		movq	(%rax), %rcx
 1492 08a6 488D45B0 		leaq	-80(%rbp), %rax
 1493 08aa BA2F0000 		movl	$47, %edx
 1493      00
 1494 08af 4889CE   		movq	%rcx, %rsi
 1495 08b2 4889C7   		movq	%rax, %rdi
 1496 08b5 E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i@PLT
 1496      00
 1497              		.loc 5 47 5 is_stmt 0 discriminator 4
 1498 08ba F30F1005 		movss	.LC24(%rip), %xmm0
 1498      00000000 
 1499 08c2 F30F1145 		movss	%xmm0, -84(%rbp)
 1499      AC
 1500 08c7 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv@PLT
 1500      00
 1501 08cc 488B00   		movq	(%rax), %rax
 1502 08cf 488D7DB0 		leaq	-80(%rbp), %rdi
 1503 08d3 488D4DAC 		leaq	-84(%rbp), %rcx
 1504 08d7 488D55DC 		leaq	-36(%rbp), %rdx
 1505 08db 488D75D0 		leaq	-48(%rbp), %rsi
 1506 08df 4989F9   		movq	%rdi, %r9
 1507 08e2 4989C8   		movq	%rcx, %r8
 1508 08e5 B9030000 		movl	$3, %ecx
 1508      00
 1509 08ea 4889C7   		movq	%rax, %rdi
 1510 08ed E8000000 		call	_ZN8UnitTest15CheckArrayCloseIA3_fS1_fEEvRNS_11TestResultsERKT_RKT0_iRKT1_RKNS_11TestDetailsE
 1510      00
 1511              	.LEHE32:
  48:TestUnitTest++.cpp **** }
 1512              		.loc 5 48 1 is_stmt 1
 1513 08f2 EB64     		jmp	.L68
 1514              	.L73:
 1515 08f4 F30F1EFA 		endbr64
  47:TestUnitTest++.cpp ****     CHECK_ARRAY_CLOSE(a1, a2, 3, 0.1f);
 1516              		.loc 5 47 5
 1517 08f8 4889C7   		movq	%rax, %rdi
 1518 08fb E8000000 		call	__cxa_begin_catch@PLT
 1518      00
 1519              	.LEHB33:
 1520 0900 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv@PLT
 1520      00
  47:TestUnitTest++.cpp ****     CHECK_ARRAY_CLOSE(a1, a2, 3, 0.1f);
 1521              		.loc 5 47 5 is_stmt 0 discriminator 3
 1522 0905 488B18   		movq	(%rax), %rbx
 1523 0908 E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv@PLT
 1523      00
  47:TestUnitTest++.cpp ****     CHECK_ARRAY_CLOSE(a1, a2, 3, 0.1f);
 1524              		.loc 5 47 5 discriminator 11
 1525 090d 488B08   		movq	(%rax), %rcx
 1526 0910 488D45B0 		leaq	-80(%rbp), %rax
 1527 0914 BA2F0000 		movl	$47, %edx
 1527      00
 1528 0919 4889CE   		movq	%rcx, %rsi
 1529 091c 4889C7   		movq	%rax, %rdi
 1530 091f E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i@PLT
 1530      00
  47:TestUnitTest++.cpp ****     CHECK_ARRAY_CLOSE(a1, a2, 3, 0.1f);
 1531              		.loc 5 47 5 discriminator 15
 1532 0924 488D45B0 		leaq	-80(%rbp), %rax
 1533 0928 488D1500 		leaq	.LC25(%rip), %rdx
 1533      000000
 1534 092f 4889C6   		movq	%rax, %rsi
 1535 0932 4889DF   		movq	%rbx, %rdi
 1536 0935 E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc@PLT
 1536      00
 1537              	.LEHE33:
 1538              	.LEHB34:
  47:TestUnitTest++.cpp ****     CHECK_ARRAY_CLOSE(a1, a2, 3, 0.1f);
 1539              		.loc 5 47 5 discriminator 17
 1540 093a E8000000 		call	__cxa_end_catch@PLT
 1540      00
 1541              	.LEHE34:
 1542              		.loc 5 48 1 is_stmt 1 discriminator 17
 1543 093f EB17     		jmp	.L68
 1544              	.L74:
 1545 0941 F30F1EFA 		endbr64
  47:TestUnitTest++.cpp ****     CHECK_ARRAY_CLOSE(a1, a2, 3, 0.1f);
 1546              		.loc 5 47 5
 1547 0945 4889C3   		movq	%rax, %rbx
 1548 0948 E8000000 		call	__cxa_end_catch@PLT
 1548      00
 1549 094d 4889D8   		movq	%rbx, %rax
 1550 0950 4889C7   		movq	%rax, %rdi
 1551              	.LEHB35:
 1552 0953 E8000000 		call	_Unwind_Resume@PLT
 1552      00
 1553              	.LEHE35:
 1554              	.L68:
 1555              		.loc 5 48 1
 1556 0958 488B45E8 		movq	-24(%rbp), %rax
 1557 095c 64482B04 		subq	%fs:40, %rax
 1557      25280000 
 1557      00
 1558 0965 7405     		je	.L72
 1559 0967 E8000000 		call	__stack_chk_fail@PLT
 1559      00
 1560              	.L72:
 1561 096c 488B5DF8 		movq	-8(%rbp), %rbx
 1562 0970 C9       		leave
 1563              		.cfi_def_cfa 7, 8
 1564 0971 C3       		ret
 1565              		.cfi_endproc
 1566              	.LFE1437:
 1567              		.section	.gcc_except_table
 1568              		.align 4
 1569              	.LLSDA1437:
 1570 00d0 FF       		.byte	0xff
 1571 00d1 9B       		.byte	0x9b
 1572 00d2 1D       		.uleb128 .LLSDATT1437-.LLSDATTD1437
 1573              	.LLSDATTD1437:
 1574 00d3 01       		.byte	0x1
 1575 00d4 15       		.uleb128 .LLSDACSE1437-.LLSDACSB1437
 1576              	.LLSDACSB1437:
 1577 00d5 6E       		.uleb128 .LEHB32-.LFB1437
 1578 00d6 54       		.uleb128 .LEHE32-.LEHB32
 1579 00d7 C401     		.uleb128 .L73-.LFB1437
 1580 00d9 01       		.uleb128 0x1
 1581 00da D001     		.uleb128 .LEHB33-.LFB1437
 1582 00dc 3A       		.uleb128 .LEHE33-.LEHB33
 1583 00dd 9102     		.uleb128 .L74-.LFB1437
 1584 00df 00       		.uleb128 0
 1585 00e0 8A02     		.uleb128 .LEHB34-.LFB1437
 1586 00e2 05       		.uleb128 .LEHE34-.LEHB34
 1587 00e3 00       		.uleb128 0
 1588 00e4 00       		.uleb128 0
 1589 00e5 A302     		.uleb128 .LEHB35-.LFB1437
 1590 00e7 05       		.uleb128 .LEHE35-.LEHB35
 1591 00e8 00       		.uleb128 0
 1592 00e9 00       		.uleb128 0
 1593              	.LLSDACSE1437:
 1594 00ea 01       		.byte	0x1
 1595 00eb 00       		.byte	0
 1596              		.align 4
 1597 00ec 00000000 		.long	0
 1598              	
 1599              	.LLSDATT1437:
 1600              		.text
 1602              		.section	.rodata
 1603 0219 00000000 		.align 8
 1603      000000
 1604              	.LC26:
 1605 0220 43686563 		.string	"CheckArrayCloseWorksWithVectors"
 1605      6B417272 
 1605      6179436C 
 1605      6F736557 
 1605      6F726B73 
 1606              		.text
 1607              		.align 2
 1609              	_ZN12_GLOBAL__N_135TestCheckArrayCloseWorksWithVectorsC2Ev:
 1610              	.LFB1439:
  49:TestUnitTest++.cpp **** 
  50:TestUnitTest++.cpp **** TEST (CheckArrayCloseWorksWithVectors)
 1611              		.loc 5 50 1
 1612              		.cfi_startproc
 1613 0972 55       		pushq	%rbp
 1614              		.cfi_def_cfa_offset 16
 1615              		.cfi_offset 6, -16
 1616 0973 4889E5   		movq	%rsp, %rbp
 1617              		.cfi_def_cfa_register 6
 1618 0976 53       		pushq	%rbx
 1619 0977 4883EC18 		subq	$24, %rsp
 1620              		.cfi_offset 3, -24
 1621 097b 48897DE8 		movq	%rdi, -24(%rbp)
 1622              	.LBB12:
 1623              		.loc 5 50 1
 1624 097f 488B5DE8 		movq	-24(%rbp), %rbx
 1625 0983 E8000000 		call	_ZN13UnitTestSuite12GetSuiteNameEv
 1625      00
 1626 0988 4889C2   		movq	%rax, %rdx
 1627 098b 41B83200 		movl	$50, %r8d
 1627      0000
 1628 0991 488D0500 		leaq	.LC1(%rip), %rax
 1628      000000
 1629 0998 4889C1   		movq	%rax, %rcx
 1630 099b 488D0500 		leaq	.LC26(%rip), %rax
 1630      000000
 1631 09a2 4889C6   		movq	%rax, %rsi
 1632 09a5 4889DF   		movq	%rbx, %rdi
 1633 09a8 E8000000 		call	_ZN8UnitTest4TestC2EPKcS2_S2_i@PLT
 1633      00
 1634 09ad 488D1500 		leaq	16+_ZTVN12_GLOBAL__N_135TestCheckArrayCloseWorksWithVectorsE(%rip), %rdx
 1634      000000
 1635 09b4 488B45E8 		movq	-24(%rbp), %rax
 1636 09b8 488910   		movq	%rdx, (%rax)
 1637              	.LBE12:
 1638 09bb 90       		nop
 1639 09bc 488B5DF8 		movq	-8(%rbp), %rbx
 1640 09c0 C9       		leave
 1641              		.cfi_def_cfa 7, 8
 1642 09c1 C3       		ret
 1643              		.cfi_endproc
 1644              	.LFE1439:
 1646              		.set	_ZN12_GLOBAL__N_135TestCheckArrayCloseWorksWithVectorsC1Ev,_ZN12_GLOBAL__N_135TestCheckArrayC
 1647              		.local	_ZN12_GLOBAL__N_143testCheckArrayCloseWorksWithVectorsInstanceE
 1648              		.comm	_ZN12_GLOBAL__N_143testCheckArrayCloseWorksWithVectorsInstanceE,56,32
 1649              		.local	_ZN12_GLOBAL__N_136adderCheckArrayCloseWorksWithVectorsE
 1650              		.comm	_ZN12_GLOBAL__N_136adderCheckArrayCloseWorksWithVectorsE,1,1
 1651              		.section	.rodata
 1652              		.align 8
 1653              	.LC29:
 1654 0240 556E6861 		.string	"Unhandled exception in CHECK_ARRAY_CLOSE(a, a)"
 1654      6E646C65 
 1654      64206578 
 1654      63657074 
 1654      696F6E20 
 1655              		.text
 1656              		.align 2
 1658              	_ZNK12_GLOBAL__N_135TestCheckArrayCloseWorksWithVectors7RunImplEv:
 1659              	.LFB1441:
  51:TestUnitTest++.cpp **** {
 1660              		.loc 5 51 1
 1661              		.cfi_startproc
 1662              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 1663              		.cfi_lsda 0x1b,.LLSDA1441
 1664 09c2 F30F1EFA 		endbr64
 1665 09c6 55       		pushq	%rbp
 1666              		.cfi_def_cfa_offset 16
 1667              		.cfi_offset 6, -16
 1668 09c7 4889E5   		movq	%rsp, %rbp
 1669              		.cfi_def_cfa_register 6
 1670 09ca 53       		pushq	%rbx
 1671 09cb 4883EC78 		subq	$120, %rsp
 1672              		.cfi_offset 3, -24
 1673 09cf 48897D88 		movq	%rdi, -120(%rbp)
 1674              		.loc 5 51 1
 1675 09d3 64488B04 		movq	%fs:40, %rax
 1675      25280000 
 1675      00
 1676 09dc 488945E8 		movq	%rax, -24(%rbp)
 1677 09e0 31C0     		xorl	%eax, %eax
  52:TestUnitTest++.cpp ****     std::vector< float > a(4);
 1678              		.loc 5 52 29
 1679 09e2 488D4598 		leaq	-104(%rbp), %rax
 1680 09e6 4889C7   		movq	%rax, %rdi
 1681 09e9 E8000000 		call	_ZNSaIfEC1Ev
 1681      00
 1682 09ee 660FEFC0 		pxor	%xmm0, %xmm0
 1683 09f2 F30F1145 		movss	%xmm0, -64(%rbp)
 1683      C0
 1684 09f7 488D4D98 		leaq	-104(%rbp), %rcx
 1685 09fb 488D55C0 		leaq	-64(%rbp), %rdx
 1686 09ff 488D45A0 		leaq	-96(%rbp), %rax
 1687 0a03 BE040000 		movl	$4, %esi
 1687      00
 1688 0a08 4889C7   		movq	%rax, %rdi
 1689              	.LEHB36:
 1690 0a0b E8000000 		call	_ZNSt6vectorIfSaIfEEC1EmRKfRKS0_
 1690      00
 1691              	.LEHE36:
 1692 0a10 488D4598 		leaq	-104(%rbp), %rax
 1693 0a14 4889C7   		movq	%rax, %rdi
 1694 0a17 E8000000 		call	_ZNSaIfED1Ev
 1694      00
 1695              	.LBB13:
  53:TestUnitTest++.cpp ****     for (int i = 0; i < 4; ++i)
 1696              		.loc 5 53 14 discriminator 1
 1697 0a1c C7459C00 		movl	$0, -100(%rbp)
 1697      000000
 1698              		.loc 5 53 5 discriminator 1
 1699 0a23 EB26     		jmp	.L77
 1700              	.L78:
  54:TestUnitTest++.cpp ****         a[i] = (float)i;
 1701              		.loc 5 54 12 discriminator 3
 1702 0a25 8B459C   		movl	-100(%rbp), %eax
 1703 0a28 4863D0   		movslq	%eax, %rdx
 1704 0a2b 488D45A0 		leaq	-96(%rbp), %rax
 1705 0a2f 4889D6   		movq	%rdx, %rsi
 1706 0a32 4889C7   		movq	%rax, %rdi
 1707 0a35 E8000000 		call	_ZNSt6vectorIfSaIfEEixEm
 1707      00
 1708              		.loc 5 54 16 discriminator 3
 1709 0a3a 660FEFC0 		pxor	%xmm0, %xmm0
 1710 0a3e F30F2A45 		cvtsi2ssl	-100(%rbp), %xmm0
 1710      9C
 1711              		.loc 5 54 14 discriminator 3
 1712 0a43 F30F1100 		movss	%xmm0, (%rax)
  53:TestUnitTest++.cpp ****     for (int i = 0; i < 4; ++i)
 1713              		.loc 5 53 5 discriminator 3
 1714 0a47 83459C01 		addl	$1, -100(%rbp)
 1715              	.L77:
  53:TestUnitTest++.cpp ****     for (int i = 0; i < 4; ++i)
 1716              		.loc 5 53 23 discriminator 1
 1717 0a4b 837D9C03 		cmpl	$3, -100(%rbp)
 1718 0a4f 7ED4     		jle	.L78
 1719              	.LEHB37:
 1720              	.LBE13:
  55:TestUnitTest++.cpp **** 
  56:TestUnitTest++.cpp ****     CHECK_ARRAY_CLOSE(a, a, (int)a.size(), 0.0001f);
 1721              		.loc 5 56 5
 1722 0a51 E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv@PLT
 1722      00
 1723 0a56 488B08   		movq	(%rax), %rcx
 1724 0a59 488D45C0 		leaq	-64(%rbp), %rax
 1725 0a5d BA380000 		movl	$56, %edx
 1725      00
 1726 0a62 4889CE   		movq	%rcx, %rsi
 1727 0a65 4889C7   		movq	%rax, %rdi
 1728 0a68 E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i@PLT
 1728      00
 1729              		.loc 5 56 5 is_stmt 0 discriminator 4
 1730 0a6d F30F1005 		movss	.LC28(%rip), %xmm0
 1730      00000000 
 1731 0a75 F30F1145 		movss	%xmm0, -104(%rbp)
 1731      98
 1732 0a7a 488D45A0 		leaq	-96(%rbp), %rax
 1733 0a7e 4889C7   		movq	%rax, %rdi
 1734 0a81 E8000000 		call	_ZNKSt6vectorIfSaIfEE4sizeEv
 1734      00
 1735 0a86 89C3     		movl	%eax, %ebx
 1736 0a88 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv@PLT
 1736      00
 1737 0a8d 488B00   		movq	(%rax), %rax
 1738 0a90 488D7DC0 		leaq	-64(%rbp), %rdi
 1739 0a94 488D4D98 		leaq	-104(%rbp), %rcx
 1740 0a98 488D55A0 		leaq	-96(%rbp), %rdx
 1741 0a9c 488D75A0 		leaq	-96(%rbp), %rsi
 1742 0aa0 4989F9   		movq	%rdi, %r9
 1743 0aa3 4989C8   		movq	%rcx, %r8
 1744 0aa6 89D9     		movl	%ebx, %ecx
 1745 0aa8 4889C7   		movq	%rax, %rdi
 1746 0aab E8000000 		call	_ZN8UnitTest15CheckArrayCloseISt6vectorIfSaIfEES3_fEEvRNS_11TestResultsERKT_RKT0_iRKT1_RKNS_1
 1746      00
 1747              	.LEHE37:
 1748              	.L81:
  57:TestUnitTest++.cpp **** }
 1749              		.loc 5 57 1 is_stmt 1
 1750 0ab0 488D45A0 		leaq	-96(%rbp), %rax
 1751 0ab4 4889C7   		movq	%rax, %rdi
 1752              	.LEHB38:
 1753 0ab7 E8000000 		call	_ZNSt6vectorIfSaIfEED1Ev
 1753      00
 1754 0abc 488B45E8 		movq	-24(%rbp), %rax
 1755 0ac0 64482B04 		subq	%fs:40, %rax
 1755      25280000 
 1755      00
 1756 0ac9 0F84A400 		je	.L84
 1756      0000
 1757 0acf E99A0000 		jmp	.L89
 1757      00
 1758              	.L85:
 1759 0ad4 F30F1EFA 		endbr64
 1760 0ad8 4889C3   		movq	%rax, %rbx
 1761 0adb 488D4598 		leaq	-104(%rbp), %rax
 1762 0adf 4889C7   		movq	%rax, %rdi
 1763 0ae2 E8000000 		call	_ZNSaIfED1Ev
 1763      00
 1764 0ae7 4889D8   		movq	%rbx, %rax
 1765 0aea 4889C7   		movq	%rax, %rdi
 1766 0aed E8000000 		call	_Unwind_Resume@PLT
 1766      00
 1767              	.LEHE38:
 1768              	.L86:
 1769 0af2 F30F1EFA 		endbr64
  56:TestUnitTest++.cpp **** }
 1770              		.loc 5 56 5
 1771 0af6 4889C7   		movq	%rax, %rdi
 1772 0af9 E8000000 		call	__cxa_begin_catch@PLT
 1772      00
 1773              	.LEHB39:
 1774 0afe E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv@PLT
 1774      00
  56:TestUnitTest++.cpp **** }
 1775              		.loc 5 56 5 is_stmt 0 discriminator 3
 1776 0b03 488B18   		movq	(%rax), %rbx
 1777 0b06 E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv@PLT
 1777      00
  56:TestUnitTest++.cpp **** }
 1778              		.loc 5 56 5 discriminator 11
 1779 0b0b 488B08   		movq	(%rax), %rcx
 1780 0b0e 488D45C0 		leaq	-64(%rbp), %rax
 1781 0b12 BA380000 		movl	$56, %edx
 1781      00
 1782 0b17 4889CE   		movq	%rcx, %rsi
 1783 0b1a 4889C7   		movq	%rax, %rdi
 1784 0b1d E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i@PLT
 1784      00
  56:TestUnitTest++.cpp **** }
 1785              		.loc 5 56 5 discriminator 15
 1786 0b22 488D45C0 		leaq	-64(%rbp), %rax
 1787 0b26 488D1500 		leaq	.LC29(%rip), %rdx
 1787      000000
 1788 0b2d 4889C6   		movq	%rax, %rsi
 1789 0b30 4889DF   		movq	%rbx, %rdi
 1790 0b33 E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc@PLT
 1790      00
 1791              	.LEHE39:
 1792              	.LEHB40:
  56:TestUnitTest++.cpp **** }
 1793              		.loc 5 56 5 discriminator 17
 1794 0b38 E8000000 		call	__cxa_end_catch@PLT
 1794      00
 1795              	.LEHE40:
  56:TestUnitTest++.cpp **** }
 1796              		.loc 5 56 5
 1797 0b3d E96EFFFF 		jmp	.L81
 1797      FF
 1798              	.L88:
 1799 0b42 F30F1EFA 		endbr64
 1800 0b46 4889C3   		movq	%rax, %rbx
 1801 0b49 E8000000 		call	__cxa_end_catch@PLT
 1801      00
 1802 0b4e EB07     		jmp	.L83
 1803              	.L87:
 1804 0b50 F30F1EFA 		endbr64
 1805              		.loc 5 57 1 is_stmt 1
 1806 0b54 4889C3   		movq	%rax, %rbx
 1807              	.L83:
 1808 0b57 488D45A0 		leaq	-96(%rbp), %rax
 1809 0b5b 4889C7   		movq	%rax, %rdi
 1810 0b5e E8000000 		call	_ZNSt6vectorIfSaIfEED1Ev
 1810      00
 1811 0b63 4889D8   		movq	%rbx, %rax
 1812 0b66 4889C7   		movq	%rax, %rdi
 1813              	.LEHB41:
 1814 0b69 E8000000 		call	_Unwind_Resume@PLT
 1814      00
 1815              	.LEHE41:
 1816              	.L89:
 1817 0b6e E8000000 		call	__stack_chk_fail@PLT
 1817      00
 1818              	.L84:
 1819 0b73 488B5DF8 		movq	-8(%rbp), %rbx
 1820 0b77 C9       		leave
 1821              		.cfi_def_cfa 7, 8
 1822 0b78 C3       		ret
 1823              		.cfi_endproc
 1824              	.LFE1441:
 1825              		.section	.gcc_except_table
 1826              		.align 4
 1827              	.LLSDA1441:
 1828 00f0 FF       		.byte	0xff
 1829 00f1 9B       		.byte	0x9b
 1830 00f2 29       		.uleb128 .LLSDATT1441-.LLSDATTD1441
 1831              	.LLSDATTD1441:
 1832 00f3 01       		.byte	0x1
 1833 00f4 21       		.uleb128 .LLSDACSE1441-.LLSDACSB1441
 1834              	.LLSDACSB1441:
 1835 00f5 49       		.uleb128 .LEHB36-.LFB1441
 1836 00f6 05       		.uleb128 .LEHE36-.LEHB36
 1837 00f7 9202     		.uleb128 .L85-.LFB1441
 1838 00f9 00       		.uleb128 0
 1839 00fa 8F01     		.uleb128 .LEHB37-.LFB1441
 1840 00fc 5F       		.uleb128 .LEHE37-.LEHB37
 1841 00fd B002     		.uleb128 .L86-.LFB1441
 1842 00ff 01       		.uleb128 0x1
 1843 0100 F501     		.uleb128 .LEHB38-.LFB1441
 1844 0102 3B       		.uleb128 .LEHE38-.LEHB38
 1845 0103 00       		.uleb128 0
 1846 0104 00       		.uleb128 0
 1847 0105 BC02     		.uleb128 .LEHB39-.LFB1441
 1848 0107 3A       		.uleb128 .LEHE39-.LEHB39
 1849 0108 8003     		.uleb128 .L88-.LFB1441
 1850 010a 00       		.uleb128 0
 1851 010b F602     		.uleb128 .LEHB40-.LFB1441
 1852 010d 05       		.uleb128 .LEHE40-.LEHB40
 1853 010e 8E03     		.uleb128 .L87-.LFB1441
 1854 0110 00       		.uleb128 0
 1855 0111 A703     		.uleb128 .LEHB41-.LFB1441
 1856 0113 05       		.uleb128 .LEHE41-.LEHB41
 1857 0114 00       		.uleb128 0
 1858 0115 00       		.uleb128 0
 1859              	.LLSDACSE1441:
 1860 0116 01       		.byte	0x1
 1861 0117 00       		.byte	0
 1862              		.align 4
 1863 0118 00000000 		.long	0
 1864              	
 1865              	.LLSDATT1441:
 1866              		.text
 1868              		.section	.rodata
 1869 026f 00       		.align 8
 1870              	.LC30:
 1871 0270 43686563 		.string	"CheckThrowMacroSucceedsOnCorrectException"
 1871      6B546872 
 1871      6F774D61 
 1871      63726F53 
 1871      75636365 
 1872              		.text
 1873 0b79 90       		.align 2
 1875              	_ZN12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectExceptionC2Ev:
 1876              	.LFB1443:
  58:TestUnitTest++.cpp **** 
  59:TestUnitTest++.cpp **** TEST(CheckThrowMacroSucceedsOnCorrectException)
 1877              		.loc 5 59 1
 1878              		.cfi_startproc
 1879 0b7a 55       		pushq	%rbp
 1880              		.cfi_def_cfa_offset 16
 1881              		.cfi_offset 6, -16
 1882 0b7b 4889E5   		movq	%rsp, %rbp
 1883              		.cfi_def_cfa_register 6
 1884 0b7e 53       		pushq	%rbx
 1885 0b7f 4883EC18 		subq	$24, %rsp
 1886              		.cfi_offset 3, -24
 1887 0b83 48897DE8 		movq	%rdi, -24(%rbp)
 1888              	.LBB14:
 1889              		.loc 5 59 1
 1890 0b87 488B5DE8 		movq	-24(%rbp), %rbx
 1891 0b8b E8000000 		call	_ZN13UnitTestSuite12GetSuiteNameEv
 1891      00
 1892 0b90 4889C2   		movq	%rax, %rdx
 1893 0b93 41B83B00 		movl	$59, %r8d
 1893      0000
 1894 0b99 488D0500 		leaq	.LC1(%rip), %rax
 1894      000000
 1895 0ba0 4889C1   		movq	%rax, %rcx
 1896 0ba3 488D0500 		leaq	.LC30(%rip), %rax
 1896      000000
 1897 0baa 4889C6   		movq	%rax, %rsi
 1898 0bad 4889DF   		movq	%rbx, %rdi
 1899 0bb0 E8000000 		call	_ZN8UnitTest4TestC2EPKcS2_S2_i@PLT
 1899      00
 1900 0bb5 488D1500 		leaq	16+_ZTVN12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectExceptionE(%rip), %rdx
 1900      000000
 1901 0bbc 488B45E8 		movq	-24(%rbp), %rax
 1902 0bc0 488910   		movq	%rdx, (%rax)
 1903              	.LBE14:
 1904 0bc3 90       		nop
 1905 0bc4 488B5DF8 		movq	-8(%rbp), %rbx
 1906 0bc8 C9       		leave
 1907              		.cfi_def_cfa 7, 8
 1908 0bc9 C3       		ret
 1909              		.cfi_endproc
 1910              	.LFE1443:
 1912              		.set	_ZN12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectExceptionC1Ev,_ZN12_GLOBAL__N_145TestC
 1913              		.local	_ZN12_GLOBAL__N_153testCheckThrowMacroSucceedsOnCorrectExceptionInstanceE
 1914              		.comm	_ZN12_GLOBAL__N_153testCheckThrowMacroSucceedsOnCorrectExceptionInstanceE,56,32
 1915              		.local	_ZN12_GLOBAL__N_146adderCheckThrowMacroSucceedsOnCorrectExceptionE
 1916              		.comm	_ZN12_GLOBAL__N_146adderCheckThrowMacroSucceedsOnCorrectExceptionE,1,1
 1917              		.section	.rodata
 1918 029a 00000000 		.align 8
 1918      0000
 1919              	.LC31:
 1920 02a0 45787065 		.string	"Expected exception: \"TestException\" not thrown"
 1920      63746564 
 1920      20657863 
 1920      65707469 
 1920      6F6E3A20 
 1921              		.text
 1922              		.align 2
 1924              	_ZNK12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectException7RunImplEv:
 1925              	.LFB1445:
  60:TestUnitTest++.cpp **** {
 1926              		.loc 5 60 1
 1927              		.cfi_startproc
 1928              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 1929              		.cfi_lsda 0x1b,.LLSDA1445
 1930 0bca F30F1EFA 		endbr64
 1931 0bce 55       		pushq	%rbp
 1932              		.cfi_def_cfa_offset 16
 1933              		.cfi_offset 6, -16
 1934 0bcf 4889E5   		movq	%rsp, %rbp
 1935              		.cfi_def_cfa_register 6
 1936 0bd2 53       		pushq	%rbx
 1937 0bd3 4883EC58 		subq	$88, %rsp
 1938              		.cfi_offset 3, -24
 1939 0bd7 48897DA8 		movq	%rdi, -88(%rbp)
 1940              		.loc 5 60 1
 1941 0bdb 64488B04 		movq	%fs:40, %rax
 1941      25280000 
 1941      00
 1942 0be4 488945E8 		movq	%rax, -24(%rbp)
 1943 0be8 31C0     		xorl	%eax, %eax
 1944              	.LBB15:
  61:TestUnitTest++.cpp ****     struct TestException {};
  62:TestUnitTest++.cpp ****     CHECK_THROW(throw TestException(), TestException);
 1945              		.loc 5 62 5
 1946 0bea C645B700 		movb	$0, -73(%rbp)
 1947 0bee BF010000 		movl	$1, %edi
 1947      00
 1948 0bf3 E8000000 		call	__cxa_allocate_exception@PLT
 1948      00
 1949 0bf8 4889C1   		movq	%rax, %rcx
 1950 0bfb BA000000 		movl	$0, %edx
 1950      00
 1951 0c00 488D0500 		leaq	_ZTIZNK12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectException7RunImplEvE13TestExceptio
 1951      000000
 1952 0c07 4889C6   		movq	%rax, %rsi
 1953 0c0a 4889CF   		movq	%rcx, %rdi
 1954              	.LEHB42:
 1955 0c0d E8000000 		call	__cxa_throw@PLT
 1955      00
 1956              	.LEHE42:
 1957              	.L95:
 1958              		.loc 5 62 5 is_stmt 0 discriminator 8
 1959 0c12 0FB645B7 		movzbl	-73(%rbp), %eax
 1960 0c16 83F001   		xorl	$1, %eax
 1961 0c19 84C0     		testb	%al, %al
 1962 0c1b 746C     		je	.L98
 1963              	.LEHB43:
 1964              		.loc 5 62 5 discriminator 2
 1965 0c1d E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv@PLT
 1965      00
 1966 0c22 488B18   		movq	(%rax), %rbx
 1967 0c25 E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv@PLT
 1967      00
 1968 0c2a 488B08   		movq	(%rax), %rcx
 1969 0c2d 488D45C0 		leaq	-64(%rbp), %rax
 1970 0c31 BA3E0000 		movl	$62, %edx
 1970      00
 1971 0c36 4889CE   		movq	%rcx, %rsi
 1972 0c39 4889C7   		movq	%rax, %rdi
 1973 0c3c E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i@PLT
 1973      00
 1974 0c41 488D45C0 		leaq	-64(%rbp), %rax
 1975 0c45 488D1500 		leaq	.LC31(%rip), %rdx
 1975      000000
 1976 0c4c 4889C6   		movq	%rax, %rsi
 1977 0c4f 4889DF   		movq	%rbx, %rdi
 1978 0c52 E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc@PLT
 1978      00
 1979              	.LBE15:
  63:TestUnitTest++.cpp **** }
 1980              		.loc 5 63 1 is_stmt 1 discriminator 2
 1981 0c57 EB30     		jmp	.L98
 1982              	.L97:
 1983 0c59 F30F1EFA 		endbr64
  62:TestUnitTest++.cpp **** }
 1984              		.loc 5 62 5
 1985 0c5d 4883FA01 		cmpq	$1, %rdx
 1986 0c61 7517     		jne	.L94
 1987              	.LBB17:
 1988              	.LBB16:
  62:TestUnitTest++.cpp **** }
 1989              		.loc 5 62 5 is_stmt 0 discriminator 5
 1990 0c63 4889C7   		movq	%rax, %rdi
 1991 0c66 E8000000 		call	__cxa_begin_catch@PLT
 1991      00
 1992 0c6b 488945B8 		movq	%rax, -72(%rbp)
 1993 0c6f C645B701 		movb	$1, -73(%rbp)
 1994 0c73 E8000000 		call	__cxa_end_catch@PLT
 1994      00
 1995 0c78 EB98     		jmp	.L95
 1996              	.L94:
 1997              	.LBE16:
  62:TestUnitTest++.cpp **** }
 1998              		.loc 5 62 5 discriminator 6
 1999 0c7a 4889C7   		movq	%rax, %rdi
 2000 0c7d E8000000 		call	__cxa_begin_catch@PLT
 2000      00
 2001 0c82 E8000000 		call	__cxa_end_catch@PLT
 2001      00
 2002              	.LEHE43:
 2003 0c87 EB89     		jmp	.L95
 2004              	.L98:
 2005              	.LBE17:
 2006              		.loc 5 63 1 is_stmt 1
 2007 0c89 90       		nop
 2008 0c8a 488B45E8 		movq	-24(%rbp), %rax
 2009 0c8e 64482B04 		subq	%fs:40, %rax
 2009      25280000 
 2009      00
 2010 0c97 7405     		je	.L96
 2011 0c99 E8000000 		call	__stack_chk_fail@PLT
 2011      00
 2012              	.L96:
 2013 0c9e 488B5DF8 		movq	-8(%rbp), %rbx
 2014 0ca2 C9       		leave
 2015              		.cfi_def_cfa 7, 8
 2016 0ca3 C3       		ret
 2017              		.cfi_endproc
 2018              	.LFE1445:
 2019              		.section	.gcc_except_table
 2020              		.align 4
 2021              	.LLSDA1445:
 2022 011c FF       		.byte	0xff
 2023 011d 9B       		.byte	0x9b
 2024 011e 19       		.uleb128 .LLSDATT1445-.LLSDATTD1445
 2025              	.LLSDATTD1445:
 2026 011f 01       		.byte	0x1
 2027 0120 09       		.uleb128 .LLSDACSE1445-.LLSDACSB1445
 2028              	.LLSDACSB1445:
 2029 0121 43       		.uleb128 .LEHB42-.LFB1445
 2030 0122 05       		.uleb128 .LEHE42-.LEHB42
 2031 0123 8F01     		.uleb128 .L97-.LFB1445
 2032 0125 03       		.uleb128 0x3
 2033 0126 53       		.uleb128 .LEHB43-.LFB1445
 2034 0127 6A       		.uleb128 .LEHE43-.LEHB43
 2035 0128 00       		.uleb128 0
 2036 0129 00       		.uleb128 0
 2037              	.LLSDACSE1445:
 2038 012a 02       		.byte	0x2
 2039 012b 00       		.byte	0
 2040 012c 01       		.byte	0x1
 2041 012d 7D       		.byte	0x7d
 2042 012e 0000     		.align 4
 2043 0130 00000000 		.long	0
 2044              	
 2045 0134 00000000 		.long	.LDFCM0-.
 2046              	.LLSDATT1445:
 2047              		.text
 2049              		.section	.rodata
 2050              	.LC32:
 2051 02cf 43686563 		.string	"CheckAssertSucceeds"
 2051      6B417373 
 2051      65727453 
 2051      75636365 
 2051      65647300 
 2052              		.text
 2053              		.align 2
 2055              	_ZN12_GLOBAL__N_123TestCheckAssertSucceedsC2Ev:
 2056              	.LFB1447:
  64:TestUnitTest++.cpp **** 
  65:TestUnitTest++.cpp **** TEST(CheckAssertSucceeds)
 2057              		.loc 5 65 1
 2058              		.cfi_startproc
 2059 0ca4 55       		pushq	%rbp
 2060              		.cfi_def_cfa_offset 16
 2061              		.cfi_offset 6, -16
 2062 0ca5 4889E5   		movq	%rsp, %rbp
 2063              		.cfi_def_cfa_register 6
 2064 0ca8 53       		pushq	%rbx
 2065 0ca9 4883EC18 		subq	$24, %rsp
 2066              		.cfi_offset 3, -24
 2067 0cad 48897DE8 		movq	%rdi, -24(%rbp)
 2068              	.LBB18:
 2069              		.loc 5 65 1
 2070 0cb1 488B5DE8 		movq	-24(%rbp), %rbx
 2071 0cb5 E8000000 		call	_ZN13UnitTestSuite12GetSuiteNameEv
 2071      00
 2072 0cba 4889C2   		movq	%rax, %rdx
 2073 0cbd 41B84100 		movl	$65, %r8d
 2073      0000
 2074 0cc3 488D0500 		leaq	.LC1(%rip), %rax
 2074      000000
 2075 0cca 4889C1   		movq	%rax, %rcx
 2076 0ccd 488D0500 		leaq	.LC32(%rip), %rax
 2076      000000
 2077 0cd4 4889C6   		movq	%rax, %rsi
 2078 0cd7 4889DF   		movq	%rbx, %rdi
 2079 0cda E8000000 		call	_ZN8UnitTest4TestC2EPKcS2_S2_i@PLT
 2079      00
 2080 0cdf 488D1500 		leaq	16+_ZTVN12_GLOBAL__N_123TestCheckAssertSucceedsE(%rip), %rdx
 2080      000000
 2081 0ce6 488B45E8 		movq	-24(%rbp), %rax
 2082 0cea 488910   		movq	%rdx, (%rax)
 2083              	.LBE18:
 2084 0ced 90       		nop
 2085 0cee 488B5DF8 		movq	-8(%rbp), %rbx
 2086 0cf2 C9       		leave
 2087              		.cfi_def_cfa 7, 8
 2088 0cf3 C3       		ret
 2089              		.cfi_endproc
 2090              	.LFE1447:
 2092              		.set	_ZN12_GLOBAL__N_123TestCheckAssertSucceedsC1Ev,_ZN12_GLOBAL__N_123TestCheckAssertSucceedsC2Ev
 2093              		.local	_ZN12_GLOBAL__N_131testCheckAssertSucceedsInstanceE
 2094              		.comm	_ZN12_GLOBAL__N_131testCheckAssertSucceedsInstanceE,56,32
 2095              		.local	_ZN12_GLOBAL__N_124adderCheckAssertSucceedsE
 2096              		.comm	_ZN12_GLOBAL__N_124adderCheckAssertSucceedsE,1,1
 2097              		.section	.rodata
 2098              	.LC33:
 2099 02e3 66696C65 		.string	"file"
 2099      00
 2100              	.LC34:
 2101 02e8 64657363 		.string	"desc"
 2101      00
 2102 02ed 000000   		.align 8
 2103              	.LC35:
 2104 02f0 45787065 		.string	"Expected exception: \"UnitTest::AssertException\" not thrown"
 2104      63746564 
 2104      20657863 
 2104      65707469 
 2104      6F6E3A20 
 2105              		.text
 2106              		.align 2
 2108              	_ZNK12_GLOBAL__N_123TestCheckAssertSucceeds7RunImplEv:
 2109              	.LFB1449:
  66:TestUnitTest++.cpp **** {
 2110              		.loc 5 66 1
 2111              		.cfi_startproc
 2112              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 2113              		.cfi_lsda 0x1b,.LLSDA1449
 2114 0cf4 F30F1EFA 		endbr64
 2115 0cf8 55       		pushq	%rbp
 2116              		.cfi_def_cfa_offset 16
 2117              		.cfi_offset 6, -16
 2118 0cf9 4889E5   		movq	%rsp, %rbp
 2119              		.cfi_def_cfa_register 6
 2120 0cfc 53       		pushq	%rbx
 2121 0cfd 4883EC58 		subq	$88, %rsp
 2122              		.cfi_offset 3, -24
 2123 0d01 48897DA8 		movq	%rdi, -88(%rbp)
 2124              		.loc 5 66 1
 2125 0d05 64488B04 		movq	%fs:40, %rax
 2125      25280000 
 2125      00
 2126 0d0e 488945E8 		movq	%rax, -24(%rbp)
 2127 0d12 31C0     		xorl	%eax, %eax
 2128              	.LBB19:
  67:TestUnitTest++.cpp ****     CHECK_ASSERT(UnitTest::ReportAssert("desc", "file", 0));
 2129              		.loc 5 67 5
 2130 0d14 C645B700 		movb	$0, -73(%rbp)
 2131 0d18 BA000000 		movl	$0, %edx
 2131      00
 2132 0d1d 488D0500 		leaq	.LC33(%rip), %rax
 2132      000000
 2133 0d24 4889C6   		movq	%rax, %rsi
 2134 0d27 488D0500 		leaq	.LC34(%rip), %rax
 2134      000000
 2135 0d2e 4889C7   		movq	%rax, %rdi
 2136              	.LEHB44:
 2137 0d31 E8000000 		call	_ZN8UnitTest12ReportAssertEPKcS1_i@PLT
 2137      00
 2138              	.LEHE44:
 2139              	.L104:
 2140              		.loc 5 67 5 is_stmt 0 discriminator 9
 2141 0d36 0FB645B7 		movzbl	-73(%rbp), %eax
 2142 0d3a 83F001   		xorl	$1, %eax
 2143 0d3d 84C0     		testb	%al, %al
 2144 0d3f 746C     		je	.L107
 2145              	.LEHB45:
 2146              		.loc 5 67 5 discriminator 3
 2147 0d41 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv@PLT
 2147      00
 2148 0d46 488B18   		movq	(%rax), %rbx
 2149 0d49 E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv@PLT
 2149      00
 2150 0d4e 488B08   		movq	(%rax), %rcx
 2151 0d51 488D45C0 		leaq	-64(%rbp), %rax
 2152 0d55 BA430000 		movl	$67, %edx
 2152      00
 2153 0d5a 4889CE   		movq	%rcx, %rsi
 2154 0d5d 4889C7   		movq	%rax, %rdi
 2155 0d60 E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i@PLT
 2155      00
 2156 0d65 488D45C0 		leaq	-64(%rbp), %rax
 2157 0d69 488D1500 		leaq	.LC35(%rip), %rdx
 2157      000000
 2158 0d70 4889C6   		movq	%rax, %rsi
 2159 0d73 4889DF   		movq	%rbx, %rdi
 2160 0d76 E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc@PLT
 2160      00
 2161              	.LBE19:
  68:TestUnitTest++.cpp **** }
 2162              		.loc 5 68 1 is_stmt 1 discriminator 3
 2163 0d7b EB30     		jmp	.L107
 2164              	.L106:
 2165 0d7d F30F1EFA 		endbr64
  67:TestUnitTest++.cpp ****     CHECK_ASSERT(UnitTest::ReportAssert("desc", "file", 0));
 2166              		.loc 5 67 5
 2167 0d81 4883FA01 		cmpq	$1, %rdx
 2168 0d85 7517     		jne	.L103
 2169              	.LBB21:
 2170              	.LBB20:
  67:TestUnitTest++.cpp ****     CHECK_ASSERT(UnitTest::ReportAssert("desc", "file", 0));
 2171              		.loc 5 67 5 is_stmt 0 discriminator 6
 2172 0d87 4889C7   		movq	%rax, %rdi
 2173 0d8a E8000000 		call	__cxa_begin_catch@PLT
 2173      00
 2174 0d8f 488945B8 		movq	%rax, -72(%rbp)
 2175 0d93 C645B701 		movb	$1, -73(%rbp)
 2176 0d97 E8000000 		call	__cxa_end_catch@PLT
 2176      00
 2177 0d9c EB98     		jmp	.L104
 2178              	.L103:
 2179              	.LBE20:
  67:TestUnitTest++.cpp ****     CHECK_ASSERT(UnitTest::ReportAssert("desc", "file", 0));
 2180              		.loc 5 67 5 discriminator 7
 2181 0d9e 4889C7   		movq	%rax, %rdi
 2182 0da1 E8000000 		call	__cxa_begin_catch@PLT
 2182      00
 2183 0da6 E8000000 		call	__cxa_end_catch@PLT
 2183      00
 2184              	.LEHE45:
 2185 0dab EB89     		jmp	.L104
 2186              	.L107:
 2187              	.LBE21:
 2188              		.loc 5 68 1 is_stmt 1
 2189 0dad 90       		nop
 2190 0dae 488B45E8 		movq	-24(%rbp), %rax
 2191 0db2 64482B04 		subq	%fs:40, %rax
 2191      25280000 
 2191      00
 2192 0dbb 7405     		je	.L105
 2193 0dbd E8000000 		call	__stack_chk_fail@PLT
 2193      00
 2194              	.L105:
 2195 0dc2 488B5DF8 		movq	-8(%rbp), %rbx
 2196 0dc6 C9       		leave
 2197              		.cfi_def_cfa 7, 8
 2198 0dc7 C3       		ret
 2199              		.cfi_endproc
 2200              	.LFE1449:
 2201              		.section	.gcc_except_table
 2202              		.align 4
 2203              	.LLSDA1449:
 2204 0138 FF       		.byte	0xff
 2205 0139 9B       		.byte	0x9b
 2206 013a 19       		.uleb128 .LLSDATT1449-.LLSDATTD1449
 2207              	.LLSDATTD1449:
 2208 013b 01       		.byte	0x1
 2209 013c 09       		.uleb128 .LLSDACSE1449-.LLSDACSB1449
 2210              	.LLSDACSB1449:
 2211 013d 3D       		.uleb128 .LEHB44-.LFB1449
 2212 013e 05       		.uleb128 .LEHE44-.LEHB44
 2213 013f 8901     		.uleb128 .L106-.LFB1449
 2214 0141 03       		.uleb128 0x3
 2215 0142 4D       		.uleb128 .LEHB45-.LFB1449
 2216 0143 6A       		.uleb128 .LEHE45-.LEHB45
 2217 0144 00       		.uleb128 0
 2218 0145 00       		.uleb128 0
 2219              	.LLSDACSE1449:
 2220 0146 02       		.byte	0x2
 2221 0147 00       		.byte	0
 2222 0148 01       		.byte	0x1
 2223 0149 7D       		.byte	0x7d
 2224 014a 0000     		.align 4
 2225 014c 00000000 		.long	0
 2226              	
 2227 0150 00000000 		.long	DW.ref._ZTIN8UnitTest15AssertExceptionE-.
 2228              	.LLSDATT1449:
 2229              		.text
 2231              		.section	.rodata
 2232 032b 00000000 		.align 8
 2232      00
 2233              	.LC36:
 2234 0330 43686563 		.string	"CheckThrowMacroFailsOnMissingException"
 2234      6B546872 
 2234      6F774D61 
 2234      63726F46 
 2234      61696C73 
 2235              		.text
 2236              		.align 2
 2238              	_ZN12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingExceptionC2Ev:
 2239              	.LFB1451:
  69:TestUnitTest++.cpp **** 
  70:TestUnitTest++.cpp **** TEST(CheckThrowMacroFailsOnMissingException)
 2240              		.loc 5 70 1
 2241              		.cfi_startproc
 2242 0dc8 55       		pushq	%rbp
 2243              		.cfi_def_cfa_offset 16
 2244              		.cfi_offset 6, -16
 2245 0dc9 4889E5   		movq	%rsp, %rbp
 2246              		.cfi_def_cfa_register 6
 2247 0dcc 53       		pushq	%rbx
 2248 0dcd 4883EC18 		subq	$24, %rsp
 2249              		.cfi_offset 3, -24
 2250 0dd1 48897DE8 		movq	%rdi, -24(%rbp)
 2251              	.LBB22:
 2252              		.loc 5 70 1
 2253 0dd5 488B5DE8 		movq	-24(%rbp), %rbx
 2254 0dd9 E8000000 		call	_ZN13UnitTestSuite12GetSuiteNameEv
 2254      00
 2255 0dde 4889C2   		movq	%rax, %rdx
 2256 0de1 41B84600 		movl	$70, %r8d
 2256      0000
 2257 0de7 488D0500 		leaq	.LC1(%rip), %rax
 2257      000000
 2258 0dee 4889C1   		movq	%rax, %rcx
 2259 0df1 488D0500 		leaq	.LC36(%rip), %rax
 2259      000000
 2260 0df8 4889C6   		movq	%rax, %rsi
 2261 0dfb 4889DF   		movq	%rbx, %rdi
 2262 0dfe E8000000 		call	_ZN8UnitTest4TestC2EPKcS2_S2_i@PLT
 2262      00
 2263 0e03 488D1500 		leaq	16+_ZTVN12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingExceptionE(%rip), %rdx
 2263      000000
 2264 0e0a 488B45E8 		movq	-24(%rbp), %rax
 2265 0e0e 488910   		movq	%rdx, (%rax)
 2266              	.LBE22:
 2267 0e11 90       		nop
 2268 0e12 488B5DF8 		movq	-8(%rbp), %rbx
 2269 0e16 C9       		leave
 2270              		.cfi_def_cfa 7, 8
 2271 0e17 C3       		ret
 2272              		.cfi_endproc
 2273              	.LFE1451:
 2275              		.set	_ZN12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingExceptionC1Ev,_ZN12_GLOBAL__N_142TestChec
 2276              		.local	_ZN12_GLOBAL__N_150testCheckThrowMacroFailsOnMissingExceptionInstanceE
 2277              		.comm	_ZN12_GLOBAL__N_150testCheckThrowMacroFailsOnMissingExceptionInstanceE,56,32
 2278              		.local	_ZN12_GLOBAL__N_143adderCheckThrowMacroFailsOnMissingExceptionE
 2279              		.comm	_ZN12_GLOBAL__N_143adderCheckThrowMacroFailsOnMissingExceptionE,1,1
 2280              		.section	.rodata
 2281              	.LC37:
 2282 0357 00       		.string	""
 2283              	.LC38:
 2284 0358 6E6F7468 		.string	"nothrow"
 2284      726F7700 
 2285              		.text
 2286              		.align 2
 2288              	_ZZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvEN11NoThrowTestC2Ev:
 2289              	.LFB1455:
  71:TestUnitTest++.cpp **** {
  72:TestUnitTest++.cpp ****     class NoThrowTest : public UnitTest::Test
  73:TestUnitTest++.cpp ****     {
  74:TestUnitTest++.cpp ****     public:
  75:TestUnitTest++.cpp ****         NoThrowTest() : Test("nothrow") {}
 2290              		.loc 5 75 9
 2291              		.cfi_startproc
 2292 0e18 55       		pushq	%rbp
 2293              		.cfi_def_cfa_offset 16
 2294              		.cfi_offset 6, -16
 2295 0e19 4889E5   		movq	%rsp, %rbp
 2296              		.cfi_def_cfa_register 6
 2297 0e1c 4883EC10 		subq	$16, %rsp
 2298 0e20 48897DF8 		movq	%rdi, -8(%rbp)
 2299              	.LBB23:
 2300              		.loc 5 75 39
 2301 0e24 488B45F8 		movq	-8(%rbp), %rax
 2302 0e28 41B80000 		movl	$0, %r8d
 2302      0000
 2303 0e2e 488D1500 		leaq	.LC37(%rip), %rdx
 2303      000000
 2304 0e35 4889D1   		movq	%rdx, %rcx
 2305 0e38 488D1500 		leaq	.LC0(%rip), %rdx
 2305      000000
 2306 0e3f 488D3500 		leaq	.LC38(%rip), %rsi
 2306      000000
 2307 0e46 4889C7   		movq	%rax, %rdi
 2308 0e49 E8000000 		call	_ZN8UnitTest4TestC2EPKcS2_S2_i@PLT
 2308      00
 2309 0e4e 488D1500 		leaq	16+_ZTVZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvE11NoThrowTest(
 2309      000000
 2310 0e55 488B45F8 		movq	-8(%rbp), %rax
 2311 0e59 488910   		movq	%rdx, (%rax)
 2312              	.LBE23:
 2313              		.loc 5 75 42
 2314 0e5c 90       		nop
 2315 0e5d C9       		leave
 2316              		.cfi_def_cfa 7, 8
 2317 0e5e C3       		ret
 2318              		.cfi_endproc
 2319              	.LFE1455:
 2321              		.set	_ZZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvEN11NoThrowTestC1Ev,
 2322 0e5f 90       		.align 2
 2324              	_ZZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvENK11NoThrowTest9DontThrow
 2325              	.LFB1457:
  76:TestUnitTest++.cpp ****         void DontThrow() const
 2326              		.loc 5 76 14
 2327              		.cfi_startproc
 2328 0e60 55       		pushq	%rbp
 2329              		.cfi_def_cfa_offset 16
 2330              		.cfi_offset 6, -16
 2331 0e61 4889E5   		movq	%rsp, %rbp
 2332              		.cfi_def_cfa_register 6
 2333 0e64 48897DF8 		movq	%rdi, -8(%rbp)
  77:TestUnitTest++.cpp ****         {
  78:TestUnitTest++.cpp ****         }
 2334              		.loc 5 78 9
 2335 0e68 90       		nop
 2336 0e69 5D       		popq	%rbp
 2337              		.cfi_def_cfa 7, 8
 2338 0e6a C3       		ret
 2339              		.cfi_endproc
 2340              	.LFE1457:
 2342              		.section	.rodata
 2343              		.align 8
 2344              	.LC39:
 2345 0360 45787065 		.string	"Expected exception: \"int\" not thrown"
 2345      63746564 
 2345      20657863 
 2345      65707469 
 2345      6F6E3A20 
 2346              		.text
 2347 0e6b 90       		.align 2
 2349              	_ZZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvENK11NoThrowTest7RunImplEv
 2350              	.LFB1458:
  79:TestUnitTest++.cpp **** 
  80:TestUnitTest++.cpp ****         virtual void RunImpl() const
 2351              		.loc 5 80 22
 2352              		.cfi_startproc
 2353 0e6c F30F1EFA 		endbr64
 2354 0e70 55       		pushq	%rbp
 2355              		.cfi_def_cfa_offset 16
 2356              		.cfi_offset 6, -16
 2357 0e71 4889E5   		movq	%rsp, %rbp
 2358              		.cfi_def_cfa_register 6
 2359 0e74 53       		pushq	%rbx
 2360 0e75 4883EC58 		subq	$88, %rsp
 2361              		.cfi_offset 3, -24
 2362 0e79 48897DA8 		movq	%rdi, -88(%rbp)
 2363              		.loc 5 80 22
 2364 0e7d 64488B04 		movq	%fs:40, %rax
 2364      25280000 
 2364      00
 2365 0e86 488945E8 		movq	%rax, -24(%rbp)
 2366 0e8a 31C0     		xorl	%eax, %eax
 2367              	.LBB24:
  81:TestUnitTest++.cpp ****         {
  82:TestUnitTest++.cpp ****             CHECK_THROW(DontThrow(), int);
 2368              		.loc 5 82 13
 2369 0e8c C645BF00 		movb	$0, -65(%rbp)
 2370 0e90 488B45A8 		movq	-88(%rbp), %rax
 2371 0e94 4889C7   		movq	%rax, %rdi
 2372 0e97 E8C4FFFF 		call	_ZZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvENK11NoThrowTest9Don
 2372      FF
 2373 0e9c 0FB645BF 		movzbl	-65(%rbp), %eax
 2374 0ea0 83F001   		xorl	$1, %eax
 2375 0ea3 84C0     		testb	%al, %al
 2376 0ea5 743A     		je	.L114
 2377              		.loc 5 82 13 is_stmt 0 discriminator 1
 2378 0ea7 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv@PLT
 2378      00
 2379 0eac 488B18   		movq	(%rax), %rbx
 2380 0eaf E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv@PLT
 2380      00
 2381 0eb4 488B08   		movq	(%rax), %rcx
 2382 0eb7 488D45C0 		leaq	-64(%rbp), %rax
 2383 0ebb BA520000 		movl	$82, %edx
 2383      00
 2384 0ec0 4889CE   		movq	%rcx, %rsi
 2385 0ec3 4889C7   		movq	%rax, %rdi
 2386 0ec6 E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i@PLT
 2386      00
 2387 0ecb 488D45C0 		leaq	-64(%rbp), %rax
 2388 0ecf 488D1500 		leaq	.LC39(%rip), %rdx
 2388      000000
 2389 0ed6 4889C6   		movq	%rax, %rsi
 2390 0ed9 4889DF   		movq	%rbx, %rdi
 2391 0edc E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc@PLT
 2391      00
 2392              	.L114:
 2393              	.LBE24:
  83:TestUnitTest++.cpp ****         }
 2394              		.loc 5 83 9 is_stmt 1
 2395 0ee1 90       		nop
 2396 0ee2 488B45E8 		movq	-24(%rbp), %rax
 2397 0ee6 64482B04 		subq	%fs:40, %rax
 2397      25280000 
 2397      00
 2398 0eef 7405     		je	.L113
 2399 0ef1 E8000000 		call	__stack_chk_fail@PLT
 2399      00
 2400              	.L113:
 2401 0ef6 488B5DF8 		movq	-8(%rbp), %rbx
 2402 0efa C9       		leave
 2403              		.cfi_def_cfa 7, 8
 2404 0efb C3       		ret
 2405              		.cfi_endproc
 2406              	.LFE1458:
 2408              		.section	.rodata
 2409 0385 000000   		.align 8
 2410              	.LC40:
 2411 0388 556E6861 		.string	"Unhandled exception in CHECK_EQUAL(1, results.GetFailureCount())"
 2411      6E646C65 
 2411      64206578 
 2411      63657074 
 2411      696F6E20 
 2412              		.text
 2413              		.align 2
 2415              	_ZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEv:
 2416              	.LFB1453:
  71:TestUnitTest++.cpp ****     class NoThrowTest : public UnitTest::Test
 2417              		.loc 5 71 1
 2418              		.cfi_startproc
 2419              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 2420              		.cfi_lsda 0x1b,.LLSDA1453
 2421 0efc F30F1EFA 		endbr64
 2422 0f00 55       		pushq	%rbp
 2423              		.cfi_def_cfa_offset 16
 2424              		.cfi_offset 6, -16
 2425 0f01 4889E5   		movq	%rsp, %rbp
 2426              		.cfi_def_cfa_register 6
 2427 0f04 53       		pushq	%rbx
 2428 0f05 4881EC98 		subq	$152, %rsp
 2428      000000
 2429              		.cfi_offset 3, -24
 2430 0f0c 4889BD68 		movq	%rdi, -152(%rbp)
 2430      FFFFFF
  71:TestUnitTest++.cpp ****     class NoThrowTest : public UnitTest::Test
 2431              		.loc 5 71 1
 2432 0f13 64488B04 		movq	%fs:40, %rax
 2432      25280000 
 2432      00
 2433 0f1c 488945E8 		movq	%rax, -24(%rbp)
 2434 0f20 31C0     		xorl	%eax, %eax
  84:TestUnitTest++.cpp ****     };
  85:TestUnitTest++.cpp **** 
  86:TestUnitTest++.cpp ****     UnitTest::TestResults results;
 2435              		.loc 5 86 27
 2436 0f22 488D4590 		leaq	-112(%rbp), %rax
 2437 0f26 BE000000 		movl	$0, %esi
 2437      00
 2438 0f2b 4889C7   		movq	%rax, %rdi
 2439              	.LEHB46:
 2440 0f2e E8000000 		call	_ZN8UnitTest11TestResultsC1EPNS_12TestReporterE@PLT
 2440      00
 2441              	.LBB25:
  87:TestUnitTest++.cpp **** 	{
  88:TestUnitTest++.cpp **** 		ScopedCurrentTest scopedResults(results);
 2442              		.loc 5 88 42
 2443 0f33 488D4D90 		leaq	-112(%rbp), %rcx
 2444 0f37 488D4580 		leaq	-128(%rbp), %rax
 2445 0f3b BA000000 		movl	$0, %edx
 2445      00
 2446 0f40 4889CE   		movq	%rcx, %rsi
 2447 0f43 4889C7   		movq	%rax, %rdi
 2448 0f46 E8000000 		call	_ZN17ScopedCurrentTestC1ERN8UnitTest11TestResultsEPKNS0_11TestDetailsE
 2448      00
 2449              	.LEHE46:
  89:TestUnitTest++.cpp **** 
  90:TestUnitTest++.cpp **** 		NoThrowTest test;
 2450              		.loc 5 90 15
 2451 0f4b 488D45B0 		leaq	-80(%rbp), %rax
 2452 0f4f 4889C7   		movq	%rax, %rdi
 2453              	.LEHB47:
 2454 0f52 E8C1FEFF 		call	_ZZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvEN11NoThrowTestC1Ev
 2454      FF
 2455              	.LEHE47:
  91:TestUnitTest++.cpp **** 		test.Run();
 2456              		.loc 5 91 11
 2457 0f57 488D45B0 		leaq	-80(%rbp), %rax
 2458 0f5b 4889C7   		movq	%rax, %rdi
 2459              	.LEHB48:
 2460 0f5e E8000000 		call	_ZN8UnitTest4Test3RunEv@PLT
 2460      00
 2461              	.LEHE48:
  92:TestUnitTest++.cpp **** 	}
 2462              		.loc 5 92 2
 2463 0f63 488D45B0 		leaq	-80(%rbp), %rax
 2464 0f67 4889C7   		movq	%rax, %rdi
 2465              	.LEHB49:
 2466 0f6a E8DB1700 		call	_ZZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvEN11NoThrowTestD1Ev
 2466      00
 2467              	.LEHE49:
 2468              		.loc 5 92 2 is_stmt 0 discriminator 2
 2469 0f6f 488D4580 		leaq	-128(%rbp), %rax
 2470 0f73 4889C7   		movq	%rax, %rdi
 2471              	.LEHB50:
 2472 0f76 E8000000 		call	_ZN17ScopedCurrentTestD1Ev
 2472      00
 2473              	.LEHE50:
 2474              	.LEHB51:
 2475              	.LBE25:
  93:TestUnitTest++.cpp **** 
  94:TestUnitTest++.cpp **** 	CHECK_EQUAL(1, results.GetFailureCount());
 2476              		.loc 5 94 2 is_stmt 1 discriminator 2
 2477 0f7b E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv@PLT
 2477      00
 2478 0f80 488B08   		movq	(%rax), %rcx
 2479 0f83 488D45B0 		leaq	-80(%rbp), %rax
 2480 0f87 BA5E0000 		movl	$94, %edx
 2480      00
 2481 0f8c 4889CE   		movq	%rcx, %rsi
 2482 0f8f 4889C7   		movq	%rax, %rdi
 2483 0f92 E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i@PLT
 2483      00
 2484              		.loc 5 94 2 is_stmt 0 discriminator 4
 2485 0f97 488D4590 		leaq	-112(%rbp), %rax
 2486 0f9b 4889C7   		movq	%rax, %rdi
 2487 0f9e E8000000 		call	_ZNK8UnitTest11TestResults15GetFailureCountEv@PLT
 2487      00
 2488 0fa3 894580   		movl	%eax, -128(%rbp)
 2489 0fa6 C7857CFF 		movl	$1, -132(%rbp)
 2489      FFFF0100 
 2489      0000
 2490 0fb0 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv@PLT
 2490      00
 2491              		.loc 5 94 2 discriminator 6
 2492 0fb5 488B00   		movq	(%rax), %rax
 2493 0fb8 488D4DB0 		leaq	-80(%rbp), %rcx
 2494 0fbc 488D5580 		leaq	-128(%rbp), %rdx
 2495 0fc0 488DB57C 		leaq	-132(%rbp), %rsi
 2495      FFFFFF
 2496 0fc7 4889C7   		movq	%rax, %rdi
 2497 0fca E8000000 		call	_ZN8UnitTest10CheckEqualIiiEEvRNS_11TestResultsERKT_RKT0_RKNS_11TestDetailsE
 2497      00
 2498              	.LEHE51:
  95:TestUnitTest++.cpp **** }
 2499              		.loc 5 95 1 is_stmt 1
 2500 0fcf E9970000 		jmp	.L115
 2500      00
 2501              	.L123:
 2502 0fd4 F30F1EFA 		endbr64
 2503              	.LBB26:
  92:TestUnitTest++.cpp **** 	}
 2504              		.loc 5 92 2
 2505 0fd8 4889C3   		movq	%rax, %rbx
 2506 0fdb 488D45B0 		leaq	-80(%rbp), %rax
 2507 0fdf 4889C7   		movq	%rax, %rdi
 2508 0fe2 E8631700 		call	_ZZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvEN11NoThrowTestD1Ev
 2508      00
 2509 0fe7 EB07     		jmp	.L117
 2510              	.L122:
 2511 0fe9 F30F1EFA 		endbr64
 2512 0fed 4889C3   		movq	%rax, %rbx
 2513              	.L117:
  92:TestUnitTest++.cpp **** 	}
 2514              		.loc 5 92 2 is_stmt 0 discriminator 1
 2515 0ff0 488D4580 		leaq	-128(%rbp), %rax
 2516 0ff4 4889C7   		movq	%rax, %rdi
 2517 0ff7 E8000000 		call	_ZN17ScopedCurrentTestD1Ev
 2517      00
 2518 0ffc 4889D8   		movq	%rbx, %rax
 2519 0fff 4889C7   		movq	%rax, %rdi
 2520              	.LEHB52:
 2521 1002 E8000000 		call	_Unwind_Resume@PLT
 2521      00
 2522              	.LEHE52:
 2523              	.L124:
 2524 1007 F30F1EFA 		endbr64
 2525              	.LBE26:
  94:TestUnitTest++.cpp **** }
 2526              		.loc 5 94 2 is_stmt 1
 2527 100b 4889C7   		movq	%rax, %rdi
 2528 100e E8000000 		call	__cxa_begin_catch@PLT
 2528      00
 2529              	.LEHB53:
 2530 1013 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv@PLT
 2530      00
  94:TestUnitTest++.cpp **** }
 2531              		.loc 5 94 2 is_stmt 0 discriminator 3
 2532 1018 488B18   		movq	(%rax), %rbx
 2533 101b E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv@PLT
 2533      00
  94:TestUnitTest++.cpp **** }
 2534              		.loc 5 94 2 discriminator 13
 2535 1020 488B08   		movq	(%rax), %rcx
 2536 1023 488D45B0 		leaq	-80(%rbp), %rax
 2537 1027 BA5E0000 		movl	$94, %edx
 2537      00
 2538 102c 4889CE   		movq	%rcx, %rsi
 2539 102f 4889C7   		movq	%rax, %rdi
 2540 1032 E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i@PLT
 2540      00
  94:TestUnitTest++.cpp **** }
 2541              		.loc 5 94 2 discriminator 17
 2542 1037 488D45B0 		leaq	-80(%rbp), %rax
 2543 103b 488D1500 		leaq	.LC40(%rip), %rdx
 2543      000000
 2544 1042 4889C6   		movq	%rax, %rsi
 2545 1045 4889DF   		movq	%rbx, %rdi
 2546 1048 E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc@PLT
 2546      00
 2547              	.LEHE53:
 2548              	.LEHB54:
  94:TestUnitTest++.cpp **** }
 2549              		.loc 5 94 2 discriminator 19
 2550 104d E8000000 		call	__cxa_end_catch@PLT
 2550      00
 2551              	.LEHE54:
 2552              		.loc 5 95 1 is_stmt 1 discriminator 19
 2553 1052 EB17     		jmp	.L115
 2554              	.L125:
 2555 1054 F30F1EFA 		endbr64
  94:TestUnitTest++.cpp **** }
 2556              		.loc 5 94 2
 2557 1058 4889C3   		movq	%rax, %rbx
 2558 105b E8000000 		call	__cxa_end_catch@PLT
 2558      00
 2559 1060 4889D8   		movq	%rbx, %rax
 2560 1063 4889C7   		movq	%rax, %rdi
 2561              	.LEHB55:
 2562 1066 E8000000 		call	_Unwind_Resume@PLT
 2562      00
 2563              	.LEHE55:
 2564              	.L115:
 2565              		.loc 5 95 1
 2566 106b 488B45E8 		movq	-24(%rbp), %rax
 2567 106f 64482B04 		subq	%fs:40, %rax
 2567      25280000 
 2567      00
 2568 1078 7405     		je	.L121
 2569 107a E8000000 		call	__stack_chk_fail@PLT
 2569      00
 2570              	.L121:
 2571 107f 488B5DF8 		movq	-8(%rbp), %rbx
 2572 1083 C9       		leave
 2573              		.cfi_def_cfa 7, 8
 2574 1084 C3       		ret
 2575              		.cfi_endproc
 2576              	.LFE1453:
 2577              		.section	.gcc_except_table
 2578              		.align 4
 2579              	.LLSDA1453:
 2580 0154 FF       		.byte	0xff
 2581 0155 9B       		.byte	0x9b
 2582 0156 39       		.uleb128 .LLSDATT1453-.LLSDATTD1453
 2583              	.LLSDATTD1453:
 2584 0157 01       		.byte	0x1
 2585 0158 31       		.uleb128 .LLSDACSE1453-.LLSDACSB1453
 2586              	.LLSDACSB1453:
 2587 0159 32       		.uleb128 .LEHB46-.LFB1453
 2588 015a 1D       		.uleb128 .LEHE46-.LEHB46
 2589 015b 00       		.uleb128 0
 2590 015c 00       		.uleb128 0
 2591 015d 56       		.uleb128 .LEHB47-.LFB1453
 2592 015e 05       		.uleb128 .LEHE47-.LEHB47
 2593 015f ED01     		.uleb128 .L122-.LFB1453
 2594 0161 00       		.uleb128 0
 2595 0162 62       		.uleb128 .LEHB48-.LFB1453
 2596 0163 05       		.uleb128 .LEHE48-.LEHB48
 2597 0164 D801     		.uleb128 .L123-.LFB1453
 2598 0166 00       		.uleb128 0
 2599 0167 6E       		.uleb128 .LEHB49-.LFB1453
 2600 0168 05       		.uleb128 .LEHE49-.LEHB49
 2601 0169 ED01     		.uleb128 .L122-.LFB1453
 2602 016b 00       		.uleb128 0
 2603 016c 7A       		.uleb128 .LEHB50-.LFB1453
 2604 016d 05       		.uleb128 .LEHE50-.LEHB50
 2605 016e 00       		.uleb128 0
 2606 016f 00       		.uleb128 0
 2607 0170 7F       		.uleb128 .LEHB51-.LFB1453
 2608 0171 54       		.uleb128 .LEHE51-.LEHB51
 2609 0172 8B02     		.uleb128 .L124-.LFB1453
 2610 0174 01       		.uleb128 0x1
 2611 0175 8602     		.uleb128 .LEHB52-.LFB1453
 2612 0177 05       		.uleb128 .LEHE52-.LEHB52
 2613 0178 00       		.uleb128 0
 2614 0179 00       		.uleb128 0
 2615 017a 9702     		.uleb128 .LEHB53-.LFB1453
 2616 017c 3A       		.uleb128 .LEHE53-.LEHB53
 2617 017d D802     		.uleb128 .L125-.LFB1453
 2618 017f 00       		.uleb128 0
 2619 0180 D102     		.uleb128 .LEHB54-.LFB1453
 2620 0182 05       		.uleb128 .LEHE54-.LEHB54
 2621 0183 00       		.uleb128 0
 2622 0184 00       		.uleb128 0
 2623 0185 EA02     		.uleb128 .LEHB55-.LFB1453
 2624 0187 05       		.uleb128 .LEHE55-.LEHB55
 2625 0188 00       		.uleb128 0
 2626 0189 00       		.uleb128 0
 2627              	.LLSDACSE1453:
 2628 018a 01       		.byte	0x1
 2629 018b 00       		.byte	0
 2630              		.align 4
 2631 018c 00000000 		.long	0
 2632              	
 2633              	.LLSDATT1453:
 2634              		.text
 2636              		.section	.rodata
 2637 03c9 00000000 		.align 8
 2637      000000
 2638              	.LC41:
 2639 03d0 43686563 		.string	"CheckThrowMacroFailsOnWrongException"
 2639      6B546872 
 2639      6F774D61 
 2639      63726F46 
 2639      61696C73 
 2640              		.text
 2641 1085 90       		.align 2
 2643              	_ZN12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongExceptionC2Ev:
 2644              	.LFB1460:
  96:TestUnitTest++.cpp **** 
  97:TestUnitTest++.cpp **** TEST(CheckThrowMacroFailsOnWrongException)
 2645              		.loc 5 97 1
 2646              		.cfi_startproc
 2647 1086 55       		pushq	%rbp
 2648              		.cfi_def_cfa_offset 16
 2649              		.cfi_offset 6, -16
 2650 1087 4889E5   		movq	%rsp, %rbp
 2651              		.cfi_def_cfa_register 6
 2652 108a 53       		pushq	%rbx
 2653 108b 4883EC18 		subq	$24, %rsp
 2654              		.cfi_offset 3, -24
 2655 108f 48897DE8 		movq	%rdi, -24(%rbp)
 2656              	.LBB27:
 2657              		.loc 5 97 1
 2658 1093 488B5DE8 		movq	-24(%rbp), %rbx
 2659 1097 E8000000 		call	_ZN13UnitTestSuite12GetSuiteNameEv
 2659      00
 2660 109c 4889C2   		movq	%rax, %rdx
 2661 109f 41B86100 		movl	$97, %r8d
 2661      0000
 2662 10a5 488D0500 		leaq	.LC1(%rip), %rax
 2662      000000
 2663 10ac 4889C1   		movq	%rax, %rcx
 2664 10af 488D0500 		leaq	.LC41(%rip), %rax
 2664      000000
 2665 10b6 4889C6   		movq	%rax, %rsi
 2666 10b9 4889DF   		movq	%rbx, %rdi
 2667 10bc E8000000 		call	_ZN8UnitTest4TestC2EPKcS2_S2_i@PLT
 2667      00
 2668 10c1 488D1500 		leaq	16+_ZTVN12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongExceptionE(%rip), %rdx
 2668      000000
 2669 10c8 488B45E8 		movq	-24(%rbp), %rax
 2670 10cc 488910   		movq	%rdx, (%rax)
 2671              	.LBE27:
 2672 10cf 90       		nop
 2673 10d0 488B5DF8 		movq	-8(%rbp), %rbx
 2674 10d4 C9       		leave
 2675              		.cfi_def_cfa 7, 8
 2676 10d5 C3       		ret
 2677              		.cfi_endproc
 2678              	.LFE1460:
 2680              		.set	_ZN12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongExceptionC1Ev,_ZN12_GLOBAL__N_140TestCheckT
 2681              		.local	_ZN12_GLOBAL__N_148testCheckThrowMacroFailsOnWrongExceptionInstanceE
 2682              		.comm	_ZN12_GLOBAL__N_148testCheckThrowMacroFailsOnWrongExceptionInstanceE,56,32
 2683              		.local	_ZN12_GLOBAL__N_141adderCheckThrowMacroFailsOnWrongExceptionE
 2684              		.comm	_ZN12_GLOBAL__N_141adderCheckThrowMacroFailsOnWrongExceptionE,1,1
 2685              		.section	.rodata
 2686              	.LC42:
 2687 03f5 77726F6E 		.string	"wrongthrow"
 2687      67746872 
 2687      6F7700
 2688              		.text
 2689              		.align 2
 2691              	_ZZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEvEN14WrongThrowTestC2Ev:
 2692              	.LFB1464:
  98:TestUnitTest++.cpp **** {
  99:TestUnitTest++.cpp ****     class WrongThrowTest : public UnitTest::Test
 100:TestUnitTest++.cpp ****     {
 101:TestUnitTest++.cpp ****     public:
 102:TestUnitTest++.cpp ****         WrongThrowTest() : Test("wrongthrow") {}
 2693              		.loc 5 102 9
 2694              		.cfi_startproc
 2695 10d6 55       		pushq	%rbp
 2696              		.cfi_def_cfa_offset 16
 2697              		.cfi_offset 6, -16
 2698 10d7 4889E5   		movq	%rsp, %rbp
 2699              		.cfi_def_cfa_register 6
 2700 10da 4883EC10 		subq	$16, %rsp
 2701 10de 48897DF8 		movq	%rdi, -8(%rbp)
 2702              	.LBB28:
 2703              		.loc 5 102 45
 2704 10e2 488B45F8 		movq	-8(%rbp), %rax
 2705 10e6 41B80000 		movl	$0, %r8d
 2705      0000
 2706 10ec 488D1500 		leaq	.LC37(%rip), %rdx
 2706      000000
 2707 10f3 4889D1   		movq	%rdx, %rcx
 2708 10f6 488D1500 		leaq	.LC0(%rip), %rdx
 2708      000000
 2709 10fd 488D3500 		leaq	.LC42(%rip), %rsi
 2709      000000
 2710 1104 4889C7   		movq	%rax, %rdi
 2711 1107 E8000000 		call	_ZN8UnitTest4TestC2EPKcS2_S2_i@PLT
 2711      00
 2712 110c 488D1500 		leaq	16+_ZTVZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEvE14WrongThrowTest
 2712      000000
 2713 1113 488B45F8 		movq	-8(%rbp), %rax
 2714 1117 488910   		movq	%rdx, (%rax)
 2715              	.LBE28:
 2716              		.loc 5 102 48
 2717 111a 90       		nop
 2718 111b C9       		leave
 2719              		.cfi_def_cfa 7, 8
 2720 111c C3       		ret
 2721              		.cfi_endproc
 2722              	.LFE1464:
 2724              		.set	_ZZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEvEN14WrongThrowTestC1Ev
 2725              		.section	.rodata
 2726              	.LC43:
 2727 0400 6F6F7073 		.string	"oops"
 2727      00
 2728              		.text
 2729 111d 90       		.align 2
 2731              	_ZZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEvENK14WrongThrowTest7RunImplE
 2732              	.LFB1466:
 103:TestUnitTest++.cpp ****         virtual void RunImpl() const
 2733              		.loc 5 103 22
 2734              		.cfi_startproc
 2735              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 2736              		.cfi_lsda 0x1b,.LLSDA1466
 2737 111e F30F1EFA 		endbr64
 2738 1122 55       		pushq	%rbp
 2739              		.cfi_def_cfa_offset 16
 2740              		.cfi_offset 6, -16
 2741 1123 4889E5   		movq	%rsp, %rbp
 2742              		.cfi_def_cfa_register 6
 2743 1126 53       		pushq	%rbx
 2744 1127 4883EC58 		subq	$88, %rsp
 2745              		.cfi_offset 3, -24
 2746 112b 48897DA8 		movq	%rdi, -88(%rbp)
 2747              		.loc 5 103 22
 2748 112f 64488B04 		movq	%fs:40, %rax
 2748      25280000 
 2748      00
 2749 1138 488945E8 		movq	%rax, -24(%rbp)
 2750 113c 31C0     		xorl	%eax, %eax
 2751              	.LBB29:
 104:TestUnitTest++.cpp ****         {
 105:TestUnitTest++.cpp ****             CHECK_THROW(throw "oops", int);
 2752              		.loc 5 105 13
 2753 113e C645B700 		movb	$0, -73(%rbp)
 2754 1142 BF080000 		movl	$8, %edi
 2754      00
 2755 1147 E8000000 		call	__cxa_allocate_exception@PLT
 2755      00
 2756 114c 488D1500 		leaq	.LC43(%rip), %rdx
 2756      000000
 2757 1153 488910   		movq	%rdx, (%rax)
 2758 1156 BA000000 		movl	$0, %edx
 2758      00
 2759 115b 488D0D00 		leaq	_ZTIPKc(%rip), %rcx
 2759      000000
 2760 1162 4889CE   		movq	%rcx, %rsi
 2761 1165 4889C7   		movq	%rax, %rdi
 2762              	.LEHB56:
 2763 1168 E8000000 		call	__cxa_throw@PLT
 2763      00
 2764              	.LEHE56:
 2765              	.L132:
 2766              		.loc 5 105 13 is_stmt 0 discriminator 8
 2767 116d 0FB645B7 		movzbl	-73(%rbp), %eax
 2768 1171 83F001   		xorl	$1, %eax
 2769 1174 84C0     		testb	%al, %al
 2770 1176 746C     		je	.L135
 2771              	.LEHB57:
 2772              		.loc 5 105 13 discriminator 2
 2773 1178 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv@PLT
 2773      00
 2774 117d 488B18   		movq	(%rax), %rbx
 2775 1180 E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv@PLT
 2775      00
 2776 1185 488B08   		movq	(%rax), %rcx
 2777 1188 488D45C0 		leaq	-64(%rbp), %rax
 2778 118c BA690000 		movl	$105, %edx
 2778      00
 2779 1191 4889CE   		movq	%rcx, %rsi
 2780 1194 4889C7   		movq	%rax, %rdi
 2781 1197 E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i@PLT
 2781      00
 2782 119c 488D45C0 		leaq	-64(%rbp), %rax
 2783 11a0 488D1500 		leaq	.LC39(%rip), %rdx
 2783      000000
 2784 11a7 4889C6   		movq	%rax, %rsi
 2785 11aa 4889DF   		movq	%rbx, %rdi
 2786 11ad E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc@PLT
 2786      00
 2787              	.LBE29:
 106:TestUnitTest++.cpp ****         }
 2788              		.loc 5 106 9 is_stmt 1 discriminator 2
 2789 11b2 EB30     		jmp	.L135
 2790              	.L134:
 2791 11b4 F30F1EFA 		endbr64
 105:TestUnitTest++.cpp ****         }
 2792              		.loc 5 105 13
 2793 11b8 4883FA01 		cmpq	$1, %rdx
 2794 11bc 7517     		jne	.L131
 2795              	.LBB31:
 2796              	.LBB30:
 105:TestUnitTest++.cpp ****         }
 2797              		.loc 5 105 13 is_stmt 0 discriminator 5
 2798 11be 4889C7   		movq	%rax, %rdi
 2799 11c1 E8000000 		call	__cxa_begin_catch@PLT
 2799      00
 2800 11c6 488945B8 		movq	%rax, -72(%rbp)
 2801 11ca C645B701 		movb	$1, -73(%rbp)
 2802 11ce E8000000 		call	__cxa_end_catch@PLT
 2802      00
 2803 11d3 EB98     		jmp	.L132
 2804              	.L131:
 2805              	.LBE30:
 105:TestUnitTest++.cpp ****         }
 2806              		.loc 5 105 13 discriminator 6
 2807 11d5 4889C7   		movq	%rax, %rdi
 2808 11d8 E8000000 		call	__cxa_begin_catch@PLT
 2808      00
 2809 11dd E8000000 		call	__cxa_end_catch@PLT
 2809      00
 2810              	.LEHE57:
 2811 11e2 EB89     		jmp	.L132
 2812              	.L135:
 2813              	.LBE31:
 2814              		.loc 5 106 9 is_stmt 1
 2815 11e4 90       		nop
 2816 11e5 488B45E8 		movq	-24(%rbp), %rax
 2817 11e9 64482B04 		subq	%fs:40, %rax
 2817      25280000 
 2817      00
 2818 11f2 7405     		je	.L133
 2819 11f4 E8000000 		call	__stack_chk_fail@PLT
 2819      00
 2820              	.L133:
 2821 11f9 488B5DF8 		movq	-8(%rbp), %rbx
 2822 11fd C9       		leave
 2823              		.cfi_def_cfa 7, 8
 2824 11fe C3       		ret
 2825              		.cfi_endproc
 2826              	.LFE1466:
 2827              		.section	.gcc_except_table
 2828              		.align 4
 2829              	.LLSDA1466:
 2830 0190 FF       		.byte	0xff
 2831 0191 9B       		.byte	0x9b
 2832 0192 19       		.uleb128 .LLSDATT1466-.LLSDATTD1466
 2833              	.LLSDATTD1466:
 2834 0193 01       		.byte	0x1
 2835 0194 09       		.uleb128 .LLSDACSE1466-.LLSDACSB1466
 2836              	.LLSDACSB1466:
 2837 0195 4A       		.uleb128 .LEHB56-.LFB1466
 2838 0196 05       		.uleb128 .LEHE56-.LEHB56
 2839 0197 9601     		.uleb128 .L134-.LFB1466
 2840 0199 03       		.uleb128 0x3
 2841 019a 5A       		.uleb128 .LEHB57-.LFB1466
 2842 019b 6A       		.uleb128 .LEHE57-.LEHB57
 2843 019c 00       		.uleb128 0
 2844 019d 00       		.uleb128 0
 2845              	.LLSDACSE1466:
 2846 019e 02       		.byte	0x2
 2847 019f 00       		.byte	0
 2848 01a0 01       		.byte	0x1
 2849 01a1 7D       		.byte	0x7d
 2850 01a2 0000     		.align 4
 2851 01a4 00000000 		.long	0
 2852              	
 2853 01a8 00000000 		.long	DW.ref._ZTIi-.
 2854              	.LLSDATT1466:
 2855              		.text
 2857 11ff 90       		.align 2
 2859              	_ZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEv:
 2860              	.LFB1462:
  98:TestUnitTest++.cpp ****     class WrongThrowTest : public UnitTest::Test
 2861              		.loc 5 98 1
 2862              		.cfi_startproc
 2863              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 2864              		.cfi_lsda 0x1b,.LLSDA1462
 2865 1200 F30F1EFA 		endbr64
 2866 1204 55       		pushq	%rbp
 2867              		.cfi_def_cfa_offset 16
 2868              		.cfi_offset 6, -16
 2869 1205 4889E5   		movq	%rsp, %rbp
 2870              		.cfi_def_cfa_register 6
 2871 1208 53       		pushq	%rbx
 2872 1209 4881EC98 		subq	$152, %rsp
 2872      000000
 2873              		.cfi_offset 3, -24
 2874 1210 4889BD68 		movq	%rdi, -152(%rbp)
 2874      FFFFFF
  98:TestUnitTest++.cpp ****     class WrongThrowTest : public UnitTest::Test
 2875              		.loc 5 98 1
 2876 1217 64488B04 		movq	%fs:40, %rax
 2876      25280000 
 2876      00
 2877 1220 488945E8 		movq	%rax, -24(%rbp)
 2878 1224 31C0     		xorl	%eax, %eax
 107:TestUnitTest++.cpp ****     };
 108:TestUnitTest++.cpp **** 
 109:TestUnitTest++.cpp ****     UnitTest::TestResults results;
 2879              		.loc 5 109 27
 2880 1226 488D4590 		leaq	-112(%rbp), %rax
 2881 122a BE000000 		movl	$0, %esi
 2881      00
 2882 122f 4889C7   		movq	%rax, %rdi
 2883              	.LEHB58:
 2884 1232 E8000000 		call	_ZN8UnitTest11TestResultsC1EPNS_12TestReporterE@PLT
 2884      00
 2885              	.LBB32:
 110:TestUnitTest++.cpp **** 	{
 111:TestUnitTest++.cpp **** 		ScopedCurrentTest scopedResults(results);
 2886              		.loc 5 111 42
 2887 1237 488D4D90 		leaq	-112(%rbp), %rcx
 2888 123b 488D4580 		leaq	-128(%rbp), %rax
 2889 123f BA000000 		movl	$0, %edx
 2889      00
 2890 1244 4889CE   		movq	%rcx, %rsi
 2891 1247 4889C7   		movq	%rax, %rdi
 2892 124a E8000000 		call	_ZN17ScopedCurrentTestC1ERN8UnitTest11TestResultsEPKNS0_11TestDetailsE
 2892      00
 2893              	.LEHE58:
 112:TestUnitTest++.cpp **** 
 113:TestUnitTest++.cpp **** 		WrongThrowTest test;
 2894              		.loc 5 113 18
 2895 124f 488D45B0 		leaq	-80(%rbp), %rax
 2896 1253 4889C7   		movq	%rax, %rdi
 2897              	.LEHB59:
 2898 1256 E87BFEFF 		call	_ZZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEvEN14WrongThrowTestC1Ev
 2898      FF
 2899              	.LEHE59:
 114:TestUnitTest++.cpp **** 		test.Run();
 2900              		.loc 5 114 11
 2901 125b 488D45B0 		leaq	-80(%rbp), %rax
 2902 125f 4889C7   		movq	%rax, %rdi
 2903              	.LEHB60:
 2904 1262 E8000000 		call	_ZN8UnitTest4Test3RunEv@PLT
 2904      00
 2905              	.LEHE60:
 115:TestUnitTest++.cpp **** 	}
 2906              		.loc 5 115 2
 2907 1267 488D45B0 		leaq	-80(%rbp), %rax
 2908 126b 4889C7   		movq	%rax, %rdi
 2909              	.LEHB61:
 2910 126e E8DB1300 		call	_ZZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEvEN14WrongThrowTestD1Ev
 2910      00
 2911              	.LEHE61:
 2912              		.loc 5 115 2 is_stmt 0 discriminator 2
 2913 1273 488D4580 		leaq	-128(%rbp), %rax
 2914 1277 4889C7   		movq	%rax, %rdi
 2915              	.LEHB62:
 2916 127a E8000000 		call	_ZN17ScopedCurrentTestD1Ev
 2916      00
 2917              	.LEHE62:
 2918              	.LEHB63:
 2919              	.LBE32:
 116:TestUnitTest++.cpp **** 
 117:TestUnitTest++.cpp **** 	CHECK_EQUAL(1, results.GetFailureCount());
 2920              		.loc 5 117 2 is_stmt 1 discriminator 2
 2921 127f E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv@PLT
 2921      00
 2922 1284 488B08   		movq	(%rax), %rcx
 2923 1287 488D45B0 		leaq	-80(%rbp), %rax
 2924 128b BA750000 		movl	$117, %edx
 2924      00
 2925 1290 4889CE   		movq	%rcx, %rsi
 2926 1293 4889C7   		movq	%rax, %rdi
 2927 1296 E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i@PLT
 2927      00
 2928              		.loc 5 117 2 is_stmt 0 discriminator 4
 2929 129b 488D4590 		leaq	-112(%rbp), %rax
 2930 129f 4889C7   		movq	%rax, %rdi
 2931 12a2 E8000000 		call	_ZNK8UnitTest11TestResults15GetFailureCountEv@PLT
 2931      00
 2932 12a7 894580   		movl	%eax, -128(%rbp)
 2933 12aa C7857CFF 		movl	$1, -132(%rbp)
 2933      FFFF0100 
 2933      0000
 2934 12b4 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv@PLT
 2934      00
 2935              		.loc 5 117 2 discriminator 6
 2936 12b9 488B00   		movq	(%rax), %rax
 2937 12bc 488D4DB0 		leaq	-80(%rbp), %rcx
 2938 12c0 488D5580 		leaq	-128(%rbp), %rdx
 2939 12c4 488DB57C 		leaq	-132(%rbp), %rsi
 2939      FFFFFF
 2940 12cb 4889C7   		movq	%rax, %rdi
 2941 12ce E8000000 		call	_ZN8UnitTest10CheckEqualIiiEEvRNS_11TestResultsERKT_RKT0_RKNS_11TestDetailsE
 2941      00
 2942              	.LEHE63:
 118:TestUnitTest++.cpp **** }
 2943              		.loc 5 118 1 is_stmt 1
 2944 12d3 E9970000 		jmp	.L136
 2944      00
 2945              	.L144:
 2946 12d8 F30F1EFA 		endbr64
 2947              	.LBB33:
 115:TestUnitTest++.cpp **** 	}
 2948              		.loc 5 115 2
 2949 12dc 4889C3   		movq	%rax, %rbx
 2950 12df 488D45B0 		leaq	-80(%rbp), %rax
 2951 12e3 4889C7   		movq	%rax, %rdi
 2952 12e6 E8631300 		call	_ZZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEvEN14WrongThrowTestD1Ev
 2952      00
 2953 12eb EB07     		jmp	.L138
 2954              	.L143:
 2955 12ed F30F1EFA 		endbr64
 2956 12f1 4889C3   		movq	%rax, %rbx
 2957              	.L138:
 115:TestUnitTest++.cpp **** 	}
 2958              		.loc 5 115 2 is_stmt 0 discriminator 1
 2959 12f4 488D4580 		leaq	-128(%rbp), %rax
 2960 12f8 4889C7   		movq	%rax, %rdi
 2961 12fb E8000000 		call	_ZN17ScopedCurrentTestD1Ev
 2961      00
 2962 1300 4889D8   		movq	%rbx, %rax
 2963 1303 4889C7   		movq	%rax, %rdi
 2964              	.LEHB64:
 2965 1306 E8000000 		call	_Unwind_Resume@PLT
 2965      00
 2966              	.LEHE64:
 2967              	.L145:
 2968 130b F30F1EFA 		endbr64
 2969              	.LBE33:
 117:TestUnitTest++.cpp **** }
 2970              		.loc 5 117 2 is_stmt 1
 2971 130f 4889C7   		movq	%rax, %rdi
 2972 1312 E8000000 		call	__cxa_begin_catch@PLT
 2972      00
 2973              	.LEHB65:
 2974 1317 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv@PLT
 2974      00
 117:TestUnitTest++.cpp **** }
 2975              		.loc 5 117 2 is_stmt 0 discriminator 3
 2976 131c 488B18   		movq	(%rax), %rbx
 2977 131f E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv@PLT
 2977      00
 117:TestUnitTest++.cpp **** }
 2978              		.loc 5 117 2 discriminator 13
 2979 1324 488B08   		movq	(%rax), %rcx
 2980 1327 488D45B0 		leaq	-80(%rbp), %rax
 2981 132b BA750000 		movl	$117, %edx
 2981      00
 2982 1330 4889CE   		movq	%rcx, %rsi
 2983 1333 4889C7   		movq	%rax, %rdi
 2984 1336 E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i@PLT
 2984      00
 117:TestUnitTest++.cpp **** }
 2985              		.loc 5 117 2 discriminator 17
 2986 133b 488D45B0 		leaq	-80(%rbp), %rax
 2987 133f 488D1500 		leaq	.LC40(%rip), %rdx
 2987      000000
 2988 1346 4889C6   		movq	%rax, %rsi
 2989 1349 4889DF   		movq	%rbx, %rdi
 2990 134c E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc@PLT
 2990      00
 2991              	.LEHE65:
 2992              	.LEHB66:
 117:TestUnitTest++.cpp **** }
 2993              		.loc 5 117 2 discriminator 19
 2994 1351 E8000000 		call	__cxa_end_catch@PLT
 2994      00
 2995              	.LEHE66:
 2996              		.loc 5 118 1 is_stmt 1 discriminator 19
 2997 1356 EB17     		jmp	.L136
 2998              	.L146:
 2999 1358 F30F1EFA 		endbr64
 117:TestUnitTest++.cpp **** }
 3000              		.loc 5 117 2
 3001 135c 4889C3   		movq	%rax, %rbx
 3002 135f E8000000 		call	__cxa_end_catch@PLT
 3002      00
 3003 1364 4889D8   		movq	%rbx, %rax
 3004 1367 4889C7   		movq	%rax, %rdi
 3005              	.LEHB67:
 3006 136a E8000000 		call	_Unwind_Resume@PLT
 3006      00
 3007              	.LEHE67:
 3008              	.L136:
 3009              		.loc 5 118 1
 3010 136f 488B45E8 		movq	-24(%rbp), %rax
 3011 1373 64482B04 		subq	%fs:40, %rax
 3011      25280000 
 3011      00
 3012 137c 7405     		je	.L142
 3013 137e E8000000 		call	__stack_chk_fail@PLT
 3013      00
 3014              	.L142:
 3015 1383 488B5DF8 		movq	-8(%rbp), %rbx
 3016 1387 C9       		leave
 3017              		.cfi_def_cfa 7, 8
 3018 1388 C3       		ret
 3019              		.cfi_endproc
 3020              	.LFE1462:
 3021              		.section	.gcc_except_table
 3022              		.align 4
 3023              	.LLSDA1462:
 3024 01ac FF       		.byte	0xff
 3025 01ad 9B       		.byte	0x9b
 3026 01ae 39       		.uleb128 .LLSDATT1462-.LLSDATTD1462
 3027              	.LLSDATTD1462:
 3028 01af 01       		.byte	0x1
 3029 01b0 31       		.uleb128 .LLSDACSE1462-.LLSDACSB1462
 3030              	.LLSDACSB1462:
 3031 01b1 32       		.uleb128 .LEHB58-.LFB1462
 3032 01b2 1D       		.uleb128 .LEHE58-.LEHB58
 3033 01b3 00       		.uleb128 0
 3034 01b4 00       		.uleb128 0
 3035 01b5 56       		.uleb128 .LEHB59-.LFB1462
 3036 01b6 05       		.uleb128 .LEHE59-.LEHB59
 3037 01b7 ED01     		.uleb128 .L143-.LFB1462
 3038 01b9 00       		.uleb128 0
 3039 01ba 62       		.uleb128 .LEHB60-.LFB1462
 3040 01bb 05       		.uleb128 .LEHE60-.LEHB60
 3041 01bc D801     		.uleb128 .L144-.LFB1462
 3042 01be 00       		.uleb128 0
 3043 01bf 6E       		.uleb128 .LEHB61-.LFB1462
 3044 01c0 05       		.uleb128 .LEHE61-.LEHB61
 3045 01c1 ED01     		.uleb128 .L143-.LFB1462
 3046 01c3 00       		.uleb128 0
 3047 01c4 7A       		.uleb128 .LEHB62-.LFB1462
 3048 01c5 05       		.uleb128 .LEHE62-.LEHB62
 3049 01c6 00       		.uleb128 0
 3050 01c7 00       		.uleb128 0
 3051 01c8 7F       		.uleb128 .LEHB63-.LFB1462
 3052 01c9 54       		.uleb128 .LEHE63-.LEHB63
 3053 01ca 8B02     		.uleb128 .L145-.LFB1462
 3054 01cc 01       		.uleb128 0x1
 3055 01cd 8602     		.uleb128 .LEHB64-.LFB1462
 3056 01cf 05       		.uleb128 .LEHE64-.LEHB64
 3057 01d0 00       		.uleb128 0
 3058 01d1 00       		.uleb128 0
 3059 01d2 9702     		.uleb128 .LEHB65-.LFB1462
 3060 01d4 3A       		.uleb128 .LEHE65-.LEHB65
 3061 01d5 D802     		.uleb128 .L146-.LFB1462
 3062 01d7 00       		.uleb128 0
 3063 01d8 D102     		.uleb128 .LEHB66-.LFB1462
 3064 01da 05       		.uleb128 .LEHE66-.LEHB66
 3065 01db 00       		.uleb128 0
 3066 01dc 00       		.uleb128 0
 3067 01dd EA02     		.uleb128 .LEHB67-.LFB1462
 3068 01df 05       		.uleb128 .LEHE67-.LEHB67
 3069 01e0 00       		.uleb128 0
 3070 01e1 00       		.uleb128 0
 3071              	.LLSDACSE1462:
 3072 01e2 01       		.byte	0x1
 3073 01e3 00       		.byte	0
 3074              		.align 4
 3075 01e4 00000000 		.long	0
 3076              	
 3077              	.LLSDATT1462:
 3078              		.text
 3080 1389 90       		.align 2
 3082              	_ZN12_GLOBAL__N_113SimpleFixtureC2Ev:
 3083              	.LFB1468:
 119:TestUnitTest++.cpp **** 
 120:TestUnitTest++.cpp **** struct SimpleFixture
 121:TestUnitTest++.cpp **** {
 122:TestUnitTest++.cpp ****     SimpleFixture()
 3084              		.loc 5 122 5
 3085              		.cfi_startproc
 3086 138a 55       		pushq	%rbp
 3087              		.cfi_def_cfa_offset 16
 3088              		.cfi_offset 6, -16
 3089 138b 4889E5   		movq	%rsp, %rbp
 3090              		.cfi_def_cfa_register 6
 3091 138e 48897DF8 		movq	%rdi, -8(%rbp)
 3092              	.LBB34:
 123:TestUnitTest++.cpp ****     {
 124:TestUnitTest++.cpp ****         ++instanceCount;
 3093              		.loc 5 124 9
 3094 1392 8B050000 		movl	_ZN12_GLOBAL__N_113SimpleFixture13instanceCountE(%rip), %eax
 3094      0000
 3095 1398 83C001   		addl	$1, %eax
 3096 139b 89050000 		movl	%eax, _ZN12_GLOBAL__N_113SimpleFixture13instanceCountE(%rip)
 3096      0000
 3097              	.LBE34:
 125:TestUnitTest++.cpp ****     }
 3098              		.loc 5 125 5
 3099 13a1 90       		nop
 3100 13a2 5D       		popq	%rbp
 3101              		.cfi_def_cfa 7, 8
 3102 13a3 C3       		ret
 3103              		.cfi_endproc
 3104              	.LFE1468:
 3106              		.align 2
 3108              	_ZN12_GLOBAL__N_113SimpleFixtureD2Ev:
 3109              	.LFB1471:
 126:TestUnitTest++.cpp ****     ~SimpleFixture()
 3110              		.loc 5 126 5
 3111              		.cfi_startproc
 3112 13a4 55       		pushq	%rbp
 3113              		.cfi_def_cfa_offset 16
 3114              		.cfi_offset 6, -16
 3115 13a5 4889E5   		movq	%rsp, %rbp
 3116              		.cfi_def_cfa_register 6
 3117 13a8 48897DF8 		movq	%rdi, -8(%rbp)
 3118              	.LBB35:
 127:TestUnitTest++.cpp ****     {
 128:TestUnitTest++.cpp ****         --instanceCount;
 3119              		.loc 5 128 9
 3120 13ac 8B050000 		movl	_ZN12_GLOBAL__N_113SimpleFixture13instanceCountE(%rip), %eax
 3120      0000
 3121 13b2 83E801   		subl	$1, %eax
 3122 13b5 89050000 		movl	%eax, _ZN12_GLOBAL__N_113SimpleFixture13instanceCountE(%rip)
 3122      0000
 3123              	.LBE35:
 129:TestUnitTest++.cpp ****     }
 3124              		.loc 5 129 5
 3125 13bb 90       		nop
 3126 13bc 5D       		popq	%rbp
 3127              		.cfi_def_cfa 7, 8
 3128 13bd C3       		ret
 3129              		.cfi_endproc
 3130              	.LFE1471:
 3132              		.local	_ZN12_GLOBAL__N_113SimpleFixture13instanceCountE
 3133              		.comm	_ZN12_GLOBAL__N_113SimpleFixture13instanceCountE,4,4
 3134              		.align 2
 3136              	_ZN12_GLOBAL__N_145SimpleFixtureDefaultFixtureCtorIsCalledHelperC2ERKN8UnitTest11TestDetailsE:
 3137              	.LFB1474:
 130:TestUnitTest++.cpp **** 
 131:TestUnitTest++.cpp ****     static int instanceCount;
 132:TestUnitTest++.cpp **** };
 133:TestUnitTest++.cpp **** 
 134:TestUnitTest++.cpp **** int SimpleFixture::instanceCount = 0;
 135:TestUnitTest++.cpp **** 
 136:TestUnitTest++.cpp **** TEST_FIXTURE(SimpleFixture, DefaultFixtureCtorIsCalled)
 3138              		.loc 5 136 1
 3139              		.cfi_startproc
 3140 13be 55       		pushq	%rbp
 3141              		.cfi_def_cfa_offset 16
 3142              		.cfi_offset 6, -16
 3143 13bf 4889E5   		movq	%rsp, %rbp
 3144              		.cfi_def_cfa_register 6
 3145 13c2 4883EC10 		subq	$16, %rsp
 3146 13c6 48897DF8 		movq	%rdi, -8(%rbp)
 3147 13ca 488975F0 		movq	%rsi, -16(%rbp)
 3148              	.LBB36:
 3149              		.loc 5 136 1
 3150 13ce 488B45F8 		movq	-8(%rbp), %rax
 3151 13d2 4889C7   		movq	%rax, %rdi
 3152 13d5 E8B0FFFF 		call	_ZN12_GLOBAL__N_113SimpleFixtureC2Ev
 3152      FF
 3153 13da 488B45F8 		movq	-8(%rbp), %rax
 3154 13de 488B55F0 		movq	-16(%rbp), %rdx
 3155 13e2 488910   		movq	%rdx, (%rax)
 3156              	.LBE36:
 3157 13e5 90       		nop
 3158 13e6 C9       		leave
 3159              		.cfi_def_cfa 7, 8
 3160 13e7 C3       		ret
 3161              		.cfi_endproc
 3162              	.LFE1474:
 3164              		.set	_ZN12_GLOBAL__N_145SimpleFixtureDefaultFixtureCtorIsCalledHelperC1ERKN8UnitTest11TestDetailsE
 3165              		.section	.rodata
 3166              	.LC44:
 3167 0405 44656661 		.string	"DefaultFixtureCtorIsCalled"
 3167      756C7446 
 3167      69787475 
 3167      72654374 
 3167      6F724973 
 3168              		.text
 3169              		.align 2
 3171              	_ZN12_GLOBAL__N_143TestSimpleFixtureDefaultFixtureCtorIsCalledC2Ev:
 3172              	.LFB1477:
 3173              		.loc 5 136 1
 3174              		.cfi_startproc
 3175 13e8 55       		pushq	%rbp
 3176              		.cfi_def_cfa_offset 16
 3177              		.cfi_offset 6, -16
 3178 13e9 4889E5   		movq	%rsp, %rbp
 3179              		.cfi_def_cfa_register 6
 3180 13ec 53       		pushq	%rbx
 3181 13ed 4883EC18 		subq	$24, %rsp
 3182              		.cfi_offset 3, -24
 3183 13f1 48897DE8 		movq	%rdi, -24(%rbp)
 3184              	.LBB37:
 3185              		.loc 5 136 1
 3186 13f5 488B5DE8 		movq	-24(%rbp), %rbx
 3187 13f9 E8000000 		call	_ZN13UnitTestSuite12GetSuiteNameEv
 3187      00
 3188 13fe 4889C2   		movq	%rax, %rdx
 3189 1401 41B88800 		movl	$136, %r8d
 3189      0000
 3190 1407 488D0500 		leaq	.LC1(%rip), %rax
 3190      000000
 3191 140e 4889C1   		movq	%rax, %rcx
 3192 1411 488D0500 		leaq	.LC44(%rip), %rax
 3192      000000
 3193 1418 4889C6   		movq	%rax, %rsi
 3194 141b 4889DF   		movq	%rbx, %rdi
 3195 141e E8000000 		call	_ZN8UnitTest4TestC2EPKcS2_S2_i@PLT
 3195      00
 3196 1423 488D1500 		leaq	16+_ZTVN12_GLOBAL__N_143TestSimpleFixtureDefaultFixtureCtorIsCalledE(%rip), %rdx
 3196      000000
 3197 142a 488B45E8 		movq	-24(%rbp), %rax
 3198 142e 488910   		movq	%rdx, (%rax)
 3199              	.LBE37:
 3200 1431 90       		nop
 3201 1432 488B5DF8 		movq	-8(%rbp), %rbx
 3202 1436 C9       		leave
 3203              		.cfi_def_cfa 7, 8
 3204 1437 C3       		ret
 3205              		.cfi_endproc
 3206              	.LFE1477:
 3208              		.set	_ZN12_GLOBAL__N_143TestSimpleFixtureDefaultFixtureCtorIsCalledC1Ev,_ZN12_GLOBAL__N_143TestSim
 3209              		.local	_ZN12_GLOBAL__N_151testSimpleFixtureDefaultFixtureCtorIsCalledInstanceE
 3210              		.comm	_ZN12_GLOBAL__N_151testSimpleFixtureDefaultFixtureCtorIsCalledInstanceE,56,32
 3211              		.local	_ZN12_GLOBAL__N_144adderSimpleFixtureDefaultFixtureCtorIsCalledE
 3212              		.comm	_ZN12_GLOBAL__N_144adderSimpleFixtureDefaultFixtureCtorIsCalledE,1,1
 3213              		.align 2
 3215              	_ZN12_GLOBAL__N_145SimpleFixtureDefaultFixtureCtorIsCalledHelperD2Ev:
 3216              	.LFB1481:
 3217              		.loc 5 136 1
 3218              		.cfi_startproc
 3219 1438 55       		pushq	%rbp
 3220              		.cfi_def_cfa_offset 16
 3221              		.cfi_offset 6, -16
 3222 1439 4889E5   		movq	%rsp, %rbp
 3223              		.cfi_def_cfa_register 6
 3224 143c 4883EC08 		subq	$8, %rsp
 3225 1440 48897DF8 		movq	%rdi, -8(%rbp)
 3226              	.LBB38:
 3227              		.loc 5 136 1
 3228 1444 488B45F8 		movq	-8(%rbp), %rax
 3229 1448 4889C7   		movq	%rax, %rdi
 3230 144b E854FFFF 		call	_ZN12_GLOBAL__N_113SimpleFixtureD2Ev
 3230      FF
 3231              	.LBE38:
 3232 1450 90       		nop
 3233 1451 C9       		leave
 3234              		.cfi_def_cfa 7, 8
 3235 1452 C3       		ret
 3236              		.cfi_endproc
 3237              	.LFE1481:
 3239              		.set	_ZN12_GLOBAL__N_145SimpleFixtureDefaultFixtureCtorIsCalledHelperD1Ev,_ZN12_GLOBAL__N_145Simpl
 3240              		.section	.rodata
 3241              	.LC45:
 3242 0420 556E6861 		.string	"Unhandled exception: "
 3242      6E646C65 
 3242      64206578 
 3242      63657074 
 3242      696F6E3A 
 3243 0436 0000     		.align 8
 3244              	.LC46:
 3245 0438 556E6861 		.string	"Unhandled exception while destroying fixture SimpleFixture"
 3245      6E646C65 
 3245      64206578 
 3245      63657074 
 3245      696F6E20 
 3246 0473 00000000 		.align 8
 3246      00
 3247              	.LC47:
 3248 0478 556E6861 		.string	"Unhandled exception while constructing fixture SimpleFixture"
 3248      6E646C65 
 3248      64206578 
 3248      63657074 
 3248      696F6E20 
 3249              		.text
 3250 1453 90       		.align 2
 3252              	_ZNK12_GLOBAL__N_143TestSimpleFixtureDefaultFixtureCtorIsCalled7RunImplEv:
 3253              	.LFB1479:
 3254              		.loc 5 136 1
 3255              		.cfi_startproc
 3256              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 3257              		.cfi_lsda 0x1b,.LLSDA1479
 3258 1454 F30F1EFA 		endbr64
 3259 1458 55       		pushq	%rbp
 3260              		.cfi_def_cfa_offset 16
 3261              		.cfi_offset 6, -16
 3262 1459 4889E5   		movq	%rsp, %rbp
 3263              		.cfi_def_cfa_register 6
 3264 145c 4155     		pushq	%r13
 3265 145e 4154     		pushq	%r12
 3266 1460 53       		pushq	%rbx
 3267 1461 4881ECF8 		subq	$504, %rsp
 3267      010000
 3268              		.cfi_offset 13, -24
 3269              		.cfi_offset 12, -32
 3270              		.cfi_offset 3, -40
 3271 1468 4889BDF8 		movq	%rdi, -520(%rbp)
 3271      FDFFFF
 3272              		.loc 5 136 1
 3273 146f 64488B04 		movq	%fs:40, %rax
 3273      25280000 
 3273      00
 3274 1478 488945D8 		movq	%rax, -40(%rbp)
 3275 147c 31C0     		xorl	%eax, %eax
 3276 147e C6850FFE 		movb	$0, -497(%rbp)
 3276      FFFF00
 3277              	.LBB39:
 3278 1485 488B85F8 		movq	-520(%rbp), %rax
 3278      FDFFFF
 3279 148c 488D5008 		leaq	8(%rax), %rdx
 3280 1490 488D8520 		leaq	-480(%rbp), %rax
 3280      FEFFFF
 3281 1497 4889D6   		movq	%rdx, %rsi
 3282 149a 4889C7   		movq	%rax, %rdi
 3283 149d E81CFFFF 		call	_ZN12_GLOBAL__N_145SimpleFixtureDefaultFixtureCtorIsCalledHelperC1ERKN8UnitTest11TestDetailsE
 3283      FF
 3284 14a2 C6850FFE 		movb	$1, -497(%rbp)
 3284      FFFF01
 3285 14a9 488B85F8 		movq	-520(%rbp), %rax
 3285      FDFFFF
 3286 14b0 488D5008 		leaq	8(%rax), %rdx
 3287 14b4 488D8520 		leaq	-480(%rbp), %rax
 3287      FEFFFF
 3288 14bb 4889D6   		movq	%rdx, %rsi
 3289 14be 4889C7   		movq	%rax, %rdi
 3290              	.LEHB68:
 3291 14c1 E8B10900 		call	_ZN8UnitTest11ExecuteTestIN12_GLOBAL__N_145SimpleFixtureDefaultFixtureCtorIsCalledHelperEEEvR
 3291      00
 3292              	.LEHE68:
 3293              		.loc 5 136 1 is_stmt 0 discriminator 2
 3294 14c6 488D8520 		leaq	-480(%rbp), %rax
 3294      FEFFFF
 3295 14cd 4889C7   		movq	%rax, %rdi
 3296 14d0 E863FFFF 		call	_ZN12_GLOBAL__N_145SimpleFixtureDefaultFixtureCtorIsCalledHelperD1Ev
 3296      FF
 3297              	.LBE39:
 3298 14d5 E97E0200 		jmp	.L152
 3298      00
 3299              	.L165:
 3300 14da F30F1EFA 		endbr64
 3301              	.LBB40:
 3302              		.loc 5 136 1
 3303 14de 4989C4   		movq	%rax, %r12
 3304 14e1 4889D3   		movq	%rdx, %rbx
 3305 14e4 488D8520 		leaq	-480(%rbp), %rax
 3305      FEFFFF
 3306 14eb 4889C7   		movq	%rax, %rdi
 3307 14ee E845FFFF 		call	_ZN12_GLOBAL__N_145SimpleFixtureDefaultFixtureCtorIsCalledHelperD1Ev
 3307      FF
 3308 14f3 4C89E0   		movq	%r12, %rax
 3309 14f6 4889DA   		movq	%rbx, %rdx
 3310              	.LBE40:
 3311 14f9 4883FA01 		cmpq	$1, %rdx
 3312 14fd 740F     		je	.L154
 3313 14ff 4883FA02 		cmpq	$2, %rdx
 3314 1503 0F84A700 		je	.L155
 3314      0000
 3315 1509 E94D0100 		jmp	.L170
 3315      00
 3316              	.L154:
 3317              	.LBB41:
 3318              		.loc 5 136 1 discriminator 3
 3319 150e 4889C7   		movq	%rax, %rdi
 3320 1511 E8000000 		call	__cxa_begin_catch@PLT
 3320      00
 3321 1516 48898518 		movq	%rax, -488(%rbp)
 3321      FEFFFF
 3322              	.LEHB69:
 3323 151d E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv@PLT
 3323      00
 3324 1522 488B18   		movq	(%rax), %rbx
 3325 1525 488B8518 		movq	-488(%rbp), %rax
 3325      FEFFFF
 3326 152c 488B00   		movq	(%rax), %rax
 3327 152f 4883C010 		addq	$16, %rax
 3328 1533 488B10   		movq	(%rax), %rdx
 3329 1536 488B8518 		movq	-488(%rbp), %rax
 3329      FEFFFF
 3330 153d 4889C7   		movq	%rax, %rdi
 3331 1540 FFD2     		call	*%rdx
 3332              	.LVL0:
 3333 1542 4989C4   		movq	%rax, %r12
 3334 1545 488B8518 		movq	-488(%rbp), %rax
 3334      FEFFFF
 3335 154c 4889C7   		movq	%rax, %rdi
 3336 154f E8000000 		call	_ZNK8UnitTest15AssertException10LineNumberEv@PLT
 3336      00
 3337              		.loc 5 136 1 discriminator 7
 3338 1554 4189C5   		movl	%eax, %r13d
 3339 1557 488B8518 		movq	-488(%rbp), %rax
 3339      FEFFFF
 3340 155e 4889C7   		movq	%rax, %rdi
 3341 1561 E8000000 		call	_ZNK8UnitTest15AssertException8FilenameEv@PLT
 3341      00
 3342              		.loc 5 136 1 discriminator 9
 3343 1566 4889C1   		movq	%rax, %rcx
 3344 1569 488B85F8 		movq	-520(%rbp), %rax
 3344      FDFFFF
 3345 1570 488B5008 		movq	8(%rax), %rdx
 3346 1574 488B85F8 		movq	-520(%rbp), %rax
 3346      FDFFFF
 3347 157b 488B7010 		movq	16(%rax), %rsi
 3348 157f 488D8520 		leaq	-480(%rbp), %rax
 3348      FEFFFF
 3349 1586 4589E8   		movl	%r13d, %r8d
 3350 1589 4889C7   		movq	%rax, %rdi
 3351 158c E8000000 		call	_ZN8UnitTest11TestDetailsC1EPKcS2_S2_i@PLT
 3351      00
 3352              		.loc 5 136 1 discriminator 13
 3353 1591 488D8520 		leaq	-480(%rbp), %rax
 3353      FEFFFF
 3354 1598 4C89E2   		movq	%r12, %rdx
 3355 159b 4889C6   		movq	%rax, %rsi
 3356 159e 4889DF   		movq	%rbx, %rdi
 3357 15a1 E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc@PLT
 3357      00
 3358              	.LEHE69:
 3359              		.loc 5 136 1 discriminator 15
 3360 15a6 E8000000 		call	__cxa_end_catch@PLT
 3360      00
 3361              	.LBE41:
 3362 15ab E9A80100 		jmp	.L152
 3362      00
 3363              	.L155:
 3364              	.LBB42:
 3365              		.loc 5 136 1 discriminator 4
 3366 15b0 4889C7   		movq	%rax, %rdi
 3367 15b3 E8000000 		call	__cxa_begin_catch@PLT
 3367      00
 3368 15b8 48898510 		movq	%rax, -496(%rbp)
 3368      FEFFFF
 3369              	.LBB43:
 3370 15bf 488D8540 		leaq	-448(%rbp), %rax
 3370      FEFFFF
 3371 15c6 4889C7   		movq	%rax, %rdi
 3372              	.LEHB70:
 3373 15c9 E8000000 		call	_ZN8UnitTest15MemoryOutStreamC1Ev
 3373      00
 3374              	.LEHE70:
 3375              		.loc 5 136 1 discriminator 17
 3376 15ce 488D8540 		leaq	-448(%rbp), %rax
 3376      FEFFFF
 3377 15d5 488D1500 		leaq	.LC45(%rip), %rdx
 3377      000000
 3378 15dc 4889D6   		movq	%rdx, %rsi
 3379 15df 4889C7   		movq	%rax, %rdi
 3380              	.LEHB71:
 3381 15e2 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 3381      00
 3382 15e7 4889C3   		movq	%rax, %rbx
 3383 15ea 488B8510 		movq	-496(%rbp), %rax
 3383      FEFFFF
 3384 15f1 488B00   		movq	(%rax), %rax
 3385 15f4 4883C010 		addq	$16, %rax
 3386 15f8 488B10   		movq	(%rax), %rdx
 3387 15fb 488B8510 		movq	-496(%rbp), %rax
 3387      FEFFFF
 3388 1602 4889C7   		movq	%rax, %rdi
 3389 1605 FFD2     		call	*%rdx
 3390              	.LVL1:
 3391 1607 4889C6   		movq	%rax, %rsi
 3392 160a 4889DF   		movq	%rbx, %rdi
 3393 160d E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 3393      00
 3394              		.loc 5 136 1 discriminator 21
 3395 1612 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv@PLT
 3395      00
 3396 1617 488B18   		movq	(%rax), %rbx
 3397 161a 488D8540 		leaq	-448(%rbp), %rax
 3397      FEFFFF
 3398 1621 4889C7   		movq	%rax, %rdi
 3399 1624 E8000000 		call	_ZNK8UnitTest15MemoryOutStream7GetTextEv@PLT
 3399      00
 3400              		.loc 5 136 1 discriminator 23
 3401 1629 4889C2   		movq	%rax, %rdx
 3402 162c 488B85F8 		movq	-520(%rbp), %rax
 3402      FDFFFF
 3403 1633 4883C008 		addq	$8, %rax
 3404 1637 4889C6   		movq	%rax, %rsi
 3405 163a 4889DF   		movq	%rbx, %rdi
 3406 163d E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc@PLT
 3406      00
 3407              	.LEHE71:
 3408              		.loc 5 136 1 discriminator 27
 3409 1642 488D8540 		leaq	-448(%rbp), %rax
 3409      FEFFFF
 3410 1649 4889C7   		movq	%rax, %rdi
 3411              	.LEHB72:
 3412 164c E8000000 		call	_ZN8UnitTest15MemoryOutStreamD1Ev
 3412      00
 3413              	.LEHE72:
 3414              	.LBE43:
 3415              		.loc 5 136 1 discriminator 28
 3416 1651 E8000000 		call	__cxa_end_catch@PLT
 3416      00
 3417              	.LBE42:
 3418 1656 E9FD0000 		jmp	.L152
 3418      00
 3419              	.L170:
 3420              		.loc 5 136 1 discriminator 5
 3421 165b 4889C7   		movq	%rax, %rdi
 3422 165e E8000000 		call	__cxa_begin_catch@PLT
 3422      00
 3423 1663 80BD0FFE 		cmpb	$0, -497(%rbp)
 3423      FFFF00
 3424 166a 7445     		je	.L158
 3425              	.LEHB73:
 3426              		.loc 5 136 1 discriminator 30
 3427 166c E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv@PLT
 3427      00
 3428 1671 488B18   		movq	(%rax), %rbx
 3429 1674 488B85F8 		movq	-520(%rbp), %rax
 3429      FDFFFF
 3430 167b 488D4808 		leaq	8(%rax), %rcx
 3431 167f 488D8520 		leaq	-480(%rbp), %rax
 3431      FEFFFF
 3432 1686 BA880000 		movl	$136, %edx
 3432      00
 3433 168b 4889CE   		movq	%rcx, %rsi
 3434 168e 4889C7   		movq	%rax, %rdi
 3435 1691 E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i@PLT
 3435      00
 3436              		.loc 5 136 1 discriminator 35
 3437 1696 488D8520 		leaq	-480(%rbp), %rax
 3437      FEFFFF
 3438 169d 488D1500 		leaq	.LC46(%rip), %rdx
 3438      000000
 3439 16a4 4889C6   		movq	%rax, %rsi
 3440 16a7 4889DF   		movq	%rbx, %rdi
 3441 16aa E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc@PLT
 3441      00
 3442 16af EB43     		jmp	.L159
 3443              	.L158:
 3444              		.loc 5 136 1 discriminator 31
 3445 16b1 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv@PLT
 3445      00
 3446 16b6 488B18   		movq	(%rax), %rbx
 3447 16b9 488B85F8 		movq	-520(%rbp), %rax
 3447      FDFFFF
 3448 16c0 488D4808 		leaq	8(%rax), %rcx
 3449 16c4 488D8520 		leaq	-480(%rbp), %rax
 3449      FEFFFF
 3450 16cb BA880000 		movl	$136, %edx
 3450      00
 3451 16d0 4889CE   		movq	%rcx, %rsi
 3452 16d3 4889C7   		movq	%rax, %rdi
 3453 16d6 E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i@PLT
 3453      00
 3454              		.loc 5 136 1 discriminator 42
 3455 16db 488D8520 		leaq	-480(%rbp), %rax
 3455      FEFFFF
 3456 16e2 488D1500 		leaq	.LC47(%rip), %rdx
 3456      000000
 3457 16e9 4889C6   		movq	%rax, %rsi
 3458 16ec 4889DF   		movq	%rbx, %rdi
 3459 16ef E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc@PLT
 3459      00
 3460              	.LEHE73:
 3461              	.L159:
 3462              	.LEHB74:
 3463              		.loc 5 136 1 discriminator 45
 3464 16f4 E8000000 		call	__cxa_end_catch@PLT
 3464      00
 3465 16f9 EB5D     		jmp	.L152
 3466              	.L166:
 3467 16fb F30F1EFA 		endbr64
 3468              	.LBB45:
 3469              		.loc 5 136 1
 3470 16ff 4889C3   		movq	%rax, %rbx
 3471 1702 E8000000 		call	__cxa_end_catch@PLT
 3471      00
 3472 1707 4889D8   		movq	%rbx, %rax
 3473 170a 4889C7   		movq	%rax, %rdi
 3474 170d E8000000 		call	_Unwind_Resume@PLT
 3474      00
 3475              	.LEHE74:
 3476              	.L168:
 3477 1712 F30F1EFA 		endbr64
 3478              	.LBE45:
 3479              	.LBB46:
 3480              	.LBB44:
 3481 1716 4889C3   		movq	%rax, %rbx
 3482 1719 488D8540 		leaq	-448(%rbp), %rax
 3482      FEFFFF
 3483 1720 4889C7   		movq	%rax, %rdi
 3484 1723 E8000000 		call	_ZN8UnitTest15MemoryOutStreamD1Ev
 3484      00
 3485 1728 EB07     		jmp	.L162
 3486              	.L167:
 3487 172a F30F1EFA 		endbr64
 3488              	.LBE44:
 3489 172e 4889C3   		movq	%rax, %rbx
 3490              	.L162:
 3491 1731 E8000000 		call	__cxa_end_catch@PLT
 3491      00
 3492 1736 4889D8   		movq	%rbx, %rax
 3493 1739 4889C7   		movq	%rax, %rdi
 3494              	.LEHB75:
 3495 173c E8000000 		call	_Unwind_Resume@PLT
 3495      00
 3496              	.LEHE75:
 3497              	.L169:
 3498 1741 F30F1EFA 		endbr64
 3499              	.LBE46:
 3500 1745 4889C3   		movq	%rax, %rbx
 3501 1748 E8000000 		call	__cxa_end_catch@PLT
 3501      00
 3502 174d 4889D8   		movq	%rbx, %rax
 3503 1750 4889C7   		movq	%rax, %rdi
 3504              	.LEHB76:
 3505 1753 E8000000 		call	_Unwind_Resume@PLT
 3505      00
 3506              	.LEHE76:
 3507              	.L152:
 3508 1758 488B45D8 		movq	-40(%rbp), %rax
 3509 175c 64482B04 		subq	%fs:40, %rax
 3509      25280000 
 3509      00
 3510 1765 7405     		je	.L164
 3511 1767 E8000000 		call	__stack_chk_fail@PLT
 3511      00
 3512              	.L164:
 3513 176c 4881C4F8 		addq	$504, %rsp
 3513      010000
 3514 1773 5B       		popq	%rbx
 3515 1774 415C     		popq	%r12
 3516 1776 415D     		popq	%r13
 3517 1778 5D       		popq	%rbp
 3518              		.cfi_def_cfa 7, 8
 3519 1779 C3       		ret
 3520              		.cfi_endproc
 3521              	.LFE1479:
 3522              		.section	.gcc_except_table
 3523              		.align 4
 3524              	.LLSDA1479:
 3525 01e8 FF       		.byte	0xff
 3526 01e9 9B       		.byte	0x9b
 3527 01ea 4D       		.uleb128 .LLSDATT1479-.LLSDATTD1479
 3528              	.LLSDATTD1479:
 3529 01eb 01       		.byte	0x1
 3530 01ec 34       		.uleb128 .LLSDACSE1479-.LLSDACSB1479
 3531              	.LLSDACSB1479:
 3532 01ed 6D       		.uleb128 .LEHB68-.LFB1479
 3533 01ee 05       		.uleb128 .LEHE68-.LEHB68
 3534 01ef 8601     		.uleb128 .L165-.LFB1479
 3535 01f1 07       		.uleb128 0x7
 3536 01f2 C901     		.uleb128 .LEHB69-.LFB1479
 3537 01f4 8901     		.uleb128 .LEHE69-.LEHB69
 3538 01f6 A705     		.uleb128 .L166-.LFB1479
 3539 01f8 00       		.uleb128 0
 3540 01f9 F502     		.uleb128 .LEHB70-.LFB1479
 3541 01fb 05       		.uleb128 .LEHE70-.LEHB70
 3542 01fc D605     		.uleb128 .L167-.LFB1479
 3543 01fe 00       		.uleb128 0
 3544 01ff 8E03     		.uleb128 .LEHB71-.LFB1479
 3545 0201 60       		.uleb128 .LEHE71-.LEHB71
 3546 0202 BE05     		.uleb128 .L168-.LFB1479
 3547 0204 00       		.uleb128 0
 3548 0205 F803     		.uleb128 .LEHB72-.LFB1479
 3549 0207 05       		.uleb128 .LEHE72-.LEHB72
 3550 0208 D605     		.uleb128 .L167-.LFB1479
 3551 020a 00       		.uleb128 0
 3552 020b 9804     		.uleb128 .LEHB73-.LFB1479
 3553 020d 8801     		.uleb128 .LEHE73-.LEHB73
 3554 020f ED05     		.uleb128 .L169-.LFB1479
 3555 0211 00       		.uleb128 0
 3556 0212 A005     		.uleb128 .LEHB74-.LFB1479
 3557 0214 1E       		.uleb128 .LEHE74-.LEHB74
 3558 0215 00       		.uleb128 0
 3559 0216 00       		.uleb128 0
 3560 0217 E805     		.uleb128 .LEHB75-.LFB1479
 3561 0219 05       		.uleb128 .LEHE75-.LEHB75
 3562 021a 00       		.uleb128 0
 3563 021b 00       		.uleb128 0
 3564 021c FF05     		.uleb128 .LEHB76-.LFB1479
 3565 021e 05       		.uleb128 .LEHE76-.LEHB76
 3566 021f 00       		.uleb128 0
 3567 0220 00       		.uleb128 0
 3568              	.LLSDACSE1479:
 3569 0221 03       		.byte	0x3
 3570 0222 00       		.byte	0
 3571 0223 02       		.byte	0x2
 3572 0224 7D       		.byte	0x7d
 3573 0225 01       		.byte	0x1
 3574 0226 7D       		.byte	0x7d
 3575 0227 00       		.byte	0
 3576 0228 7D       		.byte	0x7d
 3577 0229 000000   		.align 4
 3578 022c 00000000 		.long	0
 3579              	
 3580 0230 00000000 		.long	DW.ref._ZTISt9exception-.
 3581 0234 00000000 		.long	DW.ref._ZTIN8UnitTest15AssertExceptionE-.
 3582              	.LLSDATT1479:
 3583              		.text
 3585              		.section	.rodata
 3586 04b5 000000   		.align 8
 3587              	.LC48:
 3588 04b8 53696D70 		.string	"SimpleFixture::instanceCount > 0"
 3588      6C654669 
 3588      78747572 
 3588      653A3A69 
 3588      6E737461 
 3589 04d9 00000000 		.align 8
 3589      000000
 3590              	.LC49:
 3591 04e0 556E6861 		.string	"Unhandled exception in CHECK(SimpleFixture::instanceCount > 0)"
 3591      6E646C65 
 3591      64206578 
 3591      63657074 
 3591      696F6E20 
 3592              		.text
 3593              		.align 2
 3595              	_ZN12_GLOBAL__N_145SimpleFixtureDefaultFixtureCtorIsCalledHelper7RunImplEv:
 3596              	.LFB1483:
 137:TestUnitTest++.cpp **** {
 3597              		.loc 5 137 1 is_stmt 1
 3598              		.cfi_startproc
 3599              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 3600              		.cfi_lsda 0x1b,.LLSDA1483
 3601 177a F30F1EFA 		endbr64
 3602 177e 55       		pushq	%rbp
 3603              		.cfi_def_cfa_offset 16
 3604              		.cfi_offset 6, -16
 3605 177f 4889E5   		movq	%rsp, %rbp
 3606              		.cfi_def_cfa_register 6
 3607 1782 53       		pushq	%rbx
 3608 1783 4883EC48 		subq	$72, %rsp
 3609              		.cfi_offset 3, -24
 3610 1787 48897DB8 		movq	%rdi, -72(%rbp)
 3611              		.loc 5 137 1
 3612 178b 64488B04 		movq	%fs:40, %rax
 3612      25280000 
 3612      00
 3613 1794 488945E8 		movq	%rax, -24(%rbp)
 3614 1798 31C0     		xorl	%eax, %eax
 138:TestUnitTest++.cpp ****     CHECK(SimpleFixture::instanceCount > 0);
 3615              		.loc 5 138 5
 3616 179a 8B050000 		movl	_ZN12_GLOBAL__N_113SimpleFixture13instanceCountE(%rip), %eax
 3616      0000
 3617 17a0 85C0     		testl	%eax, %eax
 3618 17a2 0F9FC0   		setg	%al
 3619 17a5 0FB6C0   		movzbl	%al, %eax
 3620 17a8 89C7     		movl	%eax, %edi
 3621 17aa E8000000 		call	_ZN8UnitTest5CheckIbEEbT_
 3621      00
 3622 17af 83F001   		xorl	$1, %eax
 3623 17b2 84C0     		testb	%al, %al
 3624 17b4 0F84A000 		je	.L178
 3624      0000
 3625              	.LEHB77:
 3626              		.loc 5 138 5 is_stmt 0 discriminator 1
 3627 17ba E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv@PLT
 3627      00
 3628 17bf 488B18   		movq	(%rax), %rbx
 3629 17c2 E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv@PLT
 3629      00
 3630              		.loc 5 138 5 discriminator 3
 3631 17c7 488B08   		movq	(%rax), %rcx
 3632 17ca 488D45C0 		leaq	-64(%rbp), %rax
 3633 17ce BA8A0000 		movl	$138, %edx
 3633      00
 3634 17d3 4889CE   		movq	%rcx, %rsi
 3635 17d6 4889C7   		movq	%rax, %rdi
 3636 17d9 E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i@PLT
 3636      00
 3637              		.loc 5 138 5 discriminator 7
 3638 17de 488D45C0 		leaq	-64(%rbp), %rax
 3639 17e2 488D1500 		leaq	.LC48(%rip), %rdx
 3639      000000
 3640 17e9 4889C6   		movq	%rax, %rsi
 3641 17ec 4889DF   		movq	%rbx, %rdi
 3642 17ef E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc@PLT
 3642      00
 3643              	.LEHE77:
 139:TestUnitTest++.cpp **** }
 3644              		.loc 5 139 1 is_stmt 1
 3645 17f4 EB64     		jmp	.L178
 3646              	.L176:
 3647 17f6 F30F1EFA 		endbr64
 138:TestUnitTest++.cpp ****     CHECK(SimpleFixture::instanceCount > 0);
 3648              		.loc 5 138 5
 3649 17fa 4889C7   		movq	%rax, %rdi
 3650 17fd E8000000 		call	__cxa_begin_catch@PLT
 3650      00
 3651              	.LEHB78:
 3652 1802 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv@PLT
 3652      00
 138:TestUnitTest++.cpp ****     CHECK(SimpleFixture::instanceCount > 0);
 3653              		.loc 5 138 5 is_stmt 0 discriminator 6
 3654 1807 488B18   		movq	(%rax), %rbx
 3655 180a E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv@PLT
 3655      00
 138:TestUnitTest++.cpp ****     CHECK(SimpleFixture::instanceCount > 0);
 3656              		.loc 5 138 5 discriminator 12
 3657 180f 488B08   		movq	(%rax), %rcx
 3658 1812 488D45C0 		leaq	-64(%rbp), %rax
 3659 1816 BA8A0000 		movl	$138, %edx
 3659      00
 3660 181b 4889CE   		movq	%rcx, %rsi
 3661 181e 4889C7   		movq	%rax, %rdi
 3662 1821 E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i@PLT
 3662      00
 138:TestUnitTest++.cpp ****     CHECK(SimpleFixture::instanceCount > 0);
 3663              		.loc 5 138 5 discriminator 16
 3664 1826 488D45C0 		leaq	-64(%rbp), %rax
 3665 182a 488D1500 		leaq	.LC49(%rip), %rdx
 3665      000000
 3666 1831 4889C6   		movq	%rax, %rsi
 3667 1834 4889DF   		movq	%rbx, %rdi
 3668 1837 E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc@PLT
 3668      00
 3669              	.LEHE78:
 3670              	.LEHB79:
 138:TestUnitTest++.cpp ****     CHECK(SimpleFixture::instanceCount > 0);
 3671              		.loc 5 138 5 discriminator 18
 3672 183c E8000000 		call	__cxa_end_catch@PLT
 3672      00
 3673              	.LEHE79:
 3674              		.loc 5 139 1 is_stmt 1 discriminator 18
 3675 1841 EB17     		jmp	.L178
 3676              	.L177:
 3677 1843 F30F1EFA 		endbr64
 138:TestUnitTest++.cpp ****     CHECK(SimpleFixture::instanceCount > 0);
 3678              		.loc 5 138 5
 3679 1847 4889C3   		movq	%rax, %rbx
 3680 184a E8000000 		call	__cxa_end_catch@PLT
 3680      00
 3681 184f 4889D8   		movq	%rbx, %rax
 3682 1852 4889C7   		movq	%rax, %rdi
 3683              	.LEHB80:
 3684 1855 E8000000 		call	_Unwind_Resume@PLT
 3684      00
 3685              	.LEHE80:
 3686              	.L178:
 3687              		.loc 5 139 1
 3688 185a 90       		nop
 3689 185b 488B45E8 		movq	-24(%rbp), %rax
 3690 185f 64482B04 		subq	%fs:40, %rax
 3690      25280000 
 3690      00
 3691 1868 7405     		je	.L175
 3692 186a E8000000 		call	__stack_chk_fail@PLT
 3692      00
 3693              	.L175:
 3694 186f 488B5DF8 		movq	-8(%rbp), %rbx
 3695 1873 C9       		leave
 3696              		.cfi_def_cfa 7, 8
 3697 1874 C3       		ret
 3698              		.cfi_endproc
 3699              	.LFE1483:
 3700              		.section	.gcc_except_table
 3701              		.align 4
 3702              	.LLSDA1483:
 3703 0238 FF       		.byte	0xff
 3704 0239 9B       		.byte	0x9b
 3705 023a 1D       		.uleb128 .LLSDATT1483-.LLSDATTD1483
 3706              	.LLSDATTD1483:
 3707 023b 01       		.byte	0x1
 3708 023c 14       		.uleb128 .LLSDACSE1483-.LLSDACSB1483
 3709              	.LLSDACSB1483:
 3710 023d 40       		.uleb128 .LEHB77-.LFB1483
 3711 023e 3A       		.uleb128 .LEHE77-.LEHB77
 3712 023f 7C       		.uleb128 .L176-.LFB1483
 3713 0240 01       		.uleb128 0x1
 3714 0241 8801     		.uleb128 .LEHB78-.LFB1483
 3715 0243 3A       		.uleb128 .LEHE78-.LEHB78
 3716 0244 C901     		.uleb128 .L177-.LFB1483
 3717 0246 00       		.uleb128 0
 3718 0247 C201     		.uleb128 .LEHB79-.LFB1483
 3719 0249 05       		.uleb128 .LEHE79-.LEHB79
 3720 024a 00       		.uleb128 0
 3721 024b 00       		.uleb128 0
 3722 024c DB01     		.uleb128 .LEHB80-.LFB1483
 3723 024e 05       		.uleb128 .LEHE80-.LEHB80
 3724 024f 00       		.uleb128 0
 3725 0250 00       		.uleb128 0
 3726              	.LLSDACSE1483:
 3727 0251 01       		.byte	0x1
 3728 0252 00       		.byte	0
 3729 0253 00       		.align 4
 3730 0254 00000000 		.long	0
 3731              	
 3732              	.LLSDATT1483:
 3733              		.text
 3735 1875 90       		.align 2
 3737              	_ZN12_GLOBAL__N_145SimpleFixtureOnlyOneFixtureAliveAtATimeHelperC2ERKN8UnitTest11TestDetailsE:
 3738              	.LFB1485:
 140:TestUnitTest++.cpp **** 
 141:TestUnitTest++.cpp **** TEST_FIXTURE(SimpleFixture, OnlyOneFixtureAliveAtATime)
 3739              		.loc 5 141 1
 3740              		.cfi_startproc
 3741 1876 55       		pushq	%rbp
 3742              		.cfi_def_cfa_offset 16
 3743              		.cfi_offset 6, -16
 3744 1877 4889E5   		movq	%rsp, %rbp
 3745              		.cfi_def_cfa_register 6
 3746 187a 4883EC10 		subq	$16, %rsp
 3747 187e 48897DF8 		movq	%rdi, -8(%rbp)
 3748 1882 488975F0 		movq	%rsi, -16(%rbp)
 3749              	.LBB47:
 3750              		.loc 5 141 1
 3751 1886 488B45F8 		movq	-8(%rbp), %rax
 3752 188a 4889C7   		movq	%rax, %rdi
 3753 188d E8F8FAFF 		call	_ZN12_GLOBAL__N_113SimpleFixtureC2Ev
 3753      FF
 3754 1892 488B45F8 		movq	-8(%rbp), %rax
 3755 1896 488B55F0 		movq	-16(%rbp), %rdx
 3756 189a 488910   		movq	%rdx, (%rax)
 3757              	.LBE47:
 3758 189d 90       		nop
 3759 189e C9       		leave
 3760              		.cfi_def_cfa 7, 8
 3761 189f C3       		ret
 3762              		.cfi_endproc
 3763              	.LFE1485:
 3765              		.set	_ZN12_GLOBAL__N_145SimpleFixtureOnlyOneFixtureAliveAtATimeHelperC1ERKN8UnitTest11TestDetailsE
 3766              		.section	.rodata
 3767              	.LC50:
 3768 051f 4F6E6C79 		.string	"OnlyOneFixtureAliveAtATime"
 3768      4F6E6546 
 3768      69787475 
 3768      7265416C 
 3768      69766541 
 3769              		.text
 3770              		.align 2
 3772              	_ZN12_GLOBAL__N_143TestSimpleFixtureOnlyOneFixtureAliveAtATimeC2Ev:
 3773              	.LFB1488:
 3774              		.loc 5 141 1
 3775              		.cfi_startproc
 3776 18a0 55       		pushq	%rbp
 3777              		.cfi_def_cfa_offset 16
 3778              		.cfi_offset 6, -16
 3779 18a1 4889E5   		movq	%rsp, %rbp
 3780              		.cfi_def_cfa_register 6
 3781 18a4 53       		pushq	%rbx
 3782 18a5 4883EC18 		subq	$24, %rsp
 3783              		.cfi_offset 3, -24
 3784 18a9 48897DE8 		movq	%rdi, -24(%rbp)
 3785              	.LBB48:
 3786              		.loc 5 141 1
 3787 18ad 488B5DE8 		movq	-24(%rbp), %rbx
 3788 18b1 E8000000 		call	_ZN13UnitTestSuite12GetSuiteNameEv
 3788      00
 3789 18b6 4889C2   		movq	%rax, %rdx
 3790 18b9 41B88D00 		movl	$141, %r8d
 3790      0000
 3791 18bf 488D0500 		leaq	.LC1(%rip), %rax
 3791      000000
 3792 18c6 4889C1   		movq	%rax, %rcx
 3793 18c9 488D0500 		leaq	.LC50(%rip), %rax
 3793      000000
 3794 18d0 4889C6   		movq	%rax, %rsi
 3795 18d3 4889DF   		movq	%rbx, %rdi
 3796 18d6 E8000000 		call	_ZN8UnitTest4TestC2EPKcS2_S2_i@PLT
 3796      00
 3797 18db 488D1500 		leaq	16+_ZTVN12_GLOBAL__N_143TestSimpleFixtureOnlyOneFixtureAliveAtATimeE(%rip), %rdx
 3797      000000
 3798 18e2 488B45E8 		movq	-24(%rbp), %rax
 3799 18e6 488910   		movq	%rdx, (%rax)
 3800              	.LBE48:
 3801 18e9 90       		nop
 3802 18ea 488B5DF8 		movq	-8(%rbp), %rbx
 3803 18ee C9       		leave
 3804              		.cfi_def_cfa 7, 8
 3805 18ef C3       		ret
 3806              		.cfi_endproc
 3807              	.LFE1488:
 3809              		.set	_ZN12_GLOBAL__N_143TestSimpleFixtureOnlyOneFixtureAliveAtATimeC1Ev,_ZN12_GLOBAL__N_143TestSim
 3810              		.local	_ZN12_GLOBAL__N_151testSimpleFixtureOnlyOneFixtureAliveAtATimeInstanceE
 3811              		.comm	_ZN12_GLOBAL__N_151testSimpleFixtureOnlyOneFixtureAliveAtATimeInstanceE,56,32
 3812              		.local	_ZN12_GLOBAL__N_144adderSimpleFixtureOnlyOneFixtureAliveAtATimeE
 3813              		.comm	_ZN12_GLOBAL__N_144adderSimpleFixtureOnlyOneFixtureAliveAtATimeE,1,1
 3814              		.align 2
 3816              	_ZN12_GLOBAL__N_145SimpleFixtureOnlyOneFixtureAliveAtATimeHelperD2Ev:
 3817              	.LFB1492:
 3818              		.loc 5 141 1
 3819              		.cfi_startproc
 3820 18f0 55       		pushq	%rbp
 3821              		.cfi_def_cfa_offset 16
 3822              		.cfi_offset 6, -16
 3823 18f1 4889E5   		movq	%rsp, %rbp
 3824              		.cfi_def_cfa_register 6
 3825 18f4 4883EC08 		subq	$8, %rsp
 3826 18f8 48897DF8 		movq	%rdi, -8(%rbp)
 3827              	.LBB49:
 3828              		.loc 5 141 1
 3829 18fc 488B45F8 		movq	-8(%rbp), %rax
 3830 1900 4889C7   		movq	%rax, %rdi
 3831 1903 E89CFAFF 		call	_ZN12_GLOBAL__N_113SimpleFixtureD2Ev
 3831      FF
 3832              	.LBE49:
 3833 1908 90       		nop
 3834 1909 C9       		leave
 3835              		.cfi_def_cfa 7, 8
 3836 190a C3       		ret
 3837              		.cfi_endproc
 3838              	.LFE1492:
 3840              		.set	_ZN12_GLOBAL__N_145SimpleFixtureOnlyOneFixtureAliveAtATimeHelperD1Ev,_ZN12_GLOBAL__N_145Simpl
 3841 190b 90       		.align 2
 3843              	_ZNK12_GLOBAL__N_143TestSimpleFixtureOnlyOneFixtureAliveAtATime7RunImplEv:
 3844              	.LFB1490:
 3845              		.loc 5 141 1
 3846              		.cfi_startproc
 3847              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 3848              		.cfi_lsda 0x1b,.LLSDA1490
 3849 190c F30F1EFA 		endbr64
 3850 1910 55       		pushq	%rbp
 3851              		.cfi_def_cfa_offset 16
 3852              		.cfi_offset 6, -16
 3853 1911 4889E5   		movq	%rsp, %rbp
 3854              		.cfi_def_cfa_register 6
 3855 1914 4155     		pushq	%r13
 3856 1916 4154     		pushq	%r12
 3857 1918 53       		pushq	%rbx
 3858 1919 4881ECF8 		subq	$504, %rsp
 3858      010000
 3859              		.cfi_offset 13, -24
 3860              		.cfi_offset 12, -32
 3861              		.cfi_offset 3, -40
 3862 1920 4889BDF8 		movq	%rdi, -520(%rbp)
 3862      FDFFFF
 3863              		.loc 5 141 1
 3864 1927 64488B04 		movq	%fs:40, %rax
 3864      25280000 
 3864      00
 3865 1930 488945D8 		movq	%rax, -40(%rbp)
 3866 1934 31C0     		xorl	%eax, %eax
 3867 1936 C6850FFE 		movb	$0, -497(%rbp)
 3867      FFFF00
 3868              	.LBB50:
 3869 193d 488B85F8 		movq	-520(%rbp), %rax
 3869      FDFFFF
 3870 1944 488D5008 		leaq	8(%rax), %rdx
 3871 1948 488D8520 		leaq	-480(%rbp), %rax
 3871      FEFFFF
 3872 194f 4889D6   		movq	%rdx, %rsi
 3873 1952 4889C7   		movq	%rax, %rdi
 3874 1955 E81CFFFF 		call	_ZN12_GLOBAL__N_145SimpleFixtureOnlyOneFixtureAliveAtATimeHelperC1ERKN8UnitTest11TestDetailsE
 3874      FF
 3875 195a C6850FFE 		movb	$1, -497(%rbp)
 3875      FFFF01
 3876 1961 488B85F8 		movq	-520(%rbp), %rax
 3876      FDFFFF
 3877 1968 488D5008 		leaq	8(%rax), %rdx
 3878 196c 488D8520 		leaq	-480(%rbp), %rax
 3878      FEFFFF
 3879 1973 4889D6   		movq	%rdx, %rsi
 3880 1976 4889C7   		movq	%rax, %rdi
 3881              	.LEHB81:
 3882 1979 E8E80700 		call	_ZN8UnitTest11ExecuteTestIN12_GLOBAL__N_145SimpleFixtureOnlyOneFixtureAliveAtATimeHelperEEEvR
 3882      00
 3883              	.LEHE81:
 3884              		.loc 5 141 1 is_stmt 0 discriminator 2
 3885 197e 488D8520 		leaq	-480(%rbp), %rax
 3885      FEFFFF
 3886 1985 4889C7   		movq	%rax, %rdi
 3887 1988 E863FFFF 		call	_ZN12_GLOBAL__N_145SimpleFixtureOnlyOneFixtureAliveAtATimeHelperD1Ev
 3887      FF
 3888              	.LBE50:
 3889 198d E97E0200 		jmp	.L182
 3889      00
 3890              	.L195:
 3891 1992 F30F1EFA 		endbr64
 3892              	.LBB51:
 3893              		.loc 5 141 1
 3894 1996 4989C4   		movq	%rax, %r12
 3895 1999 4889D3   		movq	%rdx, %rbx
 3896 199c 488D8520 		leaq	-480(%rbp), %rax
 3896      FEFFFF
 3897 19a3 4889C7   		movq	%rax, %rdi
 3898 19a6 E845FFFF 		call	_ZN12_GLOBAL__N_145SimpleFixtureOnlyOneFixtureAliveAtATimeHelperD1Ev
 3898      FF
 3899 19ab 4C89E0   		movq	%r12, %rax
 3900 19ae 4889DA   		movq	%rbx, %rdx
 3901              	.LBE51:
 3902 19b1 4883FA01 		cmpq	$1, %rdx
 3903 19b5 740F     		je	.L184
 3904 19b7 4883FA02 		cmpq	$2, %rdx
 3905 19bb 0F84A700 		je	.L185
 3905      0000
 3906 19c1 E94D0100 		jmp	.L200
 3906      00
 3907              	.L184:
 3908              	.LBB52:
 3909              		.loc 5 141 1 discriminator 3
 3910 19c6 4889C7   		movq	%rax, %rdi
 3911 19c9 E8000000 		call	__cxa_begin_catch@PLT
 3911      00
 3912 19ce 48898518 		movq	%rax, -488(%rbp)
 3912      FEFFFF
 3913              	.LEHB82:
 3914 19d5 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv@PLT
 3914      00
 3915 19da 488B18   		movq	(%rax), %rbx
 3916 19dd 488B8518 		movq	-488(%rbp), %rax
 3916      FEFFFF
 3917 19e4 488B00   		movq	(%rax), %rax
 3918 19e7 4883C010 		addq	$16, %rax
 3919 19eb 488B10   		movq	(%rax), %rdx
 3920 19ee 488B8518 		movq	-488(%rbp), %rax
 3920      FEFFFF
 3921 19f5 4889C7   		movq	%rax, %rdi
 3922 19f8 FFD2     		call	*%rdx
 3923              	.LVL2:
 3924 19fa 4989C4   		movq	%rax, %r12
 3925 19fd 488B8518 		movq	-488(%rbp), %rax
 3925      FEFFFF
 3926 1a04 4889C7   		movq	%rax, %rdi
 3927 1a07 E8000000 		call	_ZNK8UnitTest15AssertException10LineNumberEv@PLT
 3927      00
 3928              		.loc 5 141 1 discriminator 7
 3929 1a0c 4189C5   		movl	%eax, %r13d
 3930 1a0f 488B8518 		movq	-488(%rbp), %rax
 3930      FEFFFF
 3931 1a16 4889C7   		movq	%rax, %rdi
 3932 1a19 E8000000 		call	_ZNK8UnitTest15AssertException8FilenameEv@PLT
 3932      00
 3933              		.loc 5 141 1 discriminator 9
 3934 1a1e 4889C1   		movq	%rax, %rcx
 3935 1a21 488B85F8 		movq	-520(%rbp), %rax
 3935      FDFFFF
 3936 1a28 488B5008 		movq	8(%rax), %rdx
 3937 1a2c 488B85F8 		movq	-520(%rbp), %rax
 3937      FDFFFF
 3938 1a33 488B7010 		movq	16(%rax), %rsi
 3939 1a37 488D8520 		leaq	-480(%rbp), %rax
 3939      FEFFFF
 3940 1a3e 4589E8   		movl	%r13d, %r8d
 3941 1a41 4889C7   		movq	%rax, %rdi
 3942 1a44 E8000000 		call	_ZN8UnitTest11TestDetailsC1EPKcS2_S2_i@PLT
 3942      00
 3943              		.loc 5 141 1 discriminator 13
 3944 1a49 488D8520 		leaq	-480(%rbp), %rax
 3944      FEFFFF
 3945 1a50 4C89E2   		movq	%r12, %rdx
 3946 1a53 4889C6   		movq	%rax, %rsi
 3947 1a56 4889DF   		movq	%rbx, %rdi
 3948 1a59 E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc@PLT
 3948      00
 3949              	.LEHE82:
 3950              		.loc 5 141 1 discriminator 15
 3951 1a5e E8000000 		call	__cxa_end_catch@PLT
 3951      00
 3952              	.LBE52:
 3953 1a63 E9A80100 		jmp	.L182
 3953      00
 3954              	.L185:
 3955              	.LBB53:
 3956              		.loc 5 141 1 discriminator 4
 3957 1a68 4889C7   		movq	%rax, %rdi
 3958 1a6b E8000000 		call	__cxa_begin_catch@PLT
 3958      00
 3959 1a70 48898510 		movq	%rax, -496(%rbp)
 3959      FEFFFF
 3960              	.LBB54:
 3961 1a77 488D8540 		leaq	-448(%rbp), %rax
 3961      FEFFFF
 3962 1a7e 4889C7   		movq	%rax, %rdi
 3963              	.LEHB83:
 3964 1a81 E8000000 		call	_ZN8UnitTest15MemoryOutStreamC1Ev
 3964      00
 3965              	.LEHE83:
 3966              		.loc 5 141 1 discriminator 17
 3967 1a86 488D8540 		leaq	-448(%rbp), %rax
 3967      FEFFFF
 3968 1a8d 488D1500 		leaq	.LC45(%rip), %rdx
 3968      000000
 3969 1a94 4889D6   		movq	%rdx, %rsi
 3970 1a97 4889C7   		movq	%rax, %rdi
 3971              	.LEHB84:
 3972 1a9a E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 3972      00
 3973 1a9f 4889C3   		movq	%rax, %rbx
 3974 1aa2 488B8510 		movq	-496(%rbp), %rax
 3974      FEFFFF
 3975 1aa9 488B00   		movq	(%rax), %rax
 3976 1aac 4883C010 		addq	$16, %rax
 3977 1ab0 488B10   		movq	(%rax), %rdx
 3978 1ab3 488B8510 		movq	-496(%rbp), %rax
 3978      FEFFFF
 3979 1aba 4889C7   		movq	%rax, %rdi
 3980 1abd FFD2     		call	*%rdx
 3981              	.LVL3:
 3982 1abf 4889C6   		movq	%rax, %rsi
 3983 1ac2 4889DF   		movq	%rbx, %rdi
 3984 1ac5 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 3984      00
 3985              		.loc 5 141 1 discriminator 21
 3986 1aca E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv@PLT
 3986      00
 3987 1acf 488B18   		movq	(%rax), %rbx
 3988 1ad2 488D8540 		leaq	-448(%rbp), %rax
 3988      FEFFFF
 3989 1ad9 4889C7   		movq	%rax, %rdi
 3990 1adc E8000000 		call	_ZNK8UnitTest15MemoryOutStream7GetTextEv@PLT
 3990      00
 3991              		.loc 5 141 1 discriminator 23
 3992 1ae1 4889C2   		movq	%rax, %rdx
 3993 1ae4 488B85F8 		movq	-520(%rbp), %rax
 3993      FDFFFF
 3994 1aeb 4883C008 		addq	$8, %rax
 3995 1aef 4889C6   		movq	%rax, %rsi
 3996 1af2 4889DF   		movq	%rbx, %rdi
 3997 1af5 E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc@PLT
 3997      00
 3998              	.LEHE84:
 3999              		.loc 5 141 1 discriminator 27
 4000 1afa 488D8540 		leaq	-448(%rbp), %rax
 4000      FEFFFF
 4001 1b01 4889C7   		movq	%rax, %rdi
 4002              	.LEHB85:
 4003 1b04 E8000000 		call	_ZN8UnitTest15MemoryOutStreamD1Ev
 4003      00
 4004              	.LEHE85:
 4005              	.LBE54:
 4006              		.loc 5 141 1 discriminator 28
 4007 1b09 E8000000 		call	__cxa_end_catch@PLT
 4007      00
 4008              	.LBE53:
 4009 1b0e E9FD0000 		jmp	.L182
 4009      00
 4010              	.L200:
 4011              		.loc 5 141 1 discriminator 5
 4012 1b13 4889C7   		movq	%rax, %rdi
 4013 1b16 E8000000 		call	__cxa_begin_catch@PLT
 4013      00
 4014 1b1b 80BD0FFE 		cmpb	$0, -497(%rbp)
 4014      FFFF00
 4015 1b22 7445     		je	.L188
 4016              	.LEHB86:
 4017              		.loc 5 141 1 discriminator 30
 4018 1b24 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv@PLT
 4018      00
 4019 1b29 488B18   		movq	(%rax), %rbx
 4020 1b2c 488B85F8 		movq	-520(%rbp), %rax
 4020      FDFFFF
 4021 1b33 488D4808 		leaq	8(%rax), %rcx
 4022 1b37 488D8520 		leaq	-480(%rbp), %rax
 4022      FEFFFF
 4023 1b3e BA8D0000 		movl	$141, %edx
 4023      00
 4024 1b43 4889CE   		movq	%rcx, %rsi
 4025 1b46 4889C7   		movq	%rax, %rdi
 4026 1b49 E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i@PLT
 4026      00
 4027              		.loc 5 141 1 discriminator 35
 4028 1b4e 488D8520 		leaq	-480(%rbp), %rax
 4028      FEFFFF
 4029 1b55 488D1500 		leaq	.LC46(%rip), %rdx
 4029      000000
 4030 1b5c 4889C6   		movq	%rax, %rsi
 4031 1b5f 4889DF   		movq	%rbx, %rdi
 4032 1b62 E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc@PLT
 4032      00
 4033 1b67 EB43     		jmp	.L189
 4034              	.L188:
 4035              		.loc 5 141 1 discriminator 31
 4036 1b69 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv@PLT
 4036      00
 4037 1b6e 488B18   		movq	(%rax), %rbx
 4038 1b71 488B85F8 		movq	-520(%rbp), %rax
 4038      FDFFFF
 4039 1b78 488D4808 		leaq	8(%rax), %rcx
 4040 1b7c 488D8520 		leaq	-480(%rbp), %rax
 4040      FEFFFF
 4041 1b83 BA8D0000 		movl	$141, %edx
 4041      00
 4042 1b88 4889CE   		movq	%rcx, %rsi
 4043 1b8b 4889C7   		movq	%rax, %rdi
 4044 1b8e E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i@PLT
 4044      00
 4045              		.loc 5 141 1 discriminator 42
 4046 1b93 488D8520 		leaq	-480(%rbp), %rax
 4046      FEFFFF
 4047 1b9a 488D1500 		leaq	.LC47(%rip), %rdx
 4047      000000
 4048 1ba1 4889C6   		movq	%rax, %rsi
 4049 1ba4 4889DF   		movq	%rbx, %rdi
 4050 1ba7 E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc@PLT
 4050      00
 4051              	.LEHE86:
 4052              	.L189:
 4053              	.LEHB87:
 4054              		.loc 5 141 1 discriminator 45
 4055 1bac E8000000 		call	__cxa_end_catch@PLT
 4055      00
 4056 1bb1 EB5D     		jmp	.L182
 4057              	.L196:
 4058 1bb3 F30F1EFA 		endbr64
 4059              	.LBB56:
 4060              		.loc 5 141 1
 4061 1bb7 4889C3   		movq	%rax, %rbx
 4062 1bba E8000000 		call	__cxa_end_catch@PLT
 4062      00
 4063 1bbf 4889D8   		movq	%rbx, %rax
 4064 1bc2 4889C7   		movq	%rax, %rdi
 4065 1bc5 E8000000 		call	_Unwind_Resume@PLT
 4065      00
 4066              	.LEHE87:
 4067              	.L198:
 4068 1bca F30F1EFA 		endbr64
 4069              	.LBE56:
 4070              	.LBB57:
 4071              	.LBB55:
 4072 1bce 4889C3   		movq	%rax, %rbx
 4073 1bd1 488D8540 		leaq	-448(%rbp), %rax
 4073      FEFFFF
 4074 1bd8 4889C7   		movq	%rax, %rdi
 4075 1bdb E8000000 		call	_ZN8UnitTest15MemoryOutStreamD1Ev
 4075      00
 4076 1be0 EB07     		jmp	.L192
 4077              	.L197:
 4078 1be2 F30F1EFA 		endbr64
 4079              	.LBE55:
 4080 1be6 4889C3   		movq	%rax, %rbx
 4081              	.L192:
 4082 1be9 E8000000 		call	__cxa_end_catch@PLT
 4082      00
 4083 1bee 4889D8   		movq	%rbx, %rax
 4084 1bf1 4889C7   		movq	%rax, %rdi
 4085              	.LEHB88:
 4086 1bf4 E8000000 		call	_Unwind_Resume@PLT
 4086      00
 4087              	.LEHE88:
 4088              	.L199:
 4089 1bf9 F30F1EFA 		endbr64
 4090              	.LBE57:
 4091 1bfd 4889C3   		movq	%rax, %rbx
 4092 1c00 E8000000 		call	__cxa_end_catch@PLT
 4092      00
 4093 1c05 4889D8   		movq	%rbx, %rax
 4094 1c08 4889C7   		movq	%rax, %rdi
 4095              	.LEHB89:
 4096 1c0b E8000000 		call	_Unwind_Resume@PLT
 4096      00
 4097              	.LEHE89:
 4098              	.L182:
 4099 1c10 488B45D8 		movq	-40(%rbp), %rax
 4100 1c14 64482B04 		subq	%fs:40, %rax
 4100      25280000 
 4100      00
 4101 1c1d 7405     		je	.L194
 4102 1c1f E8000000 		call	__stack_chk_fail@PLT
 4102      00
 4103              	.L194:
 4104 1c24 4881C4F8 		addq	$504, %rsp
 4104      010000
 4105 1c2b 5B       		popq	%rbx
 4106 1c2c 415C     		popq	%r12
 4107 1c2e 415D     		popq	%r13
 4108 1c30 5D       		popq	%rbp
 4109              		.cfi_def_cfa 7, 8
 4110 1c31 C3       		ret
 4111              		.cfi_endproc
 4112              	.LFE1490:
 4113              		.section	.gcc_except_table
 4114              		.align 4
 4115              	.LLSDA1490:
 4116 0258 FF       		.byte	0xff
 4117 0259 9B       		.byte	0x9b
 4118 025a 4D       		.uleb128 .LLSDATT1490-.LLSDATTD1490
 4119              	.LLSDATTD1490:
 4120 025b 01       		.byte	0x1
 4121 025c 34       		.uleb128 .LLSDACSE1490-.LLSDACSB1490
 4122              	.LLSDACSB1490:
 4123 025d 6D       		.uleb128 .LEHB81-.LFB1490
 4124 025e 05       		.uleb128 .LEHE81-.LEHB81
 4125 025f 8601     		.uleb128 .L195-.LFB1490
 4126 0261 07       		.uleb128 0x7
 4127 0262 C901     		.uleb128 .LEHB82-.LFB1490
 4128 0264 8901     		.uleb128 .LEHE82-.LEHB82
 4129 0266 A705     		.uleb128 .L196-.LFB1490
 4130 0268 00       		.uleb128 0
 4131 0269 F502     		.uleb128 .LEHB83-.LFB1490
 4132 026b 05       		.uleb128 .LEHE83-.LEHB83
 4133 026c D605     		.uleb128 .L197-.LFB1490
 4134 026e 00       		.uleb128 0
 4135 026f 8E03     		.uleb128 .LEHB84-.LFB1490
 4136 0271 60       		.uleb128 .LEHE84-.LEHB84
 4137 0272 BE05     		.uleb128 .L198-.LFB1490
 4138 0274 00       		.uleb128 0
 4139 0275 F803     		.uleb128 .LEHB85-.LFB1490
 4140 0277 05       		.uleb128 .LEHE85-.LEHB85
 4141 0278 D605     		.uleb128 .L197-.LFB1490
 4142 027a 00       		.uleb128 0
 4143 027b 9804     		.uleb128 .LEHB86-.LFB1490
 4144 027d 8801     		.uleb128 .LEHE86-.LEHB86
 4145 027f ED05     		.uleb128 .L199-.LFB1490
 4146 0281 00       		.uleb128 0
 4147 0282 A005     		.uleb128 .LEHB87-.LFB1490
 4148 0284 1E       		.uleb128 .LEHE87-.LEHB87
 4149 0285 00       		.uleb128 0
 4150 0286 00       		.uleb128 0
 4151 0287 E805     		.uleb128 .LEHB88-.LFB1490
 4152 0289 05       		.uleb128 .LEHE88-.LEHB88
 4153 028a 00       		.uleb128 0
 4154 028b 00       		.uleb128 0
 4155 028c FF05     		.uleb128 .LEHB89-.LFB1490
 4156 028e 05       		.uleb128 .LEHE89-.LEHB89
 4157 028f 00       		.uleb128 0
 4158 0290 00       		.uleb128 0
 4159              	.LLSDACSE1490:
 4160 0291 03       		.byte	0x3
 4161 0292 00       		.byte	0
 4162 0293 02       		.byte	0x2
 4163 0294 7D       		.byte	0x7d
 4164 0295 01       		.byte	0x1
 4165 0296 7D       		.byte	0x7d
 4166 0297 00       		.byte	0
 4167 0298 7D       		.byte	0x7d
 4168 0299 000000   		.align 4
 4169 029c 00000000 		.long	0
 4170              	
 4171 02a0 00000000 		.long	DW.ref._ZTISt9exception-.
 4172 02a4 00000000 		.long	DW.ref._ZTIN8UnitTest15AssertExceptionE-.
 4173              	.LLSDATT1490:
 4174              		.text
 4176              		.section	.rodata
 4177 053a 00000000 		.align 8
 4177      0000
 4178              	.LC51:
 4179 0540 556E6861 		.string	"Unhandled exception in CHECK_EQUAL(1, SimpleFixture::instanceCount)"
 4179      6E646C65 
 4179      64206578 
 4179      63657074 
 4179      696F6E20 
 4180              		.text
 4181              		.align 2
 4183              	_ZN12_GLOBAL__N_145SimpleFixtureOnlyOneFixtureAliveAtATimeHelper7RunImplEv:
 4184              	.LFB1494:
 142:TestUnitTest++.cpp **** {
 4185              		.loc 5 142 1 is_stmt 1
 4186              		.cfi_startproc
 4187              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 4188              		.cfi_lsda 0x1b,.LLSDA1494
 4189 1c32 F30F1EFA 		endbr64
 4190 1c36 55       		pushq	%rbp
 4191              		.cfi_def_cfa_offset 16
 4192              		.cfi_offset 6, -16
 4193 1c37 4889E5   		movq	%rsp, %rbp
 4194              		.cfi_def_cfa_register 6
 4195 1c3a 53       		pushq	%rbx
 4196 1c3b 4883EC58 		subq	$88, %rsp
 4197              		.cfi_offset 3, -24
 4198 1c3f 48897DA8 		movq	%rdi, -88(%rbp)
 4199              		.loc 5 142 1
 4200 1c43 64488B04 		movq	%fs:40, %rax
 4200      25280000 
 4200      00
 4201 1c4c 488945E8 		movq	%rax, -24(%rbp)
 4202 1c50 31C0     		xorl	%eax, %eax
 4203              	.LEHB90:
 143:TestUnitTest++.cpp ****     CHECK_EQUAL(1, SimpleFixture::instanceCount);
 4204              		.loc 5 143 5
 4205 1c52 E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv@PLT
 4205      00
 4206 1c57 488B08   		movq	(%rax), %rcx
 4207 1c5a 488D45C0 		leaq	-64(%rbp), %rax
 4208 1c5e BA8F0000 		movl	$143, %edx
 4208      00
 4209 1c63 4889CE   		movq	%rcx, %rsi
 4210 1c66 4889C7   		movq	%rax, %rdi
 4211 1c69 E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i@PLT
 4211      00
 4212              		.loc 5 143 5 is_stmt 0 discriminator 4
 4213 1c6e C745BC01 		movl	$1, -68(%rbp)
 4213      000000
 4214 1c75 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv@PLT
 4214      00
 4215 1c7a 488B00   		movq	(%rax), %rax
 4216 1c7d 488D55C0 		leaq	-64(%rbp), %rdx
 4217 1c81 488D75BC 		leaq	-68(%rbp), %rsi
 4218 1c85 4889D1   		movq	%rdx, %rcx
 4219 1c88 488D1500 		leaq	_ZN12_GLOBAL__N_113SimpleFixture13instanceCountE(%rip), %rdx
 4219      000000
 4220 1c8f 4889C7   		movq	%rax, %rdi
 4221 1c92 E8000000 		call	_ZN8UnitTest10CheckEqualIiiEEvRNS_11TestResultsERKT_RKT0_RKNS_11TestDetailsE
 4221      00
 4222              	.LEHE90:
 144:TestUnitTest++.cpp **** }
 4223              		.loc 5 144 1 is_stmt 1
 4224 1c97 EB64     		jmp	.L201
 4225              	.L206:
 4226 1c99 F30F1EFA 		endbr64
 143:TestUnitTest++.cpp ****     CHECK_EQUAL(1, SimpleFixture::instanceCount);
 4227              		.loc 5 143 5
 4228 1c9d 4889C7   		movq	%rax, %rdi
 4229 1ca0 E8000000 		call	__cxa_begin_catch@PLT
 4229      00
 4230              	.LEHB91:
 4231 1ca5 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv@PLT
 4231      00
 143:TestUnitTest++.cpp ****     CHECK_EQUAL(1, SimpleFixture::instanceCount);
 4232              		.loc 5 143 5 is_stmt 0 discriminator 3
 4233 1caa 488B18   		movq	(%rax), %rbx
 4234 1cad E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv@PLT
 4234      00
 143:TestUnitTest++.cpp ****     CHECK_EQUAL(1, SimpleFixture::instanceCount);
 4235              		.loc 5 143 5 discriminator 11
 4236 1cb2 488B08   		movq	(%rax), %rcx
 4237 1cb5 488D45C0 		leaq	-64(%rbp), %rax
 4238 1cb9 BA8F0000 		movl	$143, %edx
 4238      00
 4239 1cbe 4889CE   		movq	%rcx, %rsi
 4240 1cc1 4889C7   		movq	%rax, %rdi
 4241 1cc4 E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i@PLT
 4241      00
 143:TestUnitTest++.cpp ****     CHECK_EQUAL(1, SimpleFixture::instanceCount);
 4242              		.loc 5 143 5 discriminator 15
 4243 1cc9 488D45C0 		leaq	-64(%rbp), %rax
 4244 1ccd 488D1500 		leaq	.LC51(%rip), %rdx
 4244      000000
 4245 1cd4 4889C6   		movq	%rax, %rsi
 4246 1cd7 4889DF   		movq	%rbx, %rdi
 4247 1cda E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc@PLT
 4247      00
 4248              	.LEHE91:
 4249              	.LEHB92:
 143:TestUnitTest++.cpp ****     CHECK_EQUAL(1, SimpleFixture::instanceCount);
 4250              		.loc 5 143 5 discriminator 17
 4251 1cdf E8000000 		call	__cxa_end_catch@PLT
 4251      00
 4252              	.LEHE92:
 4253              		.loc 5 144 1 is_stmt 1 discriminator 17
 4254 1ce4 EB17     		jmp	.L201
 4255              	.L207:
 4256 1ce6 F30F1EFA 		endbr64
 143:TestUnitTest++.cpp ****     CHECK_EQUAL(1, SimpleFixture::instanceCount);
 4257              		.loc 5 143 5
 4258 1cea 4889C3   		movq	%rax, %rbx
 4259 1ced E8000000 		call	__cxa_end_catch@PLT
 4259      00
 4260 1cf2 4889D8   		movq	%rbx, %rax
 4261 1cf5 4889C7   		movq	%rax, %rdi
 4262              	.LEHB93:
 4263 1cf8 E8000000 		call	_Unwind_Resume@PLT
 4263      00
 4264              	.LEHE93:
 4265              	.L201:
 4266              		.loc 5 144 1
 4267 1cfd 488B45E8 		movq	-24(%rbp), %rax
 4268 1d01 64482B04 		subq	%fs:40, %rax
 4268      25280000 
 4268      00
 4269 1d0a 7405     		je	.L205
 4270 1d0c E8000000 		call	__stack_chk_fail@PLT
 4270      00
 4271              	.L205:
 4272 1d11 488B5DF8 		movq	-8(%rbp), %rbx
 4273 1d15 C9       		leave
 4274              		.cfi_def_cfa 7, 8
 4275 1d16 C3       		ret
 4276              		.cfi_endproc
 4277              	.LFE1494:
 4278              		.section	.gcc_except_table
 4279              		.align 4
 4280              	.LLSDA1494:
 4281 02a8 FF       		.byte	0xff
 4282 02a9 9B       		.byte	0x9b
 4283 02aa 1D       		.uleb128 .LLSDATT1494-.LLSDATTD1494
 4284              	.LLSDATTD1494:
 4285 02ab 01       		.byte	0x1
 4286 02ac 13       		.uleb128 .LLSDACSE1494-.LLSDACSB1494
 4287              	.LLSDACSB1494:
 4288 02ad 20       		.uleb128 .LEHB90-.LFB1494
 4289 02ae 45       		.uleb128 .LEHE90-.LEHB90
 4290 02af 67       		.uleb128 .L206-.LFB1494
 4291 02b0 01       		.uleb128 0x1
 4292 02b1 73       		.uleb128 .LEHB91-.LFB1494
 4293 02b2 3A       		.uleb128 .LEHE91-.LEHB91
 4294 02b3 B401     		.uleb128 .L207-.LFB1494
 4295 02b5 00       		.uleb128 0
 4296 02b6 AD01     		.uleb128 .LEHB92-.LFB1494
 4297 02b8 05       		.uleb128 .LEHE92-.LEHB92
 4298 02b9 00       		.uleb128 0
 4299 02ba 00       		.uleb128 0
 4300 02bb C601     		.uleb128 .LEHB93-.LFB1494
 4301 02bd 05       		.uleb128 .LEHE93-.LEHB93
 4302 02be 00       		.uleb128 0
 4303 02bf 00       		.uleb128 0
 4304              	.LLSDACSE1494:
 4305 02c0 01       		.byte	0x1
 4306 02c1 00       		.byte	0
 4307 02c2 0000     		.align 4
 4308 02c4 00000000 		.long	0
 4309              	
 4310              	.LLSDATT1494:
 4311              		.text
 4314              	_ZN12_GLOBAL__N_19CheckBoolEb:
 4315              	.LFB1495:
 145:TestUnitTest++.cpp **** 
 146:TestUnitTest++.cpp **** void CheckBool(const bool b)
 147:TestUnitTest++.cpp **** {
 4316              		.loc 5 147 1
 4317              		.cfi_startproc
 4318              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 4319              		.cfi_lsda 0x1b,.LLSDA1495
 4320 1d17 F30F1EFA 		endbr64
 4321 1d1b 55       		pushq	%rbp
 4322              		.cfi_def_cfa_offset 16
 4323              		.cfi_offset 6, -16
 4324 1d1c 4889E5   		movq	%rsp, %rbp
 4325              		.cfi_def_cfa_register 6
 4326 1d1f 53       		pushq	%rbx
 4327 1d20 4883EC48 		subq	$72, %rsp
 4328              		.cfi_offset 3, -24
 4329 1d24 89F8     		movl	%edi, %eax
 4330 1d26 8845BC   		movb	%al, -68(%rbp)
 4331              		.loc 5 147 1
 4332 1d29 64488B04 		movq	%fs:40, %rax
 4332      25280000 
 4332      00
 4333 1d32 488945E8 		movq	%rax, -24(%rbp)
 4334 1d36 31C0     		xorl	%eax, %eax
 148:TestUnitTest++.cpp **** 	CHECK(b);
 4335              		.loc 5 148 2
 4336 1d38 0FB645BC 		movzbl	-68(%rbp), %eax
 4337 1d3c 89C7     		movl	%eax, %edi
 4338 1d3e E8000000 		call	_ZN8UnitTest5CheckIbEEbT_
 4338      00
 4339 1d43 83F001   		xorl	$1, %eax
 4340 1d46 84C0     		testb	%al, %al
 4341 1d48 0F84A000 		je	.L215
 4341      0000
 4342              	.LEHB94:
 4343              		.loc 5 148 2 is_stmt 0 discriminator 1
 4344 1d4e E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv@PLT
 4344      00
 4345 1d53 488B18   		movq	(%rax), %rbx
 4346 1d56 E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv@PLT
 4346      00
 4347              		.loc 5 148 2 discriminator 3
 4348 1d5b 488B08   		movq	(%rax), %rcx
 4349 1d5e 488D45C0 		leaq	-64(%rbp), %rax
 4350 1d62 BA940000 		movl	$148, %edx
 4350      00
 4351 1d67 4889CE   		movq	%rcx, %rsi
 4352 1d6a 4889C7   		movq	%rax, %rdi
 4353 1d6d E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i@PLT
 4353      00
 4354              		.loc 5 148 2 discriminator 7
 4355 1d72 488D45C0 		leaq	-64(%rbp), %rax
 4356 1d76 488D1500 		leaq	.LC3(%rip), %rdx
 4356      000000
 4357 1d7d 4889C6   		movq	%rax, %rsi
 4358 1d80 4889DF   		movq	%rbx, %rdi
 4359 1d83 E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc@PLT
 4359      00
 4360              	.LEHE94:
 149:TestUnitTest++.cpp **** }
 4361              		.loc 5 149 1 is_stmt 1
 4362 1d88 EB64     		jmp	.L215
 4363              	.L213:
 4364 1d8a F30F1EFA 		endbr64
 148:TestUnitTest++.cpp **** 	CHECK(b);
 4365              		.loc 5 148 2
 4366 1d8e 4889C7   		movq	%rax, %rdi
 4367 1d91 E8000000 		call	__cxa_begin_catch@PLT
 4367      00
 4368              	.LEHB95:
 4369 1d96 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv@PLT
 4369      00
 148:TestUnitTest++.cpp **** 	CHECK(b);
 4370              		.loc 5 148 2 is_stmt 0 discriminator 6
 4371 1d9b 488B18   		movq	(%rax), %rbx
 4372 1d9e E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv@PLT
 4372      00
 148:TestUnitTest++.cpp **** 	CHECK(b);
 4373              		.loc 5 148 2 discriminator 12
 4374 1da3 488B08   		movq	(%rax), %rcx
 4375 1da6 488D45C0 		leaq	-64(%rbp), %rax
 4376 1daa BA940000 		movl	$148, %edx
 4376      00
 4377 1daf 4889CE   		movq	%rcx, %rsi
 4378 1db2 4889C7   		movq	%rax, %rdi
 4379 1db5 E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i@PLT
 4379      00
 148:TestUnitTest++.cpp **** 	CHECK(b);
 4380              		.loc 5 148 2 discriminator 16
 4381 1dba 488D45C0 		leaq	-64(%rbp), %rax
 4382 1dbe 488D1500 		leaq	.LC4(%rip), %rdx
 4382      000000
 4383 1dc5 4889C6   		movq	%rax, %rsi
 4384 1dc8 4889DF   		movq	%rbx, %rdi
 4385 1dcb E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc@PLT
 4385      00
 4386              	.LEHE95:
 4387              	.LEHB96:
 148:TestUnitTest++.cpp **** 	CHECK(b);
 4388              		.loc 5 148 2 discriminator 18
 4389 1dd0 E8000000 		call	__cxa_end_catch@PLT
 4389      00
 4390              	.LEHE96:
 4391              		.loc 5 149 1 is_stmt 1 discriminator 18
 4392 1dd5 EB17     		jmp	.L215
 4393              	.L214:
 4394 1dd7 F30F1EFA 		endbr64
 148:TestUnitTest++.cpp **** 	CHECK(b);
 4395              		.loc 5 148 2
 4396 1ddb 4889C3   		movq	%rax, %rbx
 4397 1dde E8000000 		call	__cxa_end_catch@PLT
 4397      00
 4398 1de3 4889D8   		movq	%rbx, %rax
 4399 1de6 4889C7   		movq	%rax, %rdi
 4400              	.LEHB97:
 4401 1de9 E8000000 		call	_Unwind_Resume@PLT
 4401      00
 4402              	.LEHE97:
 4403              	.L215:
 4404              		.loc 5 149 1
 4405 1dee 90       		nop
 4406 1def 488B45E8 		movq	-24(%rbp), %rax
 4407 1df3 64482B04 		subq	%fs:40, %rax
 4407      25280000 
 4407      00
 4408 1dfc 7405     		je	.L212
 4409 1dfe E8000000 		call	__stack_chk_fail@PLT
 4409      00
 4410              	.L212:
 4411 1e03 488B5DF8 		movq	-8(%rbp), %rbx
 4412 1e07 C9       		leave
 4413              		.cfi_def_cfa 7, 8
 4414 1e08 C3       		ret
 4415              		.cfi_endproc
 4416              	.LFE1495:
 4417              		.section	.gcc_except_table
 4418              		.align 4
 4419              	.LLSDA1495:
 4420 02c8 FF       		.byte	0xff
 4421 02c9 9B       		.byte	0x9b
 4422 02ca 1D       		.uleb128 .LLSDATT1495-.LLSDATTD1495
 4423              	.LLSDATTD1495:
 4424 02cb 01       		.byte	0x1
 4425 02cc 13       		.uleb128 .LLSDACSE1495-.LLSDACSB1495
 4426              	.LLSDACSB1495:
 4427 02cd 37       		.uleb128 .LEHB94-.LFB1495
 4428 02ce 3A       		.uleb128 .LEHE94-.LEHB94
 4429 02cf 73       		.uleb128 .L213-.LFB1495
 4430 02d0 01       		.uleb128 0x1
 4431 02d1 7F       		.uleb128 .LEHB95-.LFB1495
 4432 02d2 3A       		.uleb128 .LEHE95-.LEHB95
 4433 02d3 C001     		.uleb128 .L214-.LFB1495
 4434 02d5 00       		.uleb128 0
 4435 02d6 B901     		.uleb128 .LEHB96-.LFB1495
 4436 02d8 05       		.uleb128 .LEHE96-.LEHB96
 4437 02d9 00       		.uleb128 0
 4438 02da 00       		.uleb128 0
 4439 02db D201     		.uleb128 .LEHB97-.LFB1495
 4440 02dd 05       		.uleb128 .LEHE97-.LEHB97
 4441 02de 00       		.uleb128 0
 4442 02df 00       		.uleb128 0
 4443              	.LLSDACSE1495:
 4444 02e0 01       		.byte	0x1
 4445 02e1 00       		.byte	0
 4446 02e2 0000     		.align 4
 4447 02e4 00000000 		.long	0
 4448              	
 4449              	.LLSDATT1495:
 4450              		.text
 4452              		.section	.rodata
 4453 0584 00000000 		.align 8
 4454              	.LC52:
 4455 0588 43616E43 		.string	"CanCallCHECKOutsideOfTestFunction"
 4455      616C6C43 
 4455      4845434B 
 4455      4F757473 
 4455      6964654F 
 4456              		.text
 4457 1e09 90       		.align 2
 4459              	_ZN12_GLOBAL__N_137TestCanCallCHECKOutsideOfTestFunctionC2Ev:
 4460              	.LFB1497:
 150:TestUnitTest++.cpp **** 
 151:TestUnitTest++.cpp **** TEST(CanCallCHECKOutsideOfTestFunction)
 4461              		.loc 5 151 1
 4462              		.cfi_startproc
 4463 1e0a 55       		pushq	%rbp
 4464              		.cfi_def_cfa_offset 16
 4465              		.cfi_offset 6, -16
 4466 1e0b 4889E5   		movq	%rsp, %rbp
 4467              		.cfi_def_cfa_register 6
 4468 1e0e 53       		pushq	%rbx
 4469 1e0f 4883EC18 		subq	$24, %rsp
 4470              		.cfi_offset 3, -24
 4471 1e13 48897DE8 		movq	%rdi, -24(%rbp)
 4472              	.LBB58:
 4473              		.loc 5 151 1
 4474 1e17 488B5DE8 		movq	-24(%rbp), %rbx
 4475 1e1b E8000000 		call	_ZN13UnitTestSuite12GetSuiteNameEv
 4475      00
 4476 1e20 4889C2   		movq	%rax, %rdx
 4477 1e23 41B89700 		movl	$151, %r8d
 4477      0000
 4478 1e29 488D0500 		leaq	.LC1(%rip), %rax
 4478      000000
 4479 1e30 4889C1   		movq	%rax, %rcx
 4480 1e33 488D0500 		leaq	.LC52(%rip), %rax
 4480      000000
 4481 1e3a 4889C6   		movq	%rax, %rsi
 4482 1e3d 4889DF   		movq	%rbx, %rdi
 4483 1e40 E8000000 		call	_ZN8UnitTest4TestC2EPKcS2_S2_i@PLT
 4483      00
 4484 1e45 488D1500 		leaq	16+_ZTVN12_GLOBAL__N_137TestCanCallCHECKOutsideOfTestFunctionE(%rip), %rdx
 4484      000000
 4485 1e4c 488B45E8 		movq	-24(%rbp), %rax
 4486 1e50 488910   		movq	%rdx, (%rax)
 4487              	.LBE58:
 4488 1e53 90       		nop
 4489 1e54 488B5DF8 		movq	-8(%rbp), %rbx
 4490 1e58 C9       		leave
 4491              		.cfi_def_cfa 7, 8
 4492 1e59 C3       		ret
 4493              		.cfi_endproc
 4494              	.LFE1497:
 4496              		.set	_ZN12_GLOBAL__N_137TestCanCallCHECKOutsideOfTestFunctionC1Ev,_ZN12_GLOBAL__N_137TestCanCallCH
 4497              		.local	_ZN12_GLOBAL__N_145testCanCallCHECKOutsideOfTestFunctionInstanceE
 4498              		.comm	_ZN12_GLOBAL__N_145testCanCallCHECKOutsideOfTestFunctionInstanceE,56,32
 4499              		.local	_ZN12_GLOBAL__N_138adderCanCallCHECKOutsideOfTestFunctionE
 4500              		.comm	_ZN12_GLOBAL__N_138adderCanCallCHECKOutsideOfTestFunctionE,1,1
 4501              		.align 2
 4503              	_ZNK12_GLOBAL__N_137TestCanCallCHECKOutsideOfTestFunction7RunImplEv:
 4504              	.LFB1499:
 152:TestUnitTest++.cpp **** {
 4505              		.loc 5 152 1
 4506              		.cfi_startproc
 4507 1e5a F30F1EFA 		endbr64
 4508 1e5e 55       		pushq	%rbp
 4509              		.cfi_def_cfa_offset 16
 4510              		.cfi_offset 6, -16
 4511 1e5f 4889E5   		movq	%rsp, %rbp
 4512              		.cfi_def_cfa_register 6
 4513 1e62 4883EC10 		subq	$16, %rsp
 4514 1e66 48897DF8 		movq	%rdi, -8(%rbp)
 153:TestUnitTest++.cpp **** 	CheckBool(true);
 4515              		.loc 5 153 11
 4516 1e6a BF010000 		movl	$1, %edi
 4516      00
 4517 1e6f E8A3FEFF 		call	_ZN12_GLOBAL__N_19CheckBoolEb
 4517      FF
 154:TestUnitTest++.cpp **** }
 4518              		.loc 5 154 1
 4519 1e74 90       		nop
 4520 1e75 C9       		leave
 4521              		.cfi_def_cfa 7, 8
 4522 1e76 C3       		ret
 4523              		.cfi_endproc
 4524              	.LFE1499:
 4526              		.section	.text._ZN8UnitTest5CheckIbEEbT_,"axG",@progbits,_ZN8UnitTest5CheckIbEEbT_,comdat
 4527              		.weak	_ZN8UnitTest5CheckIbEEbT_
 4529              	_ZN8UnitTest5CheckIbEEbT_:
 4530              	.LFB1527:
 4531              		.file 6 "../Checks.h"
   1:../Checks.h   **** #ifndef UNITTEST_CHECKS_H
   2:../Checks.h   **** #define UNITTEST_CHECKS_H
   3:../Checks.h   **** 
   4:../Checks.h   **** #include "Config.h"
   5:../Checks.h   **** #include "TestResults.h"
   6:../Checks.h   **** #include "MemoryOutStream.h"
   7:../Checks.h   **** 
   8:../Checks.h   **** namespace UnitTest {
   9:../Checks.h   **** 
  10:../Checks.h   **** 
  11:../Checks.h   **** template< typename Value >
  12:../Checks.h   **** bool Check(Value const value)
 4532              		.loc 6 12 6
 4533              		.cfi_startproc
 4534 0000 F30F1EFA 		endbr64
 4535 0004 55       		pushq	%rbp
 4536              		.cfi_def_cfa_offset 16
 4537              		.cfi_offset 6, -16
 4538 0005 4889E5   		movq	%rsp, %rbp
 4539              		.cfi_def_cfa_register 6
 4540 0008 89F8     		movl	%edi, %eax
 4541 000a 8845FC   		movb	%al, -4(%rbp)
  13:../Checks.h   **** {
  14:../Checks.h   ****     return !!value; // doing double negative to avoid silly VS warnings
 4542              		.loc 6 14 14
 4543 000d 0FB645FC 		movzbl	-4(%rbp), %eax
  15:../Checks.h   **** }
 4544              		.loc 6 15 1
 4545 0011 5D       		popq	%rbp
 4546              		.cfi_def_cfa 7, 8
 4547 0012 C3       		ret
 4548              		.cfi_endproc
 4549              	.LFE1527:
 4551              		.section	.text._ZN8UnitTest5CheckIPvEEbT_,"axG",@progbits,_ZN8UnitTest5CheckIPvEEbT_,comdat
 4552              		.weak	_ZN8UnitTest5CheckIPvEEbT_
 4554              	_ZN8UnitTest5CheckIPvEEbT_:
 4555              	.LFB1528:
  12:../Checks.h   **** {
 4556              		.loc 6 12 6
 4557              		.cfi_startproc
 4558 0000 F30F1EFA 		endbr64
 4559 0004 55       		pushq	%rbp
 4560              		.cfi_def_cfa_offset 16
 4561              		.cfi_offset 6, -16
 4562 0005 4889E5   		movq	%rsp, %rbp
 4563              		.cfi_def_cfa_register 6
 4564 0008 48897DF8 		movq	%rdi, -8(%rbp)
  14:../Checks.h   **** }
 4565              		.loc 6 14 14
 4566 000c 48837DF8 		cmpq	$0, -8(%rbp)
 4566      00
 4567 0011 0F95C0   		setne	%al
 4568              		.loc 6 15 1
 4569 0014 5D       		popq	%rbp
 4570              		.cfi_def_cfa 7, 8
 4571 0015 C3       		ret
 4572              		.cfi_endproc
 4573              	.LFE1528:
 4575              		.section	.rodata
 4576              	.LC53:
 4577 05aa 45787065 		.string	"Expected "
 4577      63746564 
 4577      2000
 4578              	.LC54:
 4579 05b4 20627574 		.string	" but was "
 4579      20776173 
 4579      2000
 4580              		.section	.text._ZN8UnitTest10CheckEqualIiiEEvRNS_11TestResultsERKT_RKT0_RKNS_11TestDetailsE,"axG",
 4581              		.weak	_ZN8UnitTest10CheckEqualIiiEEvRNS_11TestResultsERKT_RKT0_RKNS_11TestDetailsE
 4583              	_ZN8UnitTest10CheckEqualIiiEEvRNS_11TestResultsERKT_RKT0_RKNS_11TestDetailsE:
 4584              	.LFB1529:
  16:../Checks.h   **** 
  17:../Checks.h   **** 
  18:../Checks.h   **** template< typename Expected, typename Actual >
  19:../Checks.h   **** void CheckEqual(TestResults& results, Expected const& expected, Actual const& actual, TestDetails c
 4585              		.loc 6 19 6
 4586              		.cfi_startproc
 4587              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 4588              		.cfi_lsda 0x1b,.LLSDA1529
 4589 0000 F30F1EFA 		endbr64
 4590 0004 55       		pushq	%rbp
 4591              		.cfi_def_cfa_offset 16
 4592              		.cfi_offset 6, -16
 4593 0005 4889E5   		movq	%rsp, %rbp
 4594              		.cfi_def_cfa_register 6
 4595 0008 53       		pushq	%rbx
 4596 0009 4881ECC8 		subq	$456, %rsp
 4596      010000
 4597              		.cfi_offset 3, -24
 4598 0010 4889BD48 		movq	%rdi, -440(%rbp)
 4598      FEFFFF
 4599 0017 4889B540 		movq	%rsi, -448(%rbp)
 4599      FEFFFF
 4600 001e 48899538 		movq	%rdx, -456(%rbp)
 4600      FEFFFF
 4601 0025 48898D30 		movq	%rcx, -464(%rbp)
 4601      FEFFFF
 4602              		.loc 6 19 6
 4603 002c 64488B04 		movq	%fs:40, %rax
 4603      25280000 
 4603      00
 4604 0035 488945E8 		movq	%rax, -24(%rbp)
 4605 0039 31C0     		xorl	%eax, %eax
 4606              	.LBB59:
  20:../Checks.h   **** {
  21:../Checks.h   ****     if (!(expected == actual))
 4607              		.loc 6 21 20
 4608 003b 488B8540 		movq	-448(%rbp), %rax
 4608      FEFFFF
 4609 0042 8B10     		movl	(%rax), %edx
 4610 0044 488B8538 		movq	-456(%rbp), %rax
 4610      FEFFFF
 4611 004b 8B00     		movl	(%rax), %eax
 4612              		.loc 6 21 5
 4613 004d 39C2     		cmpl	%eax, %edx
 4614 004f 0F84C600 		je	.L227
 4614      0000
 4615              	.LBB60:
  22:../Checks.h   ****     {
  23:../Checks.h   ****         UnitTest::MemoryOutStream stream;
 4616              		.loc 6 23 35
 4617 0055 488D8550 		leaq	-432(%rbp), %rax
 4617      FEFFFF
 4618 005c 4889C7   		movq	%rax, %rdi
 4619              	.LEHB98:
 4620 005f E8000000 		call	_ZN8UnitTest15MemoryOutStreamC1Ev
 4620      00
 4621              	.LEHE98:
  24:../Checks.h   ****         stream << "Expected " << expected << " but was " << actual;
 4622              		.loc 6 24 16
 4623 0064 488D8550 		leaq	-432(%rbp), %rax
 4623      FEFFFF
 4624 006b 488D1500 		leaq	.LC53(%rip), %rdx
 4624      000000
 4625 0072 4889D6   		movq	%rdx, %rsi
 4626 0075 4889C7   		movq	%rax, %rdi
 4627              	.LEHB99:
 4628 0078 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 4628      00
 4629 007d 4889C2   		movq	%rax, %rdx
 4630              		.loc 6 24 43
 4631 0080 488B8540 		movq	-448(%rbp), %rax
 4631      FEFFFF
 4632 0087 8B00     		movl	(%rax), %eax
 4633 0089 89C6     		movl	%eax, %esi
 4634 008b 4889D7   		movq	%rdx, %rdi
 4635 008e E8000000 		call	_ZNSolsEi@PLT
 4635      00
 4636              		.loc 6 24 43 is_stmt 0 discriminator 1
 4637 0093 4889C2   		movq	%rax, %rdx
 4638 0096 488D0500 		leaq	.LC54(%rip), %rax
 4638      000000
 4639 009d 4889C6   		movq	%rax, %rsi
 4640 00a0 4889D7   		movq	%rdx, %rdi
 4641 00a3 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 4641      00
 4642              		.loc 6 24 43 discriminator 2
 4643 00a8 4889C2   		movq	%rax, %rdx
 4644              		.loc 6 24 58 is_stmt 1 discriminator 2
 4645 00ab 488B8538 		movq	-456(%rbp), %rax
 4645      FEFFFF
 4646 00b2 8B00     		movl	(%rax), %eax
 4647 00b4 89C6     		movl	%eax, %esi
 4648 00b6 4889D7   		movq	%rdx, %rdi
 4649 00b9 E8000000 		call	_ZNSolsEi@PLT
 4649      00
  25:../Checks.h   **** 
  26:../Checks.h   ****         results.OnTestFailure(details, stream.GetText());
 4650              		.loc 6 26 30
 4651 00be 488D8550 		leaq	-432(%rbp), %rax
 4651      FEFFFF
 4652 00c5 4889C7   		movq	%rax, %rdi
 4653 00c8 E8000000 		call	_ZNK8UnitTest15MemoryOutStream7GetTextEv@PLT
 4653      00
 4654 00cd 4889C2   		movq	%rax, %rdx
 4655 00d0 488B8D30 		movq	-464(%rbp), %rcx
 4655      FEFFFF
 4656 00d7 488B8548 		movq	-440(%rbp), %rax
 4656      FEFFFF
 4657 00de 4889CE   		movq	%rcx, %rsi
 4658 00e1 4889C7   		movq	%rax, %rdi
 4659 00e4 E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc@PLT
 4659      00
 4660              	.LEHE99:
  27:../Checks.h   ****     }
 4661              		.loc 6 27 5
 4662 00e9 488D8550 		leaq	-432(%rbp), %rax
 4662      FEFFFF
 4663 00f0 4889C7   		movq	%rax, %rdi
 4664              	.LEHB100:
 4665 00f3 E8000000 		call	_ZN8UnitTest15MemoryOutStreamD1Ev
 4665      00
 4666              	.LEHE100:
 4667              	.LBE60:
 4668              	.LBE59:
  28:../Checks.h   **** }
 4669              		.loc 6 28 1
 4670 00f8 EB21     		jmp	.L227
 4671              	.L226:
 4672 00fa F30F1EFA 		endbr64
 4673              	.LBB62:
 4674              	.LBB61:
  27:../Checks.h   ****     }
 4675              		.loc 6 27 5
 4676 00fe 4889C3   		movq	%rax, %rbx
 4677 0101 488D8550 		leaq	-432(%rbp), %rax
 4677      FEFFFF
 4678 0108 4889C7   		movq	%rax, %rdi
 4679 010b E8000000 		call	_ZN8UnitTest15MemoryOutStreamD1Ev
 4679      00
 4680 0110 4889D8   		movq	%rbx, %rax
 4681 0113 4889C7   		movq	%rax, %rdi
 4682              	.LEHB101:
 4683 0116 E8000000 		call	_Unwind_Resume@PLT
 4683      00
 4684              	.LEHE101:
 4685              	.L227:
 4686              	.LBE61:
 4687              	.LBE62:
 4688              		.loc 6 28 1
 4689 011b 90       		nop
 4690 011c 488B45E8 		movq	-24(%rbp), %rax
 4691 0120 64482B04 		subq	%fs:40, %rax
 4691      25280000 
 4691      00
 4692 0129 7405     		je	.L225
 4693 012b E8000000 		call	__stack_chk_fail@PLT
 4693      00
 4694              	.L225:
 4695 0130 488B5DF8 		movq	-8(%rbp), %rbx
 4696 0134 C9       		leave
 4697              		.cfi_def_cfa 7, 8
 4698 0135 C3       		ret
 4699              		.cfi_endproc
 4700              	.LFE1529:
 4701              		.section	.gcc_except_table
 4702              	.LLSDA1529:
 4703 02e8 FF       		.byte	0xff
 4704 02e9 FF       		.byte	0xff
 4705 02ea 01       		.byte	0x1
 4706 02eb 13       		.uleb128 .LLSDACSE1529-.LLSDACSB1529
 4707              	.LLSDACSB1529:
 4708 02ec 5F       		.uleb128 .LEHB98-.LFB1529
 4709 02ed 05       		.uleb128 .LEHE98-.LEHB98
 4710 02ee 00       		.uleb128 0
 4711 02ef 00       		.uleb128 0
 4712 02f0 78       		.uleb128 .LEHB99-.LFB1529
 4713 02f1 71       		.uleb128 .LEHE99-.LEHB99
 4714 02f2 FA01     		.uleb128 .L226-.LFB1529
 4715 02f4 00       		.uleb128 0
 4716 02f5 F301     		.uleb128 .LEHB100-.LFB1529
 4717 02f7 05       		.uleb128 .LEHE100-.LEHB100
 4718 02f8 00       		.uleb128 0
 4719 02f9 00       		.uleb128 0
 4720 02fa 9602     		.uleb128 .LEHB101-.LFB1529
 4721 02fc 05       		.uleb128 .LEHE101-.LEHB101
 4722 02fd 00       		.uleb128 0
 4723 02fe 00       		.uleb128 0
 4724              	.LLSDACSE1529:
 4725              		.section	.text._ZN8UnitTest10CheckEqualIiiEEvRNS_11TestResultsERKT_RKT0_RKNS_11TestDetailsE,"axG",
 4727              		.section	.text._ZN8UnitTest10CheckEqualIPvS1_EEvRNS_11TestResultsERKT_RKT0_RKNS_11TestDetailsE,"ax
 4728              		.weak	_ZN8UnitTest10CheckEqualIPvS1_EEvRNS_11TestResultsERKT_RKT0_RKNS_11TestDetailsE
 4730              	_ZN8UnitTest10CheckEqualIPvS1_EEvRNS_11TestResultsERKT_RKT0_RKNS_11TestDetailsE:
 4731              	.LFB1530:
  19:../Checks.h   **** {
 4732              		.loc 6 19 6
 4733              		.cfi_startproc
 4734              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 4735              		.cfi_lsda 0x1b,.LLSDA1530
 4736 0000 F30F1EFA 		endbr64
 4737 0004 55       		pushq	%rbp
 4738              		.cfi_def_cfa_offset 16
 4739              		.cfi_offset 6, -16
 4740 0005 4889E5   		movq	%rsp, %rbp
 4741              		.cfi_def_cfa_register 6
 4742 0008 53       		pushq	%rbx
 4743 0009 4881ECC8 		subq	$456, %rsp
 4743      010000
 4744              		.cfi_offset 3, -24
 4745 0010 4889BD48 		movq	%rdi, -440(%rbp)
 4745      FEFFFF
 4746 0017 4889B540 		movq	%rsi, -448(%rbp)
 4746      FEFFFF
 4747 001e 48899538 		movq	%rdx, -456(%rbp)
 4747      FEFFFF
 4748 0025 48898D30 		movq	%rcx, -464(%rbp)
 4748      FEFFFF
  19:../Checks.h   **** {
 4749              		.loc 6 19 6
 4750 002c 64488B04 		movq	%fs:40, %rax
 4750      25280000 
 4750      00
 4751 0035 488945E8 		movq	%rax, -24(%rbp)
 4752 0039 31C0     		xorl	%eax, %eax
 4753              	.LBB63:
  21:../Checks.h   ****     {
 4754              		.loc 6 21 20
 4755 003b 488B8540 		movq	-448(%rbp), %rax
 4755      FEFFFF
 4756 0042 488B10   		movq	(%rax), %rdx
 4757 0045 488B8538 		movq	-456(%rbp), %rax
 4757      FEFFFF
 4758 004c 488B00   		movq	(%rax), %rax
  21:../Checks.h   ****     {
 4759              		.loc 6 21 5
 4760 004f 4839C2   		cmpq	%rax, %rdx
 4761 0052 0F84CA00 		je	.L233
 4761      0000
 4762              	.LBB64:
  23:../Checks.h   ****         stream << "Expected " << expected << " but was " << actual;
 4763              		.loc 6 23 35
 4764 0058 488D8550 		leaq	-432(%rbp), %rax
 4764      FEFFFF
 4765 005f 4889C7   		movq	%rax, %rdi
 4766              	.LEHB102:
 4767 0062 E8000000 		call	_ZN8UnitTest15MemoryOutStreamC1Ev
 4767      00
 4768              	.LEHE102:
  24:../Checks.h   **** 
 4769              		.loc 6 24 16
 4770 0067 488D8550 		leaq	-432(%rbp), %rax
 4770      FEFFFF
 4771 006e 488D1500 		leaq	.LC53(%rip), %rdx
 4771      000000
 4772 0075 4889D6   		movq	%rdx, %rsi
 4773 0078 4889C7   		movq	%rax, %rdi
 4774              	.LEHB103:
 4775 007b E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 4775      00
 4776 0080 4889C2   		movq	%rax, %rdx
  24:../Checks.h   **** 
 4777              		.loc 6 24 31
 4778 0083 488B8540 		movq	-448(%rbp), %rax
 4778      FEFFFF
 4779 008a 488B00   		movq	(%rax), %rax
 4780 008d 4889C6   		movq	%rax, %rsi
 4781 0090 4889D7   		movq	%rdx, %rdi
 4782 0093 E8000000 		call	_ZNSolsEPKv@PLT
 4782      00
  24:../Checks.h   **** 
 4783              		.loc 6 24 31 is_stmt 0 discriminator 1
 4784 0098 4889C2   		movq	%rax, %rdx
  24:../Checks.h   **** 
 4785              		.loc 6 24 43 is_stmt 1 discriminator 1
 4786 009b 488D0500 		leaq	.LC54(%rip), %rax
 4786      000000
 4787 00a2 4889C6   		movq	%rax, %rsi
 4788 00a5 4889D7   		movq	%rdx, %rdi
 4789 00a8 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 4789      00
  24:../Checks.h   **** 
 4790              		.loc 6 24 43 is_stmt 0 discriminator 2
 4791 00ad 4889C2   		movq	%rax, %rdx
  24:../Checks.h   **** 
 4792              		.loc 6 24 58 is_stmt 1 discriminator 2
 4793 00b0 488B8538 		movq	-456(%rbp), %rax
 4793      FEFFFF
 4794 00b7 488B00   		movq	(%rax), %rax
 4795 00ba 4889C6   		movq	%rax, %rsi
 4796 00bd 4889D7   		movq	%rdx, %rdi
 4797 00c0 E8000000 		call	_ZNSolsEPKv@PLT
 4797      00
  26:../Checks.h   ****     }
 4798              		.loc 6 26 30
 4799 00c5 488D8550 		leaq	-432(%rbp), %rax
 4799      FEFFFF
 4800 00cc 4889C7   		movq	%rax, %rdi
 4801 00cf E8000000 		call	_ZNK8UnitTest15MemoryOutStream7GetTextEv@PLT
 4801      00
 4802 00d4 4889C2   		movq	%rax, %rdx
 4803 00d7 488B8D30 		movq	-464(%rbp), %rcx
 4803      FEFFFF
 4804 00de 488B8548 		movq	-440(%rbp), %rax
 4804      FEFFFF
 4805 00e5 4889CE   		movq	%rcx, %rsi
 4806 00e8 4889C7   		movq	%rax, %rdi
 4807 00eb E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc@PLT
 4807      00
 4808              	.LEHE103:
  27:../Checks.h   **** }
 4809              		.loc 6 27 5
 4810 00f0 488D8550 		leaq	-432(%rbp), %rax
 4810      FEFFFF
 4811 00f7 4889C7   		movq	%rax, %rdi
 4812              	.LEHB104:
 4813 00fa E8000000 		call	_ZN8UnitTest15MemoryOutStreamD1Ev
 4813      00
 4814              	.LEHE104:
 4815              	.LBE64:
 4816              	.LBE63:
 4817              		.loc 6 28 1
 4818 00ff EB21     		jmp	.L233
 4819              	.L232:
 4820 0101 F30F1EFA 		endbr64
 4821              	.LBB66:
 4822              	.LBB65:
  27:../Checks.h   **** }
 4823              		.loc 6 27 5
 4824 0105 4889C3   		movq	%rax, %rbx
 4825 0108 488D8550 		leaq	-432(%rbp), %rax
 4825      FEFFFF
 4826 010f 4889C7   		movq	%rax, %rdi
 4827 0112 E8000000 		call	_ZN8UnitTest15MemoryOutStreamD1Ev
 4827      00
 4828 0117 4889D8   		movq	%rbx, %rax
 4829 011a 4889C7   		movq	%rax, %rdi
 4830              	.LEHB105:
 4831 011d E8000000 		call	_Unwind_Resume@PLT
 4831      00
 4832              	.LEHE105:
 4833              	.L233:
 4834              	.LBE65:
 4835              	.LBE66:
 4836              		.loc 6 28 1
 4837 0122 90       		nop
 4838 0123 488B45E8 		movq	-24(%rbp), %rax
 4839 0127 64482B04 		subq	%fs:40, %rax
 4839      25280000 
 4839      00
 4840 0130 7405     		je	.L231
 4841 0132 E8000000 		call	__stack_chk_fail@PLT
 4841      00
 4842              	.L231:
 4843 0137 488B5DF8 		movq	-8(%rbp), %rbx
 4844 013b C9       		leave
 4845              		.cfi_def_cfa 7, 8
 4846 013c C3       		ret
 4847              		.cfi_endproc
 4848              	.LFE1530:
 4849              		.section	.gcc_except_table
 4850              	.LLSDA1530:
 4851 02ff FF       		.byte	0xff
 4852 0300 FF       		.byte	0xff
 4853 0301 01       		.byte	0x1
 4854 0302 13       		.uleb128 .LLSDACSE1530-.LLSDACSB1530
 4855              	.LLSDACSB1530:
 4856 0303 62       		.uleb128 .LEHB102-.LFB1530
 4857 0304 05       		.uleb128 .LEHE102-.LEHB102
 4858 0305 00       		.uleb128 0
 4859 0306 00       		.uleb128 0
 4860 0307 7B       		.uleb128 .LEHB103-.LFB1530
 4861 0308 75       		.uleb128 .LEHE103-.LEHB103
 4862 0309 8102     		.uleb128 .L232-.LFB1530
 4863 030b 00       		.uleb128 0
 4864 030c FA01     		.uleb128 .LEHB104-.LFB1530
 4865 030e 05       		.uleb128 .LEHE104-.LEHB104
 4866 030f 00       		.uleb128 0
 4867 0310 00       		.uleb128 0
 4868 0311 9D02     		.uleb128 .LEHB105-.LFB1530
 4869 0313 05       		.uleb128 .LEHE105-.LEHB105
 4870 0314 00       		.uleb128 0
 4871 0315 00       		.uleb128 0
 4872              	.LLSDACSE1530:
 4873              		.section	.text._ZN8UnitTest10CheckEqualIPvS1_EEvRNS_11TestResultsERKT_RKT0_RKNS_11TestDetailsE,"ax
 4875              		.section	.rodata
 4876              	.LC55:
 4877 05be 202B2F2D 		.string	" +/- "
 4877      2000
 4878              		.section	.text._ZN8UnitTest10CheckCloseIfffEEvRNS_11TestResultsERKT_RKT0_RKT1_RKNS_11TestDetailsE,
 4879              		.weak	_ZN8UnitTest10CheckCloseIfffEEvRNS_11TestResultsERKT_RKT0_RKT1_RKNS_11TestDetailsE
 4881              	_ZN8UnitTest10CheckCloseIfffEEvRNS_11TestResultsERKT_RKT0_RKT1_RKNS_11TestDetailsE:
 4882              	.LFB1531:
  29:../Checks.h   **** 
  30:../Checks.h   **** void CheckEqual(TestResults& results, char const* expected, char const* actual, TestDetails const& 
  31:../Checks.h   **** 
  32:../Checks.h   **** void CheckEqual(TestResults& results, char* expected, char* actual, TestDetails const& details);
  33:../Checks.h   **** 
  34:../Checks.h   **** void CheckEqual(TestResults& results, char* expected, char const* actual, TestDetails const& detail
  35:../Checks.h   **** 
  36:../Checks.h   **** void CheckEqual(TestResults& results, char const* expected, char* actual, TestDetails const& detail
  37:../Checks.h   **** 
  38:../Checks.h   **** template< typename Expected, typename Actual, typename Tolerance >
  39:../Checks.h   **** bool AreClose(Expected const& expected, Actual const& actual, Tolerance const& tolerance)
  40:../Checks.h   **** {
  41:../Checks.h   ****     return (actual >= (expected - tolerance)) && (actual <= (expected + tolerance));
  42:../Checks.h   **** }
  43:../Checks.h   **** 
  44:../Checks.h   **** template< typename Expected, typename Actual, typename Tolerance >
  45:../Checks.h   **** void CheckClose(TestResults& results, Expected const& expected, Actual const& actual, Tolerance con
 4883              		.loc 6 45 6
 4884              		.cfi_startproc
 4885              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 4886              		.cfi_lsda 0x1b,.LLSDA1531
 4887 0000 F30F1EFA 		endbr64
 4888 0004 55       		pushq	%rbp
 4889              		.cfi_def_cfa_offset 16
 4890              		.cfi_offset 6, -16
 4891 0005 4889E5   		movq	%rsp, %rbp
 4892              		.cfi_def_cfa_register 6
 4893 0008 53       		pushq	%rbx
 4894 0009 4881ECD8 		subq	$472, %rsp
 4894      010000
 4895              		.cfi_offset 3, -24
 4896 0010 4889BD48 		movq	%rdi, -440(%rbp)
 4896      FEFFFF
 4897 0017 4889B540 		movq	%rsi, -448(%rbp)
 4897      FEFFFF
 4898 001e 48899538 		movq	%rdx, -456(%rbp)
 4898      FEFFFF
 4899 0025 48898D30 		movq	%rcx, -464(%rbp)
 4899      FEFFFF
 4900 002c 4C898528 		movq	%r8, -472(%rbp)
 4900      FEFFFF
 4901              		.loc 6 45 6
 4902 0033 64488B04 		movq	%fs:40, %rax
 4902      25280000 
 4902      00
 4903 003c 488945E8 		movq	%rax, -24(%rbp)
 4904 0040 31C0     		xorl	%eax, %eax
 4905              	.LBB67:
  46:../Checks.h   ****                 TestDetails const& details)
  47:../Checks.h   **** {
  48:../Checks.h   ****     if (!AreClose(expected, actual, tolerance))
 4906              		.loc 6 48 18
 4907 0042 488B9530 		movq	-464(%rbp), %rdx
 4907      FEFFFF
 4908 0049 488B8D38 		movq	-456(%rbp), %rcx
 4908      FEFFFF
 4909 0050 488B8540 		movq	-448(%rbp), %rax
 4909      FEFFFF
 4910 0057 4889CE   		movq	%rcx, %rsi
 4911 005a 4889C7   		movq	%rax, %rdi
 4912 005d E8000000 		call	_ZN8UnitTest8AreCloseIfffEEbRKT_RKT0_RKT1_
 4912      00
 4913 0062 83F001   		xorl	$1, %eax
 4914              		.loc 6 48 5
 4915 0065 84C0     		testb	%al, %al
 4916 0067 0F84F700 		je	.L239
 4916      0000
 4917              	.LBB68:
  49:../Checks.h   ****     { 
  50:../Checks.h   ****         UnitTest::MemoryOutStream stream;
 4918              		.loc 6 50 35
 4919 006d 488D8550 		leaq	-432(%rbp), %rax
 4919      FEFFFF
 4920 0074 4889C7   		movq	%rax, %rdi
 4921              	.LEHB106:
 4922 0077 E8000000 		call	_ZN8UnitTest15MemoryOutStreamC1Ev
 4922      00
 4923              	.LEHE106:
  51:../Checks.h   ****         stream << "Expected " << expected << " +/- " << tolerance << " but was " << actual;
 4924              		.loc 6 51 16
 4925 007c 488D8550 		leaq	-432(%rbp), %rax
 4925      FEFFFF
 4926 0083 488D1500 		leaq	.LC53(%rip), %rdx
 4926      000000
 4927 008a 4889D6   		movq	%rdx, %rsi
 4928 008d 4889C7   		movq	%rax, %rdi
 4929              	.LEHB107:
 4930 0090 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 4930      00
 4931 0095 4889C2   		movq	%rax, %rdx
 4932              		.loc 6 51 31
 4933 0098 488B8540 		movq	-448(%rbp), %rax
 4933      FEFFFF
 4934 009f 8B00     		movl	(%rax), %eax
 4935 00a1 660F6EC0 		movd	%eax, %xmm0
 4936 00a5 4889D7   		movq	%rdx, %rdi
 4937 00a8 E8000000 		call	_ZNSolsEf@PLT
 4937      00
 4938              		.loc 6 51 31 is_stmt 0 discriminator 1
 4939 00ad 4889C2   		movq	%rax, %rdx
 4940              		.loc 6 51 43 is_stmt 1 discriminator 1
 4941 00b0 488D0500 		leaq	.LC55(%rip), %rax
 4941      000000
 4942 00b7 4889C6   		movq	%rax, %rsi
 4943 00ba 4889D7   		movq	%rdx, %rdi
 4944 00bd E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 4944      00
 4945              		.loc 6 51 43 is_stmt 0 discriminator 2
 4946 00c2 4889C2   		movq	%rax, %rdx
 4947              		.loc 6 51 54 is_stmt 1 discriminator 2
 4948 00c5 488B8530 		movq	-464(%rbp), %rax
 4948      FEFFFF
 4949 00cc 8B00     		movl	(%rax), %eax
 4950 00ce 660F6EC0 		movd	%eax, %xmm0
 4951 00d2 4889D7   		movq	%rdx, %rdi
 4952 00d5 E8000000 		call	_ZNSolsEf@PLT
 4952      00
 4953              		.loc 6 51 54 is_stmt 0 discriminator 3
 4954 00da 4889C2   		movq	%rax, %rdx
 4955              		.loc 6 51 67 is_stmt 1 discriminator 3
 4956 00dd 488D0500 		leaq	.LC54(%rip), %rax
 4956      000000
 4957 00e4 4889C6   		movq	%rax, %rsi
 4958 00e7 4889D7   		movq	%rdx, %rdi
 4959 00ea E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 4959      00
 4960              		.loc 6 51 67 is_stmt 0 discriminator 4
 4961 00ef 4889C2   		movq	%rax, %rdx
 4962              		.loc 6 51 82 is_stmt 1 discriminator 4
 4963 00f2 488B8538 		movq	-456(%rbp), %rax
 4963      FEFFFF
 4964 00f9 8B00     		movl	(%rax), %eax
 4965 00fb 660F6EC0 		movd	%eax, %xmm0
 4966 00ff 4889D7   		movq	%rdx, %rdi
 4967 0102 E8000000 		call	_ZNSolsEf@PLT
 4967      00
  52:../Checks.h   **** 
  53:../Checks.h   ****         results.OnTestFailure(details, stream.GetText());
 4968              		.loc 6 53 30
 4969 0107 488D8550 		leaq	-432(%rbp), %rax
 4969      FEFFFF
 4970 010e 4889C7   		movq	%rax, %rdi
 4971 0111 E8000000 		call	_ZNK8UnitTest15MemoryOutStream7GetTextEv@PLT
 4971      00
 4972 0116 4889C2   		movq	%rax, %rdx
 4973 0119 488B8D28 		movq	-472(%rbp), %rcx
 4973      FEFFFF
 4974 0120 488B8548 		movq	-440(%rbp), %rax
 4974      FEFFFF
 4975 0127 4889CE   		movq	%rcx, %rsi
 4976 012a 4889C7   		movq	%rax, %rdi
 4977 012d E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc@PLT
 4977      00
 4978              	.LEHE107:
  54:../Checks.h   ****     }
 4979              		.loc 6 54 5
 4980 0132 488D8550 		leaq	-432(%rbp), %rax
 4980      FEFFFF
 4981 0139 4889C7   		movq	%rax, %rdi
 4982              	.LEHB108:
 4983 013c E8000000 		call	_ZN8UnitTest15MemoryOutStreamD1Ev
 4983      00
 4984              	.LEHE108:
 4985              	.LBE68:
 4986              	.LBE67:
  55:../Checks.h   **** }
 4987              		.loc 6 55 1
 4988 0141 EB21     		jmp	.L239
 4989              	.L238:
 4990 0143 F30F1EFA 		endbr64
 4991              	.LBB70:
 4992              	.LBB69:
  54:../Checks.h   ****     }
 4993              		.loc 6 54 5
 4994 0147 4889C3   		movq	%rax, %rbx
 4995 014a 488D8550 		leaq	-432(%rbp), %rax
 4995      FEFFFF
 4996 0151 4889C7   		movq	%rax, %rdi
 4997 0154 E8000000 		call	_ZN8UnitTest15MemoryOutStreamD1Ev
 4997      00
 4998 0159 4889D8   		movq	%rbx, %rax
 4999 015c 4889C7   		movq	%rax, %rdi
 5000              	.LEHB109:
 5001 015f E8000000 		call	_Unwind_Resume@PLT
 5001      00
 5002              	.LEHE109:
 5003              	.L239:
 5004              	.LBE69:
 5005              	.LBE70:
 5006              		.loc 6 55 1
 5007 0164 90       		nop
 5008 0165 488B45E8 		movq	-24(%rbp), %rax
 5009 0169 64482B04 		subq	%fs:40, %rax
 5009      25280000 
 5009      00
 5010 0172 7405     		je	.L237
 5011 0174 E8000000 		call	__stack_chk_fail@PLT
 5011      00
 5012              	.L237:
 5013 0179 488B5DF8 		movq	-8(%rbp), %rbx
 5014 017d C9       		leave
 5015              		.cfi_def_cfa 7, 8
 5016 017e C3       		ret
 5017              		.cfi_endproc
 5018              	.LFE1531:
 5019              		.section	.gcc_except_table
 5020              	.LLSDA1531:
 5021 0316 FF       		.byte	0xff
 5022 0317 FF       		.byte	0xff
 5023 0318 01       		.byte	0x1
 5024 0319 15       		.uleb128 .LLSDACSE1531-.LLSDACSB1531
 5025              	.LLSDACSB1531:
 5026 031a 77       		.uleb128 .LEHB106-.LFB1531
 5027 031b 05       		.uleb128 .LEHE106-.LEHB106
 5028 031c 00       		.uleb128 0
 5029 031d 00       		.uleb128 0
 5030 031e 9001     		.uleb128 .LEHB107-.LFB1531
 5031 0320 A201     		.uleb128 .LEHE107-.LEHB107
 5032 0322 C302     		.uleb128 .L238-.LFB1531
 5033 0324 00       		.uleb128 0
 5034 0325 BC02     		.uleb128 .LEHB108-.LFB1531
 5035 0327 05       		.uleb128 .LEHE108-.LEHB108
 5036 0328 00       		.uleb128 0
 5037 0329 00       		.uleb128 0
 5038 032a DF02     		.uleb128 .LEHB109-.LFB1531
 5039 032c 05       		.uleb128 .LEHE109-.LEHB109
 5040 032d 00       		.uleb128 0
 5041 032e 00       		.uleb128 0
 5042              	.LLSDACSE1531:
 5043              		.section	.text._ZN8UnitTest10CheckCloseIfffEEvRNS_11TestResultsERKT_RKT0_RKT1_RKNS_11TestDetailsE,
 5045              		.section	.rodata
 5046              	.LC56:
 5047 05c4 45787065 		.string	"Expected [ "
 5047      63746564 
 5047      205B2000 
 5048              	.LC57:
 5049 05d0 2000     		.string	" "
 5050              	.LC58:
 5051 05d2 5D202B2F 		.string	"] +/- "
 5051      2D2000
 5052              	.LC59:
 5053 05d9 20627574 		.string	" but was [ "
 5053      20776173 
 5053      205B2000 
 5054              	.LC60:
 5055 05e5 5D00     		.string	"]"
 5056              		.section	.text._ZN8UnitTest15CheckArrayCloseIA3_fS1_fEEvRNS_11TestResultsERKT_RKT0_iRKT1_RKNS_11Te
 5057              		.weak	_ZN8UnitTest15CheckArrayCloseIA3_fS1_fEEvRNS_11TestResultsERKT_RKT0_iRKT1_RKNS_11TestDetails
 5059              	_ZN8UnitTest15CheckArrayCloseIA3_fS1_fEEvRNS_11TestResultsERKT_RKT0_iRKT1_RKNS_11TestDetailsE:
 5060              	.LFB1532:
  56:../Checks.h   **** 
  57:../Checks.h   **** 
  58:../Checks.h   **** template< typename Expected, typename Actual >
  59:../Checks.h   **** void CheckArrayEqual(TestResults& results, Expected const& expected, Actual const& actual,
  60:../Checks.h   ****                 int const count, TestDetails const& details)
  61:../Checks.h   **** {
  62:../Checks.h   ****     bool equal = true;
  63:../Checks.h   ****     for (int i = 0; i < count; ++i)
  64:../Checks.h   ****         equal &= (expected[i] == actual[i]);
  65:../Checks.h   **** 
  66:../Checks.h   ****     if (!equal)
  67:../Checks.h   ****     {
  68:../Checks.h   ****         UnitTest::MemoryOutStream stream;
  69:../Checks.h   **** 
  70:../Checks.h   **** 		stream << "Expected [ ";
  71:../Checks.h   **** 
  72:../Checks.h   **** 		for (int expectedIndex = 0; expectedIndex < count; ++expectedIndex)
  73:../Checks.h   ****             stream << expected[expectedIndex] << " ";
  74:../Checks.h   **** 
  75:../Checks.h   **** 		stream << "] but was [ ";
  76:../Checks.h   **** 
  77:../Checks.h   **** 		for (int actualIndex = 0; actualIndex < count; ++actualIndex)
  78:../Checks.h   ****             stream << actual[actualIndex] << " ";
  79:../Checks.h   **** 
  80:../Checks.h   **** 		stream << "]";
  81:../Checks.h   **** 
  82:../Checks.h   ****         results.OnTestFailure(details, stream.GetText());
  83:../Checks.h   ****     }
  84:../Checks.h   **** }
  85:../Checks.h   **** 
  86:../Checks.h   **** template< typename Expected, typename Actual, typename Tolerance >
  87:../Checks.h   **** bool ArrayAreClose(Expected const& expected, Actual const& actual, int const count, Tolerance const
  88:../Checks.h   **** {
  89:../Checks.h   ****     bool equal = true;
  90:../Checks.h   ****     for (int i = 0; i < count; ++i)
  91:../Checks.h   ****         equal &= AreClose(expected[i], actual[i], tolerance);
  92:../Checks.h   ****     return equal;
  93:../Checks.h   **** }
  94:../Checks.h   **** 
  95:../Checks.h   **** template< typename Expected, typename Actual, typename Tolerance >
  96:../Checks.h   **** void CheckArrayClose(TestResults& results, Expected const& expected, Actual const& actual,
 5061              		.loc 6 96 6
 5062              		.cfi_startproc
 5063              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 5064              		.cfi_lsda 0x1b,.LLSDA1532
 5065 0000 F30F1EFA 		endbr64
 5066 0004 55       		pushq	%rbp
 5067              		.cfi_def_cfa_offset 16
 5068              		.cfi_offset 6, -16
 5069 0005 4889E5   		movq	%rsp, %rbp
 5070              		.cfi_def_cfa_register 6
 5071 0008 53       		pushq	%rbx
 5072 0009 4881ECE8 		subq	$488, %rsp
 5072      010000
 5073              		.cfi_offset 3, -24
 5074 0010 4889BD38 		movq	%rdi, -456(%rbp)
 5074      FEFFFF
 5075 0017 4889B530 		movq	%rsi, -464(%rbp)
 5075      FEFFFF
 5076 001e 48899528 		movq	%rdx, -472(%rbp)
 5076      FEFFFF
 5077 0025 898D24FE 		movl	%ecx, -476(%rbp)
 5077      FFFF
 5078 002b 4C898518 		movq	%r8, -488(%rbp)
 5078      FEFFFF
 5079 0032 4C898D10 		movq	%r9, -496(%rbp)
 5079      FEFFFF
 5080              		.loc 6 96 6
 5081 0039 64488B04 		movq	%fs:40, %rax
 5081      25280000 
 5081      00
 5082 0042 488945E8 		movq	%rax, -24(%rbp)
 5083 0046 31C0     		xorl	%eax, %eax
  97:../Checks.h   ****                    int const count, Tolerance const& tolerance, TestDetails const& details)
  98:../Checks.h   **** {
  99:../Checks.h   ****     bool equal = ArrayAreClose(expected, actual, count, tolerance);
 5084              		.loc 6 99 31
 5085 0048 488B8D18 		movq	-488(%rbp), %rcx
 5085      FEFFFF
 5086 004f 8B9524FE 		movl	-476(%rbp), %edx
 5086      FFFF
 5087 0055 488BB528 		movq	-472(%rbp), %rsi
 5087      FEFFFF
 5088 005c 488B8530 		movq	-464(%rbp), %rax
 5088      FEFFFF
 5089 0063 4889C7   		movq	%rax, %rdi
 5090 0066 E8000000 		call	_ZN8UnitTest13ArrayAreCloseIA3_fS1_fEEbRKT_RKT0_iRKT1_
 5090      00
 5091 006b 888547FE 		movb	%al, -441(%rbp)
 5091      FFFF
 5092              	.LBB71:
 100:../Checks.h   **** 
 101:../Checks.h   ****     if (!equal)
 5093              		.loc 6 101 10
 5094 0071 0FB68547 		movzbl	-441(%rbp), %eax
 5094      FEFFFF
 5095 0078 83F001   		xorl	$1, %eax
 5096              		.loc 6 101 5
 5097 007b 84C0     		testb	%al, %al
 5098 007d 0F849C01 		je	.L249
 5098      0000
 5099              	.LBB72:
 102:../Checks.h   ****     {
 103:../Checks.h   ****         UnitTest::MemoryOutStream stream;
 5100              		.loc 6 103 35
 5101 0083 488D8550 		leaq	-432(%rbp), %rax
 5101      FEFFFF
 5102 008a 4889C7   		movq	%rax, %rdi
 5103              	.LEHB110:
 5104 008d E8000000 		call	_ZN8UnitTest15MemoryOutStreamC1Ev
 5104      00
 5105              	.LEHE110:
 104:../Checks.h   **** 
 105:../Checks.h   ****         stream << "Expected [ ";
 5106              		.loc 6 105 16
 5107 0092 488D8550 		leaq	-432(%rbp), %rax
 5107      FEFFFF
 5108 0099 488D1500 		leaq	.LC56(%rip), %rdx
 5108      000000
 5109 00a0 4889D6   		movq	%rdx, %rsi
 5110 00a3 4889C7   		movq	%rax, %rdi
 5111              	.LEHB111:
 5112 00a6 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 5112      00
 5113              	.LBB73:
 106:../Checks.h   ****         for (int expectedIndex = 0; expectedIndex < count; ++expectedIndex)
 5114              		.loc 6 106 18
 5115 00ab C78548FE 		movl	$0, -440(%rbp)
 5115      FFFF0000 
 5115      0000
 5116              		.loc 6 106 9
 5117 00b5 EB42     		jmp	.L242
 5118              	.L243:
 107:../Checks.h   ****             stream << expected[expectedIndex] << " ";
 5119              		.loc 6 107 31
 5120 00b7 488B8530 		movq	-464(%rbp), %rax
 5120      FEFFFF
 5121 00be 8B9548FE 		movl	-440(%rbp), %edx
 5121      FFFF
 5122 00c4 4863D2   		movslq	%edx, %rdx
 5123 00c7 8B1490   		movl	(%rax,%rdx,4), %edx
 5124              		.loc 6 107 20
 5125 00ca 488D8550 		leaq	-432(%rbp), %rax
 5125      FEFFFF
 5126 00d1 660F6EC2 		movd	%edx, %xmm0
 5127 00d5 4889C7   		movq	%rax, %rdi
 5128 00d8 E8000000 		call	_ZNSolsEf@PLT
 5128      00
 5129 00dd 4889C2   		movq	%rax, %rdx
 5130              		.loc 6 107 47
 5131 00e0 488D0500 		leaq	.LC57(%rip), %rax
 5131      000000
 5132 00e7 4889C6   		movq	%rax, %rsi
 5133 00ea 4889D7   		movq	%rdx, %rdi
 5134 00ed E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 5134      00
 106:../Checks.h   ****         for (int expectedIndex = 0; expectedIndex < count; ++expectedIndex)
 5135              		.loc 6 106 9 discriminator 2
 5136 00f2 838548FE 		addl	$1, -440(%rbp)
 5136      FFFF01
 5137              	.L242:
 106:../Checks.h   ****         for (int expectedIndex = 0; expectedIndex < count; ++expectedIndex)
 5138              		.loc 6 106 51 discriminator 1
 5139 00f9 8B8548FE 		movl	-440(%rbp), %eax
 5139      FFFF
 5140 00ff 3B8524FE 		cmpl	-476(%rbp), %eax
 5140      FFFF
 5141 0105 7CB0     		jl	.L243
 5142              	.LBE73:
 108:../Checks.h   ****         stream << "] +/- " << tolerance << " but was [ ";
 5143              		.loc 6 108 16
 5144 0107 488D8550 		leaq	-432(%rbp), %rax
 5144      FEFFFF
 5145 010e 488D1500 		leaq	.LC58(%rip), %rdx
 5145      000000
 5146 0115 4889D6   		movq	%rdx, %rsi
 5147 0118 4889C7   		movq	%rax, %rdi
 5148 011b E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 5148      00
 5149 0120 4889C2   		movq	%rax, %rdx
 5150              		.loc 6 108 28
 5151 0123 488B8518 		movq	-488(%rbp), %rax
 5151      FEFFFF
 5152 012a 8B00     		movl	(%rax), %eax
 5153 012c 660F6EC0 		movd	%eax, %xmm0
 5154 0130 4889D7   		movq	%rdx, %rdi
 5155 0133 E8000000 		call	_ZNSolsEf@PLT
 5155      00
 5156              		.loc 6 108 28 is_stmt 0 discriminator 1
 5157 0138 4889C2   		movq	%rax, %rdx
 5158              		.loc 6 108 41 is_stmt 1 discriminator 1
 5159 013b 488D0500 		leaq	.LC59(%rip), %rax
 5159      000000
 5160 0142 4889C6   		movq	%rax, %rsi
 5161 0145 4889D7   		movq	%rdx, %rdi
 5162 0148 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 5162      00
 5163              	.LBB74:
 109:../Checks.h   **** 
 110:../Checks.h   **** 		for (int actualIndex = 0; actualIndex < count; ++actualIndex)
 5164              		.loc 6 110 12
 5165 014d C7854CFE 		movl	$0, -436(%rbp)
 5165      FFFF0000 
 5165      0000
 5166              		.loc 6 110 3
 5167 0157 EB42     		jmp	.L244
 5168              	.L245:
 111:../Checks.h   ****             stream << actual[actualIndex] << " ";
 5169              		.loc 6 111 29
 5170 0159 488B8528 		movq	-472(%rbp), %rax
 5170      FEFFFF
 5171 0160 8B954CFE 		movl	-436(%rbp), %edx
 5171      FFFF
 5172 0166 4863D2   		movslq	%edx, %rdx
 5173 0169 8B1490   		movl	(%rax,%rdx,4), %edx
 5174              		.loc 6 111 20
 5175 016c 488D8550 		leaq	-432(%rbp), %rax
 5175      FEFFFF
 5176 0173 660F6EC2 		movd	%edx, %xmm0
 5177 0177 4889C7   		movq	%rax, %rdi
 5178 017a E8000000 		call	_ZNSolsEf@PLT
 5178      00
 5179 017f 4889C2   		movq	%rax, %rdx
 5180              		.loc 6 111 43
 5181 0182 488D0500 		leaq	.LC57(%rip), %rax
 5181      000000
 5182 0189 4889C6   		movq	%rax, %rsi
 5183 018c 4889D7   		movq	%rdx, %rdi
 5184 018f E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 5184      00
 110:../Checks.h   ****             stream << actual[actualIndex] << " ";
 5185              		.loc 6 110 3 discriminator 2
 5186 0194 83854CFE 		addl	$1, -436(%rbp)
 5186      FFFF01
 5187              	.L244:
 110:../Checks.h   ****             stream << actual[actualIndex] << " ";
 5188              		.loc 6 110 41 discriminator 1
 5189 019b 8B854CFE 		movl	-436(%rbp), %eax
 5189      FFFF
 5190 01a1 3B8524FE 		cmpl	-476(%rbp), %eax
 5190      FFFF
 5191 01a7 7CB0     		jl	.L245
 5192              	.LBE74:
 112:../Checks.h   ****         stream << "]";
 5193              		.loc 6 112 16
 5194 01a9 488D8550 		leaq	-432(%rbp), %rax
 5194      FEFFFF
 5195 01b0 488D1500 		leaq	.LC60(%rip), %rdx
 5195      000000
 5196 01b7 4889D6   		movq	%rdx, %rsi
 5197 01ba 4889C7   		movq	%rax, %rdi
 5198 01bd E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 5198      00
 113:../Checks.h   **** 
 114:../Checks.h   ****         results.OnTestFailure(details, stream.GetText());
 5199              		.loc 6 114 30
 5200 01c2 488D8550 		leaq	-432(%rbp), %rax
 5200      FEFFFF
 5201 01c9 4889C7   		movq	%rax, %rdi
 5202 01cc E8000000 		call	_ZNK8UnitTest15MemoryOutStream7GetTextEv@PLT
 5202      00
 5203 01d1 4889C2   		movq	%rax, %rdx
 5204 01d4 488B8D10 		movq	-496(%rbp), %rcx
 5204      FEFFFF
 5205 01db 488B8538 		movq	-456(%rbp), %rax
 5205      FEFFFF
 5206 01e2 4889CE   		movq	%rcx, %rsi
 5207 01e5 4889C7   		movq	%rax, %rdi
 5208 01e8 E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc@PLT
 5208      00
 5209              	.LEHE111:
 115:../Checks.h   ****     }
 5210              		.loc 6 115 5
 5211 01ed 488D8550 		leaq	-432(%rbp), %rax
 5211      FEFFFF
 5212 01f4 4889C7   		movq	%rax, %rdi
 5213              	.LEHB112:
 5214 01f7 E8000000 		call	_ZN8UnitTest15MemoryOutStreamD1Ev
 5214      00
 5215              	.LEHE112:
 5216              	.LBE72:
 5217              	.LBE71:
 116:../Checks.h   **** }
 5218              		.loc 6 116 1
 5219 01fc EB21     		jmp	.L249
 5220              	.L248:
 5221 01fe F30F1EFA 		endbr64
 5222              	.LBB76:
 5223              	.LBB75:
 115:../Checks.h   ****     }
 5224              		.loc 6 115 5
 5225 0202 4889C3   		movq	%rax, %rbx
 5226 0205 488D8550 		leaq	-432(%rbp), %rax
 5226      FEFFFF
 5227 020c 4889C7   		movq	%rax, %rdi
 5228 020f E8000000 		call	_ZN8UnitTest15MemoryOutStreamD1Ev
 5228      00
 5229 0214 4889D8   		movq	%rbx, %rax
 5230 0217 4889C7   		movq	%rax, %rdi
 5231              	.LEHB113:
 5232 021a E8000000 		call	_Unwind_Resume@PLT
 5232      00
 5233              	.LEHE113:
 5234              	.L249:
 5235              	.LBE75:
 5236              	.LBE76:
 5237              		.loc 6 116 1
 5238 021f 90       		nop
 5239 0220 488B45E8 		movq	-24(%rbp), %rax
 5240 0224 64482B04 		subq	%fs:40, %rax
 5240      25280000 
 5240      00
 5241 022d 7405     		je	.L247
 5242 022f E8000000 		call	__stack_chk_fail@PLT
 5242      00
 5243              	.L247:
 5244 0234 488B5DF8 		movq	-8(%rbp), %rbx
 5245 0238 C9       		leave
 5246              		.cfi_def_cfa 7, 8
 5247 0239 C3       		ret
 5248              		.cfi_endproc
 5249              	.LFE1532:
 5250              		.section	.gcc_except_table
 5251              	.LLSDA1532:
 5252 032f FF       		.byte	0xff
 5253 0330 FF       		.byte	0xff
 5254 0331 01       		.byte	0x1
 5255 0332 16       		.uleb128 .LLSDACSE1532-.LLSDACSB1532
 5256              	.LLSDACSB1532:
 5257 0333 8D01     		.uleb128 .LEHB110-.LFB1532
 5258 0335 05       		.uleb128 .LEHE110-.LEHB110
 5259 0336 00       		.uleb128 0
 5260 0337 00       		.uleb128 0
 5261 0338 A601     		.uleb128 .LEHB111-.LFB1532
 5262 033a C702     		.uleb128 .LEHE111-.LEHB111
 5263 033c FE03     		.uleb128 .L248-.LFB1532
 5264 033e 00       		.uleb128 0
 5265 033f F703     		.uleb128 .LEHB112-.LFB1532
 5266 0341 05       		.uleb128 .LEHE112-.LEHB112
 5267 0342 00       		.uleb128 0
 5268 0343 00       		.uleb128 0
 5269 0344 9A04     		.uleb128 .LEHB113-.LFB1532
 5270 0346 05       		.uleb128 .LEHE113-.LEHB113
 5271 0347 00       		.uleb128 0
 5272 0348 00       		.uleb128 0
 5273              	.LLSDACSE1532:
 5274              		.section	.text._ZN8UnitTest15CheckArrayCloseIA3_fS1_fEEvRNS_11TestResultsERKT_RKT0_iRKT1_RKNS_11Te
 5276              		.section	.text._ZNSaIfEC2Ev,"axG",@progbits,_ZNSaIfEC5Ev,comdat
 5277              		.align 2
 5278              		.weak	_ZNSaIfEC2Ev
 5280              	_ZNSaIfEC2Ev:
 5281              	.LFB1534:
 5282              		.file 7 "/usr/include/c++/11/bits/allocator.h"
   1:/usr/include/c++/11/bits/allocator.h **** // Allocators -*- C++ -*-
   2:/usr/include/c++/11/bits/allocator.h **** 
   3:/usr/include/c++/11/bits/allocator.h **** // Copyright (C) 2001-2021 Free Software Foundation, Inc.
   4:/usr/include/c++/11/bits/allocator.h **** //
   5:/usr/include/c++/11/bits/allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/11/bits/allocator.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/11/bits/allocator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/11/bits/allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/11/bits/allocator.h **** // any later version.
  10:/usr/include/c++/11/bits/allocator.h **** 
  11:/usr/include/c++/11/bits/allocator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/11/bits/allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/11/bits/allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/11/bits/allocator.h **** // GNU General Public License for more details.
  15:/usr/include/c++/11/bits/allocator.h **** 
  16:/usr/include/c++/11/bits/allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/11/bits/allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/11/bits/allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/11/bits/allocator.h **** 
  20:/usr/include/c++/11/bits/allocator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/11/bits/allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/11/bits/allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/11/bits/allocator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/11/bits/allocator.h **** 
  25:/usr/include/c++/11/bits/allocator.h **** /*
  26:/usr/include/c++/11/bits/allocator.h ****  * Copyright (c) 1996-1997
  27:/usr/include/c++/11/bits/allocator.h ****  * Silicon Graphics Computer Systems, Inc.
  28:/usr/include/c++/11/bits/allocator.h ****  *
  29:/usr/include/c++/11/bits/allocator.h ****  * Permission to use, copy, modify, distribute and sell this software
  30:/usr/include/c++/11/bits/allocator.h ****  * and its documentation for any purpose is hereby granted without fee,
  31:/usr/include/c++/11/bits/allocator.h ****  * provided that the above copyright notice appear in all copies and
  32:/usr/include/c++/11/bits/allocator.h ****  * that both that copyright notice and this permission notice appear
  33:/usr/include/c++/11/bits/allocator.h ****  * in supporting documentation.  Silicon Graphics makes no
  34:/usr/include/c++/11/bits/allocator.h ****  * representations about the suitability of this software for any
  35:/usr/include/c++/11/bits/allocator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  36:/usr/include/c++/11/bits/allocator.h ****  */
  37:/usr/include/c++/11/bits/allocator.h **** 
  38:/usr/include/c++/11/bits/allocator.h **** /** @file bits/allocator.h
  39:/usr/include/c++/11/bits/allocator.h ****  *  This is an internal header file, included by other library headers.
  40:/usr/include/c++/11/bits/allocator.h ****  *  Do not attempt to use it directly. @headername{memory}
  41:/usr/include/c++/11/bits/allocator.h ****  */
  42:/usr/include/c++/11/bits/allocator.h **** 
  43:/usr/include/c++/11/bits/allocator.h **** #ifndef _ALLOCATOR_H
  44:/usr/include/c++/11/bits/allocator.h **** #define _ALLOCATOR_H 1
  45:/usr/include/c++/11/bits/allocator.h **** 
  46:/usr/include/c++/11/bits/allocator.h **** #include <bits/c++allocator.h> // Define the base class to std::allocator.
  47:/usr/include/c++/11/bits/allocator.h **** #include <bits/memoryfwd.h>
  48:/usr/include/c++/11/bits/allocator.h **** #if __cplusplus >= 201103L
  49:/usr/include/c++/11/bits/allocator.h **** #include <type_traits>
  50:/usr/include/c++/11/bits/allocator.h **** #endif
  51:/usr/include/c++/11/bits/allocator.h **** 
  52:/usr/include/c++/11/bits/allocator.h **** #define __cpp_lib_incomplete_container_elements 201505
  53:/usr/include/c++/11/bits/allocator.h **** 
  54:/usr/include/c++/11/bits/allocator.h **** namespace std _GLIBCXX_VISIBILITY(default)
  55:/usr/include/c++/11/bits/allocator.h **** {
  56:/usr/include/c++/11/bits/allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  57:/usr/include/c++/11/bits/allocator.h **** 
  58:/usr/include/c++/11/bits/allocator.h ****   /**
  59:/usr/include/c++/11/bits/allocator.h ****    *  @addtogroup allocators
  60:/usr/include/c++/11/bits/allocator.h ****    *  @{
  61:/usr/include/c++/11/bits/allocator.h ****    */
  62:/usr/include/c++/11/bits/allocator.h **** 
  63:/usr/include/c++/11/bits/allocator.h ****   // Since C++20 the primary template should be used for allocator<void>,
  64:/usr/include/c++/11/bits/allocator.h ****   // but then it would have a non-trivial default ctor and dtor for C++20,
  65:/usr/include/c++/11/bits/allocator.h ****   // but trivial for C++98-17, which would be an ABI incompatibiliy between
  66:/usr/include/c++/11/bits/allocator.h ****   // different standard dialects. So C++20 still uses the allocator<void>
  67:/usr/include/c++/11/bits/allocator.h ****   // explicit specialization, with the historical ABI properties, but with
  68:/usr/include/c++/11/bits/allocator.h ****   // the same members that are present in the primary template.
  69:/usr/include/c++/11/bits/allocator.h **** 
  70:/usr/include/c++/11/bits/allocator.h ****   /// allocator<void> specialization.
  71:/usr/include/c++/11/bits/allocator.h ****   template<>
  72:/usr/include/c++/11/bits/allocator.h ****     class allocator<void>
  73:/usr/include/c++/11/bits/allocator.h ****     {
  74:/usr/include/c++/11/bits/allocator.h ****     public:
  75:/usr/include/c++/11/bits/allocator.h ****       typedef void        value_type;
  76:/usr/include/c++/11/bits/allocator.h ****       typedef size_t      size_type;
  77:/usr/include/c++/11/bits/allocator.h ****       typedef ptrdiff_t   difference_type;
  78:/usr/include/c++/11/bits/allocator.h **** 
  79:/usr/include/c++/11/bits/allocator.h **** #if __cplusplus <= 201703L
  80:/usr/include/c++/11/bits/allocator.h ****       // These were removed for C++20, allocator_traits does the right thing.
  81:/usr/include/c++/11/bits/allocator.h ****       typedef void*       pointer;
  82:/usr/include/c++/11/bits/allocator.h ****       typedef const void* const_pointer;
  83:/usr/include/c++/11/bits/allocator.h **** 
  84:/usr/include/c++/11/bits/allocator.h ****       template<typename _Tp1>
  85:/usr/include/c++/11/bits/allocator.h **** 	struct rebind
  86:/usr/include/c++/11/bits/allocator.h **** 	{ typedef allocator<_Tp1> other; };
  87:/usr/include/c++/11/bits/allocator.h **** #endif
  88:/usr/include/c++/11/bits/allocator.h **** 
  89:/usr/include/c++/11/bits/allocator.h **** #if __cplusplus >= 201103L
  90:/usr/include/c++/11/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  91:/usr/include/c++/11/bits/allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
  92:/usr/include/c++/11/bits/allocator.h ****       using propagate_on_container_move_assignment = true_type;
  93:/usr/include/c++/11/bits/allocator.h **** 
  94:/usr/include/c++/11/bits/allocator.h ****       using is_always_equal
  95:/usr/include/c++/11/bits/allocator.h **** 	_GLIBCXX20_DEPRECATED_SUGGEST("std::allocator_traits::is_always_equal")
  96:/usr/include/c++/11/bits/allocator.h **** 	= true_type;
  97:/usr/include/c++/11/bits/allocator.h **** 
  98:/usr/include/c++/11/bits/allocator.h **** #if __cplusplus >= 202002L
  99:/usr/include/c++/11/bits/allocator.h ****       // As noted above, these members are present for C++20 to provide the
 100:/usr/include/c++/11/bits/allocator.h ****       // same API as the primary template, but still trivial as in pre-C++20.
 101:/usr/include/c++/11/bits/allocator.h ****       allocator() = default;
 102:/usr/include/c++/11/bits/allocator.h ****       ~allocator() = default;
 103:/usr/include/c++/11/bits/allocator.h **** 
 104:/usr/include/c++/11/bits/allocator.h ****       template<typename _Up>
 105:/usr/include/c++/11/bits/allocator.h **** 	constexpr
 106:/usr/include/c++/11/bits/allocator.h **** 	allocator(const allocator<_Up>&) noexcept { }
 107:/usr/include/c++/11/bits/allocator.h **** 
 108:/usr/include/c++/11/bits/allocator.h ****       // No allocate member because it's ill-formed by LWG 3307.
 109:/usr/include/c++/11/bits/allocator.h ****       // No deallocate member because it would be undefined to call it
 110:/usr/include/c++/11/bits/allocator.h ****       // with any pointer which wasn't obtained from allocate.
 111:/usr/include/c++/11/bits/allocator.h **** #endif // C++20
 112:/usr/include/c++/11/bits/allocator.h **** #endif // C++11
 113:/usr/include/c++/11/bits/allocator.h ****     };
 114:/usr/include/c++/11/bits/allocator.h **** 
 115:/usr/include/c++/11/bits/allocator.h ****   /**
 116:/usr/include/c++/11/bits/allocator.h ****    * @brief  The @a standard allocator, as per C++03 [20.4.1].
 117:/usr/include/c++/11/bits/allocator.h ****    *
 118:/usr/include/c++/11/bits/allocator.h ****    *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/memory.html#std.util.memory.allocator
 119:/usr/include/c++/11/bits/allocator.h ****    *  for further details.
 120:/usr/include/c++/11/bits/allocator.h ****    *
 121:/usr/include/c++/11/bits/allocator.h ****    *  @tparam  _Tp  Type of allocated object.
 122:/usr/include/c++/11/bits/allocator.h ****    */
 123:/usr/include/c++/11/bits/allocator.h ****   template<typename _Tp>
 124:/usr/include/c++/11/bits/allocator.h ****     class allocator : public __allocator_base<_Tp>
 125:/usr/include/c++/11/bits/allocator.h ****     {
 126:/usr/include/c++/11/bits/allocator.h ****     public:
 127:/usr/include/c++/11/bits/allocator.h ****       typedef _Tp        value_type;
 128:/usr/include/c++/11/bits/allocator.h ****       typedef size_t     size_type;
 129:/usr/include/c++/11/bits/allocator.h ****       typedef ptrdiff_t  difference_type;
 130:/usr/include/c++/11/bits/allocator.h **** 
 131:/usr/include/c++/11/bits/allocator.h **** #if __cplusplus <= 201703L
 132:/usr/include/c++/11/bits/allocator.h ****       // These were removed for C++20.
 133:/usr/include/c++/11/bits/allocator.h ****       typedef _Tp*       pointer;
 134:/usr/include/c++/11/bits/allocator.h ****       typedef const _Tp* const_pointer;
 135:/usr/include/c++/11/bits/allocator.h ****       typedef _Tp&       reference;
 136:/usr/include/c++/11/bits/allocator.h ****       typedef const _Tp& const_reference;
 137:/usr/include/c++/11/bits/allocator.h **** 
 138:/usr/include/c++/11/bits/allocator.h ****       template<typename _Tp1>
 139:/usr/include/c++/11/bits/allocator.h **** 	struct rebind
 140:/usr/include/c++/11/bits/allocator.h **** 	{ typedef allocator<_Tp1> other; };
 141:/usr/include/c++/11/bits/allocator.h **** #endif
 142:/usr/include/c++/11/bits/allocator.h **** 
 143:/usr/include/c++/11/bits/allocator.h **** #if __cplusplus >= 201103L
 144:/usr/include/c++/11/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 145:/usr/include/c++/11/bits/allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
 146:/usr/include/c++/11/bits/allocator.h ****       using propagate_on_container_move_assignment = true_type;
 147:/usr/include/c++/11/bits/allocator.h **** 
 148:/usr/include/c++/11/bits/allocator.h ****       using is_always_equal
 149:/usr/include/c++/11/bits/allocator.h **** 	_GLIBCXX20_DEPRECATED_SUGGEST("std::allocator_traits::is_always_equal")
 150:/usr/include/c++/11/bits/allocator.h **** 	= true_type;
 151:/usr/include/c++/11/bits/allocator.h **** #endif
 152:/usr/include/c++/11/bits/allocator.h **** 
 153:/usr/include/c++/11/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 154:/usr/include/c++/11/bits/allocator.h ****       // 3035. std::allocator's constructors should be constexpr
 155:/usr/include/c++/11/bits/allocator.h ****       _GLIBCXX20_CONSTEXPR
 156:/usr/include/c++/11/bits/allocator.h ****       allocator() _GLIBCXX_NOTHROW { }
 5283              		.loc 7 156 7
 5284              		.cfi_startproc
 5285 0000 F30F1EFA 		endbr64
 5286 0004 55       		pushq	%rbp
 5287              		.cfi_def_cfa_offset 16
 5288              		.cfi_offset 6, -16
 5289 0005 4889E5   		movq	%rsp, %rbp
 5290              		.cfi_def_cfa_register 6
 5291 0008 4883EC10 		subq	$16, %rsp
 5292 000c 48897DF8 		movq	%rdi, -8(%rbp)
 5293              	.LBB77:
 5294              		.loc 7 156 36
 5295 0010 488B45F8 		movq	-8(%rbp), %rax
 5296 0014 4889C7   		movq	%rax, %rdi
 5297 0017 E8000000 		call	_ZN9__gnu_cxx13new_allocatorIfEC2Ev
 5297      00
 5298              	.LBE77:
 5299              		.loc 7 156 38
 5300 001c 90       		nop
 5301 001d C9       		leave
 5302              		.cfi_def_cfa 7, 8
 5303 001e C3       		ret
 5304              		.cfi_endproc
 5305              	.LFE1534:
 5307              		.weak	_ZNSaIfEC1Ev
 5308              		.set	_ZNSaIfEC1Ev,_ZNSaIfEC2Ev
 5309              		.section	.text._ZNSaIfED2Ev,"axG",@progbits,_ZNSaIfED5Ev,comdat
 5310              		.align 2
 5311              		.weak	_ZNSaIfED2Ev
 5313              	_ZNSaIfED2Ev:
 5314              	.LFB1537:
 157:/usr/include/c++/11/bits/allocator.h **** 
 158:/usr/include/c++/11/bits/allocator.h ****       _GLIBCXX20_CONSTEXPR
 159:/usr/include/c++/11/bits/allocator.h ****       allocator(const allocator& __a) _GLIBCXX_NOTHROW
 160:/usr/include/c++/11/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 161:/usr/include/c++/11/bits/allocator.h **** 
 162:/usr/include/c++/11/bits/allocator.h **** #if __cplusplus >= 201103L
 163:/usr/include/c++/11/bits/allocator.h ****       // Avoid implicit deprecation.
 164:/usr/include/c++/11/bits/allocator.h ****       allocator& operator=(const allocator&) = default;
 165:/usr/include/c++/11/bits/allocator.h **** #endif
 166:/usr/include/c++/11/bits/allocator.h **** 
 167:/usr/include/c++/11/bits/allocator.h ****       template<typename _Tp1>
 168:/usr/include/c++/11/bits/allocator.h **** 	_GLIBCXX20_CONSTEXPR
 169:/usr/include/c++/11/bits/allocator.h **** 	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 170:/usr/include/c++/11/bits/allocator.h **** 
 171:/usr/include/c++/11/bits/allocator.h **** #if __cpp_constexpr_dynamic_alloc
 172:/usr/include/c++/11/bits/allocator.h ****       constexpr
 173:/usr/include/c++/11/bits/allocator.h **** #endif
 174:/usr/include/c++/11/bits/allocator.h ****       ~allocator() _GLIBCXX_NOTHROW { }
 5315              		.loc 7 174 7
 5316              		.cfi_startproc
 5317 0000 F30F1EFA 		endbr64
 5318 0004 55       		pushq	%rbp
 5319              		.cfi_def_cfa_offset 16
 5320              		.cfi_offset 6, -16
 5321 0005 4889E5   		movq	%rsp, %rbp
 5322              		.cfi_def_cfa_register 6
 5323 0008 4883EC10 		subq	$16, %rsp
 5324 000c 48897DF8 		movq	%rdi, -8(%rbp)
 5325              	.LBB78:
 5326              		.loc 7 174 39
 5327 0010 488B45F8 		movq	-8(%rbp), %rax
 5328 0014 4889C7   		movq	%rax, %rdi
 5329 0017 E8000000 		call	_ZN9__gnu_cxx13new_allocatorIfED2Ev
 5329      00
 5330              	.LBE78:
 5331 001c 90       		nop
 5332 001d C9       		leave
 5333              		.cfi_def_cfa 7, 8
 5334 001e C3       		ret
 5335              		.cfi_endproc
 5336              	.LFE1537:
 5338              		.weak	_ZNSaIfED1Ev
 5339              		.set	_ZNSaIfED1Ev,_ZNSaIfED2Ev
 5340              		.section	.text._ZNSt6vectorIfSaIfEEC2EmRKfRKS0_,"axG",@progbits,_ZNSt6vectorIfSaIfEEC5EmRKfRKS0_,c
 5341              		.align 2
 5342              		.weak	_ZNSt6vectorIfSaIfEEC2EmRKfRKS0_
 5344              	_ZNSt6vectorIfSaIfEEC2EmRKfRKS0_:
 5345              	.LFB1540:
 5346              		.file 8 "/usr/include/c++/11/bits/stl_vector.h"
   1:/usr/include/c++/11/bits/stl_vector.h **** // Vector implementation -*- C++ -*-
   2:/usr/include/c++/11/bits/stl_vector.h **** 
   3:/usr/include/c++/11/bits/stl_vector.h **** // Copyright (C) 2001-2021 Free Software Foundation, Inc.
   4:/usr/include/c++/11/bits/stl_vector.h **** //
   5:/usr/include/c++/11/bits/stl_vector.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/11/bits/stl_vector.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/11/bits/stl_vector.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/11/bits/stl_vector.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/11/bits/stl_vector.h **** // any later version.
  10:/usr/include/c++/11/bits/stl_vector.h **** 
  11:/usr/include/c++/11/bits/stl_vector.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/11/bits/stl_vector.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/11/bits/stl_vector.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/11/bits/stl_vector.h **** // GNU General Public License for more details.
  15:/usr/include/c++/11/bits/stl_vector.h **** 
  16:/usr/include/c++/11/bits/stl_vector.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/11/bits/stl_vector.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/11/bits/stl_vector.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/11/bits/stl_vector.h **** 
  20:/usr/include/c++/11/bits/stl_vector.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/11/bits/stl_vector.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/11/bits/stl_vector.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/11/bits/stl_vector.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/11/bits/stl_vector.h **** 
  25:/usr/include/c++/11/bits/stl_vector.h **** /*
  26:/usr/include/c++/11/bits/stl_vector.h ****  *
  27:/usr/include/c++/11/bits/stl_vector.h ****  * Copyright (c) 1994
  28:/usr/include/c++/11/bits/stl_vector.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/11/bits/stl_vector.h ****  *
  30:/usr/include/c++/11/bits/stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/11/bits/stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/11/bits/stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/11/bits/stl_vector.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/11/bits/stl_vector.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/11/bits/stl_vector.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/11/bits/stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/11/bits/stl_vector.h ****  *
  38:/usr/include/c++/11/bits/stl_vector.h ****  *
  39:/usr/include/c++/11/bits/stl_vector.h ****  * Copyright (c) 1996
  40:/usr/include/c++/11/bits/stl_vector.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/11/bits/stl_vector.h ****  *
  42:/usr/include/c++/11/bits/stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/11/bits/stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/11/bits/stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/11/bits/stl_vector.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/11/bits/stl_vector.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/11/bits/stl_vector.h ****  * representations about the suitability of this  software for any
  48:/usr/include/c++/11/bits/stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/11/bits/stl_vector.h ****  */
  50:/usr/include/c++/11/bits/stl_vector.h **** 
  51:/usr/include/c++/11/bits/stl_vector.h **** /** @file bits/stl_vector.h
  52:/usr/include/c++/11/bits/stl_vector.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/11/bits/stl_vector.h ****  *  Do not attempt to use it directly. @headername{vector}
  54:/usr/include/c++/11/bits/stl_vector.h ****  */
  55:/usr/include/c++/11/bits/stl_vector.h **** 
  56:/usr/include/c++/11/bits/stl_vector.h **** #ifndef _STL_VECTOR_H
  57:/usr/include/c++/11/bits/stl_vector.h **** #define _STL_VECTOR_H 1
  58:/usr/include/c++/11/bits/stl_vector.h **** 
  59:/usr/include/c++/11/bits/stl_vector.h **** #include <bits/stl_iterator_base_funcs.h>
  60:/usr/include/c++/11/bits/stl_vector.h **** #include <bits/functexcept.h>
  61:/usr/include/c++/11/bits/stl_vector.h **** #include <bits/concept_check.h>
  62:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
  63:/usr/include/c++/11/bits/stl_vector.h **** #include <initializer_list>
  64:/usr/include/c++/11/bits/stl_vector.h **** #endif
  65:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus > 201703L
  66:/usr/include/c++/11/bits/stl_vector.h **** # include <compare>
  67:/usr/include/c++/11/bits/stl_vector.h **** #endif
  68:/usr/include/c++/11/bits/stl_vector.h **** 
  69:/usr/include/c++/11/bits/stl_vector.h **** #include <debug/assertions.h>
  70:/usr/include/c++/11/bits/stl_vector.h **** 
  71:/usr/include/c++/11/bits/stl_vector.h **** #if _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
  72:/usr/include/c++/11/bits/stl_vector.h **** extern "C" void
  73:/usr/include/c++/11/bits/stl_vector.h **** __sanitizer_annotate_contiguous_container(const void*, const void*,
  74:/usr/include/c++/11/bits/stl_vector.h **** 					  const void*, const void*);
  75:/usr/include/c++/11/bits/stl_vector.h **** #endif
  76:/usr/include/c++/11/bits/stl_vector.h **** 
  77:/usr/include/c++/11/bits/stl_vector.h **** namespace std _GLIBCXX_VISIBILITY(default)
  78:/usr/include/c++/11/bits/stl_vector.h **** {
  79:/usr/include/c++/11/bits/stl_vector.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  80:/usr/include/c++/11/bits/stl_vector.h **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  81:/usr/include/c++/11/bits/stl_vector.h **** 
  82:/usr/include/c++/11/bits/stl_vector.h ****   /// See bits/stl_deque.h's _Deque_base for an explanation.
  83:/usr/include/c++/11/bits/stl_vector.h ****   template<typename _Tp, typename _Alloc>
  84:/usr/include/c++/11/bits/stl_vector.h ****     struct _Vector_base
  85:/usr/include/c++/11/bits/stl_vector.h ****     {
  86:/usr/include/c++/11/bits/stl_vector.h ****       typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
  87:/usr/include/c++/11/bits/stl_vector.h **** 	rebind<_Tp>::other _Tp_alloc_type;
  88:/usr/include/c++/11/bits/stl_vector.h ****       typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer
  89:/usr/include/c++/11/bits/stl_vector.h ****        	pointer;
  90:/usr/include/c++/11/bits/stl_vector.h **** 
  91:/usr/include/c++/11/bits/stl_vector.h ****       struct _Vector_impl_data
  92:/usr/include/c++/11/bits/stl_vector.h ****       {
  93:/usr/include/c++/11/bits/stl_vector.h **** 	pointer _M_start;
  94:/usr/include/c++/11/bits/stl_vector.h **** 	pointer _M_finish;
  95:/usr/include/c++/11/bits/stl_vector.h **** 	pointer _M_end_of_storage;
  96:/usr/include/c++/11/bits/stl_vector.h **** 
  97:/usr/include/c++/11/bits/stl_vector.h **** 	_Vector_impl_data() _GLIBCXX_NOEXCEPT
  98:/usr/include/c++/11/bits/stl_vector.h **** 	: _M_start(), _M_finish(), _M_end_of_storage()
  99:/usr/include/c++/11/bits/stl_vector.h **** 	{ }
 100:/usr/include/c++/11/bits/stl_vector.h **** 
 101:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
 102:/usr/include/c++/11/bits/stl_vector.h **** 	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
 103:/usr/include/c++/11/bits/stl_vector.h **** 	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 104:/usr/include/c++/11/bits/stl_vector.h **** 	  _M_end_of_storage(__x._M_end_of_storage)
 105:/usr/include/c++/11/bits/stl_vector.h **** 	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 106:/usr/include/c++/11/bits/stl_vector.h **** #endif
 107:/usr/include/c++/11/bits/stl_vector.h **** 
 108:/usr/include/c++/11/bits/stl_vector.h **** 	void
 109:/usr/include/c++/11/bits/stl_vector.h **** 	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
 110:/usr/include/c++/11/bits/stl_vector.h **** 	{
 111:/usr/include/c++/11/bits/stl_vector.h **** 	  _M_start = __x._M_start;
 112:/usr/include/c++/11/bits/stl_vector.h **** 	  _M_finish = __x._M_finish;
 113:/usr/include/c++/11/bits/stl_vector.h **** 	  _M_end_of_storage = __x._M_end_of_storage;
 114:/usr/include/c++/11/bits/stl_vector.h **** 	}
 115:/usr/include/c++/11/bits/stl_vector.h **** 
 116:/usr/include/c++/11/bits/stl_vector.h **** 	void
 117:/usr/include/c++/11/bits/stl_vector.h **** 	_M_swap_data(_Vector_impl_data& __x) _GLIBCXX_NOEXCEPT
 118:/usr/include/c++/11/bits/stl_vector.h **** 	{
 119:/usr/include/c++/11/bits/stl_vector.h **** 	  // Do not use std::swap(_M_start, __x._M_start), etc as it loses
 120:/usr/include/c++/11/bits/stl_vector.h **** 	  // information used by TBAA.
 121:/usr/include/c++/11/bits/stl_vector.h **** 	  _Vector_impl_data __tmp;
 122:/usr/include/c++/11/bits/stl_vector.h **** 	  __tmp._M_copy_data(*this);
 123:/usr/include/c++/11/bits/stl_vector.h **** 	  _M_copy_data(__x);
 124:/usr/include/c++/11/bits/stl_vector.h **** 	  __x._M_copy_data(__tmp);
 125:/usr/include/c++/11/bits/stl_vector.h **** 	}
 126:/usr/include/c++/11/bits/stl_vector.h ****       };
 127:/usr/include/c++/11/bits/stl_vector.h **** 
 128:/usr/include/c++/11/bits/stl_vector.h ****       struct _Vector_impl
 129:/usr/include/c++/11/bits/stl_vector.h **** 	: public _Tp_alloc_type, public _Vector_impl_data
 130:/usr/include/c++/11/bits/stl_vector.h ****       {
 131:/usr/include/c++/11/bits/stl_vector.h **** 	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 132:/usr/include/c++/11/bits/stl_vector.h **** 	    is_nothrow_default_constructible<_Tp_alloc_type>::value)
 133:/usr/include/c++/11/bits/stl_vector.h **** 	: _Tp_alloc_type()
 134:/usr/include/c++/11/bits/stl_vector.h **** 	{ }
 135:/usr/include/c++/11/bits/stl_vector.h **** 
 136:/usr/include/c++/11/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 137:/usr/include/c++/11/bits/stl_vector.h **** 	: _Tp_alloc_type(__a)
 138:/usr/include/c++/11/bits/stl_vector.h **** 	{ }
 139:/usr/include/c++/11/bits/stl_vector.h **** 
 140:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
 141:/usr/include/c++/11/bits/stl_vector.h **** 	// Not defaulted, to enforce noexcept(true) even when
 142:/usr/include/c++/11/bits/stl_vector.h **** 	// !is_nothrow_move_constructible<_Tp_alloc_type>.
 143:/usr/include/c++/11/bits/stl_vector.h **** 	_Vector_impl(_Vector_impl&& __x) noexcept
 144:/usr/include/c++/11/bits/stl_vector.h **** 	: _Tp_alloc_type(std::move(__x)), _Vector_impl_data(std::move(__x))
 145:/usr/include/c++/11/bits/stl_vector.h **** 	{ }
 146:/usr/include/c++/11/bits/stl_vector.h **** 
 147:/usr/include/c++/11/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type&& __a) noexcept
 148:/usr/include/c++/11/bits/stl_vector.h **** 	: _Tp_alloc_type(std::move(__a))
 149:/usr/include/c++/11/bits/stl_vector.h **** 	{ }
 150:/usr/include/c++/11/bits/stl_vector.h **** 
 151:/usr/include/c++/11/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type&& __a, _Vector_impl&& __rv) noexcept
 152:/usr/include/c++/11/bits/stl_vector.h **** 	: _Tp_alloc_type(std::move(__a)), _Vector_impl_data(std::move(__rv))
 153:/usr/include/c++/11/bits/stl_vector.h **** 	{ }
 154:/usr/include/c++/11/bits/stl_vector.h **** #endif
 155:/usr/include/c++/11/bits/stl_vector.h **** 
 156:/usr/include/c++/11/bits/stl_vector.h **** #if _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
 157:/usr/include/c++/11/bits/stl_vector.h **** 	template<typename = _Tp_alloc_type>
 158:/usr/include/c++/11/bits/stl_vector.h **** 	  struct _Asan
 159:/usr/include/c++/11/bits/stl_vector.h **** 	  {
 160:/usr/include/c++/11/bits/stl_vector.h **** 	    typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>
 161:/usr/include/c++/11/bits/stl_vector.h **** 	      ::size_type size_type;
 162:/usr/include/c++/11/bits/stl_vector.h **** 
 163:/usr/include/c++/11/bits/stl_vector.h **** 	    static void _S_shrink(_Vector_impl&, size_type) { }
 164:/usr/include/c++/11/bits/stl_vector.h **** 	    static void _S_on_dealloc(_Vector_impl&) { }
 165:/usr/include/c++/11/bits/stl_vector.h **** 
 166:/usr/include/c++/11/bits/stl_vector.h **** 	    typedef _Vector_impl& _Reinit;
 167:/usr/include/c++/11/bits/stl_vector.h **** 
 168:/usr/include/c++/11/bits/stl_vector.h **** 	    struct _Grow
 169:/usr/include/c++/11/bits/stl_vector.h **** 	    {
 170:/usr/include/c++/11/bits/stl_vector.h **** 	      _Grow(_Vector_impl&, size_type) { }
 171:/usr/include/c++/11/bits/stl_vector.h **** 	      void _M_grew(size_type) { }
 172:/usr/include/c++/11/bits/stl_vector.h **** 	    };
 173:/usr/include/c++/11/bits/stl_vector.h **** 	  };
 174:/usr/include/c++/11/bits/stl_vector.h **** 
 175:/usr/include/c++/11/bits/stl_vector.h **** 	// Enable ASan annotations for memory obtained from std::allocator.
 176:/usr/include/c++/11/bits/stl_vector.h **** 	template<typename _Up>
 177:/usr/include/c++/11/bits/stl_vector.h **** 	  struct _Asan<allocator<_Up> >
 178:/usr/include/c++/11/bits/stl_vector.h **** 	  {
 179:/usr/include/c++/11/bits/stl_vector.h **** 	    typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>
 180:/usr/include/c++/11/bits/stl_vector.h **** 	      ::size_type size_type;
 181:/usr/include/c++/11/bits/stl_vector.h **** 
 182:/usr/include/c++/11/bits/stl_vector.h **** 	    // Adjust ASan annotation for [_M_start, _M_end_of_storage) to
 183:/usr/include/c++/11/bits/stl_vector.h **** 	    // mark end of valid region as __curr instead of __prev.
 184:/usr/include/c++/11/bits/stl_vector.h **** 	    static void
 185:/usr/include/c++/11/bits/stl_vector.h **** 	    _S_adjust(_Vector_impl& __impl, pointer __prev, pointer __curr)
 186:/usr/include/c++/11/bits/stl_vector.h **** 	    {
 187:/usr/include/c++/11/bits/stl_vector.h **** 	      __sanitizer_annotate_contiguous_container(__impl._M_start,
 188:/usr/include/c++/11/bits/stl_vector.h **** 		  __impl._M_end_of_storage, __prev, __curr);
 189:/usr/include/c++/11/bits/stl_vector.h **** 	    }
 190:/usr/include/c++/11/bits/stl_vector.h **** 
 191:/usr/include/c++/11/bits/stl_vector.h **** 	    static void
 192:/usr/include/c++/11/bits/stl_vector.h **** 	    _S_grow(_Vector_impl& __impl, size_type __n)
 193:/usr/include/c++/11/bits/stl_vector.h **** 	    { _S_adjust(__impl, __impl._M_finish, __impl._M_finish + __n); }
 194:/usr/include/c++/11/bits/stl_vector.h **** 
 195:/usr/include/c++/11/bits/stl_vector.h **** 	    static void
 196:/usr/include/c++/11/bits/stl_vector.h **** 	    _S_shrink(_Vector_impl& __impl, size_type __n)
 197:/usr/include/c++/11/bits/stl_vector.h **** 	    { _S_adjust(__impl, __impl._M_finish + __n, __impl._M_finish); }
 198:/usr/include/c++/11/bits/stl_vector.h **** 
 199:/usr/include/c++/11/bits/stl_vector.h **** 	    static void
 200:/usr/include/c++/11/bits/stl_vector.h **** 	    _S_on_dealloc(_Vector_impl& __impl)
 201:/usr/include/c++/11/bits/stl_vector.h **** 	    {
 202:/usr/include/c++/11/bits/stl_vector.h **** 	      if (__impl._M_start)
 203:/usr/include/c++/11/bits/stl_vector.h **** 		_S_adjust(__impl, __impl._M_finish, __impl._M_end_of_storage);
 204:/usr/include/c++/11/bits/stl_vector.h **** 	    }
 205:/usr/include/c++/11/bits/stl_vector.h **** 
 206:/usr/include/c++/11/bits/stl_vector.h **** 	    // Used on reallocation to tell ASan unused capacity is invalid.
 207:/usr/include/c++/11/bits/stl_vector.h **** 	    struct _Reinit
 208:/usr/include/c++/11/bits/stl_vector.h **** 	    {
 209:/usr/include/c++/11/bits/stl_vector.h **** 	      explicit _Reinit(_Vector_impl& __impl) : _M_impl(__impl)
 210:/usr/include/c++/11/bits/stl_vector.h **** 	      {
 211:/usr/include/c++/11/bits/stl_vector.h **** 		// Mark unused capacity as valid again before deallocating it.
 212:/usr/include/c++/11/bits/stl_vector.h **** 		_S_on_dealloc(_M_impl);
 213:/usr/include/c++/11/bits/stl_vector.h **** 	      }
 214:/usr/include/c++/11/bits/stl_vector.h **** 
 215:/usr/include/c++/11/bits/stl_vector.h **** 	      ~_Reinit()
 216:/usr/include/c++/11/bits/stl_vector.h **** 	      {
 217:/usr/include/c++/11/bits/stl_vector.h **** 		// Mark unused capacity as invalid after reallocation.
 218:/usr/include/c++/11/bits/stl_vector.h **** 		if (_M_impl._M_start)
 219:/usr/include/c++/11/bits/stl_vector.h **** 		  _S_adjust(_M_impl, _M_impl._M_end_of_storage,
 220:/usr/include/c++/11/bits/stl_vector.h **** 			    _M_impl._M_finish);
 221:/usr/include/c++/11/bits/stl_vector.h **** 	      }
 222:/usr/include/c++/11/bits/stl_vector.h **** 
 223:/usr/include/c++/11/bits/stl_vector.h **** 	      _Vector_impl& _M_impl;
 224:/usr/include/c++/11/bits/stl_vector.h **** 
 225:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
 226:/usr/include/c++/11/bits/stl_vector.h **** 	      _Reinit(const _Reinit&) = delete;
 227:/usr/include/c++/11/bits/stl_vector.h **** 	      _Reinit& operator=(const _Reinit&) = delete;
 228:/usr/include/c++/11/bits/stl_vector.h **** #endif
 229:/usr/include/c++/11/bits/stl_vector.h **** 	    };
 230:/usr/include/c++/11/bits/stl_vector.h **** 
 231:/usr/include/c++/11/bits/stl_vector.h **** 	    // Tell ASan when unused capacity is initialized to be valid.
 232:/usr/include/c++/11/bits/stl_vector.h **** 	    struct _Grow
 233:/usr/include/c++/11/bits/stl_vector.h **** 	    {
 234:/usr/include/c++/11/bits/stl_vector.h **** 	      _Grow(_Vector_impl& __impl, size_type __n)
 235:/usr/include/c++/11/bits/stl_vector.h **** 	      : _M_impl(__impl), _M_n(__n)
 236:/usr/include/c++/11/bits/stl_vector.h **** 	      { _S_grow(_M_impl, __n); }
 237:/usr/include/c++/11/bits/stl_vector.h **** 
 238:/usr/include/c++/11/bits/stl_vector.h **** 	      ~_Grow() { if (_M_n) _S_shrink(_M_impl, _M_n); }
 239:/usr/include/c++/11/bits/stl_vector.h **** 
 240:/usr/include/c++/11/bits/stl_vector.h **** 	      void _M_grew(size_type __n) { _M_n -= __n; }
 241:/usr/include/c++/11/bits/stl_vector.h **** 
 242:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
 243:/usr/include/c++/11/bits/stl_vector.h **** 	      _Grow(const _Grow&) = delete;
 244:/usr/include/c++/11/bits/stl_vector.h **** 	      _Grow& operator=(const _Grow&) = delete;
 245:/usr/include/c++/11/bits/stl_vector.h **** #endif
 246:/usr/include/c++/11/bits/stl_vector.h **** 	    private:
 247:/usr/include/c++/11/bits/stl_vector.h **** 	      _Vector_impl& _M_impl;
 248:/usr/include/c++/11/bits/stl_vector.h **** 	      size_type _M_n;
 249:/usr/include/c++/11/bits/stl_vector.h **** 	    };
 250:/usr/include/c++/11/bits/stl_vector.h **** 	  };
 251:/usr/include/c++/11/bits/stl_vector.h **** 
 252:/usr/include/c++/11/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_REINIT \
 253:/usr/include/c++/11/bits/stl_vector.h ****   typename _Base::_Vector_impl::template _Asan<>::_Reinit const \
 254:/usr/include/c++/11/bits/stl_vector.h **** 	__attribute__((__unused__)) __reinit_guard(this->_M_impl)
 255:/usr/include/c++/11/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GROW(n) \
 256:/usr/include/c++/11/bits/stl_vector.h ****   typename _Base::_Vector_impl::template _Asan<>::_Grow \
 257:/usr/include/c++/11/bits/stl_vector.h **** 	__attribute__((__unused__)) __grow_guard(this->_M_impl, (n))
 258:/usr/include/c++/11/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GREW(n) __grow_guard._M_grew(n)
 259:/usr/include/c++/11/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_SHRINK(n) \
 260:/usr/include/c++/11/bits/stl_vector.h ****   _Base::_Vector_impl::template _Asan<>::_S_shrink(this->_M_impl, n)
 261:/usr/include/c++/11/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC \
 262:/usr/include/c++/11/bits/stl_vector.h ****   _Base::_Vector_impl::template _Asan<>::_S_on_dealloc(this->_M_impl)
 263:/usr/include/c++/11/bits/stl_vector.h **** #else // ! (_GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR)
 264:/usr/include/c++/11/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_REINIT
 265:/usr/include/c++/11/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GROW(n)
 266:/usr/include/c++/11/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GREW(n)
 267:/usr/include/c++/11/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_SHRINK(n)
 268:/usr/include/c++/11/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC
 269:/usr/include/c++/11/bits/stl_vector.h **** #endif // _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
 270:/usr/include/c++/11/bits/stl_vector.h ****       };
 271:/usr/include/c++/11/bits/stl_vector.h **** 
 272:/usr/include/c++/11/bits/stl_vector.h ****     public:
 273:/usr/include/c++/11/bits/stl_vector.h ****       typedef _Alloc allocator_type;
 274:/usr/include/c++/11/bits/stl_vector.h **** 
 275:/usr/include/c++/11/bits/stl_vector.h ****       _Tp_alloc_type&
 276:/usr/include/c++/11/bits/stl_vector.h ****       _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 277:/usr/include/c++/11/bits/stl_vector.h ****       { return this->_M_impl; }
 278:/usr/include/c++/11/bits/stl_vector.h **** 
 279:/usr/include/c++/11/bits/stl_vector.h ****       const _Tp_alloc_type&
 280:/usr/include/c++/11/bits/stl_vector.h ****       _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 281:/usr/include/c++/11/bits/stl_vector.h ****       { return this->_M_impl; }
 282:/usr/include/c++/11/bits/stl_vector.h **** 
 283:/usr/include/c++/11/bits/stl_vector.h ****       allocator_type
 284:/usr/include/c++/11/bits/stl_vector.h ****       get_allocator() const _GLIBCXX_NOEXCEPT
 285:/usr/include/c++/11/bits/stl_vector.h ****       { return allocator_type(_M_get_Tp_allocator()); }
 286:/usr/include/c++/11/bits/stl_vector.h **** 
 287:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
 288:/usr/include/c++/11/bits/stl_vector.h ****       _Vector_base() = default;
 289:/usr/include/c++/11/bits/stl_vector.h **** #else
 290:/usr/include/c++/11/bits/stl_vector.h ****       _Vector_base() { }
 291:/usr/include/c++/11/bits/stl_vector.h **** #endif
 292:/usr/include/c++/11/bits/stl_vector.h **** 
 293:/usr/include/c++/11/bits/stl_vector.h ****       _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 294:/usr/include/c++/11/bits/stl_vector.h ****       : _M_impl(__a) { }
 295:/usr/include/c++/11/bits/stl_vector.h **** 
 296:/usr/include/c++/11/bits/stl_vector.h ****       // Kept for ABI compatibility.
 297:/usr/include/c++/11/bits/stl_vector.h **** #if !_GLIBCXX_INLINE_VERSION
 298:/usr/include/c++/11/bits/stl_vector.h ****       _Vector_base(size_t __n)
 299:/usr/include/c++/11/bits/stl_vector.h ****       : _M_impl()
 300:/usr/include/c++/11/bits/stl_vector.h ****       { _M_create_storage(__n); }
 301:/usr/include/c++/11/bits/stl_vector.h **** #endif
 302:/usr/include/c++/11/bits/stl_vector.h **** 
 303:/usr/include/c++/11/bits/stl_vector.h ****       _Vector_base(size_t __n, const allocator_type& __a)
 304:/usr/include/c++/11/bits/stl_vector.h ****       : _M_impl(__a)
 305:/usr/include/c++/11/bits/stl_vector.h ****       { _M_create_storage(__n); }
 306:/usr/include/c++/11/bits/stl_vector.h **** 
 307:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
 308:/usr/include/c++/11/bits/stl_vector.h ****       _Vector_base(_Vector_base&&) = default;
 309:/usr/include/c++/11/bits/stl_vector.h **** 
 310:/usr/include/c++/11/bits/stl_vector.h ****       // Kept for ABI compatibility.
 311:/usr/include/c++/11/bits/stl_vector.h **** # if !_GLIBCXX_INLINE_VERSION
 312:/usr/include/c++/11/bits/stl_vector.h ****       _Vector_base(_Tp_alloc_type&& __a) noexcept
 313:/usr/include/c++/11/bits/stl_vector.h ****       : _M_impl(std::move(__a)) { }
 314:/usr/include/c++/11/bits/stl_vector.h **** 
 315:/usr/include/c++/11/bits/stl_vector.h ****       _Vector_base(_Vector_base&& __x, const allocator_type& __a)
 316:/usr/include/c++/11/bits/stl_vector.h ****       : _M_impl(__a)
 317:/usr/include/c++/11/bits/stl_vector.h ****       {
 318:/usr/include/c++/11/bits/stl_vector.h **** 	if (__x.get_allocator() == __a)
 319:/usr/include/c++/11/bits/stl_vector.h **** 	  this->_M_impl._M_swap_data(__x._M_impl);
 320:/usr/include/c++/11/bits/stl_vector.h **** 	else
 321:/usr/include/c++/11/bits/stl_vector.h **** 	  {
 322:/usr/include/c++/11/bits/stl_vector.h **** 	    size_t __n = __x._M_impl._M_finish - __x._M_impl._M_start;
 323:/usr/include/c++/11/bits/stl_vector.h **** 	    _M_create_storage(__n);
 324:/usr/include/c++/11/bits/stl_vector.h **** 	  }
 325:/usr/include/c++/11/bits/stl_vector.h ****       }
 326:/usr/include/c++/11/bits/stl_vector.h **** # endif
 327:/usr/include/c++/11/bits/stl_vector.h **** 
 328:/usr/include/c++/11/bits/stl_vector.h ****       _Vector_base(const allocator_type& __a, _Vector_base&& __x)
 329:/usr/include/c++/11/bits/stl_vector.h ****       : _M_impl(_Tp_alloc_type(__a), std::move(__x._M_impl))
 330:/usr/include/c++/11/bits/stl_vector.h ****       { }
 331:/usr/include/c++/11/bits/stl_vector.h **** #endif
 332:/usr/include/c++/11/bits/stl_vector.h **** 
 333:/usr/include/c++/11/bits/stl_vector.h ****       ~_Vector_base() _GLIBCXX_NOEXCEPT
 334:/usr/include/c++/11/bits/stl_vector.h ****       {
 335:/usr/include/c++/11/bits/stl_vector.h **** 	_M_deallocate(_M_impl._M_start,
 336:/usr/include/c++/11/bits/stl_vector.h **** 		      _M_impl._M_end_of_storage - _M_impl._M_start);
 337:/usr/include/c++/11/bits/stl_vector.h ****       }
 338:/usr/include/c++/11/bits/stl_vector.h **** 
 339:/usr/include/c++/11/bits/stl_vector.h ****     public:
 340:/usr/include/c++/11/bits/stl_vector.h ****       _Vector_impl _M_impl;
 341:/usr/include/c++/11/bits/stl_vector.h **** 
 342:/usr/include/c++/11/bits/stl_vector.h ****       pointer
 343:/usr/include/c++/11/bits/stl_vector.h ****       _M_allocate(size_t __n)
 344:/usr/include/c++/11/bits/stl_vector.h ****       {
 345:/usr/include/c++/11/bits/stl_vector.h **** 	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 346:/usr/include/c++/11/bits/stl_vector.h **** 	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 347:/usr/include/c++/11/bits/stl_vector.h ****       }
 348:/usr/include/c++/11/bits/stl_vector.h **** 
 349:/usr/include/c++/11/bits/stl_vector.h ****       void
 350:/usr/include/c++/11/bits/stl_vector.h ****       _M_deallocate(pointer __p, size_t __n)
 351:/usr/include/c++/11/bits/stl_vector.h ****       {
 352:/usr/include/c++/11/bits/stl_vector.h **** 	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 353:/usr/include/c++/11/bits/stl_vector.h **** 	if (__p)
 354:/usr/include/c++/11/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 355:/usr/include/c++/11/bits/stl_vector.h ****       }
 356:/usr/include/c++/11/bits/stl_vector.h **** 
 357:/usr/include/c++/11/bits/stl_vector.h ****     protected:
 358:/usr/include/c++/11/bits/stl_vector.h ****       void
 359:/usr/include/c++/11/bits/stl_vector.h ****       _M_create_storage(size_t __n)
 360:/usr/include/c++/11/bits/stl_vector.h ****       {
 361:/usr/include/c++/11/bits/stl_vector.h **** 	this->_M_impl._M_start = this->_M_allocate(__n);
 362:/usr/include/c++/11/bits/stl_vector.h **** 	this->_M_impl._M_finish = this->_M_impl._M_start;
 363:/usr/include/c++/11/bits/stl_vector.h **** 	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 364:/usr/include/c++/11/bits/stl_vector.h ****       }
 365:/usr/include/c++/11/bits/stl_vector.h ****     };
 366:/usr/include/c++/11/bits/stl_vector.h **** 
 367:/usr/include/c++/11/bits/stl_vector.h ****   /**
 368:/usr/include/c++/11/bits/stl_vector.h ****    *  @brief A standard container which offers fixed time access to
 369:/usr/include/c++/11/bits/stl_vector.h ****    *  individual elements in any order.
 370:/usr/include/c++/11/bits/stl_vector.h ****    *
 371:/usr/include/c++/11/bits/stl_vector.h ****    *  @ingroup sequences
 372:/usr/include/c++/11/bits/stl_vector.h ****    *
 373:/usr/include/c++/11/bits/stl_vector.h ****    *  @tparam _Tp  Type of element.
 374:/usr/include/c++/11/bits/stl_vector.h ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_Tp>.
 375:/usr/include/c++/11/bits/stl_vector.h ****    *
 376:/usr/include/c++/11/bits/stl_vector.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
 377:/usr/include/c++/11/bits/stl_vector.h ****    *  <a href="tables.html#66">reversible container</a>, and a
 378:/usr/include/c++/11/bits/stl_vector.h ****    *  <a href="tables.html#67">sequence</a>, including the
 379:/usr/include/c++/11/bits/stl_vector.h ****    *  <a href="tables.html#68">optional sequence requirements</a> with the
 380:/usr/include/c++/11/bits/stl_vector.h ****    *  %exception of @c push_front and @c pop_front.
 381:/usr/include/c++/11/bits/stl_vector.h ****    *
 382:/usr/include/c++/11/bits/stl_vector.h ****    *  In some terminology a %vector can be described as a dynamic
 383:/usr/include/c++/11/bits/stl_vector.h ****    *  C-style array, it offers fast and efficient access to individual
 384:/usr/include/c++/11/bits/stl_vector.h ****    *  elements in any order and saves the user from worrying about
 385:/usr/include/c++/11/bits/stl_vector.h ****    *  memory and size allocation.  Subscripting ( @c [] ) access is
 386:/usr/include/c++/11/bits/stl_vector.h ****    *  also provided as with C-style arrays.
 387:/usr/include/c++/11/bits/stl_vector.h ****   */
 388:/usr/include/c++/11/bits/stl_vector.h ****   template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
 389:/usr/include/c++/11/bits/stl_vector.h ****     class vector : protected _Vector_base<_Tp, _Alloc>
 390:/usr/include/c++/11/bits/stl_vector.h ****     {
 391:/usr/include/c++/11/bits/stl_vector.h **** #ifdef _GLIBCXX_CONCEPT_CHECKS
 392:/usr/include/c++/11/bits/stl_vector.h ****       // Concept requirements.
 393:/usr/include/c++/11/bits/stl_vector.h ****       typedef typename _Alloc::value_type		_Alloc_value_type;
 394:/usr/include/c++/11/bits/stl_vector.h **** # if __cplusplus < 201103L
 395:/usr/include/c++/11/bits/stl_vector.h ****       __glibcxx_class_requires(_Tp, _SGIAssignableConcept)
 396:/usr/include/c++/11/bits/stl_vector.h **** # endif
 397:/usr/include/c++/11/bits/stl_vector.h ****       __glibcxx_class_requires2(_Tp, _Alloc_value_type, _SameTypeConcept)
 398:/usr/include/c++/11/bits/stl_vector.h **** #endif
 399:/usr/include/c++/11/bits/stl_vector.h **** 
 400:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
 401:/usr/include/c++/11/bits/stl_vector.h ****       static_assert(is_same<typename remove_cv<_Tp>::type, _Tp>::value,
 402:/usr/include/c++/11/bits/stl_vector.h **** 	  "std::vector must have a non-const, non-volatile value_type");
 403:/usr/include/c++/11/bits/stl_vector.h **** # if __cplusplus > 201703L || defined __STRICT_ANSI__
 404:/usr/include/c++/11/bits/stl_vector.h ****       static_assert(is_same<typename _Alloc::value_type, _Tp>::value,
 405:/usr/include/c++/11/bits/stl_vector.h **** 	  "std::vector must have the same value_type as its allocator");
 406:/usr/include/c++/11/bits/stl_vector.h **** # endif
 407:/usr/include/c++/11/bits/stl_vector.h **** #endif
 408:/usr/include/c++/11/bits/stl_vector.h **** 
 409:/usr/include/c++/11/bits/stl_vector.h ****       typedef _Vector_base<_Tp, _Alloc>			_Base;
 410:/usr/include/c++/11/bits/stl_vector.h ****       typedef typename _Base::_Tp_alloc_type		_Tp_alloc_type;
 411:/usr/include/c++/11/bits/stl_vector.h ****       typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type>	_Alloc_traits;
 412:/usr/include/c++/11/bits/stl_vector.h **** 
 413:/usr/include/c++/11/bits/stl_vector.h ****     public:
 414:/usr/include/c++/11/bits/stl_vector.h ****       typedef _Tp					value_type;
 415:/usr/include/c++/11/bits/stl_vector.h ****       typedef typename _Base::pointer			pointer;
 416:/usr/include/c++/11/bits/stl_vector.h ****       typedef typename _Alloc_traits::const_pointer	const_pointer;
 417:/usr/include/c++/11/bits/stl_vector.h ****       typedef typename _Alloc_traits::reference		reference;
 418:/usr/include/c++/11/bits/stl_vector.h ****       typedef typename _Alloc_traits::const_reference	const_reference;
 419:/usr/include/c++/11/bits/stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<pointer, vector> iterator;
 420:/usr/include/c++/11/bits/stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<const_pointer, vector>
 421:/usr/include/c++/11/bits/stl_vector.h ****       const_iterator;
 422:/usr/include/c++/11/bits/stl_vector.h ****       typedef std::reverse_iterator<const_iterator>	const_reverse_iterator;
 423:/usr/include/c++/11/bits/stl_vector.h ****       typedef std::reverse_iterator<iterator>		reverse_iterator;
 424:/usr/include/c++/11/bits/stl_vector.h ****       typedef size_t					size_type;
 425:/usr/include/c++/11/bits/stl_vector.h ****       typedef ptrdiff_t					difference_type;
 426:/usr/include/c++/11/bits/stl_vector.h ****       typedef _Alloc					allocator_type;
 427:/usr/include/c++/11/bits/stl_vector.h **** 
 428:/usr/include/c++/11/bits/stl_vector.h ****     private:
 429:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
 430:/usr/include/c++/11/bits/stl_vector.h ****       static constexpr bool
 431:/usr/include/c++/11/bits/stl_vector.h ****       _S_nothrow_relocate(true_type)
 432:/usr/include/c++/11/bits/stl_vector.h ****       {
 433:/usr/include/c++/11/bits/stl_vector.h **** 	return noexcept(std::__relocate_a(std::declval<pointer>(),
 434:/usr/include/c++/11/bits/stl_vector.h **** 					  std::declval<pointer>(),
 435:/usr/include/c++/11/bits/stl_vector.h **** 					  std::declval<pointer>(),
 436:/usr/include/c++/11/bits/stl_vector.h **** 					  std::declval<_Tp_alloc_type&>()));
 437:/usr/include/c++/11/bits/stl_vector.h ****       }
 438:/usr/include/c++/11/bits/stl_vector.h **** 
 439:/usr/include/c++/11/bits/stl_vector.h ****       static constexpr bool
 440:/usr/include/c++/11/bits/stl_vector.h ****       _S_nothrow_relocate(false_type)
 441:/usr/include/c++/11/bits/stl_vector.h ****       { return false; }
 442:/usr/include/c++/11/bits/stl_vector.h **** 
 443:/usr/include/c++/11/bits/stl_vector.h ****       static constexpr bool
 444:/usr/include/c++/11/bits/stl_vector.h ****       _S_use_relocate()
 445:/usr/include/c++/11/bits/stl_vector.h ****       {
 446:/usr/include/c++/11/bits/stl_vector.h **** 	// Instantiating std::__relocate_a might cause an error outside the
 447:/usr/include/c++/11/bits/stl_vector.h **** 	// immediate context (in __relocate_object_a's noexcept-specifier),
 448:/usr/include/c++/11/bits/stl_vector.h **** 	// so only do it if we know the type can be move-inserted into *this.
 449:/usr/include/c++/11/bits/stl_vector.h **** 	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 450:/usr/include/c++/11/bits/stl_vector.h ****       }
 451:/usr/include/c++/11/bits/stl_vector.h **** 
 452:/usr/include/c++/11/bits/stl_vector.h ****       static pointer
 453:/usr/include/c++/11/bits/stl_vector.h ****       _S_do_relocate(pointer __first, pointer __last, pointer __result,
 454:/usr/include/c++/11/bits/stl_vector.h **** 		     _Tp_alloc_type& __alloc, true_type) noexcept
 455:/usr/include/c++/11/bits/stl_vector.h ****       {
 456:/usr/include/c++/11/bits/stl_vector.h **** 	return std::__relocate_a(__first, __last, __result, __alloc);
 457:/usr/include/c++/11/bits/stl_vector.h ****       }
 458:/usr/include/c++/11/bits/stl_vector.h **** 
 459:/usr/include/c++/11/bits/stl_vector.h ****       static pointer
 460:/usr/include/c++/11/bits/stl_vector.h ****       _S_do_relocate(pointer, pointer, pointer __result,
 461:/usr/include/c++/11/bits/stl_vector.h **** 		     _Tp_alloc_type&, false_type) noexcept
 462:/usr/include/c++/11/bits/stl_vector.h ****       { return __result; }
 463:/usr/include/c++/11/bits/stl_vector.h **** 
 464:/usr/include/c++/11/bits/stl_vector.h ****       static pointer
 465:/usr/include/c++/11/bits/stl_vector.h ****       _S_relocate(pointer __first, pointer __last, pointer __result,
 466:/usr/include/c++/11/bits/stl_vector.h **** 		  _Tp_alloc_type& __alloc) noexcept
 467:/usr/include/c++/11/bits/stl_vector.h ****       {
 468:/usr/include/c++/11/bits/stl_vector.h **** 	using __do_it = __bool_constant<_S_use_relocate()>;
 469:/usr/include/c++/11/bits/stl_vector.h **** 	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 470:/usr/include/c++/11/bits/stl_vector.h ****       }
 471:/usr/include/c++/11/bits/stl_vector.h **** #endif // C++11
 472:/usr/include/c++/11/bits/stl_vector.h **** 
 473:/usr/include/c++/11/bits/stl_vector.h ****     protected:
 474:/usr/include/c++/11/bits/stl_vector.h ****       using _Base::_M_allocate;
 475:/usr/include/c++/11/bits/stl_vector.h ****       using _Base::_M_deallocate;
 476:/usr/include/c++/11/bits/stl_vector.h ****       using _Base::_M_impl;
 477:/usr/include/c++/11/bits/stl_vector.h ****       using _Base::_M_get_Tp_allocator;
 478:/usr/include/c++/11/bits/stl_vector.h **** 
 479:/usr/include/c++/11/bits/stl_vector.h ****     public:
 480:/usr/include/c++/11/bits/stl_vector.h ****       // [23.2.4.1] construct/copy/destroy
 481:/usr/include/c++/11/bits/stl_vector.h ****       // (assign() and get_allocator() are also listed in this section)
 482:/usr/include/c++/11/bits/stl_vector.h **** 
 483:/usr/include/c++/11/bits/stl_vector.h ****       /**
 484:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Creates a %vector with no elements.
 485:/usr/include/c++/11/bits/stl_vector.h ****        */
 486:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
 487:/usr/include/c++/11/bits/stl_vector.h ****       vector() = default;
 488:/usr/include/c++/11/bits/stl_vector.h **** #else
 489:/usr/include/c++/11/bits/stl_vector.h ****       vector() { }
 490:/usr/include/c++/11/bits/stl_vector.h **** #endif
 491:/usr/include/c++/11/bits/stl_vector.h **** 
 492:/usr/include/c++/11/bits/stl_vector.h ****       /**
 493:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Creates a %vector with no elements.
 494:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __a  An allocator object.
 495:/usr/include/c++/11/bits/stl_vector.h ****        */
 496:/usr/include/c++/11/bits/stl_vector.h ****       explicit
 497:/usr/include/c++/11/bits/stl_vector.h ****       vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 498:/usr/include/c++/11/bits/stl_vector.h ****       : _Base(__a) { }
 499:/usr/include/c++/11/bits/stl_vector.h **** 
 500:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
 501:/usr/include/c++/11/bits/stl_vector.h ****       /**
 502:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Creates a %vector with default constructed elements.
 503:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 504:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __a  An allocator.
 505:/usr/include/c++/11/bits/stl_vector.h ****        *
 506:/usr/include/c++/11/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n default
 507:/usr/include/c++/11/bits/stl_vector.h ****        *  constructed elements.
 508:/usr/include/c++/11/bits/stl_vector.h ****        */
 509:/usr/include/c++/11/bits/stl_vector.h ****       explicit
 510:/usr/include/c++/11/bits/stl_vector.h ****       vector(size_type __n, const allocator_type& __a = allocator_type())
 511:/usr/include/c++/11/bits/stl_vector.h ****       : _Base(_S_check_init_len(__n, __a), __a)
 512:/usr/include/c++/11/bits/stl_vector.h ****       { _M_default_initialize(__n); }
 513:/usr/include/c++/11/bits/stl_vector.h **** 
 514:/usr/include/c++/11/bits/stl_vector.h ****       /**
 515:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 516:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 517:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __value  An element to copy.
 518:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __a  An allocator.
 519:/usr/include/c++/11/bits/stl_vector.h ****        *
 520:/usr/include/c++/11/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n copies of @a __value.
 521:/usr/include/c++/11/bits/stl_vector.h ****        */
 522:/usr/include/c++/11/bits/stl_vector.h ****       vector(size_type __n, const value_type& __value,
 523:/usr/include/c++/11/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 524:/usr/include/c++/11/bits/stl_vector.h ****       : _Base(_S_check_init_len(__n, __a), __a)
 525:/usr/include/c++/11/bits/stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 526:/usr/include/c++/11/bits/stl_vector.h **** #else
 527:/usr/include/c++/11/bits/stl_vector.h ****       /**
 528:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 529:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 530:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __value  An element to copy.
 531:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __a  An allocator.
 532:/usr/include/c++/11/bits/stl_vector.h ****        *
 533:/usr/include/c++/11/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n copies of @a __value.
 534:/usr/include/c++/11/bits/stl_vector.h ****        */
 535:/usr/include/c++/11/bits/stl_vector.h ****       explicit
 536:/usr/include/c++/11/bits/stl_vector.h ****       vector(size_type __n, const value_type& __value = value_type(),
 5347              		.loc 8 536 7
 5348              		.cfi_startproc
 5349              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 5350              		.cfi_lsda 0x1b,.LLSDA1540
 5351 0000 F30F1EFA 		endbr64
 5352 0004 55       		pushq	%rbp
 5353              		.cfi_def_cfa_offset 16
 5354              		.cfi_offset 6, -16
 5355 0005 4889E5   		movq	%rsp, %rbp
 5356              		.cfi_def_cfa_register 6
 5357 0008 53       		pushq	%rbx
 5358 0009 4883EC28 		subq	$40, %rsp
 5359              		.cfi_offset 3, -24
 5360 000d 48897DE8 		movq	%rdi, -24(%rbp)
 5361 0011 488975E0 		movq	%rsi, -32(%rbp)
 5362 0015 488955D8 		movq	%rdx, -40(%rbp)
 5363 0019 48894DD0 		movq	%rcx, -48(%rbp)
 5364              	.LBB79:
 537:/usr/include/c++/11/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 538:/usr/include/c++/11/bits/stl_vector.h ****       : _Base(_S_check_init_len(__n, __a), __a)
 5365              		.loc 8 538 47
 5366 001d 488B5DE8 		movq	-24(%rbp), %rbx
 5367 0021 488B55D0 		movq	-48(%rbp), %rdx
 5368 0025 488B45E0 		movq	-32(%rbp), %rax
 5369 0029 4889D6   		movq	%rdx, %rsi
 5370 002c 4889C7   		movq	%rax, %rdi
 5371              	.LEHB114:
 5372 002f E8000000 		call	_ZNSt6vectorIfSaIfEE17_S_check_init_lenEmRKS0_
 5372      00
 5373 0034 4889C1   		movq	%rax, %rcx
 5374 0037 488B45D0 		movq	-48(%rbp), %rax
 5375 003b 4889C2   		movq	%rax, %rdx
 5376 003e 4889CE   		movq	%rcx, %rsi
 5377 0041 4889DF   		movq	%rbx, %rdi
 5378 0044 E8000000 		call	_ZNSt12_Vector_baseIfSaIfEEC2EmRKS0_
 5378      00
 5379              	.LEHE114:
 539:/usr/include/c++/11/bits/stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 5380              		.loc 8 539 27
 5381 0049 488B55D8 		movq	-40(%rbp), %rdx
 5382 004d 488B4DE0 		movq	-32(%rbp), %rcx
 5383 0051 488B45E8 		movq	-24(%rbp), %rax
 5384 0055 4889CE   		movq	%rcx, %rsi
 5385 0058 4889C7   		movq	%rax, %rdi
 5386              	.LEHB115:
 5387 005b E8000000 		call	_ZNSt6vectorIfSaIfEE18_M_fill_initializeEmRKf
 5387      00
 5388              	.LEHE115:
 5389              	.LBE79:
 5390              		.loc 8 539 43
 5391 0060 EB1E     		jmp	.L255
 5392              	.L254:
 5393 0062 F30F1EFA 		endbr64
 5394              	.LBB80:
 5395 0066 4889C3   		movq	%rax, %rbx
 5396 0069 488B45E8 		movq	-24(%rbp), %rax
 5397 006d 4889C7   		movq	%rax, %rdi
 5398 0070 E8000000 		call	_ZNSt12_Vector_baseIfSaIfEED2Ev
 5398      00
 5399 0075 4889D8   		movq	%rbx, %rax
 5400 0078 4889C7   		movq	%rax, %rdi
 5401              	.LEHB116:
 5402 007b E8000000 		call	_Unwind_Resume@PLT
 5402      00
 5403              	.LEHE116:
 5404              	.L255:
 5405              	.LBE80:
 5406 0080 488B5DF8 		movq	-8(%rbp), %rbx
 5407 0084 C9       		leave
 5408              		.cfi_def_cfa 7, 8
 5409 0085 C3       		ret
 5410              		.cfi_endproc
 5411              	.LFE1540:
 5412              		.section	.gcc_except_table
 5413              	.LLSDA1540:
 5414 0349 FF       		.byte	0xff
 5415 034a FF       		.byte	0xff
 5416 034b 01       		.byte	0x1
 5417 034c 0C       		.uleb128 .LLSDACSE1540-.LLSDACSB1540
 5418              	.LLSDACSB1540:
 5419 034d 2F       		.uleb128 .LEHB114-.LFB1540
 5420 034e 1A       		.uleb128 .LEHE114-.LEHB114
 5421 034f 00       		.uleb128 0
 5422 0350 00       		.uleb128 0
 5423 0351 5B       		.uleb128 .LEHB115-.LFB1540
 5424 0352 05       		.uleb128 .LEHE115-.LEHB115
 5425 0353 62       		.uleb128 .L254-.LFB1540
 5426 0354 00       		.uleb128 0
 5427 0355 7B       		.uleb128 .LEHB116-.LFB1540
 5428 0356 05       		.uleb128 .LEHE116-.LEHB116
 5429 0357 00       		.uleb128 0
 5430 0358 00       		.uleb128 0
 5431              	.LLSDACSE1540:
 5432              		.section	.text._ZNSt6vectorIfSaIfEEC2EmRKfRKS0_,"axG",@progbits,_ZNSt6vectorIfSaIfEEC5EmRKfRKS0_,c
 5434              		.weak	_ZNSt6vectorIfSaIfEEC1EmRKfRKS0_
 5435              		.set	_ZNSt6vectorIfSaIfEEC1EmRKfRKS0_,_ZNSt6vectorIfSaIfEEC2EmRKfRKS0_
 5436              		.section	.text._ZNSt6vectorIfSaIfEED2Ev,"axG",@progbits,_ZNSt6vectorIfSaIfEED5Ev,comdat
 5437              		.align 2
 5438              		.weak	_ZNSt6vectorIfSaIfEED2Ev
 5440              	_ZNSt6vectorIfSaIfEED2Ev:
 5441              	.LFB1543:
 540:/usr/include/c++/11/bits/stl_vector.h **** #endif
 541:/usr/include/c++/11/bits/stl_vector.h **** 
 542:/usr/include/c++/11/bits/stl_vector.h ****       /**
 543:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  %Vector copy constructor.
 544:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 545:/usr/include/c++/11/bits/stl_vector.h ****        *
 546:/usr/include/c++/11/bits/stl_vector.h ****        *  All the elements of @a __x are copied, but any unused capacity in
 547:/usr/include/c++/11/bits/stl_vector.h ****        *  @a __x  will not be copied
 548:/usr/include/c++/11/bits/stl_vector.h ****        *  (i.e. capacity() == size() in the new %vector).
 549:/usr/include/c++/11/bits/stl_vector.h ****        *
 550:/usr/include/c++/11/bits/stl_vector.h ****        *  The newly-created %vector uses a copy of the allocator object used
 551:/usr/include/c++/11/bits/stl_vector.h ****        *  by @a __x (unless the allocator traits dictate a different object).
 552:/usr/include/c++/11/bits/stl_vector.h ****        */
 553:/usr/include/c++/11/bits/stl_vector.h ****       vector(const vector& __x)
 554:/usr/include/c++/11/bits/stl_vector.h ****       : _Base(__x.size(),
 555:/usr/include/c++/11/bits/stl_vector.h **** 	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 556:/usr/include/c++/11/bits/stl_vector.h ****       {
 557:/usr/include/c++/11/bits/stl_vector.h **** 	this->_M_impl._M_finish =
 558:/usr/include/c++/11/bits/stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 559:/usr/include/c++/11/bits/stl_vector.h **** 				      this->_M_impl._M_start,
 560:/usr/include/c++/11/bits/stl_vector.h **** 				      _M_get_Tp_allocator());
 561:/usr/include/c++/11/bits/stl_vector.h ****       }
 562:/usr/include/c++/11/bits/stl_vector.h **** 
 563:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
 564:/usr/include/c++/11/bits/stl_vector.h ****       /**
 565:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  %Vector move constructor.
 566:/usr/include/c++/11/bits/stl_vector.h ****        *
 567:/usr/include/c++/11/bits/stl_vector.h ****        *  The newly-created %vector contains the exact contents of the
 568:/usr/include/c++/11/bits/stl_vector.h ****        *  moved instance.
 569:/usr/include/c++/11/bits/stl_vector.h ****        *  The contents of the moved instance are a valid, but unspecified
 570:/usr/include/c++/11/bits/stl_vector.h ****        *  %vector.
 571:/usr/include/c++/11/bits/stl_vector.h ****        */
 572:/usr/include/c++/11/bits/stl_vector.h ****       vector(vector&&) noexcept = default;
 573:/usr/include/c++/11/bits/stl_vector.h **** 
 574:/usr/include/c++/11/bits/stl_vector.h ****       /// Copy constructor with alternative allocator
 575:/usr/include/c++/11/bits/stl_vector.h ****       vector(const vector& __x, const allocator_type& __a)
 576:/usr/include/c++/11/bits/stl_vector.h ****       : _Base(__x.size(), __a)
 577:/usr/include/c++/11/bits/stl_vector.h ****       {
 578:/usr/include/c++/11/bits/stl_vector.h **** 	this->_M_impl._M_finish =
 579:/usr/include/c++/11/bits/stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 580:/usr/include/c++/11/bits/stl_vector.h **** 				      this->_M_impl._M_start,
 581:/usr/include/c++/11/bits/stl_vector.h **** 				      _M_get_Tp_allocator());
 582:/usr/include/c++/11/bits/stl_vector.h ****       }
 583:/usr/include/c++/11/bits/stl_vector.h **** 
 584:/usr/include/c++/11/bits/stl_vector.h ****     private:
 585:/usr/include/c++/11/bits/stl_vector.h ****       vector(vector&& __rv, const allocator_type& __m, true_type) noexcept
 586:/usr/include/c++/11/bits/stl_vector.h ****       : _Base(__m, std::move(__rv))
 587:/usr/include/c++/11/bits/stl_vector.h ****       { }
 588:/usr/include/c++/11/bits/stl_vector.h **** 
 589:/usr/include/c++/11/bits/stl_vector.h ****       vector(vector&& __rv, const allocator_type& __m, false_type)
 590:/usr/include/c++/11/bits/stl_vector.h ****       : _Base(__m)
 591:/usr/include/c++/11/bits/stl_vector.h ****       {
 592:/usr/include/c++/11/bits/stl_vector.h **** 	if (__rv.get_allocator() == __m)
 593:/usr/include/c++/11/bits/stl_vector.h **** 	  this->_M_impl._M_swap_data(__rv._M_impl);
 594:/usr/include/c++/11/bits/stl_vector.h **** 	else if (!__rv.empty())
 595:/usr/include/c++/11/bits/stl_vector.h **** 	  {
 596:/usr/include/c++/11/bits/stl_vector.h **** 	    this->_M_create_storage(__rv.size());
 597:/usr/include/c++/11/bits/stl_vector.h **** 	    this->_M_impl._M_finish =
 598:/usr/include/c++/11/bits/stl_vector.h **** 	      std::__uninitialized_move_a(__rv.begin(), __rv.end(),
 599:/usr/include/c++/11/bits/stl_vector.h **** 					  this->_M_impl._M_start,
 600:/usr/include/c++/11/bits/stl_vector.h **** 					  _M_get_Tp_allocator());
 601:/usr/include/c++/11/bits/stl_vector.h **** 	    __rv.clear();
 602:/usr/include/c++/11/bits/stl_vector.h **** 	  }
 603:/usr/include/c++/11/bits/stl_vector.h ****       }
 604:/usr/include/c++/11/bits/stl_vector.h **** 
 605:/usr/include/c++/11/bits/stl_vector.h ****     public:
 606:/usr/include/c++/11/bits/stl_vector.h ****       /// Move constructor with alternative allocator
 607:/usr/include/c++/11/bits/stl_vector.h ****       vector(vector&& __rv, const allocator_type& __m)
 608:/usr/include/c++/11/bits/stl_vector.h ****       noexcept( noexcept(
 609:/usr/include/c++/11/bits/stl_vector.h **** 	vector(std::declval<vector&&>(), std::declval<const allocator_type&>(),
 610:/usr/include/c++/11/bits/stl_vector.h **** 	       std::declval<typename _Alloc_traits::is_always_equal>())) )
 611:/usr/include/c++/11/bits/stl_vector.h ****       : vector(std::move(__rv), __m, typename _Alloc_traits::is_always_equal{})
 612:/usr/include/c++/11/bits/stl_vector.h ****       { }
 613:/usr/include/c++/11/bits/stl_vector.h **** 
 614:/usr/include/c++/11/bits/stl_vector.h ****       /**
 615:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Builds a %vector from an initializer list.
 616:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 617:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __a  An allocator.
 618:/usr/include/c++/11/bits/stl_vector.h ****        *
 619:/usr/include/c++/11/bits/stl_vector.h ****        *  Create a %vector consisting of copies of the elements in the
 620:/usr/include/c++/11/bits/stl_vector.h ****        *  initializer_list @a __l.
 621:/usr/include/c++/11/bits/stl_vector.h ****        *
 622:/usr/include/c++/11/bits/stl_vector.h ****        *  This will call the element type's copy constructor N times
 623:/usr/include/c++/11/bits/stl_vector.h ****        *  (where N is @a __l.size()) and do no memory reallocation.
 624:/usr/include/c++/11/bits/stl_vector.h ****        */
 625:/usr/include/c++/11/bits/stl_vector.h ****       vector(initializer_list<value_type> __l,
 626:/usr/include/c++/11/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 627:/usr/include/c++/11/bits/stl_vector.h ****       : _Base(__a)
 628:/usr/include/c++/11/bits/stl_vector.h ****       {
 629:/usr/include/c++/11/bits/stl_vector.h **** 	_M_range_initialize(__l.begin(), __l.end(),
 630:/usr/include/c++/11/bits/stl_vector.h **** 			    random_access_iterator_tag());
 631:/usr/include/c++/11/bits/stl_vector.h ****       }
 632:/usr/include/c++/11/bits/stl_vector.h **** #endif
 633:/usr/include/c++/11/bits/stl_vector.h **** 
 634:/usr/include/c++/11/bits/stl_vector.h ****       /**
 635:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Builds a %vector from a range.
 636:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __first  An input iterator.
 637:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __last  An input iterator.
 638:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __a  An allocator.
 639:/usr/include/c++/11/bits/stl_vector.h ****        *
 640:/usr/include/c++/11/bits/stl_vector.h ****        *  Create a %vector consisting of copies of the elements from
 641:/usr/include/c++/11/bits/stl_vector.h ****        *  [first,last).
 642:/usr/include/c++/11/bits/stl_vector.h ****        *
 643:/usr/include/c++/11/bits/stl_vector.h ****        *  If the iterators are forward, bidirectional, or
 644:/usr/include/c++/11/bits/stl_vector.h ****        *  random-access, then this will call the elements' copy
 645:/usr/include/c++/11/bits/stl_vector.h ****        *  constructor N times (where N is distance(first,last)) and do
 646:/usr/include/c++/11/bits/stl_vector.h ****        *  no memory reallocation.  But if only input iterators are
 647:/usr/include/c++/11/bits/stl_vector.h ****        *  used, then this will do at most 2N calls to the copy
 648:/usr/include/c++/11/bits/stl_vector.h ****        *  constructor, and logN memory reallocations.
 649:/usr/include/c++/11/bits/stl_vector.h ****        */
 650:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
 651:/usr/include/c++/11/bits/stl_vector.h ****       template<typename _InputIterator,
 652:/usr/include/c++/11/bits/stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 653:/usr/include/c++/11/bits/stl_vector.h **** 	vector(_InputIterator __first, _InputIterator __last,
 654:/usr/include/c++/11/bits/stl_vector.h **** 	       const allocator_type& __a = allocator_type())
 655:/usr/include/c++/11/bits/stl_vector.h **** 	: _Base(__a)
 656:/usr/include/c++/11/bits/stl_vector.h **** 	{
 657:/usr/include/c++/11/bits/stl_vector.h **** 	  _M_range_initialize(__first, __last,
 658:/usr/include/c++/11/bits/stl_vector.h **** 			      std::__iterator_category(__first));
 659:/usr/include/c++/11/bits/stl_vector.h **** 	}
 660:/usr/include/c++/11/bits/stl_vector.h **** #else
 661:/usr/include/c++/11/bits/stl_vector.h ****       template<typename _InputIterator>
 662:/usr/include/c++/11/bits/stl_vector.h **** 	vector(_InputIterator __first, _InputIterator __last,
 663:/usr/include/c++/11/bits/stl_vector.h **** 	       const allocator_type& __a = allocator_type())
 664:/usr/include/c++/11/bits/stl_vector.h **** 	: _Base(__a)
 665:/usr/include/c++/11/bits/stl_vector.h **** 	{
 666:/usr/include/c++/11/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 667:/usr/include/c++/11/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 668:/usr/include/c++/11/bits/stl_vector.h **** 	  _M_initialize_dispatch(__first, __last, _Integral());
 669:/usr/include/c++/11/bits/stl_vector.h **** 	}
 670:/usr/include/c++/11/bits/stl_vector.h **** #endif
 671:/usr/include/c++/11/bits/stl_vector.h **** 
 672:/usr/include/c++/11/bits/stl_vector.h ****       /**
 673:/usr/include/c++/11/bits/stl_vector.h ****        *  The dtor only erases the elements, and note that if the
 674:/usr/include/c++/11/bits/stl_vector.h ****        *  elements themselves are pointers, the pointed-to memory is
 675:/usr/include/c++/11/bits/stl_vector.h ****        *  not touched in any way.  Managing the pointer is the user's
 676:/usr/include/c++/11/bits/stl_vector.h ****        *  responsibility.
 677:/usr/include/c++/11/bits/stl_vector.h ****        */
 678:/usr/include/c++/11/bits/stl_vector.h ****       ~vector() _GLIBCXX_NOEXCEPT
 5442              		.loc 8 678 7
 5443              		.cfi_startproc
 5444              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 5445              		.cfi_lsda 0x1b,.LLSDA1543
 5446 0000 F30F1EFA 		endbr64
 5447 0004 55       		pushq	%rbp
 5448              		.cfi_def_cfa_offset 16
 5449              		.cfi_offset 6, -16
 5450 0005 4889E5   		movq	%rsp, %rbp
 5451              		.cfi_def_cfa_register 6
 5452 0008 53       		pushq	%rbx
 5453 0009 4883EC18 		subq	$24, %rsp
 5454              		.cfi_offset 3, -24
 5455 000d 48897DE8 		movq	%rdi, -24(%rbp)
 5456              	.LBB81:
 679:/usr/include/c++/11/bits/stl_vector.h ****       {
 680:/usr/include/c++/11/bits/stl_vector.h **** 	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 681:/usr/include/c++/11/bits/stl_vector.h **** 		      _M_get_Tp_allocator());
 5457              		.loc 8 681 28
 5458 0011 488B45E8 		movq	-24(%rbp), %rax
 5459 0015 4889C7   		movq	%rax, %rdi
 5460 0018 E8000000 		call	_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv
 5460      00
 5461 001d 4889C2   		movq	%rax, %rdx
 680:/usr/include/c++/11/bits/stl_vector.h **** 		      _M_get_Tp_allocator());
 5462              		.loc 8 680 15
 5463 0020 488B45E8 		movq	-24(%rbp), %rax
 5464 0024 488B4808 		movq	8(%rax), %rcx
 5465 0028 488B45E8 		movq	-24(%rbp), %rax
 5466 002c 488B00   		movq	(%rax), %rax
 5467 002f 4889CE   		movq	%rcx, %rsi
 5468 0032 4889C7   		movq	%rax, %rdi
 5469              	.LEHB117:
 5470 0035 E8000000 		call	_ZSt8_DestroyIPffEvT_S1_RSaIT0_E
 5470      00
 5471              	.LEHE117:
 682:/usr/include/c++/11/bits/stl_vector.h **** 	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
 683:/usr/include/c++/11/bits/stl_vector.h ****       }
 5472              		.loc 8 683 7
 5473 003a 488B45E8 		movq	-24(%rbp), %rax
 5474 003e 4889C7   		movq	%rax, %rdi
 5475              	.LEHB118:
 5476 0041 E8000000 		call	_ZNSt12_Vector_baseIfSaIfEED2Ev
 5476      00
 5477              	.LEHE118:
 5478              	.LBE81:
 5479 0046 EB1E     		jmp	.L259
 5480              	.L258:
 5481 0048 F30F1EFA 		endbr64
 5482              	.LBB82:
 5483 004c 4889C3   		movq	%rax, %rbx
 5484 004f 488B45E8 		movq	-24(%rbp), %rax
 5485 0053 4889C7   		movq	%rax, %rdi
 5486 0056 E8000000 		call	_ZNSt12_Vector_baseIfSaIfEED2Ev
 5486      00
 5487 005b 4889D8   		movq	%rbx, %rax
 5488 005e 4889C7   		movq	%rax, %rdi
 5489              	.LEHB119:
 5490 0061 E8000000 		call	_Unwind_Resume@PLT
 5490      00
 5491              	.LEHE119:
 5492              	.L259:
 5493              	.LBE82:
 5494 0066 488B5DF8 		movq	-8(%rbp), %rbx
 5495 006a C9       		leave
 5496              		.cfi_def_cfa 7, 8
 5497 006b C3       		ret
 5498              		.cfi_endproc
 5499              	.LFE1543:
 5500              		.section	.gcc_except_table
 5501              	.LLSDA1543:
 5502 0359 FF       		.byte	0xff
 5503 035a FF       		.byte	0xff
 5504 035b 01       		.byte	0x1
 5505 035c 0C       		.uleb128 .LLSDACSE1543-.LLSDACSB1543
 5506              	.LLSDACSB1543:
 5507 035d 35       		.uleb128 .LEHB117-.LFB1543
 5508 035e 05       		.uleb128 .LEHE117-.LEHB117
 5509 035f 48       		.uleb128 .L258-.LFB1543
 5510 0360 00       		.uleb128 0
 5511 0361 41       		.uleb128 .LEHB118-.LFB1543
 5512 0362 05       		.uleb128 .LEHE118-.LEHB118
 5513 0363 00       		.uleb128 0
 5514 0364 00       		.uleb128 0
 5515 0365 61       		.uleb128 .LEHB119-.LFB1543
 5516 0366 05       		.uleb128 .LEHE119-.LEHB119
 5517 0367 00       		.uleb128 0
 5518 0368 00       		.uleb128 0
 5519              	.LLSDACSE1543:
 5520              		.section	.text._ZNSt6vectorIfSaIfEED2Ev,"axG",@progbits,_ZNSt6vectorIfSaIfEED5Ev,comdat
 5522              		.weak	_ZNSt6vectorIfSaIfEED1Ev
 5523              		.set	_ZNSt6vectorIfSaIfEED1Ev,_ZNSt6vectorIfSaIfEED2Ev
 5524              		.section	.text._ZNSt6vectorIfSaIfEEixEm,"axG",@progbits,_ZNSt6vectorIfSaIfEEixEm,comdat
 5525              		.align 2
 5526              		.weak	_ZNSt6vectorIfSaIfEEixEm
 5528              	_ZNSt6vectorIfSaIfEEixEm:
 5529              	.LFB1545:
 684:/usr/include/c++/11/bits/stl_vector.h **** 
 685:/usr/include/c++/11/bits/stl_vector.h ****       /**
 686:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  %Vector assignment operator.
 687:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 688:/usr/include/c++/11/bits/stl_vector.h ****        *
 689:/usr/include/c++/11/bits/stl_vector.h ****        *  All the elements of @a __x are copied, but any unused capacity in
 690:/usr/include/c++/11/bits/stl_vector.h ****        *  @a __x will not be copied.
 691:/usr/include/c++/11/bits/stl_vector.h ****        *
 692:/usr/include/c++/11/bits/stl_vector.h ****        *  Whether the allocator is copied depends on the allocator traits.
 693:/usr/include/c++/11/bits/stl_vector.h ****        */
 694:/usr/include/c++/11/bits/stl_vector.h ****       vector&
 695:/usr/include/c++/11/bits/stl_vector.h ****       operator=(const vector& __x);
 696:/usr/include/c++/11/bits/stl_vector.h **** 
 697:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
 698:/usr/include/c++/11/bits/stl_vector.h ****       /**
 699:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  %Vector move assignment operator.
 700:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 701:/usr/include/c++/11/bits/stl_vector.h ****        *
 702:/usr/include/c++/11/bits/stl_vector.h ****        *  The contents of @a __x are moved into this %vector (without copying,
 703:/usr/include/c++/11/bits/stl_vector.h ****        *  if the allocators permit it).
 704:/usr/include/c++/11/bits/stl_vector.h ****        *  Afterwards @a __x is a valid, but unspecified %vector.
 705:/usr/include/c++/11/bits/stl_vector.h ****        *
 706:/usr/include/c++/11/bits/stl_vector.h ****        *  Whether the allocator is moved depends on the allocator traits.
 707:/usr/include/c++/11/bits/stl_vector.h ****        */
 708:/usr/include/c++/11/bits/stl_vector.h ****       vector&
 709:/usr/include/c++/11/bits/stl_vector.h ****       operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 710:/usr/include/c++/11/bits/stl_vector.h ****       {
 711:/usr/include/c++/11/bits/stl_vector.h **** 	constexpr bool __move_storage =
 712:/usr/include/c++/11/bits/stl_vector.h **** 	  _Alloc_traits::_S_propagate_on_move_assign()
 713:/usr/include/c++/11/bits/stl_vector.h **** 	  || _Alloc_traits::_S_always_equal();
 714:/usr/include/c++/11/bits/stl_vector.h **** 	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 715:/usr/include/c++/11/bits/stl_vector.h **** 	return *this;
 716:/usr/include/c++/11/bits/stl_vector.h ****       }
 717:/usr/include/c++/11/bits/stl_vector.h **** 
 718:/usr/include/c++/11/bits/stl_vector.h ****       /**
 719:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  %Vector list assignment operator.
 720:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 721:/usr/include/c++/11/bits/stl_vector.h ****        *
 722:/usr/include/c++/11/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 723:/usr/include/c++/11/bits/stl_vector.h ****        *  initializer list @a __l.
 724:/usr/include/c++/11/bits/stl_vector.h ****        *
 725:/usr/include/c++/11/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 726:/usr/include/c++/11/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 727:/usr/include/c++/11/bits/stl_vector.h ****        *  of elements assigned.
 728:/usr/include/c++/11/bits/stl_vector.h ****        */
 729:/usr/include/c++/11/bits/stl_vector.h ****       vector&
 730:/usr/include/c++/11/bits/stl_vector.h ****       operator=(initializer_list<value_type> __l)
 731:/usr/include/c++/11/bits/stl_vector.h ****       {
 732:/usr/include/c++/11/bits/stl_vector.h **** 	this->_M_assign_aux(__l.begin(), __l.end(),
 733:/usr/include/c++/11/bits/stl_vector.h **** 			    random_access_iterator_tag());
 734:/usr/include/c++/11/bits/stl_vector.h **** 	return *this;
 735:/usr/include/c++/11/bits/stl_vector.h ****       }
 736:/usr/include/c++/11/bits/stl_vector.h **** #endif
 737:/usr/include/c++/11/bits/stl_vector.h **** 
 738:/usr/include/c++/11/bits/stl_vector.h ****       /**
 739:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Assigns a given value to a %vector.
 740:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __n  Number of elements to be assigned.
 741:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __val  Value to be assigned.
 742:/usr/include/c++/11/bits/stl_vector.h ****        *
 743:/usr/include/c++/11/bits/stl_vector.h ****        *  This function fills a %vector with @a __n copies of the given
 744:/usr/include/c++/11/bits/stl_vector.h ****        *  value.  Note that the assignment completely changes the
 745:/usr/include/c++/11/bits/stl_vector.h ****        *  %vector and that the resulting %vector's size is the same as
 746:/usr/include/c++/11/bits/stl_vector.h ****        *  the number of elements assigned.
 747:/usr/include/c++/11/bits/stl_vector.h ****        */
 748:/usr/include/c++/11/bits/stl_vector.h ****       void
 749:/usr/include/c++/11/bits/stl_vector.h ****       assign(size_type __n, const value_type& __val)
 750:/usr/include/c++/11/bits/stl_vector.h ****       { _M_fill_assign(__n, __val); }
 751:/usr/include/c++/11/bits/stl_vector.h **** 
 752:/usr/include/c++/11/bits/stl_vector.h ****       /**
 753:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Assigns a range to a %vector.
 754:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __first  An input iterator.
 755:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __last   An input iterator.
 756:/usr/include/c++/11/bits/stl_vector.h ****        *
 757:/usr/include/c++/11/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 758:/usr/include/c++/11/bits/stl_vector.h ****        *  range [__first,__last).
 759:/usr/include/c++/11/bits/stl_vector.h ****        *
 760:/usr/include/c++/11/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 761:/usr/include/c++/11/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 762:/usr/include/c++/11/bits/stl_vector.h ****        *  of elements assigned.
 763:/usr/include/c++/11/bits/stl_vector.h ****        */
 764:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
 765:/usr/include/c++/11/bits/stl_vector.h ****       template<typename _InputIterator,
 766:/usr/include/c++/11/bits/stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 767:/usr/include/c++/11/bits/stl_vector.h **** 	void
 768:/usr/include/c++/11/bits/stl_vector.h **** 	assign(_InputIterator __first, _InputIterator __last)
 769:/usr/include/c++/11/bits/stl_vector.h **** 	{ _M_assign_dispatch(__first, __last, __false_type()); }
 770:/usr/include/c++/11/bits/stl_vector.h **** #else
 771:/usr/include/c++/11/bits/stl_vector.h ****       template<typename _InputIterator>
 772:/usr/include/c++/11/bits/stl_vector.h **** 	void
 773:/usr/include/c++/11/bits/stl_vector.h **** 	assign(_InputIterator __first, _InputIterator __last)
 774:/usr/include/c++/11/bits/stl_vector.h **** 	{
 775:/usr/include/c++/11/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 776:/usr/include/c++/11/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 777:/usr/include/c++/11/bits/stl_vector.h **** 	  _M_assign_dispatch(__first, __last, _Integral());
 778:/usr/include/c++/11/bits/stl_vector.h **** 	}
 779:/usr/include/c++/11/bits/stl_vector.h **** #endif
 780:/usr/include/c++/11/bits/stl_vector.h **** 
 781:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
 782:/usr/include/c++/11/bits/stl_vector.h ****       /**
 783:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Assigns an initializer list to a %vector.
 784:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 785:/usr/include/c++/11/bits/stl_vector.h ****        *
 786:/usr/include/c++/11/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 787:/usr/include/c++/11/bits/stl_vector.h ****        *  initializer list @a __l.
 788:/usr/include/c++/11/bits/stl_vector.h ****        *
 789:/usr/include/c++/11/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 790:/usr/include/c++/11/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 791:/usr/include/c++/11/bits/stl_vector.h ****        *  of elements assigned.
 792:/usr/include/c++/11/bits/stl_vector.h ****        */
 793:/usr/include/c++/11/bits/stl_vector.h ****       void
 794:/usr/include/c++/11/bits/stl_vector.h ****       assign(initializer_list<value_type> __l)
 795:/usr/include/c++/11/bits/stl_vector.h ****       {
 796:/usr/include/c++/11/bits/stl_vector.h **** 	this->_M_assign_aux(__l.begin(), __l.end(),
 797:/usr/include/c++/11/bits/stl_vector.h **** 			    random_access_iterator_tag());
 798:/usr/include/c++/11/bits/stl_vector.h ****       }
 799:/usr/include/c++/11/bits/stl_vector.h **** #endif
 800:/usr/include/c++/11/bits/stl_vector.h **** 
 801:/usr/include/c++/11/bits/stl_vector.h ****       /// Get a copy of the memory allocation object.
 802:/usr/include/c++/11/bits/stl_vector.h ****       using _Base::get_allocator;
 803:/usr/include/c++/11/bits/stl_vector.h **** 
 804:/usr/include/c++/11/bits/stl_vector.h ****       // iterators
 805:/usr/include/c++/11/bits/stl_vector.h ****       /**
 806:/usr/include/c++/11/bits/stl_vector.h ****        *  Returns a read/write iterator that points to the first
 807:/usr/include/c++/11/bits/stl_vector.h ****        *  element in the %vector.  Iteration is done in ordinary
 808:/usr/include/c++/11/bits/stl_vector.h ****        *  element order.
 809:/usr/include/c++/11/bits/stl_vector.h ****        */
 810:/usr/include/c++/11/bits/stl_vector.h ****       iterator
 811:/usr/include/c++/11/bits/stl_vector.h ****       begin() _GLIBCXX_NOEXCEPT
 812:/usr/include/c++/11/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_start); }
 813:/usr/include/c++/11/bits/stl_vector.h **** 
 814:/usr/include/c++/11/bits/stl_vector.h ****       /**
 815:/usr/include/c++/11/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points to the
 816:/usr/include/c++/11/bits/stl_vector.h ****        *  first element in the %vector.  Iteration is done in ordinary
 817:/usr/include/c++/11/bits/stl_vector.h ****        *  element order.
 818:/usr/include/c++/11/bits/stl_vector.h ****        */
 819:/usr/include/c++/11/bits/stl_vector.h ****       const_iterator
 820:/usr/include/c++/11/bits/stl_vector.h ****       begin() const _GLIBCXX_NOEXCEPT
 821:/usr/include/c++/11/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 822:/usr/include/c++/11/bits/stl_vector.h **** 
 823:/usr/include/c++/11/bits/stl_vector.h ****       /**
 824:/usr/include/c++/11/bits/stl_vector.h ****        *  Returns a read/write iterator that points one past the last
 825:/usr/include/c++/11/bits/stl_vector.h ****        *  element in the %vector.  Iteration is done in ordinary
 826:/usr/include/c++/11/bits/stl_vector.h ****        *  element order.
 827:/usr/include/c++/11/bits/stl_vector.h ****        */
 828:/usr/include/c++/11/bits/stl_vector.h ****       iterator
 829:/usr/include/c++/11/bits/stl_vector.h ****       end() _GLIBCXX_NOEXCEPT
 830:/usr/include/c++/11/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 831:/usr/include/c++/11/bits/stl_vector.h **** 
 832:/usr/include/c++/11/bits/stl_vector.h ****       /**
 833:/usr/include/c++/11/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points one past
 834:/usr/include/c++/11/bits/stl_vector.h ****        *  the last element in the %vector.  Iteration is done in
 835:/usr/include/c++/11/bits/stl_vector.h ****        *  ordinary element order.
 836:/usr/include/c++/11/bits/stl_vector.h ****        */
 837:/usr/include/c++/11/bits/stl_vector.h ****       const_iterator
 838:/usr/include/c++/11/bits/stl_vector.h ****       end() const _GLIBCXX_NOEXCEPT
 839:/usr/include/c++/11/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 840:/usr/include/c++/11/bits/stl_vector.h **** 
 841:/usr/include/c++/11/bits/stl_vector.h ****       /**
 842:/usr/include/c++/11/bits/stl_vector.h ****        *  Returns a read/write reverse iterator that points to the
 843:/usr/include/c++/11/bits/stl_vector.h ****        *  last element in the %vector.  Iteration is done in reverse
 844:/usr/include/c++/11/bits/stl_vector.h ****        *  element order.
 845:/usr/include/c++/11/bits/stl_vector.h ****        */
 846:/usr/include/c++/11/bits/stl_vector.h ****       reverse_iterator
 847:/usr/include/c++/11/bits/stl_vector.h ****       rbegin() _GLIBCXX_NOEXCEPT
 848:/usr/include/c++/11/bits/stl_vector.h ****       { return reverse_iterator(end()); }
 849:/usr/include/c++/11/bits/stl_vector.h **** 
 850:/usr/include/c++/11/bits/stl_vector.h ****       /**
 851:/usr/include/c++/11/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 852:/usr/include/c++/11/bits/stl_vector.h ****        *  to the last element in the %vector.  Iteration is done in
 853:/usr/include/c++/11/bits/stl_vector.h ****        *  reverse element order.
 854:/usr/include/c++/11/bits/stl_vector.h ****        */
 855:/usr/include/c++/11/bits/stl_vector.h ****       const_reverse_iterator
 856:/usr/include/c++/11/bits/stl_vector.h ****       rbegin() const _GLIBCXX_NOEXCEPT
 857:/usr/include/c++/11/bits/stl_vector.h ****       { return const_reverse_iterator(end()); }
 858:/usr/include/c++/11/bits/stl_vector.h **** 
 859:/usr/include/c++/11/bits/stl_vector.h ****       /**
 860:/usr/include/c++/11/bits/stl_vector.h ****        *  Returns a read/write reverse iterator that points to one
 861:/usr/include/c++/11/bits/stl_vector.h ****        *  before the first element in the %vector.  Iteration is done
 862:/usr/include/c++/11/bits/stl_vector.h ****        *  in reverse element order.
 863:/usr/include/c++/11/bits/stl_vector.h ****        */
 864:/usr/include/c++/11/bits/stl_vector.h ****       reverse_iterator
 865:/usr/include/c++/11/bits/stl_vector.h ****       rend() _GLIBCXX_NOEXCEPT
 866:/usr/include/c++/11/bits/stl_vector.h ****       { return reverse_iterator(begin()); }
 867:/usr/include/c++/11/bits/stl_vector.h **** 
 868:/usr/include/c++/11/bits/stl_vector.h ****       /**
 869:/usr/include/c++/11/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 870:/usr/include/c++/11/bits/stl_vector.h ****        *  to one before the first element in the %vector.  Iteration
 871:/usr/include/c++/11/bits/stl_vector.h ****        *  is done in reverse element order.
 872:/usr/include/c++/11/bits/stl_vector.h ****        */
 873:/usr/include/c++/11/bits/stl_vector.h ****       const_reverse_iterator
 874:/usr/include/c++/11/bits/stl_vector.h ****       rend() const _GLIBCXX_NOEXCEPT
 875:/usr/include/c++/11/bits/stl_vector.h ****       { return const_reverse_iterator(begin()); }
 876:/usr/include/c++/11/bits/stl_vector.h **** 
 877:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
 878:/usr/include/c++/11/bits/stl_vector.h ****       /**
 879:/usr/include/c++/11/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points to the
 880:/usr/include/c++/11/bits/stl_vector.h ****        *  first element in the %vector.  Iteration is done in ordinary
 881:/usr/include/c++/11/bits/stl_vector.h ****        *  element order.
 882:/usr/include/c++/11/bits/stl_vector.h ****        */
 883:/usr/include/c++/11/bits/stl_vector.h ****       const_iterator
 884:/usr/include/c++/11/bits/stl_vector.h ****       cbegin() const noexcept
 885:/usr/include/c++/11/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 886:/usr/include/c++/11/bits/stl_vector.h **** 
 887:/usr/include/c++/11/bits/stl_vector.h ****       /**
 888:/usr/include/c++/11/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points one past
 889:/usr/include/c++/11/bits/stl_vector.h ****        *  the last element in the %vector.  Iteration is done in
 890:/usr/include/c++/11/bits/stl_vector.h ****        *  ordinary element order.
 891:/usr/include/c++/11/bits/stl_vector.h ****        */
 892:/usr/include/c++/11/bits/stl_vector.h ****       const_iterator
 893:/usr/include/c++/11/bits/stl_vector.h ****       cend() const noexcept
 894:/usr/include/c++/11/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 895:/usr/include/c++/11/bits/stl_vector.h **** 
 896:/usr/include/c++/11/bits/stl_vector.h ****       /**
 897:/usr/include/c++/11/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 898:/usr/include/c++/11/bits/stl_vector.h ****        *  to the last element in the %vector.  Iteration is done in
 899:/usr/include/c++/11/bits/stl_vector.h ****        *  reverse element order.
 900:/usr/include/c++/11/bits/stl_vector.h ****        */
 901:/usr/include/c++/11/bits/stl_vector.h ****       const_reverse_iterator
 902:/usr/include/c++/11/bits/stl_vector.h ****       crbegin() const noexcept
 903:/usr/include/c++/11/bits/stl_vector.h ****       { return const_reverse_iterator(end()); }
 904:/usr/include/c++/11/bits/stl_vector.h **** 
 905:/usr/include/c++/11/bits/stl_vector.h ****       /**
 906:/usr/include/c++/11/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 907:/usr/include/c++/11/bits/stl_vector.h ****        *  to one before the first element in the %vector.  Iteration
 908:/usr/include/c++/11/bits/stl_vector.h ****        *  is done in reverse element order.
 909:/usr/include/c++/11/bits/stl_vector.h ****        */
 910:/usr/include/c++/11/bits/stl_vector.h ****       const_reverse_iterator
 911:/usr/include/c++/11/bits/stl_vector.h ****       crend() const noexcept
 912:/usr/include/c++/11/bits/stl_vector.h ****       { return const_reverse_iterator(begin()); }
 913:/usr/include/c++/11/bits/stl_vector.h **** #endif
 914:/usr/include/c++/11/bits/stl_vector.h **** 
 915:/usr/include/c++/11/bits/stl_vector.h ****       // [23.2.4.2] capacity
 916:/usr/include/c++/11/bits/stl_vector.h ****       /**  Returns the number of elements in the %vector.  */
 917:/usr/include/c++/11/bits/stl_vector.h ****       size_type
 918:/usr/include/c++/11/bits/stl_vector.h ****       size() const _GLIBCXX_NOEXCEPT
 919:/usr/include/c++/11/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 920:/usr/include/c++/11/bits/stl_vector.h **** 
 921:/usr/include/c++/11/bits/stl_vector.h ****       /**  Returns the size() of the largest possible %vector.  */
 922:/usr/include/c++/11/bits/stl_vector.h ****       size_type
 923:/usr/include/c++/11/bits/stl_vector.h ****       max_size() const _GLIBCXX_NOEXCEPT
 924:/usr/include/c++/11/bits/stl_vector.h ****       { return _S_max_size(_M_get_Tp_allocator()); }
 925:/usr/include/c++/11/bits/stl_vector.h **** 
 926:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
 927:/usr/include/c++/11/bits/stl_vector.h ****       /**
 928:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 929:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __new_size  Number of elements the %vector should contain.
 930:/usr/include/c++/11/bits/stl_vector.h ****        *
 931:/usr/include/c++/11/bits/stl_vector.h ****        *  This function will %resize the %vector to the specified
 932:/usr/include/c++/11/bits/stl_vector.h ****        *  number of elements.  If the number is smaller than the
 933:/usr/include/c++/11/bits/stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 934:/usr/include/c++/11/bits/stl_vector.h ****        *  default constructed elements are appended.
 935:/usr/include/c++/11/bits/stl_vector.h ****        */
 936:/usr/include/c++/11/bits/stl_vector.h ****       void
 937:/usr/include/c++/11/bits/stl_vector.h ****       resize(size_type __new_size)
 938:/usr/include/c++/11/bits/stl_vector.h ****       {
 939:/usr/include/c++/11/bits/stl_vector.h **** 	if (__new_size > size())
 940:/usr/include/c++/11/bits/stl_vector.h **** 	  _M_default_append(__new_size - size());
 941:/usr/include/c++/11/bits/stl_vector.h **** 	else if (__new_size < size())
 942:/usr/include/c++/11/bits/stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 943:/usr/include/c++/11/bits/stl_vector.h ****       }
 944:/usr/include/c++/11/bits/stl_vector.h **** 
 945:/usr/include/c++/11/bits/stl_vector.h ****       /**
 946:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 947:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __new_size  Number of elements the %vector should contain.
 948:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __x  Data with which new elements should be populated.
 949:/usr/include/c++/11/bits/stl_vector.h ****        *
 950:/usr/include/c++/11/bits/stl_vector.h ****        *  This function will %resize the %vector to the specified
 951:/usr/include/c++/11/bits/stl_vector.h ****        *  number of elements.  If the number is smaller than the
 952:/usr/include/c++/11/bits/stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 953:/usr/include/c++/11/bits/stl_vector.h ****        *  the %vector is extended and new elements are populated with
 954:/usr/include/c++/11/bits/stl_vector.h ****        *  given data.
 955:/usr/include/c++/11/bits/stl_vector.h ****        */
 956:/usr/include/c++/11/bits/stl_vector.h ****       void
 957:/usr/include/c++/11/bits/stl_vector.h ****       resize(size_type __new_size, const value_type& __x)
 958:/usr/include/c++/11/bits/stl_vector.h ****       {
 959:/usr/include/c++/11/bits/stl_vector.h **** 	if (__new_size > size())
 960:/usr/include/c++/11/bits/stl_vector.h **** 	  _M_fill_insert(end(), __new_size - size(), __x);
 961:/usr/include/c++/11/bits/stl_vector.h **** 	else if (__new_size < size())
 962:/usr/include/c++/11/bits/stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 963:/usr/include/c++/11/bits/stl_vector.h ****       }
 964:/usr/include/c++/11/bits/stl_vector.h **** #else
 965:/usr/include/c++/11/bits/stl_vector.h ****       /**
 966:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 967:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __new_size  Number of elements the %vector should contain.
 968:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __x  Data with which new elements should be populated.
 969:/usr/include/c++/11/bits/stl_vector.h ****        *
 970:/usr/include/c++/11/bits/stl_vector.h ****        *  This function will %resize the %vector to the specified
 971:/usr/include/c++/11/bits/stl_vector.h ****        *  number of elements.  If the number is smaller than the
 972:/usr/include/c++/11/bits/stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 973:/usr/include/c++/11/bits/stl_vector.h ****        *  the %vector is extended and new elements are populated with
 974:/usr/include/c++/11/bits/stl_vector.h ****        *  given data.
 975:/usr/include/c++/11/bits/stl_vector.h ****        */
 976:/usr/include/c++/11/bits/stl_vector.h ****       void
 977:/usr/include/c++/11/bits/stl_vector.h ****       resize(size_type __new_size, value_type __x = value_type())
 978:/usr/include/c++/11/bits/stl_vector.h ****       {
 979:/usr/include/c++/11/bits/stl_vector.h **** 	if (__new_size > size())
 980:/usr/include/c++/11/bits/stl_vector.h **** 	  _M_fill_insert(end(), __new_size - size(), __x);
 981:/usr/include/c++/11/bits/stl_vector.h **** 	else if (__new_size < size())
 982:/usr/include/c++/11/bits/stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 983:/usr/include/c++/11/bits/stl_vector.h ****       }
 984:/usr/include/c++/11/bits/stl_vector.h **** #endif
 985:/usr/include/c++/11/bits/stl_vector.h **** 
 986:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
 987:/usr/include/c++/11/bits/stl_vector.h ****       /**  A non-binding request to reduce capacity() to size().  */
 988:/usr/include/c++/11/bits/stl_vector.h ****       void
 989:/usr/include/c++/11/bits/stl_vector.h ****       shrink_to_fit()
 990:/usr/include/c++/11/bits/stl_vector.h ****       { _M_shrink_to_fit(); }
 991:/usr/include/c++/11/bits/stl_vector.h **** #endif
 992:/usr/include/c++/11/bits/stl_vector.h **** 
 993:/usr/include/c++/11/bits/stl_vector.h ****       /**
 994:/usr/include/c++/11/bits/stl_vector.h ****        *  Returns the total number of elements that the %vector can
 995:/usr/include/c++/11/bits/stl_vector.h ****        *  hold before needing to allocate more memory.
 996:/usr/include/c++/11/bits/stl_vector.h ****        */
 997:/usr/include/c++/11/bits/stl_vector.h ****       size_type
 998:/usr/include/c++/11/bits/stl_vector.h ****       capacity() const _GLIBCXX_NOEXCEPT
 999:/usr/include/c++/11/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_end_of_storage
1000:/usr/include/c++/11/bits/stl_vector.h **** 			 - this->_M_impl._M_start); }
1001:/usr/include/c++/11/bits/stl_vector.h **** 
1002:/usr/include/c++/11/bits/stl_vector.h ****       /**
1003:/usr/include/c++/11/bits/stl_vector.h ****        *  Returns true if the %vector is empty.  (Thus begin() would
1004:/usr/include/c++/11/bits/stl_vector.h ****        *  equal end().)
1005:/usr/include/c++/11/bits/stl_vector.h ****        */
1006:/usr/include/c++/11/bits/stl_vector.h ****       _GLIBCXX_NODISCARD bool
1007:/usr/include/c++/11/bits/stl_vector.h ****       empty() const _GLIBCXX_NOEXCEPT
1008:/usr/include/c++/11/bits/stl_vector.h ****       { return begin() == end(); }
1009:/usr/include/c++/11/bits/stl_vector.h **** 
1010:/usr/include/c++/11/bits/stl_vector.h ****       /**
1011:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Attempt to preallocate enough memory for specified number of
1012:/usr/include/c++/11/bits/stl_vector.h ****        *          elements.
1013:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __n  Number of elements required.
1014:/usr/include/c++/11/bits/stl_vector.h ****        *  @throw  std::length_error  If @a n exceeds @c max_size().
1015:/usr/include/c++/11/bits/stl_vector.h ****        *
1016:/usr/include/c++/11/bits/stl_vector.h ****        *  This function attempts to reserve enough memory for the
1017:/usr/include/c++/11/bits/stl_vector.h ****        *  %vector to hold the specified number of elements.  If the
1018:/usr/include/c++/11/bits/stl_vector.h ****        *  number requested is more than max_size(), length_error is
1019:/usr/include/c++/11/bits/stl_vector.h ****        *  thrown.
1020:/usr/include/c++/11/bits/stl_vector.h ****        *
1021:/usr/include/c++/11/bits/stl_vector.h ****        *  The advantage of this function is that if optimal code is a
1022:/usr/include/c++/11/bits/stl_vector.h ****        *  necessity and the user can determine the number of elements
1023:/usr/include/c++/11/bits/stl_vector.h ****        *  that will be required, the user can reserve the memory in
1024:/usr/include/c++/11/bits/stl_vector.h ****        *  %advance, and thus prevent a possible reallocation of memory
1025:/usr/include/c++/11/bits/stl_vector.h ****        *  and copying of %vector data.
1026:/usr/include/c++/11/bits/stl_vector.h ****        */
1027:/usr/include/c++/11/bits/stl_vector.h ****       void
1028:/usr/include/c++/11/bits/stl_vector.h ****       reserve(size_type __n);
1029:/usr/include/c++/11/bits/stl_vector.h **** 
1030:/usr/include/c++/11/bits/stl_vector.h ****       // element access
1031:/usr/include/c++/11/bits/stl_vector.h ****       /**
1032:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Subscript access to the data contained in the %vector.
1033:/usr/include/c++/11/bits/stl_vector.h ****        *  @param __n The index of the element for which data should be
1034:/usr/include/c++/11/bits/stl_vector.h ****        *  accessed.
1035:/usr/include/c++/11/bits/stl_vector.h ****        *  @return  Read/write reference to data.
1036:/usr/include/c++/11/bits/stl_vector.h ****        *
1037:/usr/include/c++/11/bits/stl_vector.h ****        *  This operator allows for easy, array-style, data access.
1038:/usr/include/c++/11/bits/stl_vector.h ****        *  Note that data access with this operator is unchecked and
1039:/usr/include/c++/11/bits/stl_vector.h ****        *  out_of_range lookups are not defined. (For checked lookups
1040:/usr/include/c++/11/bits/stl_vector.h ****        *  see at().)
1041:/usr/include/c++/11/bits/stl_vector.h ****        */
1042:/usr/include/c++/11/bits/stl_vector.h ****       reference
1043:/usr/include/c++/11/bits/stl_vector.h ****       operator[](size_type __n) _GLIBCXX_NOEXCEPT
 5530              		.loc 8 1043 7
 5531              		.cfi_startproc
 5532 0000 F30F1EFA 		endbr64
 5533 0004 55       		pushq	%rbp
 5534              		.cfi_def_cfa_offset 16
 5535              		.cfi_offset 6, -16
 5536 0005 4889E5   		movq	%rsp, %rbp
 5537              		.cfi_def_cfa_register 6
 5538 0008 48897DF8 		movq	%rdi, -8(%rbp)
 5539 000c 488975F0 		movq	%rsi, -16(%rbp)
1044:/usr/include/c++/11/bits/stl_vector.h ****       {
1045:/usr/include/c++/11/bits/stl_vector.h **** 	__glibcxx_requires_subscript(__n);
1046:/usr/include/c++/11/bits/stl_vector.h **** 	return *(this->_M_impl._M_start + __n);
 5540              		.loc 8 1046 25
 5541 0010 488B45F8 		movq	-8(%rbp), %rax
 5542 0014 488B10   		movq	(%rax), %rdx
 5543              		.loc 8 1046 34
 5544 0017 488B45F0 		movq	-16(%rbp), %rax
 5545 001b 48C1E002 		salq	$2, %rax
 5546              		.loc 8 1046 39
 5547 001f 4801D0   		addq	%rdx, %rax
1047:/usr/include/c++/11/bits/stl_vector.h ****       }
 5548              		.loc 8 1047 7
 5549 0022 5D       		popq	%rbp
 5550              		.cfi_def_cfa 7, 8
 5551 0023 C3       		ret
 5552              		.cfi_endproc
 5553              	.LFE1545:
 5555              		.section	.text._ZNKSt6vectorIfSaIfEE4sizeEv,"axG",@progbits,_ZNKSt6vectorIfSaIfEE4sizeEv,comdat
 5556              		.align 2
 5557              		.weak	_ZNKSt6vectorIfSaIfEE4sizeEv
 5559              	_ZNKSt6vectorIfSaIfEE4sizeEv:
 5560              	.LFB1546:
 918:/usr/include/c++/11/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 5561              		.loc 8 918 7
 5562              		.cfi_startproc
 5563 0000 F30F1EFA 		endbr64
 5564 0004 55       		pushq	%rbp
 5565              		.cfi_def_cfa_offset 16
 5566              		.cfi_offset 6, -16
 5567 0005 4889E5   		movq	%rsp, %rbp
 5568              		.cfi_def_cfa_register 6
 5569 0008 48897DF8 		movq	%rdi, -8(%rbp)
 919:/usr/include/c++/11/bits/stl_vector.h **** 
 5570              		.loc 8 919 40
 5571 000c 488B45F8 		movq	-8(%rbp), %rax
 5572 0010 488B5008 		movq	8(%rax), %rdx
 919:/usr/include/c++/11/bits/stl_vector.h **** 
 5573              		.loc 8 919 66
 5574 0014 488B45F8 		movq	-8(%rbp), %rax
 5575 0018 488B08   		movq	(%rax), %rcx
 919:/usr/include/c++/11/bits/stl_vector.h **** 
 5576              		.loc 8 919 50
 5577 001b 4889D0   		movq	%rdx, %rax
 5578 001e 4829C8   		subq	%rcx, %rax
 5579 0021 48C1F802 		sarq	$2, %rax
 919:/usr/include/c++/11/bits/stl_vector.h **** 
 5580              		.loc 8 919 77
 5581 0025 5D       		popq	%rbp
 5582              		.cfi_def_cfa 7, 8
 5583 0026 C3       		ret
 5584              		.cfi_endproc
 5585              	.LFE1546:
 5587              		.section	.text._ZN8UnitTest15CheckArrayCloseISt6vectorIfSaIfEES3_fEEvRNS_11TestResultsERKT_RKT0_iR
 5588              		.weak	_ZN8UnitTest15CheckArrayCloseISt6vectorIfSaIfEES3_fEEvRNS_11TestResultsERKT_RKT0_iRKT1_RKNS_
 5590              	_ZN8UnitTest15CheckArrayCloseISt6vectorIfSaIfEES3_fEEvRNS_11TestResultsERKT_RKT0_iRKT1_RKNS_11TestD
 5591              	.LFB1547:
  96:../Checks.h   ****                    int const count, Tolerance const& tolerance, TestDetails const& details)
 5592              		.loc 6 96 6
 5593              		.cfi_startproc
 5594              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 5595              		.cfi_lsda 0x1b,.LLSDA1547
 5596 0000 F30F1EFA 		endbr64
 5597 0004 55       		pushq	%rbp
 5598              		.cfi_def_cfa_offset 16
 5599              		.cfi_offset 6, -16
 5600 0005 4889E5   		movq	%rsp, %rbp
 5601              		.cfi_def_cfa_register 6
 5602 0008 53       		pushq	%rbx
 5603 0009 4881ECE8 		subq	$488, %rsp
 5603      010000
 5604              		.cfi_offset 3, -24
 5605 0010 4889BD38 		movq	%rdi, -456(%rbp)
 5605      FEFFFF
 5606 0017 4889B530 		movq	%rsi, -464(%rbp)
 5606      FEFFFF
 5607 001e 48899528 		movq	%rdx, -472(%rbp)
 5607      FEFFFF
 5608 0025 898D24FE 		movl	%ecx, -476(%rbp)
 5608      FFFF
 5609 002b 4C898518 		movq	%r8, -488(%rbp)
 5609      FEFFFF
 5610 0032 4C898D10 		movq	%r9, -496(%rbp)
 5610      FEFFFF
  96:../Checks.h   ****                    int const count, Tolerance const& tolerance, TestDetails const& details)
 5611              		.loc 6 96 6
 5612 0039 64488B04 		movq	%fs:40, %rax
 5612      25280000 
 5612      00
 5613 0042 488945E8 		movq	%rax, -24(%rbp)
 5614 0046 31C0     		xorl	%eax, %eax
  99:../Checks.h   **** 
 5615              		.loc 6 99 31
 5616 0048 488B8D18 		movq	-488(%rbp), %rcx
 5616      FEFFFF
 5617 004f 8B9524FE 		movl	-476(%rbp), %edx
 5617      FFFF
 5618 0055 488BB528 		movq	-472(%rbp), %rsi
 5618      FEFFFF
 5619 005c 488B8530 		movq	-464(%rbp), %rax
 5619      FEFFFF
 5620 0063 4889C7   		movq	%rax, %rdi
 5621              	.LEHB120:
 5622 0066 E8000000 		call	_ZN8UnitTest13ArrayAreCloseISt6vectorIfSaIfEES3_fEEbRKT_RKT0_iRKT1_
 5622      00
 5623 006b 888547FE 		movb	%al, -441(%rbp)
 5623      FFFF
 5624              	.LBB83:
 101:../Checks.h   ****     {
 5625              		.loc 6 101 10
 5626 0071 0FB68547 		movzbl	-441(%rbp), %eax
 5626      FEFFFF
 5627 0078 83F001   		xorl	$1, %eax
 101:../Checks.h   ****     {
 5628              		.loc 6 101 5
 5629 007b 84C0     		testb	%al, %al
 5630 007d 0F84B001 		je	.L273
 5630      0000
 5631              	.LBB84:
 103:../Checks.h   **** 
 5632              		.loc 6 103 35
 5633 0083 488D8550 		leaq	-432(%rbp), %rax
 5633      FEFFFF
 5634 008a 4889C7   		movq	%rax, %rdi
 5635 008d E8000000 		call	_ZN8UnitTest15MemoryOutStreamC1Ev
 5635      00
 5636              	.LEHE120:
 105:../Checks.h   ****         for (int expectedIndex = 0; expectedIndex < count; ++expectedIndex)
 5637              		.loc 6 105 16
 5638 0092 488D8550 		leaq	-432(%rbp), %rax
 5638      FEFFFF
 5639 0099 488D1500 		leaq	.LC56(%rip), %rdx
 5639      000000
 5640 00a0 4889D6   		movq	%rdx, %rsi
 5641 00a3 4889C7   		movq	%rax, %rdi
 5642              	.LEHB121:
 5643 00a6 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 5643      00
 5644              	.LBB85:
 106:../Checks.h   ****             stream << expected[expectedIndex] << " ";
 5645              		.loc 6 106 18
 5646 00ab C78548FE 		movl	$0, -440(%rbp)
 5646      FFFF0000 
 5646      0000
 106:../Checks.h   ****             stream << expected[expectedIndex] << " ";
 5647              		.loc 6 106 9
 5648 00b5 EB4C     		jmp	.L266
 5649              	.L267:
 107:../Checks.h   ****         stream << "] +/- " << tolerance << " but was [ ";
 5650              		.loc 6 107 31
 5651 00b7 8B8548FE 		movl	-440(%rbp), %eax
 5651      FFFF
 5652 00bd 4863D0   		movslq	%eax, %rdx
 5653 00c0 488B8530 		movq	-464(%rbp), %rax
 5653      FEFFFF
 5654 00c7 4889D6   		movq	%rdx, %rsi
 5655 00ca 4889C7   		movq	%rax, %rdi
 5656 00cd E8000000 		call	_ZNKSt6vectorIfSaIfEEixEm
 5656      00
 107:../Checks.h   ****         stream << "] +/- " << tolerance << " but was [ ";
 5657              		.loc 6 107 20
 5658 00d2 8B10     		movl	(%rax), %edx
 5659 00d4 488D8550 		leaq	-432(%rbp), %rax
 5659      FEFFFF
 5660 00db 660F6EC2 		movd	%edx, %xmm0
 5661 00df 4889C7   		movq	%rax, %rdi
 5662 00e2 E8000000 		call	_ZNSolsEf@PLT
 5662      00
 5663 00e7 4889C2   		movq	%rax, %rdx
 107:../Checks.h   ****         stream << "] +/- " << tolerance << " but was [ ";
 5664              		.loc 6 107 47
 5665 00ea 488D0500 		leaq	.LC57(%rip), %rax
 5665      000000
 5666 00f1 4889C6   		movq	%rax, %rsi
 5667 00f4 4889D7   		movq	%rdx, %rdi
 5668 00f7 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 5668      00
 106:../Checks.h   ****             stream << expected[expectedIndex] << " ";
 5669              		.loc 6 106 9 discriminator 2
 5670 00fc 838548FE 		addl	$1, -440(%rbp)
 5670      FFFF01
 5671              	.L266:
 106:../Checks.h   ****             stream << expected[expectedIndex] << " ";
 5672              		.loc 6 106 51 discriminator 1
 5673 0103 8B8548FE 		movl	-440(%rbp), %eax
 5673      FFFF
 5674 0109 3B8524FE 		cmpl	-476(%rbp), %eax
 5674      FFFF
 5675 010f 7CA6     		jl	.L267
 5676              	.LBE85:
 108:../Checks.h   **** 
 5677              		.loc 6 108 16
 5678 0111 488D8550 		leaq	-432(%rbp), %rax
 5678      FEFFFF
 5679 0118 488D1500 		leaq	.LC58(%rip), %rdx
 5679      000000
 5680 011f 4889D6   		movq	%rdx, %rsi
 5681 0122 4889C7   		movq	%rax, %rdi
 5682 0125 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 5682      00
 5683 012a 4889C2   		movq	%rax, %rdx
 108:../Checks.h   **** 
 5684              		.loc 6 108 28
 5685 012d 488B8518 		movq	-488(%rbp), %rax
 5685      FEFFFF
 5686 0134 8B00     		movl	(%rax), %eax
 5687 0136 660F6EC0 		movd	%eax, %xmm0
 5688 013a 4889D7   		movq	%rdx, %rdi
 5689 013d E8000000 		call	_ZNSolsEf@PLT
 5689      00
 108:../Checks.h   **** 
 5690              		.loc 6 108 28 is_stmt 0 discriminator 1
 5691 0142 4889C2   		movq	%rax, %rdx
 108:../Checks.h   **** 
 5692              		.loc 6 108 41 is_stmt 1 discriminator 1
 5693 0145 488D0500 		leaq	.LC59(%rip), %rax
 5693      000000
 5694 014c 4889C6   		movq	%rax, %rsi
 5695 014f 4889D7   		movq	%rdx, %rdi
 5696 0152 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 5696      00
 5697              	.LBB86:
 110:../Checks.h   ****             stream << actual[actualIndex] << " ";
 5698              		.loc 6 110 12
 5699 0157 C7854CFE 		movl	$0, -436(%rbp)
 5699      FFFF0000 
 5699      0000
 110:../Checks.h   ****             stream << actual[actualIndex] << " ";
 5700              		.loc 6 110 3
 5701 0161 EB4C     		jmp	.L268
 5702              	.L269:
 111:../Checks.h   ****         stream << "]";
 5703              		.loc 6 111 29
 5704 0163 8B854CFE 		movl	-436(%rbp), %eax
 5704      FFFF
 5705 0169 4863D0   		movslq	%eax, %rdx
 5706 016c 488B8528 		movq	-472(%rbp), %rax
 5706      FEFFFF
 5707 0173 4889D6   		movq	%rdx, %rsi
 5708 0176 4889C7   		movq	%rax, %rdi
 5709 0179 E8000000 		call	_ZNKSt6vectorIfSaIfEEixEm
 5709      00
 111:../Checks.h   ****         stream << "]";
 5710              		.loc 6 111 20
 5711 017e 8B10     		movl	(%rax), %edx
 5712 0180 488D8550 		leaq	-432(%rbp), %rax
 5712      FEFFFF
 5713 0187 660F6EC2 		movd	%edx, %xmm0
 5714 018b 4889C7   		movq	%rax, %rdi
 5715 018e E8000000 		call	_ZNSolsEf@PLT
 5715      00
 5716 0193 4889C2   		movq	%rax, %rdx
 111:../Checks.h   ****         stream << "]";
 5717              		.loc 6 111 43
 5718 0196 488D0500 		leaq	.LC57(%rip), %rax
 5718      000000
 5719 019d 4889C6   		movq	%rax, %rsi
 5720 01a0 4889D7   		movq	%rdx, %rdi
 5721 01a3 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 5721      00
 110:../Checks.h   ****             stream << actual[actualIndex] << " ";
 5722              		.loc 6 110 3 discriminator 2
 5723 01a8 83854CFE 		addl	$1, -436(%rbp)
 5723      FFFF01
 5724              	.L268:
 110:../Checks.h   ****             stream << actual[actualIndex] << " ";
 5725              		.loc 6 110 41 discriminator 1
 5726 01af 8B854CFE 		movl	-436(%rbp), %eax
 5726      FFFF
 5727 01b5 3B8524FE 		cmpl	-476(%rbp), %eax
 5727      FFFF
 5728 01bb 7CA6     		jl	.L269
 5729              	.LBE86:
 112:../Checks.h   **** 
 5730              		.loc 6 112 16
 5731 01bd 488D8550 		leaq	-432(%rbp), %rax
 5731      FEFFFF
 5732 01c4 488D1500 		leaq	.LC60(%rip), %rdx
 5732      000000
 5733 01cb 4889D6   		movq	%rdx, %rsi
 5734 01ce 4889C7   		movq	%rax, %rdi
 5735 01d1 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 5735      00
 114:../Checks.h   ****     }
 5736              		.loc 6 114 30
 5737 01d6 488D8550 		leaq	-432(%rbp), %rax
 5737      FEFFFF
 5738 01dd 4889C7   		movq	%rax, %rdi
 5739 01e0 E8000000 		call	_ZNK8UnitTest15MemoryOutStream7GetTextEv@PLT
 5739      00
 5740 01e5 4889C2   		movq	%rax, %rdx
 5741 01e8 488B8D10 		movq	-496(%rbp), %rcx
 5741      FEFFFF
 5742 01ef 488B8538 		movq	-456(%rbp), %rax
 5742      FEFFFF
 5743 01f6 4889CE   		movq	%rcx, %rsi
 5744 01f9 4889C7   		movq	%rax, %rdi
 5745 01fc E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc@PLT
 5745      00
 5746              	.LEHE121:
 115:../Checks.h   **** }
 5747              		.loc 6 115 5
 5748 0201 488D8550 		leaq	-432(%rbp), %rax
 5748      FEFFFF
 5749 0208 4889C7   		movq	%rax, %rdi
 5750              	.LEHB122:
 5751 020b E8000000 		call	_ZN8UnitTest15MemoryOutStreamD1Ev
 5751      00
 5752              	.LEHE122:
 5753              	.LBE84:
 5754              	.LBE83:
 5755              		.loc 6 116 1
 5756 0210 EB21     		jmp	.L273
 5757              	.L272:
 5758 0212 F30F1EFA 		endbr64
 5759              	.LBB88:
 5760              	.LBB87:
 115:../Checks.h   **** }
 5761              		.loc 6 115 5
 5762 0216 4889C3   		movq	%rax, %rbx
 5763 0219 488D8550 		leaq	-432(%rbp), %rax
 5763      FEFFFF
 5764 0220 4889C7   		movq	%rax, %rdi
 5765 0223 E8000000 		call	_ZN8UnitTest15MemoryOutStreamD1Ev
 5765      00
 5766 0228 4889D8   		movq	%rbx, %rax
 5767 022b 4889C7   		movq	%rax, %rdi
 5768              	.LEHB123:
 5769 022e E8000000 		call	_Unwind_Resume@PLT
 5769      00
 5770              	.LEHE123:
 5771              	.L273:
 5772              	.LBE87:
 5773              	.LBE88:
 5774              		.loc 6 116 1
 5775 0233 90       		nop
 5776 0234 488B45E8 		movq	-24(%rbp), %rax
 5777 0238 64482B04 		subq	%fs:40, %rax
 5777      25280000 
 5777      00
 5778 0241 7405     		je	.L271
 5779 0243 E8000000 		call	__stack_chk_fail@PLT
 5779      00
 5780              	.L271:
 5781 0248 488B5DF8 		movq	-8(%rbp), %rbx
 5782 024c C9       		leave
 5783              		.cfi_def_cfa 7, 8
 5784 024d C3       		ret
 5785              		.cfi_endproc
 5786              	.LFE1547:
 5787              		.section	.gcc_except_table
 5788              	.LLSDA1547:
 5789 0369 FF       		.byte	0xff
 5790 036a FF       		.byte	0xff
 5791 036b 01       		.byte	0x1
 5792 036c 15       		.uleb128 .LLSDACSE1547-.LLSDACSB1547
 5793              	.LLSDACSB1547:
 5794 036d 66       		.uleb128 .LEHB120-.LFB1547
 5795 036e 2C       		.uleb128 .LEHE120-.LEHB120
 5796 036f 00       		.uleb128 0
 5797 0370 00       		.uleb128 0
 5798 0371 A601     		.uleb128 .LEHB121-.LFB1547
 5799 0373 DB02     		.uleb128 .LEHE121-.LEHB121
 5800 0375 9204     		.uleb128 .L272-.LFB1547
 5801 0377 00       		.uleb128 0
 5802 0378 8B04     		.uleb128 .LEHB122-.LFB1547
 5803 037a 05       		.uleb128 .LEHE122-.LEHB122
 5804 037b 00       		.uleb128 0
 5805 037c 00       		.uleb128 0
 5806 037d AE04     		.uleb128 .LEHB123-.LFB1547
 5807 037f 05       		.uleb128 .LEHE123-.LEHB123
 5808 0380 00       		.uleb128 0
 5809 0381 00       		.uleb128 0
 5810              	.LLSDACSE1547:
 5811              		.section	.text._ZN8UnitTest15CheckArrayCloseISt6vectorIfSaIfEES3_fEEvRNS_11TestResultsERKT_RKT0_iR
 5813              		.section	.rodata
 5814              	.LC61:
 5815 05e7 556E6861 		.string	"Unhandled system exception"
 5815      6E646C65 
 5815      64207379 
 5815      7374656D 
 5815      20657863 
 5816              	.LC62:
 5817 0602 556E6861 		.string	"Unhandled exception: Crash!"
 5817      6E646C65 
 5817      64206578 
 5817      63657074 
 5817      696F6E3A 
 5818              		.text
 5820              	_ZN8UnitTest11ExecuteTestIN12_GLOBAL__N_145SimpleFixtureDefaultFixtureCtorIsCalledHelperEEEvRT_RKNS
 5821              	.LFB1548:
 5822              		.file 9 "../ExecuteTest.h"
   1:../ExecuteTest.h **** #ifndef UNITTEST_EXECUTE_TEST_H
   2:../ExecuteTest.h **** #define UNITTEST_EXECUTE_TEST_H
   3:../ExecuteTest.h **** 
   4:../ExecuteTest.h **** #include "TestDetails.h"
   5:../ExecuteTest.h **** #include "MemoryOutStream.h"
   6:../ExecuteTest.h **** #include "AssertException.h"
   7:../ExecuteTest.h **** #include "CurrentTest.h"
   8:../ExecuteTest.h **** 
   9:../ExecuteTest.h **** #ifdef UNITTEST_POSIX
  10:../ExecuteTest.h **** 	#include "PosixUtils/SignalTranslator.h"
  11:../ExecuteTest.h **** #endif
  12:../ExecuteTest.h **** 
  13:../ExecuteTest.h **** namespace UnitTest {
  14:../ExecuteTest.h **** 
  15:../ExecuteTest.h **** template< typename T >
  16:../ExecuteTest.h **** void ExecuteTest(T& testObject, TestDetails const& details)
 5823              		.loc 9 16 6
 5824              		.cfi_startproc
 5825              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 5826              		.cfi_lsda 0x1b,.LLSDA1548
 5827 1e77 F30F1EFA 		endbr64
 5828 1e7b 55       		pushq	%rbp
 5829              		.cfi_def_cfa_offset 16
 5830              		.cfi_offset 6, -16
 5831 1e7c 4889E5   		movq	%rsp, %rbp
 5832              		.cfi_def_cfa_register 6
 5833 1e7f 4155     		pushq	%r13
 5834 1e81 4154     		pushq	%r12
 5835 1e83 53       		pushq	%rbx
 5836 1e84 4881EC58 		subq	$1624, %rsp
 5836      060000
 5837              		.cfi_offset 13, -24
 5838              		.cfi_offset 12, -32
 5839              		.cfi_offset 3, -40
 5840 1e8b 4889BD98 		movq	%rdi, -1640(%rbp)
 5840      F9FFFF
 5841 1e92 4889B590 		movq	%rsi, -1648(%rbp)
 5841      F9FFFF
 5842              		.loc 9 16 6
 5843 1e99 64488B04 		movq	%fs:40, %rax
 5843      25280000 
 5843      00
 5844 1ea2 488945D8 		movq	%rax, -40(%rbp)
 5845 1ea6 31C0     		xorl	%eax, %eax
 5846              	.LEHB124:
  17:../ExecuteTest.h **** {
  18:../ExecuteTest.h **** 	CurrentTest::Details() = &details;
 5847              		.loc 9 18 22
 5848 1ea8 E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv@PLT
 5848      00
 5849              	.LEHE124:
 5850              		.loc 9 18 25
 5851 1ead 488B9590 		movq	-1648(%rbp), %rdx
 5851      F9FFFF
 5852 1eb4 488910   		movq	%rdx, (%rax)
 5853              	.LBB89:
  19:../ExecuteTest.h **** 
  20:../ExecuteTest.h **** 	try
  21:../ExecuteTest.h **** 	{
  22:../ExecuteTest.h **** #ifdef UNITTEST_POSIX
  23:../ExecuteTest.h **** 		UNITTEST_THROW_SIGNALS
 5854              		.loc 9 23 3
 5855 1eb7 488D8570 		leaq	-1168(%rbp), %rax
 5855      FBFFFF
 5856 1ebe 4889C7   		movq	%rax, %rdi
 5857              	.LEHB125:
 5858 1ec1 E8000000 		call	_ZN8UnitTest16SignalTranslatorC1Ev@PLT
 5858      00
 5859              	.LEHE125:
 5860              		.loc 9 23 3 is_stmt 0 discriminator 1
 5861 1ec6 488B0500 		movq	_ZN8UnitTest16SignalTranslator12s_jumpTargetE(%rip), %rax
 5861      000000
 5862 1ecd BE010000 		movl	$1, %esi
 5862      00
 5863 1ed2 4889C7   		movq	%rax, %rdi
 5864 1ed5 E8000000 		call	__sigsetjmp@PLT
 5864      00
 5865 1eda F30F1EFA 		endbr64
 5866 1ede 85C0     		testl	%eax, %eax
 5867 1ee0 0F95C0   		setne	%al
 5868 1ee3 84C0     		testb	%al, %al
 5869 1ee5 742B     		je	.L276
 5870              		.loc 9 23 3 discriminator 4
 5871 1ee7 BF080000 		movl	$8, %edi
 5871      00
 5872 1eec E8000000 		call	__cxa_allocate_exception@PLT
 5872      00
 5873 1ef1 488D1500 		leaq	.LC61(%rip), %rdx
 5873      000000
 5874 1ef8 488910   		movq	%rdx, (%rax)
 5875 1efb BA000000 		movl	$0, %edx
 5875      00
 5876 1f00 488D0D00 		leaq	_ZTIPKc(%rip), %rcx
 5876      000000
 5877 1f07 4889CE   		movq	%rcx, %rsi
 5878 1f0a 4889C7   		movq	%rax, %rdi
 5879              	.LEHB126:
 5880 1f0d E8000000 		call	__cxa_throw@PLT
 5880      00
 5881              	.L276:
  24:../ExecuteTest.h **** #endif
  25:../ExecuteTest.h **** 		testObject.RunImpl();
 5882              		.loc 9 25 21 is_stmt 1
 5883 1f12 488B8598 		movq	-1640(%rbp), %rax
 5883      F9FFFF
 5884 1f19 4889C7   		movq	%rax, %rdi
 5885 1f1c E859F8FF 		call	_ZN12_GLOBAL__N_145SimpleFixtureDefaultFixtureCtorIsCalledHelper7RunImplEv
 5885      FF
 5886              	.LEHE126:
  26:../ExecuteTest.h **** 	}
 5887              		.loc 9 26 2
 5888 1f21 488D8570 		leaq	-1168(%rbp), %rax
 5888      FBFFFF
 5889 1f28 4889C7   		movq	%rax, %rdi
 5890              	.LEHB127:
 5891 1f2b E8000000 		call	_ZN8UnitTest16SignalTranslatorD1Ev@PLT
 5891      00
 5892              	.LEHE127:
 5893              	.LBE89:
  27:../ExecuteTest.h **** 	catch (AssertException const& e)
  28:../ExecuteTest.h **** 	{
  29:../ExecuteTest.h **** 		CurrentTest::Results()->OnTestFailure(
  30:../ExecuteTest.h **** 			TestDetails(details.testName, details.suiteName, e.Filename(), e.LineNumber()), e.what());
  31:../ExecuteTest.h **** 	}
  32:../ExecuteTest.h **** 	catch (std::exception const& e)
  33:../ExecuteTest.h **** 	{
  34:../ExecuteTest.h **** 		MemoryOutStream stream;
  35:../ExecuteTest.h **** 		stream << "Unhandled exception: " << e.what();
  36:../ExecuteTest.h **** 		CurrentTest::Results()->OnTestFailure(details, stream.GetText());
  37:../ExecuteTest.h **** 	}
  38:../ExecuteTest.h **** 	catch (...)
  39:../ExecuteTest.h **** 	{
  40:../ExecuteTest.h **** 		CurrentTest::Results()->OnTestFailure(details, "Unhandled exception: Crash!");
  41:../ExecuteTest.h **** 	}
  42:../ExecuteTest.h **** }
 5894              		.loc 9 42 1
 5895 1f30 E90F0200 		jmp	.L274
 5895      00
 5896              	.L289:
 5897 1f35 F30F1EFA 		endbr64
 5898              	.LBB90:
  26:../ExecuteTest.h **** 	}
 5899              		.loc 9 26 2
 5900 1f39 4989C4   		movq	%rax, %r12
 5901 1f3c 4889D3   		movq	%rdx, %rbx
 5902 1f3f 488D8570 		leaq	-1168(%rbp), %rax
 5902      FBFFFF
 5903 1f46 4889C7   		movq	%rax, %rdi
 5904 1f49 E8000000 		call	_ZN8UnitTest16SignalTranslatorD1Ev@PLT
 5904      00
 5905 1f4e 4C89E0   		movq	%r12, %rax
 5906 1f51 4889DA   		movq	%rbx, %rdx
 5907 1f54 EB04     		jmp	.L278
 5908              	.L288:
 5909 1f56 F30F1EFA 		endbr64
 5910              	.L278:
 5911              	.LBE90:
  27:../ExecuteTest.h **** 	catch (AssertException const& e)
 5912              		.loc 9 27 2
 5913 1f5a 4883FA01 		cmpq	$1, %rdx
 5914 1f5e 740F     		je	.L279
 5915 1f60 4883FA02 		cmpq	$2, %rdx
 5916 1f64 0F84A600 		je	.L280
 5916      0000
 5917 1f6a E9480100 		jmp	.L294
 5917      00
 5918              	.L279:
 5919              	.LBB91:
  27:../ExecuteTest.h **** 	catch (AssertException const& e)
 5920              		.loc 9 27 2 is_stmt 0 discriminator 1
 5921 1f6f 4889C7   		movq	%rax, %rdi
 5922 1f72 E8000000 		call	__cxa_begin_catch@PLT
 5922      00
  27:../ExecuteTest.h **** 	catch (AssertException const& e)
 5923              		.loc 9 27 32 is_stmt 1 discriminator 1
 5924 1f77 488985A8 		movq	%rax, -1624(%rbp)
 5924      F9FFFF
 5925              	.LEHB128:
  29:../ExecuteTest.h **** 			TestDetails(details.testName, details.suiteName, e.Filename(), e.LineNumber()), e.what());
 5926              		.loc 9 29 23 discriminator 1
 5927 1f7e E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv@PLT
 5927      00
  29:../ExecuteTest.h **** 			TestDetails(details.testName, details.suiteName, e.Filename(), e.LineNumber()), e.what());
 5928              		.loc 9 29 40 discriminator 2
 5929 1f83 488B18   		movq	(%rax), %rbx
  30:../ExecuteTest.h **** 	}
 5930              		.loc 9 30 90 discriminator 2
 5931 1f86 488B85A8 		movq	-1624(%rbp), %rax
 5931      F9FFFF
 5932 1f8d 488B00   		movq	(%rax), %rax
 5933 1f90 4883C010 		addq	$16, %rax
 5934 1f94 488B10   		movq	(%rax), %rdx
  29:../ExecuteTest.h **** 			TestDetails(details.testName, details.suiteName, e.Filename(), e.LineNumber()), e.what());
 5935              		.loc 9 29 40 discriminator 2
 5936 1f97 488B85A8 		movq	-1624(%rbp), %rax
 5936      F9FFFF
 5937 1f9e 4889C7   		movq	%rax, %rdi
 5938 1fa1 FFD2     		call	*%rdx
 5939              	.LVL4:
 5940 1fa3 4989C4   		movq	%rax, %r12
  30:../ExecuteTest.h **** 	}
 5941              		.loc 9 30 4 discriminator 2
 5942 1fa6 488B85A8 		movq	-1624(%rbp), %rax
 5942      F9FFFF
 5943 1fad 4889C7   		movq	%rax, %rdi
 5944 1fb0 E8000000 		call	_ZNK8UnitTest15AssertException10LineNumberEv@PLT
 5944      00
 5945 1fb5 4189C5   		movl	%eax, %r13d
 5946 1fb8 488B85A8 		movq	-1624(%rbp), %rax
 5946      F9FFFF
 5947 1fbf 4889C7   		movq	%rax, %rdi
 5948 1fc2 E8000000 		call	_ZNK8UnitTest15AssertException8FilenameEv@PLT
 5948      00
  30:../ExecuteTest.h **** 	}
 5949              		.loc 9 30 4 is_stmt 0 discriminator 1
 5950 1fc7 4889C1   		movq	%rax, %rcx
  30:../ExecuteTest.h **** 	}
 5951              		.loc 9 30 42 is_stmt 1 discriminator 1
 5952 1fca 488B8590 		movq	-1648(%rbp), %rax
 5952      F9FFFF
 5953 1fd1 488B10   		movq	(%rax), %rdx
  30:../ExecuteTest.h **** 	}
 5954              		.loc 9 30 24 discriminator 1
 5955 1fd4 488B8590 		movq	-1648(%rbp), %rax
 5955      F9FFFF
 5956 1fdb 488B7008 		movq	8(%rax), %rsi
  30:../ExecuteTest.h **** 	}
 5957              		.loc 9 30 4 discriminator 1
 5958 1fdf 488D85B0 		leaq	-1616(%rbp), %rax
 5958      F9FFFF
 5959 1fe6 4589E8   		movl	%r13d, %r8d
 5960 1fe9 4889C7   		movq	%rax, %rdi
 5961 1fec E8000000 		call	_ZN8UnitTest11TestDetailsC1EPKcS2_S2_i@PLT
 5961      00
  29:../ExecuteTest.h **** 			TestDetails(details.testName, details.suiteName, e.Filename(), e.LineNumber()), e.what());
 5962              		.loc 9 29 40
 5963 1ff1 488D85B0 		leaq	-1616(%rbp), %rax
 5963      F9FFFF
 5964 1ff8 4C89E2   		movq	%r12, %rdx
 5965 1ffb 4889C6   		movq	%rax, %rsi
 5966 1ffe 4889DF   		movq	%rbx, %rdi
 5967 2001 E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc@PLT
 5967      00
 5968              	.LEHE128:
  27:../ExecuteTest.h **** 	catch (AssertException const& e)
 5969              		.loc 9 27 2
 5970 2006 E8000000 		call	__cxa_end_catch@PLT
 5970      00
 5971              	.LBE91:
 5972              		.loc 9 42 1
 5973 200b E9340100 		jmp	.L274
 5973      00
 5974              	.L280:
 5975              	.LBB92:
  32:../ExecuteTest.h **** 	{
 5976              		.loc 9 32 2
 5977 2010 4889C7   		movq	%rax, %rdi
 5978 2013 E8000000 		call	__cxa_begin_catch@PLT
 5978      00
  32:../ExecuteTest.h **** 	{
 5979              		.loc 9 32 31
 5980 2018 488985A0 		movq	%rax, -1632(%rbp)
 5980      F9FFFF
 5981              	.LBB93:
  34:../ExecuteTest.h **** 		stream << "Unhandled exception: " << e.what();
 5982              		.loc 9 34 19
 5983 201f 488D85D0 		leaq	-1584(%rbp), %rax
 5983      F9FFFF
 5984 2026 4889C7   		movq	%rax, %rdi
 5985              	.LEHB129:
 5986 2029 E8000000 		call	_ZN8UnitTest15MemoryOutStreamC1Ev
 5986      00
 5987              	.LEHE129:
  35:../ExecuteTest.h **** 		CurrentTest::Results()->OnTestFailure(details, stream.GetText());
 5988              		.loc 9 35 37
 5989 202e 488D85D0 		leaq	-1584(%rbp), %rax
 5989      F9FFFF
 5990 2035 488D1500 		leaq	.LC45(%rip), %rdx
 5990      000000
 5991 203c 4889D6   		movq	%rdx, %rsi
 5992 203f 4889C7   		movq	%rax, %rdi
 5993              	.LEHB130:
 5994 2042 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 5994      00
 5995 2047 4889C3   		movq	%rax, %rbx
  35:../ExecuteTest.h **** 		CurrentTest::Results()->OnTestFailure(details, stream.GetText());
 5996              		.loc 9 35 46
 5997 204a 488B85A0 		movq	-1632(%rbp), %rax
 5997      F9FFFF
 5998 2051 488B00   		movq	(%rax), %rax
 5999 2054 4883C010 		addq	$16, %rax
 6000 2058 488B10   		movq	(%rax), %rdx
  35:../ExecuteTest.h **** 		CurrentTest::Results()->OnTestFailure(details, stream.GetText());
 6001              		.loc 9 35 37
 6002 205b 488B85A0 		movq	-1632(%rbp), %rax
 6002      F9FFFF
 6003 2062 4889C7   		movq	%rax, %rdi
 6004 2065 FFD2     		call	*%rdx
 6005              	.LVL5:
 6006 2067 4889C6   		movq	%rax, %rsi
 6007 206a 4889DF   		movq	%rbx, %rdi
 6008 206d E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 6008      00
  36:../ExecuteTest.h **** 	}
 6009              		.loc 9 36 23
 6010 2072 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv@PLT
 6010      00
  36:../ExecuteTest.h **** 	}
 6011              		.loc 9 36 40
 6012 2077 488B18   		movq	(%rax), %rbx
 6013 207a 488D85D0 		leaq	-1584(%rbp), %rax
 6013      F9FFFF
 6014 2081 4889C7   		movq	%rax, %rdi
 6015 2084 E8000000 		call	_ZNK8UnitTest15MemoryOutStream7GetTextEv@PLT
 6015      00
  36:../ExecuteTest.h **** 	}
 6016              		.loc 9 36 40 is_stmt 0 discriminator 1
 6017 2089 4889C2   		movq	%rax, %rdx
 6018 208c 488B8590 		movq	-1648(%rbp), %rax
 6018      F9FFFF
 6019 2093 4889C6   		movq	%rax, %rsi
 6020 2096 4889DF   		movq	%rbx, %rdi
 6021 2099 E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc@PLT
 6021      00
 6022              	.LEHE130:
  37:../ExecuteTest.h **** 	catch (...)
 6023              		.loc 9 37 2 is_stmt 1
 6024 209e 488D85D0 		leaq	-1584(%rbp), %rax
 6024      F9FFFF
 6025 20a5 4889C7   		movq	%rax, %rdi
 6026              	.LEHB131:
 6027 20a8 E8000000 		call	_ZN8UnitTest15MemoryOutStreamD1Ev
 6027      00
 6028              	.LEHE131:
 6029              	.LBE93:
  32:../ExecuteTest.h **** 	{
 6030              		.loc 9 32 2
 6031 20ad E8000000 		call	__cxa_end_catch@PLT
 6031      00
 6032              	.LBE92:
 6033              		.loc 9 42 1
 6034 20b2 E98D0000 		jmp	.L274
 6034      00
 6035              	.L294:
  38:../ExecuteTest.h **** 	{
 6036              		.loc 9 38 2
 6037 20b7 4889C7   		movq	%rax, %rdi
 6038 20ba E8000000 		call	__cxa_begin_catch@PLT
 6038      00
 6039              	.LEHB132:
  40:../ExecuteTest.h **** 	}
 6040              		.loc 9 40 23
 6041 20bf E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv@PLT
 6041      00
  40:../ExecuteTest.h **** 	}
 6042              		.loc 9 40 40
 6043 20c4 488B00   		movq	(%rax), %rax
 6044 20c7 488B8D90 		movq	-1648(%rbp), %rcx
 6044      F9FFFF
 6045 20ce 488D1500 		leaq	.LC62(%rip), %rdx
 6045      000000
 6046 20d5 4889CE   		movq	%rcx, %rsi
 6047 20d8 4889C7   		movq	%rax, %rdi
 6048 20db E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc@PLT
 6048      00
 6049              	.LEHE132:
 6050              	.LEHB133:
  38:../ExecuteTest.h **** 	{
 6051              		.loc 9 38 2
 6052 20e0 E8000000 		call	__cxa_end_catch@PLT
 6052      00
 6053              		.loc 9 42 1
 6054 20e5 EB5D     		jmp	.L274
 6055              	.L290:
 6056 20e7 F30F1EFA 		endbr64
 6057              	.LBB95:
  27:../ExecuteTest.h **** 	{
 6058              		.loc 9 27 2
 6059 20eb 4889C3   		movq	%rax, %rbx
 6060 20ee E8000000 		call	__cxa_end_catch@PLT
 6060      00
 6061 20f3 4889D8   		movq	%rbx, %rax
 6062 20f6 4889C7   		movq	%rax, %rdi
 6063 20f9 E8000000 		call	_Unwind_Resume@PLT
 6063      00
 6064              	.LEHE133:
 6065              	.L292:
 6066 20fe F30F1EFA 		endbr64
 6067              	.LBE95:
 6068              	.LBB96:
 6069              	.LBB94:
  37:../ExecuteTest.h **** 	catch (...)
 6070              		.loc 9 37 2
 6071 2102 4889C3   		movq	%rax, %rbx
 6072 2105 488D85D0 		leaq	-1584(%rbp), %rax
 6072      F9FFFF
 6073 210c 4889C7   		movq	%rax, %rdi
 6074 210f E8000000 		call	_ZN8UnitTest15MemoryOutStreamD1Ev
 6074      00
 6075 2114 EB07     		jmp	.L285
 6076              	.L291:
 6077 2116 F30F1EFA 		endbr64
 6078              	.LBE94:
  32:../ExecuteTest.h **** 	{
 6079              		.loc 9 32 2
 6080 211a 4889C3   		movq	%rax, %rbx
 6081              	.L285:
 6082 211d E8000000 		call	__cxa_end_catch@PLT
 6082      00
 6083 2122 4889D8   		movq	%rbx, %rax
 6084 2125 4889C7   		movq	%rax, %rdi
 6085              	.LEHB134:
 6086 2128 E8000000 		call	_Unwind_Resume@PLT
 6086      00
 6087              	.LEHE134:
 6088              	.L293:
 6089 212d F30F1EFA 		endbr64
 6090              	.LBE96:
  38:../ExecuteTest.h **** 	{
 6091              		.loc 9 38 2
 6092 2131 4889C3   		movq	%rax, %rbx
 6093 2134 E8000000 		call	__cxa_end_catch@PLT
 6093      00
 6094 2139 4889D8   		movq	%rbx, %rax
 6095 213c 4889C7   		movq	%rax, %rdi
 6096              	.LEHB135:
 6097 213f E8000000 		call	_Unwind_Resume@PLT
 6097      00
 6098              	.LEHE135:
 6099              	.L274:
 6100              		.loc 9 42 1
 6101 2144 488B45D8 		movq	-40(%rbp), %rax
 6102 2148 64482B04 		subq	%fs:40, %rax
 6102      25280000 
 6102      00
 6103 2151 7405     		je	.L287
 6104 2153 E8000000 		call	__stack_chk_fail@PLT
 6104      00
 6105              	.L287:
 6106 2158 4881C458 		addq	$1624, %rsp
 6106      060000
 6107 215f 5B       		popq	%rbx
 6108 2160 415C     		popq	%r12
 6109 2162 415D     		popq	%r13
 6110 2164 5D       		popq	%rbp
 6111              		.cfi_def_cfa 7, 8
 6112 2165 C3       		ret
 6113              		.cfi_endproc
 6114              	.LFE1548:
 6115              		.section	.gcc_except_table
 6116 0382 0000     		.align 4
 6117              	.LLSDA1548:
 6118 0384 FF       		.byte	0xff
 6119 0385 9B       		.byte	0x9b
 6120 0386 59       		.uleb128 .LLSDATT1548-.LLSDATTD1548
 6121              	.LLSDATTD1548:
 6122 0387 01       		.byte	0x1
 6123 0388 43       		.uleb128 .LLSDACSE1548-.LLSDACSB1548
 6124              	.LLSDACSB1548:
 6125 0389 31       		.uleb128 .LEHB124-.LFB1548
 6126 038a 05       		.uleb128 .LEHE124-.LEHB124
 6127 038b 00       		.uleb128 0
 6128 038c 00       		.uleb128 0
 6129 038d 4A       		.uleb128 .LEHB125-.LFB1548
 6130 038e 05       		.uleb128 .LEHE125-.LEHB125
 6131 038f DF01     		.uleb128 .L288-.LFB1548
 6132 0391 05       		.uleb128 0x5
 6133 0392 9601     		.uleb128 .LEHB126-.LFB1548
 6134 0394 14       		.uleb128 .LEHE126-.LEHB126
 6135 0395 BE01     		.uleb128 .L289-.LFB1548
 6136 0397 07       		.uleb128 0x7
 6137 0398 B401     		.uleb128 .LEHB127-.LFB1548
 6138 039a 05       		.uleb128 .LEHE127-.LEHB127
 6139 039b DF01     		.uleb128 .L288-.LFB1548
 6140 039d 05       		.uleb128 0x5
 6141 039e 8702     		.uleb128 .LEHB128-.LFB1548
 6142 03a0 8801     		.uleb128 .LEHE128-.LEHB128
 6143 03a2 F004     		.uleb128 .L290-.LFB1548
 6144 03a4 00       		.uleb128 0
 6145 03a5 B203     		.uleb128 .LEHB129-.LFB1548
 6146 03a7 05       		.uleb128 .LEHE129-.LEHB129
 6147 03a8 9F05     		.uleb128 .L291-.LFB1548
 6148 03aa 00       		.uleb128 0
 6149 03ab CB03     		.uleb128 .LEHB130-.LFB1548
 6150 03ad 5C       		.uleb128 .LEHE130-.LEHB130
 6151 03ae 8705     		.uleb128 .L292-.LFB1548
 6152 03b0 00       		.uleb128 0
 6153 03b1 B104     		.uleb128 .LEHB131-.LFB1548
 6154 03b3 05       		.uleb128 .LEHE131-.LEHB131
 6155 03b4 9F05     		.uleb128 .L291-.LFB1548
 6156 03b6 00       		.uleb128 0
 6157 03b7 C804     		.uleb128 .LEHB132-.LFB1548
 6158 03b9 21       		.uleb128 .LEHE132-.LEHB132
 6159 03ba B605     		.uleb128 .L293-.LFB1548
 6160 03bc 00       		.uleb128 0
 6161 03bd E904     		.uleb128 .LEHB133-.LFB1548
 6162 03bf 1E       		.uleb128 .LEHE133-.LEHB133
 6163 03c0 00       		.uleb128 0
 6164 03c1 00       		.uleb128 0
 6165 03c2 B105     		.uleb128 .LEHB134-.LFB1548
 6166 03c4 05       		.uleb128 .LEHE134-.LEHB134
 6167 03c5 00       		.uleb128 0
 6168 03c6 00       		.uleb128 0
 6169 03c7 C805     		.uleb128 .LEHB135-.LFB1548
 6170 03c9 05       		.uleb128 .LEHE135-.LEHB135
 6171 03ca 00       		.uleb128 0
 6172 03cb 00       		.uleb128 0
 6173              	.LLSDACSE1548:
 6174 03cc 03       		.byte	0x3
 6175 03cd 00       		.byte	0
 6176 03ce 02       		.byte	0x2
 6177 03cf 7D       		.byte	0x7d
 6178 03d0 01       		.byte	0x1
 6179 03d1 7D       		.byte	0x7d
 6180 03d2 00       		.byte	0
 6181 03d3 7D       		.byte	0x7d
 6182              		.align 4
 6183 03d4 00000000 		.long	0
 6184              	
 6185 03d8 00000000 		.long	DW.ref._ZTISt9exception-.
 6186 03dc 00000000 		.long	DW.ref._ZTIN8UnitTest15AssertExceptionE-.
 6187              	.LLSDATT1548:
 6188              		.text
 6191              	_ZN8UnitTest11ExecuteTestIN12_GLOBAL__N_145SimpleFixtureOnlyOneFixtureAliveAtATimeHelperEEEvRT_RKNS
 6192              	.LFB1550:
  16:../ExecuteTest.h **** {
 6193              		.loc 9 16 6
 6194              		.cfi_startproc
 6195              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 6196              		.cfi_lsda 0x1b,.LLSDA1550
 6197 2166 F30F1EFA 		endbr64
 6198 216a 55       		pushq	%rbp
 6199              		.cfi_def_cfa_offset 16
 6200              		.cfi_offset 6, -16
 6201 216b 4889E5   		movq	%rsp, %rbp
 6202              		.cfi_def_cfa_register 6
 6203 216e 4155     		pushq	%r13
 6204 2170 4154     		pushq	%r12
 6205 2172 53       		pushq	%rbx
 6206 2173 4881EC58 		subq	$1624, %rsp
 6206      060000
 6207              		.cfi_offset 13, -24
 6208              		.cfi_offset 12, -32
 6209              		.cfi_offset 3, -40
 6210 217a 4889BD98 		movq	%rdi, -1640(%rbp)
 6210      F9FFFF
 6211 2181 4889B590 		movq	%rsi, -1648(%rbp)
 6211      F9FFFF
  16:../ExecuteTest.h **** {
 6212              		.loc 9 16 6
 6213 2188 64488B04 		movq	%fs:40, %rax
 6213      25280000 
 6213      00
 6214 2191 488945D8 		movq	%rax, -40(%rbp)
 6215 2195 31C0     		xorl	%eax, %eax
 6216              	.LEHB136:
  18:../ExecuteTest.h **** 
 6217              		.loc 9 18 22
 6218 2197 E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv@PLT
 6218      00
 6219              	.LEHE136:
  18:../ExecuteTest.h **** 
 6220              		.loc 9 18 25
 6221 219c 488B9590 		movq	-1648(%rbp), %rdx
 6221      F9FFFF
 6222 21a3 488910   		movq	%rdx, (%rax)
 6223              	.LBB97:
  23:../ExecuteTest.h **** #endif
 6224              		.loc 9 23 3
 6225 21a6 488D8570 		leaq	-1168(%rbp), %rax
 6225      FBFFFF
 6226 21ad 4889C7   		movq	%rax, %rdi
 6227              	.LEHB137:
 6228 21b0 E8000000 		call	_ZN8UnitTest16SignalTranslatorC1Ev@PLT
 6228      00
 6229              	.LEHE137:
  23:../ExecuteTest.h **** #endif
 6230              		.loc 9 23 3 is_stmt 0 discriminator 1
 6231 21b5 488B0500 		movq	_ZN8UnitTest16SignalTranslator12s_jumpTargetE(%rip), %rax
 6231      000000
 6232 21bc BE010000 		movl	$1, %esi
 6232      00
 6233 21c1 4889C7   		movq	%rax, %rdi
 6234 21c4 E8000000 		call	__sigsetjmp@PLT
 6234      00
 6235 21c9 F30F1EFA 		endbr64
 6236 21cd 85C0     		testl	%eax, %eax
 6237 21cf 0F95C0   		setne	%al
 6238 21d2 84C0     		testb	%al, %al
 6239 21d4 742B     		je	.L297
  23:../ExecuteTest.h **** #endif
 6240              		.loc 9 23 3 discriminator 4
 6241 21d6 BF080000 		movl	$8, %edi
 6241      00
 6242 21db E8000000 		call	__cxa_allocate_exception@PLT
 6242      00
 6243 21e0 488D1500 		leaq	.LC61(%rip), %rdx
 6243      000000
 6244 21e7 488910   		movq	%rdx, (%rax)
 6245 21ea BA000000 		movl	$0, %edx
 6245      00
 6246 21ef 488D0D00 		leaq	_ZTIPKc(%rip), %rcx
 6246      000000
 6247 21f6 4889CE   		movq	%rcx, %rsi
 6248 21f9 4889C7   		movq	%rax, %rdi
 6249              	.LEHB138:
 6250 21fc E8000000 		call	__cxa_throw@PLT
 6250      00
 6251              	.L297:
  25:../ExecuteTest.h **** 	}
 6252              		.loc 9 25 21 is_stmt 1
 6253 2201 488B8598 		movq	-1640(%rbp), %rax
 6253      F9FFFF
 6254 2208 4889C7   		movq	%rax, %rdi
 6255 220b E822FAFF 		call	_ZN12_GLOBAL__N_145SimpleFixtureOnlyOneFixtureAliveAtATimeHelper7RunImplEv
 6255      FF
 6256              	.LEHE138:
  26:../ExecuteTest.h **** 	catch (AssertException const& e)
 6257              		.loc 9 26 2
 6258 2210 488D8570 		leaq	-1168(%rbp), %rax
 6258      FBFFFF
 6259 2217 4889C7   		movq	%rax, %rdi
 6260              	.LEHB139:
 6261 221a E8000000 		call	_ZN8UnitTest16SignalTranslatorD1Ev@PLT
 6261      00
 6262              	.LEHE139:
 6263              	.LBE97:
 6264              		.loc 9 42 1
 6265 221f E90F0200 		jmp	.L295
 6265      00
 6266              	.L310:
 6267 2224 F30F1EFA 		endbr64
 6268              	.LBB98:
  26:../ExecuteTest.h **** 	catch (AssertException const& e)
 6269              		.loc 9 26 2
 6270 2228 4989C4   		movq	%rax, %r12
 6271 222b 4889D3   		movq	%rdx, %rbx
 6272 222e 488D8570 		leaq	-1168(%rbp), %rax
 6272      FBFFFF
 6273 2235 4889C7   		movq	%rax, %rdi
 6274 2238 E8000000 		call	_ZN8UnitTest16SignalTranslatorD1Ev@PLT
 6274      00
 6275 223d 4C89E0   		movq	%r12, %rax
 6276 2240 4889DA   		movq	%rbx, %rdx
 6277 2243 EB04     		jmp	.L299
 6278              	.L309:
 6279 2245 F30F1EFA 		endbr64
 6280              	.L299:
 6281              	.LBE98:
  27:../ExecuteTest.h **** 	{
 6282              		.loc 9 27 2
 6283 2249 4883FA01 		cmpq	$1, %rdx
 6284 224d 740F     		je	.L300
 6285 224f 4883FA02 		cmpq	$2, %rdx
 6286 2253 0F84A600 		je	.L301
 6286      0000
 6287 2259 E9480100 		jmp	.L315
 6287      00
 6288              	.L300:
 6289              	.LBB99:
  27:../ExecuteTest.h **** 	{
 6290              		.loc 9 27 2 is_stmt 0 discriminator 1
 6291 225e 4889C7   		movq	%rax, %rdi
 6292 2261 E8000000 		call	__cxa_begin_catch@PLT
 6292      00
  27:../ExecuteTest.h **** 	{
 6293              		.loc 9 27 32 is_stmt 1 discriminator 1
 6294 2266 488985A8 		movq	%rax, -1624(%rbp)
 6294      F9FFFF
 6295              	.LEHB140:
  29:../ExecuteTest.h **** 			TestDetails(details.testName, details.suiteName, e.Filename(), e.LineNumber()), e.what());
 6296              		.loc 9 29 23 discriminator 1
 6297 226d E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv@PLT
 6297      00
  29:../ExecuteTest.h **** 			TestDetails(details.testName, details.suiteName, e.Filename(), e.LineNumber()), e.what());
 6298              		.loc 9 29 40 discriminator 2
 6299 2272 488B18   		movq	(%rax), %rbx
  30:../ExecuteTest.h **** 	}
 6300              		.loc 9 30 90 discriminator 2
 6301 2275 488B85A8 		movq	-1624(%rbp), %rax
 6301      F9FFFF
 6302 227c 488B00   		movq	(%rax), %rax
 6303 227f 4883C010 		addq	$16, %rax
 6304 2283 488B10   		movq	(%rax), %rdx
  29:../ExecuteTest.h **** 			TestDetails(details.testName, details.suiteName, e.Filename(), e.LineNumber()), e.what());
 6305              		.loc 9 29 40 discriminator 2
 6306 2286 488B85A8 		movq	-1624(%rbp), %rax
 6306      F9FFFF
 6307 228d 4889C7   		movq	%rax, %rdi
 6308 2290 FFD2     		call	*%rdx
 6309              	.LVL6:
 6310 2292 4989C4   		movq	%rax, %r12
  30:../ExecuteTest.h **** 	}
 6311              		.loc 9 30 4 discriminator 2
 6312 2295 488B85A8 		movq	-1624(%rbp), %rax
 6312      F9FFFF
 6313 229c 4889C7   		movq	%rax, %rdi
 6314 229f E8000000 		call	_ZNK8UnitTest15AssertException10LineNumberEv@PLT
 6314      00
 6315 22a4 4189C5   		movl	%eax, %r13d
 6316 22a7 488B85A8 		movq	-1624(%rbp), %rax
 6316      F9FFFF
 6317 22ae 4889C7   		movq	%rax, %rdi
 6318 22b1 E8000000 		call	_ZNK8UnitTest15AssertException8FilenameEv@PLT
 6318      00
  30:../ExecuteTest.h **** 	}
 6319              		.loc 9 30 4 is_stmt 0 discriminator 1
 6320 22b6 4889C1   		movq	%rax, %rcx
  30:../ExecuteTest.h **** 	}
 6321              		.loc 9 30 42 is_stmt 1 discriminator 1
 6322 22b9 488B8590 		movq	-1648(%rbp), %rax
 6322      F9FFFF
 6323 22c0 488B10   		movq	(%rax), %rdx
  30:../ExecuteTest.h **** 	}
 6324              		.loc 9 30 24 discriminator 1
 6325 22c3 488B8590 		movq	-1648(%rbp), %rax
 6325      F9FFFF
 6326 22ca 488B7008 		movq	8(%rax), %rsi
  30:../ExecuteTest.h **** 	}
 6327              		.loc 9 30 4 discriminator 1
 6328 22ce 488D85B0 		leaq	-1616(%rbp), %rax
 6328      F9FFFF
 6329 22d5 4589E8   		movl	%r13d, %r8d
 6330 22d8 4889C7   		movq	%rax, %rdi
 6331 22db E8000000 		call	_ZN8UnitTest11TestDetailsC1EPKcS2_S2_i@PLT
 6331      00
  29:../ExecuteTest.h **** 			TestDetails(details.testName, details.suiteName, e.Filename(), e.LineNumber()), e.what());
 6332              		.loc 9 29 40
 6333 22e0 488D85B0 		leaq	-1616(%rbp), %rax
 6333      F9FFFF
 6334 22e7 4C89E2   		movq	%r12, %rdx
 6335 22ea 4889C6   		movq	%rax, %rsi
 6336 22ed 4889DF   		movq	%rbx, %rdi
 6337 22f0 E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc@PLT
 6337      00
 6338              	.LEHE140:
  27:../ExecuteTest.h **** 	{
 6339              		.loc 9 27 2
 6340 22f5 E8000000 		call	__cxa_end_catch@PLT
 6340      00
 6341              	.LBE99:
 6342              		.loc 9 42 1
 6343 22fa E9340100 		jmp	.L295
 6343      00
 6344              	.L301:
 6345              	.LBB100:
  32:../ExecuteTest.h **** 	{
 6346              		.loc 9 32 2
 6347 22ff 4889C7   		movq	%rax, %rdi
 6348 2302 E8000000 		call	__cxa_begin_catch@PLT
 6348      00
  32:../ExecuteTest.h **** 	{
 6349              		.loc 9 32 31
 6350 2307 488985A0 		movq	%rax, -1632(%rbp)
 6350      F9FFFF
 6351              	.LBB101:
  34:../ExecuteTest.h **** 		stream << "Unhandled exception: " << e.what();
 6352              		.loc 9 34 19
 6353 230e 488D85D0 		leaq	-1584(%rbp), %rax
 6353      F9FFFF
 6354 2315 4889C7   		movq	%rax, %rdi
 6355              	.LEHB141:
 6356 2318 E8000000 		call	_ZN8UnitTest15MemoryOutStreamC1Ev
 6356      00
 6357              	.LEHE141:
  35:../ExecuteTest.h **** 		CurrentTest::Results()->OnTestFailure(details, stream.GetText());
 6358              		.loc 9 35 37
 6359 231d 488D85D0 		leaq	-1584(%rbp), %rax
 6359      F9FFFF
 6360 2324 488D1500 		leaq	.LC45(%rip), %rdx
 6360      000000
 6361 232b 4889D6   		movq	%rdx, %rsi
 6362 232e 4889C7   		movq	%rax, %rdi
 6363              	.LEHB142:
 6364 2331 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 6364      00
 6365 2336 4889C3   		movq	%rax, %rbx
  35:../ExecuteTest.h **** 		CurrentTest::Results()->OnTestFailure(details, stream.GetText());
 6366              		.loc 9 35 46
 6367 2339 488B85A0 		movq	-1632(%rbp), %rax
 6367      F9FFFF
 6368 2340 488B00   		movq	(%rax), %rax
 6369 2343 4883C010 		addq	$16, %rax
 6370 2347 488B10   		movq	(%rax), %rdx
  35:../ExecuteTest.h **** 		CurrentTest::Results()->OnTestFailure(details, stream.GetText());
 6371              		.loc 9 35 37
 6372 234a 488B85A0 		movq	-1632(%rbp), %rax
 6372      F9FFFF
 6373 2351 4889C7   		movq	%rax, %rdi
 6374 2354 FFD2     		call	*%rdx
 6375              	.LVL7:
 6376 2356 4889C6   		movq	%rax, %rsi
 6377 2359 4889DF   		movq	%rbx, %rdi
 6378 235c E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 6378      00
  36:../ExecuteTest.h **** 	}
 6379              		.loc 9 36 23
 6380 2361 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv@PLT
 6380      00
  36:../ExecuteTest.h **** 	}
 6381              		.loc 9 36 40
 6382 2366 488B18   		movq	(%rax), %rbx
 6383 2369 488D85D0 		leaq	-1584(%rbp), %rax
 6383      F9FFFF
 6384 2370 4889C7   		movq	%rax, %rdi
 6385 2373 E8000000 		call	_ZNK8UnitTest15MemoryOutStream7GetTextEv@PLT
 6385      00
  36:../ExecuteTest.h **** 	}
 6386              		.loc 9 36 40 is_stmt 0 discriminator 1
 6387 2378 4889C2   		movq	%rax, %rdx
 6388 237b 488B8590 		movq	-1648(%rbp), %rax
 6388      F9FFFF
 6389 2382 4889C6   		movq	%rax, %rsi
 6390 2385 4889DF   		movq	%rbx, %rdi
 6391 2388 E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc@PLT
 6391      00
 6392              	.LEHE142:
  37:../ExecuteTest.h **** 	catch (...)
 6393              		.loc 9 37 2 is_stmt 1
 6394 238d 488D85D0 		leaq	-1584(%rbp), %rax
 6394      F9FFFF
 6395 2394 4889C7   		movq	%rax, %rdi
 6396              	.LEHB143:
 6397 2397 E8000000 		call	_ZN8UnitTest15MemoryOutStreamD1Ev
 6397      00
 6398              	.LEHE143:
 6399              	.LBE101:
  32:../ExecuteTest.h **** 	{
 6400              		.loc 9 32 2
 6401 239c E8000000 		call	__cxa_end_catch@PLT
 6401      00
 6402              	.LBE100:
 6403              		.loc 9 42 1
 6404 23a1 E98D0000 		jmp	.L295
 6404      00
 6405              	.L315:
  38:../ExecuteTest.h **** 	{
 6406              		.loc 9 38 2
 6407 23a6 4889C7   		movq	%rax, %rdi
 6408 23a9 E8000000 		call	__cxa_begin_catch@PLT
 6408      00
 6409              	.LEHB144:
  40:../ExecuteTest.h **** 	}
 6410              		.loc 9 40 23
 6411 23ae E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv@PLT
 6411      00
  40:../ExecuteTest.h **** 	}
 6412              		.loc 9 40 40
 6413 23b3 488B00   		movq	(%rax), %rax
 6414 23b6 488B8D90 		movq	-1648(%rbp), %rcx
 6414      F9FFFF
 6415 23bd 488D1500 		leaq	.LC62(%rip), %rdx
 6415      000000
 6416 23c4 4889CE   		movq	%rcx, %rsi
 6417 23c7 4889C7   		movq	%rax, %rdi
 6418 23ca E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc@PLT
 6418      00
 6419              	.LEHE144:
 6420              	.LEHB145:
  38:../ExecuteTest.h **** 	{
 6421              		.loc 9 38 2
 6422 23cf E8000000 		call	__cxa_end_catch@PLT
 6422      00
 6423              		.loc 9 42 1
 6424 23d4 EB5D     		jmp	.L295
 6425              	.L311:
 6426 23d6 F30F1EFA 		endbr64
 6427              	.LBB103:
  27:../ExecuteTest.h **** 	{
 6428              		.loc 9 27 2
 6429 23da 4889C3   		movq	%rax, %rbx
 6430 23dd E8000000 		call	__cxa_end_catch@PLT
 6430      00
 6431 23e2 4889D8   		movq	%rbx, %rax
 6432 23e5 4889C7   		movq	%rax, %rdi
 6433 23e8 E8000000 		call	_Unwind_Resume@PLT
 6433      00
 6434              	.LEHE145:
 6435              	.L313:
 6436 23ed F30F1EFA 		endbr64
 6437              	.LBE103:
 6438              	.LBB104:
 6439              	.LBB102:
  37:../ExecuteTest.h **** 	catch (...)
 6440              		.loc 9 37 2
 6441 23f1 4889C3   		movq	%rax, %rbx
 6442 23f4 488D85D0 		leaq	-1584(%rbp), %rax
 6442      F9FFFF
 6443 23fb 4889C7   		movq	%rax, %rdi
 6444 23fe E8000000 		call	_ZN8UnitTest15MemoryOutStreamD1Ev
 6444      00
 6445 2403 EB07     		jmp	.L306
 6446              	.L312:
 6447 2405 F30F1EFA 		endbr64
 6448              	.LBE102:
  32:../ExecuteTest.h **** 	{
 6449              		.loc 9 32 2
 6450 2409 4889C3   		movq	%rax, %rbx
 6451              	.L306:
 6452 240c E8000000 		call	__cxa_end_catch@PLT
 6452      00
 6453 2411 4889D8   		movq	%rbx, %rax
 6454 2414 4889C7   		movq	%rax, %rdi
 6455              	.LEHB146:
 6456 2417 E8000000 		call	_Unwind_Resume@PLT
 6456      00
 6457              	.LEHE146:
 6458              	.L314:
 6459 241c F30F1EFA 		endbr64
 6460              	.LBE104:
  38:../ExecuteTest.h **** 	{
 6461              		.loc 9 38 2
 6462 2420 4889C3   		movq	%rax, %rbx
 6463 2423 E8000000 		call	__cxa_end_catch@PLT
 6463      00
 6464 2428 4889D8   		movq	%rbx, %rax
 6465 242b 4889C7   		movq	%rax, %rdi
 6466              	.LEHB147:
 6467 242e E8000000 		call	_Unwind_Resume@PLT
 6467      00
 6468              	.LEHE147:
 6469              	.L295:
 6470              		.loc 9 42 1
 6471 2433 488B45D8 		movq	-40(%rbp), %rax
 6472 2437 64482B04 		subq	%fs:40, %rax
 6472      25280000 
 6472      00
 6473 2440 7405     		je	.L308
 6474 2442 E8000000 		call	__stack_chk_fail@PLT
 6474      00
 6475              	.L308:
 6476 2447 4881C458 		addq	$1624, %rsp
 6476      060000
 6477 244e 5B       		popq	%rbx
 6478 244f 415C     		popq	%r12
 6479 2451 415D     		popq	%r13
 6480 2453 5D       		popq	%rbp
 6481              		.cfi_def_cfa 7, 8
 6482 2454 C3       		ret
 6483              		.cfi_endproc
 6484              	.LFE1550:
 6485              		.section	.gcc_except_table
 6486              		.align 4
 6487              	.LLSDA1550:
 6488 03e0 FF       		.byte	0xff
 6489 03e1 9B       		.byte	0x9b
 6490 03e2 59       		.uleb128 .LLSDATT1550-.LLSDATTD1550
 6491              	.LLSDATTD1550:
 6492 03e3 01       		.byte	0x1
 6493 03e4 43       		.uleb128 .LLSDACSE1550-.LLSDACSB1550
 6494              	.LLSDACSB1550:
 6495 03e5 31       		.uleb128 .LEHB136-.LFB1550
 6496 03e6 05       		.uleb128 .LEHE136-.LEHB136
 6497 03e7 00       		.uleb128 0
 6498 03e8 00       		.uleb128 0
 6499 03e9 4A       		.uleb128 .LEHB137-.LFB1550
 6500 03ea 05       		.uleb128 .LEHE137-.LEHB137
 6501 03eb DF01     		.uleb128 .L309-.LFB1550
 6502 03ed 05       		.uleb128 0x5
 6503 03ee 9601     		.uleb128 .LEHB138-.LFB1550
 6504 03f0 14       		.uleb128 .LEHE138-.LEHB138
 6505 03f1 BE01     		.uleb128 .L310-.LFB1550
 6506 03f3 07       		.uleb128 0x7
 6507 03f4 B401     		.uleb128 .LEHB139-.LFB1550
 6508 03f6 05       		.uleb128 .LEHE139-.LEHB139
 6509 03f7 DF01     		.uleb128 .L309-.LFB1550
 6510 03f9 05       		.uleb128 0x5
 6511 03fa 8702     		.uleb128 .LEHB140-.LFB1550
 6512 03fc 8801     		.uleb128 .LEHE140-.LEHB140
 6513 03fe F004     		.uleb128 .L311-.LFB1550
 6514 0400 00       		.uleb128 0
 6515 0401 B203     		.uleb128 .LEHB141-.LFB1550
 6516 0403 05       		.uleb128 .LEHE141-.LEHB141
 6517 0404 9F05     		.uleb128 .L312-.LFB1550
 6518 0406 00       		.uleb128 0
 6519 0407 CB03     		.uleb128 .LEHB142-.LFB1550
 6520 0409 5C       		.uleb128 .LEHE142-.LEHB142
 6521 040a 8705     		.uleb128 .L313-.LFB1550
 6522 040c 00       		.uleb128 0
 6523 040d B104     		.uleb128 .LEHB143-.LFB1550
 6524 040f 05       		.uleb128 .LEHE143-.LEHB143
 6525 0410 9F05     		.uleb128 .L312-.LFB1550
 6526 0412 00       		.uleb128 0
 6527 0413 C804     		.uleb128 .LEHB144-.LFB1550
 6528 0415 21       		.uleb128 .LEHE144-.LEHB144
 6529 0416 B605     		.uleb128 .L314-.LFB1550
 6530 0418 00       		.uleb128 0
 6531 0419 E904     		.uleb128 .LEHB145-.LFB1550
 6532 041b 1E       		.uleb128 .LEHE145-.LEHB145
 6533 041c 00       		.uleb128 0
 6534 041d 00       		.uleb128 0
 6535 041e B105     		.uleb128 .LEHB146-.LFB1550
 6536 0420 05       		.uleb128 .LEHE146-.LEHB146
 6537 0421 00       		.uleb128 0
 6538 0422 00       		.uleb128 0
 6539 0423 C805     		.uleb128 .LEHB147-.LFB1550
 6540 0425 05       		.uleb128 .LEHE147-.LEHB147
 6541 0426 00       		.uleb128 0
 6542 0427 00       		.uleb128 0
 6543              	.LLSDACSE1550:
 6544 0428 03       		.byte	0x3
 6545 0429 00       		.byte	0
 6546 042a 02       		.byte	0x2
 6547 042b 7D       		.byte	0x7d
 6548 042c 01       		.byte	0x1
 6549 042d 7D       		.byte	0x7d
 6550 042e 00       		.byte	0
 6551 042f 7D       		.byte	0x7d
 6552              		.align 4
 6553 0430 00000000 		.long	0
 6554              	
 6555 0434 00000000 		.long	DW.ref._ZTISt9exception-.
 6556 0438 00000000 		.long	DW.ref._ZTIN8UnitTest15AssertExceptionE-.
 6557              	.LLSDATT1550:
 6558              		.text
 6560              		.section	.text._ZN8UnitTest8AreCloseIfffEEbRKT_RKT0_RKT1_,"axG",@progbits,_ZN8UnitTest8AreCloseIff
 6561              		.weak	_ZN8UnitTest8AreCloseIfffEEbRKT_RKT0_RKT1_
 6563              	_ZN8UnitTest8AreCloseIfffEEbRKT_RKT0_RKT1_:
 6564              	.LFB1578:
  39:../Checks.h   **** {
 6565              		.loc 6 39 6
 6566              		.cfi_startproc
 6567 0000 F30F1EFA 		endbr64
 6568 0004 55       		pushq	%rbp
 6569              		.cfi_def_cfa_offset 16
 6570              		.cfi_offset 6, -16
 6571 0005 4889E5   		movq	%rsp, %rbp
 6572              		.cfi_def_cfa_register 6
 6573 0008 48897DF8 		movq	%rdi, -8(%rbp)
 6574 000c 488975F0 		movq	%rsi, -16(%rbp)
 6575 0010 488955E8 		movq	%rdx, -24(%rbp)
  41:../Checks.h   **** }
 6576              		.loc 6 41 20
 6577 0014 488B45F0 		movq	-16(%rbp), %rax
 6578 0018 F30F1000 		movss	(%rax), %xmm0
  41:../Checks.h   **** }
 6579              		.loc 6 41 33
 6580 001c 488B45F8 		movq	-8(%rbp), %rax
 6581 0020 F30F1008 		movss	(%rax), %xmm1
 6582 0024 488B45E8 		movq	-24(%rbp), %rax
 6583 0028 F30F1010 		movss	(%rax), %xmm2
 6584 002c F30F5CCA 		subss	%xmm2, %xmm1
  41:../Checks.h   **** }
 6585              		.loc 6 41 47
 6586 0030 0F2FC1   		comiss	%xmm1, %xmm0
 6587 0033 7228     		jb	.L317
  41:../Checks.h   **** }
 6588              		.loc 6 41 58 discriminator 1
 6589 0035 488B45F0 		movq	-16(%rbp), %rax
 6590 0039 F30F1008 		movss	(%rax), %xmm1
  41:../Checks.h   **** }
 6591              		.loc 6 41 71 discriminator 1
 6592 003d 488B45F8 		movq	-8(%rbp), %rax
 6593 0041 F30F1010 		movss	(%rax), %xmm2
 6594 0045 488B45E8 		movq	-24(%rbp), %rax
 6595 0049 F30F1000 		movss	(%rax), %xmm0
 6596 004d F30F58C2 		addss	%xmm2, %xmm0
  41:../Checks.h   **** }
 6597              		.loc 6 41 47 discriminator 1
 6598 0051 0F2FC1   		comiss	%xmm1, %xmm0
 6599 0054 7207     		jb	.L317
  41:../Checks.h   **** }
 6600              		.loc 6 41 47 is_stmt 0 discriminator 3
 6601 0056 B8010000 		movl	$1, %eax
 6601      00
 6602 005b EB05     		jmp	.L320
 6603              	.L317:
  41:../Checks.h   **** }
 6604              		.loc 6 41 47 discriminator 4
 6605 005d B8000000 		movl	$0, %eax
 6605      00
 6606              	.L320:
  42:../Checks.h   **** 
 6607              		.loc 6 42 1 is_stmt 1 discriminator 6
 6608 0062 5D       		popq	%rbp
 6609              		.cfi_def_cfa 7, 8
 6610 0063 C3       		ret
 6611              		.cfi_endproc
 6612              	.LFE1578:
 6614              		.section	.text._ZN8UnitTest13ArrayAreCloseIA3_fS1_fEEbRKT_RKT0_iRKT1_,"axG",@progbits,_ZN8UnitTest
 6615              		.weak	_ZN8UnitTest13ArrayAreCloseIA3_fS1_fEEbRKT_RKT0_iRKT1_
 6617              	_ZN8UnitTest13ArrayAreCloseIA3_fS1_fEEbRKT_RKT0_iRKT1_:
 6618              	.LFB1580:
  87:../Checks.h   **** {
 6619              		.loc 6 87 6
 6620              		.cfi_startproc
 6621 0000 F30F1EFA 		endbr64
 6622 0004 55       		pushq	%rbp
 6623              		.cfi_def_cfa_offset 16
 6624              		.cfi_offset 6, -16
 6625 0005 4889E5   		movq	%rsp, %rbp
 6626              		.cfi_def_cfa_register 6
 6627 0008 4883EC30 		subq	$48, %rsp
 6628 000c 48897DE8 		movq	%rdi, -24(%rbp)
 6629 0010 488975E0 		movq	%rsi, -32(%rbp)
 6630 0014 8955DC   		movl	%edx, -36(%rbp)
 6631 0017 48894DD0 		movq	%rcx, -48(%rbp)
  89:../Checks.h   ****     for (int i = 0; i < count; ++i)
 6632              		.loc 6 89 10
 6633 001b C645FB01 		movb	$1, -5(%rbp)
 6634              	.LBB105:
  90:../Checks.h   ****         equal &= AreClose(expected[i], actual[i], tolerance);
 6635              		.loc 6 90 14
 6636 001f C745FC00 		movl	$0, -4(%rbp)
 6636      000000
  90:../Checks.h   ****         equal &= AreClose(expected[i], actual[i], tolerance);
 6637              		.loc 6 90 5
 6638 0026 EB4E     		jmp	.L325
 6639              	.L326:
  91:../Checks.h   ****     return equal;
 6640              		.loc 6 91 46 discriminator 3
 6641 0028 8B45FC   		movl	-4(%rbp), %eax
 6642 002b 4898     		cltq
 6643 002d 488D1485 		leaq	0(,%rax,4), %rdx
 6643      00000000 
 6644 0035 488B45E0 		movq	-32(%rbp), %rax
 6645 0039 488D3402 		leaq	(%rdx,%rax), %rsi
  91:../Checks.h   ****     return equal;
 6646              		.loc 6 91 35 discriminator 3
 6647 003d 8B45FC   		movl	-4(%rbp), %eax
 6648 0040 4898     		cltq
 6649 0042 488D1485 		leaq	0(,%rax,4), %rdx
 6649      00000000 
 6650 004a 488B45E8 		movq	-24(%rbp), %rax
 6651 004e 488D0C02 		leaq	(%rdx,%rax), %rcx
  91:../Checks.h   ****     return equal;
 6652              		.loc 6 91 26 discriminator 3
 6653 0052 488B45D0 		movq	-48(%rbp), %rax
 6654 0056 4889C2   		movq	%rax, %rdx
 6655 0059 4889CF   		movq	%rcx, %rdi
 6656 005c E8000000 		call	_ZN8UnitTest8AreCloseIfffEEbRKT_RKT0_RKT1_
 6656      00
  91:../Checks.h   ****     return equal;
 6657              		.loc 6 91 15 discriminator 3
 6658 0061 0FB655FB 		movzbl	-5(%rbp), %edx
 6659 0065 0FB6C0   		movzbl	%al, %eax
 6660 0068 21D0     		andl	%edx, %eax
 6661 006a 85C0     		testl	%eax, %eax
 6662 006c 0F95C0   		setne	%al
 6663 006f 8845FB   		movb	%al, -5(%rbp)
  90:../Checks.h   ****         equal &= AreClose(expected[i], actual[i], tolerance);
 6664              		.loc 6 90 5 discriminator 3
 6665 0072 8345FC01 		addl	$1, -4(%rbp)
 6666              	.L325:
  90:../Checks.h   ****         equal &= AreClose(expected[i], actual[i], tolerance);
 6667              		.loc 6 90 23 discriminator 1
 6668 0076 8B45FC   		movl	-4(%rbp), %eax
 6669 0079 3B45DC   		cmpl	-36(%rbp), %eax
 6670 007c 7CAA     		jl	.L326
 6671              	.LBE105:
  92:../Checks.h   **** }
 6672              		.loc 6 92 12
 6673 007e 0FB645FB 		movzbl	-5(%rbp), %eax
  93:../Checks.h   **** 
 6674              		.loc 6 93 1
 6675 0082 C9       		leave
 6676              		.cfi_def_cfa 7, 8
 6677 0083 C3       		ret
 6678              		.cfi_endproc
 6679              	.LFE1580:
 6681              		.section	.text._ZN9__gnu_cxx13new_allocatorIfEC2Ev,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIfE
 6682              		.align 2
 6683              		.weak	_ZN9__gnu_cxx13new_allocatorIfEC2Ev
 6685              	_ZN9__gnu_cxx13new_allocatorIfEC2Ev:
 6686              	.LFB1582:
 6687              		.file 10 "/usr/include/c++/11/ext/new_allocator.h"
   1:/usr/include/c++/11/ext/new_allocator.h **** // Allocator that wraps operator new -*- C++ -*-
   2:/usr/include/c++/11/ext/new_allocator.h **** 
   3:/usr/include/c++/11/ext/new_allocator.h **** // Copyright (C) 2001-2021 Free Software Foundation, Inc.
   4:/usr/include/c++/11/ext/new_allocator.h **** //
   5:/usr/include/c++/11/ext/new_allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/11/ext/new_allocator.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/11/ext/new_allocator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/11/ext/new_allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/11/ext/new_allocator.h **** // any later version.
  10:/usr/include/c++/11/ext/new_allocator.h **** 
  11:/usr/include/c++/11/ext/new_allocator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/11/ext/new_allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/11/ext/new_allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/11/ext/new_allocator.h **** // GNU General Public License for more details.
  15:/usr/include/c++/11/ext/new_allocator.h **** 
  16:/usr/include/c++/11/ext/new_allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/11/ext/new_allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/11/ext/new_allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/11/ext/new_allocator.h **** 
  20:/usr/include/c++/11/ext/new_allocator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/11/ext/new_allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/11/ext/new_allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/11/ext/new_allocator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/11/ext/new_allocator.h **** 
  25:/usr/include/c++/11/ext/new_allocator.h **** /** @file ext/new_allocator.h
  26:/usr/include/c++/11/ext/new_allocator.h ****  *  This file is a GNU extension to the Standard C++ Library.
  27:/usr/include/c++/11/ext/new_allocator.h ****  */
  28:/usr/include/c++/11/ext/new_allocator.h **** 
  29:/usr/include/c++/11/ext/new_allocator.h **** #ifndef _NEW_ALLOCATOR_H
  30:/usr/include/c++/11/ext/new_allocator.h **** #define _NEW_ALLOCATOR_H 1
  31:/usr/include/c++/11/ext/new_allocator.h **** 
  32:/usr/include/c++/11/ext/new_allocator.h **** #include <bits/c++config.h>
  33:/usr/include/c++/11/ext/new_allocator.h **** #include <new>
  34:/usr/include/c++/11/ext/new_allocator.h **** #include <bits/functexcept.h>
  35:/usr/include/c++/11/ext/new_allocator.h **** #include <bits/move.h>
  36:/usr/include/c++/11/ext/new_allocator.h **** #if __cplusplus >= 201103L
  37:/usr/include/c++/11/ext/new_allocator.h **** #include <type_traits>
  38:/usr/include/c++/11/ext/new_allocator.h **** #endif
  39:/usr/include/c++/11/ext/new_allocator.h **** 
  40:/usr/include/c++/11/ext/new_allocator.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  41:/usr/include/c++/11/ext/new_allocator.h **** {
  42:/usr/include/c++/11/ext/new_allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  43:/usr/include/c++/11/ext/new_allocator.h **** 
  44:/usr/include/c++/11/ext/new_allocator.h ****   /**
  45:/usr/include/c++/11/ext/new_allocator.h ****    *  @brief  An allocator that uses global new, as per C++03 [20.4.1].
  46:/usr/include/c++/11/ext/new_allocator.h ****    *  @ingroup allocators
  47:/usr/include/c++/11/ext/new_allocator.h ****    *
  48:/usr/include/c++/11/ext/new_allocator.h ****    *  This is precisely the allocator defined in the C++ Standard.
  49:/usr/include/c++/11/ext/new_allocator.h ****    *    - all allocation calls operator new
  50:/usr/include/c++/11/ext/new_allocator.h ****    *    - all deallocation calls operator delete
  51:/usr/include/c++/11/ext/new_allocator.h ****    *
  52:/usr/include/c++/11/ext/new_allocator.h ****    *  @tparam  _Tp  Type of allocated object.
  53:/usr/include/c++/11/ext/new_allocator.h ****    */
  54:/usr/include/c++/11/ext/new_allocator.h ****   template<typename _Tp>
  55:/usr/include/c++/11/ext/new_allocator.h ****     class new_allocator
  56:/usr/include/c++/11/ext/new_allocator.h ****     {
  57:/usr/include/c++/11/ext/new_allocator.h ****     public:
  58:/usr/include/c++/11/ext/new_allocator.h ****       typedef _Tp        value_type;
  59:/usr/include/c++/11/ext/new_allocator.h ****       typedef std::size_t     size_type;
  60:/usr/include/c++/11/ext/new_allocator.h ****       typedef std::ptrdiff_t  difference_type;
  61:/usr/include/c++/11/ext/new_allocator.h **** #if __cplusplus <= 201703L
  62:/usr/include/c++/11/ext/new_allocator.h ****       typedef _Tp*       pointer;
  63:/usr/include/c++/11/ext/new_allocator.h ****       typedef const _Tp* const_pointer;
  64:/usr/include/c++/11/ext/new_allocator.h ****       typedef _Tp&       reference;
  65:/usr/include/c++/11/ext/new_allocator.h ****       typedef const _Tp& const_reference;
  66:/usr/include/c++/11/ext/new_allocator.h **** 
  67:/usr/include/c++/11/ext/new_allocator.h ****       template<typename _Tp1>
  68:/usr/include/c++/11/ext/new_allocator.h **** 	struct rebind
  69:/usr/include/c++/11/ext/new_allocator.h **** 	{ typedef new_allocator<_Tp1> other; };
  70:/usr/include/c++/11/ext/new_allocator.h **** #endif
  71:/usr/include/c++/11/ext/new_allocator.h **** 
  72:/usr/include/c++/11/ext/new_allocator.h **** #if __cplusplus >= 201103L
  73:/usr/include/c++/11/ext/new_allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  74:/usr/include/c++/11/ext/new_allocator.h ****       // 2103. propagate_on_container_move_assignment
  75:/usr/include/c++/11/ext/new_allocator.h ****       typedef std::true_type propagate_on_container_move_assignment;
  76:/usr/include/c++/11/ext/new_allocator.h **** #endif
  77:/usr/include/c++/11/ext/new_allocator.h **** 
  78:/usr/include/c++/11/ext/new_allocator.h ****       _GLIBCXX20_CONSTEXPR
  79:/usr/include/c++/11/ext/new_allocator.h ****       new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 6688              		.loc 10 79 7
 6689              		.cfi_startproc
 6690 0000 F30F1EFA 		endbr64
 6691 0004 55       		pushq	%rbp
 6692              		.cfi_def_cfa_offset 16
 6693              		.cfi_offset 6, -16
 6694 0005 4889E5   		movq	%rsp, %rbp
 6695              		.cfi_def_cfa_register 6
 6696 0008 48897DF8 		movq	%rdi, -8(%rbp)
 6697              		.loc 10 79 47
 6698 000c 90       		nop
 6699 000d 5D       		popq	%rbp
 6700              		.cfi_def_cfa 7, 8
 6701 000e C3       		ret
 6702              		.cfi_endproc
 6703              	.LFE1582:
 6705              		.weak	_ZN9__gnu_cxx13new_allocatorIfEC1Ev
 6706              		.set	_ZN9__gnu_cxx13new_allocatorIfEC1Ev,_ZN9__gnu_cxx13new_allocatorIfEC2Ev
 6707              		.section	.text._ZN9__gnu_cxx13new_allocatorIfED2Ev,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIfE
 6708              		.align 2
 6709              		.weak	_ZN9__gnu_cxx13new_allocatorIfED2Ev
 6711              	_ZN9__gnu_cxx13new_allocatorIfED2Ev:
 6712              	.LFB1585:
  80:/usr/include/c++/11/ext/new_allocator.h **** 
  81:/usr/include/c++/11/ext/new_allocator.h ****       _GLIBCXX20_CONSTEXPR
  82:/usr/include/c++/11/ext/new_allocator.h ****       new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
  83:/usr/include/c++/11/ext/new_allocator.h **** 
  84:/usr/include/c++/11/ext/new_allocator.h ****       template<typename _Tp1>
  85:/usr/include/c++/11/ext/new_allocator.h **** 	_GLIBCXX20_CONSTEXPR
  86:/usr/include/c++/11/ext/new_allocator.h **** 	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
  87:/usr/include/c++/11/ext/new_allocator.h **** 
  88:/usr/include/c++/11/ext/new_allocator.h **** #if __cplusplus <= 201703L
  89:/usr/include/c++/11/ext/new_allocator.h ****       ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 6713              		.loc 10 89 7
 6714              		.cfi_startproc
 6715 0000 F30F1EFA 		endbr64
 6716 0004 55       		pushq	%rbp
 6717              		.cfi_def_cfa_offset 16
 6718              		.cfi_offset 6, -16
 6719 0005 4889E5   		movq	%rsp, %rbp
 6720              		.cfi_def_cfa_register 6
 6721 0008 48897DF8 		movq	%rdi, -8(%rbp)
 6722              		.loc 10 89 48
 6723 000c 90       		nop
 6724 000d 5D       		popq	%rbp
 6725              		.cfi_def_cfa 7, 8
 6726 000e C3       		ret
 6727              		.cfi_endproc
 6728              	.LFE1585:
 6730              		.weak	_ZN9__gnu_cxx13new_allocatorIfED1Ev
 6731              		.set	_ZN9__gnu_cxx13new_allocatorIfED1Ev,_ZN9__gnu_cxx13new_allocatorIfED2Ev
 6732              		.section	.rodata
 6733 061e 0000     		.align 8
 6734              	.LC63:
 6735 0620 63616E6E 		.string	"cannot create std::vector larger than max_size()"
 6735      6F742063 
 6735      72656174 
 6735      65207374 
 6735      643A3A76 
 6736              		.section	.text._ZNSt6vectorIfSaIfEE17_S_check_init_lenEmRKS0_,"axG",@progbits,_ZNSt6vectorIfSaIfEE
 6737              		.weak	_ZNSt6vectorIfSaIfEE17_S_check_init_lenEmRKS0_
 6739              	_ZNSt6vectorIfSaIfEE17_S_check_init_lenEmRKS0_:
 6740              	.LFB1587:
1048:/usr/include/c++/11/bits/stl_vector.h **** 
1049:/usr/include/c++/11/bits/stl_vector.h ****       /**
1050:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Subscript access to the data contained in the %vector.
1051:/usr/include/c++/11/bits/stl_vector.h ****        *  @param __n The index of the element for which data should be
1052:/usr/include/c++/11/bits/stl_vector.h ****        *  accessed.
1053:/usr/include/c++/11/bits/stl_vector.h ****        *  @return  Read-only (constant) reference to data.
1054:/usr/include/c++/11/bits/stl_vector.h ****        *
1055:/usr/include/c++/11/bits/stl_vector.h ****        *  This operator allows for easy, array-style, data access.
1056:/usr/include/c++/11/bits/stl_vector.h ****        *  Note that data access with this operator is unchecked and
1057:/usr/include/c++/11/bits/stl_vector.h ****        *  out_of_range lookups are not defined. (For checked lookups
1058:/usr/include/c++/11/bits/stl_vector.h ****        *  see at().)
1059:/usr/include/c++/11/bits/stl_vector.h ****        */
1060:/usr/include/c++/11/bits/stl_vector.h ****       const_reference
1061:/usr/include/c++/11/bits/stl_vector.h ****       operator[](size_type __n) const _GLIBCXX_NOEXCEPT
1062:/usr/include/c++/11/bits/stl_vector.h ****       {
1063:/usr/include/c++/11/bits/stl_vector.h **** 	__glibcxx_requires_subscript(__n);
1064:/usr/include/c++/11/bits/stl_vector.h **** 	return *(this->_M_impl._M_start + __n);
1065:/usr/include/c++/11/bits/stl_vector.h ****       }
1066:/usr/include/c++/11/bits/stl_vector.h **** 
1067:/usr/include/c++/11/bits/stl_vector.h ****     protected:
1068:/usr/include/c++/11/bits/stl_vector.h ****       /// Safety check used only from at().
1069:/usr/include/c++/11/bits/stl_vector.h ****       void
1070:/usr/include/c++/11/bits/stl_vector.h ****       _M_range_check(size_type __n) const
1071:/usr/include/c++/11/bits/stl_vector.h ****       {
1072:/usr/include/c++/11/bits/stl_vector.h **** 	if (__n >= this->size())
1073:/usr/include/c++/11/bits/stl_vector.h **** 	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
1074:/usr/include/c++/11/bits/stl_vector.h **** 				       "(which is %zu) >= this->size() "
1075:/usr/include/c++/11/bits/stl_vector.h **** 				       "(which is %zu)"),
1076:/usr/include/c++/11/bits/stl_vector.h **** 				   __n, this->size());
1077:/usr/include/c++/11/bits/stl_vector.h ****       }
1078:/usr/include/c++/11/bits/stl_vector.h **** 
1079:/usr/include/c++/11/bits/stl_vector.h ****     public:
1080:/usr/include/c++/11/bits/stl_vector.h ****       /**
1081:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Provides access to the data contained in the %vector.
1082:/usr/include/c++/11/bits/stl_vector.h ****        *  @param __n The index of the element for which data should be
1083:/usr/include/c++/11/bits/stl_vector.h ****        *  accessed.
1084:/usr/include/c++/11/bits/stl_vector.h ****        *  @return  Read/write reference to data.
1085:/usr/include/c++/11/bits/stl_vector.h ****        *  @throw  std::out_of_range  If @a __n is an invalid index.
1086:/usr/include/c++/11/bits/stl_vector.h ****        *
1087:/usr/include/c++/11/bits/stl_vector.h ****        *  This function provides for safer data access.  The parameter
1088:/usr/include/c++/11/bits/stl_vector.h ****        *  is first checked that it is in the range of the vector.  The
1089:/usr/include/c++/11/bits/stl_vector.h ****        *  function throws out_of_range if the check fails.
1090:/usr/include/c++/11/bits/stl_vector.h ****        */
1091:/usr/include/c++/11/bits/stl_vector.h ****       reference
1092:/usr/include/c++/11/bits/stl_vector.h ****       at(size_type __n)
1093:/usr/include/c++/11/bits/stl_vector.h ****       {
1094:/usr/include/c++/11/bits/stl_vector.h **** 	_M_range_check(__n);
1095:/usr/include/c++/11/bits/stl_vector.h **** 	return (*this)[__n];
1096:/usr/include/c++/11/bits/stl_vector.h ****       }
1097:/usr/include/c++/11/bits/stl_vector.h **** 
1098:/usr/include/c++/11/bits/stl_vector.h ****       /**
1099:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Provides access to the data contained in the %vector.
1100:/usr/include/c++/11/bits/stl_vector.h ****        *  @param __n The index of the element for which data should be
1101:/usr/include/c++/11/bits/stl_vector.h ****        *  accessed.
1102:/usr/include/c++/11/bits/stl_vector.h ****        *  @return  Read-only (constant) reference to data.
1103:/usr/include/c++/11/bits/stl_vector.h ****        *  @throw  std::out_of_range  If @a __n is an invalid index.
1104:/usr/include/c++/11/bits/stl_vector.h ****        *
1105:/usr/include/c++/11/bits/stl_vector.h ****        *  This function provides for safer data access.  The parameter
1106:/usr/include/c++/11/bits/stl_vector.h ****        *  is first checked that it is in the range of the vector.  The
1107:/usr/include/c++/11/bits/stl_vector.h ****        *  function throws out_of_range if the check fails.
1108:/usr/include/c++/11/bits/stl_vector.h ****        */
1109:/usr/include/c++/11/bits/stl_vector.h ****       const_reference
1110:/usr/include/c++/11/bits/stl_vector.h ****       at(size_type __n) const
1111:/usr/include/c++/11/bits/stl_vector.h ****       {
1112:/usr/include/c++/11/bits/stl_vector.h **** 	_M_range_check(__n);
1113:/usr/include/c++/11/bits/stl_vector.h **** 	return (*this)[__n];
1114:/usr/include/c++/11/bits/stl_vector.h ****       }
1115:/usr/include/c++/11/bits/stl_vector.h **** 
1116:/usr/include/c++/11/bits/stl_vector.h ****       /**
1117:/usr/include/c++/11/bits/stl_vector.h ****        *  Returns a read/write reference to the data at the first
1118:/usr/include/c++/11/bits/stl_vector.h ****        *  element of the %vector.
1119:/usr/include/c++/11/bits/stl_vector.h ****        */
1120:/usr/include/c++/11/bits/stl_vector.h ****       reference
1121:/usr/include/c++/11/bits/stl_vector.h ****       front() _GLIBCXX_NOEXCEPT
1122:/usr/include/c++/11/bits/stl_vector.h ****       {
1123:/usr/include/c++/11/bits/stl_vector.h **** 	__glibcxx_requires_nonempty();
1124:/usr/include/c++/11/bits/stl_vector.h **** 	return *begin();
1125:/usr/include/c++/11/bits/stl_vector.h ****       }
1126:/usr/include/c++/11/bits/stl_vector.h **** 
1127:/usr/include/c++/11/bits/stl_vector.h ****       /**
1128:/usr/include/c++/11/bits/stl_vector.h ****        *  Returns a read-only (constant) reference to the data at the first
1129:/usr/include/c++/11/bits/stl_vector.h ****        *  element of the %vector.
1130:/usr/include/c++/11/bits/stl_vector.h ****        */
1131:/usr/include/c++/11/bits/stl_vector.h ****       const_reference
1132:/usr/include/c++/11/bits/stl_vector.h ****       front() const _GLIBCXX_NOEXCEPT
1133:/usr/include/c++/11/bits/stl_vector.h ****       {
1134:/usr/include/c++/11/bits/stl_vector.h **** 	__glibcxx_requires_nonempty();
1135:/usr/include/c++/11/bits/stl_vector.h **** 	return *begin();
1136:/usr/include/c++/11/bits/stl_vector.h ****       }
1137:/usr/include/c++/11/bits/stl_vector.h **** 
1138:/usr/include/c++/11/bits/stl_vector.h ****       /**
1139:/usr/include/c++/11/bits/stl_vector.h ****        *  Returns a read/write reference to the data at the last
1140:/usr/include/c++/11/bits/stl_vector.h ****        *  element of the %vector.
1141:/usr/include/c++/11/bits/stl_vector.h ****        */
1142:/usr/include/c++/11/bits/stl_vector.h ****       reference
1143:/usr/include/c++/11/bits/stl_vector.h ****       back() _GLIBCXX_NOEXCEPT
1144:/usr/include/c++/11/bits/stl_vector.h ****       {
1145:/usr/include/c++/11/bits/stl_vector.h **** 	__glibcxx_requires_nonempty();
1146:/usr/include/c++/11/bits/stl_vector.h **** 	return *(end() - 1);
1147:/usr/include/c++/11/bits/stl_vector.h ****       }
1148:/usr/include/c++/11/bits/stl_vector.h **** 
1149:/usr/include/c++/11/bits/stl_vector.h ****       /**
1150:/usr/include/c++/11/bits/stl_vector.h ****        *  Returns a read-only (constant) reference to the data at the
1151:/usr/include/c++/11/bits/stl_vector.h ****        *  last element of the %vector.
1152:/usr/include/c++/11/bits/stl_vector.h ****        */
1153:/usr/include/c++/11/bits/stl_vector.h ****       const_reference
1154:/usr/include/c++/11/bits/stl_vector.h ****       back() const _GLIBCXX_NOEXCEPT
1155:/usr/include/c++/11/bits/stl_vector.h ****       {
1156:/usr/include/c++/11/bits/stl_vector.h **** 	__glibcxx_requires_nonempty();
1157:/usr/include/c++/11/bits/stl_vector.h **** 	return *(end() - 1);
1158:/usr/include/c++/11/bits/stl_vector.h ****       }
1159:/usr/include/c++/11/bits/stl_vector.h **** 
1160:/usr/include/c++/11/bits/stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1161:/usr/include/c++/11/bits/stl_vector.h ****       // DR 464. Suggestion for new member functions in standard containers.
1162:/usr/include/c++/11/bits/stl_vector.h ****       // data access
1163:/usr/include/c++/11/bits/stl_vector.h ****       /**
1164:/usr/include/c++/11/bits/stl_vector.h ****        *   Returns a pointer such that [data(), data() + size()) is a valid
1165:/usr/include/c++/11/bits/stl_vector.h ****        *   range.  For a non-empty %vector, data() == &front().
1166:/usr/include/c++/11/bits/stl_vector.h ****        */
1167:/usr/include/c++/11/bits/stl_vector.h ****       _Tp*
1168:/usr/include/c++/11/bits/stl_vector.h ****       data() _GLIBCXX_NOEXCEPT
1169:/usr/include/c++/11/bits/stl_vector.h ****       { return _M_data_ptr(this->_M_impl._M_start); }
1170:/usr/include/c++/11/bits/stl_vector.h **** 
1171:/usr/include/c++/11/bits/stl_vector.h ****       const _Tp*
1172:/usr/include/c++/11/bits/stl_vector.h ****       data() const _GLIBCXX_NOEXCEPT
1173:/usr/include/c++/11/bits/stl_vector.h ****       { return _M_data_ptr(this->_M_impl._M_start); }
1174:/usr/include/c++/11/bits/stl_vector.h **** 
1175:/usr/include/c++/11/bits/stl_vector.h ****       // [23.2.4.3] modifiers
1176:/usr/include/c++/11/bits/stl_vector.h ****       /**
1177:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Add data to the end of the %vector.
1178:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __x  Data to be added.
1179:/usr/include/c++/11/bits/stl_vector.h ****        *
1180:/usr/include/c++/11/bits/stl_vector.h ****        *  This is a typical stack operation.  The function creates an
1181:/usr/include/c++/11/bits/stl_vector.h ****        *  element at the end of the %vector and assigns the given data
1182:/usr/include/c++/11/bits/stl_vector.h ****        *  to it.  Due to the nature of a %vector this operation can be
1183:/usr/include/c++/11/bits/stl_vector.h ****        *  done in constant time if the %vector has preallocated space
1184:/usr/include/c++/11/bits/stl_vector.h ****        *  available.
1185:/usr/include/c++/11/bits/stl_vector.h ****        */
1186:/usr/include/c++/11/bits/stl_vector.h ****       void
1187:/usr/include/c++/11/bits/stl_vector.h ****       push_back(const value_type& __x)
1188:/usr/include/c++/11/bits/stl_vector.h ****       {
1189:/usr/include/c++/11/bits/stl_vector.h **** 	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
1190:/usr/include/c++/11/bits/stl_vector.h **** 	  {
1191:/usr/include/c++/11/bits/stl_vector.h **** 	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
1192:/usr/include/c++/11/bits/stl_vector.h **** 	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
1193:/usr/include/c++/11/bits/stl_vector.h **** 				     __x);
1194:/usr/include/c++/11/bits/stl_vector.h **** 	    ++this->_M_impl._M_finish;
1195:/usr/include/c++/11/bits/stl_vector.h **** 	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
1196:/usr/include/c++/11/bits/stl_vector.h **** 	  }
1197:/usr/include/c++/11/bits/stl_vector.h **** 	else
1198:/usr/include/c++/11/bits/stl_vector.h **** 	  _M_realloc_insert(end(), __x);
1199:/usr/include/c++/11/bits/stl_vector.h ****       }
1200:/usr/include/c++/11/bits/stl_vector.h **** 
1201:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
1202:/usr/include/c++/11/bits/stl_vector.h ****       void
1203:/usr/include/c++/11/bits/stl_vector.h ****       push_back(value_type&& __x)
1204:/usr/include/c++/11/bits/stl_vector.h ****       { emplace_back(std::move(__x)); }
1205:/usr/include/c++/11/bits/stl_vector.h **** 
1206:/usr/include/c++/11/bits/stl_vector.h ****       template<typename... _Args>
1207:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus > 201402L
1208:/usr/include/c++/11/bits/stl_vector.h **** 	reference
1209:/usr/include/c++/11/bits/stl_vector.h **** #else
1210:/usr/include/c++/11/bits/stl_vector.h **** 	void
1211:/usr/include/c++/11/bits/stl_vector.h **** #endif
1212:/usr/include/c++/11/bits/stl_vector.h **** 	emplace_back(_Args&&... __args);
1213:/usr/include/c++/11/bits/stl_vector.h **** #endif
1214:/usr/include/c++/11/bits/stl_vector.h **** 
1215:/usr/include/c++/11/bits/stl_vector.h ****       /**
1216:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Removes last element.
1217:/usr/include/c++/11/bits/stl_vector.h ****        *
1218:/usr/include/c++/11/bits/stl_vector.h ****        *  This is a typical stack operation. It shrinks the %vector by one.
1219:/usr/include/c++/11/bits/stl_vector.h ****        *
1220:/usr/include/c++/11/bits/stl_vector.h ****        *  Note that no data is returned, and if the last element's
1221:/usr/include/c++/11/bits/stl_vector.h ****        *  data is needed, it should be retrieved before pop_back() is
1222:/usr/include/c++/11/bits/stl_vector.h ****        *  called.
1223:/usr/include/c++/11/bits/stl_vector.h ****        */
1224:/usr/include/c++/11/bits/stl_vector.h ****       void
1225:/usr/include/c++/11/bits/stl_vector.h ****       pop_back() _GLIBCXX_NOEXCEPT
1226:/usr/include/c++/11/bits/stl_vector.h ****       {
1227:/usr/include/c++/11/bits/stl_vector.h **** 	__glibcxx_requires_nonempty();
1228:/usr/include/c++/11/bits/stl_vector.h **** 	--this->_M_impl._M_finish;
1229:/usr/include/c++/11/bits/stl_vector.h **** 	_Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
1230:/usr/include/c++/11/bits/stl_vector.h **** 	_GLIBCXX_ASAN_ANNOTATE_SHRINK(1);
1231:/usr/include/c++/11/bits/stl_vector.h ****       }
1232:/usr/include/c++/11/bits/stl_vector.h **** 
1233:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
1234:/usr/include/c++/11/bits/stl_vector.h ****       /**
1235:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Inserts an object in %vector before specified iterator.
1236:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1237:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __args  Arguments.
1238:/usr/include/c++/11/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1239:/usr/include/c++/11/bits/stl_vector.h ****        *
1240:/usr/include/c++/11/bits/stl_vector.h ****        *  This function will insert an object of type T constructed
1241:/usr/include/c++/11/bits/stl_vector.h ****        *  with T(std::forward<Args>(args)...) before the specified location.
1242:/usr/include/c++/11/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a %vector
1243:/usr/include/c++/11/bits/stl_vector.h ****        *  and if it is frequently used the user should consider using
1244:/usr/include/c++/11/bits/stl_vector.h ****        *  std::list.
1245:/usr/include/c++/11/bits/stl_vector.h ****        */
1246:/usr/include/c++/11/bits/stl_vector.h ****       template<typename... _Args>
1247:/usr/include/c++/11/bits/stl_vector.h **** 	iterator
1248:/usr/include/c++/11/bits/stl_vector.h **** 	emplace(const_iterator __position, _Args&&... __args)
1249:/usr/include/c++/11/bits/stl_vector.h **** 	{ return _M_emplace_aux(__position, std::forward<_Args>(__args)...); }
1250:/usr/include/c++/11/bits/stl_vector.h **** 
1251:/usr/include/c++/11/bits/stl_vector.h ****       /**
1252:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Inserts given value into %vector before specified iterator.
1253:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1254:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
1255:/usr/include/c++/11/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1256:/usr/include/c++/11/bits/stl_vector.h ****        *
1257:/usr/include/c++/11/bits/stl_vector.h ****        *  This function will insert a copy of the given value before
1258:/usr/include/c++/11/bits/stl_vector.h ****        *  the specified location.  Note that this kind of operation
1259:/usr/include/c++/11/bits/stl_vector.h ****        *  could be expensive for a %vector and if it is frequently
1260:/usr/include/c++/11/bits/stl_vector.h ****        *  used the user should consider using std::list.
1261:/usr/include/c++/11/bits/stl_vector.h ****        */
1262:/usr/include/c++/11/bits/stl_vector.h ****       iterator
1263:/usr/include/c++/11/bits/stl_vector.h ****       insert(const_iterator __position, const value_type& __x);
1264:/usr/include/c++/11/bits/stl_vector.h **** #else
1265:/usr/include/c++/11/bits/stl_vector.h ****       /**
1266:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Inserts given value into %vector before specified iterator.
1267:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1268:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
1269:/usr/include/c++/11/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1270:/usr/include/c++/11/bits/stl_vector.h ****        *
1271:/usr/include/c++/11/bits/stl_vector.h ****        *  This function will insert a copy of the given value before
1272:/usr/include/c++/11/bits/stl_vector.h ****        *  the specified location.  Note that this kind of operation
1273:/usr/include/c++/11/bits/stl_vector.h ****        *  could be expensive for a %vector and if it is frequently
1274:/usr/include/c++/11/bits/stl_vector.h ****        *  used the user should consider using std::list.
1275:/usr/include/c++/11/bits/stl_vector.h ****        */
1276:/usr/include/c++/11/bits/stl_vector.h ****       iterator
1277:/usr/include/c++/11/bits/stl_vector.h ****       insert(iterator __position, const value_type& __x);
1278:/usr/include/c++/11/bits/stl_vector.h **** #endif
1279:/usr/include/c++/11/bits/stl_vector.h **** 
1280:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
1281:/usr/include/c++/11/bits/stl_vector.h ****       /**
1282:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Inserts given rvalue into %vector before specified iterator.
1283:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1284:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
1285:/usr/include/c++/11/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1286:/usr/include/c++/11/bits/stl_vector.h ****        *
1287:/usr/include/c++/11/bits/stl_vector.h ****        *  This function will insert a copy of the given rvalue before
1288:/usr/include/c++/11/bits/stl_vector.h ****        *  the specified location.  Note that this kind of operation
1289:/usr/include/c++/11/bits/stl_vector.h ****        *  could be expensive for a %vector and if it is frequently
1290:/usr/include/c++/11/bits/stl_vector.h ****        *  used the user should consider using std::list.
1291:/usr/include/c++/11/bits/stl_vector.h ****        */
1292:/usr/include/c++/11/bits/stl_vector.h ****       iterator
1293:/usr/include/c++/11/bits/stl_vector.h ****       insert(const_iterator __position, value_type&& __x)
1294:/usr/include/c++/11/bits/stl_vector.h ****       { return _M_insert_rval(__position, std::move(__x)); }
1295:/usr/include/c++/11/bits/stl_vector.h **** 
1296:/usr/include/c++/11/bits/stl_vector.h ****       /**
1297:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Inserts an initializer_list into the %vector.
1298:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1299:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
1300:/usr/include/c++/11/bits/stl_vector.h ****        *
1301:/usr/include/c++/11/bits/stl_vector.h ****        *  This function will insert copies of the data in the
1302:/usr/include/c++/11/bits/stl_vector.h ****        *  initializer_list @a l into the %vector before the location
1303:/usr/include/c++/11/bits/stl_vector.h ****        *  specified by @a position.
1304:/usr/include/c++/11/bits/stl_vector.h ****        *
1305:/usr/include/c++/11/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1306:/usr/include/c++/11/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1307:/usr/include/c++/11/bits/stl_vector.h ****        *  consider using std::list.
1308:/usr/include/c++/11/bits/stl_vector.h ****        */
1309:/usr/include/c++/11/bits/stl_vector.h ****       iterator
1310:/usr/include/c++/11/bits/stl_vector.h ****       insert(const_iterator __position, initializer_list<value_type> __l)
1311:/usr/include/c++/11/bits/stl_vector.h ****       {
1312:/usr/include/c++/11/bits/stl_vector.h **** 	auto __offset = __position - cbegin();
1313:/usr/include/c++/11/bits/stl_vector.h **** 	_M_range_insert(begin() + __offset, __l.begin(), __l.end(),
1314:/usr/include/c++/11/bits/stl_vector.h **** 			std::random_access_iterator_tag());
1315:/usr/include/c++/11/bits/stl_vector.h **** 	return begin() + __offset;
1316:/usr/include/c++/11/bits/stl_vector.h ****       }
1317:/usr/include/c++/11/bits/stl_vector.h **** #endif
1318:/usr/include/c++/11/bits/stl_vector.h **** 
1319:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
1320:/usr/include/c++/11/bits/stl_vector.h ****       /**
1321:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Inserts a number of copies of given data into the %vector.
1322:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1323:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __n  Number of elements to be inserted.
1324:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
1325:/usr/include/c++/11/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1326:/usr/include/c++/11/bits/stl_vector.h ****        *
1327:/usr/include/c++/11/bits/stl_vector.h ****        *  This function will insert a specified number of copies of
1328:/usr/include/c++/11/bits/stl_vector.h ****        *  the given data before the location specified by @a position.
1329:/usr/include/c++/11/bits/stl_vector.h ****        *
1330:/usr/include/c++/11/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1331:/usr/include/c++/11/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1332:/usr/include/c++/11/bits/stl_vector.h ****        *  consider using std::list.
1333:/usr/include/c++/11/bits/stl_vector.h ****        */
1334:/usr/include/c++/11/bits/stl_vector.h ****       iterator
1335:/usr/include/c++/11/bits/stl_vector.h ****       insert(const_iterator __position, size_type __n, const value_type& __x)
1336:/usr/include/c++/11/bits/stl_vector.h ****       {
1337:/usr/include/c++/11/bits/stl_vector.h **** 	difference_type __offset = __position - cbegin();
1338:/usr/include/c++/11/bits/stl_vector.h **** 	_M_fill_insert(begin() + __offset, __n, __x);
1339:/usr/include/c++/11/bits/stl_vector.h **** 	return begin() + __offset;
1340:/usr/include/c++/11/bits/stl_vector.h ****       }
1341:/usr/include/c++/11/bits/stl_vector.h **** #else
1342:/usr/include/c++/11/bits/stl_vector.h ****       /**
1343:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Inserts a number of copies of given data into the %vector.
1344:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1345:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __n  Number of elements to be inserted.
1346:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
1347:/usr/include/c++/11/bits/stl_vector.h ****        *
1348:/usr/include/c++/11/bits/stl_vector.h ****        *  This function will insert a specified number of copies of
1349:/usr/include/c++/11/bits/stl_vector.h ****        *  the given data before the location specified by @a position.
1350:/usr/include/c++/11/bits/stl_vector.h ****        *
1351:/usr/include/c++/11/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1352:/usr/include/c++/11/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1353:/usr/include/c++/11/bits/stl_vector.h ****        *  consider using std::list.
1354:/usr/include/c++/11/bits/stl_vector.h ****        */
1355:/usr/include/c++/11/bits/stl_vector.h ****       void
1356:/usr/include/c++/11/bits/stl_vector.h ****       insert(iterator __position, size_type __n, const value_type& __x)
1357:/usr/include/c++/11/bits/stl_vector.h ****       { _M_fill_insert(__position, __n, __x); }
1358:/usr/include/c++/11/bits/stl_vector.h **** #endif
1359:/usr/include/c++/11/bits/stl_vector.h **** 
1360:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
1361:/usr/include/c++/11/bits/stl_vector.h ****       /**
1362:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Inserts a range into the %vector.
1363:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1364:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __first  An input iterator.
1365:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __last   An input iterator.
1366:/usr/include/c++/11/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1367:/usr/include/c++/11/bits/stl_vector.h ****        *
1368:/usr/include/c++/11/bits/stl_vector.h ****        *  This function will insert copies of the data in the range
1369:/usr/include/c++/11/bits/stl_vector.h ****        *  [__first,__last) into the %vector before the location specified
1370:/usr/include/c++/11/bits/stl_vector.h ****        *  by @a pos.
1371:/usr/include/c++/11/bits/stl_vector.h ****        *
1372:/usr/include/c++/11/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1373:/usr/include/c++/11/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1374:/usr/include/c++/11/bits/stl_vector.h ****        *  consider using std::list.
1375:/usr/include/c++/11/bits/stl_vector.h ****        */
1376:/usr/include/c++/11/bits/stl_vector.h ****       template<typename _InputIterator,
1377:/usr/include/c++/11/bits/stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1378:/usr/include/c++/11/bits/stl_vector.h **** 	iterator
1379:/usr/include/c++/11/bits/stl_vector.h **** 	insert(const_iterator __position, _InputIterator __first,
1380:/usr/include/c++/11/bits/stl_vector.h **** 	       _InputIterator __last)
1381:/usr/include/c++/11/bits/stl_vector.h **** 	{
1382:/usr/include/c++/11/bits/stl_vector.h **** 	  difference_type __offset = __position - cbegin();
1383:/usr/include/c++/11/bits/stl_vector.h **** 	  _M_insert_dispatch(begin() + __offset,
1384:/usr/include/c++/11/bits/stl_vector.h **** 			     __first, __last, __false_type());
1385:/usr/include/c++/11/bits/stl_vector.h **** 	  return begin() + __offset;
1386:/usr/include/c++/11/bits/stl_vector.h **** 	}
1387:/usr/include/c++/11/bits/stl_vector.h **** #else
1388:/usr/include/c++/11/bits/stl_vector.h ****       /**
1389:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Inserts a range into the %vector.
1390:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1391:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __first  An input iterator.
1392:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __last   An input iterator.
1393:/usr/include/c++/11/bits/stl_vector.h ****        *
1394:/usr/include/c++/11/bits/stl_vector.h ****        *  This function will insert copies of the data in the range
1395:/usr/include/c++/11/bits/stl_vector.h ****        *  [__first,__last) into the %vector before the location specified
1396:/usr/include/c++/11/bits/stl_vector.h ****        *  by @a pos.
1397:/usr/include/c++/11/bits/stl_vector.h ****        *
1398:/usr/include/c++/11/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1399:/usr/include/c++/11/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1400:/usr/include/c++/11/bits/stl_vector.h ****        *  consider using std::list.
1401:/usr/include/c++/11/bits/stl_vector.h ****        */
1402:/usr/include/c++/11/bits/stl_vector.h ****       template<typename _InputIterator>
1403:/usr/include/c++/11/bits/stl_vector.h **** 	void
1404:/usr/include/c++/11/bits/stl_vector.h **** 	insert(iterator __position, _InputIterator __first,
1405:/usr/include/c++/11/bits/stl_vector.h **** 	       _InputIterator __last)
1406:/usr/include/c++/11/bits/stl_vector.h **** 	{
1407:/usr/include/c++/11/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
1408:/usr/include/c++/11/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
1409:/usr/include/c++/11/bits/stl_vector.h **** 	  _M_insert_dispatch(__position, __first, __last, _Integral());
1410:/usr/include/c++/11/bits/stl_vector.h **** 	}
1411:/usr/include/c++/11/bits/stl_vector.h **** #endif
1412:/usr/include/c++/11/bits/stl_vector.h **** 
1413:/usr/include/c++/11/bits/stl_vector.h ****       /**
1414:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Remove element at given position.
1415:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __position  Iterator pointing to element to be erased.
1416:/usr/include/c++/11/bits/stl_vector.h ****        *  @return  An iterator pointing to the next element (or end()).
1417:/usr/include/c++/11/bits/stl_vector.h ****        *
1418:/usr/include/c++/11/bits/stl_vector.h ****        *  This function will erase the element at the given position and thus
1419:/usr/include/c++/11/bits/stl_vector.h ****        *  shorten the %vector by one.
1420:/usr/include/c++/11/bits/stl_vector.h ****        *
1421:/usr/include/c++/11/bits/stl_vector.h ****        *  Note This operation could be expensive and if it is
1422:/usr/include/c++/11/bits/stl_vector.h ****        *  frequently used the user should consider using std::list.
1423:/usr/include/c++/11/bits/stl_vector.h ****        *  The user is also cautioned that this function only erases
1424:/usr/include/c++/11/bits/stl_vector.h ****        *  the element, and that if the element is itself a pointer,
1425:/usr/include/c++/11/bits/stl_vector.h ****        *  the pointed-to memory is not touched in any way.  Managing
1426:/usr/include/c++/11/bits/stl_vector.h ****        *  the pointer is the user's responsibility.
1427:/usr/include/c++/11/bits/stl_vector.h ****        */
1428:/usr/include/c++/11/bits/stl_vector.h ****       iterator
1429:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
1430:/usr/include/c++/11/bits/stl_vector.h ****       erase(const_iterator __position)
1431:/usr/include/c++/11/bits/stl_vector.h ****       { return _M_erase(begin() + (__position - cbegin())); }
1432:/usr/include/c++/11/bits/stl_vector.h **** #else
1433:/usr/include/c++/11/bits/stl_vector.h ****       erase(iterator __position)
1434:/usr/include/c++/11/bits/stl_vector.h ****       { return _M_erase(__position); }
1435:/usr/include/c++/11/bits/stl_vector.h **** #endif
1436:/usr/include/c++/11/bits/stl_vector.h **** 
1437:/usr/include/c++/11/bits/stl_vector.h ****       /**
1438:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Remove a range of elements.
1439:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __first  Iterator pointing to the first element to be erased.
1440:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __last  Iterator pointing to one past the last element to be
1441:/usr/include/c++/11/bits/stl_vector.h ****        *                  erased.
1442:/usr/include/c++/11/bits/stl_vector.h ****        *  @return  An iterator pointing to the element pointed to by @a __last
1443:/usr/include/c++/11/bits/stl_vector.h ****        *           prior to erasing (or end()).
1444:/usr/include/c++/11/bits/stl_vector.h ****        *
1445:/usr/include/c++/11/bits/stl_vector.h ****        *  This function will erase the elements in the range
1446:/usr/include/c++/11/bits/stl_vector.h ****        *  [__first,__last) and shorten the %vector accordingly.
1447:/usr/include/c++/11/bits/stl_vector.h ****        *
1448:/usr/include/c++/11/bits/stl_vector.h ****        *  Note This operation could be expensive and if it is
1449:/usr/include/c++/11/bits/stl_vector.h ****        *  frequently used the user should consider using std::list.
1450:/usr/include/c++/11/bits/stl_vector.h ****        *  The user is also cautioned that this function only erases
1451:/usr/include/c++/11/bits/stl_vector.h ****        *  the elements, and that if the elements themselves are
1452:/usr/include/c++/11/bits/stl_vector.h ****        *  pointers, the pointed-to memory is not touched in any way.
1453:/usr/include/c++/11/bits/stl_vector.h ****        *  Managing the pointer is the user's responsibility.
1454:/usr/include/c++/11/bits/stl_vector.h ****        */
1455:/usr/include/c++/11/bits/stl_vector.h ****       iterator
1456:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
1457:/usr/include/c++/11/bits/stl_vector.h ****       erase(const_iterator __first, const_iterator __last)
1458:/usr/include/c++/11/bits/stl_vector.h ****       {
1459:/usr/include/c++/11/bits/stl_vector.h **** 	const auto __beg = begin();
1460:/usr/include/c++/11/bits/stl_vector.h **** 	const auto __cbeg = cbegin();
1461:/usr/include/c++/11/bits/stl_vector.h **** 	return _M_erase(__beg + (__first - __cbeg), __beg + (__last - __cbeg));
1462:/usr/include/c++/11/bits/stl_vector.h ****       }
1463:/usr/include/c++/11/bits/stl_vector.h **** #else
1464:/usr/include/c++/11/bits/stl_vector.h ****       erase(iterator __first, iterator __last)
1465:/usr/include/c++/11/bits/stl_vector.h ****       { return _M_erase(__first, __last); }
1466:/usr/include/c++/11/bits/stl_vector.h **** #endif
1467:/usr/include/c++/11/bits/stl_vector.h **** 
1468:/usr/include/c++/11/bits/stl_vector.h ****       /**
1469:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Swaps data with another %vector.
1470:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __x  A %vector of the same element and allocator types.
1471:/usr/include/c++/11/bits/stl_vector.h ****        *
1472:/usr/include/c++/11/bits/stl_vector.h ****        *  This exchanges the elements between two vectors in constant time.
1473:/usr/include/c++/11/bits/stl_vector.h ****        *  (Three pointers, so it should be quite fast.)
1474:/usr/include/c++/11/bits/stl_vector.h ****        *  Note that the global std::swap() function is specialized such that
1475:/usr/include/c++/11/bits/stl_vector.h ****        *  std::swap(v1,v2) will feed to this function.
1476:/usr/include/c++/11/bits/stl_vector.h ****        *
1477:/usr/include/c++/11/bits/stl_vector.h ****        *  Whether the allocators are swapped depends on the allocator traits.
1478:/usr/include/c++/11/bits/stl_vector.h ****        */
1479:/usr/include/c++/11/bits/stl_vector.h ****       void
1480:/usr/include/c++/11/bits/stl_vector.h ****       swap(vector& __x) _GLIBCXX_NOEXCEPT
1481:/usr/include/c++/11/bits/stl_vector.h ****       {
1482:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
1483:/usr/include/c++/11/bits/stl_vector.h **** 	__glibcxx_assert(_Alloc_traits::propagate_on_container_swap::value
1484:/usr/include/c++/11/bits/stl_vector.h **** 			 || _M_get_Tp_allocator() == __x._M_get_Tp_allocator());
1485:/usr/include/c++/11/bits/stl_vector.h **** #endif
1486:/usr/include/c++/11/bits/stl_vector.h **** 	this->_M_impl._M_swap_data(__x._M_impl);
1487:/usr/include/c++/11/bits/stl_vector.h **** 	_Alloc_traits::_S_on_swap(_M_get_Tp_allocator(),
1488:/usr/include/c++/11/bits/stl_vector.h **** 				  __x._M_get_Tp_allocator());
1489:/usr/include/c++/11/bits/stl_vector.h ****       }
1490:/usr/include/c++/11/bits/stl_vector.h **** 
1491:/usr/include/c++/11/bits/stl_vector.h ****       /**
1492:/usr/include/c++/11/bits/stl_vector.h ****        *  Erases all the elements.  Note that this function only erases the
1493:/usr/include/c++/11/bits/stl_vector.h ****        *  elements, and that if the elements themselves are pointers, the
1494:/usr/include/c++/11/bits/stl_vector.h ****        *  pointed-to memory is not touched in any way.  Managing the pointer is
1495:/usr/include/c++/11/bits/stl_vector.h ****        *  the user's responsibility.
1496:/usr/include/c++/11/bits/stl_vector.h ****        */
1497:/usr/include/c++/11/bits/stl_vector.h ****       void
1498:/usr/include/c++/11/bits/stl_vector.h ****       clear() _GLIBCXX_NOEXCEPT
1499:/usr/include/c++/11/bits/stl_vector.h ****       { _M_erase_at_end(this->_M_impl._M_start); }
1500:/usr/include/c++/11/bits/stl_vector.h **** 
1501:/usr/include/c++/11/bits/stl_vector.h ****     protected:
1502:/usr/include/c++/11/bits/stl_vector.h ****       /**
1503:/usr/include/c++/11/bits/stl_vector.h ****        *  Memory expansion handler.  Uses the member allocation function to
1504:/usr/include/c++/11/bits/stl_vector.h ****        *  obtain @a n bytes of memory, and then copies [first,last) into it.
1505:/usr/include/c++/11/bits/stl_vector.h ****        */
1506:/usr/include/c++/11/bits/stl_vector.h ****       template<typename _ForwardIterator>
1507:/usr/include/c++/11/bits/stl_vector.h **** 	pointer
1508:/usr/include/c++/11/bits/stl_vector.h **** 	_M_allocate_and_copy(size_type __n,
1509:/usr/include/c++/11/bits/stl_vector.h **** 			     _ForwardIterator __first, _ForwardIterator __last)
1510:/usr/include/c++/11/bits/stl_vector.h **** 	{
1511:/usr/include/c++/11/bits/stl_vector.h **** 	  pointer __result = this->_M_allocate(__n);
1512:/usr/include/c++/11/bits/stl_vector.h **** 	  __try
1513:/usr/include/c++/11/bits/stl_vector.h **** 	    {
1514:/usr/include/c++/11/bits/stl_vector.h **** 	      std::__uninitialized_copy_a(__first, __last, __result,
1515:/usr/include/c++/11/bits/stl_vector.h **** 					  _M_get_Tp_allocator());
1516:/usr/include/c++/11/bits/stl_vector.h **** 	      return __result;
1517:/usr/include/c++/11/bits/stl_vector.h **** 	    }
1518:/usr/include/c++/11/bits/stl_vector.h **** 	  __catch(...)
1519:/usr/include/c++/11/bits/stl_vector.h **** 	    {
1520:/usr/include/c++/11/bits/stl_vector.h **** 	      _M_deallocate(__result, __n);
1521:/usr/include/c++/11/bits/stl_vector.h **** 	      __throw_exception_again;
1522:/usr/include/c++/11/bits/stl_vector.h **** 	    }
1523:/usr/include/c++/11/bits/stl_vector.h **** 	}
1524:/usr/include/c++/11/bits/stl_vector.h **** 
1525:/usr/include/c++/11/bits/stl_vector.h **** 
1526:/usr/include/c++/11/bits/stl_vector.h ****       // Internal constructor functions follow.
1527:/usr/include/c++/11/bits/stl_vector.h **** 
1528:/usr/include/c++/11/bits/stl_vector.h ****       // Called by the range constructor to implement [23.1.1]/9
1529:/usr/include/c++/11/bits/stl_vector.h **** 
1530:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus < 201103L
1531:/usr/include/c++/11/bits/stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1532:/usr/include/c++/11/bits/stl_vector.h ****       // 438. Ambiguity in the "do the right thing" clause
1533:/usr/include/c++/11/bits/stl_vector.h ****       template<typename _Integer>
1534:/usr/include/c++/11/bits/stl_vector.h **** 	void
1535:/usr/include/c++/11/bits/stl_vector.h **** 	_M_initialize_dispatch(_Integer __n, _Integer __value, __true_type)
1536:/usr/include/c++/11/bits/stl_vector.h **** 	{
1537:/usr/include/c++/11/bits/stl_vector.h **** 	  this->_M_impl._M_start = _M_allocate(_S_check_init_len(
1538:/usr/include/c++/11/bits/stl_vector.h **** 		static_cast<size_type>(__n), _M_get_Tp_allocator()));
1539:/usr/include/c++/11/bits/stl_vector.h **** 	  this->_M_impl._M_end_of_storage =
1540:/usr/include/c++/11/bits/stl_vector.h **** 	    this->_M_impl._M_start + static_cast<size_type>(__n);
1541:/usr/include/c++/11/bits/stl_vector.h **** 	  _M_fill_initialize(static_cast<size_type>(__n), __value);
1542:/usr/include/c++/11/bits/stl_vector.h **** 	}
1543:/usr/include/c++/11/bits/stl_vector.h **** 
1544:/usr/include/c++/11/bits/stl_vector.h ****       // Called by the range constructor to implement [23.1.1]/9
1545:/usr/include/c++/11/bits/stl_vector.h ****       template<typename _InputIterator>
1546:/usr/include/c++/11/bits/stl_vector.h **** 	void
1547:/usr/include/c++/11/bits/stl_vector.h **** 	_M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
1548:/usr/include/c++/11/bits/stl_vector.h **** 			       __false_type)
1549:/usr/include/c++/11/bits/stl_vector.h **** 	{
1550:/usr/include/c++/11/bits/stl_vector.h **** 	  _M_range_initialize(__first, __last,
1551:/usr/include/c++/11/bits/stl_vector.h **** 			      std::__iterator_category(__first));
1552:/usr/include/c++/11/bits/stl_vector.h **** 	}
1553:/usr/include/c++/11/bits/stl_vector.h **** #endif
1554:/usr/include/c++/11/bits/stl_vector.h **** 
1555:/usr/include/c++/11/bits/stl_vector.h ****       // Called by the second initialize_dispatch above
1556:/usr/include/c++/11/bits/stl_vector.h ****       template<typename _InputIterator>
1557:/usr/include/c++/11/bits/stl_vector.h **** 	void
1558:/usr/include/c++/11/bits/stl_vector.h **** 	_M_range_initialize(_InputIterator __first, _InputIterator __last,
1559:/usr/include/c++/11/bits/stl_vector.h **** 			    std::input_iterator_tag)
1560:/usr/include/c++/11/bits/stl_vector.h **** 	{
1561:/usr/include/c++/11/bits/stl_vector.h **** 	  __try {
1562:/usr/include/c++/11/bits/stl_vector.h **** 	    for (; __first != __last; ++__first)
1563:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
1564:/usr/include/c++/11/bits/stl_vector.h **** 	      emplace_back(*__first);
1565:/usr/include/c++/11/bits/stl_vector.h **** #else
1566:/usr/include/c++/11/bits/stl_vector.h **** 	      push_back(*__first);
1567:/usr/include/c++/11/bits/stl_vector.h **** #endif
1568:/usr/include/c++/11/bits/stl_vector.h **** 	  } __catch(...) {
1569:/usr/include/c++/11/bits/stl_vector.h **** 	    clear();
1570:/usr/include/c++/11/bits/stl_vector.h **** 	    __throw_exception_again;
1571:/usr/include/c++/11/bits/stl_vector.h **** 	  }
1572:/usr/include/c++/11/bits/stl_vector.h **** 	}
1573:/usr/include/c++/11/bits/stl_vector.h **** 
1574:/usr/include/c++/11/bits/stl_vector.h ****       // Called by the second initialize_dispatch above
1575:/usr/include/c++/11/bits/stl_vector.h ****       template<typename _ForwardIterator>
1576:/usr/include/c++/11/bits/stl_vector.h **** 	void
1577:/usr/include/c++/11/bits/stl_vector.h **** 	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
1578:/usr/include/c++/11/bits/stl_vector.h **** 			    std::forward_iterator_tag)
1579:/usr/include/c++/11/bits/stl_vector.h **** 	{
1580:/usr/include/c++/11/bits/stl_vector.h **** 	  const size_type __n = std::distance(__first, __last);
1581:/usr/include/c++/11/bits/stl_vector.h **** 	  this->_M_impl._M_start
1582:/usr/include/c++/11/bits/stl_vector.h **** 	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
1583:/usr/include/c++/11/bits/stl_vector.h **** 	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
1584:/usr/include/c++/11/bits/stl_vector.h **** 	  this->_M_impl._M_finish =
1585:/usr/include/c++/11/bits/stl_vector.h **** 	    std::__uninitialized_copy_a(__first, __last,
1586:/usr/include/c++/11/bits/stl_vector.h **** 					this->_M_impl._M_start,
1587:/usr/include/c++/11/bits/stl_vector.h **** 					_M_get_Tp_allocator());
1588:/usr/include/c++/11/bits/stl_vector.h **** 	}
1589:/usr/include/c++/11/bits/stl_vector.h **** 
1590:/usr/include/c++/11/bits/stl_vector.h ****       // Called by the first initialize_dispatch above and by the
1591:/usr/include/c++/11/bits/stl_vector.h ****       // vector(n,value,a) constructor.
1592:/usr/include/c++/11/bits/stl_vector.h ****       void
1593:/usr/include/c++/11/bits/stl_vector.h ****       _M_fill_initialize(size_type __n, const value_type& __value)
1594:/usr/include/c++/11/bits/stl_vector.h ****       {
1595:/usr/include/c++/11/bits/stl_vector.h **** 	this->_M_impl._M_finish =
1596:/usr/include/c++/11/bits/stl_vector.h **** 	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
1597:/usr/include/c++/11/bits/stl_vector.h **** 					_M_get_Tp_allocator());
1598:/usr/include/c++/11/bits/stl_vector.h ****       }
1599:/usr/include/c++/11/bits/stl_vector.h **** 
1600:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
1601:/usr/include/c++/11/bits/stl_vector.h ****       // Called by the vector(n) constructor.
1602:/usr/include/c++/11/bits/stl_vector.h ****       void
1603:/usr/include/c++/11/bits/stl_vector.h ****       _M_default_initialize(size_type __n)
1604:/usr/include/c++/11/bits/stl_vector.h ****       {
1605:/usr/include/c++/11/bits/stl_vector.h **** 	this->_M_impl._M_finish =
1606:/usr/include/c++/11/bits/stl_vector.h **** 	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
1607:/usr/include/c++/11/bits/stl_vector.h **** 					   _M_get_Tp_allocator());
1608:/usr/include/c++/11/bits/stl_vector.h ****       }
1609:/usr/include/c++/11/bits/stl_vector.h **** #endif
1610:/usr/include/c++/11/bits/stl_vector.h **** 
1611:/usr/include/c++/11/bits/stl_vector.h ****       // Internal assign functions follow.  The *_aux functions do the actual
1612:/usr/include/c++/11/bits/stl_vector.h ****       // assignment work for the range versions.
1613:/usr/include/c++/11/bits/stl_vector.h **** 
1614:/usr/include/c++/11/bits/stl_vector.h ****       // Called by the range assign to implement [23.1.1]/9
1615:/usr/include/c++/11/bits/stl_vector.h **** 
1616:/usr/include/c++/11/bits/stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1617:/usr/include/c++/11/bits/stl_vector.h ****       // 438. Ambiguity in the "do the right thing" clause
1618:/usr/include/c++/11/bits/stl_vector.h ****       template<typename _Integer>
1619:/usr/include/c++/11/bits/stl_vector.h **** 	void
1620:/usr/include/c++/11/bits/stl_vector.h **** 	_M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
1621:/usr/include/c++/11/bits/stl_vector.h **** 	{ _M_fill_assign(__n, __val); }
1622:/usr/include/c++/11/bits/stl_vector.h **** 
1623:/usr/include/c++/11/bits/stl_vector.h ****       // Called by the range assign to implement [23.1.1]/9
1624:/usr/include/c++/11/bits/stl_vector.h ****       template<typename _InputIterator>
1625:/usr/include/c++/11/bits/stl_vector.h **** 	void
1626:/usr/include/c++/11/bits/stl_vector.h **** 	_M_assign_dispatch(_InputIterator __first, _InputIterator __last,
1627:/usr/include/c++/11/bits/stl_vector.h **** 			   __false_type)
1628:/usr/include/c++/11/bits/stl_vector.h **** 	{ _M_assign_aux(__first, __last, std::__iterator_category(__first)); }
1629:/usr/include/c++/11/bits/stl_vector.h **** 
1630:/usr/include/c++/11/bits/stl_vector.h ****       // Called by the second assign_dispatch above
1631:/usr/include/c++/11/bits/stl_vector.h ****       template<typename _InputIterator>
1632:/usr/include/c++/11/bits/stl_vector.h **** 	void
1633:/usr/include/c++/11/bits/stl_vector.h **** 	_M_assign_aux(_InputIterator __first, _InputIterator __last,
1634:/usr/include/c++/11/bits/stl_vector.h **** 		      std::input_iterator_tag);
1635:/usr/include/c++/11/bits/stl_vector.h **** 
1636:/usr/include/c++/11/bits/stl_vector.h ****       // Called by the second assign_dispatch above
1637:/usr/include/c++/11/bits/stl_vector.h ****       template<typename _ForwardIterator>
1638:/usr/include/c++/11/bits/stl_vector.h **** 	void
1639:/usr/include/c++/11/bits/stl_vector.h **** 	_M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
1640:/usr/include/c++/11/bits/stl_vector.h **** 		      std::forward_iterator_tag);
1641:/usr/include/c++/11/bits/stl_vector.h **** 
1642:/usr/include/c++/11/bits/stl_vector.h ****       // Called by assign(n,t), and the range assign when it turns out
1643:/usr/include/c++/11/bits/stl_vector.h ****       // to be the same thing.
1644:/usr/include/c++/11/bits/stl_vector.h ****       void
1645:/usr/include/c++/11/bits/stl_vector.h ****       _M_fill_assign(size_type __n, const value_type& __val);
1646:/usr/include/c++/11/bits/stl_vector.h **** 
1647:/usr/include/c++/11/bits/stl_vector.h ****       // Internal insert functions follow.
1648:/usr/include/c++/11/bits/stl_vector.h **** 
1649:/usr/include/c++/11/bits/stl_vector.h ****       // Called by the range insert to implement [23.1.1]/9
1650:/usr/include/c++/11/bits/stl_vector.h **** 
1651:/usr/include/c++/11/bits/stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1652:/usr/include/c++/11/bits/stl_vector.h ****       // 438. Ambiguity in the "do the right thing" clause
1653:/usr/include/c++/11/bits/stl_vector.h ****       template<typename _Integer>
1654:/usr/include/c++/11/bits/stl_vector.h **** 	void
1655:/usr/include/c++/11/bits/stl_vector.h **** 	_M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val,
1656:/usr/include/c++/11/bits/stl_vector.h **** 			   __true_type)
1657:/usr/include/c++/11/bits/stl_vector.h **** 	{ _M_fill_insert(__pos, __n, __val); }
1658:/usr/include/c++/11/bits/stl_vector.h **** 
1659:/usr/include/c++/11/bits/stl_vector.h ****       // Called by the range insert to implement [23.1.1]/9
1660:/usr/include/c++/11/bits/stl_vector.h ****       template<typename _InputIterator>
1661:/usr/include/c++/11/bits/stl_vector.h **** 	void
1662:/usr/include/c++/11/bits/stl_vector.h **** 	_M_insert_dispatch(iterator __pos, _InputIterator __first,
1663:/usr/include/c++/11/bits/stl_vector.h **** 			   _InputIterator __last, __false_type)
1664:/usr/include/c++/11/bits/stl_vector.h **** 	{
1665:/usr/include/c++/11/bits/stl_vector.h **** 	  _M_range_insert(__pos, __first, __last,
1666:/usr/include/c++/11/bits/stl_vector.h **** 			  std::__iterator_category(__first));
1667:/usr/include/c++/11/bits/stl_vector.h **** 	}
1668:/usr/include/c++/11/bits/stl_vector.h **** 
1669:/usr/include/c++/11/bits/stl_vector.h ****       // Called by the second insert_dispatch above
1670:/usr/include/c++/11/bits/stl_vector.h ****       template<typename _InputIterator>
1671:/usr/include/c++/11/bits/stl_vector.h **** 	void
1672:/usr/include/c++/11/bits/stl_vector.h **** 	_M_range_insert(iterator __pos, _InputIterator __first,
1673:/usr/include/c++/11/bits/stl_vector.h **** 			_InputIterator __last, std::input_iterator_tag);
1674:/usr/include/c++/11/bits/stl_vector.h **** 
1675:/usr/include/c++/11/bits/stl_vector.h ****       // Called by the second insert_dispatch above
1676:/usr/include/c++/11/bits/stl_vector.h ****       template<typename _ForwardIterator>
1677:/usr/include/c++/11/bits/stl_vector.h **** 	void
1678:/usr/include/c++/11/bits/stl_vector.h **** 	_M_range_insert(iterator __pos, _ForwardIterator __first,
1679:/usr/include/c++/11/bits/stl_vector.h **** 			_ForwardIterator __last, std::forward_iterator_tag);
1680:/usr/include/c++/11/bits/stl_vector.h **** 
1681:/usr/include/c++/11/bits/stl_vector.h ****       // Called by insert(p,n,x), and the range insert when it turns out to be
1682:/usr/include/c++/11/bits/stl_vector.h ****       // the same thing.
1683:/usr/include/c++/11/bits/stl_vector.h ****       void
1684:/usr/include/c++/11/bits/stl_vector.h ****       _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);
1685:/usr/include/c++/11/bits/stl_vector.h **** 
1686:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
1687:/usr/include/c++/11/bits/stl_vector.h ****       // Called by resize(n).
1688:/usr/include/c++/11/bits/stl_vector.h ****       void
1689:/usr/include/c++/11/bits/stl_vector.h ****       _M_default_append(size_type __n);
1690:/usr/include/c++/11/bits/stl_vector.h **** 
1691:/usr/include/c++/11/bits/stl_vector.h ****       bool
1692:/usr/include/c++/11/bits/stl_vector.h ****       _M_shrink_to_fit();
1693:/usr/include/c++/11/bits/stl_vector.h **** #endif
1694:/usr/include/c++/11/bits/stl_vector.h **** 
1695:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus < 201103L
1696:/usr/include/c++/11/bits/stl_vector.h ****       // Called by insert(p,x)
1697:/usr/include/c++/11/bits/stl_vector.h ****       void
1698:/usr/include/c++/11/bits/stl_vector.h ****       _M_insert_aux(iterator __position, const value_type& __x);
1699:/usr/include/c++/11/bits/stl_vector.h **** 
1700:/usr/include/c++/11/bits/stl_vector.h ****       void
1701:/usr/include/c++/11/bits/stl_vector.h ****       _M_realloc_insert(iterator __position, const value_type& __x);
1702:/usr/include/c++/11/bits/stl_vector.h **** #else
1703:/usr/include/c++/11/bits/stl_vector.h ****       // A value_type object constructed with _Alloc_traits::construct()
1704:/usr/include/c++/11/bits/stl_vector.h ****       // and destroyed with _Alloc_traits::destroy().
1705:/usr/include/c++/11/bits/stl_vector.h ****       struct _Temporary_value
1706:/usr/include/c++/11/bits/stl_vector.h ****       {
1707:/usr/include/c++/11/bits/stl_vector.h **** 	template<typename... _Args>
1708:/usr/include/c++/11/bits/stl_vector.h **** 	  explicit
1709:/usr/include/c++/11/bits/stl_vector.h **** 	  _Temporary_value(vector* __vec, _Args&&... __args) : _M_this(__vec)
1710:/usr/include/c++/11/bits/stl_vector.h **** 	  {
1711:/usr/include/c++/11/bits/stl_vector.h **** 	    _Alloc_traits::construct(_M_this->_M_impl, _M_ptr(),
1712:/usr/include/c++/11/bits/stl_vector.h **** 				     std::forward<_Args>(__args)...);
1713:/usr/include/c++/11/bits/stl_vector.h **** 	  }
1714:/usr/include/c++/11/bits/stl_vector.h **** 
1715:/usr/include/c++/11/bits/stl_vector.h **** 	~_Temporary_value()
1716:/usr/include/c++/11/bits/stl_vector.h **** 	{ _Alloc_traits::destroy(_M_this->_M_impl, _M_ptr()); }
1717:/usr/include/c++/11/bits/stl_vector.h **** 
1718:/usr/include/c++/11/bits/stl_vector.h **** 	value_type&
1719:/usr/include/c++/11/bits/stl_vector.h **** 	_M_val() { return *_M_ptr(); }
1720:/usr/include/c++/11/bits/stl_vector.h **** 
1721:/usr/include/c++/11/bits/stl_vector.h ****       private:
1722:/usr/include/c++/11/bits/stl_vector.h **** 	_Tp*
1723:/usr/include/c++/11/bits/stl_vector.h **** 	_M_ptr() { return reinterpret_cast<_Tp*>(&__buf); }
1724:/usr/include/c++/11/bits/stl_vector.h **** 
1725:/usr/include/c++/11/bits/stl_vector.h **** 	vector* _M_this;
1726:/usr/include/c++/11/bits/stl_vector.h **** 	typename aligned_storage<sizeof(_Tp), alignof(_Tp)>::type __buf;
1727:/usr/include/c++/11/bits/stl_vector.h ****       };
1728:/usr/include/c++/11/bits/stl_vector.h **** 
1729:/usr/include/c++/11/bits/stl_vector.h ****       // Called by insert(p,x) and other functions when insertion needs to
1730:/usr/include/c++/11/bits/stl_vector.h ****       // reallocate or move existing elements. _Arg is either _Tp& or _Tp.
1731:/usr/include/c++/11/bits/stl_vector.h ****       template<typename _Arg>
1732:/usr/include/c++/11/bits/stl_vector.h **** 	void
1733:/usr/include/c++/11/bits/stl_vector.h **** 	_M_insert_aux(iterator __position, _Arg&& __arg);
1734:/usr/include/c++/11/bits/stl_vector.h **** 
1735:/usr/include/c++/11/bits/stl_vector.h ****       template<typename... _Args>
1736:/usr/include/c++/11/bits/stl_vector.h **** 	void
1737:/usr/include/c++/11/bits/stl_vector.h **** 	_M_realloc_insert(iterator __position, _Args&&... __args);
1738:/usr/include/c++/11/bits/stl_vector.h **** 
1739:/usr/include/c++/11/bits/stl_vector.h ****       // Either move-construct at the end, or forward to _M_insert_aux.
1740:/usr/include/c++/11/bits/stl_vector.h ****       iterator
1741:/usr/include/c++/11/bits/stl_vector.h ****       _M_insert_rval(const_iterator __position, value_type&& __v);
1742:/usr/include/c++/11/bits/stl_vector.h **** 
1743:/usr/include/c++/11/bits/stl_vector.h ****       // Try to emplace at the end, otherwise forward to _M_insert_aux.
1744:/usr/include/c++/11/bits/stl_vector.h ****       template<typename... _Args>
1745:/usr/include/c++/11/bits/stl_vector.h **** 	iterator
1746:/usr/include/c++/11/bits/stl_vector.h **** 	_M_emplace_aux(const_iterator __position, _Args&&... __args);
1747:/usr/include/c++/11/bits/stl_vector.h **** 
1748:/usr/include/c++/11/bits/stl_vector.h ****       // Emplacing an rvalue of the correct type can use _M_insert_rval.
1749:/usr/include/c++/11/bits/stl_vector.h ****       iterator
1750:/usr/include/c++/11/bits/stl_vector.h ****       _M_emplace_aux(const_iterator __position, value_type&& __v)
1751:/usr/include/c++/11/bits/stl_vector.h ****       { return _M_insert_rval(__position, std::move(__v)); }
1752:/usr/include/c++/11/bits/stl_vector.h **** #endif
1753:/usr/include/c++/11/bits/stl_vector.h **** 
1754:/usr/include/c++/11/bits/stl_vector.h ****       // Called by _M_fill_insert, _M_insert_aux etc.
1755:/usr/include/c++/11/bits/stl_vector.h ****       size_type
1756:/usr/include/c++/11/bits/stl_vector.h ****       _M_check_len(size_type __n, const char* __s) const
1757:/usr/include/c++/11/bits/stl_vector.h ****       {
1758:/usr/include/c++/11/bits/stl_vector.h **** 	if (max_size() - size() < __n)
1759:/usr/include/c++/11/bits/stl_vector.h **** 	  __throw_length_error(__N(__s));
1760:/usr/include/c++/11/bits/stl_vector.h **** 
1761:/usr/include/c++/11/bits/stl_vector.h **** 	const size_type __len = size() + (std::max)(size(), __n);
1762:/usr/include/c++/11/bits/stl_vector.h **** 	return (__len < size() || __len > max_size()) ? max_size() : __len;
1763:/usr/include/c++/11/bits/stl_vector.h ****       }
1764:/usr/include/c++/11/bits/stl_vector.h **** 
1765:/usr/include/c++/11/bits/stl_vector.h ****       // Called by constructors to check initial size.
1766:/usr/include/c++/11/bits/stl_vector.h ****       static size_type
1767:/usr/include/c++/11/bits/stl_vector.h ****       _S_check_init_len(size_type __n, const allocator_type& __a)
 6741              		.loc 8 1767 7
 6742              		.cfi_startproc
 6743              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 6744              		.cfi_lsda 0x1b,.LLSDA1587
 6745 0000 F30F1EFA 		endbr64
 6746 0004 55       		pushq	%rbp
 6747              		.cfi_def_cfa_offset 16
 6748              		.cfi_offset 6, -16
 6749 0005 4889E5   		movq	%rsp, %rbp
 6750              		.cfi_def_cfa_register 6
 6751 0008 53       		pushq	%rbx
 6752 0009 4883EC28 		subq	$40, %rsp
 6753              		.cfi_offset 3, -24
 6754 000d 48897DD8 		movq	%rdi, -40(%rbp)
 6755 0011 488975D0 		movq	%rsi, -48(%rbp)
 6756              		.loc 8 1767 7
 6757 0015 64488B04 		movq	%fs:40, %rax
 6757      25280000 
 6757      00
 6758 001e 488945E8 		movq	%rax, -24(%rbp)
 6759 0022 31C0     		xorl	%eax, %eax
1768:/usr/include/c++/11/bits/stl_vector.h ****       {
1769:/usr/include/c++/11/bits/stl_vector.h **** 	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 6760              		.loc 8 1769 24
 6761 0024 488B55D0 		movq	-48(%rbp), %rdx
 6762 0028 488D45E7 		leaq	-25(%rbp), %rax
 6763 002c 4889D6   		movq	%rdx, %rsi
 6764 002f 4889C7   		movq	%rax, %rdi
 6765 0032 E8000000 		call	_ZNSaIfEC1ERKS_
 6765      00
 6766              		.loc 8 1769 23
 6767 0037 488D45E7 		leaq	-25(%rbp), %rax
 6768 003b 4889C7   		movq	%rax, %rdi
 6769              	.LEHB148:
 6770 003e E8000000 		call	_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_
 6770      00
 6771              	.LEHE148:
 6772              		.loc 8 1769 10
 6773 0043 483945D8 		cmpq	%rax, -40(%rbp)
 6774 0047 0F97C3   		seta	%bl
 6775              		.loc 8 1769 24
 6776 004a 488D45E7 		leaq	-25(%rbp), %rax
 6777 004e 4889C7   		movq	%rax, %rdi
 6778 0051 E8000000 		call	_ZNSaIfED1Ev
 6778      00
 6779              		.loc 8 1769 2
 6780 0056 84DB     		testb	%bl, %bl
 6781 0058 740F     		je	.L331
1770:/usr/include/c++/11/bits/stl_vector.h **** 	  __throw_length_error(
 6782              		.loc 8 1770 24
 6783 005a 488D0500 		leaq	.LC63(%rip), %rax
 6783      000000
 6784 0061 4889C7   		movq	%rax, %rdi
 6785              	.LEHB149:
 6786 0064 E8000000 		call	_ZSt20__throw_length_errorPKc@PLT
 6786      00
 6787              	.L331:
1771:/usr/include/c++/11/bits/stl_vector.h **** 	      __N("cannot create std::vector larger than max_size()"));
1772:/usr/include/c++/11/bits/stl_vector.h **** 	return __n;
 6788              		.loc 8 1772 9
 6789 0069 488B45D8 		movq	-40(%rbp), %rax
1773:/usr/include/c++/11/bits/stl_vector.h ****       }
 6790              		.loc 8 1773 7
 6791 006d 488B55E8 		movq	-24(%rbp), %rdx
 6792 0071 64482B14 		subq	%fs:40, %rdx
 6792      25280000 
 6792      00
 6793 007a 7425     		je	.L334
 6794 007c EB1E     		jmp	.L336
 6795              	.L335:
 6796 007e F30F1EFA 		endbr64
1769:/usr/include/c++/11/bits/stl_vector.h **** 	  __throw_length_error(
 6797              		.loc 8 1769 24
 6798 0082 4889C3   		movq	%rax, %rbx
 6799 0085 488D45E7 		leaq	-25(%rbp), %rax
 6800 0089 4889C7   		movq	%rax, %rdi
 6801 008c E8000000 		call	_ZNSaIfED1Ev
 6801      00
 6802 0091 4889D8   		movq	%rbx, %rax
 6803 0094 4889C7   		movq	%rax, %rdi
 6804 0097 E8000000 		call	_Unwind_Resume@PLT
 6804      00
 6805              	.LEHE149:
 6806              	.L336:
 6807              		.loc 8 1773 7
 6808 009c E8000000 		call	__stack_chk_fail@PLT
 6808      00
 6809              	.L334:
 6810 00a1 488B5DF8 		movq	-8(%rbp), %rbx
 6811 00a5 C9       		leave
 6812              		.cfi_def_cfa 7, 8
 6813 00a6 C3       		ret
 6814              		.cfi_endproc
 6815              	.LFE1587:
 6816              		.section	.gcc_except_table
 6817              	.LLSDA1587:
 6818 043c FF       		.byte	0xff
 6819 043d FF       		.byte	0xff
 6820 043e 01       		.byte	0x1
 6821 043f 08       		.uleb128 .LLSDACSE1587-.LLSDACSB1587
 6822              	.LLSDACSB1587:
 6823 0440 3E       		.uleb128 .LEHB148-.LFB1587
 6824 0441 05       		.uleb128 .LEHE148-.LEHB148
 6825 0442 7E       		.uleb128 .L335-.LFB1587
 6826 0443 00       		.uleb128 0
 6827 0444 64       		.uleb128 .LEHB149-.LFB1587
 6828 0445 38       		.uleb128 .LEHE149-.LEHB149
 6829 0446 00       		.uleb128 0
 6830 0447 00       		.uleb128 0
 6831              	.LLSDACSE1587:
 6832              		.section	.text._ZNSt6vectorIfSaIfEE17_S_check_init_lenEmRKS0_,"axG",@progbits,_ZNSt6vectorIfSaIfEE
 6834              		.section	.text._ZNSt12_Vector_baseIfSaIfEE12_Vector_implD2Ev,"axG",@progbits,_ZNSt12_Vector_baseIf
 6835              		.align 2
 6836              		.weak	_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD2Ev
 6838              	_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD2Ev:
 6839              	.LFB1590:
 128:/usr/include/c++/11/bits/stl_vector.h **** 	: public _Tp_alloc_type, public _Vector_impl_data
 6840              		.loc 8 128 14
 6841              		.cfi_startproc
 6842 0000 F30F1EFA 		endbr64
 6843 0004 55       		pushq	%rbp
 6844              		.cfi_def_cfa_offset 16
 6845              		.cfi_offset 6, -16
 6846 0005 4889E5   		movq	%rsp, %rbp
 6847              		.cfi_def_cfa_register 6
 6848 0008 4883EC10 		subq	$16, %rsp
 6849 000c 48897DF8 		movq	%rdi, -8(%rbp)
 6850              	.LBB106:
 128:/usr/include/c++/11/bits/stl_vector.h **** 	: public _Tp_alloc_type, public _Vector_impl_data
 6851              		.loc 8 128 14
 6852 0010 488B45F8 		movq	-8(%rbp), %rax
 6853 0014 4889C7   		movq	%rax, %rdi
 6854 0017 E8000000 		call	_ZNSaIfED2Ev
 6854      00
 6855              	.LBE106:
 6856 001c 90       		nop
 6857 001d C9       		leave
 6858              		.cfi_def_cfa 7, 8
 6859 001e C3       		ret
 6860              		.cfi_endproc
 6861              	.LFE1590:
 6863              		.weak	_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev
 6864              		.set	_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev,_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD2Ev
 6865              		.section	.text._ZNSt12_Vector_baseIfSaIfEEC2EmRKS0_,"axG",@progbits,_ZNSt12_Vector_baseIfSaIfEEC5E
 6866              		.align 2
 6867              		.weak	_ZNSt12_Vector_baseIfSaIfEEC2EmRKS0_
 6869              	_ZNSt12_Vector_baseIfSaIfEEC2EmRKS0_:
 6870              	.LFB1592:
 303:/usr/include/c++/11/bits/stl_vector.h ****       : _M_impl(__a)
 6871              		.loc 8 303 7
 6872              		.cfi_startproc
 6873              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 6874              		.cfi_lsda 0x1b,.LLSDA1592
 6875 0000 F30F1EFA 		endbr64
 6876 0004 55       		pushq	%rbp
 6877              		.cfi_def_cfa_offset 16
 6878              		.cfi_offset 6, -16
 6879 0005 4889E5   		movq	%rsp, %rbp
 6880              		.cfi_def_cfa_register 6
 6881 0008 53       		pushq	%rbx
 6882 0009 4883EC28 		subq	$40, %rsp
 6883              		.cfi_offset 3, -24
 6884 000d 48897DE8 		movq	%rdi, -24(%rbp)
 6885 0011 488975E0 		movq	%rsi, -32(%rbp)
 6886 0015 488955D8 		movq	%rdx, -40(%rbp)
 6887              	.LBB107:
 304:/usr/include/c++/11/bits/stl_vector.h ****       { _M_create_storage(__n); }
 6888              		.loc 8 304 9
 6889 0019 488B45E8 		movq	-24(%rbp), %rax
 6890 001d 488B55D8 		movq	-40(%rbp), %rdx
 6891 0021 4889D6   		movq	%rdx, %rsi
 6892 0024 4889C7   		movq	%rax, %rdi
 6893              	.LEHB150:
 6894 0027 E8000000 		call	_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_
 6894      00
 6895              	.LEHE150:
 305:/usr/include/c++/11/bits/stl_vector.h **** 
 6896              		.loc 8 305 26
 6897 002c 488B55E0 		movq	-32(%rbp), %rdx
 6898 0030 488B45E8 		movq	-24(%rbp), %rax
 6899 0034 4889D6   		movq	%rdx, %rsi
 6900 0037 4889C7   		movq	%rax, %rdi
 6901              	.LEHB151:
 6902 003a E8000000 		call	_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEm
 6902      00
 6903              	.LEHE151:
 6904              	.LBE107:
 305:/usr/include/c++/11/bits/stl_vector.h **** 
 6905              		.loc 8 305 33
 6906 003f EB1E     		jmp	.L341
 6907              	.L340:
 6908 0041 F30F1EFA 		endbr64
 6909              	.LBB108:
 6910 0045 4889C3   		movq	%rax, %rbx
 6911 0048 488B45E8 		movq	-24(%rbp), %rax
 6912 004c 4889C7   		movq	%rax, %rdi
 6913 004f E8000000 		call	_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev
 6913      00
 6914 0054 4889D8   		movq	%rbx, %rax
 6915 0057 4889C7   		movq	%rax, %rdi
 6916              	.LEHB152:
 6917 005a E8000000 		call	_Unwind_Resume@PLT
 6917      00
 6918              	.LEHE152:
 6919              	.L341:
 6920              	.LBE108:
 6921 005f 488B5DF8 		movq	-8(%rbp), %rbx
 6922 0063 C9       		leave
 6923              		.cfi_def_cfa 7, 8
 6924 0064 C3       		ret
 6925              		.cfi_endproc
 6926              	.LFE1592:
 6927              		.section	.gcc_except_table
 6928              	.LLSDA1592:
 6929 0448 FF       		.byte	0xff
 6930 0449 FF       		.byte	0xff
 6931 044a 01       		.byte	0x1
 6932 044b 0C       		.uleb128 .LLSDACSE1592-.LLSDACSB1592
 6933              	.LLSDACSB1592:
 6934 044c 27       		.uleb128 .LEHB150-.LFB1592
 6935 044d 05       		.uleb128 .LEHE150-.LEHB150
 6936 044e 00       		.uleb128 0
 6937 044f 00       		.uleb128 0
 6938 0450 3A       		.uleb128 .LEHB151-.LFB1592
 6939 0451 05       		.uleb128 .LEHE151-.LEHB151
 6940 0452 41       		.uleb128 .L340-.LFB1592
 6941 0453 00       		.uleb128 0
 6942 0454 5A       		.uleb128 .LEHB152-.LFB1592
 6943 0455 05       		.uleb128 .LEHE152-.LEHB152
 6944 0456 00       		.uleb128 0
 6945 0457 00       		.uleb128 0
 6946              	.LLSDACSE1592:
 6947              		.section	.text._ZNSt12_Vector_baseIfSaIfEEC2EmRKS0_,"axG",@progbits,_ZNSt12_Vector_baseIfSaIfEEC5E
 6949              		.weak	_ZNSt12_Vector_baseIfSaIfEEC1EmRKS0_
 6950              		.set	_ZNSt12_Vector_baseIfSaIfEEC1EmRKS0_,_ZNSt12_Vector_baseIfSaIfEEC2EmRKS0_
 6951              		.section	.text._ZNSt12_Vector_baseIfSaIfEED2Ev,"axG",@progbits,_ZNSt12_Vector_baseIfSaIfEED5Ev,com
 6952              		.align 2
 6953              		.weak	_ZNSt12_Vector_baseIfSaIfEED2Ev
 6955              	_ZNSt12_Vector_baseIfSaIfEED2Ev:
 6956              	.LFB1595:
 333:/usr/include/c++/11/bits/stl_vector.h ****       {
 6957              		.loc 8 333 7
 6958              		.cfi_startproc
 6959              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 6960              		.cfi_lsda 0x1b,.LLSDA1595
 6961 0000 F30F1EFA 		endbr64
 6962 0004 55       		pushq	%rbp
 6963              		.cfi_def_cfa_offset 16
 6964              		.cfi_offset 6, -16
 6965 0005 4889E5   		movq	%rsp, %rbp
 6966              		.cfi_def_cfa_register 6
 6967 0008 53       		pushq	%rbx
 6968 0009 4883EC18 		subq	$24, %rsp
 6969              		.cfi_offset 3, -24
 6970 000d 48897DE8 		movq	%rdi, -24(%rbp)
 6971              	.LBB109:
 336:/usr/include/c++/11/bits/stl_vector.h ****       }
 6972              		.loc 8 336 17
 6973 0011 488B45E8 		movq	-24(%rbp), %rax
 6974 0015 488B5010 		movq	16(%rax), %rdx
 336:/usr/include/c++/11/bits/stl_vector.h ****       }
 6975              		.loc 8 336 45
 6976 0019 488B45E8 		movq	-24(%rbp), %rax
 6977 001d 488B08   		movq	(%rax), %rcx
 336:/usr/include/c++/11/bits/stl_vector.h ****       }
 6978              		.loc 8 336 35
 6979 0020 4889D0   		movq	%rdx, %rax
 6980 0023 4829C8   		subq	%rcx, %rax
 6981 0026 48C1F802 		sarq	$2, %rax
 335:/usr/include/c++/11/bits/stl_vector.h **** 		      _M_impl._M_end_of_storage - _M_impl._M_start);
 6982              		.loc 8 335 15
 6983 002a 4889C2   		movq	%rax, %rdx
 6984 002d 488B45E8 		movq	-24(%rbp), %rax
 6985 0031 488B08   		movq	(%rax), %rcx
 6986 0034 488B45E8 		movq	-24(%rbp), %rax
 6987 0038 4889CE   		movq	%rcx, %rsi
 6988 003b 4889C7   		movq	%rax, %rdi
 6989              	.LEHB153:
 6990 003e E8000000 		call	_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfm
 6990      00
 6991              	.LEHE153:
 337:/usr/include/c++/11/bits/stl_vector.h **** 
 6992              		.loc 8 337 7
 6993 0043 488B45E8 		movq	-24(%rbp), %rax
 6994 0047 4889C7   		movq	%rax, %rdi
 6995 004a E8000000 		call	_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev
 6995      00
 6996              	.LBE109:
 6997 004f EB1E     		jmp	.L345
 6998              	.L344:
 6999 0051 F30F1EFA 		endbr64
 7000              	.LBB110:
 7001 0055 4889C3   		movq	%rax, %rbx
 7002 0058 488B45E8 		movq	-24(%rbp), %rax
 7003 005c 4889C7   		movq	%rax, %rdi
 7004 005f E8000000 		call	_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev
 7004      00
 7005 0064 4889D8   		movq	%rbx, %rax
 7006 0067 4889C7   		movq	%rax, %rdi
 7007              	.LEHB154:
 7008 006a E8000000 		call	_Unwind_Resume@PLT
 7008      00
 7009              	.LEHE154:
 7010              	.L345:
 7011              	.LBE110:
 7012 006f 488B5DF8 		movq	-8(%rbp), %rbx
 7013 0073 C9       		leave
 7014              		.cfi_def_cfa 7, 8
 7015 0074 C3       		ret
 7016              		.cfi_endproc
 7017              	.LFE1595:
 7018              		.section	.gcc_except_table
 7019              	.LLSDA1595:
 7020 0458 FF       		.byte	0xff
 7021 0459 FF       		.byte	0xff
 7022 045a 01       		.byte	0x1
 7023 045b 08       		.uleb128 .LLSDACSE1595-.LLSDACSB1595
 7024              	.LLSDACSB1595:
 7025 045c 3E       		.uleb128 .LEHB153-.LFB1595
 7026 045d 05       		.uleb128 .LEHE153-.LEHB153
 7027 045e 51       		.uleb128 .L344-.LFB1595
 7028 045f 00       		.uleb128 0
 7029 0460 6A       		.uleb128 .LEHB154-.LFB1595
 7030 0461 05       		.uleb128 .LEHE154-.LEHB154
 7031 0462 00       		.uleb128 0
 7032 0463 00       		.uleb128 0
 7033              	.LLSDACSE1595:
 7034              		.section	.text._ZNSt12_Vector_baseIfSaIfEED2Ev,"axG",@progbits,_ZNSt12_Vector_baseIfSaIfEED5Ev,com
 7036              		.weak	_ZNSt12_Vector_baseIfSaIfEED1Ev
 7037              		.set	_ZNSt12_Vector_baseIfSaIfEED1Ev,_ZNSt12_Vector_baseIfSaIfEED2Ev
 7038              		.section	.text._ZNSt6vectorIfSaIfEE18_M_fill_initializeEmRKf,"axG",@progbits,_ZNSt6vectorIfSaIfEE1
 7039              		.align 2
 7040              		.weak	_ZNSt6vectorIfSaIfEE18_M_fill_initializeEmRKf
 7042              	_ZNSt6vectorIfSaIfEE18_M_fill_initializeEmRKf:
 7043              	.LFB1597:
1593:/usr/include/c++/11/bits/stl_vector.h ****       {
 7044              		.loc 8 1593 7
 7045              		.cfi_startproc
 7046 0000 F30F1EFA 		endbr64
 7047 0004 55       		pushq	%rbp
 7048              		.cfi_def_cfa_offset 16
 7049              		.cfi_offset 6, -16
 7050 0005 4889E5   		movq	%rsp, %rbp
 7051              		.cfi_def_cfa_register 6
 7052 0008 4883EC20 		subq	$32, %rsp
 7053 000c 48897DF8 		movq	%rdi, -8(%rbp)
 7054 0010 488975F0 		movq	%rsi, -16(%rbp)
 7055 0014 488955E8 		movq	%rdx, -24(%rbp)
1597:/usr/include/c++/11/bits/stl_vector.h ****       }
 7056              		.loc 8 1597 25
 7057 0018 488B45F8 		movq	-8(%rbp), %rax
 7058 001c 4889C7   		movq	%rax, %rdi
 7059 001f E8000000 		call	_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv
 7059      00
 7060 0024 4889C1   		movq	%rax, %rcx
1596:/usr/include/c++/11/bits/stl_vector.h **** 					_M_get_Tp_allocator());
 7061              		.loc 8 1596 33
 7062 0027 488B45F8 		movq	-8(%rbp), %rax
 7063 002b 488B00   		movq	(%rax), %rax
 7064 002e 488B55E8 		movq	-24(%rbp), %rdx
 7065 0032 488B75F0 		movq	-16(%rbp), %rsi
 7066 0036 4889C7   		movq	%rax, %rdi
 7067 0039 E8000000 		call	_ZSt24__uninitialized_fill_n_aIPfmffET_S1_T0_RKT1_RSaIT2_E
 7067      00
1595:/usr/include/c++/11/bits/stl_vector.h **** 	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
 7068              		.loc 8 1595 26
 7069 003e 488B55F8 		movq	-8(%rbp), %rdx
 7070 0042 48894208 		movq	%rax, 8(%rdx)
1598:/usr/include/c++/11/bits/stl_vector.h **** 
 7071              		.loc 8 1598 7
 7072 0046 90       		nop
 7073 0047 C9       		leave
 7074              		.cfi_def_cfa 7, 8
 7075 0048 C3       		ret
 7076              		.cfi_endproc
 7077              	.LFE1597:
 7079              		.section	.text._ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv,"axG",@progbits,_ZNSt12_Vector_b
 7080              		.align 2
 7081              		.weak	_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv
 7083              	_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv:
 7084              	.LFB1598:
 276:/usr/include/c++/11/bits/stl_vector.h ****       { return this->_M_impl; }
 7085              		.loc 8 276 7
 7086              		.cfi_startproc
 7087 0000 F30F1EFA 		endbr64
 7088 0004 55       		pushq	%rbp
 7089              		.cfi_def_cfa_offset 16
 7090              		.cfi_offset 6, -16
 7091 0005 4889E5   		movq	%rsp, %rbp
 7092              		.cfi_def_cfa_register 6
 7093 0008 48897DF8 		movq	%rdi, -8(%rbp)
 277:/usr/include/c++/11/bits/stl_vector.h **** 
 7094              		.loc 8 277 22
 7095 000c 488B45F8 		movq	-8(%rbp), %rax
 277:/usr/include/c++/11/bits/stl_vector.h **** 
 7096              		.loc 8 277 31
 7097 0010 5D       		popq	%rbp
 7098              		.cfi_def_cfa 7, 8
 7099 0011 C3       		ret
 7100              		.cfi_endproc
 7101              	.LFE1598:
 7103              		.section	.text._ZSt8_DestroyIPffEvT_S1_RSaIT0_E,"axG",@progbits,_ZSt8_DestroyIPffEvT_S1_RSaIT0_E,c
 7104              		.weak	_ZSt8_DestroyIPffEvT_S1_RSaIT0_E
 7106              	_ZSt8_DestroyIPffEvT_S1_RSaIT0_E:
 7107              	.LFB1599:
 7108              		.file 11 "/usr/include/c++/11/bits/alloc_traits.h"
   1:/usr/include/c++/11/bits/alloc_traits.h **** // Allocator traits -*- C++ -*-
   2:/usr/include/c++/11/bits/alloc_traits.h **** 
   3:/usr/include/c++/11/bits/alloc_traits.h **** // Copyright (C) 2011-2021 Free Software Foundation, Inc.
   4:/usr/include/c++/11/bits/alloc_traits.h **** //
   5:/usr/include/c++/11/bits/alloc_traits.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/11/bits/alloc_traits.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/11/bits/alloc_traits.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/11/bits/alloc_traits.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/11/bits/alloc_traits.h **** // any later version.
  10:/usr/include/c++/11/bits/alloc_traits.h **** 
  11:/usr/include/c++/11/bits/alloc_traits.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/11/bits/alloc_traits.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/11/bits/alloc_traits.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/11/bits/alloc_traits.h **** // GNU General Public License for more details.
  15:/usr/include/c++/11/bits/alloc_traits.h **** 
  16:/usr/include/c++/11/bits/alloc_traits.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/11/bits/alloc_traits.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/11/bits/alloc_traits.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/11/bits/alloc_traits.h **** 
  20:/usr/include/c++/11/bits/alloc_traits.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/11/bits/alloc_traits.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/11/bits/alloc_traits.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/11/bits/alloc_traits.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/11/bits/alloc_traits.h **** 
  25:/usr/include/c++/11/bits/alloc_traits.h **** /** @file bits/alloc_traits.h
  26:/usr/include/c++/11/bits/alloc_traits.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/c++/11/bits/alloc_traits.h ****  *  Do not attempt to use it directly. @headername{memory}
  28:/usr/include/c++/11/bits/alloc_traits.h ****  */
  29:/usr/include/c++/11/bits/alloc_traits.h **** 
  30:/usr/include/c++/11/bits/alloc_traits.h **** #ifndef _ALLOC_TRAITS_H
  31:/usr/include/c++/11/bits/alloc_traits.h **** #define _ALLOC_TRAITS_H 1
  32:/usr/include/c++/11/bits/alloc_traits.h **** 
  33:/usr/include/c++/11/bits/alloc_traits.h **** #include <bits/stl_construct.h>
  34:/usr/include/c++/11/bits/alloc_traits.h **** #include <bits/memoryfwd.h>
  35:/usr/include/c++/11/bits/alloc_traits.h **** #if __cplusplus >= 201103L
  36:/usr/include/c++/11/bits/alloc_traits.h **** # include <bits/allocator.h>
  37:/usr/include/c++/11/bits/alloc_traits.h **** # include <bits/ptr_traits.h>
  38:/usr/include/c++/11/bits/alloc_traits.h **** # include <ext/numeric_traits.h>
  39:/usr/include/c++/11/bits/alloc_traits.h **** #endif
  40:/usr/include/c++/11/bits/alloc_traits.h **** 
  41:/usr/include/c++/11/bits/alloc_traits.h **** namespace std _GLIBCXX_VISIBILITY(default)
  42:/usr/include/c++/11/bits/alloc_traits.h **** {
  43:/usr/include/c++/11/bits/alloc_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  44:/usr/include/c++/11/bits/alloc_traits.h **** 
  45:/usr/include/c++/11/bits/alloc_traits.h **** #if __cplusplus >= 201103L
  46:/usr/include/c++/11/bits/alloc_traits.h **** #define __cpp_lib_allocator_traits_is_always_equal 201411
  47:/usr/include/c++/11/bits/alloc_traits.h **** 
  48:/usr/include/c++/11/bits/alloc_traits.h ****   /// @cond undocumented
  49:/usr/include/c++/11/bits/alloc_traits.h ****   struct __allocator_traits_base
  50:/usr/include/c++/11/bits/alloc_traits.h ****   {
  51:/usr/include/c++/11/bits/alloc_traits.h ****     template<typename _Tp, typename _Up, typename = void>
  52:/usr/include/c++/11/bits/alloc_traits.h ****       struct __rebind : __replace_first_arg<_Tp, _Up> { };
  53:/usr/include/c++/11/bits/alloc_traits.h **** 
  54:/usr/include/c++/11/bits/alloc_traits.h ****     template<typename _Tp, typename _Up>
  55:/usr/include/c++/11/bits/alloc_traits.h ****       struct __rebind<_Tp, _Up,
  56:/usr/include/c++/11/bits/alloc_traits.h **** 		      __void_t<typename _Tp::template rebind<_Up>::other>>
  57:/usr/include/c++/11/bits/alloc_traits.h ****       { using type = typename _Tp::template rebind<_Up>::other; };
  58:/usr/include/c++/11/bits/alloc_traits.h **** 
  59:/usr/include/c++/11/bits/alloc_traits.h ****   protected:
  60:/usr/include/c++/11/bits/alloc_traits.h ****     template<typename _Tp>
  61:/usr/include/c++/11/bits/alloc_traits.h ****       using __pointer = typename _Tp::pointer;
  62:/usr/include/c++/11/bits/alloc_traits.h ****     template<typename _Tp>
  63:/usr/include/c++/11/bits/alloc_traits.h ****       using __c_pointer = typename _Tp::const_pointer;
  64:/usr/include/c++/11/bits/alloc_traits.h ****     template<typename _Tp>
  65:/usr/include/c++/11/bits/alloc_traits.h ****       using __v_pointer = typename _Tp::void_pointer;
  66:/usr/include/c++/11/bits/alloc_traits.h ****     template<typename _Tp>
  67:/usr/include/c++/11/bits/alloc_traits.h ****       using __cv_pointer = typename _Tp::const_void_pointer;
  68:/usr/include/c++/11/bits/alloc_traits.h ****     template<typename _Tp>
  69:/usr/include/c++/11/bits/alloc_traits.h ****       using __pocca = typename _Tp::propagate_on_container_copy_assignment;
  70:/usr/include/c++/11/bits/alloc_traits.h ****     template<typename _Tp>
  71:/usr/include/c++/11/bits/alloc_traits.h ****       using __pocma = typename _Tp::propagate_on_container_move_assignment;
  72:/usr/include/c++/11/bits/alloc_traits.h ****     template<typename _Tp>
  73:/usr/include/c++/11/bits/alloc_traits.h ****       using __pocs = typename _Tp::propagate_on_container_swap;
  74:/usr/include/c++/11/bits/alloc_traits.h ****     template<typename _Tp>
  75:/usr/include/c++/11/bits/alloc_traits.h ****       using __equal = typename _Tp::is_always_equal;
  76:/usr/include/c++/11/bits/alloc_traits.h ****   };
  77:/usr/include/c++/11/bits/alloc_traits.h **** 
  78:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc, typename _Up>
  79:/usr/include/c++/11/bits/alloc_traits.h ****     using __alloc_rebind
  80:/usr/include/c++/11/bits/alloc_traits.h ****       = typename __allocator_traits_base::template __rebind<_Alloc, _Up>::type;
  81:/usr/include/c++/11/bits/alloc_traits.h ****   /// @endcond
  82:/usr/include/c++/11/bits/alloc_traits.h **** 
  83:/usr/include/c++/11/bits/alloc_traits.h ****   /**
  84:/usr/include/c++/11/bits/alloc_traits.h ****    * @brief  Uniform interface to all allocator types.
  85:/usr/include/c++/11/bits/alloc_traits.h ****    * @headerfile memory
  86:/usr/include/c++/11/bits/alloc_traits.h ****    * @ingroup allocators
  87:/usr/include/c++/11/bits/alloc_traits.h ****    * @since C++11
  88:/usr/include/c++/11/bits/alloc_traits.h ****   */
  89:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc>
  90:/usr/include/c++/11/bits/alloc_traits.h ****     struct allocator_traits : __allocator_traits_base
  91:/usr/include/c++/11/bits/alloc_traits.h ****     {
  92:/usr/include/c++/11/bits/alloc_traits.h ****       /// The allocator type
  93:/usr/include/c++/11/bits/alloc_traits.h ****       typedef _Alloc allocator_type;
  94:/usr/include/c++/11/bits/alloc_traits.h ****       /// The allocated type
  95:/usr/include/c++/11/bits/alloc_traits.h ****       typedef typename _Alloc::value_type value_type;
  96:/usr/include/c++/11/bits/alloc_traits.h **** 
  97:/usr/include/c++/11/bits/alloc_traits.h ****       /**
  98:/usr/include/c++/11/bits/alloc_traits.h ****        * @brief   The allocator's pointer type.
  99:/usr/include/c++/11/bits/alloc_traits.h ****        *
 100:/usr/include/c++/11/bits/alloc_traits.h ****        * @c Alloc::pointer if that type exists, otherwise @c value_type*
 101:/usr/include/c++/11/bits/alloc_traits.h ****       */
 102:/usr/include/c++/11/bits/alloc_traits.h ****       using pointer = __detected_or_t<value_type*, __pointer, _Alloc>;
 103:/usr/include/c++/11/bits/alloc_traits.h **** 
 104:/usr/include/c++/11/bits/alloc_traits.h ****     private:
 105:/usr/include/c++/11/bits/alloc_traits.h ****       // Select _Func<_Alloc> or pointer_traits<pointer>::rebind<_Tp>
 106:/usr/include/c++/11/bits/alloc_traits.h ****       template<template<typename> class _Func, typename _Tp, typename = void>
 107:/usr/include/c++/11/bits/alloc_traits.h **** 	struct _Ptr
 108:/usr/include/c++/11/bits/alloc_traits.h **** 	{
 109:/usr/include/c++/11/bits/alloc_traits.h **** 	  using type = typename pointer_traits<pointer>::template rebind<_Tp>;
 110:/usr/include/c++/11/bits/alloc_traits.h **** 	};
 111:/usr/include/c++/11/bits/alloc_traits.h **** 
 112:/usr/include/c++/11/bits/alloc_traits.h ****       template<template<typename> class _Func, typename _Tp>
 113:/usr/include/c++/11/bits/alloc_traits.h **** 	struct _Ptr<_Func, _Tp, __void_t<_Func<_Alloc>>>
 114:/usr/include/c++/11/bits/alloc_traits.h **** 	{
 115:/usr/include/c++/11/bits/alloc_traits.h **** 	  using type = _Func<_Alloc>;
 116:/usr/include/c++/11/bits/alloc_traits.h **** 	};
 117:/usr/include/c++/11/bits/alloc_traits.h **** 
 118:/usr/include/c++/11/bits/alloc_traits.h ****       // Select _A2::difference_type or pointer_traits<_Ptr>::difference_type
 119:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _A2, typename _PtrT, typename = void>
 120:/usr/include/c++/11/bits/alloc_traits.h **** 	struct _Diff
 121:/usr/include/c++/11/bits/alloc_traits.h **** 	{ using type = typename pointer_traits<_PtrT>::difference_type; };
 122:/usr/include/c++/11/bits/alloc_traits.h **** 
 123:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _A2, typename _PtrT>
 124:/usr/include/c++/11/bits/alloc_traits.h **** 	struct _Diff<_A2, _PtrT, __void_t<typename _A2::difference_type>>
 125:/usr/include/c++/11/bits/alloc_traits.h **** 	{ using type = typename _A2::difference_type; };
 126:/usr/include/c++/11/bits/alloc_traits.h **** 
 127:/usr/include/c++/11/bits/alloc_traits.h ****       // Select _A2::size_type or make_unsigned<_DiffT>::type
 128:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _A2, typename _DiffT, typename = void>
 129:/usr/include/c++/11/bits/alloc_traits.h **** 	struct _Size : make_unsigned<_DiffT> { };
 130:/usr/include/c++/11/bits/alloc_traits.h **** 
 131:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _A2, typename _DiffT>
 132:/usr/include/c++/11/bits/alloc_traits.h **** 	struct _Size<_A2, _DiffT, __void_t<typename _A2::size_type>>
 133:/usr/include/c++/11/bits/alloc_traits.h **** 	{ using type = typename _A2::size_type; };
 134:/usr/include/c++/11/bits/alloc_traits.h **** 
 135:/usr/include/c++/11/bits/alloc_traits.h ****     public:
 136:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 137:/usr/include/c++/11/bits/alloc_traits.h ****        * @brief   The allocator's const pointer type.
 138:/usr/include/c++/11/bits/alloc_traits.h ****        *
 139:/usr/include/c++/11/bits/alloc_traits.h ****        * @c Alloc::const_pointer if that type exists, otherwise
 140:/usr/include/c++/11/bits/alloc_traits.h ****        * <tt> pointer_traits<pointer>::rebind<const value_type> </tt>
 141:/usr/include/c++/11/bits/alloc_traits.h ****       */
 142:/usr/include/c++/11/bits/alloc_traits.h ****       using const_pointer = typename _Ptr<__c_pointer, const value_type>::type;
 143:/usr/include/c++/11/bits/alloc_traits.h **** 
 144:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 145:/usr/include/c++/11/bits/alloc_traits.h ****        * @brief   The allocator's void pointer type.
 146:/usr/include/c++/11/bits/alloc_traits.h ****        *
 147:/usr/include/c++/11/bits/alloc_traits.h ****        * @c Alloc::void_pointer if that type exists, otherwise
 148:/usr/include/c++/11/bits/alloc_traits.h ****        * <tt> pointer_traits<pointer>::rebind<void> </tt>
 149:/usr/include/c++/11/bits/alloc_traits.h ****       */
 150:/usr/include/c++/11/bits/alloc_traits.h ****       using void_pointer = typename _Ptr<__v_pointer, void>::type;
 151:/usr/include/c++/11/bits/alloc_traits.h **** 
 152:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 153:/usr/include/c++/11/bits/alloc_traits.h ****        * @brief   The allocator's const void pointer type.
 154:/usr/include/c++/11/bits/alloc_traits.h ****        *
 155:/usr/include/c++/11/bits/alloc_traits.h ****        * @c Alloc::const_void_pointer if that type exists, otherwise
 156:/usr/include/c++/11/bits/alloc_traits.h ****        * <tt> pointer_traits<pointer>::rebind<const void> </tt>
 157:/usr/include/c++/11/bits/alloc_traits.h ****       */
 158:/usr/include/c++/11/bits/alloc_traits.h ****       using const_void_pointer = typename _Ptr<__cv_pointer, const void>::type;
 159:/usr/include/c++/11/bits/alloc_traits.h **** 
 160:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 161:/usr/include/c++/11/bits/alloc_traits.h ****        * @brief   The allocator's difference type
 162:/usr/include/c++/11/bits/alloc_traits.h ****        *
 163:/usr/include/c++/11/bits/alloc_traits.h ****        * @c Alloc::difference_type if that type exists, otherwise
 164:/usr/include/c++/11/bits/alloc_traits.h ****        * <tt> pointer_traits<pointer>::difference_type </tt>
 165:/usr/include/c++/11/bits/alloc_traits.h ****       */
 166:/usr/include/c++/11/bits/alloc_traits.h ****       using difference_type = typename _Diff<_Alloc, pointer>::type;
 167:/usr/include/c++/11/bits/alloc_traits.h **** 
 168:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 169:/usr/include/c++/11/bits/alloc_traits.h ****        * @brief   The allocator's size type
 170:/usr/include/c++/11/bits/alloc_traits.h ****        *
 171:/usr/include/c++/11/bits/alloc_traits.h ****        * @c Alloc::size_type if that type exists, otherwise
 172:/usr/include/c++/11/bits/alloc_traits.h ****        * <tt> make_unsigned<difference_type>::type </tt>
 173:/usr/include/c++/11/bits/alloc_traits.h ****       */
 174:/usr/include/c++/11/bits/alloc_traits.h ****       using size_type = typename _Size<_Alloc, difference_type>::type;
 175:/usr/include/c++/11/bits/alloc_traits.h **** 
 176:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 177:/usr/include/c++/11/bits/alloc_traits.h ****        * @brief   How the allocator is propagated on copy assignment
 178:/usr/include/c++/11/bits/alloc_traits.h ****        *
 179:/usr/include/c++/11/bits/alloc_traits.h ****        * @c Alloc::propagate_on_container_copy_assignment if that type exists,
 180:/usr/include/c++/11/bits/alloc_traits.h ****        * otherwise @c false_type
 181:/usr/include/c++/11/bits/alloc_traits.h ****       */
 182:/usr/include/c++/11/bits/alloc_traits.h ****       using propagate_on_container_copy_assignment
 183:/usr/include/c++/11/bits/alloc_traits.h **** 	= __detected_or_t<false_type, __pocca, _Alloc>;
 184:/usr/include/c++/11/bits/alloc_traits.h **** 
 185:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 186:/usr/include/c++/11/bits/alloc_traits.h ****        * @brief   How the allocator is propagated on move assignment
 187:/usr/include/c++/11/bits/alloc_traits.h ****        *
 188:/usr/include/c++/11/bits/alloc_traits.h ****        * @c Alloc::propagate_on_container_move_assignment if that type exists,
 189:/usr/include/c++/11/bits/alloc_traits.h ****        * otherwise @c false_type
 190:/usr/include/c++/11/bits/alloc_traits.h ****       */
 191:/usr/include/c++/11/bits/alloc_traits.h ****       using propagate_on_container_move_assignment
 192:/usr/include/c++/11/bits/alloc_traits.h **** 	= __detected_or_t<false_type, __pocma, _Alloc>;
 193:/usr/include/c++/11/bits/alloc_traits.h **** 
 194:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 195:/usr/include/c++/11/bits/alloc_traits.h ****        * @brief   How the allocator is propagated on swap
 196:/usr/include/c++/11/bits/alloc_traits.h ****        *
 197:/usr/include/c++/11/bits/alloc_traits.h ****        * @c Alloc::propagate_on_container_swap if that type exists,
 198:/usr/include/c++/11/bits/alloc_traits.h ****        * otherwise @c false_type
 199:/usr/include/c++/11/bits/alloc_traits.h ****       */
 200:/usr/include/c++/11/bits/alloc_traits.h ****       using propagate_on_container_swap
 201:/usr/include/c++/11/bits/alloc_traits.h **** 	= __detected_or_t<false_type, __pocs, _Alloc>;
 202:/usr/include/c++/11/bits/alloc_traits.h **** 
 203:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 204:/usr/include/c++/11/bits/alloc_traits.h ****        * @brief   Whether all instances of the allocator type compare equal.
 205:/usr/include/c++/11/bits/alloc_traits.h ****        *
 206:/usr/include/c++/11/bits/alloc_traits.h ****        * @c Alloc::is_always_equal if that type exists,
 207:/usr/include/c++/11/bits/alloc_traits.h ****        * otherwise @c is_empty<Alloc>::type
 208:/usr/include/c++/11/bits/alloc_traits.h ****       */
 209:/usr/include/c++/11/bits/alloc_traits.h ****       using is_always_equal
 210:/usr/include/c++/11/bits/alloc_traits.h **** 	= __detected_or_t<typename is_empty<_Alloc>::type, __equal, _Alloc>;
 211:/usr/include/c++/11/bits/alloc_traits.h **** 
 212:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Tp>
 213:/usr/include/c++/11/bits/alloc_traits.h **** 	using rebind_alloc = __alloc_rebind<_Alloc, _Tp>;
 214:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Tp>
 215:/usr/include/c++/11/bits/alloc_traits.h **** 	using rebind_traits = allocator_traits<rebind_alloc<_Tp>>;
 216:/usr/include/c++/11/bits/alloc_traits.h **** 
 217:/usr/include/c++/11/bits/alloc_traits.h ****     private:
 218:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Alloc2>
 219:/usr/include/c++/11/bits/alloc_traits.h **** 	static constexpr auto
 220:/usr/include/c++/11/bits/alloc_traits.h **** 	_S_allocate(_Alloc2& __a, size_type __n, const_void_pointer __hint, int)
 221:/usr/include/c++/11/bits/alloc_traits.h **** 	-> decltype(__a.allocate(__n, __hint))
 222:/usr/include/c++/11/bits/alloc_traits.h **** 	{ return __a.allocate(__n, __hint); }
 223:/usr/include/c++/11/bits/alloc_traits.h **** 
 224:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Alloc2>
 225:/usr/include/c++/11/bits/alloc_traits.h **** 	static constexpr pointer
 226:/usr/include/c++/11/bits/alloc_traits.h **** 	_S_allocate(_Alloc2& __a, size_type __n, const_void_pointer, ...)
 227:/usr/include/c++/11/bits/alloc_traits.h **** 	{ return __a.allocate(__n); }
 228:/usr/include/c++/11/bits/alloc_traits.h **** 
 229:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 230:/usr/include/c++/11/bits/alloc_traits.h **** 	struct __construct_helper
 231:/usr/include/c++/11/bits/alloc_traits.h **** 	{
 232:/usr/include/c++/11/bits/alloc_traits.h **** 	  template<typename _Alloc2,
 233:/usr/include/c++/11/bits/alloc_traits.h **** 	    typename = decltype(std::declval<_Alloc2*>()->construct(
 234:/usr/include/c++/11/bits/alloc_traits.h **** 		  std::declval<_Tp*>(), std::declval<_Args>()...))>
 235:/usr/include/c++/11/bits/alloc_traits.h **** 	    static true_type __test(int);
 236:/usr/include/c++/11/bits/alloc_traits.h **** 
 237:/usr/include/c++/11/bits/alloc_traits.h **** 	  template<typename>
 238:/usr/include/c++/11/bits/alloc_traits.h **** 	    static false_type __test(...);
 239:/usr/include/c++/11/bits/alloc_traits.h **** 
 240:/usr/include/c++/11/bits/alloc_traits.h **** 	  using type = decltype(__test<_Alloc>(0));
 241:/usr/include/c++/11/bits/alloc_traits.h **** 	};
 242:/usr/include/c++/11/bits/alloc_traits.h **** 
 243:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 244:/usr/include/c++/11/bits/alloc_traits.h **** 	using __has_construct
 245:/usr/include/c++/11/bits/alloc_traits.h **** 	  = typename __construct_helper<_Tp, _Args...>::type;
 246:/usr/include/c++/11/bits/alloc_traits.h **** 
 247:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 248:/usr/include/c++/11/bits/alloc_traits.h **** 	static _GLIBCXX14_CONSTEXPR _Require<__has_construct<_Tp, _Args...>>
 249:/usr/include/c++/11/bits/alloc_traits.h **** 	_S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 250:/usr/include/c++/11/bits/alloc_traits.h **** 	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
 251:/usr/include/c++/11/bits/alloc_traits.h **** 	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 252:/usr/include/c++/11/bits/alloc_traits.h **** 
 253:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 254:/usr/include/c++/11/bits/alloc_traits.h **** 	static _GLIBCXX14_CONSTEXPR
 255:/usr/include/c++/11/bits/alloc_traits.h **** 	_Require<__and_<__not_<__has_construct<_Tp, _Args...>>,
 256:/usr/include/c++/11/bits/alloc_traits.h **** 			       is_constructible<_Tp, _Args...>>>
 257:/usr/include/c++/11/bits/alloc_traits.h **** 	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 258:/usr/include/c++/11/bits/alloc_traits.h **** 	noexcept(std::is_nothrow_constructible<_Tp, _Args...>::value)
 259:/usr/include/c++/11/bits/alloc_traits.h **** 	{
 260:/usr/include/c++/11/bits/alloc_traits.h **** #if __cplusplus <= 201703L
 261:/usr/include/c++/11/bits/alloc_traits.h **** 	  ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 262:/usr/include/c++/11/bits/alloc_traits.h **** #else
 263:/usr/include/c++/11/bits/alloc_traits.h **** 	  std::construct_at(__p, std::forward<_Args>(__args)...);
 264:/usr/include/c++/11/bits/alloc_traits.h **** #endif
 265:/usr/include/c++/11/bits/alloc_traits.h **** 	}
 266:/usr/include/c++/11/bits/alloc_traits.h **** 
 267:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Alloc2, typename _Tp>
 268:/usr/include/c++/11/bits/alloc_traits.h **** 	static _GLIBCXX14_CONSTEXPR auto
 269:/usr/include/c++/11/bits/alloc_traits.h **** 	_S_destroy(_Alloc2& __a, _Tp* __p, int)
 270:/usr/include/c++/11/bits/alloc_traits.h **** 	noexcept(noexcept(__a.destroy(__p)))
 271:/usr/include/c++/11/bits/alloc_traits.h **** 	-> decltype(__a.destroy(__p))
 272:/usr/include/c++/11/bits/alloc_traits.h **** 	{ __a.destroy(__p); }
 273:/usr/include/c++/11/bits/alloc_traits.h **** 
 274:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Alloc2, typename _Tp>
 275:/usr/include/c++/11/bits/alloc_traits.h **** 	static _GLIBCXX14_CONSTEXPR void
 276:/usr/include/c++/11/bits/alloc_traits.h **** 	_S_destroy(_Alloc2&, _Tp* __p, ...)
 277:/usr/include/c++/11/bits/alloc_traits.h **** 	noexcept(std::is_nothrow_destructible<_Tp>::value)
 278:/usr/include/c++/11/bits/alloc_traits.h **** 	{ std::_Destroy(__p); }
 279:/usr/include/c++/11/bits/alloc_traits.h **** 
 280:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Alloc2>
 281:/usr/include/c++/11/bits/alloc_traits.h **** 	static constexpr auto
 282:/usr/include/c++/11/bits/alloc_traits.h **** 	_S_max_size(_Alloc2& __a, int)
 283:/usr/include/c++/11/bits/alloc_traits.h **** 	-> decltype(__a.max_size())
 284:/usr/include/c++/11/bits/alloc_traits.h **** 	{ return __a.max_size(); }
 285:/usr/include/c++/11/bits/alloc_traits.h **** 
 286:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Alloc2>
 287:/usr/include/c++/11/bits/alloc_traits.h **** 	static constexpr size_type
 288:/usr/include/c++/11/bits/alloc_traits.h **** 	_S_max_size(_Alloc2&, ...)
 289:/usr/include/c++/11/bits/alloc_traits.h **** 	{
 290:/usr/include/c++/11/bits/alloc_traits.h **** 	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
 291:/usr/include/c++/11/bits/alloc_traits.h **** 	  // 2466. allocator_traits::max_size() default behavior is incorrect
 292:/usr/include/c++/11/bits/alloc_traits.h **** 	  return __gnu_cxx::__numeric_traits<size_type>::__max
 293:/usr/include/c++/11/bits/alloc_traits.h **** 	    / sizeof(value_type);
 294:/usr/include/c++/11/bits/alloc_traits.h **** 	}
 295:/usr/include/c++/11/bits/alloc_traits.h **** 
 296:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Alloc2>
 297:/usr/include/c++/11/bits/alloc_traits.h **** 	static constexpr auto
 298:/usr/include/c++/11/bits/alloc_traits.h **** 	_S_select(_Alloc2& __a, int)
 299:/usr/include/c++/11/bits/alloc_traits.h **** 	-> decltype(__a.select_on_container_copy_construction())
 300:/usr/include/c++/11/bits/alloc_traits.h **** 	{ return __a.select_on_container_copy_construction(); }
 301:/usr/include/c++/11/bits/alloc_traits.h **** 
 302:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Alloc2>
 303:/usr/include/c++/11/bits/alloc_traits.h **** 	static constexpr _Alloc2
 304:/usr/include/c++/11/bits/alloc_traits.h **** 	_S_select(_Alloc2& __a, ...)
 305:/usr/include/c++/11/bits/alloc_traits.h **** 	{ return __a; }
 306:/usr/include/c++/11/bits/alloc_traits.h **** 
 307:/usr/include/c++/11/bits/alloc_traits.h ****     public:
 308:/usr/include/c++/11/bits/alloc_traits.h **** 
 309:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 310:/usr/include/c++/11/bits/alloc_traits.h ****        *  @brief  Allocate memory.
 311:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 312:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 313:/usr/include/c++/11/bits/alloc_traits.h ****        *
 314:/usr/include/c++/11/bits/alloc_traits.h ****        *  Calls @c a.allocate(n)
 315:/usr/include/c++/11/bits/alloc_traits.h ****       */
 316:/usr/include/c++/11/bits/alloc_traits.h ****       _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
 317:/usr/include/c++/11/bits/alloc_traits.h ****       allocate(_Alloc& __a, size_type __n)
 318:/usr/include/c++/11/bits/alloc_traits.h ****       { return __a.allocate(__n); }
 319:/usr/include/c++/11/bits/alloc_traits.h **** 
 320:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 321:/usr/include/c++/11/bits/alloc_traits.h ****        *  @brief  Allocate memory.
 322:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 323:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 324:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __hint Aid to locality.
 325:/usr/include/c++/11/bits/alloc_traits.h ****        *  @return Memory of suitable size and alignment for @a n objects
 326:/usr/include/c++/11/bits/alloc_traits.h ****        *          of type @c value_type
 327:/usr/include/c++/11/bits/alloc_traits.h ****        *
 328:/usr/include/c++/11/bits/alloc_traits.h ****        *  Returns <tt> a.allocate(n, hint) </tt> if that expression is
 329:/usr/include/c++/11/bits/alloc_traits.h ****        *  well-formed, otherwise returns @c a.allocate(n)
 330:/usr/include/c++/11/bits/alloc_traits.h ****       */
 331:/usr/include/c++/11/bits/alloc_traits.h ****       _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
 332:/usr/include/c++/11/bits/alloc_traits.h ****       allocate(_Alloc& __a, size_type __n, const_void_pointer __hint)
 333:/usr/include/c++/11/bits/alloc_traits.h ****       { return _S_allocate(__a, __n, __hint, 0); }
 334:/usr/include/c++/11/bits/alloc_traits.h **** 
 335:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 336:/usr/include/c++/11/bits/alloc_traits.h ****        *  @brief  Deallocate memory.
 337:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 338:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __p  Pointer to the memory to deallocate.
 339:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __n  The number of objects space was allocated for.
 340:/usr/include/c++/11/bits/alloc_traits.h ****        *
 341:/usr/include/c++/11/bits/alloc_traits.h ****        *  Calls <tt> a.deallocate(p, n) </tt>
 342:/usr/include/c++/11/bits/alloc_traits.h ****       */
 343:/usr/include/c++/11/bits/alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR void
 344:/usr/include/c++/11/bits/alloc_traits.h ****       deallocate(_Alloc& __a, pointer __p, size_type __n)
 345:/usr/include/c++/11/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 346:/usr/include/c++/11/bits/alloc_traits.h **** 
 347:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 348:/usr/include/c++/11/bits/alloc_traits.h ****        *  @brief  Construct an object of type `_Tp`
 349:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 350:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __p  Pointer to memory of suitable size and alignment for Tp
 351:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __args Constructor arguments.
 352:/usr/include/c++/11/bits/alloc_traits.h ****        *
 353:/usr/include/c++/11/bits/alloc_traits.h ****        *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
 354:/usr/include/c++/11/bits/alloc_traits.h ****        *  if that expression is well-formed, otherwise uses placement-new
 355:/usr/include/c++/11/bits/alloc_traits.h ****        *  to construct an object of type @a _Tp at location @a __p from the
 356:/usr/include/c++/11/bits/alloc_traits.h ****        *  arguments @a __args...
 357:/usr/include/c++/11/bits/alloc_traits.h ****       */
 358:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 359:/usr/include/c++/11/bits/alloc_traits.h **** 	static _GLIBCXX20_CONSTEXPR auto
 360:/usr/include/c++/11/bits/alloc_traits.h **** 	construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 361:/usr/include/c++/11/bits/alloc_traits.h **** 	noexcept(noexcept(_S_construct(__a, __p,
 362:/usr/include/c++/11/bits/alloc_traits.h **** 				       std::forward<_Args>(__args)...)))
 363:/usr/include/c++/11/bits/alloc_traits.h **** 	-> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))
 364:/usr/include/c++/11/bits/alloc_traits.h **** 	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 365:/usr/include/c++/11/bits/alloc_traits.h **** 
 366:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 367:/usr/include/c++/11/bits/alloc_traits.h ****        *  @brief  Destroy an object of type @a _Tp
 368:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 369:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __p  Pointer to the object to destroy
 370:/usr/include/c++/11/bits/alloc_traits.h ****        *
 371:/usr/include/c++/11/bits/alloc_traits.h ****        *  Calls @c __a.destroy(__p) if that expression is well-formed,
 372:/usr/include/c++/11/bits/alloc_traits.h ****        *  otherwise calls @c __p->~_Tp()
 373:/usr/include/c++/11/bits/alloc_traits.h ****       */
 374:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Tp>
 375:/usr/include/c++/11/bits/alloc_traits.h **** 	static _GLIBCXX20_CONSTEXPR void
 376:/usr/include/c++/11/bits/alloc_traits.h **** 	destroy(_Alloc& __a, _Tp* __p)
 377:/usr/include/c++/11/bits/alloc_traits.h **** 	noexcept(noexcept(_S_destroy(__a, __p, 0)))
 378:/usr/include/c++/11/bits/alloc_traits.h **** 	{ _S_destroy(__a, __p, 0); }
 379:/usr/include/c++/11/bits/alloc_traits.h **** 
 380:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 381:/usr/include/c++/11/bits/alloc_traits.h ****        *  @brief  The maximum supported allocation size
 382:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 383:/usr/include/c++/11/bits/alloc_traits.h ****        *  @return @c __a.max_size() or @c numeric_limits<size_type>::max()
 384:/usr/include/c++/11/bits/alloc_traits.h ****        *
 385:/usr/include/c++/11/bits/alloc_traits.h ****        *  Returns @c __a.max_size() if that expression is well-formed,
 386:/usr/include/c++/11/bits/alloc_traits.h ****        *  otherwise returns @c numeric_limits<size_type>::max()
 387:/usr/include/c++/11/bits/alloc_traits.h ****       */
 388:/usr/include/c++/11/bits/alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR size_type
 389:/usr/include/c++/11/bits/alloc_traits.h ****       max_size(const _Alloc& __a) noexcept
 390:/usr/include/c++/11/bits/alloc_traits.h ****       { return _S_max_size(__a, 0); }
 391:/usr/include/c++/11/bits/alloc_traits.h **** 
 392:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 393:/usr/include/c++/11/bits/alloc_traits.h ****        *  @brief  Obtain an allocator to use when copying a container.
 394:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __rhs  An allocator.
 395:/usr/include/c++/11/bits/alloc_traits.h ****        *  @return @c __rhs.select_on_container_copy_construction() or @a __rhs
 396:/usr/include/c++/11/bits/alloc_traits.h ****        *
 397:/usr/include/c++/11/bits/alloc_traits.h ****        *  Returns @c __rhs.select_on_container_copy_construction() if that
 398:/usr/include/c++/11/bits/alloc_traits.h ****        *  expression is well-formed, otherwise returns @a __rhs
 399:/usr/include/c++/11/bits/alloc_traits.h ****       */
 400:/usr/include/c++/11/bits/alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR _Alloc
 401:/usr/include/c++/11/bits/alloc_traits.h ****       select_on_container_copy_construction(const _Alloc& __rhs)
 402:/usr/include/c++/11/bits/alloc_traits.h ****       { return _S_select(__rhs, 0); }
 403:/usr/include/c++/11/bits/alloc_traits.h ****     };
 404:/usr/include/c++/11/bits/alloc_traits.h **** 
 405:/usr/include/c++/11/bits/alloc_traits.h **** #if __cplusplus > 201703L
 406:/usr/include/c++/11/bits/alloc_traits.h **** # define __cpp_lib_constexpr_dynamic_alloc 201907L
 407:/usr/include/c++/11/bits/alloc_traits.h **** #endif
 408:/usr/include/c++/11/bits/alloc_traits.h **** 
 409:/usr/include/c++/11/bits/alloc_traits.h ****   /// Partial specialization for std::allocator.
 410:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Tp>
 411:/usr/include/c++/11/bits/alloc_traits.h ****     struct allocator_traits<allocator<_Tp>>
 412:/usr/include/c++/11/bits/alloc_traits.h ****     {
 413:/usr/include/c++/11/bits/alloc_traits.h ****       /// The allocator type
 414:/usr/include/c++/11/bits/alloc_traits.h ****       using allocator_type = allocator<_Tp>;
 415:/usr/include/c++/11/bits/alloc_traits.h **** 
 416:/usr/include/c++/11/bits/alloc_traits.h ****       /// The allocated type
 417:/usr/include/c++/11/bits/alloc_traits.h ****       using value_type = _Tp;
 418:/usr/include/c++/11/bits/alloc_traits.h **** 
 419:/usr/include/c++/11/bits/alloc_traits.h ****       /// The allocator's pointer type.
 420:/usr/include/c++/11/bits/alloc_traits.h ****       using pointer = _Tp*;
 421:/usr/include/c++/11/bits/alloc_traits.h **** 
 422:/usr/include/c++/11/bits/alloc_traits.h ****       /// The allocator's const pointer type.
 423:/usr/include/c++/11/bits/alloc_traits.h ****       using const_pointer = const _Tp*;
 424:/usr/include/c++/11/bits/alloc_traits.h **** 
 425:/usr/include/c++/11/bits/alloc_traits.h ****       /// The allocator's void pointer type.
 426:/usr/include/c++/11/bits/alloc_traits.h ****       using void_pointer = void*;
 427:/usr/include/c++/11/bits/alloc_traits.h **** 
 428:/usr/include/c++/11/bits/alloc_traits.h ****       /// The allocator's const void pointer type.
 429:/usr/include/c++/11/bits/alloc_traits.h ****       using const_void_pointer = const void*;
 430:/usr/include/c++/11/bits/alloc_traits.h **** 
 431:/usr/include/c++/11/bits/alloc_traits.h ****       /// The allocator's difference type
 432:/usr/include/c++/11/bits/alloc_traits.h ****       using difference_type = std::ptrdiff_t;
 433:/usr/include/c++/11/bits/alloc_traits.h **** 
 434:/usr/include/c++/11/bits/alloc_traits.h ****       /// The allocator's size type
 435:/usr/include/c++/11/bits/alloc_traits.h ****       using size_type = std::size_t;
 436:/usr/include/c++/11/bits/alloc_traits.h **** 
 437:/usr/include/c++/11/bits/alloc_traits.h ****       /// How the allocator is propagated on copy assignment
 438:/usr/include/c++/11/bits/alloc_traits.h ****       using propagate_on_container_copy_assignment = false_type;
 439:/usr/include/c++/11/bits/alloc_traits.h **** 
 440:/usr/include/c++/11/bits/alloc_traits.h ****       /// How the allocator is propagated on move assignment
 441:/usr/include/c++/11/bits/alloc_traits.h ****       using propagate_on_container_move_assignment = true_type;
 442:/usr/include/c++/11/bits/alloc_traits.h **** 
 443:/usr/include/c++/11/bits/alloc_traits.h ****       /// How the allocator is propagated on swap
 444:/usr/include/c++/11/bits/alloc_traits.h ****       using propagate_on_container_swap = false_type;
 445:/usr/include/c++/11/bits/alloc_traits.h **** 
 446:/usr/include/c++/11/bits/alloc_traits.h ****       /// Whether all instances of the allocator type compare equal.
 447:/usr/include/c++/11/bits/alloc_traits.h ****       using is_always_equal = true_type;
 448:/usr/include/c++/11/bits/alloc_traits.h **** 
 449:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Up>
 450:/usr/include/c++/11/bits/alloc_traits.h **** 	using rebind_alloc = allocator<_Up>;
 451:/usr/include/c++/11/bits/alloc_traits.h **** 
 452:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Up>
 453:/usr/include/c++/11/bits/alloc_traits.h **** 	using rebind_traits = allocator_traits<allocator<_Up>>;
 454:/usr/include/c++/11/bits/alloc_traits.h **** 
 455:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 456:/usr/include/c++/11/bits/alloc_traits.h ****        *  @brief  Allocate memory.
 457:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 458:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 459:/usr/include/c++/11/bits/alloc_traits.h ****        *
 460:/usr/include/c++/11/bits/alloc_traits.h ****        *  Calls @c a.allocate(n)
 461:/usr/include/c++/11/bits/alloc_traits.h ****       */
 462:/usr/include/c++/11/bits/alloc_traits.h ****       _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
 463:/usr/include/c++/11/bits/alloc_traits.h ****       allocate(allocator_type& __a, size_type __n)
 464:/usr/include/c++/11/bits/alloc_traits.h ****       { return __a.allocate(__n); }
 465:/usr/include/c++/11/bits/alloc_traits.h **** 
 466:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 467:/usr/include/c++/11/bits/alloc_traits.h ****        *  @brief  Allocate memory.
 468:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 469:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 470:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __hint Aid to locality.
 471:/usr/include/c++/11/bits/alloc_traits.h ****        *  @return Memory of suitable size and alignment for @a n objects
 472:/usr/include/c++/11/bits/alloc_traits.h ****        *          of type @c value_type
 473:/usr/include/c++/11/bits/alloc_traits.h ****        *
 474:/usr/include/c++/11/bits/alloc_traits.h ****        *  Returns <tt> a.allocate(n, hint) </tt>
 475:/usr/include/c++/11/bits/alloc_traits.h ****       */
 476:/usr/include/c++/11/bits/alloc_traits.h ****       _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
 477:/usr/include/c++/11/bits/alloc_traits.h ****       allocate(allocator_type& __a, size_type __n, const_void_pointer __hint)
 478:/usr/include/c++/11/bits/alloc_traits.h ****       {
 479:/usr/include/c++/11/bits/alloc_traits.h **** #if __cplusplus <= 201703L
 480:/usr/include/c++/11/bits/alloc_traits.h **** 	return __a.allocate(__n, __hint);
 481:/usr/include/c++/11/bits/alloc_traits.h **** #else
 482:/usr/include/c++/11/bits/alloc_traits.h **** 	return __a.allocate(__n);
 483:/usr/include/c++/11/bits/alloc_traits.h **** #endif
 484:/usr/include/c++/11/bits/alloc_traits.h ****       }
 485:/usr/include/c++/11/bits/alloc_traits.h **** 
 486:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 487:/usr/include/c++/11/bits/alloc_traits.h ****        *  @brief  Deallocate memory.
 488:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 489:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __p  Pointer to the memory to deallocate.
 490:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __n  The number of objects space was allocated for.
 491:/usr/include/c++/11/bits/alloc_traits.h ****        *
 492:/usr/include/c++/11/bits/alloc_traits.h ****        *  Calls <tt> a.deallocate(p, n) </tt>
 493:/usr/include/c++/11/bits/alloc_traits.h ****       */
 494:/usr/include/c++/11/bits/alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR void
 495:/usr/include/c++/11/bits/alloc_traits.h ****       deallocate(allocator_type& __a, pointer __p, size_type __n)
 496:/usr/include/c++/11/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 497:/usr/include/c++/11/bits/alloc_traits.h **** 
 498:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 499:/usr/include/c++/11/bits/alloc_traits.h ****        *  @brief  Construct an object of type `_Up`
 500:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 501:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __p  Pointer to memory of suitable size and alignment for
 502:/usr/include/c++/11/bits/alloc_traits.h ****        *	       an object of type `_Up`.
 503:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __args Constructor arguments.
 504:/usr/include/c++/11/bits/alloc_traits.h ****        *
 505:/usr/include/c++/11/bits/alloc_traits.h ****        *  Calls `__a.construct(__p, std::forward<_Args>(__args)...)`
 506:/usr/include/c++/11/bits/alloc_traits.h ****        *  in C++11, C++14 and C++17. Changed in C++20 to call
 507:/usr/include/c++/11/bits/alloc_traits.h ****        *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
 508:/usr/include/c++/11/bits/alloc_traits.h ****       */
 509:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Up, typename... _Args>
 510:/usr/include/c++/11/bits/alloc_traits.h **** 	static _GLIBCXX20_CONSTEXPR void
 511:/usr/include/c++/11/bits/alloc_traits.h **** 	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 512:/usr/include/c++/11/bits/alloc_traits.h **** 		  _Args&&... __args)
 513:/usr/include/c++/11/bits/alloc_traits.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 514:/usr/include/c++/11/bits/alloc_traits.h **** 	{
 515:/usr/include/c++/11/bits/alloc_traits.h **** #if __cplusplus <= 201703L
 516:/usr/include/c++/11/bits/alloc_traits.h **** 	  __a.construct(__p, std::forward<_Args>(__args)...);
 517:/usr/include/c++/11/bits/alloc_traits.h **** #else
 518:/usr/include/c++/11/bits/alloc_traits.h **** 	  std::construct_at(__p, std::forward<_Args>(__args)...);
 519:/usr/include/c++/11/bits/alloc_traits.h **** #endif
 520:/usr/include/c++/11/bits/alloc_traits.h **** 	}
 521:/usr/include/c++/11/bits/alloc_traits.h **** 
 522:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 523:/usr/include/c++/11/bits/alloc_traits.h ****        *  @brief  Destroy an object of type @a _Up
 524:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 525:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __p  Pointer to the object to destroy
 526:/usr/include/c++/11/bits/alloc_traits.h ****        *
 527:/usr/include/c++/11/bits/alloc_traits.h ****        *  Calls @c __a.destroy(__p).
 528:/usr/include/c++/11/bits/alloc_traits.h ****       */
 529:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Up>
 530:/usr/include/c++/11/bits/alloc_traits.h **** 	static _GLIBCXX20_CONSTEXPR void
 531:/usr/include/c++/11/bits/alloc_traits.h **** 	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 532:/usr/include/c++/11/bits/alloc_traits.h **** 	noexcept(is_nothrow_destructible<_Up>::value)
 533:/usr/include/c++/11/bits/alloc_traits.h **** 	{
 534:/usr/include/c++/11/bits/alloc_traits.h **** #if __cplusplus <= 201703L
 535:/usr/include/c++/11/bits/alloc_traits.h **** 	  __a.destroy(__p);
 536:/usr/include/c++/11/bits/alloc_traits.h **** #else
 537:/usr/include/c++/11/bits/alloc_traits.h **** 	  std::destroy_at(__p);
 538:/usr/include/c++/11/bits/alloc_traits.h **** #endif
 539:/usr/include/c++/11/bits/alloc_traits.h **** 	}
 540:/usr/include/c++/11/bits/alloc_traits.h **** 
 541:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 542:/usr/include/c++/11/bits/alloc_traits.h ****        *  @brief  The maximum supported allocation size
 543:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 544:/usr/include/c++/11/bits/alloc_traits.h ****        *  @return @c __a.max_size()
 545:/usr/include/c++/11/bits/alloc_traits.h ****       */
 546:/usr/include/c++/11/bits/alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR size_type
 547:/usr/include/c++/11/bits/alloc_traits.h ****       max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 548:/usr/include/c++/11/bits/alloc_traits.h ****       {
 549:/usr/include/c++/11/bits/alloc_traits.h **** #if __cplusplus <= 201703L
 550:/usr/include/c++/11/bits/alloc_traits.h **** 	return __a.max_size();
 551:/usr/include/c++/11/bits/alloc_traits.h **** #else
 552:/usr/include/c++/11/bits/alloc_traits.h **** 	return size_t(-1) / sizeof(value_type);
 553:/usr/include/c++/11/bits/alloc_traits.h **** #endif
 554:/usr/include/c++/11/bits/alloc_traits.h ****       }
 555:/usr/include/c++/11/bits/alloc_traits.h **** 
 556:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 557:/usr/include/c++/11/bits/alloc_traits.h ****        *  @brief  Obtain an allocator to use when copying a container.
 558:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __rhs  An allocator.
 559:/usr/include/c++/11/bits/alloc_traits.h ****        *  @return @c __rhs
 560:/usr/include/c++/11/bits/alloc_traits.h ****       */
 561:/usr/include/c++/11/bits/alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR allocator_type
 562:/usr/include/c++/11/bits/alloc_traits.h ****       select_on_container_copy_construction(const allocator_type& __rhs)
 563:/usr/include/c++/11/bits/alloc_traits.h ****       { return __rhs; }
 564:/usr/include/c++/11/bits/alloc_traits.h ****     };
 565:/usr/include/c++/11/bits/alloc_traits.h **** 
 566:/usr/include/c++/11/bits/alloc_traits.h ****   /// Explicit specialization for std::allocator<void>.
 567:/usr/include/c++/11/bits/alloc_traits.h ****   template<>
 568:/usr/include/c++/11/bits/alloc_traits.h ****     struct allocator_traits<allocator<void>>
 569:/usr/include/c++/11/bits/alloc_traits.h ****     {
 570:/usr/include/c++/11/bits/alloc_traits.h ****       /// The allocator type
 571:/usr/include/c++/11/bits/alloc_traits.h ****       using allocator_type = allocator<void>;
 572:/usr/include/c++/11/bits/alloc_traits.h **** 
 573:/usr/include/c++/11/bits/alloc_traits.h ****       /// The allocated type
 574:/usr/include/c++/11/bits/alloc_traits.h ****       using value_type = void;
 575:/usr/include/c++/11/bits/alloc_traits.h **** 
 576:/usr/include/c++/11/bits/alloc_traits.h ****       /// The allocator's pointer type.
 577:/usr/include/c++/11/bits/alloc_traits.h ****       using pointer = void*;
 578:/usr/include/c++/11/bits/alloc_traits.h **** 
 579:/usr/include/c++/11/bits/alloc_traits.h ****       /// The allocator's const pointer type.
 580:/usr/include/c++/11/bits/alloc_traits.h ****       using const_pointer = const void*;
 581:/usr/include/c++/11/bits/alloc_traits.h **** 
 582:/usr/include/c++/11/bits/alloc_traits.h ****       /// The allocator's void pointer type.
 583:/usr/include/c++/11/bits/alloc_traits.h ****       using void_pointer = void*;
 584:/usr/include/c++/11/bits/alloc_traits.h **** 
 585:/usr/include/c++/11/bits/alloc_traits.h ****       /// The allocator's const void pointer type.
 586:/usr/include/c++/11/bits/alloc_traits.h ****       using const_void_pointer = const void*;
 587:/usr/include/c++/11/bits/alloc_traits.h **** 
 588:/usr/include/c++/11/bits/alloc_traits.h ****       /// The allocator's difference type
 589:/usr/include/c++/11/bits/alloc_traits.h ****       using difference_type = std::ptrdiff_t;
 590:/usr/include/c++/11/bits/alloc_traits.h **** 
 591:/usr/include/c++/11/bits/alloc_traits.h ****       /// The allocator's size type
 592:/usr/include/c++/11/bits/alloc_traits.h ****       using size_type = std::size_t;
 593:/usr/include/c++/11/bits/alloc_traits.h **** 
 594:/usr/include/c++/11/bits/alloc_traits.h ****       /// How the allocator is propagated on copy assignment
 595:/usr/include/c++/11/bits/alloc_traits.h ****       using propagate_on_container_copy_assignment = false_type;
 596:/usr/include/c++/11/bits/alloc_traits.h **** 
 597:/usr/include/c++/11/bits/alloc_traits.h ****       /// How the allocator is propagated on move assignment
 598:/usr/include/c++/11/bits/alloc_traits.h ****       using propagate_on_container_move_assignment = true_type;
 599:/usr/include/c++/11/bits/alloc_traits.h **** 
 600:/usr/include/c++/11/bits/alloc_traits.h ****       /// How the allocator is propagated on swap
 601:/usr/include/c++/11/bits/alloc_traits.h ****       using propagate_on_container_swap = false_type;
 602:/usr/include/c++/11/bits/alloc_traits.h **** 
 603:/usr/include/c++/11/bits/alloc_traits.h ****       /// Whether all instances of the allocator type compare equal.
 604:/usr/include/c++/11/bits/alloc_traits.h ****       using is_always_equal = true_type;
 605:/usr/include/c++/11/bits/alloc_traits.h **** 
 606:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Up>
 607:/usr/include/c++/11/bits/alloc_traits.h **** 	using rebind_alloc = allocator<_Up>;
 608:/usr/include/c++/11/bits/alloc_traits.h **** 
 609:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Up>
 610:/usr/include/c++/11/bits/alloc_traits.h **** 	using rebind_traits = allocator_traits<allocator<_Up>>;
 611:/usr/include/c++/11/bits/alloc_traits.h **** 
 612:/usr/include/c++/11/bits/alloc_traits.h ****       /// allocate is ill-formed for allocator<void>
 613:/usr/include/c++/11/bits/alloc_traits.h ****       static void*
 614:/usr/include/c++/11/bits/alloc_traits.h ****       allocate(allocator_type&, size_type, const void* = nullptr) = delete;
 615:/usr/include/c++/11/bits/alloc_traits.h **** 
 616:/usr/include/c++/11/bits/alloc_traits.h ****       /// deallocate is ill-formed for allocator<void>
 617:/usr/include/c++/11/bits/alloc_traits.h ****       static void
 618:/usr/include/c++/11/bits/alloc_traits.h ****       deallocate(allocator_type&, void*, size_type) = delete;
 619:/usr/include/c++/11/bits/alloc_traits.h **** 
 620:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 621:/usr/include/c++/11/bits/alloc_traits.h ****        *  @brief  Construct an object of type `_Up`
 622:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 623:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __p  Pointer to memory of suitable size and alignment for
 624:/usr/include/c++/11/bits/alloc_traits.h ****        *	       an object of type `_Up`.
 625:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __args Constructor arguments.
 626:/usr/include/c++/11/bits/alloc_traits.h ****        *
 627:/usr/include/c++/11/bits/alloc_traits.h ****        *  Calls `__a.construct(__p, std::forward<_Args>(__args)...)`
 628:/usr/include/c++/11/bits/alloc_traits.h ****        *  in C++11, C++14 and C++17. Changed in C++20 to call
 629:/usr/include/c++/11/bits/alloc_traits.h ****        *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
 630:/usr/include/c++/11/bits/alloc_traits.h ****       */
 631:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Up, typename... _Args>
 632:/usr/include/c++/11/bits/alloc_traits.h **** 	static _GLIBCXX20_CONSTEXPR void
 633:/usr/include/c++/11/bits/alloc_traits.h **** 	construct(allocator_type&, _Up* __p, _Args&&... __args)
 634:/usr/include/c++/11/bits/alloc_traits.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 635:/usr/include/c++/11/bits/alloc_traits.h **** 	{ std::_Construct(__p, std::forward<_Args>(__args)...); }
 636:/usr/include/c++/11/bits/alloc_traits.h **** 
 637:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 638:/usr/include/c++/11/bits/alloc_traits.h ****        *  @brief  Destroy an object of type `_Up`
 639:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 640:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __p  Pointer to the object to destroy
 641:/usr/include/c++/11/bits/alloc_traits.h ****        *
 642:/usr/include/c++/11/bits/alloc_traits.h ****        *  Invokes the destructor for `*__p`.
 643:/usr/include/c++/11/bits/alloc_traits.h ****       */
 644:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Up>
 645:/usr/include/c++/11/bits/alloc_traits.h **** 	static _GLIBCXX20_CONSTEXPR void
 646:/usr/include/c++/11/bits/alloc_traits.h **** 	destroy(allocator_type&, _Up* __p)
 647:/usr/include/c++/11/bits/alloc_traits.h **** 	noexcept(is_nothrow_destructible<_Up>::value)
 648:/usr/include/c++/11/bits/alloc_traits.h **** 	{ std::_Destroy(__p); }
 649:/usr/include/c++/11/bits/alloc_traits.h **** 
 650:/usr/include/c++/11/bits/alloc_traits.h ****       /// max_size is ill-formed for allocator<void>
 651:/usr/include/c++/11/bits/alloc_traits.h ****       static size_type
 652:/usr/include/c++/11/bits/alloc_traits.h ****       max_size(const allocator_type&) = delete;
 653:/usr/include/c++/11/bits/alloc_traits.h **** 
 654:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 655:/usr/include/c++/11/bits/alloc_traits.h ****        *  @brief  Obtain an allocator to use when copying a container.
 656:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __rhs  An allocator.
 657:/usr/include/c++/11/bits/alloc_traits.h ****        *  @return `__rhs`
 658:/usr/include/c++/11/bits/alloc_traits.h ****       */
 659:/usr/include/c++/11/bits/alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR allocator_type
 660:/usr/include/c++/11/bits/alloc_traits.h ****       select_on_container_copy_construction(const allocator_type& __rhs)
 661:/usr/include/c++/11/bits/alloc_traits.h ****       { return __rhs; }
 662:/usr/include/c++/11/bits/alloc_traits.h ****     };
 663:/usr/include/c++/11/bits/alloc_traits.h **** 
 664:/usr/include/c++/11/bits/alloc_traits.h **** #if __cplusplus < 201703L
 665:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc>
 666:/usr/include/c++/11/bits/alloc_traits.h ****     inline void
 667:/usr/include/c++/11/bits/alloc_traits.h ****     __do_alloc_on_copy(_Alloc& __one, const _Alloc& __two, true_type)
 668:/usr/include/c++/11/bits/alloc_traits.h ****     { __one = __two; }
 669:/usr/include/c++/11/bits/alloc_traits.h **** 
 670:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc>
 671:/usr/include/c++/11/bits/alloc_traits.h ****     inline void
 672:/usr/include/c++/11/bits/alloc_traits.h ****     __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
 673:/usr/include/c++/11/bits/alloc_traits.h ****     { }
 674:/usr/include/c++/11/bits/alloc_traits.h **** #endif
 675:/usr/include/c++/11/bits/alloc_traits.h **** 
 676:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc>
 677:/usr/include/c++/11/bits/alloc_traits.h ****     _GLIBCXX14_CONSTEXPR inline void
 678:/usr/include/c++/11/bits/alloc_traits.h ****     __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
 679:/usr/include/c++/11/bits/alloc_traits.h ****     {
 680:/usr/include/c++/11/bits/alloc_traits.h ****       typedef allocator_traits<_Alloc> __traits;
 681:/usr/include/c++/11/bits/alloc_traits.h ****       typedef typename __traits::propagate_on_container_copy_assignment __pocca;
 682:/usr/include/c++/11/bits/alloc_traits.h **** #if __cplusplus >= 201703L
 683:/usr/include/c++/11/bits/alloc_traits.h ****       if constexpr (__pocca::value)
 684:/usr/include/c++/11/bits/alloc_traits.h **** 	__one = __two;
 685:/usr/include/c++/11/bits/alloc_traits.h **** #else
 686:/usr/include/c++/11/bits/alloc_traits.h ****       __do_alloc_on_copy(__one, __two, __pocca());
 687:/usr/include/c++/11/bits/alloc_traits.h **** #endif
 688:/usr/include/c++/11/bits/alloc_traits.h ****     }
 689:/usr/include/c++/11/bits/alloc_traits.h **** 
 690:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc>
 691:/usr/include/c++/11/bits/alloc_traits.h ****     constexpr _Alloc
 692:/usr/include/c++/11/bits/alloc_traits.h ****     __alloc_on_copy(const _Alloc& __a)
 693:/usr/include/c++/11/bits/alloc_traits.h ****     {
 694:/usr/include/c++/11/bits/alloc_traits.h ****       typedef allocator_traits<_Alloc> __traits;
 695:/usr/include/c++/11/bits/alloc_traits.h ****       return __traits::select_on_container_copy_construction(__a);
 696:/usr/include/c++/11/bits/alloc_traits.h ****     }
 697:/usr/include/c++/11/bits/alloc_traits.h **** 
 698:/usr/include/c++/11/bits/alloc_traits.h **** #if __cplusplus < 201703L
 699:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc>
 700:/usr/include/c++/11/bits/alloc_traits.h ****     inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 701:/usr/include/c++/11/bits/alloc_traits.h ****     { __one = std::move(__two); }
 702:/usr/include/c++/11/bits/alloc_traits.h **** 
 703:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc>
 704:/usr/include/c++/11/bits/alloc_traits.h ****     inline void __do_alloc_on_move(_Alloc&, _Alloc&, false_type)
 705:/usr/include/c++/11/bits/alloc_traits.h ****     { }
 706:/usr/include/c++/11/bits/alloc_traits.h **** #endif
 707:/usr/include/c++/11/bits/alloc_traits.h **** 
 708:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc>
 709:/usr/include/c++/11/bits/alloc_traits.h ****     _GLIBCXX14_CONSTEXPR inline void
 710:/usr/include/c++/11/bits/alloc_traits.h ****     __alloc_on_move(_Alloc& __one, _Alloc& __two)
 711:/usr/include/c++/11/bits/alloc_traits.h ****     {
 712:/usr/include/c++/11/bits/alloc_traits.h ****       typedef allocator_traits<_Alloc> __traits;
 713:/usr/include/c++/11/bits/alloc_traits.h ****       typedef typename __traits::propagate_on_container_move_assignment __pocma;
 714:/usr/include/c++/11/bits/alloc_traits.h **** #if __cplusplus >= 201703L
 715:/usr/include/c++/11/bits/alloc_traits.h ****       if constexpr (__pocma::value)
 716:/usr/include/c++/11/bits/alloc_traits.h **** 	__one = std::move(__two);
 717:/usr/include/c++/11/bits/alloc_traits.h **** #else
 718:/usr/include/c++/11/bits/alloc_traits.h ****       __do_alloc_on_move(__one, __two, __pocma());
 719:/usr/include/c++/11/bits/alloc_traits.h **** #endif
 720:/usr/include/c++/11/bits/alloc_traits.h ****     }
 721:/usr/include/c++/11/bits/alloc_traits.h **** 
 722:/usr/include/c++/11/bits/alloc_traits.h **** #if __cplusplus < 201703L
 723:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc>
 724:/usr/include/c++/11/bits/alloc_traits.h ****     inline void __do_alloc_on_swap(_Alloc& __one, _Alloc& __two, true_type)
 725:/usr/include/c++/11/bits/alloc_traits.h ****     {
 726:/usr/include/c++/11/bits/alloc_traits.h ****       using std::swap;
 727:/usr/include/c++/11/bits/alloc_traits.h ****       swap(__one, __two);
 728:/usr/include/c++/11/bits/alloc_traits.h ****     }
 729:/usr/include/c++/11/bits/alloc_traits.h **** 
 730:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc>
 731:/usr/include/c++/11/bits/alloc_traits.h ****     inline void __do_alloc_on_swap(_Alloc&, _Alloc&, false_type)
 732:/usr/include/c++/11/bits/alloc_traits.h ****     { }
 733:/usr/include/c++/11/bits/alloc_traits.h **** #endif
 734:/usr/include/c++/11/bits/alloc_traits.h **** 
 735:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc>
 736:/usr/include/c++/11/bits/alloc_traits.h ****     _GLIBCXX14_CONSTEXPR inline void
 737:/usr/include/c++/11/bits/alloc_traits.h ****     __alloc_on_swap(_Alloc& __one, _Alloc& __two)
 738:/usr/include/c++/11/bits/alloc_traits.h ****     {
 739:/usr/include/c++/11/bits/alloc_traits.h ****       typedef allocator_traits<_Alloc> __traits;
 740:/usr/include/c++/11/bits/alloc_traits.h ****       typedef typename __traits::propagate_on_container_swap __pocs;
 741:/usr/include/c++/11/bits/alloc_traits.h **** #if __cplusplus >= 201703L
 742:/usr/include/c++/11/bits/alloc_traits.h ****       if constexpr (__pocs::value)
 743:/usr/include/c++/11/bits/alloc_traits.h **** 	{
 744:/usr/include/c++/11/bits/alloc_traits.h **** 	  using std::swap;
 745:/usr/include/c++/11/bits/alloc_traits.h **** 	  swap(__one, __two);
 746:/usr/include/c++/11/bits/alloc_traits.h **** 	}
 747:/usr/include/c++/11/bits/alloc_traits.h **** #else
 748:/usr/include/c++/11/bits/alloc_traits.h ****       __do_alloc_on_swap(__one, __two, __pocs());
 749:/usr/include/c++/11/bits/alloc_traits.h **** #endif
 750:/usr/include/c++/11/bits/alloc_traits.h ****     }
 751:/usr/include/c++/11/bits/alloc_traits.h **** 
 752:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc, typename _Tp,
 753:/usr/include/c++/11/bits/alloc_traits.h **** 	   typename _ValueT = __remove_cvref_t<typename _Alloc::value_type>,
 754:/usr/include/c++/11/bits/alloc_traits.h **** 	   typename = void>
 755:/usr/include/c++/11/bits/alloc_traits.h ****     struct __is_alloc_insertable_impl
 756:/usr/include/c++/11/bits/alloc_traits.h ****     : false_type
 757:/usr/include/c++/11/bits/alloc_traits.h ****     { };
 758:/usr/include/c++/11/bits/alloc_traits.h **** 
 759:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc, typename _Tp, typename _ValueT>
 760:/usr/include/c++/11/bits/alloc_traits.h ****     struct __is_alloc_insertable_impl<_Alloc, _Tp, _ValueT,
 761:/usr/include/c++/11/bits/alloc_traits.h ****       __void_t<decltype(allocator_traits<_Alloc>::construct(
 762:/usr/include/c++/11/bits/alloc_traits.h **** 		   std::declval<_Alloc&>(), std::declval<_ValueT*>(),
 763:/usr/include/c++/11/bits/alloc_traits.h **** 		   std::declval<_Tp>()))>>
 764:/usr/include/c++/11/bits/alloc_traits.h ****     : true_type
 765:/usr/include/c++/11/bits/alloc_traits.h ****     { };
 766:/usr/include/c++/11/bits/alloc_traits.h **** 
 767:/usr/include/c++/11/bits/alloc_traits.h ****   // true if _Alloc::value_type is CopyInsertable into containers using _Alloc
 768:/usr/include/c++/11/bits/alloc_traits.h ****   // (might be wrong if _Alloc::construct exists but is not constrained,
 769:/usr/include/c++/11/bits/alloc_traits.h ****   // i.e. actually trying to use it would still be invalid. Use with caution.)
 770:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc>
 771:/usr/include/c++/11/bits/alloc_traits.h ****     struct __is_copy_insertable
 772:/usr/include/c++/11/bits/alloc_traits.h ****     : __is_alloc_insertable_impl<_Alloc,
 773:/usr/include/c++/11/bits/alloc_traits.h **** 				 typename _Alloc::value_type const&>::type
 774:/usr/include/c++/11/bits/alloc_traits.h ****     { };
 775:/usr/include/c++/11/bits/alloc_traits.h **** 
 776:/usr/include/c++/11/bits/alloc_traits.h ****   // std::allocator<_Tp> just requires CopyConstructible
 777:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Tp>
 778:/usr/include/c++/11/bits/alloc_traits.h ****     struct __is_copy_insertable<allocator<_Tp>>
 779:/usr/include/c++/11/bits/alloc_traits.h ****     : is_copy_constructible<_Tp>
 780:/usr/include/c++/11/bits/alloc_traits.h ****     { };
 781:/usr/include/c++/11/bits/alloc_traits.h **** 
 782:/usr/include/c++/11/bits/alloc_traits.h ****   // true if _Alloc::value_type is MoveInsertable into containers using _Alloc
 783:/usr/include/c++/11/bits/alloc_traits.h ****   // (might be wrong if _Alloc::construct exists but is not constrained,
 784:/usr/include/c++/11/bits/alloc_traits.h ****   // i.e. actually trying to use it would still be invalid. Use with caution.)
 785:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc>
 786:/usr/include/c++/11/bits/alloc_traits.h ****     struct __is_move_insertable
 787:/usr/include/c++/11/bits/alloc_traits.h ****     : __is_alloc_insertable_impl<_Alloc, typename _Alloc::value_type>::type
 788:/usr/include/c++/11/bits/alloc_traits.h ****     { };
 789:/usr/include/c++/11/bits/alloc_traits.h **** 
 790:/usr/include/c++/11/bits/alloc_traits.h ****   // std::allocator<_Tp> just requires MoveConstructible
 791:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Tp>
 792:/usr/include/c++/11/bits/alloc_traits.h ****     struct __is_move_insertable<allocator<_Tp>>
 793:/usr/include/c++/11/bits/alloc_traits.h ****     : is_move_constructible<_Tp>
 794:/usr/include/c++/11/bits/alloc_traits.h ****     { };
 795:/usr/include/c++/11/bits/alloc_traits.h **** 
 796:/usr/include/c++/11/bits/alloc_traits.h ****   // Trait to detect Allocator-like types.
 797:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc, typename = void>
 798:/usr/include/c++/11/bits/alloc_traits.h ****     struct __is_allocator : false_type { };
 799:/usr/include/c++/11/bits/alloc_traits.h **** 
 800:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc>
 801:/usr/include/c++/11/bits/alloc_traits.h ****     struct __is_allocator<_Alloc,
 802:/usr/include/c++/11/bits/alloc_traits.h ****       __void_t<typename _Alloc::value_type,
 803:/usr/include/c++/11/bits/alloc_traits.h **** 	       decltype(std::declval<_Alloc&>().allocate(size_t{}))>>
 804:/usr/include/c++/11/bits/alloc_traits.h ****     : true_type { };
 805:/usr/include/c++/11/bits/alloc_traits.h **** 
 806:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc>
 807:/usr/include/c++/11/bits/alloc_traits.h ****     using _RequireAllocator
 808:/usr/include/c++/11/bits/alloc_traits.h ****       = typename enable_if<__is_allocator<_Alloc>::value, _Alloc>::type;
 809:/usr/include/c++/11/bits/alloc_traits.h **** 
 810:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc>
 811:/usr/include/c++/11/bits/alloc_traits.h ****     using _RequireNotAllocator
 812:/usr/include/c++/11/bits/alloc_traits.h ****       = typename enable_if<!__is_allocator<_Alloc>::value, _Alloc>::type;
 813:/usr/include/c++/11/bits/alloc_traits.h **** 
 814:/usr/include/c++/11/bits/alloc_traits.h **** #if __cpp_concepts >= 201907L
 815:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc>
 816:/usr/include/c++/11/bits/alloc_traits.h ****     concept __allocator_like = requires (_Alloc& __a) {
 817:/usr/include/c++/11/bits/alloc_traits.h ****       typename _Alloc::value_type;
 818:/usr/include/c++/11/bits/alloc_traits.h ****       __a.deallocate(__a.allocate(1u), 1u);
 819:/usr/include/c++/11/bits/alloc_traits.h ****     };
 820:/usr/include/c++/11/bits/alloc_traits.h **** #endif
 821:/usr/include/c++/11/bits/alloc_traits.h **** #endif // C++11
 822:/usr/include/c++/11/bits/alloc_traits.h **** 
 823:/usr/include/c++/11/bits/alloc_traits.h ****   /**
 824:/usr/include/c++/11/bits/alloc_traits.h ****    * Destroy a range of objects using the supplied allocator.  For
 825:/usr/include/c++/11/bits/alloc_traits.h ****    * non-default allocators we do not optimize away invocation of
 826:/usr/include/c++/11/bits/alloc_traits.h ****    * destroy() even if _Tp has a trivial destructor.
 827:/usr/include/c++/11/bits/alloc_traits.h ****    */
 828:/usr/include/c++/11/bits/alloc_traits.h **** 
 829:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _ForwardIterator, typename _Allocator>
 830:/usr/include/c++/11/bits/alloc_traits.h ****     void
 831:/usr/include/c++/11/bits/alloc_traits.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 832:/usr/include/c++/11/bits/alloc_traits.h **** 	     _Allocator& __alloc)
 833:/usr/include/c++/11/bits/alloc_traits.h ****     {
 834:/usr/include/c++/11/bits/alloc_traits.h ****       for (; __first != __last; ++__first)
 835:/usr/include/c++/11/bits/alloc_traits.h **** #if __cplusplus < 201103L
 836:/usr/include/c++/11/bits/alloc_traits.h **** 	__alloc.destroy(std::__addressof(*__first));
 837:/usr/include/c++/11/bits/alloc_traits.h **** #else
 838:/usr/include/c++/11/bits/alloc_traits.h **** 	allocator_traits<_Allocator>::destroy(__alloc,
 839:/usr/include/c++/11/bits/alloc_traits.h **** 					      std::__addressof(*__first));
 840:/usr/include/c++/11/bits/alloc_traits.h **** #endif
 841:/usr/include/c++/11/bits/alloc_traits.h ****     }
 842:/usr/include/c++/11/bits/alloc_traits.h **** 
 843:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _ForwardIterator, typename _Tp>
 844:/usr/include/c++/11/bits/alloc_traits.h ****     inline void
 845:/usr/include/c++/11/bits/alloc_traits.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 7109              		.loc 11 845 5
 7110              		.cfi_startproc
 7111 0000 F30F1EFA 		endbr64
 7112 0004 55       		pushq	%rbp
 7113              		.cfi_def_cfa_offset 16
 7114              		.cfi_offset 6, -16
 7115 0005 4889E5   		movq	%rsp, %rbp
 7116              		.cfi_def_cfa_register 6
 7117 0008 4883EC20 		subq	$32, %rsp
 7118 000c 48897DF8 		movq	%rdi, -8(%rbp)
 7119 0010 488975F0 		movq	%rsi, -16(%rbp)
 7120 0014 488955E8 		movq	%rdx, -24(%rbp)
 846:/usr/include/c++/11/bits/alloc_traits.h **** 	     allocator<_Tp>&)
 847:/usr/include/c++/11/bits/alloc_traits.h ****     {
 848:/usr/include/c++/11/bits/alloc_traits.h ****       _Destroy(__first, __last);
 7121              		.loc 11 848 15
 7122 0018 488B55F0 		movq	-16(%rbp), %rdx
 7123 001c 488B45F8 		movq	-8(%rbp), %rax
 7124 0020 4889D6   		movq	%rdx, %rsi
 7125 0023 4889C7   		movq	%rax, %rdi
 7126 0026 E8000000 		call	_ZSt8_DestroyIPfEvT_S1_
 7126      00
 849:/usr/include/c++/11/bits/alloc_traits.h ****     }
 7127              		.loc 11 849 5
 7128 002b 90       		nop
 7129 002c C9       		leave
 7130              		.cfi_def_cfa 7, 8
 7131 002d C3       		ret
 7132              		.cfi_endproc
 7133              	.LFE1599:
 7135              		.section	.text._ZN8UnitTest13ArrayAreCloseISt6vectorIfSaIfEES3_fEEbRKT_RKT0_iRKT1_,"axG",@progbits
 7136              		.weak	_ZN8UnitTest13ArrayAreCloseISt6vectorIfSaIfEES3_fEEbRKT_RKT0_iRKT1_
 7138              	_ZN8UnitTest13ArrayAreCloseISt6vectorIfSaIfEES3_fEEbRKT_RKT0_iRKT1_:
 7139              	.LFB1600:
  87:../Checks.h   **** {
 7140              		.loc 6 87 6
 7141              		.cfi_startproc
 7142 0000 F30F1EFA 		endbr64
 7143 0004 55       		pushq	%rbp
 7144              		.cfi_def_cfa_offset 16
 7145              		.cfi_offset 6, -16
 7146 0005 4889E5   		movq	%rsp, %rbp
 7147              		.cfi_def_cfa_register 6
 7148 0008 53       		pushq	%rbx
 7149 0009 4883EC38 		subq	$56, %rsp
 7150              		.cfi_offset 3, -24
 7151 000d 48897DD8 		movq	%rdi, -40(%rbp)
 7152 0011 488975D0 		movq	%rsi, -48(%rbp)
 7153 0015 8955CC   		movl	%edx, -52(%rbp)
 7154 0018 48894DC0 		movq	%rcx, -64(%rbp)
  89:../Checks.h   ****     for (int i = 0; i < count; ++i)
 7155              		.loc 6 89 10
 7156 001c C645EB01 		movb	$1, -21(%rbp)
 7157              	.LBB111:
  90:../Checks.h   ****         equal &= AreClose(expected[i], actual[i], tolerance);
 7158              		.loc 6 90 14
 7159 0020 C745EC00 		movl	$0, -20(%rbp)
 7159      000000
  90:../Checks.h   ****         equal &= AreClose(expected[i], actual[i], tolerance);
 7160              		.loc 6 90 5
 7161 0027 EB57     		jmp	.L351
 7162              	.L352:
  91:../Checks.h   ****     return equal;
 7163              		.loc 6 91 46 discriminator 3
 7164 0029 8B45EC   		movl	-20(%rbp), %eax
 7165 002c 4863D0   		movslq	%eax, %rdx
 7166 002f 488B45D0 		movq	-48(%rbp), %rax
 7167 0033 4889D6   		movq	%rdx, %rsi
 7168 0036 4889C7   		movq	%rax, %rdi
 7169 0039 E8000000 		call	_ZNKSt6vectorIfSaIfEEixEm
 7169      00
 7170 003e 4889C3   		movq	%rax, %rbx
  91:../Checks.h   ****     return equal;
 7171              		.loc 6 91 35 discriminator 3
 7172 0041 8B45EC   		movl	-20(%rbp), %eax
 7173 0044 4863D0   		movslq	%eax, %rdx
 7174 0047 488B45D8 		movq	-40(%rbp), %rax
 7175 004b 4889D6   		movq	%rdx, %rsi
 7176 004e 4889C7   		movq	%rax, %rdi
 7177 0051 E8000000 		call	_ZNKSt6vectorIfSaIfEEixEm
 7177      00
 7178 0056 4889C1   		movq	%rax, %rcx
  91:../Checks.h   ****     return equal;
 7179              		.loc 6 91 26 discriminator 3
 7180 0059 488B45C0 		movq	-64(%rbp), %rax
 7181 005d 4889C2   		movq	%rax, %rdx
 7182 0060 4889DE   		movq	%rbx, %rsi
 7183 0063 4889CF   		movq	%rcx, %rdi
 7184 0066 E8000000 		call	_ZN8UnitTest8AreCloseIfffEEbRKT_RKT0_RKT1_
 7184      00
  91:../Checks.h   ****     return equal;
 7185              		.loc 6 91 15 discriminator 3
 7186 006b 0FB655EB 		movzbl	-21(%rbp), %edx
 7187 006f 0FB6C0   		movzbl	%al, %eax
 7188 0072 21D0     		andl	%edx, %eax
 7189 0074 85C0     		testl	%eax, %eax
 7190 0076 0F95C0   		setne	%al
 7191 0079 8845EB   		movb	%al, -21(%rbp)
  90:../Checks.h   ****         equal &= AreClose(expected[i], actual[i], tolerance);
 7192              		.loc 6 90 5 discriminator 3
 7193 007c 8345EC01 		addl	$1, -20(%rbp)
 7194              	.L351:
  90:../Checks.h   ****         equal &= AreClose(expected[i], actual[i], tolerance);
 7195              		.loc 6 90 23 discriminator 1
 7196 0080 8B45EC   		movl	-20(%rbp), %eax
 7197 0083 3B45CC   		cmpl	-52(%rbp), %eax
 7198 0086 7CA1     		jl	.L352
 7199              	.LBE111:
  92:../Checks.h   **** }
 7200              		.loc 6 92 12
 7201 0088 0FB645EB 		movzbl	-21(%rbp), %eax
  93:../Checks.h   **** 
 7202              		.loc 6 93 1
 7203 008c 488B5DF8 		movq	-8(%rbp), %rbx
 7204 0090 C9       		leave
 7205              		.cfi_def_cfa 7, 8
 7206 0091 C3       		ret
 7207              		.cfi_endproc
 7208              	.LFE1600:
 7210              		.section	.text._ZNKSt6vectorIfSaIfEEixEm,"axG",@progbits,_ZNKSt6vectorIfSaIfEEixEm,comdat
 7211              		.align 2
 7212              		.weak	_ZNKSt6vectorIfSaIfEEixEm
 7214              	_ZNKSt6vectorIfSaIfEEixEm:
 7215              	.LFB1601:
1061:/usr/include/c++/11/bits/stl_vector.h ****       {
 7216              		.loc 8 1061 7
 7217              		.cfi_startproc
 7218 0000 F30F1EFA 		endbr64
 7219 0004 55       		pushq	%rbp
 7220              		.cfi_def_cfa_offset 16
 7221              		.cfi_offset 6, -16
 7222 0005 4889E5   		movq	%rsp, %rbp
 7223              		.cfi_def_cfa_register 6
 7224 0008 48897DF8 		movq	%rdi, -8(%rbp)
 7225 000c 488975F0 		movq	%rsi, -16(%rbp)
1064:/usr/include/c++/11/bits/stl_vector.h ****       }
 7226              		.loc 8 1064 25
 7227 0010 488B45F8 		movq	-8(%rbp), %rax
 7228 0014 488B10   		movq	(%rax), %rdx
1064:/usr/include/c++/11/bits/stl_vector.h ****       }
 7229              		.loc 8 1064 34
 7230 0017 488B45F0 		movq	-16(%rbp), %rax
 7231 001b 48C1E002 		salq	$2, %rax
1064:/usr/include/c++/11/bits/stl_vector.h ****       }
 7232              		.loc 8 1064 39
 7233 001f 4801D0   		addq	%rdx, %rax
1065:/usr/include/c++/11/bits/stl_vector.h **** 
 7234              		.loc 8 1065 7
 7235 0022 5D       		popq	%rbp
 7236              		.cfi_def_cfa 7, 8
 7237 0023 C3       		ret
 7238              		.cfi_endproc
 7239              	.LFE1601:
 7241              		.section	.text._ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_,"axG",@progbits,_ZNSt6vectorIfSaIfEE11_S_ma
 7242              		.weak	_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_
 7244              	_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_:
 7245              	.LFB1619:
1774:/usr/include/c++/11/bits/stl_vector.h **** 
1775:/usr/include/c++/11/bits/stl_vector.h ****       static size_type
1776:/usr/include/c++/11/bits/stl_vector.h ****       _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 7246              		.loc 8 1776 7
 7247              		.cfi_startproc
 7248 0000 F30F1EFA 		endbr64
 7249 0004 55       		pushq	%rbp
 7250              		.cfi_def_cfa_offset 16
 7251              		.cfi_offset 6, -16
 7252 0005 4889E5   		movq	%rsp, %rbp
 7253              		.cfi_def_cfa_register 6
 7254 0008 4883EC30 		subq	$48, %rsp
 7255 000c 48897DD8 		movq	%rdi, -40(%rbp)
 7256              		.loc 8 1776 7
 7257 0010 64488B04 		movq	%fs:40, %rax
 7257      25280000 
 7257      00
 7258 0019 488945F8 		movq	%rax, -8(%rbp)
 7259 001d 31C0     		xorl	%eax, %eax
1777:/usr/include/c++/11/bits/stl_vector.h ****       {
1778:/usr/include/c++/11/bits/stl_vector.h **** 	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
1779:/usr/include/c++/11/bits/stl_vector.h **** 	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
1780:/usr/include/c++/11/bits/stl_vector.h **** 	// (even if std::allocator_traits::max_size says we can).
1781:/usr/include/c++/11/bits/stl_vector.h **** 	const size_t __diffmax
 7260              		.loc 8 1781 15
 7261 001f 48B8FFFF 		movabsq	$2305843009213693951, %rax
 7261      FFFFFFFF 
 7261      FF1F
 7262 0029 488945E8 		movq	%rax, -24(%rbp)
1782:/usr/include/c++/11/bits/stl_vector.h **** 	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
1783:/usr/include/c++/11/bits/stl_vector.h **** 	const size_t __allocmax = _Alloc_traits::max_size(__a);
 7263              		.loc 8 1783 51
 7264 002d 488B45D8 		movq	-40(%rbp), %rax
 7265 0031 4889C7   		movq	%rax, %rdi
 7266 0034 E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaIfEfE8max_sizeERKS1_
 7266      00
 7267              		.loc 8 1783 15
 7268 0039 488945F0 		movq	%rax, -16(%rbp)
1784:/usr/include/c++/11/bits/stl_vector.h **** 	return (std::min)(__diffmax, __allocmax);
 7269              		.loc 8 1784 19
 7270 003d 488D55F0 		leaq	-16(%rbp), %rdx
 7271 0041 488D45E8 		leaq	-24(%rbp), %rax
 7272 0045 4889D6   		movq	%rdx, %rsi
 7273 0048 4889C7   		movq	%rax, %rdi
 7274 004b E8000000 		call	_ZSt3minImERKT_S2_S2_
 7274      00
 7275              		.loc 8 1784 41
 7276 0050 488B00   		movq	(%rax), %rax
1785:/usr/include/c++/11/bits/stl_vector.h ****       }
 7277              		.loc 8 1785 7
 7278 0053 488B55F8 		movq	-8(%rbp), %rdx
 7279 0057 64482B14 		subq	%fs:40, %rdx
 7279      25280000 
 7279      00
 7280 0060 7405     		je	.L358
 7281 0062 E8000000 		call	__stack_chk_fail@PLT
 7281      00
 7282              	.L358:
 7283 0067 C9       		leave
 7284              		.cfi_def_cfa 7, 8
 7285 0068 C3       		ret
 7286              		.cfi_endproc
 7287              	.LFE1619:
 7289              		.section	.text._ZNSaIfEC2ERKS_,"axG",@progbits,_ZNSaIfEC5ERKS_,comdat
 7290              		.align 2
 7291              		.weak	_ZNSaIfEC2ERKS_
 7293              	_ZNSaIfEC2ERKS_:
 7294              	.LFB1621:
 159:/usr/include/c++/11/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 7295              		.loc 7 159 7
 7296              		.cfi_startproc
 7297 0000 F30F1EFA 		endbr64
 7298 0004 55       		pushq	%rbp
 7299              		.cfi_def_cfa_offset 16
 7300              		.cfi_offset 6, -16
 7301 0005 4889E5   		movq	%rsp, %rbp
 7302              		.cfi_def_cfa_register 6
 7303 0008 4883EC10 		subq	$16, %rsp
 7304 000c 48897DF8 		movq	%rdi, -8(%rbp)
 7305 0010 488975F0 		movq	%rsi, -16(%rbp)
 7306              	.LBB112:
 160:/usr/include/c++/11/bits/allocator.h **** 
 7307              		.loc 7 160 34
 7308 0014 488B55F0 		movq	-16(%rbp), %rdx
 7309 0018 488B45F8 		movq	-8(%rbp), %rax
 7310 001c 4889D6   		movq	%rdx, %rsi
 7311 001f 4889C7   		movq	%rax, %rdi
 7312 0022 E8000000 		call	_ZN9__gnu_cxx13new_allocatorIfEC2ERKS1_
 7312      00
 7313              	.LBE112:
 160:/usr/include/c++/11/bits/allocator.h **** 
 7314              		.loc 7 160 38
 7315 0027 90       		nop
 7316 0028 C9       		leave
 7317              		.cfi_def_cfa 7, 8
 7318 0029 C3       		ret
 7319              		.cfi_endproc
 7320              	.LFE1621:
 7322              		.weak	_ZNSaIfEC1ERKS_
 7323              		.set	_ZNSaIfEC1ERKS_,_ZNSaIfEC2ERKS_
 7324              		.section	.text._ZNSt12_Vector_baseIfSaIfEE12_Vector_implC2ERKS0_,"axG",@progbits,_ZNSt12_Vector_ba
 7325              		.align 2
 7326              		.weak	_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC2ERKS0_
 7328              	_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC2ERKS0_:
 7329              	.LFB1624:
 136:/usr/include/c++/11/bits/stl_vector.h **** 	: _Tp_alloc_type(__a)
 7330              		.loc 8 136 2
 7331              		.cfi_startproc
 7332 0000 F30F1EFA 		endbr64
 7333 0004 55       		pushq	%rbp
 7334              		.cfi_def_cfa_offset 16
 7335              		.cfi_offset 6, -16
 7336 0005 4889E5   		movq	%rsp, %rbp
 7337              		.cfi_def_cfa_register 6
 7338 0008 4883EC10 		subq	$16, %rsp
 7339 000c 48897DF8 		movq	%rdi, -8(%rbp)
 7340 0010 488975F0 		movq	%rsi, -16(%rbp)
 7341              	.LBB113:
 137:/usr/include/c++/11/bits/stl_vector.h **** 	{ }
 7342              		.loc 8 137 22
 7343 0014 488B55F0 		movq	-16(%rbp), %rdx
 7344 0018 488B45F8 		movq	-8(%rbp), %rax
 7345 001c 4889D6   		movq	%rdx, %rsi
 7346 001f 4889C7   		movq	%rax, %rdi
 7347 0022 E8000000 		call	_ZNSaIfEC2ERKS_
 7347      00
 7348 0027 488B45F8 		movq	-8(%rbp), %rax
 7349 002b 4889C7   		movq	%rax, %rdi
 7350 002e E8000000 		call	_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC2Ev
 7350      00
 7351              	.LBE113:
 138:/usr/include/c++/11/bits/stl_vector.h **** 
 7352              		.loc 8 138 4
 7353 0033 90       		nop
 7354 0034 C9       		leave
 7355              		.cfi_def_cfa 7, 8
 7356 0035 C3       		ret
 7357              		.cfi_endproc
 7358              	.LFE1624:
 7360              		.weak	_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_
 7361              		.set	_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_,_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC2
 7362              		.section	.text._ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEm,"axG",@progbits,_ZNSt12_Vector_bas
 7363              		.align 2
 7364              		.weak	_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEm
 7366              	_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEm:
 7367              	.LFB1626:
 359:/usr/include/c++/11/bits/stl_vector.h ****       {
 7368              		.loc 8 359 7
 7369              		.cfi_startproc
 7370 0000 F30F1EFA 		endbr64
 7371 0004 55       		pushq	%rbp
 7372              		.cfi_def_cfa_offset 16
 7373              		.cfi_offset 6, -16
 7374 0005 4889E5   		movq	%rsp, %rbp
 7375              		.cfi_def_cfa_register 6
 7376 0008 4883EC10 		subq	$16, %rsp
 7377 000c 48897DF8 		movq	%rdi, -8(%rbp)
 7378 0010 488975F0 		movq	%rsi, -16(%rbp)
 361:/usr/include/c++/11/bits/stl_vector.h **** 	this->_M_impl._M_finish = this->_M_impl._M_start;
 7379              		.loc 8 361 44
 7380 0014 488B55F0 		movq	-16(%rbp), %rdx
 7381 0018 488B45F8 		movq	-8(%rbp), %rax
 7382 001c 4889D6   		movq	%rdx, %rsi
 7383 001f 4889C7   		movq	%rax, %rdi
 7384 0022 E8000000 		call	_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEm
 7384      00
 361:/usr/include/c++/11/bits/stl_vector.h **** 	this->_M_impl._M_finish = this->_M_impl._M_start;
 7385              		.loc 8 361 25
 7386 0027 488B55F8 		movq	-8(%rbp), %rdx
 7387 002b 488902   		movq	%rax, (%rdx)
 362:/usr/include/c++/11/bits/stl_vector.h **** 	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 7388              		.loc 8 362 42
 7389 002e 488B45F8 		movq	-8(%rbp), %rax
 7390 0032 488B10   		movq	(%rax), %rdx
 362:/usr/include/c++/11/bits/stl_vector.h **** 	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 7391              		.loc 8 362 26
 7392 0035 488B45F8 		movq	-8(%rbp), %rax
 7393 0039 48895008 		movq	%rdx, 8(%rax)
 363:/usr/include/c++/11/bits/stl_vector.h ****       }
 7394              		.loc 8 363 50
 7395 003d 488B45F8 		movq	-8(%rbp), %rax
 7396 0041 488B10   		movq	(%rax), %rdx
 363:/usr/include/c++/11/bits/stl_vector.h ****       }
 7397              		.loc 8 363 59
 7398 0044 488B45F0 		movq	-16(%rbp), %rax
 7399 0048 48C1E002 		salq	$2, %rax
 7400 004c 4801C2   		addq	%rax, %rdx
 363:/usr/include/c++/11/bits/stl_vector.h ****       }
 7401              		.loc 8 363 34
 7402 004f 488B45F8 		movq	-8(%rbp), %rax
 7403 0053 48895010 		movq	%rdx, 16(%rax)
 364:/usr/include/c++/11/bits/stl_vector.h ****     };
 7404              		.loc 8 364 7
 7405 0057 90       		nop
 7406 0058 C9       		leave
 7407              		.cfi_def_cfa 7, 8
 7408 0059 C3       		ret
 7409              		.cfi_endproc
 7410              	.LFE1626:
 7412              		.section	.text._ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfm,"axG",@progbits,_ZNSt12_Vector_baseI
 7413              		.align 2
 7414              		.weak	_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfm
 7416              	_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfm:
 7417              	.LFB1627:
 350:/usr/include/c++/11/bits/stl_vector.h ****       {
 7418              		.loc 8 350 7
 7419              		.cfi_startproc
 7420 0000 F30F1EFA 		endbr64
 7421 0004 55       		pushq	%rbp
 7422              		.cfi_def_cfa_offset 16
 7423              		.cfi_offset 6, -16
 7424 0005 4889E5   		movq	%rsp, %rbp
 7425              		.cfi_def_cfa_register 6
 7426 0008 4883EC20 		subq	$32, %rsp
 7427 000c 48897DF8 		movq	%rdi, -8(%rbp)
 7428 0010 488975F0 		movq	%rsi, -16(%rbp)
 7429 0014 488955E8 		movq	%rdx, -24(%rbp)
 353:/usr/include/c++/11/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 7430              		.loc 8 353 2
 7431 0018 48837DF0 		cmpq	$0, -16(%rbp)
 7431      00
 7432 001d 7417     		je	.L364
 354:/usr/include/c++/11/bits/stl_vector.h ****       }
 7433              		.loc 8 354 20
 7434 001f 488B45F8 		movq	-8(%rbp), %rax
 354:/usr/include/c++/11/bits/stl_vector.h ****       }
 7435              		.loc 8 354 19
 7436 0023 488B55E8 		movq	-24(%rbp), %rdx
 7437 0027 488B4DF0 		movq	-16(%rbp), %rcx
 7438 002b 4889CE   		movq	%rcx, %rsi
 7439 002e 4889C7   		movq	%rax, %rdi
 7440 0031 E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaIfEfE10deallocateERS1_Pfm
 7440      00
 7441              	.L364:
 355:/usr/include/c++/11/bits/stl_vector.h **** 
 7442              		.loc 8 355 7
 7443 0036 90       		nop
 7444 0037 C9       		leave
 7445              		.cfi_def_cfa 7, 8
 7446 0038 C3       		ret
 7447              		.cfi_endproc
 7448              	.LFE1627:
 7450              		.section	.text._ZSt24__uninitialized_fill_n_aIPfmffET_S1_T0_RKT1_RSaIT2_E,"axG",@progbits,_ZSt24__
 7451              		.weak	_ZSt24__uninitialized_fill_n_aIPfmffET_S1_T0_RKT1_RSaIT2_E
 7453              	_ZSt24__uninitialized_fill_n_aIPfmffET_S1_T0_RKT1_RSaIT2_E:
 7454              	.LFB1628:
 7455              		.file 12 "/usr/include/c++/11/bits/stl_uninitialized.h"
   1:/usr/include/c++/11/bits/stl_uninitialized.h **** // Raw memory manipulators -*- C++ -*-
   2:/usr/include/c++/11/bits/stl_uninitialized.h **** 
   3:/usr/include/c++/11/bits/stl_uninitialized.h **** // Copyright (C) 2001-2021 Free Software Foundation, Inc.
   4:/usr/include/c++/11/bits/stl_uninitialized.h **** //
   5:/usr/include/c++/11/bits/stl_uninitialized.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/11/bits/stl_uninitialized.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/11/bits/stl_uninitialized.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/11/bits/stl_uninitialized.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/11/bits/stl_uninitialized.h **** // any later version.
  10:/usr/include/c++/11/bits/stl_uninitialized.h **** 
  11:/usr/include/c++/11/bits/stl_uninitialized.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/11/bits/stl_uninitialized.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/11/bits/stl_uninitialized.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/11/bits/stl_uninitialized.h **** // GNU General Public License for more details.
  15:/usr/include/c++/11/bits/stl_uninitialized.h **** 
  16:/usr/include/c++/11/bits/stl_uninitialized.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/11/bits/stl_uninitialized.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/11/bits/stl_uninitialized.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/11/bits/stl_uninitialized.h **** 
  20:/usr/include/c++/11/bits/stl_uninitialized.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/11/bits/stl_uninitialized.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/11/bits/stl_uninitialized.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/11/bits/stl_uninitialized.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/11/bits/stl_uninitialized.h **** 
  25:/usr/include/c++/11/bits/stl_uninitialized.h **** /*
  26:/usr/include/c++/11/bits/stl_uninitialized.h ****  *
  27:/usr/include/c++/11/bits/stl_uninitialized.h ****  * Copyright (c) 1994
  28:/usr/include/c++/11/bits/stl_uninitialized.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/11/bits/stl_uninitialized.h ****  *
  30:/usr/include/c++/11/bits/stl_uninitialized.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/11/bits/stl_uninitialized.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/11/bits/stl_uninitialized.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/11/bits/stl_uninitialized.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/11/bits/stl_uninitialized.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/11/bits/stl_uninitialized.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/11/bits/stl_uninitialized.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/11/bits/stl_uninitialized.h ****  *
  38:/usr/include/c++/11/bits/stl_uninitialized.h ****  *
  39:/usr/include/c++/11/bits/stl_uninitialized.h ****  * Copyright (c) 1996,1997
  40:/usr/include/c++/11/bits/stl_uninitialized.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/11/bits/stl_uninitialized.h ****  *
  42:/usr/include/c++/11/bits/stl_uninitialized.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/11/bits/stl_uninitialized.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/11/bits/stl_uninitialized.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/11/bits/stl_uninitialized.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/11/bits/stl_uninitialized.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/11/bits/stl_uninitialized.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/11/bits/stl_uninitialized.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/11/bits/stl_uninitialized.h ****  */
  50:/usr/include/c++/11/bits/stl_uninitialized.h **** 
  51:/usr/include/c++/11/bits/stl_uninitialized.h **** /** @file bits/stl_uninitialized.h
  52:/usr/include/c++/11/bits/stl_uninitialized.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/11/bits/stl_uninitialized.h ****  *  Do not attempt to use it directly. @headername{memory}
  54:/usr/include/c++/11/bits/stl_uninitialized.h ****  */
  55:/usr/include/c++/11/bits/stl_uninitialized.h **** 
  56:/usr/include/c++/11/bits/stl_uninitialized.h **** #ifndef _STL_UNINITIALIZED_H
  57:/usr/include/c++/11/bits/stl_uninitialized.h **** #define _STL_UNINITIALIZED_H 1
  58:/usr/include/c++/11/bits/stl_uninitialized.h **** 
  59:/usr/include/c++/11/bits/stl_uninitialized.h **** #if __cplusplus >= 201103L
  60:/usr/include/c++/11/bits/stl_uninitialized.h **** #include <type_traits>
  61:/usr/include/c++/11/bits/stl_uninitialized.h **** #endif
  62:/usr/include/c++/11/bits/stl_uninitialized.h **** 
  63:/usr/include/c++/11/bits/stl_uninitialized.h **** #include <bits/stl_algobase.h>    // copy
  64:/usr/include/c++/11/bits/stl_uninitialized.h **** #include <ext/alloc_traits.h>     // __alloc_traits
  65:/usr/include/c++/11/bits/stl_uninitialized.h **** 
  66:/usr/include/c++/11/bits/stl_uninitialized.h **** #if __cplusplus >= 201703L
  67:/usr/include/c++/11/bits/stl_uninitialized.h **** #include <bits/stl_pair.h>
  68:/usr/include/c++/11/bits/stl_uninitialized.h **** #endif
  69:/usr/include/c++/11/bits/stl_uninitialized.h **** 
  70:/usr/include/c++/11/bits/stl_uninitialized.h **** namespace std _GLIBCXX_VISIBILITY(default)
  71:/usr/include/c++/11/bits/stl_uninitialized.h **** {
  72:/usr/include/c++/11/bits/stl_uninitialized.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  73:/usr/include/c++/11/bits/stl_uninitialized.h **** 
  74:/usr/include/c++/11/bits/stl_uninitialized.h ****   /** @addtogroup memory
  75:/usr/include/c++/11/bits/stl_uninitialized.h ****    *  @{
  76:/usr/include/c++/11/bits/stl_uninitialized.h ****    */
  77:/usr/include/c++/11/bits/stl_uninitialized.h **** 
  78:/usr/include/c++/11/bits/stl_uninitialized.h ****   /// @cond undocumented
  79:/usr/include/c++/11/bits/stl_uninitialized.h **** 
  80:/usr/include/c++/11/bits/stl_uninitialized.h ****   template<bool _TrivialValueTypes>
  81:/usr/include/c++/11/bits/stl_uninitialized.h ****     struct __uninitialized_copy
  82:/usr/include/c++/11/bits/stl_uninitialized.h ****     {
  83:/usr/include/c++/11/bits/stl_uninitialized.h ****       template<typename _InputIterator, typename _ForwardIterator>
  84:/usr/include/c++/11/bits/stl_uninitialized.h ****         static _ForwardIterator
  85:/usr/include/c++/11/bits/stl_uninitialized.h ****         __uninit_copy(_InputIterator __first, _InputIterator __last,
  86:/usr/include/c++/11/bits/stl_uninitialized.h **** 		      _ForwardIterator __result)
  87:/usr/include/c++/11/bits/stl_uninitialized.h ****         {
  88:/usr/include/c++/11/bits/stl_uninitialized.h **** 	  _ForwardIterator __cur = __result;
  89:/usr/include/c++/11/bits/stl_uninitialized.h **** 	  __try
  90:/usr/include/c++/11/bits/stl_uninitialized.h **** 	    {
  91:/usr/include/c++/11/bits/stl_uninitialized.h **** 	      for (; __first != __last; ++__first, (void)++__cur)
  92:/usr/include/c++/11/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
  93:/usr/include/c++/11/bits/stl_uninitialized.h **** 	      return __cur;
  94:/usr/include/c++/11/bits/stl_uninitialized.h **** 	    }
  95:/usr/include/c++/11/bits/stl_uninitialized.h **** 	  __catch(...)
  96:/usr/include/c++/11/bits/stl_uninitialized.h **** 	    {
  97:/usr/include/c++/11/bits/stl_uninitialized.h **** 	      std::_Destroy(__result, __cur);
  98:/usr/include/c++/11/bits/stl_uninitialized.h **** 	      __throw_exception_again;
  99:/usr/include/c++/11/bits/stl_uninitialized.h **** 	    }
 100:/usr/include/c++/11/bits/stl_uninitialized.h **** 	}
 101:/usr/include/c++/11/bits/stl_uninitialized.h ****     };
 102:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 103:/usr/include/c++/11/bits/stl_uninitialized.h ****   template<>
 104:/usr/include/c++/11/bits/stl_uninitialized.h ****     struct __uninitialized_copy<true>
 105:/usr/include/c++/11/bits/stl_uninitialized.h ****     {
 106:/usr/include/c++/11/bits/stl_uninitialized.h ****       template<typename _InputIterator, typename _ForwardIterator>
 107:/usr/include/c++/11/bits/stl_uninitialized.h ****         static _ForwardIterator
 108:/usr/include/c++/11/bits/stl_uninitialized.h ****         __uninit_copy(_InputIterator __first, _InputIterator __last,
 109:/usr/include/c++/11/bits/stl_uninitialized.h **** 		      _ForwardIterator __result)
 110:/usr/include/c++/11/bits/stl_uninitialized.h ****         { return std::copy(__first, __last, __result); }
 111:/usr/include/c++/11/bits/stl_uninitialized.h ****     };
 112:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 113:/usr/include/c++/11/bits/stl_uninitialized.h ****   /// @endcond
 114:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 115:/usr/include/c++/11/bits/stl_uninitialized.h ****   /**
 116:/usr/include/c++/11/bits/stl_uninitialized.h ****    *  @brief Copies the range [first,last) into result.
 117:/usr/include/c++/11/bits/stl_uninitialized.h ****    *  @param  __first  An input iterator.
 118:/usr/include/c++/11/bits/stl_uninitialized.h ****    *  @param  __last   An input iterator.
 119:/usr/include/c++/11/bits/stl_uninitialized.h ****    *  @param  __result An output iterator.
 120:/usr/include/c++/11/bits/stl_uninitialized.h ****    *  @return   __result + (__first - __last)
 121:/usr/include/c++/11/bits/stl_uninitialized.h ****    *
 122:/usr/include/c++/11/bits/stl_uninitialized.h ****    *  Like copy(), but does not require an initialized output range.
 123:/usr/include/c++/11/bits/stl_uninitialized.h ****   */
 124:/usr/include/c++/11/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator>
 125:/usr/include/c++/11/bits/stl_uninitialized.h ****     inline _ForwardIterator
 126:/usr/include/c++/11/bits/stl_uninitialized.h ****     uninitialized_copy(_InputIterator __first, _InputIterator __last,
 127:/usr/include/c++/11/bits/stl_uninitialized.h **** 		       _ForwardIterator __result)
 128:/usr/include/c++/11/bits/stl_uninitialized.h ****     {
 129:/usr/include/c++/11/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_InputIterator>::value_type
 130:/usr/include/c++/11/bits/stl_uninitialized.h **** 	_ValueType1;
 131:/usr/include/c++/11/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 132:/usr/include/c++/11/bits/stl_uninitialized.h **** 	_ValueType2;
 133:/usr/include/c++/11/bits/stl_uninitialized.h **** #if __cplusplus < 201103L
 134:/usr/include/c++/11/bits/stl_uninitialized.h ****       const bool __assignable = true;
 135:/usr/include/c++/11/bits/stl_uninitialized.h **** #else
 136:/usr/include/c++/11/bits/stl_uninitialized.h ****       // Trivial types can have deleted copy constructor, but the std::copy
 137:/usr/include/c++/11/bits/stl_uninitialized.h ****       // optimization that uses memmove would happily "copy" them anyway.
 138:/usr/include/c++/11/bits/stl_uninitialized.h ****       static_assert(is_constructible<_ValueType2, decltype(*__first)>::value,
 139:/usr/include/c++/11/bits/stl_uninitialized.h **** 	  "result type must be constructible from value type of input range");
 140:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 141:/usr/include/c++/11/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_InputIterator>::reference _RefType1;
 142:/usr/include/c++/11/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::reference _RefType2;
 143:/usr/include/c++/11/bits/stl_uninitialized.h ****       // Trivial types can have deleted assignment, so using std::copy
 144:/usr/include/c++/11/bits/stl_uninitialized.h ****       // would be ill-formed. Require assignability before using std::copy:
 145:/usr/include/c++/11/bits/stl_uninitialized.h ****       const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 146:/usr/include/c++/11/bits/stl_uninitialized.h **** #endif
 147:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 148:/usr/include/c++/11/bits/stl_uninitialized.h ****       return std::__uninitialized_copy<__is_trivial(_ValueType1)
 149:/usr/include/c++/11/bits/stl_uninitialized.h **** 				       && __is_trivial(_ValueType2)
 150:/usr/include/c++/11/bits/stl_uninitialized.h **** 				       && __assignable>::
 151:/usr/include/c++/11/bits/stl_uninitialized.h **** 	__uninit_copy(__first, __last, __result);
 152:/usr/include/c++/11/bits/stl_uninitialized.h ****     }
 153:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 154:/usr/include/c++/11/bits/stl_uninitialized.h ****   /// @cond undocumented
 155:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 156:/usr/include/c++/11/bits/stl_uninitialized.h ****   template<bool _TrivialValueType>
 157:/usr/include/c++/11/bits/stl_uninitialized.h ****     struct __uninitialized_fill
 158:/usr/include/c++/11/bits/stl_uninitialized.h ****     {
 159:/usr/include/c++/11/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Tp>
 160:/usr/include/c++/11/bits/stl_uninitialized.h ****         static void
 161:/usr/include/c++/11/bits/stl_uninitialized.h ****         __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
 162:/usr/include/c++/11/bits/stl_uninitialized.h **** 		      const _Tp& __x)
 163:/usr/include/c++/11/bits/stl_uninitialized.h ****         {
 164:/usr/include/c++/11/bits/stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 165:/usr/include/c++/11/bits/stl_uninitialized.h **** 	  __try
 166:/usr/include/c++/11/bits/stl_uninitialized.h **** 	    {
 167:/usr/include/c++/11/bits/stl_uninitialized.h **** 	      for (; __cur != __last; ++__cur)
 168:/usr/include/c++/11/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), __x);
 169:/usr/include/c++/11/bits/stl_uninitialized.h **** 	    }
 170:/usr/include/c++/11/bits/stl_uninitialized.h **** 	  __catch(...)
 171:/usr/include/c++/11/bits/stl_uninitialized.h **** 	    {
 172:/usr/include/c++/11/bits/stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 173:/usr/include/c++/11/bits/stl_uninitialized.h **** 	      __throw_exception_again;
 174:/usr/include/c++/11/bits/stl_uninitialized.h **** 	    }
 175:/usr/include/c++/11/bits/stl_uninitialized.h **** 	}
 176:/usr/include/c++/11/bits/stl_uninitialized.h ****     };
 177:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 178:/usr/include/c++/11/bits/stl_uninitialized.h ****   template<>
 179:/usr/include/c++/11/bits/stl_uninitialized.h ****     struct __uninitialized_fill<true>
 180:/usr/include/c++/11/bits/stl_uninitialized.h ****     {
 181:/usr/include/c++/11/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Tp>
 182:/usr/include/c++/11/bits/stl_uninitialized.h ****         static void
 183:/usr/include/c++/11/bits/stl_uninitialized.h ****         __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
 184:/usr/include/c++/11/bits/stl_uninitialized.h **** 		      const _Tp& __x)
 185:/usr/include/c++/11/bits/stl_uninitialized.h ****         { std::fill(__first, __last, __x); }
 186:/usr/include/c++/11/bits/stl_uninitialized.h ****     };
 187:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 188:/usr/include/c++/11/bits/stl_uninitialized.h ****   /// @endcond
 189:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 190:/usr/include/c++/11/bits/stl_uninitialized.h ****   /**
 191:/usr/include/c++/11/bits/stl_uninitialized.h ****    *  @brief Copies the value x into the range [first,last).
 192:/usr/include/c++/11/bits/stl_uninitialized.h ****    *  @param  __first  An input iterator.
 193:/usr/include/c++/11/bits/stl_uninitialized.h ****    *  @param  __last   An input iterator.
 194:/usr/include/c++/11/bits/stl_uninitialized.h ****    *  @param  __x      The source value.
 195:/usr/include/c++/11/bits/stl_uninitialized.h ****    *  @return   Nothing.
 196:/usr/include/c++/11/bits/stl_uninitialized.h ****    *
 197:/usr/include/c++/11/bits/stl_uninitialized.h ****    *  Like fill(), but does not require an initialized output range.
 198:/usr/include/c++/11/bits/stl_uninitialized.h ****   */
 199:/usr/include/c++/11/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp>
 200:/usr/include/c++/11/bits/stl_uninitialized.h ****     inline void
 201:/usr/include/c++/11/bits/stl_uninitialized.h ****     uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last,
 202:/usr/include/c++/11/bits/stl_uninitialized.h **** 		       const _Tp& __x)
 203:/usr/include/c++/11/bits/stl_uninitialized.h ****     {
 204:/usr/include/c++/11/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 205:/usr/include/c++/11/bits/stl_uninitialized.h **** 	_ValueType;
 206:/usr/include/c++/11/bits/stl_uninitialized.h **** #if __cplusplus < 201103L
 207:/usr/include/c++/11/bits/stl_uninitialized.h ****       const bool __assignable = true;
 208:/usr/include/c++/11/bits/stl_uninitialized.h **** #else
 209:/usr/include/c++/11/bits/stl_uninitialized.h ****       // Trivial types can have deleted copy constructor, but the std::fill
 210:/usr/include/c++/11/bits/stl_uninitialized.h ****       // optimization that uses memmove would happily "copy" them anyway.
 211:/usr/include/c++/11/bits/stl_uninitialized.h ****       static_assert(is_constructible<_ValueType, const _Tp&>::value,
 212:/usr/include/c++/11/bits/stl_uninitialized.h **** 	  "result type must be constructible from input type");
 213:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 214:/usr/include/c++/11/bits/stl_uninitialized.h ****       // Trivial types can have deleted assignment, so using std::fill
 215:/usr/include/c++/11/bits/stl_uninitialized.h ****       // would be ill-formed. Require assignability before using std::fill:
 216:/usr/include/c++/11/bits/stl_uninitialized.h ****       const bool __assignable = is_copy_assignable<_ValueType>::value;
 217:/usr/include/c++/11/bits/stl_uninitialized.h **** #endif
 218:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 219:/usr/include/c++/11/bits/stl_uninitialized.h ****       std::__uninitialized_fill<__is_trivial(_ValueType) && __assignable>::
 220:/usr/include/c++/11/bits/stl_uninitialized.h **** 	__uninit_fill(__first, __last, __x);
 221:/usr/include/c++/11/bits/stl_uninitialized.h ****     }
 222:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 223:/usr/include/c++/11/bits/stl_uninitialized.h ****   /// @cond undocumented
 224:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 225:/usr/include/c++/11/bits/stl_uninitialized.h ****   template<bool _TrivialValueType>
 226:/usr/include/c++/11/bits/stl_uninitialized.h ****     struct __uninitialized_fill_n
 227:/usr/include/c++/11/bits/stl_uninitialized.h ****     {
 228:/usr/include/c++/11/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size, typename _Tp>
 229:/usr/include/c++/11/bits/stl_uninitialized.h ****         static _ForwardIterator
 230:/usr/include/c++/11/bits/stl_uninitialized.h ****         __uninit_fill_n(_ForwardIterator __first, _Size __n,
 231:/usr/include/c++/11/bits/stl_uninitialized.h **** 			const _Tp& __x)
 232:/usr/include/c++/11/bits/stl_uninitialized.h ****         {
 233:/usr/include/c++/11/bits/stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 234:/usr/include/c++/11/bits/stl_uninitialized.h **** 	  __try
 235:/usr/include/c++/11/bits/stl_uninitialized.h **** 	    {
 236:/usr/include/c++/11/bits/stl_uninitialized.h **** 	      for (; __n > 0; --__n, (void) ++__cur)
 237:/usr/include/c++/11/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), __x);
 238:/usr/include/c++/11/bits/stl_uninitialized.h **** 	      return __cur;
 239:/usr/include/c++/11/bits/stl_uninitialized.h **** 	    }
 240:/usr/include/c++/11/bits/stl_uninitialized.h **** 	  __catch(...)
 241:/usr/include/c++/11/bits/stl_uninitialized.h **** 	    {
 242:/usr/include/c++/11/bits/stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 243:/usr/include/c++/11/bits/stl_uninitialized.h **** 	      __throw_exception_again;
 244:/usr/include/c++/11/bits/stl_uninitialized.h **** 	    }
 245:/usr/include/c++/11/bits/stl_uninitialized.h **** 	}
 246:/usr/include/c++/11/bits/stl_uninitialized.h ****     };
 247:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 248:/usr/include/c++/11/bits/stl_uninitialized.h ****   template<>
 249:/usr/include/c++/11/bits/stl_uninitialized.h ****     struct __uninitialized_fill_n<true>
 250:/usr/include/c++/11/bits/stl_uninitialized.h ****     {
 251:/usr/include/c++/11/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size, typename _Tp>
 252:/usr/include/c++/11/bits/stl_uninitialized.h ****         static _ForwardIterator
 253:/usr/include/c++/11/bits/stl_uninitialized.h ****         __uninit_fill_n(_ForwardIterator __first, _Size __n,
 254:/usr/include/c++/11/bits/stl_uninitialized.h **** 			const _Tp& __x)
 255:/usr/include/c++/11/bits/stl_uninitialized.h ****         { return std::fill_n(__first, __n, __x); }
 256:/usr/include/c++/11/bits/stl_uninitialized.h ****     };
 257:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 258:/usr/include/c++/11/bits/stl_uninitialized.h ****   /// @endcond
 259:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 260:/usr/include/c++/11/bits/stl_uninitialized.h ****    // _GLIBCXX_RESOLVE_LIB_DEFECTS
 261:/usr/include/c++/11/bits/stl_uninitialized.h ****    // DR 1339. uninitialized_fill_n should return the end of its range
 262:/usr/include/c++/11/bits/stl_uninitialized.h ****   /**
 263:/usr/include/c++/11/bits/stl_uninitialized.h ****    *  @brief Copies the value x into the range [first,first+n).
 264:/usr/include/c++/11/bits/stl_uninitialized.h ****    *  @param  __first  An input iterator.
 265:/usr/include/c++/11/bits/stl_uninitialized.h ****    *  @param  __n      The number of copies to make.
 266:/usr/include/c++/11/bits/stl_uninitialized.h ****    *  @param  __x      The source value.
 267:/usr/include/c++/11/bits/stl_uninitialized.h ****    *  @return   Nothing.
 268:/usr/include/c++/11/bits/stl_uninitialized.h ****    *
 269:/usr/include/c++/11/bits/stl_uninitialized.h ****    *  Like fill_n(), but does not require an initialized output range.
 270:/usr/include/c++/11/bits/stl_uninitialized.h ****   */
 271:/usr/include/c++/11/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Tp>
 272:/usr/include/c++/11/bits/stl_uninitialized.h ****     inline _ForwardIterator
 273:/usr/include/c++/11/bits/stl_uninitialized.h ****     uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
 274:/usr/include/c++/11/bits/stl_uninitialized.h ****     {
 275:/usr/include/c++/11/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 276:/usr/include/c++/11/bits/stl_uninitialized.h **** 	_ValueType;
 277:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 278:/usr/include/c++/11/bits/stl_uninitialized.h ****       // Trivial types do not need a constructor to begin their lifetime,
 279:/usr/include/c++/11/bits/stl_uninitialized.h ****       // so try to use std::fill_n to benefit from its memmove optimization.
 280:/usr/include/c++/11/bits/stl_uninitialized.h ****       // For arbitrary class types and floating point types we can't assume
 281:/usr/include/c++/11/bits/stl_uninitialized.h ****       // that __n > 0 and std::__size_to_integer(__n) > 0 are equivalent,
 282:/usr/include/c++/11/bits/stl_uninitialized.h ****       // so only use std::fill_n when _Size is already an integral type.
 283:/usr/include/c++/11/bits/stl_uninitialized.h **** #if __cplusplus < 201103L
 284:/usr/include/c++/11/bits/stl_uninitialized.h ****       const bool __can_fill = __is_integer<_Size>::__value;
 285:/usr/include/c++/11/bits/stl_uninitialized.h **** #else
 286:/usr/include/c++/11/bits/stl_uninitialized.h ****       // Trivial types can have deleted copy constructor, but the std::fill_n
 287:/usr/include/c++/11/bits/stl_uninitialized.h ****       // optimization that uses memmove would happily "copy" them anyway.
 288:/usr/include/c++/11/bits/stl_uninitialized.h ****       static_assert(is_constructible<_ValueType, const _Tp&>::value,
 289:/usr/include/c++/11/bits/stl_uninitialized.h **** 	  "result type must be constructible from input type");
 290:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 291:/usr/include/c++/11/bits/stl_uninitialized.h ****       // Trivial types can have deleted assignment, so using std::fill_n
 292:/usr/include/c++/11/bits/stl_uninitialized.h ****       // would be ill-formed. Require assignability before using std::fill_n:
 293:/usr/include/c++/11/bits/stl_uninitialized.h ****       constexpr bool __can_fill
 294:/usr/include/c++/11/bits/stl_uninitialized.h **** 	= __and_<is_integral<_Size>, is_copy_assignable<_ValueType>>::value;
 295:/usr/include/c++/11/bits/stl_uninitialized.h **** #endif
 296:/usr/include/c++/11/bits/stl_uninitialized.h ****       return __uninitialized_fill_n<__is_trivial(_ValueType) && __can_fill>::
 297:/usr/include/c++/11/bits/stl_uninitialized.h **** 	__uninit_fill_n(__first, __n, __x);
 298:/usr/include/c++/11/bits/stl_uninitialized.h ****     }
 299:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 300:/usr/include/c++/11/bits/stl_uninitialized.h ****   /// @cond undocumented
 301:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 302:/usr/include/c++/11/bits/stl_uninitialized.h ****   // Extensions: versions of uninitialized_copy, uninitialized_fill,
 303:/usr/include/c++/11/bits/stl_uninitialized.h ****   //  and uninitialized_fill_n that take an allocator parameter.
 304:/usr/include/c++/11/bits/stl_uninitialized.h ****   //  We dispatch back to the standard versions when we're given the
 305:/usr/include/c++/11/bits/stl_uninitialized.h ****   //  default allocator.  For nondefault allocators we do not use 
 306:/usr/include/c++/11/bits/stl_uninitialized.h ****   //  any of the POD optimizations.
 307:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 308:/usr/include/c++/11/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator,
 309:/usr/include/c++/11/bits/stl_uninitialized.h **** 	   typename _Allocator>
 310:/usr/include/c++/11/bits/stl_uninitialized.h ****     _ForwardIterator
 311:/usr/include/c++/11/bits/stl_uninitialized.h ****     __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 312:/usr/include/c++/11/bits/stl_uninitialized.h **** 			   _ForwardIterator __result, _Allocator& __alloc)
 313:/usr/include/c++/11/bits/stl_uninitialized.h ****     {
 314:/usr/include/c++/11/bits/stl_uninitialized.h ****       _ForwardIterator __cur = __result;
 315:/usr/include/c++/11/bits/stl_uninitialized.h ****       __try
 316:/usr/include/c++/11/bits/stl_uninitialized.h **** 	{
 317:/usr/include/c++/11/bits/stl_uninitialized.h **** 	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 318:/usr/include/c++/11/bits/stl_uninitialized.h **** 	  for (; __first != __last; ++__first, (void)++__cur)
 319:/usr/include/c++/11/bits/stl_uninitialized.h **** 	    __traits::construct(__alloc, std::__addressof(*__cur), *__first);
 320:/usr/include/c++/11/bits/stl_uninitialized.h **** 	  return __cur;
 321:/usr/include/c++/11/bits/stl_uninitialized.h **** 	}
 322:/usr/include/c++/11/bits/stl_uninitialized.h ****       __catch(...)
 323:/usr/include/c++/11/bits/stl_uninitialized.h **** 	{
 324:/usr/include/c++/11/bits/stl_uninitialized.h **** 	  std::_Destroy(__result, __cur, __alloc);
 325:/usr/include/c++/11/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 326:/usr/include/c++/11/bits/stl_uninitialized.h **** 	}
 327:/usr/include/c++/11/bits/stl_uninitialized.h ****     }
 328:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 329:/usr/include/c++/11/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
 330:/usr/include/c++/11/bits/stl_uninitialized.h ****     inline _ForwardIterator
 331:/usr/include/c++/11/bits/stl_uninitialized.h ****     __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 332:/usr/include/c++/11/bits/stl_uninitialized.h **** 			   _ForwardIterator __result, allocator<_Tp>&)
 333:/usr/include/c++/11/bits/stl_uninitialized.h ****     { return std::uninitialized_copy(__first, __last, __result); }
 334:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 335:/usr/include/c++/11/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator,
 336:/usr/include/c++/11/bits/stl_uninitialized.h **** 	   typename _Allocator>
 337:/usr/include/c++/11/bits/stl_uninitialized.h ****     inline _ForwardIterator
 338:/usr/include/c++/11/bits/stl_uninitialized.h ****     __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
 339:/usr/include/c++/11/bits/stl_uninitialized.h **** 			   _ForwardIterator __result, _Allocator& __alloc)
 340:/usr/include/c++/11/bits/stl_uninitialized.h ****     {
 341:/usr/include/c++/11/bits/stl_uninitialized.h ****       return std::__uninitialized_copy_a(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),
 342:/usr/include/c++/11/bits/stl_uninitialized.h **** 					 _GLIBCXX_MAKE_MOVE_ITERATOR(__last),
 343:/usr/include/c++/11/bits/stl_uninitialized.h **** 					 __result, __alloc);
 344:/usr/include/c++/11/bits/stl_uninitialized.h ****     }
 345:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 346:/usr/include/c++/11/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator,
 347:/usr/include/c++/11/bits/stl_uninitialized.h **** 	   typename _Allocator>
 348:/usr/include/c++/11/bits/stl_uninitialized.h ****     inline _ForwardIterator
 349:/usr/include/c++/11/bits/stl_uninitialized.h ****     __uninitialized_move_if_noexcept_a(_InputIterator __first,
 350:/usr/include/c++/11/bits/stl_uninitialized.h **** 				       _InputIterator __last,
 351:/usr/include/c++/11/bits/stl_uninitialized.h **** 				       _ForwardIterator __result,
 352:/usr/include/c++/11/bits/stl_uninitialized.h **** 				       _Allocator& __alloc)
 353:/usr/include/c++/11/bits/stl_uninitialized.h ****     {
 354:/usr/include/c++/11/bits/stl_uninitialized.h ****       return std::__uninitialized_copy_a
 355:/usr/include/c++/11/bits/stl_uninitialized.h **** 	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 356:/usr/include/c++/11/bits/stl_uninitialized.h **** 	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 357:/usr/include/c++/11/bits/stl_uninitialized.h ****     }
 358:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 359:/usr/include/c++/11/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp, typename _Allocator>
 360:/usr/include/c++/11/bits/stl_uninitialized.h ****     void
 361:/usr/include/c++/11/bits/stl_uninitialized.h ****     __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
 362:/usr/include/c++/11/bits/stl_uninitialized.h **** 			   const _Tp& __x, _Allocator& __alloc)
 363:/usr/include/c++/11/bits/stl_uninitialized.h ****     {
 364:/usr/include/c++/11/bits/stl_uninitialized.h ****       _ForwardIterator __cur = __first;
 365:/usr/include/c++/11/bits/stl_uninitialized.h ****       __try
 366:/usr/include/c++/11/bits/stl_uninitialized.h **** 	{
 367:/usr/include/c++/11/bits/stl_uninitialized.h **** 	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 368:/usr/include/c++/11/bits/stl_uninitialized.h **** 	  for (; __cur != __last; ++__cur)
 369:/usr/include/c++/11/bits/stl_uninitialized.h **** 	    __traits::construct(__alloc, std::__addressof(*__cur), __x);
 370:/usr/include/c++/11/bits/stl_uninitialized.h **** 	}
 371:/usr/include/c++/11/bits/stl_uninitialized.h ****       __catch(...)
 372:/usr/include/c++/11/bits/stl_uninitialized.h **** 	{
 373:/usr/include/c++/11/bits/stl_uninitialized.h **** 	  std::_Destroy(__first, __cur, __alloc);
 374:/usr/include/c++/11/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 375:/usr/include/c++/11/bits/stl_uninitialized.h **** 	}
 376:/usr/include/c++/11/bits/stl_uninitialized.h ****     }
 377:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 378:/usr/include/c++/11/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp, typename _Tp2>
 379:/usr/include/c++/11/bits/stl_uninitialized.h ****     inline void
 380:/usr/include/c++/11/bits/stl_uninitialized.h ****     __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
 381:/usr/include/c++/11/bits/stl_uninitialized.h **** 			   const _Tp& __x, allocator<_Tp2>&)
 382:/usr/include/c++/11/bits/stl_uninitialized.h ****     { std::uninitialized_fill(__first, __last, __x); }
 383:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 384:/usr/include/c++/11/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Tp,
 385:/usr/include/c++/11/bits/stl_uninitialized.h **** 	   typename _Allocator>
 386:/usr/include/c++/11/bits/stl_uninitialized.h ****     _ForwardIterator
 387:/usr/include/c++/11/bits/stl_uninitialized.h ****     __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, 
 388:/usr/include/c++/11/bits/stl_uninitialized.h **** 			     const _Tp& __x, _Allocator& __alloc)
 389:/usr/include/c++/11/bits/stl_uninitialized.h ****     {
 390:/usr/include/c++/11/bits/stl_uninitialized.h ****       _ForwardIterator __cur = __first;
 391:/usr/include/c++/11/bits/stl_uninitialized.h ****       __try
 392:/usr/include/c++/11/bits/stl_uninitialized.h **** 	{
 393:/usr/include/c++/11/bits/stl_uninitialized.h **** 	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 394:/usr/include/c++/11/bits/stl_uninitialized.h **** 	  for (; __n > 0; --__n, (void) ++__cur)
 395:/usr/include/c++/11/bits/stl_uninitialized.h **** 	    __traits::construct(__alloc, std::__addressof(*__cur), __x);
 396:/usr/include/c++/11/bits/stl_uninitialized.h **** 	  return __cur;
 397:/usr/include/c++/11/bits/stl_uninitialized.h **** 	}
 398:/usr/include/c++/11/bits/stl_uninitialized.h ****       __catch(...)
 399:/usr/include/c++/11/bits/stl_uninitialized.h **** 	{
 400:/usr/include/c++/11/bits/stl_uninitialized.h **** 	  std::_Destroy(__first, __cur, __alloc);
 401:/usr/include/c++/11/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 402:/usr/include/c++/11/bits/stl_uninitialized.h **** 	}
 403:/usr/include/c++/11/bits/stl_uninitialized.h ****     }
 404:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 405:/usr/include/c++/11/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Tp,
 406:/usr/include/c++/11/bits/stl_uninitialized.h **** 	   typename _Tp2>
 407:/usr/include/c++/11/bits/stl_uninitialized.h ****     inline _ForwardIterator
 408:/usr/include/c++/11/bits/stl_uninitialized.h ****     __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, 
 7456              		.loc 12 408 5
 7457              		.cfi_startproc
 7458 0000 F30F1EFA 		endbr64
 7459 0004 55       		pushq	%rbp
 7460              		.cfi_def_cfa_offset 16
 7461              		.cfi_offset 6, -16
 7462 0005 4889E5   		movq	%rsp, %rbp
 7463              		.cfi_def_cfa_register 6
 7464 0008 4883EC20 		subq	$32, %rsp
 7465 000c 48897DF8 		movq	%rdi, -8(%rbp)
 7466 0010 488975F0 		movq	%rsi, -16(%rbp)
 7467 0014 488955E8 		movq	%rdx, -24(%rbp)
 7468 0018 48894DE0 		movq	%rcx, -32(%rbp)
 409:/usr/include/c++/11/bits/stl_uninitialized.h **** 			     const _Tp& __x, allocator<_Tp2>&)
 410:/usr/include/c++/11/bits/stl_uninitialized.h ****     { return std::uninitialized_fill_n(__first, __n, __x); }
 7469              		.loc 12 410 39
 7470 001c 488B55E8 		movq	-24(%rbp), %rdx
 7471 0020 488B4DF0 		movq	-16(%rbp), %rcx
 7472 0024 488B45F8 		movq	-8(%rbp), %rax
 7473 0028 4889CE   		movq	%rcx, %rsi
 7474 002b 4889C7   		movq	%rax, %rdi
 7475 002e E8000000 		call	_ZSt20uninitialized_fill_nIPfmfET_S1_T0_RKT1_
 7475      00
 7476              		.loc 12 410 60
 7477 0033 C9       		leave
 7478              		.cfi_def_cfa 7, 8
 7479 0034 C3       		ret
 7480              		.cfi_endproc
 7481              	.LFE1628:
 7483              		.section	.text._ZSt8_DestroyIPfEvT_S1_,"axG",@progbits,_ZSt8_DestroyIPfEvT_S1_,comdat
 7484              		.weak	_ZSt8_DestroyIPfEvT_S1_
 7486              	_ZSt8_DestroyIPfEvT_S1_:
 7487              	.LFB1629:
 7488              		.file 13 "/usr/include/c++/11/bits/stl_construct.h"
   1:/usr/include/c++/11/bits/stl_construct.h **** // nonstandard construct and destroy functions -*- C++ -*-
   2:/usr/include/c++/11/bits/stl_construct.h **** 
   3:/usr/include/c++/11/bits/stl_construct.h **** // Copyright (C) 2001-2021 Free Software Foundation, Inc.
   4:/usr/include/c++/11/bits/stl_construct.h **** //
   5:/usr/include/c++/11/bits/stl_construct.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/11/bits/stl_construct.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/11/bits/stl_construct.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/11/bits/stl_construct.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/11/bits/stl_construct.h **** // any later version.
  10:/usr/include/c++/11/bits/stl_construct.h **** 
  11:/usr/include/c++/11/bits/stl_construct.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/11/bits/stl_construct.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/11/bits/stl_construct.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/11/bits/stl_construct.h **** // GNU General Public License for more details.
  15:/usr/include/c++/11/bits/stl_construct.h **** 
  16:/usr/include/c++/11/bits/stl_construct.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/11/bits/stl_construct.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/11/bits/stl_construct.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/11/bits/stl_construct.h **** 
  20:/usr/include/c++/11/bits/stl_construct.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/11/bits/stl_construct.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/11/bits/stl_construct.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/11/bits/stl_construct.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/11/bits/stl_construct.h **** 
  25:/usr/include/c++/11/bits/stl_construct.h **** /*
  26:/usr/include/c++/11/bits/stl_construct.h ****  *
  27:/usr/include/c++/11/bits/stl_construct.h ****  * Copyright (c) 1994
  28:/usr/include/c++/11/bits/stl_construct.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/11/bits/stl_construct.h ****  *
  30:/usr/include/c++/11/bits/stl_construct.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/11/bits/stl_construct.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/11/bits/stl_construct.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/11/bits/stl_construct.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/11/bits/stl_construct.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/11/bits/stl_construct.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/11/bits/stl_construct.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/11/bits/stl_construct.h ****  *
  38:/usr/include/c++/11/bits/stl_construct.h ****  *
  39:/usr/include/c++/11/bits/stl_construct.h ****  * Copyright (c) 1996,1997
  40:/usr/include/c++/11/bits/stl_construct.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/11/bits/stl_construct.h ****  *
  42:/usr/include/c++/11/bits/stl_construct.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/11/bits/stl_construct.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/11/bits/stl_construct.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/11/bits/stl_construct.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/11/bits/stl_construct.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/11/bits/stl_construct.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/11/bits/stl_construct.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/11/bits/stl_construct.h ****  */
  50:/usr/include/c++/11/bits/stl_construct.h **** 
  51:/usr/include/c++/11/bits/stl_construct.h **** /** @file bits/stl_construct.h
  52:/usr/include/c++/11/bits/stl_construct.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/11/bits/stl_construct.h ****  *  Do not attempt to use it directly. @headername{memory}
  54:/usr/include/c++/11/bits/stl_construct.h ****  */
  55:/usr/include/c++/11/bits/stl_construct.h **** 
  56:/usr/include/c++/11/bits/stl_construct.h **** #ifndef _STL_CONSTRUCT_H
  57:/usr/include/c++/11/bits/stl_construct.h **** #define _STL_CONSTRUCT_H 1
  58:/usr/include/c++/11/bits/stl_construct.h **** 
  59:/usr/include/c++/11/bits/stl_construct.h **** #include <new>
  60:/usr/include/c++/11/bits/stl_construct.h **** #include <bits/move.h>
  61:/usr/include/c++/11/bits/stl_construct.h **** #include <bits/stl_iterator_base_types.h> // for iterator_traits
  62:/usr/include/c++/11/bits/stl_construct.h **** #include <bits/stl_iterator_base_funcs.h> // for advance
  63:/usr/include/c++/11/bits/stl_construct.h **** 
  64:/usr/include/c++/11/bits/stl_construct.h **** /* This file provides the C++17 functions std::destroy_at, std::destroy, and
  65:/usr/include/c++/11/bits/stl_construct.h ****  * std::destroy_n, and the C++20 function std::construct_at.
  66:/usr/include/c++/11/bits/stl_construct.h ****  * It also provides std::_Construct, std::_Destroy,and std::_Destroy_n functions
  67:/usr/include/c++/11/bits/stl_construct.h ****  * which are defined in all standard modes and so can be used in C++98-14 code.
  68:/usr/include/c++/11/bits/stl_construct.h ****  * The _Destroy functions will dispatch to destroy_at during constant
  69:/usr/include/c++/11/bits/stl_construct.h ****  * evaluation, because calls to that function are intercepted by the compiler
  70:/usr/include/c++/11/bits/stl_construct.h ****  * to allow use in constant expressions.
  71:/usr/include/c++/11/bits/stl_construct.h ****  */
  72:/usr/include/c++/11/bits/stl_construct.h **** 
  73:/usr/include/c++/11/bits/stl_construct.h **** namespace std _GLIBCXX_VISIBILITY(default)
  74:/usr/include/c++/11/bits/stl_construct.h **** {
  75:/usr/include/c++/11/bits/stl_construct.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  76:/usr/include/c++/11/bits/stl_construct.h **** 
  77:/usr/include/c++/11/bits/stl_construct.h **** #if __cplusplus >= 201703L
  78:/usr/include/c++/11/bits/stl_construct.h ****   template <typename _Tp>
  79:/usr/include/c++/11/bits/stl_construct.h ****     _GLIBCXX20_CONSTEXPR inline void
  80:/usr/include/c++/11/bits/stl_construct.h ****     destroy_at(_Tp* __location)
  81:/usr/include/c++/11/bits/stl_construct.h ****     {
  82:/usr/include/c++/11/bits/stl_construct.h ****       if constexpr (__cplusplus > 201703L && is_array_v<_Tp>)
  83:/usr/include/c++/11/bits/stl_construct.h **** 	{
  84:/usr/include/c++/11/bits/stl_construct.h **** 	  for (auto& __x : *__location)
  85:/usr/include/c++/11/bits/stl_construct.h **** 	    std::destroy_at(std::__addressof(__x));
  86:/usr/include/c++/11/bits/stl_construct.h **** 	}
  87:/usr/include/c++/11/bits/stl_construct.h ****       else
  88:/usr/include/c++/11/bits/stl_construct.h **** 	__location->~_Tp();
  89:/usr/include/c++/11/bits/stl_construct.h ****     }
  90:/usr/include/c++/11/bits/stl_construct.h **** 
  91:/usr/include/c++/11/bits/stl_construct.h **** #if __cplusplus >= 202002L
  92:/usr/include/c++/11/bits/stl_construct.h ****   template<typename _Tp, typename... _Args>
  93:/usr/include/c++/11/bits/stl_construct.h ****     constexpr auto
  94:/usr/include/c++/11/bits/stl_construct.h ****     construct_at(_Tp* __location, _Args&&... __args)
  95:/usr/include/c++/11/bits/stl_construct.h ****     noexcept(noexcept(::new((void*)0) _Tp(std::declval<_Args>()...)))
  96:/usr/include/c++/11/bits/stl_construct.h ****     -> decltype(::new((void*)0) _Tp(std::declval<_Args>()...))
  97:/usr/include/c++/11/bits/stl_construct.h ****     { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
  98:/usr/include/c++/11/bits/stl_construct.h **** #endif // C++20
  99:/usr/include/c++/11/bits/stl_construct.h **** #endif// C++17
 100:/usr/include/c++/11/bits/stl_construct.h **** 
 101:/usr/include/c++/11/bits/stl_construct.h ****   /**
 102:/usr/include/c++/11/bits/stl_construct.h ****    * Constructs an object in existing memory by invoking an allocated
 103:/usr/include/c++/11/bits/stl_construct.h ****    * object's constructor with an initializer.
 104:/usr/include/c++/11/bits/stl_construct.h ****    */
 105:/usr/include/c++/11/bits/stl_construct.h **** #if __cplusplus >= 201103L
 106:/usr/include/c++/11/bits/stl_construct.h ****   template<typename _Tp, typename... _Args>
 107:/usr/include/c++/11/bits/stl_construct.h ****     _GLIBCXX20_CONSTEXPR
 108:/usr/include/c++/11/bits/stl_construct.h ****     inline void
 109:/usr/include/c++/11/bits/stl_construct.h ****     _Construct(_Tp* __p, _Args&&... __args)
 110:/usr/include/c++/11/bits/stl_construct.h ****     {
 111:/usr/include/c++/11/bits/stl_construct.h **** #if __cplusplus >= 202002L && __has_builtin(__builtin_is_constant_evaluated)
 112:/usr/include/c++/11/bits/stl_construct.h ****       if (__builtin_is_constant_evaluated())
 113:/usr/include/c++/11/bits/stl_construct.h **** 	{
 114:/usr/include/c++/11/bits/stl_construct.h **** 	  // Allow std::_Construct to be used in constant expressions.
 115:/usr/include/c++/11/bits/stl_construct.h **** 	  std::construct_at(__p, std::forward<_Args>(__args)...);
 116:/usr/include/c++/11/bits/stl_construct.h **** 	  return;
 117:/usr/include/c++/11/bits/stl_construct.h **** 	}
 118:/usr/include/c++/11/bits/stl_construct.h **** #endif
 119:/usr/include/c++/11/bits/stl_construct.h ****       ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...);
 120:/usr/include/c++/11/bits/stl_construct.h ****     }
 121:/usr/include/c++/11/bits/stl_construct.h **** #else
 122:/usr/include/c++/11/bits/stl_construct.h ****   template<typename _T1, typename _T2>
 123:/usr/include/c++/11/bits/stl_construct.h ****     inline void
 124:/usr/include/c++/11/bits/stl_construct.h ****     _Construct(_T1* __p, const _T2& __value)
 125:/usr/include/c++/11/bits/stl_construct.h ****     {
 126:/usr/include/c++/11/bits/stl_construct.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 127:/usr/include/c++/11/bits/stl_construct.h ****       // 402. wrong new expression in [some_]allocator::construct
 128:/usr/include/c++/11/bits/stl_construct.h ****       ::new(static_cast<void*>(__p)) _T1(__value);
 129:/usr/include/c++/11/bits/stl_construct.h ****     }
 130:/usr/include/c++/11/bits/stl_construct.h **** #endif
 131:/usr/include/c++/11/bits/stl_construct.h **** 
 132:/usr/include/c++/11/bits/stl_construct.h ****   template<typename _T1>
 133:/usr/include/c++/11/bits/stl_construct.h ****     inline void
 134:/usr/include/c++/11/bits/stl_construct.h ****     _Construct_novalue(_T1* __p)
 135:/usr/include/c++/11/bits/stl_construct.h ****     { ::new(static_cast<void*>(__p)) _T1; }
 136:/usr/include/c++/11/bits/stl_construct.h **** 
 137:/usr/include/c++/11/bits/stl_construct.h ****   template<typename _ForwardIterator>
 138:/usr/include/c++/11/bits/stl_construct.h ****     _GLIBCXX20_CONSTEXPR void
 139:/usr/include/c++/11/bits/stl_construct.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last);
 140:/usr/include/c++/11/bits/stl_construct.h **** 
 141:/usr/include/c++/11/bits/stl_construct.h ****   /**
 142:/usr/include/c++/11/bits/stl_construct.h ****    * Destroy the object pointed to by a pointer type.
 143:/usr/include/c++/11/bits/stl_construct.h ****    */
 144:/usr/include/c++/11/bits/stl_construct.h ****   template<typename _Tp>
 145:/usr/include/c++/11/bits/stl_construct.h ****     _GLIBCXX14_CONSTEXPR inline void
 146:/usr/include/c++/11/bits/stl_construct.h ****     _Destroy(_Tp* __pointer)
 147:/usr/include/c++/11/bits/stl_construct.h ****     {
 148:/usr/include/c++/11/bits/stl_construct.h **** #if __cplusplus > 201703L
 149:/usr/include/c++/11/bits/stl_construct.h ****       std::destroy_at(__pointer);
 150:/usr/include/c++/11/bits/stl_construct.h **** #else
 151:/usr/include/c++/11/bits/stl_construct.h ****       __pointer->~_Tp();
 152:/usr/include/c++/11/bits/stl_construct.h **** #endif
 153:/usr/include/c++/11/bits/stl_construct.h ****     }
 154:/usr/include/c++/11/bits/stl_construct.h **** 
 155:/usr/include/c++/11/bits/stl_construct.h ****   template<bool>
 156:/usr/include/c++/11/bits/stl_construct.h ****     struct _Destroy_aux
 157:/usr/include/c++/11/bits/stl_construct.h ****     {
 158:/usr/include/c++/11/bits/stl_construct.h ****       template<typename _ForwardIterator>
 159:/usr/include/c++/11/bits/stl_construct.h **** 	static _GLIBCXX20_CONSTEXPR void
 160:/usr/include/c++/11/bits/stl_construct.h **** 	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 161:/usr/include/c++/11/bits/stl_construct.h **** 	{
 162:/usr/include/c++/11/bits/stl_construct.h **** 	  for (; __first != __last; ++__first)
 163:/usr/include/c++/11/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 164:/usr/include/c++/11/bits/stl_construct.h **** 	}
 165:/usr/include/c++/11/bits/stl_construct.h ****     };
 166:/usr/include/c++/11/bits/stl_construct.h **** 
 167:/usr/include/c++/11/bits/stl_construct.h ****   template<>
 168:/usr/include/c++/11/bits/stl_construct.h ****     struct _Destroy_aux<true>
 169:/usr/include/c++/11/bits/stl_construct.h ****     {
 170:/usr/include/c++/11/bits/stl_construct.h ****       template<typename _ForwardIterator>
 171:/usr/include/c++/11/bits/stl_construct.h ****         static void
 172:/usr/include/c++/11/bits/stl_construct.h ****         __destroy(_ForwardIterator, _ForwardIterator) { }
 173:/usr/include/c++/11/bits/stl_construct.h ****     };
 174:/usr/include/c++/11/bits/stl_construct.h **** 
 175:/usr/include/c++/11/bits/stl_construct.h ****   /**
 176:/usr/include/c++/11/bits/stl_construct.h ****    * Destroy a range of objects.  If the value_type of the object has
 177:/usr/include/c++/11/bits/stl_construct.h ****    * a trivial destructor, the compiler should optimize all of this
 178:/usr/include/c++/11/bits/stl_construct.h ****    * away, otherwise the objects' destructors must be invoked.
 179:/usr/include/c++/11/bits/stl_construct.h ****    */
 180:/usr/include/c++/11/bits/stl_construct.h ****   template<typename _ForwardIterator>
 181:/usr/include/c++/11/bits/stl_construct.h ****     _GLIBCXX20_CONSTEXPR inline void
 182:/usr/include/c++/11/bits/stl_construct.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 7489              		.loc 13 182 5
 7490              		.cfi_startproc
 7491 0000 F30F1EFA 		endbr64
 7492 0004 55       		pushq	%rbp
 7493              		.cfi_def_cfa_offset 16
 7494              		.cfi_offset 6, -16
 7495 0005 4889E5   		movq	%rsp, %rbp
 7496              		.cfi_def_cfa_register 6
 7497 0008 4883EC10 		subq	$16, %rsp
 7498 000c 48897DF8 		movq	%rdi, -8(%rbp)
 7499 0010 488975F0 		movq	%rsi, -16(%rbp)
 183:/usr/include/c++/11/bits/stl_construct.h ****     {
 184:/usr/include/c++/11/bits/stl_construct.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 185:/usr/include/c++/11/bits/stl_construct.h ****                        _Value_type;
 186:/usr/include/c++/11/bits/stl_construct.h **** #if __cplusplus >= 201103L
 187:/usr/include/c++/11/bits/stl_construct.h ****       // A deleted destructor is trivial, this ensures we reject such types:
 188:/usr/include/c++/11/bits/stl_construct.h ****       static_assert(is_destructible<_Value_type>::value,
 189:/usr/include/c++/11/bits/stl_construct.h **** 		    "value type is destructible");
 190:/usr/include/c++/11/bits/stl_construct.h **** #endif
 191:/usr/include/c++/11/bits/stl_construct.h **** #if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
 192:/usr/include/c++/11/bits/stl_construct.h ****       if (std::is_constant_evaluated())
 193:/usr/include/c++/11/bits/stl_construct.h **** 	return _Destroy_aux<false>::__destroy(__first, __last);
 194:/usr/include/c++/11/bits/stl_construct.h **** #endif
 195:/usr/include/c++/11/bits/stl_construct.h ****       std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
 196:/usr/include/c++/11/bits/stl_construct.h **** 	__destroy(__first, __last);
 7500              		.loc 13 196 11
 7501 0014 488B55F0 		movq	-16(%rbp), %rdx
 7502 0018 488B45F8 		movq	-8(%rbp), %rax
 7503 001c 4889D6   		movq	%rdx, %rsi
 7504 001f 4889C7   		movq	%rax, %rdi
 7505 0022 E8000000 		call	_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_
 7505      00
 197:/usr/include/c++/11/bits/stl_construct.h ****     }
 7506              		.loc 13 197 5
 7507 0027 90       		nop
 7508 0028 C9       		leave
 7509              		.cfi_def_cfa 7, 8
 7510 0029 C3       		ret
 7511              		.cfi_endproc
 7512              	.LFE1629:
 7514              		.section	.text._ZN9__gnu_cxx14__alloc_traitsISaIfEfE8max_sizeERKS1_,"axG",@progbits,_ZN9__gnu_cxx1
 7515              		.weak	_ZN9__gnu_cxx14__alloc_traitsISaIfEfE8max_sizeERKS1_
 7517              	_ZN9__gnu_cxx14__alloc_traitsISaIfEfE8max_sizeERKS1_:
 7518              	.LFB1637:
 7519              		.file 14 "/usr/include/c++/11/ext/alloc_traits.h"
   1:/usr/include/c++/11/ext/alloc_traits.h **** // Allocator traits -*- C++ -*-
   2:/usr/include/c++/11/ext/alloc_traits.h **** 
   3:/usr/include/c++/11/ext/alloc_traits.h **** // Copyright (C) 2011-2021 Free Software Foundation, Inc.
   4:/usr/include/c++/11/ext/alloc_traits.h **** //
   5:/usr/include/c++/11/ext/alloc_traits.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/11/ext/alloc_traits.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/11/ext/alloc_traits.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/11/ext/alloc_traits.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/11/ext/alloc_traits.h **** // any later version.
  10:/usr/include/c++/11/ext/alloc_traits.h **** 
  11:/usr/include/c++/11/ext/alloc_traits.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/11/ext/alloc_traits.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/11/ext/alloc_traits.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/11/ext/alloc_traits.h **** // GNU General Public License for more details.
  15:/usr/include/c++/11/ext/alloc_traits.h **** 
  16:/usr/include/c++/11/ext/alloc_traits.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/11/ext/alloc_traits.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/11/ext/alloc_traits.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/11/ext/alloc_traits.h **** 
  20:/usr/include/c++/11/ext/alloc_traits.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/11/ext/alloc_traits.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/11/ext/alloc_traits.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/11/ext/alloc_traits.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/11/ext/alloc_traits.h **** 
  25:/usr/include/c++/11/ext/alloc_traits.h **** /** @file ext/alloc_traits.h
  26:/usr/include/c++/11/ext/alloc_traits.h ****  *  This file is a GNU extension to the Standard C++ Library.
  27:/usr/include/c++/11/ext/alloc_traits.h ****  */
  28:/usr/include/c++/11/ext/alloc_traits.h **** 
  29:/usr/include/c++/11/ext/alloc_traits.h **** #ifndef _EXT_ALLOC_TRAITS_H
  30:/usr/include/c++/11/ext/alloc_traits.h **** #define _EXT_ALLOC_TRAITS_H 1
  31:/usr/include/c++/11/ext/alloc_traits.h **** 
  32:/usr/include/c++/11/ext/alloc_traits.h **** #pragma GCC system_header
  33:/usr/include/c++/11/ext/alloc_traits.h **** 
  34:/usr/include/c++/11/ext/alloc_traits.h **** # include <bits/alloc_traits.h>
  35:/usr/include/c++/11/ext/alloc_traits.h **** #if __cplusplus < 201103L
  36:/usr/include/c++/11/ext/alloc_traits.h **** # include <bits/allocator.h>  // for __alloc_swap
  37:/usr/include/c++/11/ext/alloc_traits.h **** #endif
  38:/usr/include/c++/11/ext/alloc_traits.h **** 
  39:/usr/include/c++/11/ext/alloc_traits.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  40:/usr/include/c++/11/ext/alloc_traits.h **** {
  41:/usr/include/c++/11/ext/alloc_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  42:/usr/include/c++/11/ext/alloc_traits.h **** 
  43:/usr/include/c++/11/ext/alloc_traits.h **** /**
  44:/usr/include/c++/11/ext/alloc_traits.h ****  * @brief  Uniform interface to C++98 and C++11 allocators.
  45:/usr/include/c++/11/ext/alloc_traits.h ****  * @ingroup allocators
  46:/usr/include/c++/11/ext/alloc_traits.h **** */
  47:/usr/include/c++/11/ext/alloc_traits.h **** template<typename _Alloc, typename = typename _Alloc::value_type>
  48:/usr/include/c++/11/ext/alloc_traits.h ****   struct __alloc_traits
  49:/usr/include/c++/11/ext/alloc_traits.h **** #if __cplusplus >= 201103L
  50:/usr/include/c++/11/ext/alloc_traits.h ****   : std::allocator_traits<_Alloc>
  51:/usr/include/c++/11/ext/alloc_traits.h **** #endif
  52:/usr/include/c++/11/ext/alloc_traits.h ****   {
  53:/usr/include/c++/11/ext/alloc_traits.h ****     typedef _Alloc allocator_type;
  54:/usr/include/c++/11/ext/alloc_traits.h **** #if __cplusplus >= 201103L
  55:/usr/include/c++/11/ext/alloc_traits.h ****     typedef std::allocator_traits<_Alloc>           _Base_type;
  56:/usr/include/c++/11/ext/alloc_traits.h ****     typedef typename _Base_type::value_type         value_type;
  57:/usr/include/c++/11/ext/alloc_traits.h ****     typedef typename _Base_type::pointer            pointer;
  58:/usr/include/c++/11/ext/alloc_traits.h ****     typedef typename _Base_type::const_pointer      const_pointer;
  59:/usr/include/c++/11/ext/alloc_traits.h ****     typedef typename _Base_type::size_type          size_type;
  60:/usr/include/c++/11/ext/alloc_traits.h ****     typedef typename _Base_type::difference_type    difference_type;
  61:/usr/include/c++/11/ext/alloc_traits.h ****     // C++11 allocators do not define reference or const_reference
  62:/usr/include/c++/11/ext/alloc_traits.h ****     typedef value_type&                             reference;
  63:/usr/include/c++/11/ext/alloc_traits.h ****     typedef const value_type&                       const_reference;
  64:/usr/include/c++/11/ext/alloc_traits.h ****     using _Base_type::allocate;
  65:/usr/include/c++/11/ext/alloc_traits.h ****     using _Base_type::deallocate;
  66:/usr/include/c++/11/ext/alloc_traits.h ****     using _Base_type::construct;
  67:/usr/include/c++/11/ext/alloc_traits.h ****     using _Base_type::destroy;
  68:/usr/include/c++/11/ext/alloc_traits.h ****     using _Base_type::max_size;
  69:/usr/include/c++/11/ext/alloc_traits.h **** 
  70:/usr/include/c++/11/ext/alloc_traits.h ****   private:
  71:/usr/include/c++/11/ext/alloc_traits.h ****     template<typename _Ptr>
  72:/usr/include/c++/11/ext/alloc_traits.h ****       using __is_custom_pointer
  73:/usr/include/c++/11/ext/alloc_traits.h **** 	= std::__and_<std::is_same<pointer, _Ptr>,
  74:/usr/include/c++/11/ext/alloc_traits.h **** 		      std::__not_<std::is_pointer<_Ptr>>>;
  75:/usr/include/c++/11/ext/alloc_traits.h **** 
  76:/usr/include/c++/11/ext/alloc_traits.h ****   public:
  77:/usr/include/c++/11/ext/alloc_traits.h ****     // overload construct for non-standard pointer types
  78:/usr/include/c++/11/ext/alloc_traits.h ****     template<typename _Ptr, typename... _Args>
  79:/usr/include/c++/11/ext/alloc_traits.h ****       static _GLIBCXX14_CONSTEXPR
  80:/usr/include/c++/11/ext/alloc_traits.h ****       std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
  81:/usr/include/c++/11/ext/alloc_traits.h ****       construct(_Alloc& __a, _Ptr __p, _Args&&... __args)
  82:/usr/include/c++/11/ext/alloc_traits.h ****       noexcept(noexcept(_Base_type::construct(__a, std::__to_address(__p),
  83:/usr/include/c++/11/ext/alloc_traits.h **** 					      std::forward<_Args>(__args)...)))
  84:/usr/include/c++/11/ext/alloc_traits.h ****       {
  85:/usr/include/c++/11/ext/alloc_traits.h **** 	_Base_type::construct(__a, std::__to_address(__p),
  86:/usr/include/c++/11/ext/alloc_traits.h **** 			      std::forward<_Args>(__args)...);
  87:/usr/include/c++/11/ext/alloc_traits.h ****       }
  88:/usr/include/c++/11/ext/alloc_traits.h **** 
  89:/usr/include/c++/11/ext/alloc_traits.h ****     // overload destroy for non-standard pointer types
  90:/usr/include/c++/11/ext/alloc_traits.h ****     template<typename _Ptr>
  91:/usr/include/c++/11/ext/alloc_traits.h ****       static _GLIBCXX14_CONSTEXPR
  92:/usr/include/c++/11/ext/alloc_traits.h ****       std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
  93:/usr/include/c++/11/ext/alloc_traits.h ****       destroy(_Alloc& __a, _Ptr __p)
  94:/usr/include/c++/11/ext/alloc_traits.h ****       noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
  95:/usr/include/c++/11/ext/alloc_traits.h ****       { _Base_type::destroy(__a, std::__to_address(__p)); }
  96:/usr/include/c++/11/ext/alloc_traits.h **** 
  97:/usr/include/c++/11/ext/alloc_traits.h ****     static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
  98:/usr/include/c++/11/ext/alloc_traits.h ****     { return _Base_type::select_on_container_copy_construction(__a); }
  99:/usr/include/c++/11/ext/alloc_traits.h **** 
 100:/usr/include/c++/11/ext/alloc_traits.h ****     static _GLIBCXX14_CONSTEXPR void _S_on_swap(_Alloc& __a, _Alloc& __b)
 101:/usr/include/c++/11/ext/alloc_traits.h ****     { std::__alloc_on_swap(__a, __b); }
 102:/usr/include/c++/11/ext/alloc_traits.h **** 
 103:/usr/include/c++/11/ext/alloc_traits.h ****     static constexpr bool _S_propagate_on_copy_assign()
 104:/usr/include/c++/11/ext/alloc_traits.h ****     { return _Base_type::propagate_on_container_copy_assignment::value; }
 105:/usr/include/c++/11/ext/alloc_traits.h **** 
 106:/usr/include/c++/11/ext/alloc_traits.h ****     static constexpr bool _S_propagate_on_move_assign()
 107:/usr/include/c++/11/ext/alloc_traits.h ****     { return _Base_type::propagate_on_container_move_assignment::value; }
 108:/usr/include/c++/11/ext/alloc_traits.h **** 
 109:/usr/include/c++/11/ext/alloc_traits.h ****     static constexpr bool _S_propagate_on_swap()
 110:/usr/include/c++/11/ext/alloc_traits.h ****     { return _Base_type::propagate_on_container_swap::value; }
 111:/usr/include/c++/11/ext/alloc_traits.h **** 
 112:/usr/include/c++/11/ext/alloc_traits.h ****     static constexpr bool _S_always_equal()
 113:/usr/include/c++/11/ext/alloc_traits.h ****     { return _Base_type::is_always_equal::value; }
 114:/usr/include/c++/11/ext/alloc_traits.h **** 
 115:/usr/include/c++/11/ext/alloc_traits.h ****     static constexpr bool _S_nothrow_move()
 116:/usr/include/c++/11/ext/alloc_traits.h ****     { return _S_propagate_on_move_assign() || _S_always_equal(); }
 117:/usr/include/c++/11/ext/alloc_traits.h **** 
 118:/usr/include/c++/11/ext/alloc_traits.h ****     template<typename _Tp>
 119:/usr/include/c++/11/ext/alloc_traits.h ****       struct rebind
 120:/usr/include/c++/11/ext/alloc_traits.h ****       { typedef typename _Base_type::template rebind_alloc<_Tp> other; };
 121:/usr/include/c++/11/ext/alloc_traits.h **** #else // ! C++11
 122:/usr/include/c++/11/ext/alloc_traits.h **** 
 123:/usr/include/c++/11/ext/alloc_traits.h ****     typedef typename _Alloc::pointer                pointer;
 124:/usr/include/c++/11/ext/alloc_traits.h ****     typedef typename _Alloc::const_pointer          const_pointer;
 125:/usr/include/c++/11/ext/alloc_traits.h ****     typedef typename _Alloc::value_type             value_type;
 126:/usr/include/c++/11/ext/alloc_traits.h ****     typedef typename _Alloc::reference              reference;
 127:/usr/include/c++/11/ext/alloc_traits.h ****     typedef typename _Alloc::const_reference        const_reference;
 128:/usr/include/c++/11/ext/alloc_traits.h ****     typedef typename _Alloc::size_type              size_type;
 129:/usr/include/c++/11/ext/alloc_traits.h ****     typedef typename _Alloc::difference_type        difference_type;
 130:/usr/include/c++/11/ext/alloc_traits.h **** 
 131:/usr/include/c++/11/ext/alloc_traits.h ****     _GLIBCXX_NODISCARD static pointer
 132:/usr/include/c++/11/ext/alloc_traits.h ****     allocate(_Alloc& __a, size_type __n)
 133:/usr/include/c++/11/ext/alloc_traits.h ****     { return __a.allocate(__n); }
 134:/usr/include/c++/11/ext/alloc_traits.h **** 
 135:/usr/include/c++/11/ext/alloc_traits.h ****     template<typename _Hint>
 136:/usr/include/c++/11/ext/alloc_traits.h ****       _GLIBCXX_NODISCARD static pointer
 137:/usr/include/c++/11/ext/alloc_traits.h ****       allocate(_Alloc& __a, size_type __n, _Hint __hint)
 138:/usr/include/c++/11/ext/alloc_traits.h ****       { return __a.allocate(__n, __hint); }
 139:/usr/include/c++/11/ext/alloc_traits.h **** 
 140:/usr/include/c++/11/ext/alloc_traits.h ****     static void deallocate(_Alloc& __a, pointer __p, size_type __n)
 141:/usr/include/c++/11/ext/alloc_traits.h ****     { __a.deallocate(__p, __n); }
 142:/usr/include/c++/11/ext/alloc_traits.h **** 
 143:/usr/include/c++/11/ext/alloc_traits.h ****     template<typename _Tp>
 144:/usr/include/c++/11/ext/alloc_traits.h ****       static void construct(_Alloc& __a, pointer __p, const _Tp& __arg)
 145:/usr/include/c++/11/ext/alloc_traits.h ****       { __a.construct(__p, __arg); }
 146:/usr/include/c++/11/ext/alloc_traits.h **** 
 147:/usr/include/c++/11/ext/alloc_traits.h ****     static void destroy(_Alloc& __a, pointer __p)
 148:/usr/include/c++/11/ext/alloc_traits.h ****     { __a.destroy(__p); }
 149:/usr/include/c++/11/ext/alloc_traits.h **** 
 150:/usr/include/c++/11/ext/alloc_traits.h ****     static size_type max_size(const _Alloc& __a)
 7520              		.loc 14 150 22
 7521              		.cfi_startproc
 7522 0000 F30F1EFA 		endbr64
 7523 0004 55       		pushq	%rbp
 7524              		.cfi_def_cfa_offset 16
 7525              		.cfi_offset 6, -16
 7526 0005 4889E5   		movq	%rsp, %rbp
 7527              		.cfi_def_cfa_register 6
 7528 0008 4883EC10 		subq	$16, %rsp
 7529 000c 48897DF8 		movq	%rdi, -8(%rbp)
 151:/usr/include/c++/11/ext/alloc_traits.h ****     { return __a.max_size(); }
 7530              		.loc 14 151 26
 7531 0010 488B45F8 		movq	-8(%rbp), %rax
 7532 0014 4889C7   		movq	%rax, %rdi
 7533 0017 E8000000 		call	_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv
 7533      00
 7534              		.loc 14 151 30
 7535 001c C9       		leave
 7536              		.cfi_def_cfa 7, 8
 7537 001d C3       		ret
 7538              		.cfi_endproc
 7539              	.LFE1637:
 7541              		.section	.text._ZSt3minImERKT_S2_S2_,"axG",@progbits,_ZSt3minImERKT_S2_S2_,comdat
 7542              		.weak	_ZSt3minImERKT_S2_S2_
 7544              	_ZSt3minImERKT_S2_S2_:
 7545              	.LFB1638:
 230:/usr/include/c++/11/bits/stl_algobase.h ****     {
 7546              		.loc 2 230 5
 7547              		.cfi_startproc
 7548 0000 F30F1EFA 		endbr64
 7549 0004 55       		pushq	%rbp
 7550              		.cfi_def_cfa_offset 16
 7551              		.cfi_offset 6, -16
 7552 0005 4889E5   		movq	%rsp, %rbp
 7553              		.cfi_def_cfa_register 6
 7554 0008 48897DF8 		movq	%rdi, -8(%rbp)
 7555 000c 488975F0 		movq	%rsi, -16(%rbp)
 235:/usr/include/c++/11/bits/stl_algobase.h **** 	return __b;
 7556              		.loc 2 235 15
 7557 0010 488B45F0 		movq	-16(%rbp), %rax
 7558 0014 488B10   		movq	(%rax), %rdx
 7559 0017 488B45F8 		movq	-8(%rbp), %rax
 7560 001b 488B00   		movq	(%rax), %rax
 235:/usr/include/c++/11/bits/stl_algobase.h **** 	return __b;
 7561              		.loc 2 235 7
 7562 001e 4839C2   		cmpq	%rax, %rdx
 7563 0021 7306     		jnb	.L371
 236:/usr/include/c++/11/bits/stl_algobase.h ****       return __a;
 7564              		.loc 2 236 9
 7565 0023 488B45F0 		movq	-16(%rbp), %rax
 7566 0027 EB04     		jmp	.L372
 7567              	.L371:
 237:/usr/include/c++/11/bits/stl_algobase.h ****     }
 7568              		.loc 2 237 14
 7569 0029 488B45F8 		movq	-8(%rbp), %rax
 7570              	.L372:
 238:/usr/include/c++/11/bits/stl_algobase.h **** 
 7571              		.loc 2 238 5
 7572 002d 5D       		popq	%rbp
 7573              		.cfi_def_cfa 7, 8
 7574 002e C3       		ret
 7575              		.cfi_endproc
 7576              	.LFE1638:
 7578              		.section	.text._ZN9__gnu_cxx13new_allocatorIfEC2ERKS1_,"axG",@progbits,_ZN9__gnu_cxx13new_allocato
 7579              		.align 2
 7580              		.weak	_ZN9__gnu_cxx13new_allocatorIfEC2ERKS1_
 7582              	_ZN9__gnu_cxx13new_allocatorIfEC2ERKS1_:
 7583              	.LFB1640:
  82:/usr/include/c++/11/ext/new_allocator.h **** 
 7584              		.loc 10 82 7
 7585              		.cfi_startproc
 7586 0000 F30F1EFA 		endbr64
 7587 0004 55       		pushq	%rbp
 7588              		.cfi_def_cfa_offset 16
 7589              		.cfi_offset 6, -16
 7590 0005 4889E5   		movq	%rsp, %rbp
 7591              		.cfi_def_cfa_register 6
 7592 0008 48897DF8 		movq	%rdi, -8(%rbp)
 7593 000c 488975F0 		movq	%rsi, -16(%rbp)
  82:/usr/include/c++/11/ext/new_allocator.h **** 
 7594              		.loc 10 82 67
 7595 0010 90       		nop
 7596 0011 5D       		popq	%rbp
 7597              		.cfi_def_cfa 7, 8
 7598 0012 C3       		ret
 7599              		.cfi_endproc
 7600              	.LFE1640:
 7602              		.weak	_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_
 7603              		.set	_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_,_ZN9__gnu_cxx13new_allocatorIfEC2ERKS1_
 7604              		.section	.text._ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC2Ev,"axG",@progbits,_ZNSt12_Vector_b
 7605              		.align 2
 7606              		.weak	_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC2Ev
 7608              	_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC2Ev:
 7609              	.LFB1643:
  97:/usr/include/c++/11/bits/stl_vector.h **** 	: _M_start(), _M_finish(), _M_end_of_storage()
 7610              		.loc 8 97 2
 7611              		.cfi_startproc
 7612 0000 F30F1EFA 		endbr64
 7613 0004 55       		pushq	%rbp
 7614              		.cfi_def_cfa_offset 16
 7615              		.cfi_offset 6, -16
 7616 0005 4889E5   		movq	%rsp, %rbp
 7617              		.cfi_def_cfa_register 6
 7618 0008 48897DF8 		movq	%rdi, -8(%rbp)
 7619              	.LBB114:
  98:/usr/include/c++/11/bits/stl_vector.h **** 	{ }
 7620              		.loc 8 98 4
 7621 000c 488B45F8 		movq	-8(%rbp), %rax
 7622 0010 48C70000 		movq	$0, (%rax)
 7622      000000
  98:/usr/include/c++/11/bits/stl_vector.h **** 	{ }
 7623              		.loc 8 98 16
 7624 0017 488B45F8 		movq	-8(%rbp), %rax
 7625 001b 48C74008 		movq	$0, 8(%rax)
 7625      00000000 
  98:/usr/include/c++/11/bits/stl_vector.h **** 	{ }
 7626              		.loc 8 98 29
 7627 0023 488B45F8 		movq	-8(%rbp), %rax
 7628 0027 48C74010 		movq	$0, 16(%rax)
 7628      00000000 
 7629              	.LBE114:
  99:/usr/include/c++/11/bits/stl_vector.h **** 
 7630              		.loc 8 99 4
 7631 002f 90       		nop
 7632 0030 5D       		popq	%rbp
 7633              		.cfi_def_cfa 7, 8
 7634 0031 C3       		ret
 7635              		.cfi_endproc
 7636              	.LFE1643:
 7638              		.weak	_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev
 7639              		.set	_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev,_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_
 7640              		.section	.text._ZNSt12_Vector_baseIfSaIfEE11_M_allocateEm,"axG",@progbits,_ZNSt12_Vector_baseIfSaI
 7641              		.align 2
 7642              		.weak	_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEm
 7644              	_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEm:
 7645              	.LFB1645:
 343:/usr/include/c++/11/bits/stl_vector.h ****       {
 7646              		.loc 8 343 7
 7647              		.cfi_startproc
 7648 0000 F30F1EFA 		endbr64
 7649 0004 55       		pushq	%rbp
 7650              		.cfi_def_cfa_offset 16
 7651              		.cfi_offset 6, -16
 7652 0005 4889E5   		movq	%rsp, %rbp
 7653              		.cfi_def_cfa_register 6
 7654 0008 4883EC10 		subq	$16, %rsp
 7655 000c 48897DF8 		movq	%rdi, -8(%rbp)
 7656 0010 488975F0 		movq	%rsi, -16(%rbp)
 346:/usr/include/c++/11/bits/stl_vector.h ****       }
 7657              		.loc 8 346 18
 7658 0014 48837DF0 		cmpq	$0, -16(%rbp)
 7658      00
 7659 0019 7415     		je	.L376
 346:/usr/include/c++/11/bits/stl_vector.h ****       }
 7660              		.loc 8 346 34 discriminator 1
 7661 001b 488B45F8 		movq	-8(%rbp), %rax
 346:/usr/include/c++/11/bits/stl_vector.h ****       }
 7662              		.loc 8 346 33 discriminator 1
 7663 001f 488B55F0 		movq	-16(%rbp), %rdx
 7664 0023 4889D6   		movq	%rdx, %rsi
 7665 0026 4889C7   		movq	%rax, %rdi
 7666 0029 E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaIfEfE8allocateERS1_m
 7666      00
 346:/usr/include/c++/11/bits/stl_vector.h ****       }
 7667              		.loc 8 346 58 discriminator 1
 7668 002e EB05     		jmp	.L378
 7669              	.L376:
 346:/usr/include/c++/11/bits/stl_vector.h ****       }
 7670              		.loc 8 346 18 discriminator 2
 7671 0030 B8000000 		movl	$0, %eax
 7671      00
 7672              	.L378:
 347:/usr/include/c++/11/bits/stl_vector.h **** 
 7673              		.loc 8 347 7 discriminator 5
 7674 0035 C9       		leave
 7675              		.cfi_def_cfa 7, 8
 7676 0036 C3       		ret
 7677              		.cfi_endproc
 7678              	.LFE1645:
 7680              		.section	.text._ZN9__gnu_cxx14__alloc_traitsISaIfEfE10deallocateERS1_Pfm,"axG",@progbits,_ZN9__gnu
 7681              		.weak	_ZN9__gnu_cxx14__alloc_traitsISaIfEfE10deallocateERS1_Pfm
 7683              	_ZN9__gnu_cxx14__alloc_traitsISaIfEfE10deallocateERS1_Pfm:
 7684              	.LFB1646:
 140:/usr/include/c++/11/ext/alloc_traits.h ****     { __a.deallocate(__p, __n); }
 7685              		.loc 14 140 17
 7686              		.cfi_startproc
 7687 0000 F30F1EFA 		endbr64
 7688 0004 55       		pushq	%rbp
 7689              		.cfi_def_cfa_offset 16
 7690              		.cfi_offset 6, -16
 7691 0005 4889E5   		movq	%rsp, %rbp
 7692              		.cfi_def_cfa_register 6
 7693 0008 4883EC20 		subq	$32, %rsp
 7694 000c 48897DF8 		movq	%rdi, -8(%rbp)
 7695 0010 488975F0 		movq	%rsi, -16(%rbp)
 7696 0014 488955E8 		movq	%rdx, -24(%rbp)
 141:/usr/include/c++/11/ext/alloc_traits.h **** 
 7697              		.loc 14 141 21
 7698 0018 488B55E8 		movq	-24(%rbp), %rdx
 7699 001c 488B4DF0 		movq	-16(%rbp), %rcx
 7700 0020 488B45F8 		movq	-8(%rbp), %rax
 7701 0024 4889CE   		movq	%rcx, %rsi
 7702 0027 4889C7   		movq	%rax, %rdi
 7703 002a E8000000 		call	_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfm
 7703      00
 141:/usr/include/c++/11/ext/alloc_traits.h **** 
 7704              		.loc 14 141 33
 7705 002f 90       		nop
 7706 0030 C9       		leave
 7707              		.cfi_def_cfa 7, 8
 7708 0031 C3       		ret
 7709              		.cfi_endproc
 7710              	.LFE1646:
 7712              		.section	.text._ZSt20uninitialized_fill_nIPfmfET_S1_T0_RKT1_,"axG",@progbits,_ZSt20uninitialized_f
 7713              		.weak	_ZSt20uninitialized_fill_nIPfmfET_S1_T0_RKT1_
 7715              	_ZSt20uninitialized_fill_nIPfmfET_S1_T0_RKT1_:
 7716              	.LFB1647:
 273:/usr/include/c++/11/bits/stl_uninitialized.h ****     {
 7717              		.loc 12 273 5
 7718              		.cfi_startproc
 7719 0000 F30F1EFA 		endbr64
 7720 0004 55       		pushq	%rbp
 7721              		.cfi_def_cfa_offset 16
 7722              		.cfi_offset 6, -16
 7723 0005 4889E5   		movq	%rsp, %rbp
 7724              		.cfi_def_cfa_register 6
 7725 0008 4883EC30 		subq	$48, %rsp
 7726 000c 48897DE8 		movq	%rdi, -24(%rbp)
 7727 0010 488975E0 		movq	%rsi, -32(%rbp)
 7728 0014 488955D8 		movq	%rdx, -40(%rbp)
 284:/usr/include/c++/11/bits/stl_uninitialized.h **** #else
 7729              		.loc 12 284 18
 7730 0018 C645FF01 		movb	$1, -1(%rbp)
 297:/usr/include/c++/11/bits/stl_uninitialized.h ****     }
 7731              		.loc 12 297 17
 7732 001c 488B55D8 		movq	-40(%rbp), %rdx
 7733 0020 488B4DE0 		movq	-32(%rbp), %rcx
 7734 0024 488B45E8 		movq	-24(%rbp), %rax
 7735 0028 4889CE   		movq	%rcx, %rsi
 7736 002b 4889C7   		movq	%rax, %rdi
 7737 002e E8000000 		call	_ZNSt22__uninitialized_fill_nILb1EE15__uninit_fill_nIPfmfEET_S3_T0_RKT1_
 7737      00
 298:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 7738              		.loc 12 298 5
 7739 0033 C9       		leave
 7740              		.cfi_def_cfa 7, 8
 7741 0034 C3       		ret
 7742              		.cfi_endproc
 7743              	.LFE1647:
 7745              		.section	.text._ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_,"axG",@progbits,_ZNSt12_Destroy_auxI
 7746              		.weak	_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_
 7748              	_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_:
 7749              	.LFB1648:
 172:/usr/include/c++/11/bits/stl_construct.h ****     };
 7750              		.loc 13 172 9
 7751              		.cfi_startproc
 7752 0000 F30F1EFA 		endbr64
 7753 0004 55       		pushq	%rbp
 7754              		.cfi_def_cfa_offset 16
 7755              		.cfi_offset 6, -16
 7756 0005 4889E5   		movq	%rsp, %rbp
 7757              		.cfi_def_cfa_register 6
 7758 0008 48897DF8 		movq	%rdi, -8(%rbp)
 7759 000c 488975F0 		movq	%rsi, -16(%rbp)
 172:/usr/include/c++/11/bits/stl_construct.h ****     };
 7760              		.loc 13 172 57
 7761 0010 90       		nop
 7762 0011 5D       		popq	%rbp
 7763              		.cfi_def_cfa 7, 8
 7764 0012 C3       		ret
 7765              		.cfi_endproc
 7766              	.LFE1648:
 7768              		.section	.text._ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv,"axG",@progbits,_ZNK9__gnu_cxx13new_all
 7769              		.align 2
 7770              		.weak	_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv
 7772              	_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv:
 7773              	.LFB1650:
  90:/usr/include/c++/11/ext/new_allocator.h **** 
  91:/usr/include/c++/11/ext/new_allocator.h ****       pointer
  92:/usr/include/c++/11/ext/new_allocator.h ****       address(reference __x) const _GLIBCXX_NOEXCEPT
  93:/usr/include/c++/11/ext/new_allocator.h ****       { return std::__addressof(__x); }
  94:/usr/include/c++/11/ext/new_allocator.h **** 
  95:/usr/include/c++/11/ext/new_allocator.h ****       const_pointer
  96:/usr/include/c++/11/ext/new_allocator.h ****       address(const_reference __x) const _GLIBCXX_NOEXCEPT
  97:/usr/include/c++/11/ext/new_allocator.h ****       { return std::__addressof(__x); }
  98:/usr/include/c++/11/ext/new_allocator.h **** #endif
  99:/usr/include/c++/11/ext/new_allocator.h **** 
 100:/usr/include/c++/11/ext/new_allocator.h ****       // NB: __n is permitted to be 0.  The C++ standard says nothing
 101:/usr/include/c++/11/ext/new_allocator.h ****       // about what the return value is when __n == 0.
 102:/usr/include/c++/11/ext/new_allocator.h ****       _GLIBCXX_NODISCARD _Tp*
 103:/usr/include/c++/11/ext/new_allocator.h ****       allocate(size_type __n, const void* = static_cast<const void*>(0))
 104:/usr/include/c++/11/ext/new_allocator.h ****       {
 105:/usr/include/c++/11/ext/new_allocator.h **** #if __cplusplus >= 201103L
 106:/usr/include/c++/11/ext/new_allocator.h **** 	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
 107:/usr/include/c++/11/ext/new_allocator.h **** 	 // 3308. std::allocator<void>().allocate(n)
 108:/usr/include/c++/11/ext/new_allocator.h **** 	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
 109:/usr/include/c++/11/ext/new_allocator.h **** #endif
 110:/usr/include/c++/11/ext/new_allocator.h **** 
 111:/usr/include/c++/11/ext/new_allocator.h **** 	if (__builtin_expect(__n > this->_M_max_size(), false))
 112:/usr/include/c++/11/ext/new_allocator.h **** 	  {
 113:/usr/include/c++/11/ext/new_allocator.h **** 	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
 114:/usr/include/c++/11/ext/new_allocator.h **** 	    // 3190. allocator::allocate sometimes returns too little storage
 115:/usr/include/c++/11/ext/new_allocator.h **** 	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 116:/usr/include/c++/11/ext/new_allocator.h **** 	      std::__throw_bad_array_new_length();
 117:/usr/include/c++/11/ext/new_allocator.h **** 	    std::__throw_bad_alloc();
 118:/usr/include/c++/11/ext/new_allocator.h **** 	  }
 119:/usr/include/c++/11/ext/new_allocator.h **** 
 120:/usr/include/c++/11/ext/new_allocator.h **** #if __cpp_aligned_new
 121:/usr/include/c++/11/ext/new_allocator.h **** 	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
 122:/usr/include/c++/11/ext/new_allocator.h **** 	  {
 123:/usr/include/c++/11/ext/new_allocator.h **** 	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
 124:/usr/include/c++/11/ext/new_allocator.h **** 	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
 125:/usr/include/c++/11/ext/new_allocator.h **** 	  }
 126:/usr/include/c++/11/ext/new_allocator.h **** #endif
 127:/usr/include/c++/11/ext/new_allocator.h **** 	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 128:/usr/include/c++/11/ext/new_allocator.h ****       }
 129:/usr/include/c++/11/ext/new_allocator.h **** 
 130:/usr/include/c++/11/ext/new_allocator.h ****       // __p is not permitted to be a null pointer.
 131:/usr/include/c++/11/ext/new_allocator.h ****       void
 132:/usr/include/c++/11/ext/new_allocator.h ****       deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 133:/usr/include/c++/11/ext/new_allocator.h ****       {
 134:/usr/include/c++/11/ext/new_allocator.h **** #if __cpp_aligned_new
 135:/usr/include/c++/11/ext/new_allocator.h **** 	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
 136:/usr/include/c++/11/ext/new_allocator.h **** 	  {
 137:/usr/include/c++/11/ext/new_allocator.h **** 	    ::operator delete(__p,
 138:/usr/include/c++/11/ext/new_allocator.h **** # if __cpp_sized_deallocation
 139:/usr/include/c++/11/ext/new_allocator.h **** 			      __t * sizeof(_Tp),
 140:/usr/include/c++/11/ext/new_allocator.h **** # endif
 141:/usr/include/c++/11/ext/new_allocator.h **** 			      std::align_val_t(alignof(_Tp)));
 142:/usr/include/c++/11/ext/new_allocator.h **** 	    return;
 143:/usr/include/c++/11/ext/new_allocator.h **** 	  }
 144:/usr/include/c++/11/ext/new_allocator.h **** #endif
 145:/usr/include/c++/11/ext/new_allocator.h **** 	::operator delete(__p
 146:/usr/include/c++/11/ext/new_allocator.h **** #if __cpp_sized_deallocation
 147:/usr/include/c++/11/ext/new_allocator.h **** 			  , __t * sizeof(_Tp)
 148:/usr/include/c++/11/ext/new_allocator.h **** #endif
 149:/usr/include/c++/11/ext/new_allocator.h **** 			 );
 150:/usr/include/c++/11/ext/new_allocator.h ****       }
 151:/usr/include/c++/11/ext/new_allocator.h **** 
 152:/usr/include/c++/11/ext/new_allocator.h **** #if __cplusplus <= 201703L
 153:/usr/include/c++/11/ext/new_allocator.h ****       size_type
 154:/usr/include/c++/11/ext/new_allocator.h ****       max_size() const _GLIBCXX_USE_NOEXCEPT
 7774              		.loc 10 154 7
 7775              		.cfi_startproc
 7776 0000 F30F1EFA 		endbr64
 7777 0004 55       		pushq	%rbp
 7778              		.cfi_def_cfa_offset 16
 7779              		.cfi_offset 6, -16
 7780 0005 4889E5   		movq	%rsp, %rbp
 7781              		.cfi_def_cfa_register 6
 7782 0008 4883EC10 		subq	$16, %rsp
 7783 000c 48897DF8 		movq	%rdi, -8(%rbp)
 155:/usr/include/c++/11/ext/new_allocator.h ****       { return _M_max_size(); }
 7784              		.loc 10 155 27
 7785 0010 488B45F8 		movq	-8(%rbp), %rax
 7786 0014 4889C7   		movq	%rax, %rdi
 7787 0017 E8000000 		call	_ZNK9__gnu_cxx13new_allocatorIfE11_M_max_sizeEv
 7787      00
 7788              		.loc 10 155 31
 7789 001c C9       		leave
 7790              		.cfi_def_cfa 7, 8
 7791 001d C3       		ret
 7792              		.cfi_endproc
 7793              	.LFE1650:
 7795              		.section	.text._ZN9__gnu_cxx14__alloc_traitsISaIfEfE8allocateERS1_m,"axG",@progbits,_ZN9__gnu_cxx1
 7796              		.weak	_ZN9__gnu_cxx14__alloc_traitsISaIfEfE8allocateERS1_m
 7798              	_ZN9__gnu_cxx14__alloc_traitsISaIfEfE8allocateERS1_m:
 7799              	.LFB1651:
 132:/usr/include/c++/11/ext/alloc_traits.h ****     { return __a.allocate(__n); }
 7800              		.loc 14 132 5
 7801              		.cfi_startproc
 7802 0000 F30F1EFA 		endbr64
 7803 0004 55       		pushq	%rbp
 7804              		.cfi_def_cfa_offset 16
 7805              		.cfi_offset 6, -16
 7806 0005 4889E5   		movq	%rsp, %rbp
 7807              		.cfi_def_cfa_register 6
 7808 0008 4883EC10 		subq	$16, %rsp
 7809 000c 48897DF8 		movq	%rdi, -8(%rbp)
 7810 0010 488975F0 		movq	%rsi, -16(%rbp)
 133:/usr/include/c++/11/ext/alloc_traits.h **** 
 7811              		.loc 14 133 26
 7812 0014 488B4DF0 		movq	-16(%rbp), %rcx
 7813 0018 488B45F8 		movq	-8(%rbp), %rax
 7814 001c BA000000 		movl	$0, %edx
 7814      00
 7815 0021 4889CE   		movq	%rcx, %rsi
 7816 0024 4889C7   		movq	%rax, %rdi
 7817 0027 E8000000 		call	_ZN9__gnu_cxx13new_allocatorIfE8allocateEmPKv
 7817      00
 133:/usr/include/c++/11/ext/alloc_traits.h **** 
 7818              		.loc 14 133 33
 7819 002c C9       		leave
 7820              		.cfi_def_cfa 7, 8
 7821 002d C3       		ret
 7822              		.cfi_endproc
 7823              	.LFE1651:
 7825              		.section	.text._ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfm,"axG",@progbits,_ZN9__gnu_cxx13new_
 7826              		.align 2
 7827              		.weak	_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfm
 7829              	_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfm:
 7830              	.LFB1652:
 132:/usr/include/c++/11/ext/new_allocator.h ****       {
 7831              		.loc 10 132 7
 7832              		.cfi_startproc
 7833 0000 F30F1EFA 		endbr64
 7834 0004 55       		pushq	%rbp
 7835              		.cfi_def_cfa_offset 16
 7836              		.cfi_offset 6, -16
 7837 0005 4889E5   		movq	%rsp, %rbp
 7838              		.cfi_def_cfa_register 6
 7839 0008 4883EC20 		subq	$32, %rsp
 7840 000c 48897DF8 		movq	%rdi, -8(%rbp)
 7841 0010 488975F0 		movq	%rsi, -16(%rbp)
 7842 0014 488955E8 		movq	%rdx, -24(%rbp)
 145:/usr/include/c++/11/ext/new_allocator.h **** #if __cpp_sized_deallocation
 7843              		.loc 10 145 19
 7844 0018 488B45F0 		movq	-16(%rbp), %rax
 7845 001c 4889C7   		movq	%rax, %rdi
 7846 001f E8000000 		call	_ZdlPv@PLT
 7846      00
 150:/usr/include/c++/11/ext/new_allocator.h **** 
 7847              		.loc 10 150 7
 7848 0024 90       		nop
 7849 0025 C9       		leave
 7850              		.cfi_def_cfa 7, 8
 7851 0026 C3       		ret
 7852              		.cfi_endproc
 7853              	.LFE1652:
 7855              		.section	.text._ZNSt22__uninitialized_fill_nILb1EE15__uninit_fill_nIPfmfEET_S3_T0_RKT1_,"axG",@pro
 7856              		.weak	_ZNSt22__uninitialized_fill_nILb1EE15__uninit_fill_nIPfmfEET_S3_T0_RKT1_
 7858              	_ZNSt22__uninitialized_fill_nILb1EE15__uninit_fill_nIPfmfEET_S3_T0_RKT1_:
 7859              	.LFB1653:
 253:/usr/include/c++/11/bits/stl_uninitialized.h **** 			const _Tp& __x)
 7860              		.loc 12 253 9
 7861              		.cfi_startproc
 7862 0000 F30F1EFA 		endbr64
 7863 0004 55       		pushq	%rbp
 7864              		.cfi_def_cfa_offset 16
 7865              		.cfi_offset 6, -16
 7866 0005 4889E5   		movq	%rsp, %rbp
 7867              		.cfi_def_cfa_register 6
 7868 0008 4883EC20 		subq	$32, %rsp
 7869 000c 48897DF8 		movq	%rdi, -8(%rbp)
 7870 0010 488975F0 		movq	%rsi, -16(%rbp)
 7871 0014 488955E8 		movq	%rdx, -24(%rbp)
 255:/usr/include/c++/11/bits/stl_uninitialized.h ****     };
 7872              		.loc 12 255 29
 7873 0018 488B55E8 		movq	-24(%rbp), %rdx
 7874 001c 488B4DF0 		movq	-16(%rbp), %rcx
 7875 0020 488B45F8 		movq	-8(%rbp), %rax
 7876 0024 4889CE   		movq	%rcx, %rsi
 7877 0027 4889C7   		movq	%rax, %rdi
 7878 002a E8000000 		call	_ZSt6fill_nIPfmfET_S1_T0_RKT1_
 7878      00
 255:/usr/include/c++/11/bits/stl_uninitialized.h ****     };
 7879              		.loc 12 255 50
 7880 002f C9       		leave
 7881              		.cfi_def_cfa 7, 8
 7882 0030 C3       		ret
 7883              		.cfi_endproc
 7884              	.LFE1653:
 7886              		.section	.text._ZNK9__gnu_cxx13new_allocatorIfE11_M_max_sizeEv,"axG",@progbits,_ZNK9__gnu_cxx13new
 7887              		.align 2
 7888              		.weak	_ZNK9__gnu_cxx13new_allocatorIfE11_M_max_sizeEv
 7890              	_ZNK9__gnu_cxx13new_allocatorIfE11_M_max_sizeEv:
 7891              	.LFB1654:
 156:/usr/include/c++/11/ext/new_allocator.h **** 
 157:/usr/include/c++/11/ext/new_allocator.h **** #if __cplusplus >= 201103L
 158:/usr/include/c++/11/ext/new_allocator.h ****       template<typename _Up, typename... _Args>
 159:/usr/include/c++/11/ext/new_allocator.h **** 	void
 160:/usr/include/c++/11/ext/new_allocator.h **** 	construct(_Up* __p, _Args&&... __args)
 161:/usr/include/c++/11/ext/new_allocator.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 162:/usr/include/c++/11/ext/new_allocator.h **** 	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 163:/usr/include/c++/11/ext/new_allocator.h **** 
 164:/usr/include/c++/11/ext/new_allocator.h ****       template<typename _Up>
 165:/usr/include/c++/11/ext/new_allocator.h **** 	void
 166:/usr/include/c++/11/ext/new_allocator.h **** 	destroy(_Up* __p)
 167:/usr/include/c++/11/ext/new_allocator.h **** 	noexcept(std::is_nothrow_destructible<_Up>::value)
 168:/usr/include/c++/11/ext/new_allocator.h **** 	{ __p->~_Up(); }
 169:/usr/include/c++/11/ext/new_allocator.h **** #else
 170:/usr/include/c++/11/ext/new_allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 171:/usr/include/c++/11/ext/new_allocator.h ****       // 402. wrong new expression in [some_] allocator::construct
 172:/usr/include/c++/11/ext/new_allocator.h ****       void
 173:/usr/include/c++/11/ext/new_allocator.h ****       construct(pointer __p, const _Tp& __val)
 174:/usr/include/c++/11/ext/new_allocator.h ****       { ::new((void *)__p) _Tp(__val); }
 175:/usr/include/c++/11/ext/new_allocator.h **** 
 176:/usr/include/c++/11/ext/new_allocator.h ****       void
 177:/usr/include/c++/11/ext/new_allocator.h ****       destroy(pointer __p) { __p->~_Tp(); }
 178:/usr/include/c++/11/ext/new_allocator.h **** #endif
 179:/usr/include/c++/11/ext/new_allocator.h **** #endif // ! C++20
 180:/usr/include/c++/11/ext/new_allocator.h **** 
 181:/usr/include/c++/11/ext/new_allocator.h ****       template<typename _Up>
 182:/usr/include/c++/11/ext/new_allocator.h **** 	friend _GLIBCXX20_CONSTEXPR bool
 183:/usr/include/c++/11/ext/new_allocator.h **** 	operator==(const new_allocator&, const new_allocator<_Up>&)
 184:/usr/include/c++/11/ext/new_allocator.h **** 	_GLIBCXX_NOTHROW
 185:/usr/include/c++/11/ext/new_allocator.h **** 	{ return true; }
 186:/usr/include/c++/11/ext/new_allocator.h **** 
 187:/usr/include/c++/11/ext/new_allocator.h **** #if __cpp_impl_three_way_comparison < 201907L
 188:/usr/include/c++/11/ext/new_allocator.h ****       template<typename _Up>
 189:/usr/include/c++/11/ext/new_allocator.h **** 	friend _GLIBCXX20_CONSTEXPR bool
 190:/usr/include/c++/11/ext/new_allocator.h **** 	operator!=(const new_allocator&, const new_allocator<_Up>&)
 191:/usr/include/c++/11/ext/new_allocator.h **** 	_GLIBCXX_NOTHROW
 192:/usr/include/c++/11/ext/new_allocator.h **** 	{ return false; }
 193:/usr/include/c++/11/ext/new_allocator.h **** #endif
 194:/usr/include/c++/11/ext/new_allocator.h **** 
 195:/usr/include/c++/11/ext/new_allocator.h ****     private:
 196:/usr/include/c++/11/ext/new_allocator.h ****       _GLIBCXX_CONSTEXPR size_type
 197:/usr/include/c++/11/ext/new_allocator.h ****       _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 7892              		.loc 10 197 7
 7893              		.cfi_startproc
 7894 0000 F30F1EFA 		endbr64
 7895 0004 55       		pushq	%rbp
 7896              		.cfi_def_cfa_offset 16
 7897              		.cfi_offset 6, -16
 7898 0005 4889E5   		movq	%rsp, %rbp
 7899              		.cfi_def_cfa_register 6
 7900 0008 48897DF8 		movq	%rdi, -8(%rbp)
 198:/usr/include/c++/11/ext/new_allocator.h ****       {
 199:/usr/include/c++/11/ext/new_allocator.h **** #if __PTRDIFF_MAX__ < __SIZE_MAX__
 200:/usr/include/c++/11/ext/new_allocator.h **** 	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 7901              		.loc 10 200 50
 7902 000c 48B8FFFF 		movabsq	$2305843009213693951, %rax
 7902      FFFFFFFF 
 7902      FF1F
 201:/usr/include/c++/11/ext/new_allocator.h **** #else
 202:/usr/include/c++/11/ext/new_allocator.h **** 	return std::size_t(-1) / sizeof(_Tp);
 203:/usr/include/c++/11/ext/new_allocator.h **** #endif
 204:/usr/include/c++/11/ext/new_allocator.h ****       }
 7903              		.loc 10 204 7
 7904 0016 5D       		popq	%rbp
 7905              		.cfi_def_cfa 7, 8
 7906 0017 C3       		ret
 7907              		.cfi_endproc
 7908              	.LFE1654:
 7910              		.section	.text._ZN9__gnu_cxx13new_allocatorIfE8allocateEmPKv,"axG",@progbits,_ZN9__gnu_cxx13new_al
 7911              		.align 2
 7912              		.weak	_ZN9__gnu_cxx13new_allocatorIfE8allocateEmPKv
 7914              	_ZN9__gnu_cxx13new_allocatorIfE8allocateEmPKv:
 7915              	.LFB1655:
 103:/usr/include/c++/11/ext/new_allocator.h ****       {
 7916              		.loc 10 103 7
 7917              		.cfi_startproc
 7918 0000 F30F1EFA 		endbr64
 7919 0004 55       		pushq	%rbp
 7920              		.cfi_def_cfa_offset 16
 7921              		.cfi_offset 6, -16
 7922 0005 4889E5   		movq	%rsp, %rbp
 7923              		.cfi_def_cfa_register 6
 7924 0008 4883EC20 		subq	$32, %rsp
 7925 000c 48897DF8 		movq	%rdi, -8(%rbp)
 7926 0010 488975F0 		movq	%rsi, -16(%rbp)
 7927 0014 488955E8 		movq	%rdx, -24(%rbp)
 111:/usr/include/c++/11/ext/new_allocator.h **** 	  {
 7928              		.loc 10 111 46
 7929 0018 488B45F8 		movq	-8(%rbp), %rax
 7930 001c 4889C7   		movq	%rax, %rdi
 7931 001f E8000000 		call	_ZNK9__gnu_cxx13new_allocatorIfE11_M_max_sizeEv
 7931      00
 111:/usr/include/c++/11/ext/new_allocator.h **** 	  {
 7932              		.loc 10 111 27
 7933 0024 483945F0 		cmpq	%rax, -16(%rbp)
 7934 0028 0F97C0   		seta	%al
 111:/usr/include/c++/11/ext/new_allocator.h **** 	  {
 7935              		.loc 10 111 22
 7936 002b 0FB6C0   		movzbl	%al, %eax
 7937 002e 4885C0   		testq	%rax, %rax
 7938 0031 0F95C0   		setne	%al
 111:/usr/include/c++/11/ext/new_allocator.h **** 	  {
 7939              		.loc 10 111 2
 7940 0034 84C0     		testb	%al, %al
 7941 0036 741A     		je	.L393
 115:/usr/include/c++/11/ext/new_allocator.h **** 	      std::__throw_bad_array_new_length();
 7942              		.loc 10 115 6
 7943 0038 48B8FFFF 		movabsq	$4611686018427387903, %rax
 7943      FFFFFFFF 
 7943      FF3F
 7944 0042 483945F0 		cmpq	%rax, -16(%rbp)
 7945 0046 7605     		jbe	.L394
 116:/usr/include/c++/11/ext/new_allocator.h **** 	    std::__throw_bad_alloc();
 7946              		.loc 10 116 41
 7947 0048 E8000000 		call	_ZSt28__throw_bad_array_new_lengthv@PLT
 7947      00
 7948              	.L394:
 117:/usr/include/c++/11/ext/new_allocator.h **** 	  }
 7949              		.loc 10 117 28
 7950 004d E8000000 		call	_ZSt17__throw_bad_allocv@PLT
 7950      00
 7951              	.L393:
 127:/usr/include/c++/11/ext/new_allocator.h ****       }
 7952              		.loc 10 127 41
 7953 0052 488B45F0 		movq	-16(%rbp), %rax
 7954 0056 48C1E002 		salq	$2, %rax
 7955 005a 4889C7   		movq	%rax, %rdi
 7956 005d E8000000 		call	_Znwm@PLT
 7956      00
 128:/usr/include/c++/11/ext/new_allocator.h **** 
 7957              		.loc 10 128 7
 7958 0062 C9       		leave
 7959              		.cfi_def_cfa 7, 8
 7960 0063 C3       		ret
 7961              		.cfi_endproc
 7962              	.LFE1655:
 7964              		.section	.text._ZSt6fill_nIPfmfET_S1_T0_RKT1_,"axG",@progbits,_ZSt6fill_nIPfmfET_S1_T0_RKT1_,comda
 7965              		.weak	_ZSt6fill_nIPfmfET_S1_T0_RKT1_
 7967              	_ZSt6fill_nIPfmfET_S1_T0_RKT1_:
 7968              	.LFB1656:
1011:/usr/include/c++/11/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long long
1012:/usr/include/c++/11/bits/stl_algobase.h ****   __size_to_integer(long long __n) { return __n; }
1013:/usr/include/c++/11/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned long long
1014:/usr/include/c++/11/bits/stl_algobase.h ****   __size_to_integer(unsigned long long __n) { return __n; }
1015:/usr/include/c++/11/bits/stl_algobase.h **** 
1016:/usr/include/c++/11/bits/stl_algobase.h **** #if defined(__GLIBCXX_TYPE_INT_N_0)
1017:/usr/include/c++/11/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_0
1018:/usr/include/c++/11/bits/stl_algobase.h ****   __size_to_integer(__GLIBCXX_TYPE_INT_N_0 __n) { return __n; }
1019:/usr/include/c++/11/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_0
1020:/usr/include/c++/11/bits/stl_algobase.h ****   __size_to_integer(unsigned __GLIBCXX_TYPE_INT_N_0 __n) { return __n; }
1021:/usr/include/c++/11/bits/stl_algobase.h **** #endif
1022:/usr/include/c++/11/bits/stl_algobase.h **** #if defined(__GLIBCXX_TYPE_INT_N_1)
1023:/usr/include/c++/11/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_1
1024:/usr/include/c++/11/bits/stl_algobase.h ****   __size_to_integer(__GLIBCXX_TYPE_INT_N_1 __n) { return __n; }
1025:/usr/include/c++/11/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_1
1026:/usr/include/c++/11/bits/stl_algobase.h ****   __size_to_integer(unsigned __GLIBCXX_TYPE_INT_N_1 __n) { return __n; }
1027:/usr/include/c++/11/bits/stl_algobase.h **** #endif
1028:/usr/include/c++/11/bits/stl_algobase.h **** #if defined(__GLIBCXX_TYPE_INT_N_2)
1029:/usr/include/c++/11/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_2
1030:/usr/include/c++/11/bits/stl_algobase.h ****   __size_to_integer(__GLIBCXX_TYPE_INT_N_2 __n) { return __n; }
1031:/usr/include/c++/11/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_2
1032:/usr/include/c++/11/bits/stl_algobase.h ****   __size_to_integer(unsigned __GLIBCXX_TYPE_INT_N_2 __n) { return __n; }
1033:/usr/include/c++/11/bits/stl_algobase.h **** #endif
1034:/usr/include/c++/11/bits/stl_algobase.h **** #if defined(__GLIBCXX_TYPE_INT_N_3)
1035:/usr/include/c++/11/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_3
1036:/usr/include/c++/11/bits/stl_algobase.h ****   __size_to_integer(__GLIBCXX_TYPE_INT_N_3 __n) { return __n; }
1037:/usr/include/c++/11/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_3
1038:/usr/include/c++/11/bits/stl_algobase.h ****   __size_to_integer(unsigned __GLIBCXX_TYPE_INT_N_3 __n) { return __n; }
1039:/usr/include/c++/11/bits/stl_algobase.h **** #endif
1040:/usr/include/c++/11/bits/stl_algobase.h **** 
1041:/usr/include/c++/11/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long long
1042:/usr/include/c++/11/bits/stl_algobase.h ****   __size_to_integer(float __n) { return (long long)__n; }
1043:/usr/include/c++/11/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long long
1044:/usr/include/c++/11/bits/stl_algobase.h ****   __size_to_integer(double __n) { return (long long)__n; }
1045:/usr/include/c++/11/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long long
1046:/usr/include/c++/11/bits/stl_algobase.h ****   __size_to_integer(long double __n) { return (long long)__n; }
1047:/usr/include/c++/11/bits/stl_algobase.h **** #if !defined(__STRICT_ANSI__) && defined(_GLIBCXX_USE_FLOAT128) && !defined(__CUDACC__)
1048:/usr/include/c++/11/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long long
1049:/usr/include/c++/11/bits/stl_algobase.h ****   __size_to_integer(__float128 __n) { return (long long)__n; }
1050:/usr/include/c++/11/bits/stl_algobase.h **** #endif
1051:/usr/include/c++/11/bits/stl_algobase.h **** 
1052:/usr/include/c++/11/bits/stl_algobase.h ****   template<typename _OutputIterator, typename _Size, typename _Tp>
1053:/usr/include/c++/11/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
1054:/usr/include/c++/11/bits/stl_algobase.h ****     inline typename
1055:/usr/include/c++/11/bits/stl_algobase.h ****     __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, _OutputIterator>::__type
1056:/usr/include/c++/11/bits/stl_algobase.h ****     __fill_n_a1(_OutputIterator __first, _Size __n, const _Tp& __value)
1057:/usr/include/c++/11/bits/stl_algobase.h ****     {
1058:/usr/include/c++/11/bits/stl_algobase.h ****       for (; __n > 0; --__n, (void) ++__first)
1059:/usr/include/c++/11/bits/stl_algobase.h **** 	*__first = __value;
1060:/usr/include/c++/11/bits/stl_algobase.h ****       return __first;
1061:/usr/include/c++/11/bits/stl_algobase.h ****     }
1062:/usr/include/c++/11/bits/stl_algobase.h **** 
1063:/usr/include/c++/11/bits/stl_algobase.h ****   template<typename _OutputIterator, typename _Size, typename _Tp>
1064:/usr/include/c++/11/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
1065:/usr/include/c++/11/bits/stl_algobase.h ****     inline typename
1066:/usr/include/c++/11/bits/stl_algobase.h ****     __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, _OutputIterator>::__type
1067:/usr/include/c++/11/bits/stl_algobase.h ****     __fill_n_a1(_OutputIterator __first, _Size __n, const _Tp& __value)
1068:/usr/include/c++/11/bits/stl_algobase.h ****     {
1069:/usr/include/c++/11/bits/stl_algobase.h ****       const _Tp __tmp = __value;
1070:/usr/include/c++/11/bits/stl_algobase.h ****       for (; __n > 0; --__n, (void) ++__first)
1071:/usr/include/c++/11/bits/stl_algobase.h **** 	*__first = __tmp;
1072:/usr/include/c++/11/bits/stl_algobase.h ****       return __first;
1073:/usr/include/c++/11/bits/stl_algobase.h ****     }
1074:/usr/include/c++/11/bits/stl_algobase.h **** 
1075:/usr/include/c++/11/bits/stl_algobase.h ****   template<typename _Ite, typename _Seq, typename _Cat, typename _Size,
1076:/usr/include/c++/11/bits/stl_algobase.h **** 	   typename _Tp>
1077:/usr/include/c++/11/bits/stl_algobase.h ****     ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>
1078:/usr/include/c++/11/bits/stl_algobase.h ****     __fill_n_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>& __first,
1079:/usr/include/c++/11/bits/stl_algobase.h **** 	       _Size __n, const _Tp& __value,
1080:/usr/include/c++/11/bits/stl_algobase.h **** 	       std::input_iterator_tag);
1081:/usr/include/c++/11/bits/stl_algobase.h **** 
1082:/usr/include/c++/11/bits/stl_algobase.h ****   template<typename _OutputIterator, typename _Size, typename _Tp>
1083:/usr/include/c++/11/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
1084:/usr/include/c++/11/bits/stl_algobase.h ****     inline _OutputIterator
1085:/usr/include/c++/11/bits/stl_algobase.h ****     __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
1086:/usr/include/c++/11/bits/stl_algobase.h **** 	       std::output_iterator_tag)
1087:/usr/include/c++/11/bits/stl_algobase.h ****     {
1088:/usr/include/c++/11/bits/stl_algobase.h **** #if __cplusplus >= 201103L
1089:/usr/include/c++/11/bits/stl_algobase.h ****       static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
1090:/usr/include/c++/11/bits/stl_algobase.h **** #endif
1091:/usr/include/c++/11/bits/stl_algobase.h ****       return __fill_n_a1(__first, __n, __value);
1092:/usr/include/c++/11/bits/stl_algobase.h ****     }
1093:/usr/include/c++/11/bits/stl_algobase.h **** 
1094:/usr/include/c++/11/bits/stl_algobase.h ****   template<typename _OutputIterator, typename _Size, typename _Tp>
1095:/usr/include/c++/11/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
1096:/usr/include/c++/11/bits/stl_algobase.h ****     inline _OutputIterator
1097:/usr/include/c++/11/bits/stl_algobase.h ****     __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
1098:/usr/include/c++/11/bits/stl_algobase.h **** 	       std::input_iterator_tag)
1099:/usr/include/c++/11/bits/stl_algobase.h ****     {
1100:/usr/include/c++/11/bits/stl_algobase.h **** #if __cplusplus >= 201103L
1101:/usr/include/c++/11/bits/stl_algobase.h ****       static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
1102:/usr/include/c++/11/bits/stl_algobase.h **** #endif
1103:/usr/include/c++/11/bits/stl_algobase.h ****       return __fill_n_a1(__first, __n, __value);
1104:/usr/include/c++/11/bits/stl_algobase.h ****     }
1105:/usr/include/c++/11/bits/stl_algobase.h **** 
1106:/usr/include/c++/11/bits/stl_algobase.h ****   template<typename _OutputIterator, typename _Size, typename _Tp>
1107:/usr/include/c++/11/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
1108:/usr/include/c++/11/bits/stl_algobase.h ****     inline _OutputIterator
1109:/usr/include/c++/11/bits/stl_algobase.h ****     __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
1110:/usr/include/c++/11/bits/stl_algobase.h **** 	       std::random_access_iterator_tag)
1111:/usr/include/c++/11/bits/stl_algobase.h ****     {
1112:/usr/include/c++/11/bits/stl_algobase.h **** #if __cplusplus >= 201103L
1113:/usr/include/c++/11/bits/stl_algobase.h ****       static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
1114:/usr/include/c++/11/bits/stl_algobase.h **** #endif
1115:/usr/include/c++/11/bits/stl_algobase.h ****       if (__n <= 0)
1116:/usr/include/c++/11/bits/stl_algobase.h **** 	return __first;
1117:/usr/include/c++/11/bits/stl_algobase.h **** 
1118:/usr/include/c++/11/bits/stl_algobase.h ****       __glibcxx_requires_can_increment(__first, __n);
1119:/usr/include/c++/11/bits/stl_algobase.h **** 
1120:/usr/include/c++/11/bits/stl_algobase.h ****       std::__fill_a(__first, __first + __n, __value);
1121:/usr/include/c++/11/bits/stl_algobase.h ****       return __first + __n;
1122:/usr/include/c++/11/bits/stl_algobase.h ****     }
1123:/usr/include/c++/11/bits/stl_algobase.h **** 
1124:/usr/include/c++/11/bits/stl_algobase.h ****   /**
1125:/usr/include/c++/11/bits/stl_algobase.h ****    *  @brief Fills the range [first,first+n) with copies of value.
1126:/usr/include/c++/11/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
1127:/usr/include/c++/11/bits/stl_algobase.h ****    *  @param  __first  An output iterator.
1128:/usr/include/c++/11/bits/stl_algobase.h ****    *  @param  __n      The count of copies to perform.
1129:/usr/include/c++/11/bits/stl_algobase.h ****    *  @param  __value  A reference-to-const of arbitrary type.
1130:/usr/include/c++/11/bits/stl_algobase.h ****    *  @return   The iterator at first+n.
1131:/usr/include/c++/11/bits/stl_algobase.h ****    *
1132:/usr/include/c++/11/bits/stl_algobase.h ****    *  This function fills a range with copies of the same value.  For char
1133:/usr/include/c++/11/bits/stl_algobase.h ****    *  types filling contiguous areas of memory, this becomes an inline call
1134:/usr/include/c++/11/bits/stl_algobase.h ****    *  to @c memset or @c wmemset.
1135:/usr/include/c++/11/bits/stl_algobase.h ****    *
1136:/usr/include/c++/11/bits/stl_algobase.h ****    *  If @p __n is negative, the function does nothing.
1137:/usr/include/c++/11/bits/stl_algobase.h ****   */
1138:/usr/include/c++/11/bits/stl_algobase.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
1139:/usr/include/c++/11/bits/stl_algobase.h ****   // DR 865. More algorithms that throw away information
1140:/usr/include/c++/11/bits/stl_algobase.h ****   // DR 426. search_n(), fill_n(), and generate_n() with negative n
1141:/usr/include/c++/11/bits/stl_algobase.h ****   template<typename _OI, typename _Size, typename _Tp>
1142:/usr/include/c++/11/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
1143:/usr/include/c++/11/bits/stl_algobase.h ****     inline _OI
1144:/usr/include/c++/11/bits/stl_algobase.h ****     fill_n(_OI __first, _Size __n, const _Tp& __value)
 7969              		.loc 2 1144 5
 7970              		.cfi_startproc
 7971 0000 F30F1EFA 		endbr64
 7972 0004 55       		pushq	%rbp
 7973              		.cfi_def_cfa_offset 16
 7974              		.cfi_offset 6, -16
 7975 0005 4889E5   		movq	%rsp, %rbp
 7976              		.cfi_def_cfa_register 6
 7977 0008 4883EC20 		subq	$32, %rsp
 7978 000c 48897DF8 		movq	%rdi, -8(%rbp)
 7979 0010 488975F0 		movq	%rsi, -16(%rbp)
 7980 0014 488955E8 		movq	%rdx, -24(%rbp)
1145:/usr/include/c++/11/bits/stl_algobase.h ****     {
1146:/usr/include/c++/11/bits/stl_algobase.h ****       // concept requirements
1147:/usr/include/c++/11/bits/stl_algobase.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OI, _Tp>)
1148:/usr/include/c++/11/bits/stl_algobase.h **** 
1149:/usr/include/c++/11/bits/stl_algobase.h ****       return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
1150:/usr/include/c++/11/bits/stl_algobase.h **** 			       std::__iterator_category(__first));
 7981              		.loc 2 1150 35
 7982 0018 488D45F8 		leaq	-8(%rbp), %rax
 7983 001c 4889C7   		movq	%rax, %rdi
 7984 001f E8000000 		call	_ZSt19__iterator_categoryIPfENSt15iterator_traitsIT_E17iterator_categoryERKS2_
 7984      00
1149:/usr/include/c++/11/bits/stl_algobase.h **** 			       std::__iterator_category(__first));
 7985              		.loc 2 1149 29
 7986 0024 488B45F0 		movq	-16(%rbp), %rax
 7987 0028 4889C7   		movq	%rax, %rdi
 7988 002b E8000000 		call	_ZSt17__size_to_integerm
 7988      00
 7989 0030 4889C1   		movq	%rax, %rcx
 7990 0033 488B45F8 		movq	-8(%rbp), %rax
 7991 0037 488B55E8 		movq	-24(%rbp), %rdx
 7992 003b 4889CE   		movq	%rcx, %rsi
 7993 003e 4889C7   		movq	%rax, %rdi
 7994 0041 E8000000 		call	_ZSt10__fill_n_aIPfmfET_S1_T0_RKT1_St26random_access_iterator_tag
 7994      00
1151:/usr/include/c++/11/bits/stl_algobase.h ****     }
 7995              		.loc 2 1151 5
 7996 0046 C9       		leave
 7997              		.cfi_def_cfa 7, 8
 7998 0047 C3       		ret
 7999              		.cfi_endproc
 8000              	.LFE1656:
 8002              		.section	.text._ZSt19__iterator_categoryIPfENSt15iterator_traitsIT_E17iterator_categoryERKS2_,"axG
 8003              		.weak	_ZSt19__iterator_categoryIPfENSt15iterator_traitsIT_E17iterator_categoryERKS2_
 8005              	_ZSt19__iterator_categoryIPfENSt15iterator_traitsIT_E17iterator_categoryERKS2_:
 8006              	.LFB1657:
 8007              		.file 15 "/usr/include/c++/11/bits/stl_iterator_base_types.h"
   1:/usr/include/c++/11/bits/stl_iterator_base_types.h **** // Types used in iterator implementation -*- C++ -*-
   2:/usr/include/c++/11/bits/stl_iterator_base_types.h **** 
   3:/usr/include/c++/11/bits/stl_iterator_base_types.h **** // Copyright (C) 2001-2021 Free Software Foundation, Inc.
   4:/usr/include/c++/11/bits/stl_iterator_base_types.h **** //
   5:/usr/include/c++/11/bits/stl_iterator_base_types.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/11/bits/stl_iterator_base_types.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/11/bits/stl_iterator_base_types.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/11/bits/stl_iterator_base_types.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/11/bits/stl_iterator_base_types.h **** // any later version.
  10:/usr/include/c++/11/bits/stl_iterator_base_types.h **** 
  11:/usr/include/c++/11/bits/stl_iterator_base_types.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/11/bits/stl_iterator_base_types.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/11/bits/stl_iterator_base_types.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/11/bits/stl_iterator_base_types.h **** // GNU General Public License for more details.
  15:/usr/include/c++/11/bits/stl_iterator_base_types.h **** 
  16:/usr/include/c++/11/bits/stl_iterator_base_types.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/11/bits/stl_iterator_base_types.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/11/bits/stl_iterator_base_types.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/11/bits/stl_iterator_base_types.h **** 
  20:/usr/include/c++/11/bits/stl_iterator_base_types.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/11/bits/stl_iterator_base_types.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/11/bits/stl_iterator_base_types.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/11/bits/stl_iterator_base_types.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/11/bits/stl_iterator_base_types.h **** 
  25:/usr/include/c++/11/bits/stl_iterator_base_types.h **** /*
  26:/usr/include/c++/11/bits/stl_iterator_base_types.h ****  *
  27:/usr/include/c++/11/bits/stl_iterator_base_types.h ****  * Copyright (c) 1994
  28:/usr/include/c++/11/bits/stl_iterator_base_types.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/11/bits/stl_iterator_base_types.h ****  *
  30:/usr/include/c++/11/bits/stl_iterator_base_types.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/11/bits/stl_iterator_base_types.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/11/bits/stl_iterator_base_types.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/11/bits/stl_iterator_base_types.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/11/bits/stl_iterator_base_types.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/11/bits/stl_iterator_base_types.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/11/bits/stl_iterator_base_types.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/11/bits/stl_iterator_base_types.h ****  *
  38:/usr/include/c++/11/bits/stl_iterator_base_types.h ****  *
  39:/usr/include/c++/11/bits/stl_iterator_base_types.h ****  * Copyright (c) 1996-1998
  40:/usr/include/c++/11/bits/stl_iterator_base_types.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/11/bits/stl_iterator_base_types.h ****  *
  42:/usr/include/c++/11/bits/stl_iterator_base_types.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/11/bits/stl_iterator_base_types.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/11/bits/stl_iterator_base_types.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/11/bits/stl_iterator_base_types.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/11/bits/stl_iterator_base_types.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/11/bits/stl_iterator_base_types.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/11/bits/stl_iterator_base_types.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/11/bits/stl_iterator_base_types.h ****  */
  50:/usr/include/c++/11/bits/stl_iterator_base_types.h **** 
  51:/usr/include/c++/11/bits/stl_iterator_base_types.h **** /** @file bits/stl_iterator_base_types.h
  52:/usr/include/c++/11/bits/stl_iterator_base_types.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/11/bits/stl_iterator_base_types.h ****  *  Do not attempt to use it directly. @headername{iterator}
  54:/usr/include/c++/11/bits/stl_iterator_base_types.h ****  *
  55:/usr/include/c++/11/bits/stl_iterator_base_types.h ****  *  This file contains all of the general iterator-related utility types,
  56:/usr/include/c++/11/bits/stl_iterator_base_types.h ****  *  such as iterator_traits and struct iterator.
  57:/usr/include/c++/11/bits/stl_iterator_base_types.h ****  */
  58:/usr/include/c++/11/bits/stl_iterator_base_types.h **** 
  59:/usr/include/c++/11/bits/stl_iterator_base_types.h **** #ifndef _STL_ITERATOR_BASE_TYPES_H
  60:/usr/include/c++/11/bits/stl_iterator_base_types.h **** #define _STL_ITERATOR_BASE_TYPES_H 1
  61:/usr/include/c++/11/bits/stl_iterator_base_types.h **** 
  62:/usr/include/c++/11/bits/stl_iterator_base_types.h **** #pragma GCC system_header
  63:/usr/include/c++/11/bits/stl_iterator_base_types.h **** 
  64:/usr/include/c++/11/bits/stl_iterator_base_types.h **** #include <bits/c++config.h>
  65:/usr/include/c++/11/bits/stl_iterator_base_types.h **** 
  66:/usr/include/c++/11/bits/stl_iterator_base_types.h **** #if __cplusplus >= 201103L
  67:/usr/include/c++/11/bits/stl_iterator_base_types.h **** # include <type_traits>  // For __void_t, is_convertible
  68:/usr/include/c++/11/bits/stl_iterator_base_types.h **** #endif
  69:/usr/include/c++/11/bits/stl_iterator_base_types.h **** 
  70:/usr/include/c++/11/bits/stl_iterator_base_types.h **** #if __cplusplus > 201703L && __cpp_concepts >= 201907L
  71:/usr/include/c++/11/bits/stl_iterator_base_types.h **** # include <bits/iterator_concepts.h>
  72:/usr/include/c++/11/bits/stl_iterator_base_types.h **** #endif
  73:/usr/include/c++/11/bits/stl_iterator_base_types.h **** 
  74:/usr/include/c++/11/bits/stl_iterator_base_types.h **** namespace std _GLIBCXX_VISIBILITY(default)
  75:/usr/include/c++/11/bits/stl_iterator_base_types.h **** {
  76:/usr/include/c++/11/bits/stl_iterator_base_types.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  77:/usr/include/c++/11/bits/stl_iterator_base_types.h **** 
  78:/usr/include/c++/11/bits/stl_iterator_base_types.h ****   /**
  79:/usr/include/c++/11/bits/stl_iterator_base_types.h ****    *  @defgroup iterators Iterators
  80:/usr/include/c++/11/bits/stl_iterator_base_types.h ****    *  Abstractions for uniform iterating through various underlying types.
  81:/usr/include/c++/11/bits/stl_iterator_base_types.h ****   */
  82:/usr/include/c++/11/bits/stl_iterator_base_types.h ****   ///@{
  83:/usr/include/c++/11/bits/stl_iterator_base_types.h **** 
  84:/usr/include/c++/11/bits/stl_iterator_base_types.h ****   /**
  85:/usr/include/c++/11/bits/stl_iterator_base_types.h ****    *  @defgroup iterator_tags Iterator Tags
  86:/usr/include/c++/11/bits/stl_iterator_base_types.h ****    *  These are empty types, used to distinguish different iterators.  The
  87:/usr/include/c++/11/bits/stl_iterator_base_types.h ****    *  distinction is not made by what they contain, but simply by what they
  88:/usr/include/c++/11/bits/stl_iterator_base_types.h ****    *  are.  Different underlying algorithms can then be used based on the
  89:/usr/include/c++/11/bits/stl_iterator_base_types.h ****    *  different operations supported by different iterator types.
  90:/usr/include/c++/11/bits/stl_iterator_base_types.h ****   */
  91:/usr/include/c++/11/bits/stl_iterator_base_types.h ****   ///@{
  92:/usr/include/c++/11/bits/stl_iterator_base_types.h ****   ///  Marking input iterators.
  93:/usr/include/c++/11/bits/stl_iterator_base_types.h ****   struct input_iterator_tag { };
  94:/usr/include/c++/11/bits/stl_iterator_base_types.h **** 
  95:/usr/include/c++/11/bits/stl_iterator_base_types.h ****   ///  Marking output iterators.
  96:/usr/include/c++/11/bits/stl_iterator_base_types.h ****   struct output_iterator_tag { };
  97:/usr/include/c++/11/bits/stl_iterator_base_types.h **** 
  98:/usr/include/c++/11/bits/stl_iterator_base_types.h ****   /// Forward iterators support a superset of input iterator operations.
  99:/usr/include/c++/11/bits/stl_iterator_base_types.h ****   struct forward_iterator_tag : public input_iterator_tag { };
 100:/usr/include/c++/11/bits/stl_iterator_base_types.h **** 
 101:/usr/include/c++/11/bits/stl_iterator_base_types.h ****   /// Bidirectional iterators support a superset of forward iterator
 102:/usr/include/c++/11/bits/stl_iterator_base_types.h ****   /// operations.
 103:/usr/include/c++/11/bits/stl_iterator_base_types.h ****   struct bidirectional_iterator_tag : public forward_iterator_tag { };
 104:/usr/include/c++/11/bits/stl_iterator_base_types.h **** 
 105:/usr/include/c++/11/bits/stl_iterator_base_types.h ****   /// Random-access iterators support a superset of bidirectional
 106:/usr/include/c++/11/bits/stl_iterator_base_types.h ****   /// iterator operations.
 107:/usr/include/c++/11/bits/stl_iterator_base_types.h ****   struct random_access_iterator_tag : public bidirectional_iterator_tag { };
 108:/usr/include/c++/11/bits/stl_iterator_base_types.h **** 
 109:/usr/include/c++/11/bits/stl_iterator_base_types.h **** #if __cplusplus > 201703L
 110:/usr/include/c++/11/bits/stl_iterator_base_types.h ****   /// Contiguous iterators point to objects stored contiguously in memory.
 111:/usr/include/c++/11/bits/stl_iterator_base_types.h ****   struct contiguous_iterator_tag : public random_access_iterator_tag { };
 112:/usr/include/c++/11/bits/stl_iterator_base_types.h **** #endif
 113:/usr/include/c++/11/bits/stl_iterator_base_types.h ****   ///@}
 114:/usr/include/c++/11/bits/stl_iterator_base_types.h **** 
 115:/usr/include/c++/11/bits/stl_iterator_base_types.h ****   /**
 116:/usr/include/c++/11/bits/stl_iterator_base_types.h ****    *  @brief  Common %iterator class.
 117:/usr/include/c++/11/bits/stl_iterator_base_types.h ****    *
 118:/usr/include/c++/11/bits/stl_iterator_base_types.h ****    *  This class does nothing but define nested typedefs.  %Iterator classes
 119:/usr/include/c++/11/bits/stl_iterator_base_types.h ****    *  can inherit from this class to save some work.  The typedefs are then
 120:/usr/include/c++/11/bits/stl_iterator_base_types.h ****    *  used in specializations and overloading.
 121:/usr/include/c++/11/bits/stl_iterator_base_types.h ****    *
 122:/usr/include/c++/11/bits/stl_iterator_base_types.h ****    *  In particular, there are no default implementations of requirements
 123:/usr/include/c++/11/bits/stl_iterator_base_types.h ****    *  such as @c operator++ and the like.  (How could there be?)
 124:/usr/include/c++/11/bits/stl_iterator_base_types.h ****   */
 125:/usr/include/c++/11/bits/stl_iterator_base_types.h ****   template<typename _Category, typename _Tp, typename _Distance = ptrdiff_t,
 126:/usr/include/c++/11/bits/stl_iterator_base_types.h ****            typename _Pointer = _Tp*, typename _Reference = _Tp&>
 127:/usr/include/c++/11/bits/stl_iterator_base_types.h ****     struct iterator
 128:/usr/include/c++/11/bits/stl_iterator_base_types.h ****     {
 129:/usr/include/c++/11/bits/stl_iterator_base_types.h ****       /// One of the @link iterator_tags tag types@endlink.
 130:/usr/include/c++/11/bits/stl_iterator_base_types.h ****       typedef _Category  iterator_category;
 131:/usr/include/c++/11/bits/stl_iterator_base_types.h ****       /// The type "pointed to" by the iterator.
 132:/usr/include/c++/11/bits/stl_iterator_base_types.h ****       typedef _Tp        value_type;
 133:/usr/include/c++/11/bits/stl_iterator_base_types.h ****       /// Distance between iterators is represented as this type.
 134:/usr/include/c++/11/bits/stl_iterator_base_types.h ****       typedef _Distance  difference_type;
 135:/usr/include/c++/11/bits/stl_iterator_base_types.h ****       /// This type represents a pointer-to-value_type.
 136:/usr/include/c++/11/bits/stl_iterator_base_types.h ****       typedef _Pointer   pointer;
 137:/usr/include/c++/11/bits/stl_iterator_base_types.h ****       /// This type represents a reference-to-value_type.
 138:/usr/include/c++/11/bits/stl_iterator_base_types.h ****       typedef _Reference reference;
 139:/usr/include/c++/11/bits/stl_iterator_base_types.h ****     };
 140:/usr/include/c++/11/bits/stl_iterator_base_types.h **** 
 141:/usr/include/c++/11/bits/stl_iterator_base_types.h ****   /**
 142:/usr/include/c++/11/bits/stl_iterator_base_types.h ****    *  @brief  Traits class for iterators.
 143:/usr/include/c++/11/bits/stl_iterator_base_types.h ****    *
 144:/usr/include/c++/11/bits/stl_iterator_base_types.h ****    *  This class does nothing but define nested typedefs.  The general
 145:/usr/include/c++/11/bits/stl_iterator_base_types.h ****    *  version simply @a forwards the nested typedefs from the Iterator
 146:/usr/include/c++/11/bits/stl_iterator_base_types.h ****    *  argument.  Specialized versions for pointers and pointers-to-const
 147:/usr/include/c++/11/bits/stl_iterator_base_types.h ****    *  provide tighter, more correct semantics.
 148:/usr/include/c++/11/bits/stl_iterator_base_types.h ****   */
 149:/usr/include/c++/11/bits/stl_iterator_base_types.h ****   template<typename _Iterator>
 150:/usr/include/c++/11/bits/stl_iterator_base_types.h ****     struct iterator_traits;
 151:/usr/include/c++/11/bits/stl_iterator_base_types.h **** 
 152:/usr/include/c++/11/bits/stl_iterator_base_types.h **** #if __cplusplus >= 201103L
 153:/usr/include/c++/11/bits/stl_iterator_base_types.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 154:/usr/include/c++/11/bits/stl_iterator_base_types.h ****   // 2408. SFINAE-friendly common_type/iterator_traits is missing in C++14
 155:/usr/include/c++/11/bits/stl_iterator_base_types.h ****   template<typename _Iterator, typename = __void_t<>>
 156:/usr/include/c++/11/bits/stl_iterator_base_types.h ****     struct __iterator_traits { };
 157:/usr/include/c++/11/bits/stl_iterator_base_types.h **** 
 158:/usr/include/c++/11/bits/stl_iterator_base_types.h **** #if ! __cpp_lib_concepts
 159:/usr/include/c++/11/bits/stl_iterator_base_types.h **** 
 160:/usr/include/c++/11/bits/stl_iterator_base_types.h ****   template<typename _Iterator>
 161:/usr/include/c++/11/bits/stl_iterator_base_types.h ****     struct __iterator_traits<_Iterator,
 162:/usr/include/c++/11/bits/stl_iterator_base_types.h **** 			     __void_t<typename _Iterator::iterator_category,
 163:/usr/include/c++/11/bits/stl_iterator_base_types.h **** 				      typename _Iterator::value_type,
 164:/usr/include/c++/11/bits/stl_iterator_base_types.h **** 				      typename _Iterator::difference_type,
 165:/usr/include/c++/11/bits/stl_iterator_base_types.h **** 				      typename _Iterator::pointer,
 166:/usr/include/c++/11/bits/stl_iterator_base_types.h **** 				      typename _Iterator::reference>>
 167:/usr/include/c++/11/bits/stl_iterator_base_types.h ****     {
 168:/usr/include/c++/11/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::iterator_category iterator_category;
 169:/usr/include/c++/11/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::value_type        value_type;
 170:/usr/include/c++/11/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::difference_type   difference_type;
 171:/usr/include/c++/11/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::pointer           pointer;
 172:/usr/include/c++/11/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::reference         reference;
 173:/usr/include/c++/11/bits/stl_iterator_base_types.h ****     };
 174:/usr/include/c++/11/bits/stl_iterator_base_types.h **** #endif // ! concepts
 175:/usr/include/c++/11/bits/stl_iterator_base_types.h **** 
 176:/usr/include/c++/11/bits/stl_iterator_base_types.h ****   template<typename _Iterator>
 177:/usr/include/c++/11/bits/stl_iterator_base_types.h ****     struct iterator_traits
 178:/usr/include/c++/11/bits/stl_iterator_base_types.h ****     : public __iterator_traits<_Iterator> { };
 179:/usr/include/c++/11/bits/stl_iterator_base_types.h **** 
 180:/usr/include/c++/11/bits/stl_iterator_base_types.h **** #else // ! C++11
 181:/usr/include/c++/11/bits/stl_iterator_base_types.h ****   template<typename _Iterator>
 182:/usr/include/c++/11/bits/stl_iterator_base_types.h ****     struct iterator_traits
 183:/usr/include/c++/11/bits/stl_iterator_base_types.h ****     {
 184:/usr/include/c++/11/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::iterator_category iterator_category;
 185:/usr/include/c++/11/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::value_type        value_type;
 186:/usr/include/c++/11/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::difference_type   difference_type;
 187:/usr/include/c++/11/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::pointer           pointer;
 188:/usr/include/c++/11/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::reference         reference;
 189:/usr/include/c++/11/bits/stl_iterator_base_types.h ****     };
 190:/usr/include/c++/11/bits/stl_iterator_base_types.h **** #endif // C++11
 191:/usr/include/c++/11/bits/stl_iterator_base_types.h **** 
 192:/usr/include/c++/11/bits/stl_iterator_base_types.h **** #if __cplusplus > 201703L
 193:/usr/include/c++/11/bits/stl_iterator_base_types.h ****   /// Partial specialization for object pointer types.
 194:/usr/include/c++/11/bits/stl_iterator_base_types.h ****   template<typename _Tp>
 195:/usr/include/c++/11/bits/stl_iterator_base_types.h **** #if __cpp_concepts >= 201907L
 196:/usr/include/c++/11/bits/stl_iterator_base_types.h ****     requires is_object_v<_Tp>
 197:/usr/include/c++/11/bits/stl_iterator_base_types.h **** #endif
 198:/usr/include/c++/11/bits/stl_iterator_base_types.h ****     struct iterator_traits<_Tp*>
 199:/usr/include/c++/11/bits/stl_iterator_base_types.h ****     {
 200:/usr/include/c++/11/bits/stl_iterator_base_types.h ****       using iterator_concept  = contiguous_iterator_tag;
 201:/usr/include/c++/11/bits/stl_iterator_base_types.h ****       using iterator_category = random_access_iterator_tag;
 202:/usr/include/c++/11/bits/stl_iterator_base_types.h ****       using value_type	      = remove_cv_t<_Tp>;
 203:/usr/include/c++/11/bits/stl_iterator_base_types.h ****       using difference_type   = ptrdiff_t;
 204:/usr/include/c++/11/bits/stl_iterator_base_types.h ****       using pointer	      = _Tp*;
 205:/usr/include/c++/11/bits/stl_iterator_base_types.h ****       using reference	      = _Tp&;
 206:/usr/include/c++/11/bits/stl_iterator_base_types.h ****     };
 207:/usr/include/c++/11/bits/stl_iterator_base_types.h **** #else
 208:/usr/include/c++/11/bits/stl_iterator_base_types.h ****   /// Partial specialization for pointer types.
 209:/usr/include/c++/11/bits/stl_iterator_base_types.h ****   template<typename _Tp>
 210:/usr/include/c++/11/bits/stl_iterator_base_types.h ****     struct iterator_traits<_Tp*>
 211:/usr/include/c++/11/bits/stl_iterator_base_types.h ****     {
 212:/usr/include/c++/11/bits/stl_iterator_base_types.h ****       typedef random_access_iterator_tag iterator_category;
 213:/usr/include/c++/11/bits/stl_iterator_base_types.h ****       typedef _Tp                         value_type;
 214:/usr/include/c++/11/bits/stl_iterator_base_types.h ****       typedef ptrdiff_t                   difference_type;
 215:/usr/include/c++/11/bits/stl_iterator_base_types.h ****       typedef _Tp*                        pointer;
 216:/usr/include/c++/11/bits/stl_iterator_base_types.h ****       typedef _Tp&                        reference;
 217:/usr/include/c++/11/bits/stl_iterator_base_types.h ****     };
 218:/usr/include/c++/11/bits/stl_iterator_base_types.h **** 
 219:/usr/include/c++/11/bits/stl_iterator_base_types.h ****   /// Partial specialization for const pointer types.
 220:/usr/include/c++/11/bits/stl_iterator_base_types.h ****   template<typename _Tp>
 221:/usr/include/c++/11/bits/stl_iterator_base_types.h ****     struct iterator_traits<const _Tp*>
 222:/usr/include/c++/11/bits/stl_iterator_base_types.h ****     {
 223:/usr/include/c++/11/bits/stl_iterator_base_types.h ****       typedef random_access_iterator_tag iterator_category;
 224:/usr/include/c++/11/bits/stl_iterator_base_types.h ****       typedef _Tp                         value_type;
 225:/usr/include/c++/11/bits/stl_iterator_base_types.h ****       typedef ptrdiff_t                   difference_type;
 226:/usr/include/c++/11/bits/stl_iterator_base_types.h ****       typedef const _Tp*                  pointer;
 227:/usr/include/c++/11/bits/stl_iterator_base_types.h ****       typedef const _Tp&                  reference;
 228:/usr/include/c++/11/bits/stl_iterator_base_types.h ****     };
 229:/usr/include/c++/11/bits/stl_iterator_base_types.h **** #endif
 230:/usr/include/c++/11/bits/stl_iterator_base_types.h **** 
 231:/usr/include/c++/11/bits/stl_iterator_base_types.h ****   /**
 232:/usr/include/c++/11/bits/stl_iterator_base_types.h ****    *  This function is not a part of the C++ standard but is syntactic
 233:/usr/include/c++/11/bits/stl_iterator_base_types.h ****    *  sugar for internal library use only.
 234:/usr/include/c++/11/bits/stl_iterator_base_types.h ****   */
 235:/usr/include/c++/11/bits/stl_iterator_base_types.h ****   template<typename _Iter>
 236:/usr/include/c++/11/bits/stl_iterator_base_types.h ****     inline _GLIBCXX_CONSTEXPR
 237:/usr/include/c++/11/bits/stl_iterator_base_types.h ****     typename iterator_traits<_Iter>::iterator_category
 238:/usr/include/c++/11/bits/stl_iterator_base_types.h ****     __iterator_category(const _Iter&)
 8008              		.loc 15 238 5
 8009              		.cfi_startproc
 8010 0000 F30F1EFA 		endbr64
 8011 0004 55       		pushq	%rbp
 8012              		.cfi_def_cfa_offset 16
 8013              		.cfi_offset 6, -16
 8014 0005 4889E5   		movq	%rsp, %rbp
 8015              		.cfi_def_cfa_register 6
 8016 0008 48897DF8 		movq	%rdi, -8(%rbp)
 239:/usr/include/c++/11/bits/stl_iterator_base_types.h ****     { return typename iterator_traits<_Iter>::iterator_category(); }
 8017              		.loc 15 239 65
 8018 000c 90       		nop
 8019              		.loc 15 239 68
 8020 000d 5D       		popq	%rbp
 8021              		.cfi_def_cfa 7, 8
 8022 000e C3       		ret
 8023              		.cfi_endproc
 8024              	.LFE1657:
 8026              		.section	.text._ZSt10__fill_n_aIPfmfET_S1_T0_RKT1_St26random_access_iterator_tag,"axG",@progbits,_
 8027              		.weak	_ZSt10__fill_n_aIPfmfET_S1_T0_RKT1_St26random_access_iterator_tag
 8029              	_ZSt10__fill_n_aIPfmfET_S1_T0_RKT1_St26random_access_iterator_tag:
 8030              	.LFB1658:
1109:/usr/include/c++/11/bits/stl_algobase.h **** 	       std::random_access_iterator_tag)
 8031              		.loc 2 1109 5
 8032              		.cfi_startproc
 8033 0000 F30F1EFA 		endbr64
 8034 0004 55       		pushq	%rbp
 8035              		.cfi_def_cfa_offset 16
 8036              		.cfi_offset 6, -16
 8037 0005 4889E5   		movq	%rsp, %rbp
 8038              		.cfi_def_cfa_register 6
 8039 0008 4883EC20 		subq	$32, %rsp
 8040 000c 48897DF8 		movq	%rdi, -8(%rbp)
 8041 0010 488975F0 		movq	%rsi, -16(%rbp)
 8042 0014 488955E8 		movq	%rdx, -24(%rbp)
1115:/usr/include/c++/11/bits/stl_algobase.h **** 	return __first;
 8043              		.loc 2 1115 7
 8044 0018 48837DF0 		cmpq	$0, -16(%rbp)
 8044      00
 8045 001d 7506     		jne	.L401
1116:/usr/include/c++/11/bits/stl_algobase.h **** 
 8046              		.loc 2 1116 9
 8047 001f 488B45F8 		movq	-8(%rbp), %rax
 8048 0023 EB3A     		jmp	.L402
 8049              	.L401:
1120:/usr/include/c++/11/bits/stl_algobase.h ****       return __first + __n;
 8050              		.loc 2 1120 38
 8051 0025 488B45F0 		movq	-16(%rbp), %rax
 8052 0029 488D1485 		leaq	0(,%rax,4), %rdx
 8052      00000000 
1120:/usr/include/c++/11/bits/stl_algobase.h ****       return __first + __n;
 8053              		.loc 2 1120 20
 8054 0031 488B45F8 		movq	-8(%rbp), %rax
 8055 0035 488D0C02 		leaq	(%rdx,%rax), %rcx
 8056 0039 488B55E8 		movq	-24(%rbp), %rdx
 8057 003d 488B45F8 		movq	-8(%rbp), %rax
 8058 0041 4889CE   		movq	%rcx, %rsi
 8059 0044 4889C7   		movq	%rax, %rdi
 8060 0047 E8000000 		call	_ZSt8__fill_aIPffEvT_S1_RKT0_
 8060      00
1121:/usr/include/c++/11/bits/stl_algobase.h ****     }
 8061              		.loc 2 1121 22
 8062 004c 488B45F0 		movq	-16(%rbp), %rax
 8063 0050 488D1485 		leaq	0(,%rax,4), %rdx
 8063      00000000 
1121:/usr/include/c++/11/bits/stl_algobase.h ****     }
 8064              		.loc 2 1121 24
 8065 0058 488B45F8 		movq	-8(%rbp), %rax
 8066 005c 4801D0   		addq	%rdx, %rax
 8067              	.L402:
1122:/usr/include/c++/11/bits/stl_algobase.h **** 
 8068              		.loc 2 1122 5
 8069 005f C9       		leave
 8070              		.cfi_def_cfa 7, 8
 8071 0060 C3       		ret
 8072              		.cfi_endproc
 8073              	.LFE1658:
 8075              		.section	.text._ZSt8__fill_aIPffEvT_S1_RKT0_,"axG",@progbits,_ZSt8__fill_aIPffEvT_S1_RKT0_,comdat
 8076              		.weak	_ZSt8__fill_aIPffEvT_S1_RKT0_
 8078              	_ZSt8__fill_aIPffEvT_S1_RKT0_:
 8079              	.LFB1659:
 968:/usr/include/c++/11/bits/stl_algobase.h ****     { std::__fill_a1(__first, __last, __value); }
 8080              		.loc 2 968 5
 8081              		.cfi_startproc
 8082 0000 F30F1EFA 		endbr64
 8083 0004 55       		pushq	%rbp
 8084              		.cfi_def_cfa_offset 16
 8085              		.cfi_offset 6, -16
 8086 0005 4889E5   		movq	%rsp, %rbp
 8087              		.cfi_def_cfa_register 6
 8088 0008 4883EC20 		subq	$32, %rsp
 8089 000c 48897DF8 		movq	%rdi, -8(%rbp)
 8090 0010 488975F0 		movq	%rsi, -16(%rbp)
 8091 0014 488955E8 		movq	%rdx, -24(%rbp)
 969:/usr/include/c++/11/bits/stl_algobase.h **** 
 8092              		.loc 2 969 21
 8093 0018 488B55E8 		movq	-24(%rbp), %rdx
 8094 001c 488B4DF0 		movq	-16(%rbp), %rcx
 8095 0020 488B45F8 		movq	-8(%rbp), %rax
 8096 0024 4889CE   		movq	%rcx, %rsi
 8097 0027 4889C7   		movq	%rax, %rdi
 8098 002a E8000000 		call	_ZSt9__fill_a1IPffEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RK
 8098      00
 969:/usr/include/c++/11/bits/stl_algobase.h **** 
 8099              		.loc 2 969 49
 8100 002f 90       		nop
 8101 0030 C9       		leave
 8102              		.cfi_def_cfa 7, 8
 8103 0031 C3       		ret
 8104              		.cfi_endproc
 8105              	.LFE1659:
 8107              		.section	.text._ZSt9__fill_a1IPffEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__ty
 8108              		.weak	_ZSt9__fill_a1IPffEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_R
 8110              	_ZSt9__fill_a1IPffEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_:
 8111              	.LFB1660:
 919:/usr/include/c++/11/bits/stl_algobase.h **** 	      const _Tp& __value)
 8112              		.loc 2 919 5
 8113              		.cfi_startproc
 8114 0000 F30F1EFA 		endbr64
 8115 0004 55       		pushq	%rbp
 8116              		.cfi_def_cfa_offset 16
 8117              		.cfi_offset 6, -16
 8118 0005 4889E5   		movq	%rsp, %rbp
 8119              		.cfi_def_cfa_register 6
 8120 0008 48897DE8 		movq	%rdi, -24(%rbp)
 8121 000c 488975E0 		movq	%rsi, -32(%rbp)
 8122 0010 488955D8 		movq	%rdx, -40(%rbp)
 922:/usr/include/c++/11/bits/stl_algobase.h ****       for (; __first != __last; ++__first)
 8123              		.loc 2 922 17
 8124 0014 488B45D8 		movq	-40(%rbp), %rax
 8125 0018 F30F1000 		movss	(%rax), %xmm0
 8126 001c F30F1145 		movss	%xmm0, -4(%rbp)
 8126      FC
 923:/usr/include/c++/11/bits/stl_algobase.h **** 	*__first = __tmp;
 8127              		.loc 2 923 7
 8128 0021 EB12     		jmp	.L405
 8129              	.L406:
 924:/usr/include/c++/11/bits/stl_algobase.h ****     }
 8130              		.loc 2 924 11 discriminator 2
 8131 0023 488B45E8 		movq	-24(%rbp), %rax
 8132 0027 F30F1045 		movss	-4(%rbp), %xmm0
 8132      FC
 8133 002c F30F1100 		movss	%xmm0, (%rax)
 923:/usr/include/c++/11/bits/stl_algobase.h **** 	*__first = __tmp;
 8134              		.loc 2 923 7 discriminator 2
 8135 0030 488345E8 		addq	$4, -24(%rbp)
 8135      04
 8136              	.L405:
 923:/usr/include/c++/11/bits/stl_algobase.h **** 	*__first = __tmp;
 8137              		.loc 2 923 22 discriminator 1
 8138 0035 488B45E8 		movq	-24(%rbp), %rax
 8139 0039 483B45E0 		cmpq	-32(%rbp), %rax
 8140 003d 75E4     		jne	.L406
 925:/usr/include/c++/11/bits/stl_algobase.h **** 
 8141              		.loc 2 925 5
 8142 003f 90       		nop
 8143 0040 90       		nop
 8144 0041 5D       		popq	%rbp
 8145              		.cfi_def_cfa 7, 8
 8146 0042 C3       		ret
 8147              		.cfi_endproc
 8148              	.LFE1660:
 8150              		.section	.data.rel.ro.local,"aw"
 8151              		.align 8
 8154              	_ZTVN12_GLOBAL__N_137TestCanCallCHECKOutsideOfTestFunctionE:
 8155 0000 00000000 		.quad	0
 8155      00000000 
 8156 0008 00000000 		.quad	_ZTIN12_GLOBAL__N_137TestCanCallCHECKOutsideOfTestFunctionE
 8156      00000000 
 8157 0010 00000000 		.quad	_ZN12_GLOBAL__N_137TestCanCallCHECKOutsideOfTestFunctionD1Ev
 8157      00000000 
 8158 0018 00000000 		.quad	_ZN12_GLOBAL__N_137TestCanCallCHECKOutsideOfTestFunctionD0Ev
 8158      00000000 
 8159 0020 00000000 		.quad	_ZNK12_GLOBAL__N_137TestCanCallCHECKOutsideOfTestFunction7RunImplEv
 8159      00000000 
 8160              		.text
 8161 2455 90       		.align 2
 8163              	_ZN12_GLOBAL__N_137TestCanCallCHECKOutsideOfTestFunctionD2Ev:
 8164              	.LFB1662:
 151:TestUnitTest++.cpp **** {
 8165              		.loc 5 151 1
 8166              		.cfi_startproc
 8167 2456 F30F1EFA 		endbr64
 8168 245a 55       		pushq	%rbp
 8169              		.cfi_def_cfa_offset 16
 8170              		.cfi_offset 6, -16
 8171 245b 4889E5   		movq	%rsp, %rbp
 8172              		.cfi_def_cfa_register 6
 8173 245e 4883EC10 		subq	$16, %rsp
 8174 2462 48897DF8 		movq	%rdi, -8(%rbp)
 8175              	.LBB115:
 151:TestUnitTest++.cpp **** {
 8176              		.loc 5 151 1
 8177 2466 488D1500 		leaq	16+_ZTVN12_GLOBAL__N_137TestCanCallCHECKOutsideOfTestFunctionE(%rip), %rdx
 8177      000000
 8178 246d 488B45F8 		movq	-8(%rbp), %rax
 8179 2471 488910   		movq	%rdx, (%rax)
 8180 2474 488B45F8 		movq	-8(%rbp), %rax
 8181 2478 4889C7   		movq	%rax, %rdi
 8182 247b E8000000 		call	_ZN8UnitTest4TestD2Ev@PLT
 8182      00
 8183              	.LBE115:
 8184 2480 90       		nop
 8185 2481 C9       		leave
 8186              		.cfi_def_cfa 7, 8
 8187 2482 C3       		ret
 8188              		.cfi_endproc
 8189              	.LFE1662:
 8191              		.set	_ZN12_GLOBAL__N_137TestCanCallCHECKOutsideOfTestFunctionD1Ev,_ZN12_GLOBAL__N_137TestCanCallCH
 8192 2483 90       		.align 2
 8194              	_ZN12_GLOBAL__N_137TestCanCallCHECKOutsideOfTestFunctionD0Ev:
 8195              	.LFB1664:
 151:TestUnitTest++.cpp **** {
 8196              		.loc 5 151 1
 8197              		.cfi_startproc
 8198              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 8199              		.cfi_lsda 0x1b,.LLSDA1664
 8200 2484 F30F1EFA 		endbr64
 8201 2488 55       		pushq	%rbp
 8202              		.cfi_def_cfa_offset 16
 8203              		.cfi_offset 6, -16
 8204 2489 4889E5   		movq	%rsp, %rbp
 8205              		.cfi_def_cfa_register 6
 8206 248c 53       		pushq	%rbx
 8207 248d 4883EC18 		subq	$24, %rsp
 8208              		.cfi_offset 3, -24
 8209 2491 48897DE8 		movq	%rdi, -24(%rbp)
 151:TestUnitTest++.cpp **** {
 8210              		.loc 5 151 1
 8211 2495 488B45E8 		movq	-24(%rbp), %rax
 8212 2499 4889C7   		movq	%rax, %rdi
 8213              	.LEHB155:
 8214 249c E8B5FFFF 		call	_ZN12_GLOBAL__N_137TestCanCallCHECKOutsideOfTestFunctionD1Ev
 8214      FF
 8215              	.LEHE155:
 151:TestUnitTest++.cpp **** {
 8216              		.loc 5 151 1 is_stmt 0 discriminator 2
 8217 24a1 488B45E8 		movq	-24(%rbp), %rax
 8218 24a5 4889C7   		movq	%rax, %rdi
 8219 24a8 E8000000 		call	_ZdlPv@PLT
 8219      00
 8220 24ad EB1E     		jmp	.L411
 8221              	.L410:
 8222 24af F30F1EFA 		endbr64
 151:TestUnitTest++.cpp **** {
 8223              		.loc 5 151 1
 8224 24b3 4889C3   		movq	%rax, %rbx
 8225 24b6 488B45E8 		movq	-24(%rbp), %rax
 8226 24ba 4889C7   		movq	%rax, %rdi
 8227 24bd E8000000 		call	_ZdlPv@PLT
 8227      00
 8228 24c2 4889D8   		movq	%rbx, %rax
 8229 24c5 4889C7   		movq	%rax, %rdi
 8230              	.LEHB156:
 8231 24c8 E8000000 		call	_Unwind_Resume@PLT
 8231      00
 8232              	.LEHE156:
 8233              	.L411:
 8234 24cd 488B5DF8 		movq	-8(%rbp), %rbx
 8235 24d1 C9       		leave
 8236              		.cfi_def_cfa 7, 8
 8237 24d2 C3       		ret
 8238              		.cfi_endproc
 8239              	.LFE1664:
 8240              		.section	.gcc_except_table
 8241              	.LLSDA1664:
 8242 0464 FF       		.byte	0xff
 8243 0465 FF       		.byte	0xff
 8244 0466 01       		.byte	0x1
 8245 0467 08       		.uleb128 .LLSDACSE1664-.LLSDACSB1664
 8246              	.LLSDACSB1664:
 8247 0468 18       		.uleb128 .LEHB155-.LFB1664
 8248 0469 05       		.uleb128 .LEHE155-.LEHB155
 8249 046a 2B       		.uleb128 .L410-.LFB1664
 8250 046b 00       		.uleb128 0
 8251 046c 44       		.uleb128 .LEHB156-.LFB1664
 8252 046d 05       		.uleb128 .LEHE156-.LEHB156
 8253 046e 00       		.uleb128 0
 8254 046f 00       		.uleb128 0
 8255              	.LLSDACSE1664:
 8256              		.text
 8258              		.section	.data.rel.ro.local
 8259              		.align 8
 8262              	_ZTVN12_GLOBAL__N_143TestSimpleFixtureOnlyOneFixtureAliveAtATimeE:
 8263 0028 00000000 		.quad	0
 8263      00000000 
 8264 0030 00000000 		.quad	_ZTIN12_GLOBAL__N_143TestSimpleFixtureOnlyOneFixtureAliveAtATimeE
 8264      00000000 
 8265 0038 00000000 		.quad	_ZN12_GLOBAL__N_143TestSimpleFixtureOnlyOneFixtureAliveAtATimeD1Ev
 8265      00000000 
 8266 0040 00000000 		.quad	_ZN12_GLOBAL__N_143TestSimpleFixtureOnlyOneFixtureAliveAtATimeD0Ev
 8266      00000000 
 8267 0048 00000000 		.quad	_ZNK12_GLOBAL__N_143TestSimpleFixtureOnlyOneFixtureAliveAtATime7RunImplEv
 8267      00000000 
 8268              		.text
 8269 24d3 90       		.align 2
 8271              	_ZN12_GLOBAL__N_143TestSimpleFixtureOnlyOneFixtureAliveAtATimeD2Ev:
 8272              	.LFB1666:
 141:TestUnitTest++.cpp **** {
 8273              		.loc 5 141 1 is_stmt 1
 8274              		.cfi_startproc
 8275 24d4 F30F1EFA 		endbr64
 8276 24d8 55       		pushq	%rbp
 8277              		.cfi_def_cfa_offset 16
 8278              		.cfi_offset 6, -16
 8279 24d9 4889E5   		movq	%rsp, %rbp
 8280              		.cfi_def_cfa_register 6
 8281 24dc 4883EC10 		subq	$16, %rsp
 8282 24e0 48897DF8 		movq	%rdi, -8(%rbp)
 8283              	.LBB116:
 141:TestUnitTest++.cpp **** {
 8284              		.loc 5 141 1
 8285 24e4 488D1500 		leaq	16+_ZTVN12_GLOBAL__N_143TestSimpleFixtureOnlyOneFixtureAliveAtATimeE(%rip), %rdx
 8285      000000
 8286 24eb 488B45F8 		movq	-8(%rbp), %rax
 8287 24ef 488910   		movq	%rdx, (%rax)
 8288 24f2 488B45F8 		movq	-8(%rbp), %rax
 8289 24f6 4889C7   		movq	%rax, %rdi
 8290 24f9 E8000000 		call	_ZN8UnitTest4TestD2Ev@PLT
 8290      00
 8291              	.LBE116:
 8292 24fe 90       		nop
 8293 24ff C9       		leave
 8294              		.cfi_def_cfa 7, 8
 8295 2500 C3       		ret
 8296              		.cfi_endproc
 8297              	.LFE1666:
 8299              		.set	_ZN12_GLOBAL__N_143TestSimpleFixtureOnlyOneFixtureAliveAtATimeD1Ev,_ZN12_GLOBAL__N_143TestSim
 8300 2501 90       		.align 2
 8302              	_ZN12_GLOBAL__N_143TestSimpleFixtureOnlyOneFixtureAliveAtATimeD0Ev:
 8303              	.LFB1668:
 141:TestUnitTest++.cpp **** {
 8304              		.loc 5 141 1
 8305              		.cfi_startproc
 8306              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 8307              		.cfi_lsda 0x1b,.LLSDA1668
 8308 2502 F30F1EFA 		endbr64
 8309 2506 55       		pushq	%rbp
 8310              		.cfi_def_cfa_offset 16
 8311              		.cfi_offset 6, -16
 8312 2507 4889E5   		movq	%rsp, %rbp
 8313              		.cfi_def_cfa_register 6
 8314 250a 53       		pushq	%rbx
 8315 250b 4883EC18 		subq	$24, %rsp
 8316              		.cfi_offset 3, -24
 8317 250f 48897DE8 		movq	%rdi, -24(%rbp)
 141:TestUnitTest++.cpp **** {
 8318              		.loc 5 141 1
 8319 2513 488B45E8 		movq	-24(%rbp), %rax
 8320 2517 4889C7   		movq	%rax, %rdi
 8321              	.LEHB157:
 8322 251a E8B5FFFF 		call	_ZN12_GLOBAL__N_143TestSimpleFixtureOnlyOneFixtureAliveAtATimeD1Ev
 8322      FF
 8323              	.LEHE157:
 141:TestUnitTest++.cpp **** {
 8324              		.loc 5 141 1 is_stmt 0 discriminator 2
 8325 251f 488B45E8 		movq	-24(%rbp), %rax
 8326 2523 4889C7   		movq	%rax, %rdi
 8327 2526 E8000000 		call	_ZdlPv@PLT
 8327      00
 8328 252b EB1E     		jmp	.L416
 8329              	.L415:
 8330 252d F30F1EFA 		endbr64
 141:TestUnitTest++.cpp **** {
 8331              		.loc 5 141 1
 8332 2531 4889C3   		movq	%rax, %rbx
 8333 2534 488B45E8 		movq	-24(%rbp), %rax
 8334 2538 4889C7   		movq	%rax, %rdi
 8335 253b E8000000 		call	_ZdlPv@PLT
 8335      00
 8336 2540 4889D8   		movq	%rbx, %rax
 8337 2543 4889C7   		movq	%rax, %rdi
 8338              	.LEHB158:
 8339 2546 E8000000 		call	_Unwind_Resume@PLT
 8339      00
 8340              	.LEHE158:
 8341              	.L416:
 8342 254b 488B5DF8 		movq	-8(%rbp), %rbx
 8343 254f C9       		leave
 8344              		.cfi_def_cfa 7, 8
 8345 2550 C3       		ret
 8346              		.cfi_endproc
 8347              	.LFE1668:
 8348              		.section	.gcc_except_table
 8349              	.LLSDA1668:
 8350 0470 FF       		.byte	0xff
 8351 0471 FF       		.byte	0xff
 8352 0472 01       		.byte	0x1
 8353 0473 08       		.uleb128 .LLSDACSE1668-.LLSDACSB1668
 8354              	.LLSDACSB1668:
 8355 0474 18       		.uleb128 .LEHB157-.LFB1668
 8356 0475 05       		.uleb128 .LEHE157-.LEHB157
 8357 0476 2B       		.uleb128 .L415-.LFB1668
 8358 0477 00       		.uleb128 0
 8359 0478 44       		.uleb128 .LEHB158-.LFB1668
 8360 0479 05       		.uleb128 .LEHE158-.LEHB158
 8361 047a 00       		.uleb128 0
 8362 047b 00       		.uleb128 0
 8363              	.LLSDACSE1668:
 8364              		.text
 8366              		.section	.data.rel.ro.local
 8367              		.align 8
 8370              	_ZTVN12_GLOBAL__N_143TestSimpleFixtureDefaultFixtureCtorIsCalledE:
 8371 0050 00000000 		.quad	0
 8371      00000000 
 8372 0058 00000000 		.quad	_ZTIN12_GLOBAL__N_143TestSimpleFixtureDefaultFixtureCtorIsCalledE
 8372      00000000 
 8373 0060 00000000 		.quad	_ZN12_GLOBAL__N_143TestSimpleFixtureDefaultFixtureCtorIsCalledD1Ev
 8373      00000000 
 8374 0068 00000000 		.quad	_ZN12_GLOBAL__N_143TestSimpleFixtureDefaultFixtureCtorIsCalledD0Ev
 8374      00000000 
 8375 0070 00000000 		.quad	_ZNK12_GLOBAL__N_143TestSimpleFixtureDefaultFixtureCtorIsCalled7RunImplEv
 8375      00000000 
 8376              		.text
 8377 2551 90       		.align 2
 8379              	_ZN12_GLOBAL__N_143TestSimpleFixtureDefaultFixtureCtorIsCalledD2Ev:
 8380              	.LFB1670:
 136:TestUnitTest++.cpp **** {
 8381              		.loc 5 136 1 is_stmt 1
 8382              		.cfi_startproc
 8383 2552 F30F1EFA 		endbr64
 8384 2556 55       		pushq	%rbp
 8385              		.cfi_def_cfa_offset 16
 8386              		.cfi_offset 6, -16
 8387 2557 4889E5   		movq	%rsp, %rbp
 8388              		.cfi_def_cfa_register 6
 8389 255a 4883EC10 		subq	$16, %rsp
 8390 255e 48897DF8 		movq	%rdi, -8(%rbp)
 8391              	.LBB117:
 136:TestUnitTest++.cpp **** {
 8392              		.loc 5 136 1
 8393 2562 488D1500 		leaq	16+_ZTVN12_GLOBAL__N_143TestSimpleFixtureDefaultFixtureCtorIsCalledE(%rip), %rdx
 8393      000000
 8394 2569 488B45F8 		movq	-8(%rbp), %rax
 8395 256d 488910   		movq	%rdx, (%rax)
 8396 2570 488B45F8 		movq	-8(%rbp), %rax
 8397 2574 4889C7   		movq	%rax, %rdi
 8398 2577 E8000000 		call	_ZN8UnitTest4TestD2Ev@PLT
 8398      00
 8399              	.LBE117:
 8400 257c 90       		nop
 8401 257d C9       		leave
 8402              		.cfi_def_cfa 7, 8
 8403 257e C3       		ret
 8404              		.cfi_endproc
 8405              	.LFE1670:
 8407              		.set	_ZN12_GLOBAL__N_143TestSimpleFixtureDefaultFixtureCtorIsCalledD1Ev,_ZN12_GLOBAL__N_143TestSim
 8408 257f 90       		.align 2
 8410              	_ZN12_GLOBAL__N_143TestSimpleFixtureDefaultFixtureCtorIsCalledD0Ev:
 8411              	.LFB1672:
 136:TestUnitTest++.cpp **** {
 8412              		.loc 5 136 1
 8413              		.cfi_startproc
 8414              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 8415              		.cfi_lsda 0x1b,.LLSDA1672
 8416 2580 F30F1EFA 		endbr64
 8417 2584 55       		pushq	%rbp
 8418              		.cfi_def_cfa_offset 16
 8419              		.cfi_offset 6, -16
 8420 2585 4889E5   		movq	%rsp, %rbp
 8421              		.cfi_def_cfa_register 6
 8422 2588 53       		pushq	%rbx
 8423 2589 4883EC18 		subq	$24, %rsp
 8424              		.cfi_offset 3, -24
 8425 258d 48897DE8 		movq	%rdi, -24(%rbp)
 136:TestUnitTest++.cpp **** {
 8426              		.loc 5 136 1
 8427 2591 488B45E8 		movq	-24(%rbp), %rax
 8428 2595 4889C7   		movq	%rax, %rdi
 8429              	.LEHB159:
 8430 2598 E8B5FFFF 		call	_ZN12_GLOBAL__N_143TestSimpleFixtureDefaultFixtureCtorIsCalledD1Ev
 8430      FF
 8431              	.LEHE159:
 136:TestUnitTest++.cpp **** {
 8432              		.loc 5 136 1 is_stmt 0 discriminator 2
 8433 259d 488B45E8 		movq	-24(%rbp), %rax
 8434 25a1 4889C7   		movq	%rax, %rdi
 8435 25a4 E8000000 		call	_ZdlPv@PLT
 8435      00
 8436 25a9 EB1E     		jmp	.L421
 8437              	.L420:
 8438 25ab F30F1EFA 		endbr64
 136:TestUnitTest++.cpp **** {
 8439              		.loc 5 136 1
 8440 25af 4889C3   		movq	%rax, %rbx
 8441 25b2 488B45E8 		movq	-24(%rbp), %rax
 8442 25b6 4889C7   		movq	%rax, %rdi
 8443 25b9 E8000000 		call	_ZdlPv@PLT
 8443      00
 8444 25be 4889D8   		movq	%rbx, %rax
 8445 25c1 4889C7   		movq	%rax, %rdi
 8446              	.LEHB160:
 8447 25c4 E8000000 		call	_Unwind_Resume@PLT
 8447      00
 8448              	.LEHE160:
 8449              	.L421:
 8450 25c9 488B5DF8 		movq	-8(%rbp), %rbx
 8451 25cd C9       		leave
 8452              		.cfi_def_cfa 7, 8
 8453 25ce C3       		ret
 8454              		.cfi_endproc
 8455              	.LFE1672:
 8456              		.section	.gcc_except_table
 8457              	.LLSDA1672:
 8458 047c FF       		.byte	0xff
 8459 047d FF       		.byte	0xff
 8460 047e 01       		.byte	0x1
 8461 047f 08       		.uleb128 .LLSDACSE1672-.LLSDACSB1672
 8462              	.LLSDACSB1672:
 8463 0480 18       		.uleb128 .LEHB159-.LFB1672
 8464 0481 05       		.uleb128 .LEHE159-.LEHB159
 8465 0482 2B       		.uleb128 .L420-.LFB1672
 8466 0483 00       		.uleb128 0
 8467 0484 44       		.uleb128 .LEHB160-.LFB1672
 8468 0485 05       		.uleb128 .LEHE160-.LEHB160
 8469 0486 00       		.uleb128 0
 8470 0487 00       		.uleb128 0
 8471              	.LLSDACSE1672:
 8472              		.text
 8474              		.section	.data.rel.ro.local
 8475              		.align 8
 8478              	_ZTVN12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongExceptionE:
 8479 0078 00000000 		.quad	0
 8479      00000000 
 8480 0080 00000000 		.quad	_ZTIN12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongExceptionE
 8480      00000000 
 8481 0088 00000000 		.quad	_ZN12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongExceptionD1Ev
 8481      00000000 
 8482 0090 00000000 		.quad	_ZN12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongExceptionD0Ev
 8482      00000000 
 8483 0098 00000000 		.quad	_ZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEv
 8483      00000000 
 8484              		.text
 8485 25cf 90       		.align 2
 8487              	_ZN12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongExceptionD2Ev:
 8488              	.LFB1674:
  97:TestUnitTest++.cpp **** {
 8489              		.loc 5 97 1 is_stmt 1
 8490              		.cfi_startproc
 8491 25d0 F30F1EFA 		endbr64
 8492 25d4 55       		pushq	%rbp
 8493              		.cfi_def_cfa_offset 16
 8494              		.cfi_offset 6, -16
 8495 25d5 4889E5   		movq	%rsp, %rbp
 8496              		.cfi_def_cfa_register 6
 8497 25d8 4883EC10 		subq	$16, %rsp
 8498 25dc 48897DF8 		movq	%rdi, -8(%rbp)
 8499              	.LBB118:
  97:TestUnitTest++.cpp **** {
 8500              		.loc 5 97 1
 8501 25e0 488D1500 		leaq	16+_ZTVN12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongExceptionE(%rip), %rdx
 8501      000000
 8502 25e7 488B45F8 		movq	-8(%rbp), %rax
 8503 25eb 488910   		movq	%rdx, (%rax)
 8504 25ee 488B45F8 		movq	-8(%rbp), %rax
 8505 25f2 4889C7   		movq	%rax, %rdi
 8506 25f5 E8000000 		call	_ZN8UnitTest4TestD2Ev@PLT
 8506      00
 8507              	.LBE118:
 8508 25fa 90       		nop
 8509 25fb C9       		leave
 8510              		.cfi_def_cfa 7, 8
 8511 25fc C3       		ret
 8512              		.cfi_endproc
 8513              	.LFE1674:
 8515              		.set	_ZN12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongExceptionD1Ev,_ZN12_GLOBAL__N_140TestCheckT
 8516 25fd 90       		.align 2
 8518              	_ZN12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongExceptionD0Ev:
 8519              	.LFB1676:
  97:TestUnitTest++.cpp **** {
 8520              		.loc 5 97 1
 8521              		.cfi_startproc
 8522              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 8523              		.cfi_lsda 0x1b,.LLSDA1676
 8524 25fe F30F1EFA 		endbr64
 8525 2602 55       		pushq	%rbp
 8526              		.cfi_def_cfa_offset 16
 8527              		.cfi_offset 6, -16
 8528 2603 4889E5   		movq	%rsp, %rbp
 8529              		.cfi_def_cfa_register 6
 8530 2606 53       		pushq	%rbx
 8531 2607 4883EC18 		subq	$24, %rsp
 8532              		.cfi_offset 3, -24
 8533 260b 48897DE8 		movq	%rdi, -24(%rbp)
  97:TestUnitTest++.cpp **** {
 8534              		.loc 5 97 1
 8535 260f 488B45E8 		movq	-24(%rbp), %rax
 8536 2613 4889C7   		movq	%rax, %rdi
 8537              	.LEHB161:
 8538 2616 E8B5FFFF 		call	_ZN12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongExceptionD1Ev
 8538      FF
 8539              	.LEHE161:
  97:TestUnitTest++.cpp **** {
 8540              		.loc 5 97 1 is_stmt 0 discriminator 2
 8541 261b 488B45E8 		movq	-24(%rbp), %rax
 8542 261f 4889C7   		movq	%rax, %rdi
 8543 2622 E8000000 		call	_ZdlPv@PLT
 8543      00
 8544 2627 EB1E     		jmp	.L426
 8545              	.L425:
 8546 2629 F30F1EFA 		endbr64
  97:TestUnitTest++.cpp **** {
 8547              		.loc 5 97 1
 8548 262d 4889C3   		movq	%rax, %rbx
 8549 2630 488B45E8 		movq	-24(%rbp), %rax
 8550 2634 4889C7   		movq	%rax, %rdi
 8551 2637 E8000000 		call	_ZdlPv@PLT
 8551      00
 8552 263c 4889D8   		movq	%rbx, %rax
 8553 263f 4889C7   		movq	%rax, %rdi
 8554              	.LEHB162:
 8555 2642 E8000000 		call	_Unwind_Resume@PLT
 8555      00
 8556              	.LEHE162:
 8557              	.L426:
 8558 2647 488B5DF8 		movq	-8(%rbp), %rbx
 8559 264b C9       		leave
 8560              		.cfi_def_cfa 7, 8
 8561 264c C3       		ret
 8562              		.cfi_endproc
 8563              	.LFE1676:
 8564              		.section	.gcc_except_table
 8565              	.LLSDA1676:
 8566 0488 FF       		.byte	0xff
 8567 0489 FF       		.byte	0xff
 8568 048a 01       		.byte	0x1
 8569 048b 08       		.uleb128 .LLSDACSE1676-.LLSDACSB1676
 8570              	.LLSDACSB1676:
 8571 048c 18       		.uleb128 .LEHB161-.LFB1676
 8572 048d 05       		.uleb128 .LEHE161-.LEHB161
 8573 048e 2B       		.uleb128 .L425-.LFB1676
 8574 048f 00       		.uleb128 0
 8575 0490 44       		.uleb128 .LEHB162-.LFB1676
 8576 0491 05       		.uleb128 .LEHE162-.LEHB162
 8577 0492 00       		.uleb128 0
 8578 0493 00       		.uleb128 0
 8579              	.LLSDACSE1676:
 8580              		.text
 8582              		.section	.data.rel.ro.local
 8583              		.align 8
 8586              	_ZTVZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEvE14WrongThrowTest:
 8587 00a0 00000000 		.quad	0
 8587      00000000 
 8588 00a8 00000000 		.quad	_ZTIZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEvE14WrongThrowTest
 8588      00000000 
 8589 00b0 00000000 		.quad	_ZZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEvEN14WrongThrowTestD1E
 8589      00000000 
 8590 00b8 00000000 		.quad	_ZZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEvEN14WrongThrowTestD0E
 8590      00000000 
 8591 00c0 00000000 		.quad	_ZZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEvENK14WrongThrowTest7R
 8591      00000000 
 8592              		.text
 8593 264d 90       		.align 2
 8595              	_ZZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEvEN14WrongThrowTestD2Ev:
 8596              	.LFB1678:
  99:TestUnitTest++.cpp ****     {
 8597              		.loc 5 99 11 is_stmt 1
 8598              		.cfi_startproc
 8599 264e F30F1EFA 		endbr64
 8600 2652 55       		pushq	%rbp
 8601              		.cfi_def_cfa_offset 16
 8602              		.cfi_offset 6, -16
 8603 2653 4889E5   		movq	%rsp, %rbp
 8604              		.cfi_def_cfa_register 6
 8605 2656 4883EC10 		subq	$16, %rsp
 8606 265a 48897DF8 		movq	%rdi, -8(%rbp)
 8607              	.LBB119:
  99:TestUnitTest++.cpp ****     {
 8608              		.loc 5 99 11
 8609 265e 488D1500 		leaq	16+_ZTVZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEvE14WrongThrowTest
 8609      000000
 8610 2665 488B45F8 		movq	-8(%rbp), %rax
 8611 2669 488910   		movq	%rdx, (%rax)
 8612 266c 488B45F8 		movq	-8(%rbp), %rax
 8613 2670 4889C7   		movq	%rax, %rdi
 8614 2673 E8000000 		call	_ZN8UnitTest4TestD2Ev@PLT
 8614      00
 8615              	.LBE119:
 8616 2678 90       		nop
 8617 2679 C9       		leave
 8618              		.cfi_def_cfa 7, 8
 8619 267a C3       		ret
 8620              		.cfi_endproc
 8621              	.LFE1678:
 8623              		.set	_ZZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEvEN14WrongThrowTestD1Ev
 8624 267b 90       		.align 2
 8626              	_ZZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEvEN14WrongThrowTestD0Ev:
 8627              	.LFB1680:
  99:TestUnitTest++.cpp ****     {
 8628              		.loc 5 99 11
 8629              		.cfi_startproc
 8630              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 8631              		.cfi_lsda 0x1b,.LLSDA1680
 8632 267c F30F1EFA 		endbr64
 8633 2680 55       		pushq	%rbp
 8634              		.cfi_def_cfa_offset 16
 8635              		.cfi_offset 6, -16
 8636 2681 4889E5   		movq	%rsp, %rbp
 8637              		.cfi_def_cfa_register 6
 8638 2684 53       		pushq	%rbx
 8639 2685 4883EC18 		subq	$24, %rsp
 8640              		.cfi_offset 3, -24
 8641 2689 48897DE8 		movq	%rdi, -24(%rbp)
  99:TestUnitTest++.cpp ****     {
 8642              		.loc 5 99 11
 8643 268d 488B45E8 		movq	-24(%rbp), %rax
 8644 2691 4889C7   		movq	%rax, %rdi
 8645              	.LEHB163:
 8646 2694 E8B5FFFF 		call	_ZZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEvEN14WrongThrowTestD1Ev
 8646      FF
 8647              	.LEHE163:
  99:TestUnitTest++.cpp ****     {
 8648              		.loc 5 99 11 is_stmt 0 discriminator 2
 8649 2699 488B45E8 		movq	-24(%rbp), %rax
 8650 269d 4889C7   		movq	%rax, %rdi
 8651 26a0 E8000000 		call	_ZdlPv@PLT
 8651      00
 8652 26a5 EB1E     		jmp	.L431
 8653              	.L430:
 8654 26a7 F30F1EFA 		endbr64
  99:TestUnitTest++.cpp ****     {
 8655              		.loc 5 99 11
 8656 26ab 4889C3   		movq	%rax, %rbx
 8657 26ae 488B45E8 		movq	-24(%rbp), %rax
 8658 26b2 4889C7   		movq	%rax, %rdi
 8659 26b5 E8000000 		call	_ZdlPv@PLT
 8659      00
 8660 26ba 4889D8   		movq	%rbx, %rax
 8661 26bd 4889C7   		movq	%rax, %rdi
 8662              	.LEHB164:
 8663 26c0 E8000000 		call	_Unwind_Resume@PLT
 8663      00
 8664              	.LEHE164:
 8665              	.L431:
 8666 26c5 488B5DF8 		movq	-8(%rbp), %rbx
 8667 26c9 C9       		leave
 8668              		.cfi_def_cfa 7, 8
 8669 26ca C3       		ret
 8670              		.cfi_endproc
 8671              	.LFE1680:
 8672              		.section	.gcc_except_table
 8673              	.LLSDA1680:
 8674 0494 FF       		.byte	0xff
 8675 0495 FF       		.byte	0xff
 8676 0496 01       		.byte	0x1
 8677 0497 08       		.uleb128 .LLSDACSE1680-.LLSDACSB1680
 8678              	.LLSDACSB1680:
 8679 0498 18       		.uleb128 .LEHB163-.LFB1680
 8680 0499 05       		.uleb128 .LEHE163-.LEHB163
 8681 049a 2B       		.uleb128 .L430-.LFB1680
 8682 049b 00       		.uleb128 0
 8683 049c 44       		.uleb128 .LEHB164-.LFB1680
 8684 049d 05       		.uleb128 .LEHE164-.LEHB164
 8685 049e 00       		.uleb128 0
 8686 049f 00       		.uleb128 0
 8687              	.LLSDACSE1680:
 8688              		.text
 8690              		.section	.data.rel.ro.local
 8691              		.align 8
 8694              	_ZTVN12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingExceptionE:
 8695 00c8 00000000 		.quad	0
 8695      00000000 
 8696 00d0 00000000 		.quad	_ZTIN12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingExceptionE
 8696      00000000 
 8697 00d8 00000000 		.quad	_ZN12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingExceptionD1Ev
 8697      00000000 
 8698 00e0 00000000 		.quad	_ZN12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingExceptionD0Ev
 8698      00000000 
 8699 00e8 00000000 		.quad	_ZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEv
 8699      00000000 
 8700              		.text
 8701 26cb 90       		.align 2
 8703              	_ZN12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingExceptionD2Ev:
 8704              	.LFB1682:
  70:TestUnitTest++.cpp **** {
 8705              		.loc 5 70 1 is_stmt 1
 8706              		.cfi_startproc
 8707 26cc F30F1EFA 		endbr64
 8708 26d0 55       		pushq	%rbp
 8709              		.cfi_def_cfa_offset 16
 8710              		.cfi_offset 6, -16
 8711 26d1 4889E5   		movq	%rsp, %rbp
 8712              		.cfi_def_cfa_register 6
 8713 26d4 4883EC10 		subq	$16, %rsp
 8714 26d8 48897DF8 		movq	%rdi, -8(%rbp)
 8715              	.LBB120:
  70:TestUnitTest++.cpp **** {
 8716              		.loc 5 70 1
 8717 26dc 488D1500 		leaq	16+_ZTVN12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingExceptionE(%rip), %rdx
 8717      000000
 8718 26e3 488B45F8 		movq	-8(%rbp), %rax
 8719 26e7 488910   		movq	%rdx, (%rax)
 8720 26ea 488B45F8 		movq	-8(%rbp), %rax
 8721 26ee 4889C7   		movq	%rax, %rdi
 8722 26f1 E8000000 		call	_ZN8UnitTest4TestD2Ev@PLT
 8722      00
 8723              	.LBE120:
 8724 26f6 90       		nop
 8725 26f7 C9       		leave
 8726              		.cfi_def_cfa 7, 8
 8727 26f8 C3       		ret
 8728              		.cfi_endproc
 8729              	.LFE1682:
 8731              		.set	_ZN12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingExceptionD1Ev,_ZN12_GLOBAL__N_142TestChec
 8732 26f9 90       		.align 2
 8734              	_ZN12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingExceptionD0Ev:
 8735              	.LFB1684:
  70:TestUnitTest++.cpp **** {
 8736              		.loc 5 70 1
 8737              		.cfi_startproc
 8738              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 8739              		.cfi_lsda 0x1b,.LLSDA1684
 8740 26fa F30F1EFA 		endbr64
 8741 26fe 55       		pushq	%rbp
 8742              		.cfi_def_cfa_offset 16
 8743              		.cfi_offset 6, -16
 8744 26ff 4889E5   		movq	%rsp, %rbp
 8745              		.cfi_def_cfa_register 6
 8746 2702 53       		pushq	%rbx
 8747 2703 4883EC18 		subq	$24, %rsp
 8748              		.cfi_offset 3, -24
 8749 2707 48897DE8 		movq	%rdi, -24(%rbp)
  70:TestUnitTest++.cpp **** {
 8750              		.loc 5 70 1
 8751 270b 488B45E8 		movq	-24(%rbp), %rax
 8752 270f 4889C7   		movq	%rax, %rdi
 8753              	.LEHB165:
 8754 2712 E8B5FFFF 		call	_ZN12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingExceptionD1Ev
 8754      FF
 8755              	.LEHE165:
  70:TestUnitTest++.cpp **** {
 8756              		.loc 5 70 1 is_stmt 0 discriminator 2
 8757 2717 488B45E8 		movq	-24(%rbp), %rax
 8758 271b 4889C7   		movq	%rax, %rdi
 8759 271e E8000000 		call	_ZdlPv@PLT
 8759      00
 8760 2723 EB1E     		jmp	.L436
 8761              	.L435:
 8762 2725 F30F1EFA 		endbr64
  70:TestUnitTest++.cpp **** {
 8763              		.loc 5 70 1
 8764 2729 4889C3   		movq	%rax, %rbx
 8765 272c 488B45E8 		movq	-24(%rbp), %rax
 8766 2730 4889C7   		movq	%rax, %rdi
 8767 2733 E8000000 		call	_ZdlPv@PLT
 8767      00
 8768 2738 4889D8   		movq	%rbx, %rax
 8769 273b 4889C7   		movq	%rax, %rdi
 8770              	.LEHB166:
 8771 273e E8000000 		call	_Unwind_Resume@PLT
 8771      00
 8772              	.LEHE166:
 8773              	.L436:
 8774 2743 488B5DF8 		movq	-8(%rbp), %rbx
 8775 2747 C9       		leave
 8776              		.cfi_def_cfa 7, 8
 8777 2748 C3       		ret
 8778              		.cfi_endproc
 8779              	.LFE1684:
 8780              		.section	.gcc_except_table
 8781              	.LLSDA1684:
 8782 04a0 FF       		.byte	0xff
 8783 04a1 FF       		.byte	0xff
 8784 04a2 01       		.byte	0x1
 8785 04a3 08       		.uleb128 .LLSDACSE1684-.LLSDACSB1684
 8786              	.LLSDACSB1684:
 8787 04a4 18       		.uleb128 .LEHB165-.LFB1684
 8788 04a5 05       		.uleb128 .LEHE165-.LEHB165
 8789 04a6 2B       		.uleb128 .L435-.LFB1684
 8790 04a7 00       		.uleb128 0
 8791 04a8 44       		.uleb128 .LEHB166-.LFB1684
 8792 04a9 05       		.uleb128 .LEHE166-.LEHB166
 8793 04aa 00       		.uleb128 0
 8794 04ab 00       		.uleb128 0
 8795              	.LLSDACSE1684:
 8796              		.text
 8798              		.section	.data.rel.ro.local
 8799              		.align 8
 8802              	_ZTVZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvE11NoThrowTest:
 8803 00f0 00000000 		.quad	0
 8803      00000000 
 8804 00f8 00000000 		.quad	_ZTIZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvE11NoThrowTest
 8804      00000000 
 8805 0100 00000000 		.quad	_ZZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvEN11NoThrowTestD1Ev
 8805      00000000 
 8806 0108 00000000 		.quad	_ZZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvEN11NoThrowTestD0Ev
 8806      00000000 
 8807 0110 00000000 		.quad	_ZZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvENK11NoThrowTest7Ru
 8807      00000000 
 8808              		.text
 8809 2749 90       		.align 2
 8811              	_ZZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvEN11NoThrowTestD2Ev:
 8812              	.LFB1686:
  72:TestUnitTest++.cpp ****     {
 8813              		.loc 5 72 11 is_stmt 1
 8814              		.cfi_startproc
 8815 274a F30F1EFA 		endbr64
 8816 274e 55       		pushq	%rbp
 8817              		.cfi_def_cfa_offset 16
 8818              		.cfi_offset 6, -16
 8819 274f 4889E5   		movq	%rsp, %rbp
 8820              		.cfi_def_cfa_register 6
 8821 2752 4883EC10 		subq	$16, %rsp
 8822 2756 48897DF8 		movq	%rdi, -8(%rbp)
 8823              	.LBB121:
  72:TestUnitTest++.cpp ****     {
 8824              		.loc 5 72 11
 8825 275a 488D1500 		leaq	16+_ZTVZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvE11NoThrowTest(
 8825      000000
 8826 2761 488B45F8 		movq	-8(%rbp), %rax
 8827 2765 488910   		movq	%rdx, (%rax)
 8828 2768 488B45F8 		movq	-8(%rbp), %rax
 8829 276c 4889C7   		movq	%rax, %rdi
 8830 276f E8000000 		call	_ZN8UnitTest4TestD2Ev@PLT
 8830      00
 8831              	.LBE121:
 8832 2774 90       		nop
 8833 2775 C9       		leave
 8834              		.cfi_def_cfa 7, 8
 8835 2776 C3       		ret
 8836              		.cfi_endproc
 8837              	.LFE1686:
 8839              		.set	_ZZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvEN11NoThrowTestD1Ev,
 8840 2777 90       		.align 2
 8842              	_ZZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvEN11NoThrowTestD0Ev:
 8843              	.LFB1688:
  72:TestUnitTest++.cpp ****     {
 8844              		.loc 5 72 11
 8845              		.cfi_startproc
 8846              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 8847              		.cfi_lsda 0x1b,.LLSDA1688
 8848 2778 F30F1EFA 		endbr64
 8849 277c 55       		pushq	%rbp
 8850              		.cfi_def_cfa_offset 16
 8851              		.cfi_offset 6, -16
 8852 277d 4889E5   		movq	%rsp, %rbp
 8853              		.cfi_def_cfa_register 6
 8854 2780 53       		pushq	%rbx
 8855 2781 4883EC18 		subq	$24, %rsp
 8856              		.cfi_offset 3, -24
 8857 2785 48897DE8 		movq	%rdi, -24(%rbp)
  72:TestUnitTest++.cpp ****     {
 8858              		.loc 5 72 11
 8859 2789 488B45E8 		movq	-24(%rbp), %rax
 8860 278d 4889C7   		movq	%rax, %rdi
 8861              	.LEHB167:
 8862 2790 E8B5FFFF 		call	_ZZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvEN11NoThrowTestD1Ev
 8862      FF
 8863              	.LEHE167:
  72:TestUnitTest++.cpp ****     {
 8864              		.loc 5 72 11 is_stmt 0 discriminator 2
 8865 2795 488B45E8 		movq	-24(%rbp), %rax
 8866 2799 4889C7   		movq	%rax, %rdi
 8867 279c E8000000 		call	_ZdlPv@PLT
 8867      00
 8868 27a1 EB1E     		jmp	.L441
 8869              	.L440:
 8870 27a3 F30F1EFA 		endbr64
  72:TestUnitTest++.cpp ****     {
 8871              		.loc 5 72 11
 8872 27a7 4889C3   		movq	%rax, %rbx
 8873 27aa 488B45E8 		movq	-24(%rbp), %rax
 8874 27ae 4889C7   		movq	%rax, %rdi
 8875 27b1 E8000000 		call	_ZdlPv@PLT
 8875      00
 8876 27b6 4889D8   		movq	%rbx, %rax
 8877 27b9 4889C7   		movq	%rax, %rdi
 8878              	.LEHB168:
 8879 27bc E8000000 		call	_Unwind_Resume@PLT
 8879      00
 8880              	.LEHE168:
 8881              	.L441:
 8882 27c1 488B5DF8 		movq	-8(%rbp), %rbx
 8883 27c5 C9       		leave
 8884              		.cfi_def_cfa 7, 8
 8885 27c6 C3       		ret
 8886              		.cfi_endproc
 8887              	.LFE1688:
 8888              		.section	.gcc_except_table
 8889              	.LLSDA1688:
 8890 04ac FF       		.byte	0xff
 8891 04ad FF       		.byte	0xff
 8892 04ae 01       		.byte	0x1
 8893 04af 08       		.uleb128 .LLSDACSE1688-.LLSDACSB1688
 8894              	.LLSDACSB1688:
 8895 04b0 18       		.uleb128 .LEHB167-.LFB1688
 8896 04b1 05       		.uleb128 .LEHE167-.LEHB167
 8897 04b2 2B       		.uleb128 .L440-.LFB1688
 8898 04b3 00       		.uleb128 0
 8899 04b4 44       		.uleb128 .LEHB168-.LFB1688
 8900 04b5 05       		.uleb128 .LEHE168-.LEHB168
 8901 04b6 00       		.uleb128 0
 8902 04b7 00       		.uleb128 0
 8903              	.LLSDACSE1688:
 8904              		.text
 8906              		.section	.data.rel.ro.local
 8907              		.align 8
 8910              	_ZTVN12_GLOBAL__N_123TestCheckAssertSucceedsE:
 8911 0118 00000000 		.quad	0
 8911      00000000 
 8912 0120 00000000 		.quad	_ZTIN12_GLOBAL__N_123TestCheckAssertSucceedsE
 8912      00000000 
 8913 0128 00000000 		.quad	_ZN12_GLOBAL__N_123TestCheckAssertSucceedsD1Ev
 8913      00000000 
 8914 0130 00000000 		.quad	_ZN12_GLOBAL__N_123TestCheckAssertSucceedsD0Ev
 8914      00000000 
 8915 0138 00000000 		.quad	_ZNK12_GLOBAL__N_123TestCheckAssertSucceeds7RunImplEv
 8915      00000000 
 8916              		.text
 8917 27c7 90       		.align 2
 8919              	_ZN12_GLOBAL__N_123TestCheckAssertSucceedsD2Ev:
 8920              	.LFB1690:
  65:TestUnitTest++.cpp **** {
 8921              		.loc 5 65 1 is_stmt 1
 8922              		.cfi_startproc
 8923 27c8 F30F1EFA 		endbr64
 8924 27cc 55       		pushq	%rbp
 8925              		.cfi_def_cfa_offset 16
 8926              		.cfi_offset 6, -16
 8927 27cd 4889E5   		movq	%rsp, %rbp
 8928              		.cfi_def_cfa_register 6
 8929 27d0 4883EC10 		subq	$16, %rsp
 8930 27d4 48897DF8 		movq	%rdi, -8(%rbp)
 8931              	.LBB122:
  65:TestUnitTest++.cpp **** {
 8932              		.loc 5 65 1
 8933 27d8 488D1500 		leaq	16+_ZTVN12_GLOBAL__N_123TestCheckAssertSucceedsE(%rip), %rdx
 8933      000000
 8934 27df 488B45F8 		movq	-8(%rbp), %rax
 8935 27e3 488910   		movq	%rdx, (%rax)
 8936 27e6 488B45F8 		movq	-8(%rbp), %rax
 8937 27ea 4889C7   		movq	%rax, %rdi
 8938 27ed E8000000 		call	_ZN8UnitTest4TestD2Ev@PLT
 8938      00
 8939              	.LBE122:
 8940 27f2 90       		nop
 8941 27f3 C9       		leave
 8942              		.cfi_def_cfa 7, 8
 8943 27f4 C3       		ret
 8944              		.cfi_endproc
 8945              	.LFE1690:
 8947              		.set	_ZN12_GLOBAL__N_123TestCheckAssertSucceedsD1Ev,_ZN12_GLOBAL__N_123TestCheckAssertSucceedsD2Ev
 8948 27f5 90       		.align 2
 8950              	_ZN12_GLOBAL__N_123TestCheckAssertSucceedsD0Ev:
 8951              	.LFB1692:
  65:TestUnitTest++.cpp **** {
 8952              		.loc 5 65 1
 8953              		.cfi_startproc
 8954              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 8955              		.cfi_lsda 0x1b,.LLSDA1692
 8956 27f6 F30F1EFA 		endbr64
 8957 27fa 55       		pushq	%rbp
 8958              		.cfi_def_cfa_offset 16
 8959              		.cfi_offset 6, -16
 8960 27fb 4889E5   		movq	%rsp, %rbp
 8961              		.cfi_def_cfa_register 6
 8962 27fe 53       		pushq	%rbx
 8963 27ff 4883EC18 		subq	$24, %rsp
 8964              		.cfi_offset 3, -24
 8965 2803 48897DE8 		movq	%rdi, -24(%rbp)
  65:TestUnitTest++.cpp **** {
 8966              		.loc 5 65 1
 8967 2807 488B45E8 		movq	-24(%rbp), %rax
 8968 280b 4889C7   		movq	%rax, %rdi
 8969              	.LEHB169:
 8970 280e E8B5FFFF 		call	_ZN12_GLOBAL__N_123TestCheckAssertSucceedsD1Ev
 8970      FF
 8971              	.LEHE169:
  65:TestUnitTest++.cpp **** {
 8972              		.loc 5 65 1 is_stmt 0 discriminator 2
 8973 2813 488B45E8 		movq	-24(%rbp), %rax
 8974 2817 4889C7   		movq	%rax, %rdi
 8975 281a E8000000 		call	_ZdlPv@PLT
 8975      00
 8976 281f EB1E     		jmp	.L446
 8977              	.L445:
 8978 2821 F30F1EFA 		endbr64
  65:TestUnitTest++.cpp **** {
 8979              		.loc 5 65 1
 8980 2825 4889C3   		movq	%rax, %rbx
 8981 2828 488B45E8 		movq	-24(%rbp), %rax
 8982 282c 4889C7   		movq	%rax, %rdi
 8983 282f E8000000 		call	_ZdlPv@PLT
 8983      00
 8984 2834 4889D8   		movq	%rbx, %rax
 8985 2837 4889C7   		movq	%rax, %rdi
 8986              	.LEHB170:
 8987 283a E8000000 		call	_Unwind_Resume@PLT
 8987      00
 8988              	.LEHE170:
 8989              	.L446:
 8990 283f 488B5DF8 		movq	-8(%rbp), %rbx
 8991 2843 C9       		leave
 8992              		.cfi_def_cfa 7, 8
 8993 2844 C3       		ret
 8994              		.cfi_endproc
 8995              	.LFE1692:
 8996              		.section	.gcc_except_table
 8997              	.LLSDA1692:
 8998 04b8 FF       		.byte	0xff
 8999 04b9 FF       		.byte	0xff
 9000 04ba 01       		.byte	0x1
 9001 04bb 08       		.uleb128 .LLSDACSE1692-.LLSDACSB1692
 9002              	.LLSDACSB1692:
 9003 04bc 18       		.uleb128 .LEHB169-.LFB1692
 9004 04bd 05       		.uleb128 .LEHE169-.LEHB169
 9005 04be 2B       		.uleb128 .L445-.LFB1692
 9006 04bf 00       		.uleb128 0
 9007 04c0 44       		.uleb128 .LEHB170-.LFB1692
 9008 04c1 05       		.uleb128 .LEHE170-.LEHB170
 9009 04c2 00       		.uleb128 0
 9010 04c3 00       		.uleb128 0
 9011              	.LLSDACSE1692:
 9012              		.text
 9014              		.section	.data.rel.ro.local
 9015              		.align 8
 9018              	_ZTVN12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectExceptionE:
 9019 0140 00000000 		.quad	0
 9019      00000000 
 9020 0148 00000000 		.quad	_ZTIN12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectExceptionE
 9020      00000000 
 9021 0150 00000000 		.quad	_ZN12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectExceptionD1Ev
 9021      00000000 
 9022 0158 00000000 		.quad	_ZN12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectExceptionD0Ev
 9022      00000000 
 9023 0160 00000000 		.quad	_ZNK12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectException7RunImplEv
 9023      00000000 
 9024              		.text
 9025 2845 90       		.align 2
 9027              	_ZN12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectExceptionD2Ev:
 9028              	.LFB1694:
  59:TestUnitTest++.cpp **** {
 9029              		.loc 5 59 1 is_stmt 1
 9030              		.cfi_startproc
 9031 2846 F30F1EFA 		endbr64
 9032 284a 55       		pushq	%rbp
 9033              		.cfi_def_cfa_offset 16
 9034              		.cfi_offset 6, -16
 9035 284b 4889E5   		movq	%rsp, %rbp
 9036              		.cfi_def_cfa_register 6
 9037 284e 4883EC10 		subq	$16, %rsp
 9038 2852 48897DF8 		movq	%rdi, -8(%rbp)
 9039              	.LBB123:
  59:TestUnitTest++.cpp **** {
 9040              		.loc 5 59 1
 9041 2856 488D1500 		leaq	16+_ZTVN12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectExceptionE(%rip), %rdx
 9041      000000
 9042 285d 488B45F8 		movq	-8(%rbp), %rax
 9043 2861 488910   		movq	%rdx, (%rax)
 9044 2864 488B45F8 		movq	-8(%rbp), %rax
 9045 2868 4889C7   		movq	%rax, %rdi
 9046 286b E8000000 		call	_ZN8UnitTest4TestD2Ev@PLT
 9046      00
 9047              	.LBE123:
 9048 2870 90       		nop
 9049 2871 C9       		leave
 9050              		.cfi_def_cfa 7, 8
 9051 2872 C3       		ret
 9052              		.cfi_endproc
 9053              	.LFE1694:
 9055              		.set	_ZN12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectExceptionD1Ev,_ZN12_GLOBAL__N_145TestC
 9056 2873 90       		.align 2
 9058              	_ZN12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectExceptionD0Ev:
 9059              	.LFB1696:
  59:TestUnitTest++.cpp **** {
 9060              		.loc 5 59 1
 9061              		.cfi_startproc
 9062              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 9063              		.cfi_lsda 0x1b,.LLSDA1696
 9064 2874 F30F1EFA 		endbr64
 9065 2878 55       		pushq	%rbp
 9066              		.cfi_def_cfa_offset 16
 9067              		.cfi_offset 6, -16
 9068 2879 4889E5   		movq	%rsp, %rbp
 9069              		.cfi_def_cfa_register 6
 9070 287c 53       		pushq	%rbx
 9071 287d 4883EC18 		subq	$24, %rsp
 9072              		.cfi_offset 3, -24
 9073 2881 48897DE8 		movq	%rdi, -24(%rbp)
  59:TestUnitTest++.cpp **** {
 9074              		.loc 5 59 1
 9075 2885 488B45E8 		movq	-24(%rbp), %rax
 9076 2889 4889C7   		movq	%rax, %rdi
 9077              	.LEHB171:
 9078 288c E8B5FFFF 		call	_ZN12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectExceptionD1Ev
 9078      FF
 9079              	.LEHE171:
  59:TestUnitTest++.cpp **** {
 9080              		.loc 5 59 1 is_stmt 0 discriminator 2
 9081 2891 488B45E8 		movq	-24(%rbp), %rax
 9082 2895 4889C7   		movq	%rax, %rdi
 9083 2898 E8000000 		call	_ZdlPv@PLT
 9083      00
 9084 289d EB1E     		jmp	.L451
 9085              	.L450:
 9086 289f F30F1EFA 		endbr64
  59:TestUnitTest++.cpp **** {
 9087              		.loc 5 59 1
 9088 28a3 4889C3   		movq	%rax, %rbx
 9089 28a6 488B45E8 		movq	-24(%rbp), %rax
 9090 28aa 4889C7   		movq	%rax, %rdi
 9091 28ad E8000000 		call	_ZdlPv@PLT
 9091      00
 9092 28b2 4889D8   		movq	%rbx, %rax
 9093 28b5 4889C7   		movq	%rax, %rdi
 9094              	.LEHB172:
 9095 28b8 E8000000 		call	_Unwind_Resume@PLT
 9095      00
 9096              	.LEHE172:
 9097              	.L451:
 9098 28bd 488B5DF8 		movq	-8(%rbp), %rbx
 9099 28c1 C9       		leave
 9100              		.cfi_def_cfa 7, 8
 9101 28c2 C3       		ret
 9102              		.cfi_endproc
 9103              	.LFE1696:
 9104              		.section	.gcc_except_table
 9105              	.LLSDA1696:
 9106 04c4 FF       		.byte	0xff
 9107 04c5 FF       		.byte	0xff
 9108 04c6 01       		.byte	0x1
 9109 04c7 08       		.uleb128 .LLSDACSE1696-.LLSDACSB1696
 9110              	.LLSDACSB1696:
 9111 04c8 18       		.uleb128 .LEHB171-.LFB1696
 9112 04c9 05       		.uleb128 .LEHE171-.LEHB171
 9113 04ca 2B       		.uleb128 .L450-.LFB1696
 9114 04cb 00       		.uleb128 0
 9115 04cc 44       		.uleb128 .LEHB172-.LFB1696
 9116 04cd 05       		.uleb128 .LEHE172-.LEHB172
 9117 04ce 00       		.uleb128 0
 9118 04cf 00       		.uleb128 0
 9119              	.LLSDACSE1696:
 9120              		.text
 9122              		.section	.data.rel.ro.local
 9123              		.align 8
 9126              	_ZTVN12_GLOBAL__N_135TestCheckArrayCloseWorksWithVectorsE:
 9127 0168 00000000 		.quad	0
 9127      00000000 
 9128 0170 00000000 		.quad	_ZTIN12_GLOBAL__N_135TestCheckArrayCloseWorksWithVectorsE
 9128      00000000 
 9129 0178 00000000 		.quad	_ZN12_GLOBAL__N_135TestCheckArrayCloseWorksWithVectorsD1Ev
 9129      00000000 
 9130 0180 00000000 		.quad	_ZN12_GLOBAL__N_135TestCheckArrayCloseWorksWithVectorsD0Ev
 9130      00000000 
 9131 0188 00000000 		.quad	_ZNK12_GLOBAL__N_135TestCheckArrayCloseWorksWithVectors7RunImplEv
 9131      00000000 
 9132              		.text
 9133 28c3 90       		.align 2
 9135              	_ZN12_GLOBAL__N_135TestCheckArrayCloseWorksWithVectorsD2Ev:
 9136              	.LFB1698:
  50:TestUnitTest++.cpp **** {
 9137              		.loc 5 50 1 is_stmt 1
 9138              		.cfi_startproc
 9139 28c4 F30F1EFA 		endbr64
 9140 28c8 55       		pushq	%rbp
 9141              		.cfi_def_cfa_offset 16
 9142              		.cfi_offset 6, -16
 9143 28c9 4889E5   		movq	%rsp, %rbp
 9144              		.cfi_def_cfa_register 6
 9145 28cc 4883EC10 		subq	$16, %rsp
 9146 28d0 48897DF8 		movq	%rdi, -8(%rbp)
 9147              	.LBB124:
  50:TestUnitTest++.cpp **** {
 9148              		.loc 5 50 1
 9149 28d4 488D1500 		leaq	16+_ZTVN12_GLOBAL__N_135TestCheckArrayCloseWorksWithVectorsE(%rip), %rdx
 9149      000000
 9150 28db 488B45F8 		movq	-8(%rbp), %rax
 9151 28df 488910   		movq	%rdx, (%rax)
 9152 28e2 488B45F8 		movq	-8(%rbp), %rax
 9153 28e6 4889C7   		movq	%rax, %rdi
 9154 28e9 E8000000 		call	_ZN8UnitTest4TestD2Ev@PLT
 9154      00
 9155              	.LBE124:
 9156 28ee 90       		nop
 9157 28ef C9       		leave
 9158              		.cfi_def_cfa 7, 8
 9159 28f0 C3       		ret
 9160              		.cfi_endproc
 9161              	.LFE1698:
 9163              		.set	_ZN12_GLOBAL__N_135TestCheckArrayCloseWorksWithVectorsD1Ev,_ZN12_GLOBAL__N_135TestCheckArrayC
 9164 28f1 90       		.align 2
 9166              	_ZN12_GLOBAL__N_135TestCheckArrayCloseWorksWithVectorsD0Ev:
 9167              	.LFB1700:
  50:TestUnitTest++.cpp **** {
 9168              		.loc 5 50 1
 9169              		.cfi_startproc
 9170              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 9171              		.cfi_lsda 0x1b,.LLSDA1700
 9172 28f2 F30F1EFA 		endbr64
 9173 28f6 55       		pushq	%rbp
 9174              		.cfi_def_cfa_offset 16
 9175              		.cfi_offset 6, -16
 9176 28f7 4889E5   		movq	%rsp, %rbp
 9177              		.cfi_def_cfa_register 6
 9178 28fa 53       		pushq	%rbx
 9179 28fb 4883EC18 		subq	$24, %rsp
 9180              		.cfi_offset 3, -24
 9181 28ff 48897DE8 		movq	%rdi, -24(%rbp)
  50:TestUnitTest++.cpp **** {
 9182              		.loc 5 50 1
 9183 2903 488B45E8 		movq	-24(%rbp), %rax
 9184 2907 4889C7   		movq	%rax, %rdi
 9185              	.LEHB173:
 9186 290a E8B5FFFF 		call	_ZN12_GLOBAL__N_135TestCheckArrayCloseWorksWithVectorsD1Ev
 9186      FF
 9187              	.LEHE173:
  50:TestUnitTest++.cpp **** {
 9188              		.loc 5 50 1 is_stmt 0 discriminator 2
 9189 290f 488B45E8 		movq	-24(%rbp), %rax
 9190 2913 4889C7   		movq	%rax, %rdi
 9191 2916 E8000000 		call	_ZdlPv@PLT
 9191      00
 9192 291b EB1E     		jmp	.L456
 9193              	.L455:
 9194 291d F30F1EFA 		endbr64
  50:TestUnitTest++.cpp **** {
 9195              		.loc 5 50 1
 9196 2921 4889C3   		movq	%rax, %rbx
 9197 2924 488B45E8 		movq	-24(%rbp), %rax
 9198 2928 4889C7   		movq	%rax, %rdi
 9199 292b E8000000 		call	_ZdlPv@PLT
 9199      00
 9200 2930 4889D8   		movq	%rbx, %rax
 9201 2933 4889C7   		movq	%rax, %rdi
 9202              	.LEHB174:
 9203 2936 E8000000 		call	_Unwind_Resume@PLT
 9203      00
 9204              	.LEHE174:
 9205              	.L456:
 9206 293b 488B5DF8 		movq	-8(%rbp), %rbx
 9207 293f C9       		leave
 9208              		.cfi_def_cfa 7, 8
 9209 2940 C3       		ret
 9210              		.cfi_endproc
 9211              	.LFE1700:
 9212              		.section	.gcc_except_table
 9213              	.LLSDA1700:
 9214 04d0 FF       		.byte	0xff
 9215 04d1 FF       		.byte	0xff
 9216 04d2 01       		.byte	0x1
 9217 04d3 08       		.uleb128 .LLSDACSE1700-.LLSDACSB1700
 9218              	.LLSDACSB1700:
 9219 04d4 18       		.uleb128 .LEHB173-.LFB1700
 9220 04d5 05       		.uleb128 .LEHE173-.LEHB173
 9221 04d6 2B       		.uleb128 .L455-.LFB1700
 9222 04d7 00       		.uleb128 0
 9223 04d8 44       		.uleb128 .LEHB174-.LFB1700
 9224 04d9 05       		.uleb128 .LEHE174-.LEHB174
 9225 04da 00       		.uleb128 0
 9226 04db 00       		.uleb128 0
 9227              	.LLSDACSE1700:
 9228              		.text
 9230              		.section	.data.rel.ro.local
 9231              		.align 8
 9234              	_ZTVN12_GLOBAL__N_122TestArrayCloseSucceedsE:
 9235 0190 00000000 		.quad	0
 9235      00000000 
 9236 0198 00000000 		.quad	_ZTIN12_GLOBAL__N_122TestArrayCloseSucceedsE
 9236      00000000 
 9237 01a0 00000000 		.quad	_ZN12_GLOBAL__N_122TestArrayCloseSucceedsD1Ev
 9237      00000000 
 9238 01a8 00000000 		.quad	_ZN12_GLOBAL__N_122TestArrayCloseSucceedsD0Ev
 9238      00000000 
 9239 01b0 00000000 		.quad	_ZNK12_GLOBAL__N_122TestArrayCloseSucceeds7RunImplEv
 9239      00000000 
 9240              		.text
 9241 2941 90       		.align 2
 9243              	_ZN12_GLOBAL__N_122TestArrayCloseSucceedsD2Ev:
 9244              	.LFB1702:
  43:TestUnitTest++.cpp **** {
 9245              		.loc 5 43 1 is_stmt 1
 9246              		.cfi_startproc
 9247 2942 F30F1EFA 		endbr64
 9248 2946 55       		pushq	%rbp
 9249              		.cfi_def_cfa_offset 16
 9250              		.cfi_offset 6, -16
 9251 2947 4889E5   		movq	%rsp, %rbp
 9252              		.cfi_def_cfa_register 6
 9253 294a 4883EC10 		subq	$16, %rsp
 9254 294e 48897DF8 		movq	%rdi, -8(%rbp)
 9255              	.LBB125:
  43:TestUnitTest++.cpp **** {
 9256              		.loc 5 43 1
 9257 2952 488D1500 		leaq	16+_ZTVN12_GLOBAL__N_122TestArrayCloseSucceedsE(%rip), %rdx
 9257      000000
 9258 2959 488B45F8 		movq	-8(%rbp), %rax
 9259 295d 488910   		movq	%rdx, (%rax)
 9260 2960 488B45F8 		movq	-8(%rbp), %rax
 9261 2964 4889C7   		movq	%rax, %rdi
 9262 2967 E8000000 		call	_ZN8UnitTest4TestD2Ev@PLT
 9262      00
 9263              	.LBE125:
 9264 296c 90       		nop
 9265 296d C9       		leave
 9266              		.cfi_def_cfa 7, 8
 9267 296e C3       		ret
 9268              		.cfi_endproc
 9269              	.LFE1702:
 9271              		.set	_ZN12_GLOBAL__N_122TestArrayCloseSucceedsD1Ev,_ZN12_GLOBAL__N_122TestArrayCloseSucceedsD2Ev
 9272 296f 90       		.align 2
 9274              	_ZN12_GLOBAL__N_122TestArrayCloseSucceedsD0Ev:
 9275              	.LFB1704:
  43:TestUnitTest++.cpp **** {
 9276              		.loc 5 43 1
 9277              		.cfi_startproc
 9278              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 9279              		.cfi_lsda 0x1b,.LLSDA1704
 9280 2970 F30F1EFA 		endbr64
 9281 2974 55       		pushq	%rbp
 9282              		.cfi_def_cfa_offset 16
 9283              		.cfi_offset 6, -16
 9284 2975 4889E5   		movq	%rsp, %rbp
 9285              		.cfi_def_cfa_register 6
 9286 2978 53       		pushq	%rbx
 9287 2979 4883EC18 		subq	$24, %rsp
 9288              		.cfi_offset 3, -24
 9289 297d 48897DE8 		movq	%rdi, -24(%rbp)
  43:TestUnitTest++.cpp **** {
 9290              		.loc 5 43 1
 9291 2981 488B45E8 		movq	-24(%rbp), %rax
 9292 2985 4889C7   		movq	%rax, %rdi
 9293              	.LEHB175:
 9294 2988 E8B5FFFF 		call	_ZN12_GLOBAL__N_122TestArrayCloseSucceedsD1Ev
 9294      FF
 9295              	.LEHE175:
  43:TestUnitTest++.cpp **** {
 9296              		.loc 5 43 1 is_stmt 0 discriminator 2
 9297 298d 488B45E8 		movq	-24(%rbp), %rax
 9298 2991 4889C7   		movq	%rax, %rdi
 9299 2994 E8000000 		call	_ZdlPv@PLT
 9299      00
 9300 2999 EB1E     		jmp	.L461
 9301              	.L460:
 9302 299b F30F1EFA 		endbr64
  43:TestUnitTest++.cpp **** {
 9303              		.loc 5 43 1
 9304 299f 4889C3   		movq	%rax, %rbx
 9305 29a2 488B45E8 		movq	-24(%rbp), %rax
 9306 29a6 4889C7   		movq	%rax, %rdi
 9307 29a9 E8000000 		call	_ZdlPv@PLT
 9307      00
 9308 29ae 4889D8   		movq	%rbx, %rax
 9309 29b1 4889C7   		movq	%rax, %rdi
 9310              	.LEHB176:
 9311 29b4 E8000000 		call	_Unwind_Resume@PLT
 9311      00
 9312              	.LEHE176:
 9313              	.L461:
 9314 29b9 488B5DF8 		movq	-8(%rbp), %rbx
 9315 29bd C9       		leave
 9316              		.cfi_def_cfa 7, 8
 9317 29be C3       		ret
 9318              		.cfi_endproc
 9319              	.LFE1704:
 9320              		.section	.gcc_except_table
 9321              	.LLSDA1704:
 9322 04dc FF       		.byte	0xff
 9323 04dd FF       		.byte	0xff
 9324 04de 01       		.byte	0x1
 9325 04df 08       		.uleb128 .LLSDACSE1704-.LLSDACSB1704
 9326              	.LLSDACSB1704:
 9327 04e0 18       		.uleb128 .LEHB175-.LFB1704
 9328 04e1 05       		.uleb128 .LEHE175-.LEHB175
 9329 04e2 2B       		.uleb128 .L460-.LFB1704
 9330 04e3 00       		.uleb128 0
 9331 04e4 44       		.uleb128 .LEHB176-.LFB1704
 9332 04e5 05       		.uleb128 .LEHE176-.LEHB176
 9333 04e6 00       		.uleb128 0
 9334 04e7 00       		.uleb128 0
 9335              	.LLSDACSE1704:
 9336              		.text
 9338              		.section	.data.rel.ro.local
 9339              		.align 8
 9342              	_ZTVN12_GLOBAL__N_127TestValidCheckCloseSucceedsE:
 9343 01b8 00000000 		.quad	0
 9343      00000000 
 9344 01c0 00000000 		.quad	_ZTIN12_GLOBAL__N_127TestValidCheckCloseSucceedsE
 9344      00000000 
 9345 01c8 00000000 		.quad	_ZN12_GLOBAL__N_127TestValidCheckCloseSucceedsD1Ev
 9345      00000000 
 9346 01d0 00000000 		.quad	_ZN12_GLOBAL__N_127TestValidCheckCloseSucceedsD0Ev
 9346      00000000 
 9347 01d8 00000000 		.quad	_ZNK12_GLOBAL__N_127TestValidCheckCloseSucceeds7RunImplEv
 9347      00000000 
 9348              		.text
 9349 29bf 90       		.align 2
 9351              	_ZN12_GLOBAL__N_127TestValidCheckCloseSucceedsD2Ev:
 9352              	.LFB1706:
  37:TestUnitTest++.cpp **** {
 9353              		.loc 5 37 1 is_stmt 1
 9354              		.cfi_startproc
 9355 29c0 F30F1EFA 		endbr64
 9356 29c4 55       		pushq	%rbp
 9357              		.cfi_def_cfa_offset 16
 9358              		.cfi_offset 6, -16
 9359 29c5 4889E5   		movq	%rsp, %rbp
 9360              		.cfi_def_cfa_register 6
 9361 29c8 4883EC10 		subq	$16, %rsp
 9362 29cc 48897DF8 		movq	%rdi, -8(%rbp)
 9363              	.LBB126:
  37:TestUnitTest++.cpp **** {
 9364              		.loc 5 37 1
 9365 29d0 488D1500 		leaq	16+_ZTVN12_GLOBAL__N_127TestValidCheckCloseSucceedsE(%rip), %rdx
 9365      000000
 9366 29d7 488B45F8 		movq	-8(%rbp), %rax
 9367 29db 488910   		movq	%rdx, (%rax)
 9368 29de 488B45F8 		movq	-8(%rbp), %rax
 9369 29e2 4889C7   		movq	%rax, %rdi
 9370 29e5 E8000000 		call	_ZN8UnitTest4TestD2Ev@PLT
 9370      00
 9371              	.LBE126:
 9372 29ea 90       		nop
 9373 29eb C9       		leave
 9374              		.cfi_def_cfa 7, 8
 9375 29ec C3       		ret
 9376              		.cfi_endproc
 9377              	.LFE1706:
 9379              		.set	_ZN12_GLOBAL__N_127TestValidCheckCloseSucceedsD1Ev,_ZN12_GLOBAL__N_127TestValidCheckCloseSucc
 9380 29ed 90       		.align 2
 9382              	_ZN12_GLOBAL__N_127TestValidCheckCloseSucceedsD0Ev:
 9383              	.LFB1708:
  37:TestUnitTest++.cpp **** {
 9384              		.loc 5 37 1
 9385              		.cfi_startproc
 9386              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 9387              		.cfi_lsda 0x1b,.LLSDA1708
 9388 29ee F30F1EFA 		endbr64
 9389 29f2 55       		pushq	%rbp
 9390              		.cfi_def_cfa_offset 16
 9391              		.cfi_offset 6, -16
 9392 29f3 4889E5   		movq	%rsp, %rbp
 9393              		.cfi_def_cfa_register 6
 9394 29f6 53       		pushq	%rbx
 9395 29f7 4883EC18 		subq	$24, %rsp
 9396              		.cfi_offset 3, -24
 9397 29fb 48897DE8 		movq	%rdi, -24(%rbp)
  37:TestUnitTest++.cpp **** {
 9398              		.loc 5 37 1
 9399 29ff 488B45E8 		movq	-24(%rbp), %rax
 9400 2a03 4889C7   		movq	%rax, %rdi
 9401              	.LEHB177:
 9402 2a06 E8B5FFFF 		call	_ZN12_GLOBAL__N_127TestValidCheckCloseSucceedsD1Ev
 9402      FF
 9403              	.LEHE177:
  37:TestUnitTest++.cpp **** {
 9404              		.loc 5 37 1 is_stmt 0 discriminator 2
 9405 2a0b 488B45E8 		movq	-24(%rbp), %rax
 9406 2a0f 4889C7   		movq	%rax, %rdi
 9407 2a12 E8000000 		call	_ZdlPv@PLT
 9407      00
 9408 2a17 EB1E     		jmp	.L466
 9409              	.L465:
 9410 2a19 F30F1EFA 		endbr64
  37:TestUnitTest++.cpp **** {
 9411              		.loc 5 37 1
 9412 2a1d 4889C3   		movq	%rax, %rbx
 9413 2a20 488B45E8 		movq	-24(%rbp), %rax
 9414 2a24 4889C7   		movq	%rax, %rdi
 9415 2a27 E8000000 		call	_ZdlPv@PLT
 9415      00
 9416 2a2c 4889D8   		movq	%rbx, %rax
 9417 2a2f 4889C7   		movq	%rax, %rdi
 9418              	.LEHB178:
 9419 2a32 E8000000 		call	_Unwind_Resume@PLT
 9419      00
 9420              	.LEHE178:
 9421              	.L466:
 9422 2a37 488B5DF8 		movq	-8(%rbp), %rbx
 9423 2a3b C9       		leave
 9424              		.cfi_def_cfa 7, 8
 9425 2a3c C3       		ret
 9426              		.cfi_endproc
 9427              	.LFE1708:
 9428              		.section	.gcc_except_table
 9429              	.LLSDA1708:
 9430 04e8 FF       		.byte	0xff
 9431 04e9 FF       		.byte	0xff
 9432 04ea 01       		.byte	0x1
 9433 04eb 08       		.uleb128 .LLSDACSE1708-.LLSDACSB1708
 9434              	.LLSDACSB1708:
 9435 04ec 18       		.uleb128 .LEHB177-.LFB1708
 9436 04ed 05       		.uleb128 .LEHE177-.LEHB177
 9437 04ee 2B       		.uleb128 .L465-.LFB1708
 9438 04ef 00       		.uleb128 0
 9439 04f0 44       		.uleb128 .LEHB178-.LFB1708
 9440 04f1 05       		.uleb128 .LEHE178-.LEHB178
 9441 04f2 00       		.uleb128 0
 9442 04f3 00       		.uleb128 0
 9443              	.LLSDACSE1708:
 9444              		.text
 9446              		.section	.data.rel.ro.local
 9447              		.align 8
 9450              	_ZTVN12_GLOBAL__N_131TestCheckEqualWorksWithPointersE:
 9451 01e0 00000000 		.quad	0
 9451      00000000 
 9452 01e8 00000000 		.quad	_ZTIN12_GLOBAL__N_131TestCheckEqualWorksWithPointersE
 9452      00000000 
 9453 01f0 00000000 		.quad	_ZN12_GLOBAL__N_131TestCheckEqualWorksWithPointersD1Ev
 9453      00000000 
 9454 01f8 00000000 		.quad	_ZN12_GLOBAL__N_131TestCheckEqualWorksWithPointersD0Ev
 9454      00000000 
 9455 0200 00000000 		.quad	_ZNK12_GLOBAL__N_131TestCheckEqualWorksWithPointers7RunImplEv
 9455      00000000 
 9456              		.text
 9457 2a3d 90       		.align 2
 9459              	_ZN12_GLOBAL__N_131TestCheckEqualWorksWithPointersD2Ev:
 9460              	.LFB1710:
  31:TestUnitTest++.cpp **** {
 9461              		.loc 5 31 1 is_stmt 1
 9462              		.cfi_startproc
 9463 2a3e F30F1EFA 		endbr64
 9464 2a42 55       		pushq	%rbp
 9465              		.cfi_def_cfa_offset 16
 9466              		.cfi_offset 6, -16
 9467 2a43 4889E5   		movq	%rsp, %rbp
 9468              		.cfi_def_cfa_register 6
 9469 2a46 4883EC10 		subq	$16, %rsp
 9470 2a4a 48897DF8 		movq	%rdi, -8(%rbp)
 9471              	.LBB127:
  31:TestUnitTest++.cpp **** {
 9472              		.loc 5 31 1
 9473 2a4e 488D1500 		leaq	16+_ZTVN12_GLOBAL__N_131TestCheckEqualWorksWithPointersE(%rip), %rdx
 9473      000000
 9474 2a55 488B45F8 		movq	-8(%rbp), %rax
 9475 2a59 488910   		movq	%rdx, (%rax)
 9476 2a5c 488B45F8 		movq	-8(%rbp), %rax
 9477 2a60 4889C7   		movq	%rax, %rdi
 9478 2a63 E8000000 		call	_ZN8UnitTest4TestD2Ev@PLT
 9478      00
 9479              	.LBE127:
 9480 2a68 90       		nop
 9481 2a69 C9       		leave
 9482              		.cfi_def_cfa 7, 8
 9483 2a6a C3       		ret
 9484              		.cfi_endproc
 9485              	.LFE1710:
 9487              		.set	_ZN12_GLOBAL__N_131TestCheckEqualWorksWithPointersD1Ev,_ZN12_GLOBAL__N_131TestCheckEqualWorks
 9488 2a6b 90       		.align 2
 9490              	_ZN12_GLOBAL__N_131TestCheckEqualWorksWithPointersD0Ev:
 9491              	.LFB1712:
  31:TestUnitTest++.cpp **** {
 9492              		.loc 5 31 1
 9493              		.cfi_startproc
 9494              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 9495              		.cfi_lsda 0x1b,.LLSDA1712
 9496 2a6c F30F1EFA 		endbr64
 9497 2a70 55       		pushq	%rbp
 9498              		.cfi_def_cfa_offset 16
 9499              		.cfi_offset 6, -16
 9500 2a71 4889E5   		movq	%rsp, %rbp
 9501              		.cfi_def_cfa_register 6
 9502 2a74 53       		pushq	%rbx
 9503 2a75 4883EC18 		subq	$24, %rsp
 9504              		.cfi_offset 3, -24
 9505 2a79 48897DE8 		movq	%rdi, -24(%rbp)
  31:TestUnitTest++.cpp **** {
 9506              		.loc 5 31 1
 9507 2a7d 488B45E8 		movq	-24(%rbp), %rax
 9508 2a81 4889C7   		movq	%rax, %rdi
 9509              	.LEHB179:
 9510 2a84 E8B5FFFF 		call	_ZN12_GLOBAL__N_131TestCheckEqualWorksWithPointersD1Ev
 9510      FF
 9511              	.LEHE179:
  31:TestUnitTest++.cpp **** {
 9512              		.loc 5 31 1 is_stmt 0 discriminator 2
 9513 2a89 488B45E8 		movq	-24(%rbp), %rax
 9514 2a8d 4889C7   		movq	%rax, %rdi
 9515 2a90 E8000000 		call	_ZdlPv@PLT
 9515      00
 9516 2a95 EB1E     		jmp	.L471
 9517              	.L470:
 9518 2a97 F30F1EFA 		endbr64
  31:TestUnitTest++.cpp **** {
 9519              		.loc 5 31 1
 9520 2a9b 4889C3   		movq	%rax, %rbx
 9521 2a9e 488B45E8 		movq	-24(%rbp), %rax
 9522 2aa2 4889C7   		movq	%rax, %rdi
 9523 2aa5 E8000000 		call	_ZdlPv@PLT
 9523      00
 9524 2aaa 4889D8   		movq	%rbx, %rax
 9525 2aad 4889C7   		movq	%rax, %rdi
 9526              	.LEHB180:
 9527 2ab0 E8000000 		call	_Unwind_Resume@PLT
 9527      00
 9528              	.LEHE180:
 9529              	.L471:
 9530 2ab5 488B5DF8 		movq	-8(%rbp), %rbx
 9531 2ab9 C9       		leave
 9532              		.cfi_def_cfa 7, 8
 9533 2aba C3       		ret
 9534              		.cfi_endproc
 9535              	.LFE1712:
 9536              		.section	.gcc_except_table
 9537              	.LLSDA1712:
 9538 04f4 FF       		.byte	0xff
 9539 04f5 FF       		.byte	0xff
 9540 04f6 01       		.byte	0x1
 9541 04f7 08       		.uleb128 .LLSDACSE1712-.LLSDACSB1712
 9542              	.LLSDACSB1712:
 9543 04f8 18       		.uleb128 .LEHB179-.LFB1712
 9544 04f9 05       		.uleb128 .LEHE179-.LEHB179
 9545 04fa 2B       		.uleb128 .L470-.LFB1712
 9546 04fb 00       		.uleb128 0
 9547 04fc 44       		.uleb128 .LEHB180-.LFB1712
 9548 04fd 05       		.uleb128 .LEHE180-.LEHB180
 9549 04fe 00       		.uleb128 0
 9550 04ff 00       		.uleb128 0
 9551              	.LLSDACSE1712:
 9552              		.text
 9554              		.section	.data.rel.ro.local
 9555              		.align 8
 9558              	_ZTVN12_GLOBAL__N_127TestValidCheckEqualSucceedsE:
 9559 0208 00000000 		.quad	0
 9559      00000000 
 9560 0210 00000000 		.quad	_ZTIN12_GLOBAL__N_127TestValidCheckEqualSucceedsE
 9560      00000000 
 9561 0218 00000000 		.quad	_ZN12_GLOBAL__N_127TestValidCheckEqualSucceedsD1Ev
 9561      00000000 
 9562 0220 00000000 		.quad	_ZN12_GLOBAL__N_127TestValidCheckEqualSucceedsD0Ev
 9562      00000000 
 9563 0228 00000000 		.quad	_ZNK12_GLOBAL__N_127TestValidCheckEqualSucceeds7RunImplEv
 9563      00000000 
 9564              		.text
 9565 2abb 90       		.align 2
 9567              	_ZN12_GLOBAL__N_127TestValidCheckEqualSucceedsD2Ev:
 9568              	.LFB1714:
  24:TestUnitTest++.cpp **** {
 9569              		.loc 5 24 1 is_stmt 1
 9570              		.cfi_startproc
 9571 2abc F30F1EFA 		endbr64
 9572 2ac0 55       		pushq	%rbp
 9573              		.cfi_def_cfa_offset 16
 9574              		.cfi_offset 6, -16
 9575 2ac1 4889E5   		movq	%rsp, %rbp
 9576              		.cfi_def_cfa_register 6
 9577 2ac4 4883EC10 		subq	$16, %rsp
 9578 2ac8 48897DF8 		movq	%rdi, -8(%rbp)
 9579              	.LBB128:
  24:TestUnitTest++.cpp **** {
 9580              		.loc 5 24 1
 9581 2acc 488D1500 		leaq	16+_ZTVN12_GLOBAL__N_127TestValidCheckEqualSucceedsE(%rip), %rdx
 9581      000000
 9582 2ad3 488B45F8 		movq	-8(%rbp), %rax
 9583 2ad7 488910   		movq	%rdx, (%rax)
 9584 2ada 488B45F8 		movq	-8(%rbp), %rax
 9585 2ade 4889C7   		movq	%rax, %rdi
 9586 2ae1 E8000000 		call	_ZN8UnitTest4TestD2Ev@PLT
 9586      00
 9587              	.LBE128:
 9588 2ae6 90       		nop
 9589 2ae7 C9       		leave
 9590              		.cfi_def_cfa 7, 8
 9591 2ae8 C3       		ret
 9592              		.cfi_endproc
 9593              	.LFE1714:
 9595              		.set	_ZN12_GLOBAL__N_127TestValidCheckEqualSucceedsD1Ev,_ZN12_GLOBAL__N_127TestValidCheckEqualSucc
 9596 2ae9 90       		.align 2
 9598              	_ZN12_GLOBAL__N_127TestValidCheckEqualSucceedsD0Ev:
 9599              	.LFB1716:
  24:TestUnitTest++.cpp **** {
 9600              		.loc 5 24 1
 9601              		.cfi_startproc
 9602              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 9603              		.cfi_lsda 0x1b,.LLSDA1716
 9604 2aea F30F1EFA 		endbr64
 9605 2aee 55       		pushq	%rbp
 9606              		.cfi_def_cfa_offset 16
 9607              		.cfi_offset 6, -16
 9608 2aef 4889E5   		movq	%rsp, %rbp
 9609              		.cfi_def_cfa_register 6
 9610 2af2 53       		pushq	%rbx
 9611 2af3 4883EC18 		subq	$24, %rsp
 9612              		.cfi_offset 3, -24
 9613 2af7 48897DE8 		movq	%rdi, -24(%rbp)
  24:TestUnitTest++.cpp **** {
 9614              		.loc 5 24 1
 9615 2afb 488B45E8 		movq	-24(%rbp), %rax
 9616 2aff 4889C7   		movq	%rax, %rdi
 9617              	.LEHB181:
 9618 2b02 E8B5FFFF 		call	_ZN12_GLOBAL__N_127TestValidCheckEqualSucceedsD1Ev
 9618      FF
 9619              	.LEHE181:
  24:TestUnitTest++.cpp **** {
 9620              		.loc 5 24 1 is_stmt 0 discriminator 2
 9621 2b07 488B45E8 		movq	-24(%rbp), %rax
 9622 2b0b 4889C7   		movq	%rax, %rdi
 9623 2b0e E8000000 		call	_ZdlPv@PLT
 9623      00
 9624 2b13 EB1E     		jmp	.L476
 9625              	.L475:
 9626 2b15 F30F1EFA 		endbr64
  24:TestUnitTest++.cpp **** {
 9627              		.loc 5 24 1
 9628 2b19 4889C3   		movq	%rax, %rbx
 9629 2b1c 488B45E8 		movq	-24(%rbp), %rax
 9630 2b20 4889C7   		movq	%rax, %rdi
 9631 2b23 E8000000 		call	_ZdlPv@PLT
 9631      00
 9632 2b28 4889D8   		movq	%rbx, %rax
 9633 2b2b 4889C7   		movq	%rax, %rdi
 9634              	.LEHB182:
 9635 2b2e E8000000 		call	_Unwind_Resume@PLT
 9635      00
 9636              	.LEHE182:
 9637              	.L476:
 9638 2b33 488B5DF8 		movq	-8(%rbp), %rbx
 9639 2b37 C9       		leave
 9640              		.cfi_def_cfa 7, 8
 9641 2b38 C3       		ret
 9642              		.cfi_endproc
 9643              	.LFE1716:
 9644              		.section	.gcc_except_table
 9645              	.LLSDA1716:
 9646 0500 FF       		.byte	0xff
 9647 0501 FF       		.byte	0xff
 9648 0502 01       		.byte	0x1
 9649 0503 08       		.uleb128 .LLSDACSE1716-.LLSDACSB1716
 9650              	.LLSDACSB1716:
 9651 0504 18       		.uleb128 .LEHB181-.LFB1716
 9652 0505 05       		.uleb128 .LEHE181-.LEHB181
 9653 0506 2B       		.uleb128 .L475-.LFB1716
 9654 0507 00       		.uleb128 0
 9655 0508 44       		.uleb128 .LEHB182-.LFB1716
 9656 0509 05       		.uleb128 .LEHE182-.LEHB182
 9657 050a 00       		.uleb128 0
 9658 050b 00       		.uleb128 0
 9659              	.LLSDACSE1716:
 9660              		.text
 9662              		.section	.data.rel.ro.local
 9663              		.align 8
 9666              	_ZTVN12_GLOBAL__N_126TestCheckWorksWithPointersE:
 9667 0230 00000000 		.quad	0
 9667      00000000 
 9668 0238 00000000 		.quad	_ZTIN12_GLOBAL__N_126TestCheckWorksWithPointersE
 9668      00000000 
 9669 0240 00000000 		.quad	_ZN12_GLOBAL__N_126TestCheckWorksWithPointersD1Ev
 9669      00000000 
 9670 0248 00000000 		.quad	_ZN12_GLOBAL__N_126TestCheckWorksWithPointersD0Ev
 9670      00000000 
 9671 0250 00000000 		.quad	_ZNK12_GLOBAL__N_126TestCheckWorksWithPointers7RunImplEv
 9671      00000000 
 9672              		.text
 9673 2b39 90       		.align 2
 9675              	_ZN12_GLOBAL__N_126TestCheckWorksWithPointersD2Ev:
 9676              	.LFB1718:
  17:TestUnitTest++.cpp **** {
 9677              		.loc 5 17 1 is_stmt 1
 9678              		.cfi_startproc
 9679 2b3a F30F1EFA 		endbr64
 9680 2b3e 55       		pushq	%rbp
 9681              		.cfi_def_cfa_offset 16
 9682              		.cfi_offset 6, -16
 9683 2b3f 4889E5   		movq	%rsp, %rbp
 9684              		.cfi_def_cfa_register 6
 9685 2b42 4883EC10 		subq	$16, %rsp
 9686 2b46 48897DF8 		movq	%rdi, -8(%rbp)
 9687              	.LBB129:
  17:TestUnitTest++.cpp **** {
 9688              		.loc 5 17 1
 9689 2b4a 488D1500 		leaq	16+_ZTVN12_GLOBAL__N_126TestCheckWorksWithPointersE(%rip), %rdx
 9689      000000
 9690 2b51 488B45F8 		movq	-8(%rbp), %rax
 9691 2b55 488910   		movq	%rdx, (%rax)
 9692 2b58 488B45F8 		movq	-8(%rbp), %rax
 9693 2b5c 4889C7   		movq	%rax, %rdi
 9694 2b5f E8000000 		call	_ZN8UnitTest4TestD2Ev@PLT
 9694      00
 9695              	.LBE129:
 9696 2b64 90       		nop
 9697 2b65 C9       		leave
 9698              		.cfi_def_cfa 7, 8
 9699 2b66 C3       		ret
 9700              		.cfi_endproc
 9701              	.LFE1718:
 9703              		.set	_ZN12_GLOBAL__N_126TestCheckWorksWithPointersD1Ev,_ZN12_GLOBAL__N_126TestCheckWorksWithPointe
 9704 2b67 90       		.align 2
 9706              	_ZN12_GLOBAL__N_126TestCheckWorksWithPointersD0Ev:
 9707              	.LFB1720:
  17:TestUnitTest++.cpp **** {
 9708              		.loc 5 17 1
 9709              		.cfi_startproc
 9710              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 9711              		.cfi_lsda 0x1b,.LLSDA1720
 9712 2b68 F30F1EFA 		endbr64
 9713 2b6c 55       		pushq	%rbp
 9714              		.cfi_def_cfa_offset 16
 9715              		.cfi_offset 6, -16
 9716 2b6d 4889E5   		movq	%rsp, %rbp
 9717              		.cfi_def_cfa_register 6
 9718 2b70 53       		pushq	%rbx
 9719 2b71 4883EC18 		subq	$24, %rsp
 9720              		.cfi_offset 3, -24
 9721 2b75 48897DE8 		movq	%rdi, -24(%rbp)
  17:TestUnitTest++.cpp **** {
 9722              		.loc 5 17 1
 9723 2b79 488B45E8 		movq	-24(%rbp), %rax
 9724 2b7d 4889C7   		movq	%rax, %rdi
 9725              	.LEHB183:
 9726 2b80 E8B5FFFF 		call	_ZN12_GLOBAL__N_126TestCheckWorksWithPointersD1Ev
 9726      FF
 9727              	.LEHE183:
  17:TestUnitTest++.cpp **** {
 9728              		.loc 5 17 1 is_stmt 0 discriminator 2
 9729 2b85 488B45E8 		movq	-24(%rbp), %rax
 9730 2b89 4889C7   		movq	%rax, %rdi
 9731 2b8c E8000000 		call	_ZdlPv@PLT
 9731      00
 9732 2b91 EB1E     		jmp	.L481
 9733              	.L480:
 9734 2b93 F30F1EFA 		endbr64
  17:TestUnitTest++.cpp **** {
 9735              		.loc 5 17 1
 9736 2b97 4889C3   		movq	%rax, %rbx
 9737 2b9a 488B45E8 		movq	-24(%rbp), %rax
 9738 2b9e 4889C7   		movq	%rax, %rdi
 9739 2ba1 E8000000 		call	_ZdlPv@PLT
 9739      00
 9740 2ba6 4889D8   		movq	%rbx, %rax
 9741 2ba9 4889C7   		movq	%rax, %rdi
 9742              	.LEHB184:
 9743 2bac E8000000 		call	_Unwind_Resume@PLT
 9743      00
 9744              	.LEHE184:
 9745              	.L481:
 9746 2bb1 488B5DF8 		movq	-8(%rbp), %rbx
 9747 2bb5 C9       		leave
 9748              		.cfi_def_cfa 7, 8
 9749 2bb6 C3       		ret
 9750              		.cfi_endproc
 9751              	.LFE1720:
 9752              		.section	.gcc_except_table
 9753              	.LLSDA1720:
 9754 050c FF       		.byte	0xff
 9755 050d FF       		.byte	0xff
 9756 050e 01       		.byte	0x1
 9757 050f 08       		.uleb128 .LLSDACSE1720-.LLSDACSB1720
 9758              	.LLSDACSB1720:
 9759 0510 18       		.uleb128 .LEHB183-.LFB1720
 9760 0511 05       		.uleb128 .LEHE183-.LEHB183
 9761 0512 2B       		.uleb128 .L480-.LFB1720
 9762 0513 00       		.uleb128 0
 9763 0514 44       		.uleb128 .LEHB184-.LFB1720
 9764 0515 05       		.uleb128 .LEHE184-.LEHB184
 9765 0516 00       		.uleb128 0
 9766 0517 00       		.uleb128 0
 9767              	.LLSDACSE1720:
 9768              		.text
 9770              		.section	.data.rel.ro.local
 9771              		.align 8
 9774              	_ZTVN12_GLOBAL__N_122TestValidCheckSucceedsE:
 9775 0258 00000000 		.quad	0
 9775      00000000 
 9776 0260 00000000 		.quad	_ZTIN12_GLOBAL__N_122TestValidCheckSucceedsE
 9776      00000000 
 9777 0268 00000000 		.quad	_ZN12_GLOBAL__N_122TestValidCheckSucceedsD1Ev
 9777      00000000 
 9778 0270 00000000 		.quad	_ZN12_GLOBAL__N_122TestValidCheckSucceedsD0Ev
 9778      00000000 
 9779 0278 00000000 		.quad	_ZNK12_GLOBAL__N_122TestValidCheckSucceeds7RunImplEv
 9779      00000000 
 9780              		.text
 9781 2bb7 90       		.align 2
 9783              	_ZN12_GLOBAL__N_122TestValidCheckSucceedsD2Ev:
 9784              	.LFB1722:
  11:TestUnitTest++.cpp **** {
 9785              		.loc 5 11 1 is_stmt 1
 9786              		.cfi_startproc
 9787 2bb8 F30F1EFA 		endbr64
 9788 2bbc 55       		pushq	%rbp
 9789              		.cfi_def_cfa_offset 16
 9790              		.cfi_offset 6, -16
 9791 2bbd 4889E5   		movq	%rsp, %rbp
 9792              		.cfi_def_cfa_register 6
 9793 2bc0 4883EC10 		subq	$16, %rsp
 9794 2bc4 48897DF8 		movq	%rdi, -8(%rbp)
 9795              	.LBB130:
  11:TestUnitTest++.cpp **** {
 9796              		.loc 5 11 1
 9797 2bc8 488D1500 		leaq	16+_ZTVN12_GLOBAL__N_122TestValidCheckSucceedsE(%rip), %rdx
 9797      000000
 9798 2bcf 488B45F8 		movq	-8(%rbp), %rax
 9799 2bd3 488910   		movq	%rdx, (%rax)
 9800 2bd6 488B45F8 		movq	-8(%rbp), %rax
 9801 2bda 4889C7   		movq	%rax, %rdi
 9802 2bdd E8000000 		call	_ZN8UnitTest4TestD2Ev@PLT
 9802      00
 9803              	.LBE130:
 9804 2be2 90       		nop
 9805 2be3 C9       		leave
 9806              		.cfi_def_cfa 7, 8
 9807 2be4 C3       		ret
 9808              		.cfi_endproc
 9809              	.LFE1722:
 9811              		.set	_ZN12_GLOBAL__N_122TestValidCheckSucceedsD1Ev,_ZN12_GLOBAL__N_122TestValidCheckSucceedsD2Ev
 9812 2be5 90       		.align 2
 9814              	_ZN12_GLOBAL__N_122TestValidCheckSucceedsD0Ev:
 9815              	.LFB1724:
  11:TestUnitTest++.cpp **** {
 9816              		.loc 5 11 1
 9817              		.cfi_startproc
 9818              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 9819              		.cfi_lsda 0x1b,.LLSDA1724
 9820 2be6 F30F1EFA 		endbr64
 9821 2bea 55       		pushq	%rbp
 9822              		.cfi_def_cfa_offset 16
 9823              		.cfi_offset 6, -16
 9824 2beb 4889E5   		movq	%rsp, %rbp
 9825              		.cfi_def_cfa_register 6
 9826 2bee 53       		pushq	%rbx
 9827 2bef 4883EC18 		subq	$24, %rsp
 9828              		.cfi_offset 3, -24
 9829 2bf3 48897DE8 		movq	%rdi, -24(%rbp)
  11:TestUnitTest++.cpp **** {
 9830              		.loc 5 11 1
 9831 2bf7 488B45E8 		movq	-24(%rbp), %rax
 9832 2bfb 4889C7   		movq	%rax, %rdi
 9833              	.LEHB185:
 9834 2bfe E8B5FFFF 		call	_ZN12_GLOBAL__N_122TestValidCheckSucceedsD1Ev
 9834      FF
 9835              	.LEHE185:
  11:TestUnitTest++.cpp **** {
 9836              		.loc 5 11 1 is_stmt 0 discriminator 2
 9837 2c03 488B45E8 		movq	-24(%rbp), %rax
 9838 2c07 4889C7   		movq	%rax, %rdi
 9839 2c0a E8000000 		call	_ZdlPv@PLT
 9839      00
 9840 2c0f EB1E     		jmp	.L486
 9841              	.L485:
 9842 2c11 F30F1EFA 		endbr64
  11:TestUnitTest++.cpp **** {
 9843              		.loc 5 11 1
 9844 2c15 4889C3   		movq	%rax, %rbx
 9845 2c18 488B45E8 		movq	-24(%rbp), %rax
 9846 2c1c 4889C7   		movq	%rax, %rdi
 9847 2c1f E8000000 		call	_ZdlPv@PLT
 9847      00
 9848 2c24 4889D8   		movq	%rbx, %rax
 9849 2c27 4889C7   		movq	%rax, %rdi
 9850              	.LEHB186:
 9851 2c2a E8000000 		call	_Unwind_Resume@PLT
 9851      00
 9852              	.LEHE186:
 9853              	.L486:
 9854 2c2f 488B5DF8 		movq	-8(%rbp), %rbx
 9855 2c33 C9       		leave
 9856              		.cfi_def_cfa 7, 8
 9857 2c34 C3       		ret
 9858              		.cfi_endproc
 9859              	.LFE1724:
 9860              		.section	.gcc_except_table
 9861              	.LLSDA1724:
 9862 0518 FF       		.byte	0xff
 9863 0519 FF       		.byte	0xff
 9864 051a 01       		.byte	0x1
 9865 051b 08       		.uleb128 .LLSDACSE1724-.LLSDACSB1724
 9866              	.LLSDACSB1724:
 9867 051c 18       		.uleb128 .LEHB185-.LFB1724
 9868 051d 05       		.uleb128 .LEHE185-.LEHB185
 9869 051e 2B       		.uleb128 .L485-.LFB1724
 9870 051f 00       		.uleb128 0
 9871 0520 44       		.uleb128 .LEHB186-.LFB1724
 9872 0521 05       		.uleb128 .LEHE186-.LEHB186
 9873 0522 00       		.uleb128 0
 9874 0523 00       		.uleb128 0
 9875              	.LLSDACSE1724:
 9876              		.text
 9878              		.weak	_ZTVN8UnitTest15MemoryOutStreamE
 9879              		.section	.data.rel.ro.local._ZTVN8UnitTest15MemoryOutStreamE,"awG",@progbits,_ZTVN8UnitTest15Memor
 9880              		.align 8
 9883              	_ZTVN8UnitTest15MemoryOutStreamE:
 9884 0000 90000000 		.quad	144
 9884      00000000 
 9885 0008 00000000 		.quad	0
 9885      00000000 
 9886 0010 00000000 		.quad	_ZTIN8UnitTest15MemoryOutStreamE
 9886      00000000 
 9887 0018 00000000 		.quad	_ZN8UnitTest15MemoryOutStreamD1Ev
 9887      00000000 
 9888 0020 00000000 		.quad	_ZN8UnitTest15MemoryOutStreamD0Ev
 9888      00000000 
 9889 0028 70FFFFFF 		.quad	-144
 9889      FFFFFFFF 
 9890 0030 70FFFFFF 		.quad	-144
 9890      FFFFFFFF 
 9891 0038 00000000 		.quad	_ZTIN8UnitTest15MemoryOutStreamE
 9891      00000000 
 9892 0040 00000000 		.quad	_ZTv0_n24_N8UnitTest15MemoryOutStreamD1Ev
 9892      00000000 
 9893 0048 00000000 		.quad	_ZTv0_n24_N8UnitTest15MemoryOutStreamD0Ev
 9893      00000000 
 9894              		.weak	_ZTTN8UnitTest15MemoryOutStreamE
 9895              		.section	.data.rel.ro.local._ZTTN8UnitTest15MemoryOutStreamE,"awG",@progbits,_ZTVN8UnitTest15Memor
 9896              		.align 8
 9899              	_ZTTN8UnitTest15MemoryOutStreamE:
 9900 0000 00000000 		.quad	_ZTVN8UnitTest15MemoryOutStreamE+24
 9900      00000000 
 9901 0008 00000000 		.quad	_ZTCN8UnitTest15MemoryOutStreamE0_NSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEE
 9901      00000000 
 9902 0010 00000000 		.quad	_ZTCN8UnitTest15MemoryOutStreamE0_So+24
 9902      00000000 
 9903 0018 00000000 		.quad	_ZTCN8UnitTest15MemoryOutStreamE0_So+64
 9903      00000000 
 9904 0020 00000000 		.quad	_ZTCN8UnitTest15MemoryOutStreamE0_NSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEE
 9904      00000000 
 9905 0028 00000000 		.quad	_ZTVN8UnitTest15MemoryOutStreamE+64
 9905      00000000 
 9906              		.hidden	_ZTCN8UnitTest15MemoryOutStreamE0_NSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIc
 9907              		.weak	_ZTCN8UnitTest15MemoryOutStreamE0_NSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEE
 9908              		.section	.data.rel.ro._ZTCN8UnitTest15MemoryOutStreamE0_NSt7__cxx1119basic_ostringstreamIcSt11char
 9909              		.align 8
 9912              	_ZTCN8UnitTest15MemoryOutStreamE0_NSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE:
 9913 0000 90000000 		.quad	144
 9913      00000000 
 9914 0008 00000000 		.quad	0
 9914      00000000 
 9915 0010 00000000 		.quad	_ZTINSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE
 9915      00000000 
 9916 0018 00000000 		.quad	0
 9916      00000000 
 9917 0020 00000000 		.quad	0
 9917      00000000 
 9918 0028 70FFFFFF 		.quad	-144
 9918      FFFFFFFF 
 9919 0030 70FFFFFF 		.quad	-144
 9919      FFFFFFFF 
 9920 0038 00000000 		.quad	_ZTINSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE
 9920      00000000 
 9921 0040 00000000 		.quad	0
 9921      00000000 
 9922 0048 00000000 		.quad	0
 9922      00000000 
 9923              		.hidden	_ZTCN8UnitTest15MemoryOutStreamE0_So
 9924              		.weak	_ZTCN8UnitTest15MemoryOutStreamE0_So
 9925              		.section	.data.rel.ro._ZTCN8UnitTest15MemoryOutStreamE0_So,"awG",@progbits,_ZTVN8UnitTest15MemoryO
 9926              		.align 8
 9929              	_ZTCN8UnitTest15MemoryOutStreamE0_So:
 9930 0000 90000000 		.quad	144
 9930      00000000 
 9931 0008 00000000 		.quad	0
 9931      00000000 
 9932 0010 00000000 		.quad	_ZTISo
 9932      00000000 
 9933 0018 00000000 		.quad	0
 9933      00000000 
 9934 0020 00000000 		.quad	0
 9934      00000000 
 9935 0028 70FFFFFF 		.quad	-144
 9935      FFFFFFFF 
 9936 0030 70FFFFFF 		.quad	-144
 9936      FFFFFFFF 
 9937 0038 00000000 		.quad	_ZTISo
 9937      00000000 
 9938 0040 00000000 		.quad	0
 9938      00000000 
 9939 0048 00000000 		.quad	0
 9939      00000000 
 9940              		.section	.text._ZN8UnitTest15MemoryOutStreamD1Ev,"axG",@progbits,_ZN8UnitTest15MemoryOutStreamD1Ev
 9941              		.align 2
 9942              		.weak	_ZN8UnitTest15MemoryOutStreamD1Ev
 9944              	_ZN8UnitTest15MemoryOutStreamD1Ev:
 9945              	.LFB1727:
  13:../MemoryOutStream.h **** {
 9946              		.loc 3 13 7 is_stmt 1
 9947              		.cfi_startproc
 9948              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 9949              		.cfi_lsda 0x1b,.LLSDA1727
 9950 0000 F30F1EFA 		endbr64
 9951 0004 55       		pushq	%rbp
 9952              		.cfi_def_cfa_offset 16
 9953              		.cfi_offset 6, -16
 9954 0005 4889E5   		movq	%rsp, %rbp
 9955              		.cfi_def_cfa_register 6
 9956 0008 53       		pushq	%rbx
 9957 0009 4883EC18 		subq	$24, %rsp
 9958              		.cfi_offset 3, -24
 9959 000d 48897DE8 		movq	%rdi, -24(%rbp)
 9960              	.LBB131:
  13:../MemoryOutStream.h **** {
 9961              		.loc 3 13 7
 9962 0011 488D1500 		leaq	24+_ZTVN8UnitTest15MemoryOutStreamE(%rip), %rdx
 9962      000000
 9963 0018 488B45E8 		movq	-24(%rbp), %rax
 9964 001c 488910   		movq	%rdx, (%rax)
 9965 001f 488B45E8 		movq	-24(%rbp), %rax
 9966 0023 48059000 		addq	$144, %rax
 9966      0000
 9967 0029 488D1500 		leaq	64+_ZTVN8UnitTest15MemoryOutStreamE(%rip), %rdx
 9967      000000
 9968 0030 488910   		movq	%rdx, (%rax)
 9969 0033 488B45E8 		movq	-24(%rbp), %rax
 9970 0037 4883C070 		addq	$112, %rax
 9971 003b 4889C7   		movq	%rax, %rdi
 9972              	.LEHB187:
 9973 003e E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 9973      00
 9974              	.LEHE187:
  13:../MemoryOutStream.h **** {
 9975              		.loc 3 13 7 is_stmt 0 discriminator 2
 9976 0043 488B45E8 		movq	-24(%rbp), %rax
 9977 0047 488D1500 		leaq	8+_ZTTN8UnitTest15MemoryOutStreamE(%rip), %rdx
 9977      000000
 9978 004e 4889D6   		movq	%rdx, %rsi
 9979 0051 4889C7   		movq	%rax, %rdi
 9980              	.LEHB188:
 9981 0054 E8000000 		call	_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEED2Ev@PLT
 9981      00
 9982              	.LEHE188:
  13:../MemoryOutStream.h **** {
 9983              		.loc 3 13 7 discriminator 4
 9984 0059 488B45E8 		movq	-24(%rbp), %rax
 9985 005d 48059000 		addq	$144, %rax
 9985      0000
 9986 0063 4889C7   		movq	%rax, %rdi
 9987              	.LEHB189:
 9988 0066 E8000000 		call	_ZNSt9basic_iosIcSt11char_traitsIcEED2Ev@PLT
 9988      00
 9989              	.LEHE189:
 9990              	.LBE131:
 9991 006b EB43     		jmp	.L492
 9992              	.L490:
 9993 006d F30F1EFA 		endbr64
 9994              	.LBB132:
  13:../MemoryOutStream.h **** {
 9995              		.loc 3 13 7
 9996 0071 4889C3   		movq	%rax, %rbx
 9997 0074 488B45E8 		movq	-24(%rbp), %rax
 9998 0078 488D1500 		leaq	8+_ZTTN8UnitTest15MemoryOutStreamE(%rip), %rdx
 9998      000000
 9999 007f 4889D6   		movq	%rdx, %rsi
 10000 0082 4889C7   		movq	%rax, %rdi
 10001 0085 E8000000 		call	_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEED2Ev@PLT
 10001      00
 10002 008a EB07     		jmp	.L489
 10003              	.L491:
 10004 008c F30F1EFA 		endbr64
 10005 0090 4889C3   		movq	%rax, %rbx
 10006              	.L489:
  13:../MemoryOutStream.h **** {
 10007              		.loc 3 13 7 discriminator 3
 10008 0093 488B45E8 		movq	-24(%rbp), %rax
 10009 0097 48059000 		addq	$144, %rax
 10009      0000
 10010 009d 4889C7   		movq	%rax, %rdi
 10011 00a0 E8000000 		call	_ZNSt9basic_iosIcSt11char_traitsIcEED2Ev@PLT
 10011      00
 10012 00a5 4889D8   		movq	%rbx, %rax
 10013 00a8 4889C7   		movq	%rax, %rdi
 10014              	.LEHB190:
 10015 00ab E8000000 		call	_Unwind_Resume@PLT
 10015      00
 10016              	.LEHE190:
 10017              	.L492:
 10018              	.LBE132:
  13:../MemoryOutStream.h **** {
 10019              		.loc 3 13 7
 10020 00b0 488B5DF8 		movq	-8(%rbp), %rbx
 10021 00b4 C9       		leave
 10022              		.cfi_def_cfa 7, 8
 10023 00b5 C3       		ret
 10024              		.cfi_endproc
 10025              	.LFE1727:
 10026              		.section	.gcc_except_table
 10027              	.LLSDA1727:
 10028 0524 FF       		.byte	0xff
 10029 0525 FF       		.byte	0xff
 10030 0526 01       		.byte	0x1
 10031 0527 12       		.uleb128 .LLSDACSE1727-.LLSDACSB1727
 10032              	.LLSDACSB1727:
 10033 0528 3E       		.uleb128 .LEHB187-.LFB1727
 10034 0529 05       		.uleb128 .LEHE187-.LEHB187
 10035 052a 6D       		.uleb128 .L490-.LFB1727
 10036 052b 00       		.uleb128 0
 10037 052c 54       		.uleb128 .LEHB188-.LFB1727
 10038 052d 05       		.uleb128 .LEHE188-.LEHB188
 10039 052e 8C01     		.uleb128 .L491-.LFB1727
 10040 0530 00       		.uleb128 0
 10041 0531 66       		.uleb128 .LEHB189-.LFB1727
 10042 0532 05       		.uleb128 .LEHE189-.LEHB189
 10043 0533 00       		.uleb128 0
 10044 0534 00       		.uleb128 0
 10045 0535 AB01     		.uleb128 .LEHB190-.LFB1727
 10046 0537 05       		.uleb128 .LEHE190-.LEHB190
 10047 0538 00       		.uleb128 0
 10048 0539 00       		.uleb128 0
 10049              	.LLSDACSE1727:
 10050              		.section	.text._ZN8UnitTest15MemoryOutStreamD1Ev,"axG",@progbits,_ZN8UnitTest15MemoryOutStreamD1Ev
 10052              		.set	.LTHUNK0,_ZN8UnitTest15MemoryOutStreamD1Ev
 10053              		.weak	_ZTv0_n24_N8UnitTest15MemoryOutStreamD1Ev
 10055              	_ZTv0_n24_N8UnitTest15MemoryOutStreamD1Ev:
 10056              	.LFB1731:
  13:../MemoryOutStream.h **** {
 10057              		.loc 3 13 7 is_stmt 1
 10058              		.cfi_startproc
 10059 00b6 F30F1EFA 		endbr64
 10060 00ba 4C8B17   		movq	(%rdi), %r10
 10061 00bd 49037AE8 		addq	-24(%r10), %rdi
 10062 00c1 E93AFFFF 		jmp	.LTHUNK0
 10062      FF
 10063              		.cfi_endproc
 10064              	.LFE1731:
 10066              		.section	.text._ZN8UnitTest15MemoryOutStreamD0Ev,"axG",@progbits,_ZN8UnitTest15MemoryOutStreamD0Ev
 10067              		.align 2
 10068              		.weak	_ZN8UnitTest15MemoryOutStreamD0Ev
 10070              	_ZN8UnitTest15MemoryOutStreamD0Ev:
 10071              	.LFB1728:
  13:../MemoryOutStream.h **** {
 10072              		.loc 3 13 7
 10073              		.cfi_startproc
 10074              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 10075              		.cfi_lsda 0x1b,.LLSDA1728
 10076 0000 F30F1EFA 		endbr64
 10077 0004 55       		pushq	%rbp
 10078              		.cfi_def_cfa_offset 16
 10079              		.cfi_offset 6, -16
 10080 0005 4889E5   		movq	%rsp, %rbp
 10081              		.cfi_def_cfa_register 6
 10082 0008 53       		pushq	%rbx
 10083 0009 4883EC18 		subq	$24, %rsp
 10084              		.cfi_offset 3, -24
 10085 000d 48897DE8 		movq	%rdi, -24(%rbp)
  13:../MemoryOutStream.h **** {
 10086              		.loc 3 13 7
 10087 0011 488B45E8 		movq	-24(%rbp), %rax
 10088 0015 4889C7   		movq	%rax, %rdi
 10089              	.LEHB191:
 10090 0018 E8000000 		call	_ZN8UnitTest15MemoryOutStreamD1Ev
 10090      00
 10091              	.LEHE191:
  13:../MemoryOutStream.h **** {
 10092              		.loc 3 13 7 is_stmt 0 discriminator 2
 10093 001d 488B45E8 		movq	-24(%rbp), %rax
 10094 0021 4889C7   		movq	%rax, %rdi
 10095 0024 E8000000 		call	_ZdlPv@PLT
 10095      00
 10096 0029 EB1E     		jmp	.L496
 10097              	.L495:
 10098 002b F30F1EFA 		endbr64
  13:../MemoryOutStream.h **** {
 10099              		.loc 3 13 7
 10100 002f 4889C3   		movq	%rax, %rbx
 10101 0032 488B45E8 		movq	-24(%rbp), %rax
 10102 0036 4889C7   		movq	%rax, %rdi
 10103 0039 E8000000 		call	_ZdlPv@PLT
 10103      00
 10104 003e 4889D8   		movq	%rbx, %rax
 10105 0041 4889C7   		movq	%rax, %rdi
 10106              	.LEHB192:
 10107 0044 E8000000 		call	_Unwind_Resume@PLT
 10107      00
 10108              	.LEHE192:
 10109              	.L496:
 10110 0049 488B5DF8 		movq	-8(%rbp), %rbx
 10111 004d C9       		leave
 10112              		.cfi_def_cfa 7, 8
 10113 004e C3       		ret
 10114              		.cfi_endproc
 10115              	.LFE1728:
 10116              		.section	.gcc_except_table
 10117              	.LLSDA1728:
 10118 053a FF       		.byte	0xff
 10119 053b FF       		.byte	0xff
 10120 053c 01       		.byte	0x1
 10121 053d 08       		.uleb128 .LLSDACSE1728-.LLSDACSB1728
 10122              	.LLSDACSB1728:
 10123 053e 18       		.uleb128 .LEHB191-.LFB1728
 10124 053f 05       		.uleb128 .LEHE191-.LEHB191
 10125 0540 2B       		.uleb128 .L495-.LFB1728
 10126 0541 00       		.uleb128 0
 10127 0542 44       		.uleb128 .LEHB192-.LFB1728
 10128 0543 05       		.uleb128 .LEHE192-.LEHB192
 10129 0544 00       		.uleb128 0
 10130 0545 00       		.uleb128 0
 10131              	.LLSDACSE1728:
 10132              		.section	.text._ZN8UnitTest15MemoryOutStreamD0Ev,"axG",@progbits,_ZN8UnitTest15MemoryOutStreamD0Ev
 10134              		.set	.LTHUNK1,_ZN8UnitTest15MemoryOutStreamD0Ev
 10135              		.weak	_ZTv0_n24_N8UnitTest15MemoryOutStreamD0Ev
 10137              	_ZTv0_n24_N8UnitTest15MemoryOutStreamD0Ev:
 10138              	.LFB1732:
  13:../MemoryOutStream.h **** {
 10139              		.loc 3 13 7 is_stmt 1
 10140              		.cfi_startproc
 10141 004f F30F1EFA 		endbr64
 10142 0053 4C8B17   		movq	(%rdi), %r10
 10143 0056 49037AE8 		addq	-24(%r10), %rdi
 10144 005a EBA4     		jmp	.LTHUNK1
 10145              		.cfi_endproc
 10146              	.LFE1732:
 10148              		.section	.rodata
 10149 0651 00000000 		.align 32
 10149      00000000 
 10149      00000000 
 10149      000000
 10152              	_ZTSN12_GLOBAL__N_137TestCanCallCHECKOutsideOfTestFunctionE:
 10153 0660 2A4E3132 		.string	"*N12_GLOBAL__N_137TestCanCallCHECKOutsideOfTestFunctionE"
 10153      5F474C4F 
 10153      42414C5F 
 10153      5F4E5F31 
 10153      33375465 
 10154              		.section	.data.rel.ro,"aw"
 10155              		.align 8
 10158              	_ZTIN12_GLOBAL__N_137TestCanCallCHECKOutsideOfTestFunctionE:
 10159 0000 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 10159      00000000 
 10160 0008 00000000 		.quad	_ZTSN12_GLOBAL__N_137TestCanCallCHECKOutsideOfTestFunctionE
 10160      00000000 
 10161 0010 00000000 		.quad	_ZTIN8UnitTest4TestE
 10161      00000000 
 10162              		.section	.rodata
 10163 0699 00000000 		.align 32
 10163      000000
 10166              	_ZTSN12_GLOBAL__N_143TestSimpleFixtureOnlyOneFixtureAliveAtATimeE:
 10167 06a0 2A4E3132 		.string	"*N12_GLOBAL__N_143TestSimpleFixtureOnlyOneFixtureAliveAtATimeE"
 10167      5F474C4F 
 10167      42414C5F 
 10167      5F4E5F31 
 10167      34335465 
 10168              		.section	.data.rel.ro
 10169              		.align 8
 10172              	_ZTIN12_GLOBAL__N_143TestSimpleFixtureOnlyOneFixtureAliveAtATimeE:
 10173 0018 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 10173      00000000 
 10174 0020 00000000 		.quad	_ZTSN12_GLOBAL__N_143TestSimpleFixtureOnlyOneFixtureAliveAtATimeE
 10174      00000000 
 10175 0028 00000000 		.quad	_ZTIN8UnitTest4TestE
 10175      00000000 
 10176              		.section	.rodata
 10177 06df 00       		.align 32
 10180              	_ZTSN12_GLOBAL__N_143TestSimpleFixtureDefaultFixtureCtorIsCalledE:
 10181 06e0 2A4E3132 		.string	"*N12_GLOBAL__N_143TestSimpleFixtureDefaultFixtureCtorIsCalledE"
 10181      5F474C4F 
 10181      42414C5F 
 10181      5F4E5F31 
 10181      34335465 
 10182              		.section	.data.rel.ro
 10183              		.align 8
 10186              	_ZTIN12_GLOBAL__N_143TestSimpleFixtureDefaultFixtureCtorIsCalledE:
 10187 0030 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 10187      00000000 
 10188 0038 00000000 		.quad	_ZTSN12_GLOBAL__N_143TestSimpleFixtureDefaultFixtureCtorIsCalledE
 10188      00000000 
 10189 0040 00000000 		.quad	_ZTIN8UnitTest4TestE
 10189      00000000 
 10190              		.section	.rodata
 10191 071f 00       		.align 32
 10194              	_ZTSZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEvE14WrongThrowTest:
 10195 0720 2A5A4E4B 		.string	"*ZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEvE14WrongThrowTest"
 10195      31325F47 
 10195      4C4F4241 
 10195      4C5F5F4E 
 10195      5F313430 
 10196              		.section	.data.rel.ro
 10197              		.align 8
 10200              	_ZTIZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEvE14WrongThrowTest:
 10201 0048 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 10201      00000000 
 10202 0050 00000000 		.quad	_ZTSZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEvE14WrongThrowTest
 10202      00000000 
 10203 0058 00000000 		.quad	_ZTIN8UnitTest4TestE
 10203      00000000 
 10204              		.section	.rodata
 10205 0778 00000000 		.align 32
 10205      00000000 
 10208              	_ZTSN12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongExceptionE:
 10209 0780 2A4E3132 		.string	"*N12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongExceptionE"
 10209      5F474C4F 
 10209      42414C5F 
 10209      5F4E5F31 
 10209      34305465 
 10210              		.section	.data.rel.ro
 10211              		.align 8
 10214              	_ZTIN12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongExceptionE:
 10215 0060 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 10215      00000000 
 10216 0068 00000000 		.quad	_ZTSN12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongExceptionE
 10216      00000000 
 10217 0070 00000000 		.quad	_ZTIN8UnitTest4TestE
 10217      00000000 
 10218              		.section	.rodata
 10219 07bc 00000000 		.align 32
 10222              	_ZTSZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvE11NoThrowTest:
 10223 07c0 2A5A4E4B 		.string	"*ZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvE11NoThrowTest"
 10223      31325F47 
 10223      4C4F4241 
 10223      4C5F5F4E 
 10223      5F313432 
 10224              		.section	.data.rel.ro
 10225              		.align 8
 10228              	_ZTIZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvE11NoThrowTest:
 10229 0078 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 10229      00000000 
 10230 0080 00000000 		.quad	_ZTSZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvE11NoThrowTest
 10230      00000000 
 10231 0088 00000000 		.quad	_ZTIN8UnitTest4TestE
 10231      00000000 
 10232              		.section	.rodata
 10233 0817 00000000 		.align 32
 10233      00000000 
 10233      00
 10236              	_ZTSN12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingExceptionE:
 10237 0820 2A4E3132 		.string	"*N12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingExceptionE"
 10237      5F474C4F 
 10237      42414C5F 
 10237      5F4E5F31 
 10237      34325465 
 10238              		.section	.data.rel.ro
 10239              		.align 8
 10242              	_ZTIN12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingExceptionE:
 10243 0090 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 10243      00000000 
 10244 0098 00000000 		.quad	_ZTSN12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingExceptionE
 10244      00000000 
 10245 00a0 00000000 		.quad	_ZTIN8UnitTest4TestE
 10245      00000000 
 10246              		.section	.rodata
 10247 085e 0000     		.align 32
 10250              	_ZTSN12_GLOBAL__N_123TestCheckAssertSucceedsE:
 10251 0860 2A4E3132 		.string	"*N12_GLOBAL__N_123TestCheckAssertSucceedsE"
 10251      5F474C4F 
 10251      42414C5F 
 10251      5F4E5F31 
 10251      32335465 
 10252              		.section	.data.rel.ro
 10253              		.align 8
 10256              	_ZTIN12_GLOBAL__N_123TestCheckAssertSucceedsE:
 10257 00a8 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 10257      00000000 
 10258 00b0 00000000 		.quad	_ZTSN12_GLOBAL__N_123TestCheckAssertSucceedsE
 10258      00000000 
 10259 00b8 00000000 		.quad	_ZTIN8UnitTest4TestE
 10259      00000000 
 10260              		.section	.rodata
 10261 088b 00000000 		.align 32
 10261      00000000 
 10261      00000000 
 10261      00000000 
 10261      00000000 
 10264              	_ZTSZNK12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectException7RunImplEvE13TestException:
 10265 08a0 2A5A4E4B 		.string	"*ZNK12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectException7RunImplEvE13TestExcepti
 10265      31325F47 
 10265      4C4F4241 
 10265      4C5F5F4E 
 10265      5F313435 
 10266              		.section	.data.rel.ro
 10267              		.align 8
 10270              	_ZTIZNK12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectException7RunImplEvE13TestException:
 10271 00c0 00000000 		.quad	_ZTVN10__cxxabiv117__class_type_infoE+16
 10271      00000000 
 10272 00c8 00000000 		.quad	_ZTSZNK12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectException7RunImplEvE13TestExcepti
 10272      00000000 
 10273              		.section	.rodata
 10274 08fc 00000000 		.align 32
 10277              	_ZTSN12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectExceptionE:
 10278 0900 2A4E3132 		.string	"*N12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectExceptionE"
 10278      5F474C4F 
 10278      42414C5F 
 10278      5F4E5F31 
 10278      34355465 
 10279              		.section	.data.rel.ro
 10280              		.align 8
 10283              	_ZTIN12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectExceptionE:
 10284 00d0 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 10284      00000000 
 10285 00d8 00000000 		.quad	_ZTSN12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectExceptionE
 10285      00000000 
 10286 00e0 00000000 		.quad	_ZTIN8UnitTest4TestE
 10286      00000000 
 10287              		.section	.rodata
 10288 0941 00000000 		.align 32
 10288      00000000 
 10288      00000000 
 10288      00000000 
 10288      00000000 
 10291              	_ZTSN12_GLOBAL__N_135TestCheckArrayCloseWorksWithVectorsE:
 10292 0960 2A4E3132 		.string	"*N12_GLOBAL__N_135TestCheckArrayCloseWorksWithVectorsE"
 10292      5F474C4F 
 10292      42414C5F 
 10292      5F4E5F31 
 10292      33355465 
 10293              		.section	.data.rel.ro
 10294              		.align 8
 10297              	_ZTIN12_GLOBAL__N_135TestCheckArrayCloseWorksWithVectorsE:
 10298 00e8 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 10298      00000000 
 10299 00f0 00000000 		.quad	_ZTSN12_GLOBAL__N_135TestCheckArrayCloseWorksWithVectorsE
 10299      00000000 
 10300 00f8 00000000 		.quad	_ZTIN8UnitTest4TestE
 10300      00000000 
 10301              		.section	.rodata
 10302 0997 00000000 		.align 32
 10302      00000000 
 10302      00
 10305              	_ZTSN12_GLOBAL__N_122TestArrayCloseSucceedsE:
 10306 09a0 2A4E3132 		.string	"*N12_GLOBAL__N_122TestArrayCloseSucceedsE"
 10306      5F474C4F 
 10306      42414C5F 
 10306      5F4E5F31 
 10306      32325465 
 10307              		.section	.data.rel.ro
 10308              		.align 8
 10311              	_ZTIN12_GLOBAL__N_122TestArrayCloseSucceedsE:
 10312 0100 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 10312      00000000 
 10313 0108 00000000 		.quad	_ZTSN12_GLOBAL__N_122TestArrayCloseSucceedsE
 10313      00000000 
 10314 0110 00000000 		.quad	_ZTIN8UnitTest4TestE
 10314      00000000 
 10315              		.section	.rodata
 10316 09ca 00000000 		.align 32
 10316      00000000 
 10316      00000000 
 10316      00000000 
 10316      00000000 
 10319              	_ZTSN12_GLOBAL__N_127TestValidCheckCloseSucceedsE:
 10320 09e0 2A4E3132 		.string	"*N12_GLOBAL__N_127TestValidCheckCloseSucceedsE"
 10320      5F474C4F 
 10320      42414C5F 
 10320      5F4E5F31 
 10320      32375465 
 10321              		.section	.data.rel.ro
 10322              		.align 8
 10325              	_ZTIN12_GLOBAL__N_127TestValidCheckCloseSucceedsE:
 10326 0118 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 10326      00000000 
 10327 0120 00000000 		.quad	_ZTSN12_GLOBAL__N_127TestValidCheckCloseSucceedsE
 10327      00000000 
 10328 0128 00000000 		.quad	_ZTIN8UnitTest4TestE
 10328      00000000 
 10329              		.section	.rodata
 10330 0a0f 00000000 		.align 32
 10330      00000000 
 10330      00000000 
 10330      00000000 
 10330      00
 10333              	_ZTSN12_GLOBAL__N_131TestCheckEqualWorksWithPointersE:
 10334 0a20 2A4E3132 		.string	"*N12_GLOBAL__N_131TestCheckEqualWorksWithPointersE"
 10334      5F474C4F 
 10334      42414C5F 
 10334      5F4E5F31 
 10334      33315465 
 10335              		.section	.data.rel.ro
 10336              		.align 8
 10339              	_ZTIN12_GLOBAL__N_131TestCheckEqualWorksWithPointersE:
 10340 0130 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 10340      00000000 
 10341 0138 00000000 		.quad	_ZTSN12_GLOBAL__N_131TestCheckEqualWorksWithPointersE
 10341      00000000 
 10342 0140 00000000 		.quad	_ZTIN8UnitTest4TestE
 10342      00000000 
 10343              		.section	.rodata
 10344 0a53 00000000 		.align 32
 10344      00000000 
 10344      00000000 
 10344      00
 10347              	_ZTSN12_GLOBAL__N_127TestValidCheckEqualSucceedsE:
 10348 0a60 2A4E3132 		.string	"*N12_GLOBAL__N_127TestValidCheckEqualSucceedsE"
 10348      5F474C4F 
 10348      42414C5F 
 10348      5F4E5F31 
 10348      32375465 
 10349              		.section	.data.rel.ro
 10350              		.align 8
 10353              	_ZTIN12_GLOBAL__N_127TestValidCheckEqualSucceedsE:
 10354 0148 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 10354      00000000 
 10355 0150 00000000 		.quad	_ZTSN12_GLOBAL__N_127TestValidCheckEqualSucceedsE
 10355      00000000 
 10356 0158 00000000 		.quad	_ZTIN8UnitTest4TestE
 10356      00000000 
 10357              		.section	.rodata
 10358 0a8f 00000000 		.align 32
 10358      00000000 
 10358      00000000 
 10358      00000000 
 10358      00
 10361              	_ZTSN12_GLOBAL__N_126TestCheckWorksWithPointersE:
 10362 0aa0 2A4E3132 		.string	"*N12_GLOBAL__N_126TestCheckWorksWithPointersE"
 10362      5F474C4F 
 10362      42414C5F 
 10362      5F4E5F31 
 10362      32365465 
 10363              		.section	.data.rel.ro
 10364              		.align 8
 10367              	_ZTIN12_GLOBAL__N_126TestCheckWorksWithPointersE:
 10368 0160 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 10368      00000000 
 10369 0168 00000000 		.quad	_ZTSN12_GLOBAL__N_126TestCheckWorksWithPointersE
 10369      00000000 
 10370 0170 00000000 		.quad	_ZTIN8UnitTest4TestE
 10370      00000000 
 10371              		.section	.rodata
 10372 0ace 00000000 		.align 32
 10372      00000000 
 10372      00000000 
 10372      00000000 
 10372      0000
 10375              	_ZTSN12_GLOBAL__N_122TestValidCheckSucceedsE:
 10376 0ae0 2A4E3132 		.string	"*N12_GLOBAL__N_122TestValidCheckSucceedsE"
 10376      5F474C4F 
 10376      42414C5F 
 10376      5F4E5F31 
 10376      32325465 
 10377              		.section	.data.rel.ro
 10378              		.align 8
 10381              	_ZTIN12_GLOBAL__N_122TestValidCheckSucceedsE:
 10382 0178 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 10382      00000000 
 10383 0180 00000000 		.quad	_ZTSN12_GLOBAL__N_122TestValidCheckSucceedsE
 10383      00000000 
 10384 0188 00000000 		.quad	_ZTIN8UnitTest4TestE
 10384      00000000 
 10385              		.weak	_ZTIN8UnitTest15MemoryOutStreamE
 10386              		.section	.data.rel.ro._ZTIN8UnitTest15MemoryOutStreamE,"awG",@progbits,_ZTIN8UnitTest15MemoryOutSt
 10387              		.align 8
 10390              	_ZTIN8UnitTest15MemoryOutStreamE:
 10391 0000 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 10391      00000000 
 10392 0008 00000000 		.quad	_ZTSN8UnitTest15MemoryOutStreamE
 10392      00000000 
 10393 0010 00000000 		.quad	_ZTINSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE
 10393      00000000 
 10394              		.weak	_ZTSN8UnitTest15MemoryOutStreamE
 10395              		.section	.rodata._ZTSN8UnitTest15MemoryOutStreamE,"aG",@progbits,_ZTSN8UnitTest15MemoryOutStreamE,
 10396              		.align 16
 10399              	_ZTSN8UnitTest15MemoryOutStreamE:
 10400 0000 4E38556E 		.string	"N8UnitTest15MemoryOutStreamE"
 10400      69745465 
 10400      73743135 
 10400      4D656D6F 
 10400      72794F75 
 10401              		.text
 10403              	_Z41__static_initialization_and_destruction_0ii:
 10404              	.LFB1729:
 155:TestUnitTest++.cpp **** 
 156:TestUnitTest++.cpp **** }
 10405              		.loc 5 156 1
 10406              		.cfi_startproc
 10407 2c35 F30F1EFA 		endbr64
 10408 2c39 55       		pushq	%rbp
 10409              		.cfi_def_cfa_offset 16
 10410              		.cfi_offset 6, -16
 10411 2c3a 4889E5   		movq	%rsp, %rbp
 10412              		.cfi_def_cfa_register 6
 10413 2c3d 4883EC10 		subq	$16, %rsp
 10414 2c41 897DFC   		movl	%edi, -4(%rbp)
 10415 2c44 8975F8   		movl	%esi, -8(%rbp)
 10416              		.loc 5 156 1
 10417 2c47 837DFC01 		cmpl	$1, -4(%rbp)
 10418 2c4b 0F85C104 		jne	.L499
 10418      0000
 10419              		.loc 5 156 1 is_stmt 0 discriminator 1
 10420 2c51 817DF8FF 		cmpl	$65535, -8(%rbp)
 10420      FF0000
 10421 2c58 0F85B404 		jne	.L499
 10421      0000
  11:TestUnitTest++.cpp **** {
 10422              		.loc 5 11 1 is_stmt 1
 10423 2c5e 488D0500 		leaq	_ZN12_GLOBAL__N_130testValidCheckSucceedsInstanceE(%rip), %rax
 10423      000000
 10424 2c65 4889C7   		movq	%rax, %rdi
 10425 2c68 E893D3FF 		call	_ZN12_GLOBAL__N_122TestValidCheckSucceedsC1Ev
 10425      FF
 10426 2c6d 488D0500 		leaq	__dso_handle(%rip), %rax
 10426      000000
 10427 2c74 4889C2   		movq	%rax, %rdx
 10428 2c77 488D0500 		leaq	_ZN12_GLOBAL__N_130testValidCheckSucceedsInstanceE(%rip), %rax
 10428      000000
 10429 2c7e 4889C6   		movq	%rax, %rsi
 10430 2c81 488D0530 		leaq	_ZN12_GLOBAL__N_122TestValidCheckSucceedsD1Ev(%rip), %rax
 10430      FFFFFF
 10431 2c88 4889C7   		movq	%rax, %rdi
 10432 2c8b E8000000 		call	__cxa_atexit@PLT
 10432      00
 10433 2c90 E8000000 		call	_ZN8UnitTest4Test11GetTestListEv@PLT
 10433      00
 10434 2c95 4889C1   		movq	%rax, %rcx
 10435 2c98 488D0500 		leaq	_ZN12_GLOBAL__N_130testValidCheckSucceedsInstanceE(%rip), %rax
 10435      000000
 10436 2c9f 4889C2   		movq	%rax, %rdx
 10437 2ca2 4889CE   		movq	%rcx, %rsi
 10438 2ca5 488D0500 		leaq	_ZN12_GLOBAL__N_123adderValidCheckSucceedsE(%rip), %rax
 10438      000000
 10439 2cac 4889C7   		movq	%rax, %rdi
 10440 2caf E8000000 		call	_ZN8UnitTest9ListAdderC1ERNS_8TestListEPNS_4TestE@PLT
 10440      00
  17:TestUnitTest++.cpp **** {
 10441              		.loc 5 17 1
 10442 2cb4 488D0500 		leaq	_ZN12_GLOBAL__N_134testCheckWorksWithPointersInstanceE(%rip), %rax
 10442      000000
 10443 2cbb 4889C7   		movq	%rax, %rdi
 10444 2cbe E881D4FF 		call	_ZN12_GLOBAL__N_126TestCheckWorksWithPointersC1Ev
 10444      FF
 10445 2cc3 488D0500 		leaq	__dso_handle(%rip), %rax
 10445      000000
 10446 2cca 4889C2   		movq	%rax, %rdx
 10447 2ccd 488D0500 		leaq	_ZN12_GLOBAL__N_134testCheckWorksWithPointersInstanceE(%rip), %rax
 10447      000000
 10448 2cd4 4889C6   		movq	%rax, %rsi
 10449 2cd7 488D055C 		leaq	_ZN12_GLOBAL__N_126TestCheckWorksWithPointersD1Ev(%rip), %rax
 10449      FEFFFF
 10450 2cde 4889C7   		movq	%rax, %rdi
 10451 2ce1 E8000000 		call	__cxa_atexit@PLT
 10451      00
 10452 2ce6 E8000000 		call	_ZN8UnitTest4Test11GetTestListEv@PLT
 10452      00
 10453 2ceb 4889C1   		movq	%rax, %rcx
 10454 2cee 488D0500 		leaq	_ZN12_GLOBAL__N_134testCheckWorksWithPointersInstanceE(%rip), %rax
 10454      000000
 10455 2cf5 4889C2   		movq	%rax, %rdx
 10456 2cf8 4889CE   		movq	%rcx, %rsi
 10457 2cfb 488D0500 		leaq	_ZN12_GLOBAL__N_127adderCheckWorksWithPointersE(%rip), %rax
 10457      000000
 10458 2d02 4889C7   		movq	%rax, %rdi
 10459 2d05 E8000000 		call	_ZN8UnitTest9ListAdderC1ERNS_8TestListEPNS_4TestE@PLT
 10459      00
  24:TestUnitTest++.cpp **** {
 10460              		.loc 5 24 1
 10461 2d0a 488D0500 		leaq	_ZN12_GLOBAL__N_135testValidCheckEqualSucceedsInstanceE(%rip), %rax
 10461      000000
 10462 2d11 4889C7   		movq	%rax, %rdi
 10463 2d14 E833D6FF 		call	_ZN12_GLOBAL__N_127TestValidCheckEqualSucceedsC1Ev
 10463      FF
 10464 2d19 488D0500 		leaq	__dso_handle(%rip), %rax
 10464      000000
 10465 2d20 4889C2   		movq	%rax, %rdx
 10466 2d23 488D0500 		leaq	_ZN12_GLOBAL__N_135testValidCheckEqualSucceedsInstanceE(%rip), %rax
 10466      000000
 10467 2d2a 4889C6   		movq	%rax, %rsi
 10468 2d2d 488D0588 		leaq	_ZN12_GLOBAL__N_127TestValidCheckEqualSucceedsD1Ev(%rip), %rax
 10468      FDFFFF
 10469 2d34 4889C7   		movq	%rax, %rdi
 10470 2d37 E8000000 		call	__cxa_atexit@PLT
 10470      00
 10471 2d3c E8000000 		call	_ZN8UnitTest4Test11GetTestListEv@PLT
 10471      00
 10472 2d41 4889C1   		movq	%rax, %rcx
 10473 2d44 488D0500 		leaq	_ZN12_GLOBAL__N_135testValidCheckEqualSucceedsInstanceE(%rip), %rax
 10473      000000
 10474 2d4b 4889C2   		movq	%rax, %rdx
 10475 2d4e 4889CE   		movq	%rcx, %rsi
 10476 2d51 488D0500 		leaq	_ZN12_GLOBAL__N_128adderValidCheckEqualSucceedsE(%rip), %rax
 10476      000000
 10477 2d58 4889C7   		movq	%rax, %rdi
 10478 2d5b E8000000 		call	_ZN8UnitTest9ListAdderC1ERNS_8TestListEPNS_4TestE@PLT
 10478      00
  31:TestUnitTest++.cpp **** {
 10479              		.loc 5 31 1
 10480 2d60 488D0500 		leaq	_ZN12_GLOBAL__N_139testCheckEqualWorksWithPointersInstanceE(%rip), %rax
 10480      000000
 10481 2d67 4889C7   		movq	%rax, %rdi
 10482 2d6a E813D7FF 		call	_ZN12_GLOBAL__N_131TestCheckEqualWorksWithPointersC1Ev
 10482      FF
 10483 2d6f 488D0500 		leaq	__dso_handle(%rip), %rax
 10483      000000
 10484 2d76 4889C2   		movq	%rax, %rdx
 10485 2d79 488D0500 		leaq	_ZN12_GLOBAL__N_139testCheckEqualWorksWithPointersInstanceE(%rip), %rax
 10485      000000
 10486 2d80 4889C6   		movq	%rax, %rsi
 10487 2d83 488D05B4 		leaq	_ZN12_GLOBAL__N_131TestCheckEqualWorksWithPointersD1Ev(%rip), %rax
 10487      FCFFFF
 10488 2d8a 4889C7   		movq	%rax, %rdi
 10489 2d8d E8000000 		call	__cxa_atexit@PLT
 10489      00
 10490 2d92 E8000000 		call	_ZN8UnitTest4Test11GetTestListEv@PLT
 10490      00
 10491 2d97 4889C1   		movq	%rax, %rcx
 10492 2d9a 488D0500 		leaq	_ZN12_GLOBAL__N_139testCheckEqualWorksWithPointersInstanceE(%rip), %rax
 10492      000000
 10493 2da1 4889C2   		movq	%rax, %rdx
 10494 2da4 4889CE   		movq	%rcx, %rsi
 10495 2da7 488D0500 		leaq	_ZN12_GLOBAL__N_132adderCheckEqualWorksWithPointersE(%rip), %rax
 10495      000000
 10496 2dae 4889C7   		movq	%rax, %rdi
 10497 2db1 E8000000 		call	_ZN8UnitTest9ListAdderC1ERNS_8TestListEPNS_4TestE@PLT
 10497      00
  37:TestUnitTest++.cpp **** {
 10498              		.loc 5 37 1
 10499 2db6 488D0500 		leaq	_ZN12_GLOBAL__N_135testValidCheckCloseSucceedsInstanceE(%rip), %rax
 10499      000000
 10500 2dbd 4889C7   		movq	%rax, %rdi
 10501 2dc0 E8F5D7FF 		call	_ZN12_GLOBAL__N_127TestValidCheckCloseSucceedsC1Ev
 10501      FF
 10502 2dc5 488D0500 		leaq	__dso_handle(%rip), %rax
 10502      000000
 10503 2dcc 4889C2   		movq	%rax, %rdx
 10504 2dcf 488D0500 		leaq	_ZN12_GLOBAL__N_135testValidCheckCloseSucceedsInstanceE(%rip), %rax
 10504      000000
 10505 2dd6 4889C6   		movq	%rax, %rsi
 10506 2dd9 488D05E0 		leaq	_ZN12_GLOBAL__N_127TestValidCheckCloseSucceedsD1Ev(%rip), %rax
 10506      FBFFFF
 10507 2de0 4889C7   		movq	%rax, %rdi
 10508 2de3 E8000000 		call	__cxa_atexit@PLT
 10508      00
 10509 2de8 E8000000 		call	_ZN8UnitTest4Test11GetTestListEv@PLT
 10509      00
 10510 2ded 4889C1   		movq	%rax, %rcx
 10511 2df0 488D0500 		leaq	_ZN12_GLOBAL__N_135testValidCheckCloseSucceedsInstanceE(%rip), %rax
 10511      000000
 10512 2df7 4889C2   		movq	%rax, %rdx
 10513 2dfa 4889CE   		movq	%rcx, %rsi
 10514 2dfd 488D0500 		leaq	_ZN12_GLOBAL__N_128adderValidCheckCloseSucceedsE(%rip), %rax
 10514      000000
 10515 2e04 4889C7   		movq	%rax, %rdi
 10516 2e07 E8000000 		call	_ZN8UnitTest9ListAdderC1ERNS_8TestListEPNS_4TestE@PLT
 10516      00
  43:TestUnitTest++.cpp **** {
 10517              		.loc 5 43 1
 10518 2e0c 488D0500 		leaq	_ZN12_GLOBAL__N_130testArrayCloseSucceedsInstanceE(%rip), %rax
 10518      000000
 10519 2e13 4889C7   		movq	%rax, %rdi
 10520 2e16 E8C5D9FF 		call	_ZN12_GLOBAL__N_122TestArrayCloseSucceedsC1Ev
 10520      FF
 10521 2e1b 488D0500 		leaq	__dso_handle(%rip), %rax
 10521      000000
 10522 2e22 4889C2   		movq	%rax, %rdx
 10523 2e25 488D0500 		leaq	_ZN12_GLOBAL__N_130testArrayCloseSucceedsInstanceE(%rip), %rax
 10523      000000
 10524 2e2c 4889C6   		movq	%rax, %rsi
 10525 2e2f 488D050C 		leaq	_ZN12_GLOBAL__N_122TestArrayCloseSucceedsD1Ev(%rip), %rax
 10525      FBFFFF
 10526 2e36 4889C7   		movq	%rax, %rdi
 10527 2e39 E8000000 		call	__cxa_atexit@PLT
 10527      00
 10528 2e3e E8000000 		call	_ZN8UnitTest4Test11GetTestListEv@PLT
 10528      00
 10529 2e43 4889C1   		movq	%rax, %rcx
 10530 2e46 488D0500 		leaq	_ZN12_GLOBAL__N_130testArrayCloseSucceedsInstanceE(%rip), %rax
 10530      000000
 10531 2e4d 4889C2   		movq	%rax, %rdx
 10532 2e50 4889CE   		movq	%rcx, %rsi
 10533 2e53 488D0500 		leaq	_ZN12_GLOBAL__N_123adderArrayCloseSucceedsE(%rip), %rax
 10533      000000
 10534 2e5a 4889C7   		movq	%rax, %rdi
 10535 2e5d E8000000 		call	_ZN8UnitTest9ListAdderC1ERNS_8TestListEPNS_4TestE@PLT
 10535      00
  50:TestUnitTest++.cpp **** {
 10536              		.loc 5 50 1
 10537 2e62 488D0500 		leaq	_ZN12_GLOBAL__N_143testCheckArrayCloseWorksWithVectorsInstanceE(%rip), %rax
 10537      000000
 10538 2e69 4889C7   		movq	%rax, %rdi
 10539 2e6c E801DBFF 		call	_ZN12_GLOBAL__N_135TestCheckArrayCloseWorksWithVectorsC1Ev
 10539      FF
 10540 2e71 488D0500 		leaq	__dso_handle(%rip), %rax
 10540      000000
 10541 2e78 4889C2   		movq	%rax, %rdx
 10542 2e7b 488D0500 		leaq	_ZN12_GLOBAL__N_143testCheckArrayCloseWorksWithVectorsInstanceE(%rip), %rax
 10542      000000
 10543 2e82 4889C6   		movq	%rax, %rsi
 10544 2e85 488D0538 		leaq	_ZN12_GLOBAL__N_135TestCheckArrayCloseWorksWithVectorsD1Ev(%rip), %rax
 10544      FAFFFF
 10545 2e8c 4889C7   		movq	%rax, %rdi
 10546 2e8f E8000000 		call	__cxa_atexit@PLT
 10546      00
 10547 2e94 E8000000 		call	_ZN8UnitTest4Test11GetTestListEv@PLT
 10547      00
 10548 2e99 4889C1   		movq	%rax, %rcx
 10549 2e9c 488D0500 		leaq	_ZN12_GLOBAL__N_143testCheckArrayCloseWorksWithVectorsInstanceE(%rip), %rax
 10549      000000
 10550 2ea3 4889C2   		movq	%rax, %rdx
 10551 2ea6 4889CE   		movq	%rcx, %rsi
 10552 2ea9 488D0500 		leaq	_ZN12_GLOBAL__N_136adderCheckArrayCloseWorksWithVectorsE(%rip), %rax
 10552      000000
 10553 2eb0 4889C7   		movq	%rax, %rdi
 10554 2eb3 E8000000 		call	_ZN8UnitTest9ListAdderC1ERNS_8TestListEPNS_4TestE@PLT
 10554      00
  59:TestUnitTest++.cpp **** {
 10555              		.loc 5 59 1
 10556 2eb8 488D0500 		leaq	_ZN12_GLOBAL__N_153testCheckThrowMacroSucceedsOnCorrectExceptionInstanceE(%rip), %rax
 10556      000000
 10557 2ebf 4889C7   		movq	%rax, %rdi
 10558 2ec2 E8B3DCFF 		call	_ZN12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectExceptionC1Ev
 10558      FF
 10559 2ec7 488D0500 		leaq	__dso_handle(%rip), %rax
 10559      000000
 10560 2ece 4889C2   		movq	%rax, %rdx
 10561 2ed1 488D0500 		leaq	_ZN12_GLOBAL__N_153testCheckThrowMacroSucceedsOnCorrectExceptionInstanceE(%rip), %rax
 10561      000000
 10562 2ed8 4889C6   		movq	%rax, %rsi
 10563 2edb 488D0564 		leaq	_ZN12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectExceptionD1Ev(%rip), %rax
 10563      F9FFFF
 10564 2ee2 4889C7   		movq	%rax, %rdi
 10565 2ee5 E8000000 		call	__cxa_atexit@PLT
 10565      00
 10566 2eea E8000000 		call	_ZN8UnitTest4Test11GetTestListEv@PLT
 10566      00
 10567 2eef 4889C1   		movq	%rax, %rcx
 10568 2ef2 488D0500 		leaq	_ZN12_GLOBAL__N_153testCheckThrowMacroSucceedsOnCorrectExceptionInstanceE(%rip), %rax
 10568      000000
 10569 2ef9 4889C2   		movq	%rax, %rdx
 10570 2efc 4889CE   		movq	%rcx, %rsi
 10571 2eff 488D0500 		leaq	_ZN12_GLOBAL__N_146adderCheckThrowMacroSucceedsOnCorrectExceptionE(%rip), %rax
 10571      000000
 10572 2f06 4889C7   		movq	%rax, %rdi
 10573 2f09 E8000000 		call	_ZN8UnitTest9ListAdderC1ERNS_8TestListEPNS_4TestE@PLT
 10573      00
  65:TestUnitTest++.cpp **** {
 10574              		.loc 5 65 1
 10575 2f0e 488D0500 		leaq	_ZN12_GLOBAL__N_131testCheckAssertSucceedsInstanceE(%rip), %rax
 10575      000000
 10576 2f15 4889C7   		movq	%rax, %rdi
 10577 2f18 E887DDFF 		call	_ZN12_GLOBAL__N_123TestCheckAssertSucceedsC1Ev
 10577      FF
 10578 2f1d 488D0500 		leaq	__dso_handle(%rip), %rax
 10578      000000
 10579 2f24 4889C2   		movq	%rax, %rdx
 10580 2f27 488D0500 		leaq	_ZN12_GLOBAL__N_131testCheckAssertSucceedsInstanceE(%rip), %rax
 10580      000000
 10581 2f2e 4889C6   		movq	%rax, %rsi
 10582 2f31 488D0590 		leaq	_ZN12_GLOBAL__N_123TestCheckAssertSucceedsD1Ev(%rip), %rax
 10582      F8FFFF
 10583 2f38 4889C7   		movq	%rax, %rdi
 10584 2f3b E8000000 		call	__cxa_atexit@PLT
 10584      00
 10585 2f40 E8000000 		call	_ZN8UnitTest4Test11GetTestListEv@PLT
 10585      00
 10586 2f45 4889C1   		movq	%rax, %rcx
 10587 2f48 488D0500 		leaq	_ZN12_GLOBAL__N_131testCheckAssertSucceedsInstanceE(%rip), %rax
 10587      000000
 10588 2f4f 4889C2   		movq	%rax, %rdx
 10589 2f52 4889CE   		movq	%rcx, %rsi
 10590 2f55 488D0500 		leaq	_ZN12_GLOBAL__N_124adderCheckAssertSucceedsE(%rip), %rax
 10590      000000
 10591 2f5c 4889C7   		movq	%rax, %rdi
 10592 2f5f E8000000 		call	_ZN8UnitTest9ListAdderC1ERNS_8TestListEPNS_4TestE@PLT
 10592      00
  70:TestUnitTest++.cpp **** {
 10593              		.loc 5 70 1
 10594 2f64 488D0500 		leaq	_ZN12_GLOBAL__N_150testCheckThrowMacroFailsOnMissingExceptionInstanceE(%rip), %rax
 10594      000000
 10595 2f6b 4889C7   		movq	%rax, %rdi
 10596 2f6e E855DEFF 		call	_ZN12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingExceptionC1Ev
 10596      FF
 10597 2f73 488D0500 		leaq	__dso_handle(%rip), %rax
 10597      000000
 10598 2f7a 4889C2   		movq	%rax, %rdx
 10599 2f7d 488D0500 		leaq	_ZN12_GLOBAL__N_150testCheckThrowMacroFailsOnMissingExceptionInstanceE(%rip), %rax
 10599      000000
 10600 2f84 4889C6   		movq	%rax, %rsi
 10601 2f87 488D053E 		leaq	_ZN12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingExceptionD1Ev(%rip), %rax
 10601      F7FFFF
 10602 2f8e 4889C7   		movq	%rax, %rdi
 10603 2f91 E8000000 		call	__cxa_atexit@PLT
 10603      00
 10604 2f96 E8000000 		call	_ZN8UnitTest4Test11GetTestListEv@PLT
 10604      00
 10605 2f9b 4889C1   		movq	%rax, %rcx
 10606 2f9e 488D0500 		leaq	_ZN12_GLOBAL__N_150testCheckThrowMacroFailsOnMissingExceptionInstanceE(%rip), %rax
 10606      000000
 10607 2fa5 4889C2   		movq	%rax, %rdx
 10608 2fa8 4889CE   		movq	%rcx, %rsi
 10609 2fab 488D0500 		leaq	_ZN12_GLOBAL__N_143adderCheckThrowMacroFailsOnMissingExceptionE(%rip), %rax
 10609      000000
 10610 2fb2 4889C7   		movq	%rax, %rdi
 10611 2fb5 E8000000 		call	_ZN8UnitTest9ListAdderC1ERNS_8TestListEPNS_4TestE@PLT
 10611      00
  97:TestUnitTest++.cpp **** {
 10612              		.loc 5 97 1
 10613 2fba 488D0500 		leaq	_ZN12_GLOBAL__N_148testCheckThrowMacroFailsOnWrongExceptionInstanceE(%rip), %rax
 10613      000000
 10614 2fc1 4889C7   		movq	%rax, %rdi
 10615 2fc4 E8BDE0FF 		call	_ZN12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongExceptionC1Ev
 10615      FF
 10616 2fc9 488D0500 		leaq	__dso_handle(%rip), %rax
 10616      000000
 10617 2fd0 4889C2   		movq	%rax, %rdx
 10618 2fd3 488D0500 		leaq	_ZN12_GLOBAL__N_148testCheckThrowMacroFailsOnWrongExceptionInstanceE(%rip), %rax
 10618      000000
 10619 2fda 4889C6   		movq	%rax, %rsi
 10620 2fdd 488D05EC 		leaq	_ZN12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongExceptionD1Ev(%rip), %rax
 10620      F5FFFF
 10621 2fe4 4889C7   		movq	%rax, %rdi
 10622 2fe7 E8000000 		call	__cxa_atexit@PLT
 10622      00
 10623 2fec E8000000 		call	_ZN8UnitTest4Test11GetTestListEv@PLT
 10623      00
 10624 2ff1 4889C1   		movq	%rax, %rcx
 10625 2ff4 488D0500 		leaq	_ZN12_GLOBAL__N_148testCheckThrowMacroFailsOnWrongExceptionInstanceE(%rip), %rax
 10625      000000
 10626 2ffb 4889C2   		movq	%rax, %rdx
 10627 2ffe 4889CE   		movq	%rcx, %rsi
 10628 3001 488D0500 		leaq	_ZN12_GLOBAL__N_141adderCheckThrowMacroFailsOnWrongExceptionE(%rip), %rax
 10628      000000
 10629 3008 4889C7   		movq	%rax, %rdi
 10630 300b E8000000 		call	_ZN8UnitTest9ListAdderC1ERNS_8TestListEPNS_4TestE@PLT
 10630      00
 136:TestUnitTest++.cpp **** {
 10631              		.loc 5 136 1
 10632 3010 488D0500 		leaq	_ZN12_GLOBAL__N_151testSimpleFixtureDefaultFixtureCtorIsCalledInstanceE(%rip), %rax
 10632      000000
 10633 3017 4889C7   		movq	%rax, %rdi
 10634 301a E8C9E3FF 		call	_ZN12_GLOBAL__N_143TestSimpleFixtureDefaultFixtureCtorIsCalledC1Ev
 10634      FF
 10635 301f 488D0500 		leaq	__dso_handle(%rip), %rax
 10635      000000
 10636 3026 4889C2   		movq	%rax, %rdx
 10637 3029 488D0500 		leaq	_ZN12_GLOBAL__N_151testSimpleFixtureDefaultFixtureCtorIsCalledInstanceE(%rip), %rax
 10637      000000
 10638 3030 4889C6   		movq	%rax, %rsi
 10639 3033 488D0518 		leaq	_ZN12_GLOBAL__N_143TestSimpleFixtureDefaultFixtureCtorIsCalledD1Ev(%rip), %rax
 10639      F5FFFF
 10640 303a 4889C7   		movq	%rax, %rdi
 10641 303d E8000000 		call	__cxa_atexit@PLT
 10641      00
 10642 3042 E8000000 		call	_ZN8UnitTest4Test11GetTestListEv@PLT
 10642      00
 10643 3047 4889C1   		movq	%rax, %rcx
 10644 304a 488D0500 		leaq	_ZN12_GLOBAL__N_151testSimpleFixtureDefaultFixtureCtorIsCalledInstanceE(%rip), %rax
 10644      000000
 10645 3051 4889C2   		movq	%rax, %rdx
 10646 3054 4889CE   		movq	%rcx, %rsi
 10647 3057 488D0500 		leaq	_ZN12_GLOBAL__N_144adderSimpleFixtureDefaultFixtureCtorIsCalledE(%rip), %rax
 10647      000000
 10648 305e 4889C7   		movq	%rax, %rdi
 10649 3061 E8000000 		call	_ZN8UnitTest9ListAdderC1ERNS_8TestListEPNS_4TestE@PLT
 10649      00
 141:TestUnitTest++.cpp **** {
 10650              		.loc 5 141 1
 10651 3066 488D0500 		leaq	_ZN12_GLOBAL__N_151testSimpleFixtureOnlyOneFixtureAliveAtATimeInstanceE(%rip), %rax
 10651      000000
 10652 306d 4889C7   		movq	%rax, %rdi
 10653 3070 E82BE8FF 		call	_ZN12_GLOBAL__N_143TestSimpleFixtureOnlyOneFixtureAliveAtATimeC1Ev
 10653      FF
 10654 3075 488D0500 		leaq	__dso_handle(%rip), %rax
 10654      000000
 10655 307c 4889C2   		movq	%rax, %rdx
 10656 307f 488D0500 		leaq	_ZN12_GLOBAL__N_151testSimpleFixtureOnlyOneFixtureAliveAtATimeInstanceE(%rip), %rax
 10656      000000
 10657 3086 4889C6   		movq	%rax, %rsi
 10658 3089 488D0544 		leaq	_ZN12_GLOBAL__N_143TestSimpleFixtureOnlyOneFixtureAliveAtATimeD1Ev(%rip), %rax
 10658      F4FFFF
 10659 3090 4889C7   		movq	%rax, %rdi
 10660 3093 E8000000 		call	__cxa_atexit@PLT
 10660      00
 10661 3098 E8000000 		call	_ZN8UnitTest4Test11GetTestListEv@PLT
 10661      00
 10662 309d 4889C1   		movq	%rax, %rcx
 10663 30a0 488D0500 		leaq	_ZN12_GLOBAL__N_151testSimpleFixtureOnlyOneFixtureAliveAtATimeInstanceE(%rip), %rax
 10663      000000
 10664 30a7 4889C2   		movq	%rax, %rdx
 10665 30aa 4889CE   		movq	%rcx, %rsi
 10666 30ad 488D0500 		leaq	_ZN12_GLOBAL__N_144adderSimpleFixtureOnlyOneFixtureAliveAtATimeE(%rip), %rax
 10666      000000
 10667 30b4 4889C7   		movq	%rax, %rdi
 10668 30b7 E8000000 		call	_ZN8UnitTest9ListAdderC1ERNS_8TestListEPNS_4TestE@PLT
 10668      00
 151:TestUnitTest++.cpp **** {
 10669              		.loc 5 151 1
 10670 30bc 488D0500 		leaq	_ZN12_GLOBAL__N_145testCanCallCHECKOutsideOfTestFunctionInstanceE(%rip), %rax
 10670      000000
 10671 30c3 4889C7   		movq	%rax, %rdi
 10672 30c6 E83FEDFF 		call	_ZN12_GLOBAL__N_137TestCanCallCHECKOutsideOfTestFunctionC1Ev
 10672      FF
 10673 30cb 488D0500 		leaq	__dso_handle(%rip), %rax
 10673      000000
 10674 30d2 4889C2   		movq	%rax, %rdx
 10675 30d5 488D0500 		leaq	_ZN12_GLOBAL__N_145testCanCallCHECKOutsideOfTestFunctionInstanceE(%rip), %rax
 10675      000000
 10676 30dc 4889C6   		movq	%rax, %rsi
 10677 30df 488D0570 		leaq	_ZN12_GLOBAL__N_137TestCanCallCHECKOutsideOfTestFunctionD1Ev(%rip), %rax
 10677      F3FFFF
 10678 30e6 4889C7   		movq	%rax, %rdi
 10679 30e9 E8000000 		call	__cxa_atexit@PLT
 10679      00
 10680 30ee E8000000 		call	_ZN8UnitTest4Test11GetTestListEv@PLT
 10680      00
 10681 30f3 4889C1   		movq	%rax, %rcx
 10682 30f6 488D0500 		leaq	_ZN12_GLOBAL__N_145testCanCallCHECKOutsideOfTestFunctionInstanceE(%rip), %rax
 10682      000000
 10683 30fd 4889C2   		movq	%rax, %rdx
 10684 3100 4889CE   		movq	%rcx, %rsi
 10685 3103 488D0500 		leaq	_ZN12_GLOBAL__N_138adderCanCallCHECKOutsideOfTestFunctionE(%rip), %rax
 10685      000000
 10686 310a 4889C7   		movq	%rax, %rdi
 10687 310d E8000000 		call	_ZN8UnitTest9ListAdderC1ERNS_8TestListEPNS_4TestE@PLT
 10687      00
 10688              	.L499:
 10689              		.loc 5 156 1
 10690 3112 90       		nop
 10691 3113 C9       		leave
 10692              		.cfi_def_cfa 7, 8
 10693 3114 C3       		ret
 10694              		.cfi_endproc
 10695              	.LFE1729:
 10698              	_GLOBAL__sub_I_TestUnitTest__.cpp:
 10699              	.LFB1730:
 10700              		.loc 5 156 1
 10701              		.cfi_startproc
 10702 3115 F30F1EFA 		endbr64
 10703 3119 55       		pushq	%rbp
 10704              		.cfi_def_cfa_offset 16
 10705              		.cfi_offset 6, -16
 10706 311a 4889E5   		movq	%rsp, %rbp
 10707              		.cfi_def_cfa_register 6
 10708              		.loc 5 156 1
 10709 311d BEFFFF00 		movl	$65535, %esi
 10709      00
 10710 3122 BF010000 		movl	$1, %edi
 10710      00
 10711 3127 E809FBFF 		call	_Z41__static_initialization_and_destruction_0ii
 10711      FF
 10712 312c 5D       		popq	%rbp
 10713              		.cfi_def_cfa 7, 8
 10714 312d C3       		ret
 10715              		.cfi_endproc
 10716              	.LFE1730:
 10718              		.section	.init_array,"aw"
 10719              		.align 8
 10720 0000 00000000 		.quad	_GLOBAL__sub_I_TestUnitTest__.cpp
 10720      00000000 
 10721              		.section	.rodata
 10722 0b0a 0000     		.align 4
 10723              	.LC15:
 10724 0b0c 0AD7233C 		.long	1008981770
 10725              		.align 4
 10726              	.LC16:
 10727 0b10 62100040 		.long	1073746018
 10728              		.align 4
 10729              	.LC17:
 10730 0b14 00000040 		.long	1073741824
 10731              		.align 4
 10732              	.LC21:
 10733 0b18 0000803F 		.long	1065353216
 10734              		.align 4
 10735              	.LC22:
 10736 0b1c 00004040 		.long	1077936128
 10737              		.align 4
 10738              	.LC23:
 10739 0b20 D7A30040 		.long	1073783767
 10740              		.align 4
 10741              	.LC24:
 10742 0b24 CDCCCC3D 		.long	1036831949
 10743              		.align 4
 10744              	.LC28:
 10745 0b28 17B7D138 		.long	953267991
 10746              		.text
 10747              	.Letext0:
 10748              		.file 16 "../TestDetails.h"
 10749              		.file 17 "../TestList.h"
 10750              		.file 18 "../TestResults.h"
 10751              		.file 19 "../Test.h"
 10752              		.file 20 "../PosixUtils/SignalTranslator.h"
 10753              		.file 21 "../AssertException.h"
 10754              		.file 22 "../CurrentTest.h"
 10755              		.file 23 "../ReportAssert.h"
 10756              		.file 24 "<built-in>"
 10757              		.file 25 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h"
 10758              		.file 26 "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h"
 10759              		.file 27 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h"
 10760              		.file 28 "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h"
 10761              		.file 29 "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h"
 10762              		.file 30 "/usr/include/c++/11/cwchar"
 10763              		.file 31 "/usr/include/c++/11/bits/cpp_type_traits.h"
 10764              		.file 32 "/usr/include/c++/11/bits/char_traits.h"
 10765              		.file 33 "/usr/include/x86_64-linux-gnu/c++/11/bits/c++config.h"
 10766              		.file 34 "/usr/include/c++/11/clocale"
 10767              		.file 35 "/usr/include/c++/11/bits/basic_string.h"
 10768              		.file 36 "/usr/include/c++/11/bits/basic_string.tcc"
 10769              		.file 37 "/usr/include/c++/11/sstream"
 10770              		.file 38 "/usr/include/c++/11/bits/stringfwd.h"
 10771              		.file 39 "/usr/include/c++/11/cwctype"
 10772              		.file 40 "/usr/include/c++/11/bits/ostream.tcc"
 10773              		.file 41 "/usr/include/c++/11/ostream"
 10774              		.file 42 "/usr/include/c++/11/bits/vector.tcc"
 10775              		.file 43 "/usr/include/c++/11/bits/functexcept.h"
 10776              		.file 44 "/usr/include/c++/11/bits/basic_ios.h"
 10777              		.file 45 "/usr/include/wchar.h"
 10778              		.file 46 "/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h"
 10779              		.file 47 "/usr/include/c++/11/debug/debug.h"
 10780              		.file 48 "/usr/include/c++/11/bits/predefined_ops.h"
 10781              		.file 49 "/usr/include/locale.h"
 10782              		.file 50 "/usr/include/x86_64-linux-gnu/bits/types.h"
 10783              		.file 51 "/usr/include/x86_64-linux-gnu/bits/setjmp.h"
 10784              		.file 52 "/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h"
 10785              		.file 53 "/usr/include/x86_64-linux-gnu/bits/types/struct___jmp_buf_tag.h"
 10786              		.file 54 "/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h"
 10787              		.file 55 "/usr/include/wctype.h"
 10788              		.file 56 "/usr/include/setjmp.h"
 10789              		.file 57 "/usr/include/x86_64-linux-gnu/bits/types/__sigval_t.h"
 10790              		.file 58 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h"
 10791              		.file 59 "/usr/include/signal.h"
 10792              		.file 60 "/usr/include/x86_64-linux-gnu/bits/sigaction.h"
 10793              		.file 61 "/usr/include/c++/11/new"
 31356              		.align 8
 31359              	DW.ref._ZTIN8UnitTest15AssertExceptionE:
 31360 0000 00000000 		.quad	_ZTIN8UnitTest15AssertExceptionE
 31360      00000000 
 31361              		.hidden	DW.ref._ZTISt9exception
 31362              		.weak	DW.ref._ZTISt9exception
 31363              		.section	.data.rel.local.DW.ref._ZTISt9exception,"awG",@progbits,DW.ref._ZTISt9exception,comdat
 31364              		.align 8
 31367              	DW.ref._ZTISt9exception:
 31368 0000 00000000 		.quad	_ZTISt9exception
 31368      00000000 
 31369              		.section	.data.rel.local,"aw"
 31370              		.align 8
 31373              	.LDFCM0:
 31374 0000 00000000 		.quad	_ZTIZNK12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectException7RunImplEvE13TestExcepti
 31374      00000000 
 31375              		.hidden	DW.ref._ZTIi
 31376              		.weak	DW.ref._ZTIi
 31377              		.section	.data.rel.local.DW.ref._ZTIi,"awG",@progbits,DW.ref._ZTIi,comdat
 31378              		.align 8
 31381              	DW.ref._ZTIi:
 31382 0000 00000000 		.quad	_ZTIi
 31382      00000000 
 31383              		.hidden	DW.ref.__gxx_personality_v0
 31384              		.weak	DW.ref.__gxx_personality_v0
 31385              		.section	.data.rel.local.DW.ref.__gxx_personality_v0,"awG",@progbits,DW.ref.__gxx_personality_v0,c
 31386              		.align 8
 31389              	DW.ref.__gxx_personality_v0:
 31390 0000 00000000 		.quad	__gxx_personality_v0
 31390      00000000 
 31391              		.hidden	__dso_handle
 31392              		.ident	"GCC: (Ubuntu 11.3.0-1ubuntu1~22.04) 11.3.0"
 31393              		.section	.note.GNU-stack,"",@progbits
 31394              		.section	.note.gnu.property,"a"
 31395              		.align 8
 31396 0000 04000000 		.long	1f - 0f
 31397 0004 10000000 		.long	4f - 1f
 31398 0008 05000000 		.long	5
 31399              	0:
 31400 000c 474E5500 		.string	"GNU"
 31401              	1:
 31402              		.align 8
 31403 0010 020000C0 		.long	0xc0000002
 31404 0014 04000000 		.long	3f - 2f
 31405              	2:
 31406 0018 03000000 		.long	0x3
 31407              	3:
 31408 001c 00000000 		.align 8
 31409              	4:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 TestUnitTest++.cpp
     /tmp/ccxvmr70.s:11     .text._ZN13UnitTestSuite12GetSuiteNameEv:0000000000000000 _ZN13UnitTestSuite12GetSuiteNameEv
     /tmp/ccxvmr70.s:34     .text._ZSt17__size_to_integerm:0000000000000000 _ZSt17__size_to_integerm
     /tmp/ccxvmr70.s:59     .text._ZN8UnitTest15MemoryOutStreamC1Ev:0000000000000000 _ZN8UnitTest15MemoryOutStreamC1Ev
     /tmp/ccxvmr70.s:31389  .data.rel.local.DW.ref.__gxx_personality_v0:0000000000000000 DW.ref.__gxx_personality_v0
     /tmp/ccxvmr70.s:9899   .data.rel.ro.local._ZTTN8UnitTest15MemoryOutStreamE:0000000000000000 _ZTTN8UnitTest15MemoryOutStreamE
     /tmp/ccxvmr70.s:9883   .data.rel.ro.local._ZTVN8UnitTest15MemoryOutStreamE:0000000000000000 _ZTVN8UnitTest15MemoryOutStreamE
     /tmp/ccxvmr70.s:172    .text._ZN17ScopedCurrentTestC2ERN8UnitTest11TestResultsEPKNS0_11TestDetailsE:0000000000000000 _ZN17ScopedCurrentTestC2ERN8UnitTest11TestResultsEPKNS0_11TestDetailsE
     /tmp/ccxvmr70.s:172    .text._ZN17ScopedCurrentTestC2ERN8UnitTest11TestResultsEPKNS0_11TestDetailsE:0000000000000000 _ZN17ScopedCurrentTestC1ERN8UnitTest11TestResultsEPKNS0_11TestDetailsE
     /tmp/ccxvmr70.s:229    .text._ZN17ScopedCurrentTestD2Ev:0000000000000000 _ZN17ScopedCurrentTestD2Ev
     /tmp/ccxvmr70.s:229    .text._ZN17ScopedCurrentTestD2Ev:0000000000000000 _ZN17ScopedCurrentTestD1Ev
     /tmp/ccxvmr70.s:275    .text:0000000000000000 _ZN12_GLOBAL__N_122TestValidCheckSucceedsC2Ev
     /tmp/ccxvmr70.s:9774   .data.rel.ro.local:0000000000000258 _ZTVN12_GLOBAL__N_122TestValidCheckSucceedsE
     /tmp/ccxvmr70.s:275    .text:0000000000000000 _ZN12_GLOBAL__N_122TestValidCheckSucceedsC1Ev
     /tmp/ccxvmr70.s:315    .bss:0000000000000000 _ZN12_GLOBAL__N_130testValidCheckSucceedsInstanceE
     /tmp/ccxvmr70.s:315    .bss:0000000000000038 _ZN12_GLOBAL__N_123adderValidCheckSucceedsE
     /tmp/ccxvmr70.s:327    .text:0000000000000050 _ZNK12_GLOBAL__N_122TestValidCheckSucceeds7RunImplEv
     /tmp/ccxvmr70.s:4529   .text._ZN8UnitTest5CheckIbEEbT_:0000000000000000 _ZN8UnitTest5CheckIbEEbT_
     /tmp/ccxvmr70.s:471    .text:0000000000000144 _ZN12_GLOBAL__N_126TestCheckWorksWithPointersC2Ev
     /tmp/ccxvmr70.s:9666   .data.rel.ro.local:0000000000000230 _ZTVN12_GLOBAL__N_126TestCheckWorksWithPointersE
     /tmp/ccxvmr70.s:471    .text:0000000000000144 _ZN12_GLOBAL__N_126TestCheckWorksWithPointersC1Ev
     /tmp/ccxvmr70.s:510    .bss:0000000000000040 _ZN12_GLOBAL__N_134testCheckWorksWithPointersInstanceE
     /tmp/ccxvmr70.s:510    .bss:0000000000000078 _ZN12_GLOBAL__N_127adderCheckWorksWithPointersE
     /tmp/ccxvmr70.s:527    .text:0000000000000194 _ZNK12_GLOBAL__N_126TestCheckWorksWithPointers7RunImplEv
     /tmp/ccxvmr70.s:4554   .text._ZN8UnitTest5CheckIPvEEbT_:0000000000000000 _ZN8UnitTest5CheckIPvEEbT_
     /tmp/ccxvmr70.s:756    .text:000000000000034c _ZN12_GLOBAL__N_127TestValidCheckEqualSucceedsC2Ev
     /tmp/ccxvmr70.s:9558   .data.rel.ro.local:0000000000000208 _ZTVN12_GLOBAL__N_127TestValidCheckEqualSucceedsE
     /tmp/ccxvmr70.s:756    .text:000000000000034c _ZN12_GLOBAL__N_127TestValidCheckEqualSucceedsC1Ev
     /tmp/ccxvmr70.s:795    .bss:0000000000000080 _ZN12_GLOBAL__N_135testValidCheckEqualSucceedsInstanceE
     /tmp/ccxvmr70.s:795    .bss:00000000000000b8 _ZN12_GLOBAL__N_128adderValidCheckEqualSucceedsE
     /tmp/ccxvmr70.s:805    .text:000000000000039c _ZNK12_GLOBAL__N_127TestValidCheckEqualSucceeds7RunImplEv
     /tmp/ccxvmr70.s:4583   .text._ZN8UnitTest10CheckEqualIiiEEvRNS_11TestResultsERKT_RKT0_RKNS_11TestDetailsE:0000000000000000 _ZN8UnitTest10CheckEqualIiiEEvRNS_11TestResultsERKT_RKT0_RKNS_11TestDetailsE
     /tmp/ccxvmr70.s:943    .text:0000000000000482 _ZN12_GLOBAL__N_131TestCheckEqualWorksWithPointersC2Ev
     /tmp/ccxvmr70.s:9450   .data.rel.ro.local:00000000000001e0 _ZTVN12_GLOBAL__N_131TestCheckEqualWorksWithPointersE
     /tmp/ccxvmr70.s:943    .text:0000000000000482 _ZN12_GLOBAL__N_131TestCheckEqualWorksWithPointersC1Ev
     /tmp/ccxvmr70.s:982    .bss:00000000000000c0 _ZN12_GLOBAL__N_139testCheckEqualWorksWithPointersInstanceE
     /tmp/ccxvmr70.s:982    .bss:00000000000000f8 _ZN12_GLOBAL__N_132adderCheckEqualWorksWithPointersE
     /tmp/ccxvmr70.s:992    .text:00000000000004d2 _ZNK12_GLOBAL__N_131TestCheckEqualWorksWithPointers7RunImplEv
     /tmp/ccxvmr70.s:4730   .text._ZN8UnitTest10CheckEqualIPvS1_EEvRNS_11TestResultsERKT_RKT0_RKNS_11TestDetailsE:0000000000000000 _ZN8UnitTest10CheckEqualIPvS1_EEvRNS_11TestResultsERKT_RKT0_RKNS_11TestDetailsE
     /tmp/ccxvmr70.s:1129   .text:00000000000005ba _ZN12_GLOBAL__N_127TestValidCheckCloseSucceedsC2Ev
     /tmp/ccxvmr70.s:9342   .data.rel.ro.local:00000000000001b8 _ZTVN12_GLOBAL__N_127TestValidCheckCloseSucceedsE
     /tmp/ccxvmr70.s:1129   .text:00000000000005ba _ZN12_GLOBAL__N_127TestValidCheckCloseSucceedsC1Ev
     /tmp/ccxvmr70.s:1168   .bss:0000000000000100 _ZN12_GLOBAL__N_135testValidCheckCloseSucceedsInstanceE
     /tmp/ccxvmr70.s:1168   .bss:0000000000000138 _ZN12_GLOBAL__N_128adderValidCheckCloseSucceedsE
     /tmp/ccxvmr70.s:1181   .text:000000000000060a _ZNK12_GLOBAL__N_127TestValidCheckCloseSucceeds7RunImplEv
     /tmp/ccxvmr70.s:4881   .text._ZN8UnitTest10CheckCloseIfffEEvRNS_11TestResultsERKT_RKT0_RKT1_RKNS_11TestDetailsE:0000000000000000 _ZN8UnitTest10CheckCloseIfffEEvRNS_11TestResultsERKT_RKT0_RKT1_RKNS_11TestDetailsE
     /tmp/ccxvmr70.s:1405   .text:00000000000007e0 _ZN12_GLOBAL__N_122TestArrayCloseSucceedsC2Ev
     /tmp/ccxvmr70.s:9234   .data.rel.ro.local:0000000000000190 _ZTVN12_GLOBAL__N_122TestArrayCloseSucceedsE
     /tmp/ccxvmr70.s:1405   .text:00000000000007e0 _ZN12_GLOBAL__N_122TestArrayCloseSucceedsC1Ev
     /tmp/ccxvmr70.s:1444   .bss:0000000000000140 _ZN12_GLOBAL__N_130testArrayCloseSucceedsInstanceE
     /tmp/ccxvmr70.s:1444   .bss:0000000000000178 _ZN12_GLOBAL__N_123adderArrayCloseSucceedsE
     /tmp/ccxvmr70.s:1454   .text:0000000000000830 _ZNK12_GLOBAL__N_122TestArrayCloseSucceeds7RunImplEv
     /tmp/ccxvmr70.s:5059   .text._ZN8UnitTest15CheckArrayCloseIA3_fS1_fEEvRNS_11TestResultsERKT_RKT0_iRKT1_RKNS_11TestDetailsE:0000000000000000 _ZN8UnitTest15CheckArrayCloseIA3_fS1_fEEvRNS_11TestResultsERKT_RKT0_iRKT1_RKNS_11TestDetailsE
     /tmp/ccxvmr70.s:1609   .text:0000000000000972 _ZN12_GLOBAL__N_135TestCheckArrayCloseWorksWithVectorsC2Ev
     /tmp/ccxvmr70.s:9126   .data.rel.ro.local:0000000000000168 _ZTVN12_GLOBAL__N_135TestCheckArrayCloseWorksWithVectorsE
     /tmp/ccxvmr70.s:1609   .text:0000000000000972 _ZN12_GLOBAL__N_135TestCheckArrayCloseWorksWithVectorsC1Ev
     /tmp/ccxvmr70.s:1648   .bss:0000000000000180 _ZN12_GLOBAL__N_143testCheckArrayCloseWorksWithVectorsInstanceE
     /tmp/ccxvmr70.s:1648   .bss:00000000000001b8 _ZN12_GLOBAL__N_136adderCheckArrayCloseWorksWithVectorsE
     /tmp/ccxvmr70.s:1658   .text:00000000000009c2 _ZNK12_GLOBAL__N_135TestCheckArrayCloseWorksWithVectors7RunImplEv
     /tmp/ccxvmr70.s:5280   .text._ZNSaIfEC2Ev:0000000000000000 _ZNSaIfEC1Ev
     /tmp/ccxvmr70.s:5344   .text._ZNSt6vectorIfSaIfEEC2EmRKfRKS0_:0000000000000000 _ZNSt6vectorIfSaIfEEC1EmRKfRKS0_
     /tmp/ccxvmr70.s:5313   .text._ZNSaIfED2Ev:0000000000000000 _ZNSaIfED1Ev
     /tmp/ccxvmr70.s:5528   .text._ZNSt6vectorIfSaIfEEixEm:0000000000000000 _ZNSt6vectorIfSaIfEEixEm
     /tmp/ccxvmr70.s:5559   .text._ZNKSt6vectorIfSaIfEE4sizeEv:0000000000000000 _ZNKSt6vectorIfSaIfEE4sizeEv
     /tmp/ccxvmr70.s:5590   .text._ZN8UnitTest15CheckArrayCloseISt6vectorIfSaIfEES3_fEEvRNS_11TestResultsERKT_RKT0_iRKT1_RKNS_11TestDetailsE:0000000000000000 _ZN8UnitTest15CheckArrayCloseISt6vectorIfSaIfEES3_fEEvRNS_11TestResultsERKT_RKT0_iRKT1_RKNS_11TestDetailsE
     /tmp/ccxvmr70.s:5440   .text._ZNSt6vectorIfSaIfEED2Ev:0000000000000000 _ZNSt6vectorIfSaIfEED1Ev
     /tmp/ccxvmr70.s:1875   .text:0000000000000b7a _ZN12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectExceptionC2Ev
     /tmp/ccxvmr70.s:9018   .data.rel.ro.local:0000000000000140 _ZTVN12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectExceptionE
     /tmp/ccxvmr70.s:1875   .text:0000000000000b7a _ZN12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectExceptionC1Ev
     /tmp/ccxvmr70.s:1914   .bss:00000000000001c0 _ZN12_GLOBAL__N_153testCheckThrowMacroSucceedsOnCorrectExceptionInstanceE
     /tmp/ccxvmr70.s:1914   .bss:00000000000001f8 _ZN12_GLOBAL__N_146adderCheckThrowMacroSucceedsOnCorrectExceptionE
     /tmp/ccxvmr70.s:1924   .text:0000000000000bca _ZNK12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectException7RunImplEv
     /tmp/ccxvmr70.s:10270  .data.rel.ro:00000000000000c0 _ZTIZNK12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectException7RunImplEvE13TestException
     /tmp/ccxvmr70.s:2055   .text:0000000000000ca4 _ZN12_GLOBAL__N_123TestCheckAssertSucceedsC2Ev
     /tmp/ccxvmr70.s:8910   .data.rel.ro.local:0000000000000118 _ZTVN12_GLOBAL__N_123TestCheckAssertSucceedsE
     /tmp/ccxvmr70.s:2055   .text:0000000000000ca4 _ZN12_GLOBAL__N_123TestCheckAssertSucceedsC1Ev
     /tmp/ccxvmr70.s:2094   .bss:0000000000000200 _ZN12_GLOBAL__N_131testCheckAssertSucceedsInstanceE
     /tmp/ccxvmr70.s:2094   .bss:0000000000000238 _ZN12_GLOBAL__N_124adderCheckAssertSucceedsE
     /tmp/ccxvmr70.s:2108   .text:0000000000000cf4 _ZNK12_GLOBAL__N_123TestCheckAssertSucceeds7RunImplEv
     /tmp/ccxvmr70.s:31359  .data.rel.local.DW.ref._ZTIN8UnitTest15AssertExceptionE:0000000000000000 DW.ref._ZTIN8UnitTest15AssertExceptionE
     /tmp/ccxvmr70.s:2238   .text:0000000000000dc8 _ZN12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingExceptionC2Ev
     /tmp/ccxvmr70.s:8694   .data.rel.ro.local:00000000000000c8 _ZTVN12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingExceptionE
     /tmp/ccxvmr70.s:2238   .text:0000000000000dc8 _ZN12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingExceptionC1Ev
     /tmp/ccxvmr70.s:2277   .bss:0000000000000240 _ZN12_GLOBAL__N_150testCheckThrowMacroFailsOnMissingExceptionInstanceE
     /tmp/ccxvmr70.s:2277   .bss:0000000000000278 _ZN12_GLOBAL__N_143adderCheckThrowMacroFailsOnMissingExceptionE
     /tmp/ccxvmr70.s:2288   .text:0000000000000e18 _ZZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvEN11NoThrowTestC2Ev
     /tmp/ccxvmr70.s:8802   .data.rel.ro.local:00000000000000f0 _ZTVZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvE11NoThrowTest
     /tmp/ccxvmr70.s:2288   .text:0000000000000e18 _ZZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvEN11NoThrowTestC1Ev
     /tmp/ccxvmr70.s:2324   .text:0000000000000e60 _ZZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvENK11NoThrowTest9DontThrowEv
     /tmp/ccxvmr70.s:2349   .text:0000000000000e6c _ZZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvENK11NoThrowTest7RunImplEv
     /tmp/ccxvmr70.s:2415   .text:0000000000000efc _ZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEv
     /tmp/ccxvmr70.s:8811   .text:000000000000274a _ZZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvEN11NoThrowTestD1Ev
     /tmp/ccxvmr70.s:2643   .text:0000000000001086 _ZN12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongExceptionC2Ev
     /tmp/ccxvmr70.s:8478   .data.rel.ro.local:0000000000000078 _ZTVN12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongExceptionE
     /tmp/ccxvmr70.s:2643   .text:0000000000001086 _ZN12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongExceptionC1Ev
     /tmp/ccxvmr70.s:2682   .bss:0000000000000280 _ZN12_GLOBAL__N_148testCheckThrowMacroFailsOnWrongExceptionInstanceE
     /tmp/ccxvmr70.s:2682   .bss:00000000000002b8 _ZN12_GLOBAL__N_141adderCheckThrowMacroFailsOnWrongExceptionE
     /tmp/ccxvmr70.s:2691   .text:00000000000010d6 _ZZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEvEN14WrongThrowTestC2Ev
     /tmp/ccxvmr70.s:8586   .data.rel.ro.local:00000000000000a0 _ZTVZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEvE14WrongThrowTest
     /tmp/ccxvmr70.s:2691   .text:00000000000010d6 _ZZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEvEN14WrongThrowTestC1Ev
     /tmp/ccxvmr70.s:2731   .text:000000000000111e _ZZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEvENK14WrongThrowTest7RunImplEv
     /tmp/ccxvmr70.s:31381  .data.rel.local.DW.ref._ZTIi:0000000000000000 DW.ref._ZTIi
     /tmp/ccxvmr70.s:2859   .text:0000000000001200 _ZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEv
     /tmp/ccxvmr70.s:8595   .text:000000000000264e _ZZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEvEN14WrongThrowTestD1Ev
     /tmp/ccxvmr70.s:3082   .text:000000000000138a _ZN12_GLOBAL__N_113SimpleFixtureC2Ev
     /tmp/ccxvmr70.s:3133   .bss:00000000000002bc _ZN12_GLOBAL__N_113SimpleFixture13instanceCountE
     /tmp/ccxvmr70.s:3108   .text:00000000000013a4 _ZN12_GLOBAL__N_113SimpleFixtureD2Ev
     /tmp/ccxvmr70.s:3136   .text:00000000000013be _ZN12_GLOBAL__N_145SimpleFixtureDefaultFixtureCtorIsCalledHelperC2ERKN8UnitTest11TestDetailsE
     /tmp/ccxvmr70.s:3136   .text:00000000000013be _ZN12_GLOBAL__N_145SimpleFixtureDefaultFixtureCtorIsCalledHelperC1ERKN8UnitTest11TestDetailsE
     /tmp/ccxvmr70.s:3171   .text:00000000000013e8 _ZN12_GLOBAL__N_143TestSimpleFixtureDefaultFixtureCtorIsCalledC2Ev
     /tmp/ccxvmr70.s:8370   .data.rel.ro.local:0000000000000050 _ZTVN12_GLOBAL__N_143TestSimpleFixtureDefaultFixtureCtorIsCalledE
     /tmp/ccxvmr70.s:3171   .text:00000000000013e8 _ZN12_GLOBAL__N_143TestSimpleFixtureDefaultFixtureCtorIsCalledC1Ev
     /tmp/ccxvmr70.s:3210   .bss:00000000000002c0 _ZN12_GLOBAL__N_151testSimpleFixtureDefaultFixtureCtorIsCalledInstanceE
     /tmp/ccxvmr70.s:3210   .bss:00000000000002f8 _ZN12_GLOBAL__N_144adderSimpleFixtureDefaultFixtureCtorIsCalledE
     /tmp/ccxvmr70.s:3215   .text:0000000000001438 _ZN12_GLOBAL__N_145SimpleFixtureDefaultFixtureCtorIsCalledHelperD2Ev
     /tmp/ccxvmr70.s:3215   .text:0000000000001438 _ZN12_GLOBAL__N_145SimpleFixtureDefaultFixtureCtorIsCalledHelperD1Ev
     /tmp/ccxvmr70.s:3252   .text:0000000000001454 _ZNK12_GLOBAL__N_143TestSimpleFixtureDefaultFixtureCtorIsCalled7RunImplEv
     /tmp/ccxvmr70.s:5820   .text:0000000000001e77 _ZN8UnitTest11ExecuteTestIN12_GLOBAL__N_145SimpleFixtureDefaultFixtureCtorIsCalledHelperEEEvRT_RKNS_11TestDetailsE
     /tmp/ccxvmr70.s:9944   .text._ZN8UnitTest15MemoryOutStreamD1Ev:0000000000000000 _ZN8UnitTest15MemoryOutStreamD1Ev
     /tmp/ccxvmr70.s:31367  .data.rel.local.DW.ref._ZTISt9exception:0000000000000000 DW.ref._ZTISt9exception
     /tmp/ccxvmr70.s:3595   .text:000000000000177a _ZN12_GLOBAL__N_145SimpleFixtureDefaultFixtureCtorIsCalledHelper7RunImplEv
     /tmp/ccxvmr70.s:3737   .text:0000000000001876 _ZN12_GLOBAL__N_145SimpleFixtureOnlyOneFixtureAliveAtATimeHelperC2ERKN8UnitTest11TestDetailsE
     /tmp/ccxvmr70.s:3737   .text:0000000000001876 _ZN12_GLOBAL__N_145SimpleFixtureOnlyOneFixtureAliveAtATimeHelperC1ERKN8UnitTest11TestDetailsE
     /tmp/ccxvmr70.s:3772   .text:00000000000018a0 _ZN12_GLOBAL__N_143TestSimpleFixtureOnlyOneFixtureAliveAtATimeC2Ev
     /tmp/ccxvmr70.s:8262   .data.rel.ro.local:0000000000000028 _ZTVN12_GLOBAL__N_143TestSimpleFixtureOnlyOneFixtureAliveAtATimeE
     /tmp/ccxvmr70.s:3772   .text:00000000000018a0 _ZN12_GLOBAL__N_143TestSimpleFixtureOnlyOneFixtureAliveAtATimeC1Ev
     /tmp/ccxvmr70.s:3811   .bss:0000000000000300 _ZN12_GLOBAL__N_151testSimpleFixtureOnlyOneFixtureAliveAtATimeInstanceE
     /tmp/ccxvmr70.s:3811   .bss:0000000000000338 _ZN12_GLOBAL__N_144adderSimpleFixtureOnlyOneFixtureAliveAtATimeE
     /tmp/ccxvmr70.s:3816   .text:00000000000018f0 _ZN12_GLOBAL__N_145SimpleFixtureOnlyOneFixtureAliveAtATimeHelperD2Ev
     /tmp/ccxvmr70.s:3816   .text:00000000000018f0 _ZN12_GLOBAL__N_145SimpleFixtureOnlyOneFixtureAliveAtATimeHelperD1Ev
     /tmp/ccxvmr70.s:3843   .text:000000000000190c _ZNK12_GLOBAL__N_143TestSimpleFixtureOnlyOneFixtureAliveAtATime7RunImplEv
     /tmp/ccxvmr70.s:6191   .text:0000000000002166 _ZN8UnitTest11ExecuteTestIN12_GLOBAL__N_145SimpleFixtureOnlyOneFixtureAliveAtATimeHelperEEEvRT_RKNS_11TestDetailsE
     /tmp/ccxvmr70.s:4183   .text:0000000000001c32 _ZN12_GLOBAL__N_145SimpleFixtureOnlyOneFixtureAliveAtATimeHelper7RunImplEv
     /tmp/ccxvmr70.s:4314   .text:0000000000001d17 _ZN12_GLOBAL__N_19CheckBoolEb
     /tmp/ccxvmr70.s:4459   .text:0000000000001e0a _ZN12_GLOBAL__N_137TestCanCallCHECKOutsideOfTestFunctionC2Ev
     /tmp/ccxvmr70.s:8154   .data.rel.ro.local:0000000000000000 _ZTVN12_GLOBAL__N_137TestCanCallCHECKOutsideOfTestFunctionE
     /tmp/ccxvmr70.s:4459   .text:0000000000001e0a _ZN12_GLOBAL__N_137TestCanCallCHECKOutsideOfTestFunctionC1Ev
     /tmp/ccxvmr70.s:4498   .bss:0000000000000340 _ZN12_GLOBAL__N_145testCanCallCHECKOutsideOfTestFunctionInstanceE
     /tmp/ccxvmr70.s:4498   .bss:0000000000000378 _ZN12_GLOBAL__N_138adderCanCallCHECKOutsideOfTestFunctionE
     /tmp/ccxvmr70.s:4503   .text:0000000000001e5a _ZNK12_GLOBAL__N_137TestCanCallCHECKOutsideOfTestFunction7RunImplEv
     /tmp/ccxvmr70.s:6563   .text._ZN8UnitTest8AreCloseIfffEEbRKT_RKT0_RKT1_:0000000000000000 _ZN8UnitTest8AreCloseIfffEEbRKT_RKT0_RKT1_
     /tmp/ccxvmr70.s:6617   .text._ZN8UnitTest13ArrayAreCloseIA3_fS1_fEEbRKT_RKT0_iRKT1_:0000000000000000 _ZN8UnitTest13ArrayAreCloseIA3_fS1_fEEbRKT_RKT0_iRKT1_
     /tmp/ccxvmr70.s:5280   .text._ZNSaIfEC2Ev:0000000000000000 _ZNSaIfEC2Ev
     /tmp/ccxvmr70.s:6685   .text._ZN9__gnu_cxx13new_allocatorIfEC2Ev:0000000000000000 _ZN9__gnu_cxx13new_allocatorIfEC2Ev
     /tmp/ccxvmr70.s:5313   .text._ZNSaIfED2Ev:0000000000000000 _ZNSaIfED2Ev
     /tmp/ccxvmr70.s:6711   .text._ZN9__gnu_cxx13new_allocatorIfED2Ev:0000000000000000 _ZN9__gnu_cxx13new_allocatorIfED2Ev
     /tmp/ccxvmr70.s:5344   .text._ZNSt6vectorIfSaIfEEC2EmRKfRKS0_:0000000000000000 _ZNSt6vectorIfSaIfEEC2EmRKfRKS0_
     /tmp/ccxvmr70.s:6739   .text._ZNSt6vectorIfSaIfEE17_S_check_init_lenEmRKS0_:0000000000000000 _ZNSt6vectorIfSaIfEE17_S_check_init_lenEmRKS0_
     /tmp/ccxvmr70.s:6869   .text._ZNSt12_Vector_baseIfSaIfEEC2EmRKS0_:0000000000000000 _ZNSt12_Vector_baseIfSaIfEEC2EmRKS0_
     /tmp/ccxvmr70.s:7042   .text._ZNSt6vectorIfSaIfEE18_M_fill_initializeEmRKf:0000000000000000 _ZNSt6vectorIfSaIfEE18_M_fill_initializeEmRKf
     /tmp/ccxvmr70.s:6955   .text._ZNSt12_Vector_baseIfSaIfEED2Ev:0000000000000000 _ZNSt12_Vector_baseIfSaIfEED2Ev
     /tmp/ccxvmr70.s:5440   .text._ZNSt6vectorIfSaIfEED2Ev:0000000000000000 _ZNSt6vectorIfSaIfEED2Ev
     /tmp/ccxvmr70.s:7083   .text._ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv:0000000000000000 _ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv
     /tmp/ccxvmr70.s:7106   .text._ZSt8_DestroyIPffEvT_S1_RSaIT0_E:0000000000000000 _ZSt8_DestroyIPffEvT_S1_RSaIT0_E
     /tmp/ccxvmr70.s:7138   .text._ZN8UnitTest13ArrayAreCloseISt6vectorIfSaIfEES3_fEEbRKT_RKT0_iRKT1_:0000000000000000 _ZN8UnitTest13ArrayAreCloseISt6vectorIfSaIfEES3_fEEbRKT_RKT0_iRKT1_
     /tmp/ccxvmr70.s:7214   .text._ZNKSt6vectorIfSaIfEEixEm:0000000000000000 _ZNKSt6vectorIfSaIfEEixEm
     /tmp/ccxvmr70.s:6685   .text._ZN9__gnu_cxx13new_allocatorIfEC2Ev:0000000000000000 _ZN9__gnu_cxx13new_allocatorIfEC1Ev
     /tmp/ccxvmr70.s:6711   .text._ZN9__gnu_cxx13new_allocatorIfED2Ev:0000000000000000 _ZN9__gnu_cxx13new_allocatorIfED1Ev
     /tmp/ccxvmr70.s:7293   .text._ZNSaIfEC2ERKS_:0000000000000000 _ZNSaIfEC1ERKS_
     /tmp/ccxvmr70.s:7244   .text._ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_:0000000000000000 _ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_
     /tmp/ccxvmr70.s:6838   .text._ZNSt12_Vector_baseIfSaIfEE12_Vector_implD2Ev:0000000000000000 _ZNSt12_Vector_baseIfSaIfEE12_Vector_implD2Ev
     /tmp/ccxvmr70.s:6838   .text._ZNSt12_Vector_baseIfSaIfEE12_Vector_implD2Ev:0000000000000000 _ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev
     /tmp/ccxvmr70.s:7328   .text._ZNSt12_Vector_baseIfSaIfEE12_Vector_implC2ERKS0_:0000000000000000 _ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_
     /tmp/ccxvmr70.s:7366   .text._ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEm:0000000000000000 _ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEm
     /tmp/ccxvmr70.s:6869   .text._ZNSt12_Vector_baseIfSaIfEEC2EmRKS0_:0000000000000000 _ZNSt12_Vector_baseIfSaIfEEC1EmRKS0_
     /tmp/ccxvmr70.s:7416   .text._ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfm:0000000000000000 _ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfm
     /tmp/ccxvmr70.s:6955   .text._ZNSt12_Vector_baseIfSaIfEED2Ev:0000000000000000 _ZNSt12_Vector_baseIfSaIfEED1Ev
     /tmp/ccxvmr70.s:7453   .text._ZSt24__uninitialized_fill_n_aIPfmffET_S1_T0_RKT1_RSaIT2_E:0000000000000000 _ZSt24__uninitialized_fill_n_aIPfmffET_S1_T0_RKT1_RSaIT2_E
     /tmp/ccxvmr70.s:7486   .text._ZSt8_DestroyIPfEvT_S1_:0000000000000000 _ZSt8_DestroyIPfEvT_S1_
     /tmp/ccxvmr70.s:7517   .text._ZN9__gnu_cxx14__alloc_traitsISaIfEfE8max_sizeERKS1_:0000000000000000 _ZN9__gnu_cxx14__alloc_traitsISaIfEfE8max_sizeERKS1_
     /tmp/ccxvmr70.s:7544   .text._ZSt3minImERKT_S2_S2_:0000000000000000 _ZSt3minImERKT_S2_S2_
     /tmp/ccxvmr70.s:7293   .text._ZNSaIfEC2ERKS_:0000000000000000 _ZNSaIfEC2ERKS_
     /tmp/ccxvmr70.s:7582   .text._ZN9__gnu_cxx13new_allocatorIfEC2ERKS1_:0000000000000000 _ZN9__gnu_cxx13new_allocatorIfEC2ERKS1_
     /tmp/ccxvmr70.s:7328   .text._ZNSt12_Vector_baseIfSaIfEE12_Vector_implC2ERKS0_:0000000000000000 _ZNSt12_Vector_baseIfSaIfEE12_Vector_implC2ERKS0_
     /tmp/ccxvmr70.s:7608   .text._ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC2Ev:0000000000000000 _ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC2Ev
     /tmp/ccxvmr70.s:7644   .text._ZNSt12_Vector_baseIfSaIfEE11_M_allocateEm:0000000000000000 _ZNSt12_Vector_baseIfSaIfEE11_M_allocateEm
     /tmp/ccxvmr70.s:7683   .text._ZN9__gnu_cxx14__alloc_traitsISaIfEfE10deallocateERS1_Pfm:0000000000000000 _ZN9__gnu_cxx14__alloc_traitsISaIfEfE10deallocateERS1_Pfm
     /tmp/ccxvmr70.s:7715   .text._ZSt20uninitialized_fill_nIPfmfET_S1_T0_RKT1_:0000000000000000 _ZSt20uninitialized_fill_nIPfmfET_S1_T0_RKT1_
     /tmp/ccxvmr70.s:7748   .text._ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_:0000000000000000 _ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_
     /tmp/ccxvmr70.s:7772   .text._ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv:0000000000000000 _ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv
     /tmp/ccxvmr70.s:7582   .text._ZN9__gnu_cxx13new_allocatorIfEC2ERKS1_:0000000000000000 _ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_
     /tmp/ccxvmr70.s:7608   .text._ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC2Ev:0000000000000000 _ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev
     /tmp/ccxvmr70.s:7798   .text._ZN9__gnu_cxx14__alloc_traitsISaIfEfE8allocateERS1_m:0000000000000000 _ZN9__gnu_cxx14__alloc_traitsISaIfEfE8allocateERS1_m
     /tmp/ccxvmr70.s:7829   .text._ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfm:0000000000000000 _ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfm
     /tmp/ccxvmr70.s:7858   .text._ZNSt22__uninitialized_fill_nILb1EE15__uninit_fill_nIPfmfEET_S3_T0_RKT1_:0000000000000000 _ZNSt22__uninitialized_fill_nILb1EE15__uninit_fill_nIPfmfEET_S3_T0_RKT1_
     /tmp/ccxvmr70.s:7890   .text._ZNK9__gnu_cxx13new_allocatorIfE11_M_max_sizeEv:0000000000000000 _ZNK9__gnu_cxx13new_allocatorIfE11_M_max_sizeEv
     /tmp/ccxvmr70.s:7914   .text._ZN9__gnu_cxx13new_allocatorIfE8allocateEmPKv:0000000000000000 _ZN9__gnu_cxx13new_allocatorIfE8allocateEmPKv
     /tmp/ccxvmr70.s:7967   .text._ZSt6fill_nIPfmfET_S1_T0_RKT1_:0000000000000000 _ZSt6fill_nIPfmfET_S1_T0_RKT1_
     /tmp/ccxvmr70.s:8005   .text._ZSt19__iterator_categoryIPfENSt15iterator_traitsIT_E17iterator_categoryERKS2_:0000000000000000 _ZSt19__iterator_categoryIPfENSt15iterator_traitsIT_E17iterator_categoryERKS2_
     /tmp/ccxvmr70.s:8029   .text._ZSt10__fill_n_aIPfmfET_S1_T0_RKT1_St26random_access_iterator_tag:0000000000000000 _ZSt10__fill_n_aIPfmfET_S1_T0_RKT1_St26random_access_iterator_tag
     /tmp/ccxvmr70.s:8078   .text._ZSt8__fill_aIPffEvT_S1_RKT0_:0000000000000000 _ZSt8__fill_aIPffEvT_S1_RKT0_
     /tmp/ccxvmr70.s:8110   .text._ZSt9__fill_a1IPffEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_:0000000000000000 _ZSt9__fill_a1IPffEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_
     /tmp/ccxvmr70.s:10158  .data.rel.ro:0000000000000000 _ZTIN12_GLOBAL__N_137TestCanCallCHECKOutsideOfTestFunctionE
     /tmp/ccxvmr70.s:8163   .text:0000000000002456 _ZN12_GLOBAL__N_137TestCanCallCHECKOutsideOfTestFunctionD1Ev
     /tmp/ccxvmr70.s:8194   .text:0000000000002484 _ZN12_GLOBAL__N_137TestCanCallCHECKOutsideOfTestFunctionD0Ev
     /tmp/ccxvmr70.s:8163   .text:0000000000002456 _ZN12_GLOBAL__N_137TestCanCallCHECKOutsideOfTestFunctionD2Ev
     /tmp/ccxvmr70.s:10172  .data.rel.ro:0000000000000018 _ZTIN12_GLOBAL__N_143TestSimpleFixtureOnlyOneFixtureAliveAtATimeE
     /tmp/ccxvmr70.s:8271   .text:00000000000024d4 _ZN12_GLOBAL__N_143TestSimpleFixtureOnlyOneFixtureAliveAtATimeD1Ev
     /tmp/ccxvmr70.s:8302   .text:0000000000002502 _ZN12_GLOBAL__N_143TestSimpleFixtureOnlyOneFixtureAliveAtATimeD0Ev
     /tmp/ccxvmr70.s:8271   .text:00000000000024d4 _ZN12_GLOBAL__N_143TestSimpleFixtureOnlyOneFixtureAliveAtATimeD2Ev
     /tmp/ccxvmr70.s:10186  .data.rel.ro:0000000000000030 _ZTIN12_GLOBAL__N_143TestSimpleFixtureDefaultFixtureCtorIsCalledE
     /tmp/ccxvmr70.s:8379   .text:0000000000002552 _ZN12_GLOBAL__N_143TestSimpleFixtureDefaultFixtureCtorIsCalledD1Ev
     /tmp/ccxvmr70.s:8410   .text:0000000000002580 _ZN12_GLOBAL__N_143TestSimpleFixtureDefaultFixtureCtorIsCalledD0Ev
     /tmp/ccxvmr70.s:8379   .text:0000000000002552 _ZN12_GLOBAL__N_143TestSimpleFixtureDefaultFixtureCtorIsCalledD2Ev
     /tmp/ccxvmr70.s:10214  .data.rel.ro:0000000000000060 _ZTIN12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongExceptionE
     /tmp/ccxvmr70.s:8487   .text:00000000000025d0 _ZN12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongExceptionD1Ev
     /tmp/ccxvmr70.s:8518   .text:00000000000025fe _ZN12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongExceptionD0Ev
     /tmp/ccxvmr70.s:8487   .text:00000000000025d0 _ZN12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongExceptionD2Ev
     /tmp/ccxvmr70.s:10200  .data.rel.ro:0000000000000048 _ZTIZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEvE14WrongThrowTest
     /tmp/ccxvmr70.s:8626   .text:000000000000267c _ZZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEvEN14WrongThrowTestD0Ev
     /tmp/ccxvmr70.s:8595   .text:000000000000264e _ZZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEvEN14WrongThrowTestD2Ev
     /tmp/ccxvmr70.s:10242  .data.rel.ro:0000000000000090 _ZTIN12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingExceptionE
     /tmp/ccxvmr70.s:8703   .text:00000000000026cc _ZN12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingExceptionD1Ev
     /tmp/ccxvmr70.s:8734   .text:00000000000026fa _ZN12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingExceptionD0Ev
     /tmp/ccxvmr70.s:8703   .text:00000000000026cc _ZN12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingExceptionD2Ev
     /tmp/ccxvmr70.s:10228  .data.rel.ro:0000000000000078 _ZTIZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvE11NoThrowTest
     /tmp/ccxvmr70.s:8842   .text:0000000000002778 _ZZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvEN11NoThrowTestD0Ev
     /tmp/ccxvmr70.s:8811   .text:000000000000274a _ZZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvEN11NoThrowTestD2Ev
     /tmp/ccxvmr70.s:10256  .data.rel.ro:00000000000000a8 _ZTIN12_GLOBAL__N_123TestCheckAssertSucceedsE
     /tmp/ccxvmr70.s:8919   .text:00000000000027c8 _ZN12_GLOBAL__N_123TestCheckAssertSucceedsD1Ev
     /tmp/ccxvmr70.s:8950   .text:00000000000027f6 _ZN12_GLOBAL__N_123TestCheckAssertSucceedsD0Ev
     /tmp/ccxvmr70.s:8919   .text:00000000000027c8 _ZN12_GLOBAL__N_123TestCheckAssertSucceedsD2Ev
     /tmp/ccxvmr70.s:10283  .data.rel.ro:00000000000000d0 _ZTIN12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectExceptionE
     /tmp/ccxvmr70.s:9027   .text:0000000000002846 _ZN12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectExceptionD1Ev
     /tmp/ccxvmr70.s:9058   .text:0000000000002874 _ZN12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectExceptionD0Ev
     /tmp/ccxvmr70.s:9027   .text:0000000000002846 _ZN12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectExceptionD2Ev
     /tmp/ccxvmr70.s:10297  .data.rel.ro:00000000000000e8 _ZTIN12_GLOBAL__N_135TestCheckArrayCloseWorksWithVectorsE
     /tmp/ccxvmr70.s:9135   .text:00000000000028c4 _ZN12_GLOBAL__N_135TestCheckArrayCloseWorksWithVectorsD1Ev
     /tmp/ccxvmr70.s:9166   .text:00000000000028f2 _ZN12_GLOBAL__N_135TestCheckArrayCloseWorksWithVectorsD0Ev
     /tmp/ccxvmr70.s:9135   .text:00000000000028c4 _ZN12_GLOBAL__N_135TestCheckArrayCloseWorksWithVectorsD2Ev
     /tmp/ccxvmr70.s:10311  .data.rel.ro:0000000000000100 _ZTIN12_GLOBAL__N_122TestArrayCloseSucceedsE
     /tmp/ccxvmr70.s:9243   .text:0000000000002942 _ZN12_GLOBAL__N_122TestArrayCloseSucceedsD1Ev
     /tmp/ccxvmr70.s:9274   .text:0000000000002970 _ZN12_GLOBAL__N_122TestArrayCloseSucceedsD0Ev
     /tmp/ccxvmr70.s:9243   .text:0000000000002942 _ZN12_GLOBAL__N_122TestArrayCloseSucceedsD2Ev
     /tmp/ccxvmr70.s:10325  .data.rel.ro:0000000000000118 _ZTIN12_GLOBAL__N_127TestValidCheckCloseSucceedsE
     /tmp/ccxvmr70.s:9351   .text:00000000000029c0 _ZN12_GLOBAL__N_127TestValidCheckCloseSucceedsD1Ev
     /tmp/ccxvmr70.s:9382   .text:00000000000029ee _ZN12_GLOBAL__N_127TestValidCheckCloseSucceedsD0Ev
     /tmp/ccxvmr70.s:9351   .text:00000000000029c0 _ZN12_GLOBAL__N_127TestValidCheckCloseSucceedsD2Ev
     /tmp/ccxvmr70.s:10339  .data.rel.ro:0000000000000130 _ZTIN12_GLOBAL__N_131TestCheckEqualWorksWithPointersE
     /tmp/ccxvmr70.s:9459   .text:0000000000002a3e _ZN12_GLOBAL__N_131TestCheckEqualWorksWithPointersD1Ev
     /tmp/ccxvmr70.s:9490   .text:0000000000002a6c _ZN12_GLOBAL__N_131TestCheckEqualWorksWithPointersD0Ev
     /tmp/ccxvmr70.s:9459   .text:0000000000002a3e _ZN12_GLOBAL__N_131TestCheckEqualWorksWithPointersD2Ev
     /tmp/ccxvmr70.s:10353  .data.rel.ro:0000000000000148 _ZTIN12_GLOBAL__N_127TestValidCheckEqualSucceedsE
     /tmp/ccxvmr70.s:9567   .text:0000000000002abc _ZN12_GLOBAL__N_127TestValidCheckEqualSucceedsD1Ev
     /tmp/ccxvmr70.s:9598   .text:0000000000002aea _ZN12_GLOBAL__N_127TestValidCheckEqualSucceedsD0Ev
     /tmp/ccxvmr70.s:9567   .text:0000000000002abc _ZN12_GLOBAL__N_127TestValidCheckEqualSucceedsD2Ev
     /tmp/ccxvmr70.s:10367  .data.rel.ro:0000000000000160 _ZTIN12_GLOBAL__N_126TestCheckWorksWithPointersE
     /tmp/ccxvmr70.s:9675   .text:0000000000002b3a _ZN12_GLOBAL__N_126TestCheckWorksWithPointersD1Ev
     /tmp/ccxvmr70.s:9706   .text:0000000000002b68 _ZN12_GLOBAL__N_126TestCheckWorksWithPointersD0Ev
     /tmp/ccxvmr70.s:9675   .text:0000000000002b3a _ZN12_GLOBAL__N_126TestCheckWorksWithPointersD2Ev
     /tmp/ccxvmr70.s:10381  .data.rel.ro:0000000000000178 _ZTIN12_GLOBAL__N_122TestValidCheckSucceedsE
     /tmp/ccxvmr70.s:9783   .text:0000000000002bb8 _ZN12_GLOBAL__N_122TestValidCheckSucceedsD1Ev
     /tmp/ccxvmr70.s:9814   .text:0000000000002be6 _ZN12_GLOBAL__N_122TestValidCheckSucceedsD0Ev
     /tmp/ccxvmr70.s:9783   .text:0000000000002bb8 _ZN12_GLOBAL__N_122TestValidCheckSucceedsD2Ev
     /tmp/ccxvmr70.s:10390  .data.rel.ro._ZTIN8UnitTest15MemoryOutStreamE:0000000000000000 _ZTIN8UnitTest15MemoryOutStreamE
     /tmp/ccxvmr70.s:10070  .text._ZN8UnitTest15MemoryOutStreamD0Ev:0000000000000000 _ZN8UnitTest15MemoryOutStreamD0Ev
     /tmp/ccxvmr70.s:10055  .text._ZN8UnitTest15MemoryOutStreamD1Ev:00000000000000b6 _ZTv0_n24_N8UnitTest15MemoryOutStreamD1Ev
     /tmp/ccxvmr70.s:10137  .text._ZN8UnitTest15MemoryOutStreamD0Ev:000000000000004f _ZTv0_n24_N8UnitTest15MemoryOutStreamD0Ev
     /tmp/ccxvmr70.s:9912   .data.rel.ro._ZTCN8UnitTest15MemoryOutStreamE0_NSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE:0000000000000000 _ZTCN8UnitTest15MemoryOutStreamE0_NSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE
     /tmp/ccxvmr70.s:9929   .data.rel.ro._ZTCN8UnitTest15MemoryOutStreamE0_So:0000000000000000 _ZTCN8UnitTest15MemoryOutStreamE0_So
     /tmp/ccxvmr70.s:10152  .rodata:0000000000000660 _ZTSN12_GLOBAL__N_137TestCanCallCHECKOutsideOfTestFunctionE
     /tmp/ccxvmr70.s:10166  .rodata:00000000000006a0 _ZTSN12_GLOBAL__N_143TestSimpleFixtureOnlyOneFixtureAliveAtATimeE
     /tmp/ccxvmr70.s:10180  .rodata:00000000000006e0 _ZTSN12_GLOBAL__N_143TestSimpleFixtureDefaultFixtureCtorIsCalledE
     /tmp/ccxvmr70.s:10194  .rodata:0000000000000720 _ZTSZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEvE14WrongThrowTest
     /tmp/ccxvmr70.s:10208  .rodata:0000000000000780 _ZTSN12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongExceptionE
     /tmp/ccxvmr70.s:10222  .rodata:00000000000007c0 _ZTSZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvE11NoThrowTest
     /tmp/ccxvmr70.s:10236  .rodata:0000000000000820 _ZTSN12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingExceptionE
     /tmp/ccxvmr70.s:10250  .rodata:0000000000000860 _ZTSN12_GLOBAL__N_123TestCheckAssertSucceedsE
     /tmp/ccxvmr70.s:10264  .rodata:00000000000008a0 _ZTSZNK12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectException7RunImplEvE13TestException
     /tmp/ccxvmr70.s:10277  .rodata:0000000000000900 _ZTSN12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectExceptionE
     /tmp/ccxvmr70.s:10291  .rodata:0000000000000960 _ZTSN12_GLOBAL__N_135TestCheckArrayCloseWorksWithVectorsE
     /tmp/ccxvmr70.s:10305  .rodata:00000000000009a0 _ZTSN12_GLOBAL__N_122TestArrayCloseSucceedsE
     /tmp/ccxvmr70.s:10319  .rodata:00000000000009e0 _ZTSN12_GLOBAL__N_127TestValidCheckCloseSucceedsE
     /tmp/ccxvmr70.s:10333  .rodata:0000000000000a20 _ZTSN12_GLOBAL__N_131TestCheckEqualWorksWithPointersE
     /tmp/ccxvmr70.s:10347  .rodata:0000000000000a60 _ZTSN12_GLOBAL__N_127TestValidCheckEqualSucceedsE
     /tmp/ccxvmr70.s:10361  .rodata:0000000000000aa0 _ZTSN12_GLOBAL__N_126TestCheckWorksWithPointersE
     /tmp/ccxvmr70.s:10375  .rodata:0000000000000ae0 _ZTSN12_GLOBAL__N_122TestValidCheckSucceedsE
     /tmp/ccxvmr70.s:10399  .rodata._ZTSN8UnitTest15MemoryOutStreamE:0000000000000000 _ZTSN8UnitTest15MemoryOutStreamE
     /tmp/ccxvmr70.s:10403  .text:0000000000002c35 _Z41__static_initialization_and_destruction_0ii
     /tmp/ccxvmr70.s:10698  .text:0000000000003115 _GLOBAL__sub_I_TestUnitTest__.cpp
                           .group:0000000000000000 _ZN17ScopedCurrentTestC5ERN8UnitTest11TestResultsEPKNS0_11TestDetailsE
                           .group:0000000000000000 _ZN17ScopedCurrentTestD5Ev
                           .group:0000000000000000 _ZNSaIfEC5Ev
                           .group:0000000000000000 _ZNSaIfED5Ev
                           .group:0000000000000000 _ZNSt6vectorIfSaIfEEC5EmRKfRKS0_
                           .group:0000000000000000 _ZNSt6vectorIfSaIfEED5Ev
                           .group:0000000000000000 _ZN9__gnu_cxx13new_allocatorIfEC5Ev
                           .group:0000000000000000 _ZN9__gnu_cxx13new_allocatorIfED5Ev
                           .group:0000000000000000 _ZNSt12_Vector_baseIfSaIfEE12_Vector_implD5Ev
                           .group:0000000000000000 _ZNSt12_Vector_baseIfSaIfEEC5EmRKS0_
                           .group:0000000000000000 _ZNSt12_Vector_baseIfSaIfEED5Ev
                           .group:0000000000000000 _ZNSaIfEC5ERKS_
                           .group:0000000000000000 _ZNSt12_Vector_baseIfSaIfEE12_Vector_implC5ERKS0_
                           .group:0000000000000000 _ZN9__gnu_cxx13new_allocatorIfEC5ERKS1_
                           .group:0000000000000000 _ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC5Ev

UNDEFINED SYMBOLS
_ZNSt9basic_iosIcSt11char_traitsIcEEC2Ev
_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEC2Ev
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev
_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEED2Ev
_ZNSt9basic_iosIcSt11char_traitsIcEED2Ev
_Unwind_Resume
__gxx_personality_v0
_ZN8UnitTest11CurrentTest7ResultsEv
_ZN8UnitTest11CurrentTest7DetailsEv
_ZN8UnitTest4TestC2EPKcS2_S2_i
_ZN8UnitTest11TestDetailsC1ERKS0_i
_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc
__cxa_begin_catch
__cxa_end_catch
__stack_chk_fail
__cxa_allocate_exception
__cxa_throw
_ZN8UnitTest12ReportAssertEPKcS1_i
_ZN8UnitTest11TestResultsC1EPNS_12TestReporterE
_ZN8UnitTest4Test3RunEv
_ZNK8UnitTest11TestResults15GetFailureCountEv
_ZTIPKc
_ZNK8UnitTest15AssertException10LineNumberEv
_ZNK8UnitTest15AssertException8FilenameEv
_ZN8UnitTest11TestDetailsC1EPKcS2_S2_i
_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
_ZNK8UnitTest15MemoryOutStream7GetTextEv
_ZNSolsEi
_ZNSolsEPKv
_ZNSolsEf
_ZN8UnitTest16SignalTranslatorC1Ev
_ZN8UnitTest16SignalTranslator12s_jumpTargetE
__sigsetjmp
_ZN8UnitTest16SignalTranslatorD1Ev
_ZSt20__throw_length_errorPKc
_ZdlPv
_ZSt28__throw_bad_array_new_lengthv
_ZSt17__throw_bad_allocv
_Znwm
_ZN8UnitTest4TestD2Ev
_ZTINSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE
_ZTISo
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev
_ZTVN10__cxxabiv120__si_class_type_infoE
_ZTIN8UnitTest4TestE
_ZTVN10__cxxabiv117__class_type_infoE
__dso_handle
__cxa_atexit
_ZN8UnitTest4Test11GetTestListEv
_ZN8UnitTest9ListAdderC1ERNS_8TestListEPNS_4TestE
_ZTIN8UnitTest15AssertExceptionE
_ZTISt9exception
_ZTIi
