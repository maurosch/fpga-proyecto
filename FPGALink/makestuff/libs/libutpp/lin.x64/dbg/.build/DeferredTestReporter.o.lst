   1              		.file	"DeferredTestReporter.cpp"
   2              		.text
   3              	.Ltext0:
   4              		.file 0 "/home/pong/FPGALink/makestuff/libs/libutpp" "DeferredTestReporter.cpp"
   5              		.section	.text._ZnwmPv,"axG",@progbits,_ZnwmPv,comdat
   6              		.weak	_ZnwmPv
   8              	_ZnwmPv:
   9              	.LFB304:
  10              		.file 1 "/usr/include/c++/11/new"
   1:/usr/include/c++/11/new **** // The -*- C++ -*- dynamic memory management header.
   2:/usr/include/c++/11/new **** 
   3:/usr/include/c++/11/new **** // Copyright (C) 1994-2021 Free Software Foundation, Inc.
   4:/usr/include/c++/11/new **** 
   5:/usr/include/c++/11/new **** // This file is part of GCC.
   6:/usr/include/c++/11/new **** //
   7:/usr/include/c++/11/new **** // GCC is free software; you can redistribute it and/or modify
   8:/usr/include/c++/11/new **** // it under the terms of the GNU General Public License as published by
   9:/usr/include/c++/11/new **** // the Free Software Foundation; either version 3, or (at your option)
  10:/usr/include/c++/11/new **** // any later version.
  11:/usr/include/c++/11/new **** // 
  12:/usr/include/c++/11/new **** // GCC is distributed in the hope that it will be useful,
  13:/usr/include/c++/11/new **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:/usr/include/c++/11/new **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:/usr/include/c++/11/new **** // GNU General Public License for more details.
  16:/usr/include/c++/11/new **** // 
  17:/usr/include/c++/11/new **** // Under Section 7 of GPL version 3, you are granted additional
  18:/usr/include/c++/11/new **** // permissions described in the GCC Runtime Library Exception, version
  19:/usr/include/c++/11/new **** // 3.1, as published by the Free Software Foundation.
  20:/usr/include/c++/11/new **** 
  21:/usr/include/c++/11/new **** // You should have received a copy of the GNU General Public License and
  22:/usr/include/c++/11/new **** // a copy of the GCC Runtime Library Exception along with this program;
  23:/usr/include/c++/11/new **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  24:/usr/include/c++/11/new **** // <http://www.gnu.org/licenses/>.
  25:/usr/include/c++/11/new **** 
  26:/usr/include/c++/11/new **** /** @file new
  27:/usr/include/c++/11/new ****  *  This is a Standard C++ Library header.
  28:/usr/include/c++/11/new ****  *
  29:/usr/include/c++/11/new ****  *  The header @c new defines several functions to manage dynamic memory and
  30:/usr/include/c++/11/new ****  *  handling memory allocation errors; see
  31:/usr/include/c++/11/new ****  *  https://gcc.gnu.org/onlinedocs/libstdc++/manual/dynamic_memory.html
  32:/usr/include/c++/11/new ****  *  for more.
  33:/usr/include/c++/11/new ****  */
  34:/usr/include/c++/11/new **** 
  35:/usr/include/c++/11/new **** #ifndef _NEW
  36:/usr/include/c++/11/new **** #define _NEW
  37:/usr/include/c++/11/new **** 
  38:/usr/include/c++/11/new **** #pragma GCC system_header
  39:/usr/include/c++/11/new **** 
  40:/usr/include/c++/11/new **** #include <bits/c++config.h>
  41:/usr/include/c++/11/new **** #include <bits/exception.h>
  42:/usr/include/c++/11/new **** 
  43:/usr/include/c++/11/new **** #pragma GCC visibility push(default)
  44:/usr/include/c++/11/new **** 
  45:/usr/include/c++/11/new **** extern "C++" {
  46:/usr/include/c++/11/new **** 
  47:/usr/include/c++/11/new **** namespace std 
  48:/usr/include/c++/11/new **** {
  49:/usr/include/c++/11/new ****   /**
  50:/usr/include/c++/11/new ****    *  @brief  Exception possibly thrown by @c new.
  51:/usr/include/c++/11/new ****    *  @ingroup exceptions
  52:/usr/include/c++/11/new ****    *
  53:/usr/include/c++/11/new ****    *  @c bad_alloc (or classes derived from it) is used to report allocation
  54:/usr/include/c++/11/new ****    *  errors from the throwing forms of @c new.  */
  55:/usr/include/c++/11/new ****   class bad_alloc : public exception
  56:/usr/include/c++/11/new ****   {
  57:/usr/include/c++/11/new ****   public:
  58:/usr/include/c++/11/new ****     bad_alloc() throw() { }
  59:/usr/include/c++/11/new **** 
  60:/usr/include/c++/11/new **** #if __cplusplus >= 201103L
  61:/usr/include/c++/11/new ****     bad_alloc(const bad_alloc&) = default;
  62:/usr/include/c++/11/new ****     bad_alloc& operator=(const bad_alloc&) = default;
  63:/usr/include/c++/11/new **** #endif
  64:/usr/include/c++/11/new **** 
  65:/usr/include/c++/11/new ****     // This declaration is not useless:
  66:/usr/include/c++/11/new ****     // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118
  67:/usr/include/c++/11/new ****     virtual ~bad_alloc() throw();
  68:/usr/include/c++/11/new **** 
  69:/usr/include/c++/11/new ****     // See comment in eh_exception.cc.
  70:/usr/include/c++/11/new ****     virtual const char* what() const throw();
  71:/usr/include/c++/11/new ****   };
  72:/usr/include/c++/11/new **** 
  73:/usr/include/c++/11/new **** #if __cplusplus >= 201103L
  74:/usr/include/c++/11/new ****   class bad_array_new_length : public bad_alloc
  75:/usr/include/c++/11/new ****   {
  76:/usr/include/c++/11/new ****   public:
  77:/usr/include/c++/11/new ****     bad_array_new_length() throw() { }
  78:/usr/include/c++/11/new **** 
  79:/usr/include/c++/11/new ****     // This declaration is not useless:
  80:/usr/include/c++/11/new ****     // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118
  81:/usr/include/c++/11/new ****     virtual ~bad_array_new_length() throw();
  82:/usr/include/c++/11/new **** 
  83:/usr/include/c++/11/new ****     // See comment in eh_exception.cc.
  84:/usr/include/c++/11/new ****     virtual const char* what() const throw();
  85:/usr/include/c++/11/new ****   };
  86:/usr/include/c++/11/new **** #endif
  87:/usr/include/c++/11/new **** 
  88:/usr/include/c++/11/new **** #if __cpp_aligned_new
  89:/usr/include/c++/11/new ****   enum class align_val_t: size_t {};
  90:/usr/include/c++/11/new **** #endif
  91:/usr/include/c++/11/new **** 
  92:/usr/include/c++/11/new ****   struct nothrow_t
  93:/usr/include/c++/11/new ****   {
  94:/usr/include/c++/11/new **** #if __cplusplus >= 201103L
  95:/usr/include/c++/11/new ****     explicit nothrow_t() = default;
  96:/usr/include/c++/11/new **** #endif
  97:/usr/include/c++/11/new ****   };
  98:/usr/include/c++/11/new **** 
  99:/usr/include/c++/11/new ****   extern const nothrow_t nothrow;
 100:/usr/include/c++/11/new **** 
 101:/usr/include/c++/11/new ****   /** If you write your own error handler to be called by @c new, it must
 102:/usr/include/c++/11/new ****    *  be of this type.  */
 103:/usr/include/c++/11/new ****   typedef void (*new_handler)();
 104:/usr/include/c++/11/new **** 
 105:/usr/include/c++/11/new ****   /// Takes a replacement handler as the argument, returns the
 106:/usr/include/c++/11/new ****   /// previous handler.
 107:/usr/include/c++/11/new ****   new_handler set_new_handler(new_handler) throw();
 108:/usr/include/c++/11/new **** 
 109:/usr/include/c++/11/new **** #if __cplusplus >= 201103L
 110:/usr/include/c++/11/new ****   /// Return the current new handler.
 111:/usr/include/c++/11/new ****   new_handler get_new_handler() noexcept;
 112:/usr/include/c++/11/new **** #endif
 113:/usr/include/c++/11/new **** } // namespace std
 114:/usr/include/c++/11/new **** 
 115:/usr/include/c++/11/new **** //@{
 116:/usr/include/c++/11/new **** /** These are replaceable signatures:
 117:/usr/include/c++/11/new ****  *  - normal single new and delete (no arguments, throw @c bad_alloc on error)
 118:/usr/include/c++/11/new ****  *  - normal array new and delete (same)
 119:/usr/include/c++/11/new ****  *  - @c nothrow single new and delete (take a @c nothrow argument, return
 120:/usr/include/c++/11/new ****  *    @c NULL on error)
 121:/usr/include/c++/11/new ****  *  - @c nothrow array new and delete (same)
 122:/usr/include/c++/11/new ****  *
 123:/usr/include/c++/11/new ****  *  Placement new and delete signatures (take a memory address argument,
 124:/usr/include/c++/11/new ****  *  does nothing) may not be replaced by a user's program.
 125:/usr/include/c++/11/new **** */
 126:/usr/include/c++/11/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t) _GLIBCXX_THROW (std::bad_alloc)
 127:/usr/include/c++/11/new ****   __attribute__((__externally_visible__));
 128:/usr/include/c++/11/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t) _GLIBCXX_THROW (std::bad_alloc)
 129:/usr/include/c++/11/new ****   __attribute__((__externally_visible__));
 130:/usr/include/c++/11/new **** void operator delete(void*) _GLIBCXX_USE_NOEXCEPT
 131:/usr/include/c++/11/new ****   __attribute__((__externally_visible__));
 132:/usr/include/c++/11/new **** void operator delete[](void*) _GLIBCXX_USE_NOEXCEPT
 133:/usr/include/c++/11/new ****   __attribute__((__externally_visible__));
 134:/usr/include/c++/11/new **** #if __cpp_sized_deallocation
 135:/usr/include/c++/11/new **** void operator delete(void*, std::size_t) _GLIBCXX_USE_NOEXCEPT
 136:/usr/include/c++/11/new ****   __attribute__((__externally_visible__));
 137:/usr/include/c++/11/new **** void operator delete[](void*, std::size_t) _GLIBCXX_USE_NOEXCEPT
 138:/usr/include/c++/11/new ****   __attribute__((__externally_visible__));
 139:/usr/include/c++/11/new **** #endif
 140:/usr/include/c++/11/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 141:/usr/include/c++/11/new ****   __attribute__((__externally_visible__, __alloc_size__ (1), __malloc__));
 142:/usr/include/c++/11/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 143:/usr/include/c++/11/new ****   __attribute__((__externally_visible__, __alloc_size__ (1), __malloc__));
 144:/usr/include/c++/11/new **** void operator delete(void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 145:/usr/include/c++/11/new ****   __attribute__((__externally_visible__));
 146:/usr/include/c++/11/new **** void operator delete[](void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 147:/usr/include/c++/11/new ****   __attribute__((__externally_visible__));
 148:/usr/include/c++/11/new **** #if __cpp_aligned_new
 149:/usr/include/c++/11/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t, std::align_val_t)
 150:/usr/include/c++/11/new ****   __attribute__((__externally_visible__, __alloc_size__ (1), __malloc__));
 151:/usr/include/c++/11/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t, std::align_val_t, const std::nothrow_t&)
 152:/usr/include/c++/11/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__, __alloc_size__ (1), __malloc__));
 153:/usr/include/c++/11/new **** void operator delete(void*, std::align_val_t)
 154:/usr/include/c++/11/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 155:/usr/include/c++/11/new **** void operator delete(void*, std::align_val_t, const std::nothrow_t&)
 156:/usr/include/c++/11/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 157:/usr/include/c++/11/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t, std::align_val_t)
 158:/usr/include/c++/11/new ****   __attribute__((__externally_visible__, __alloc_size__ (1), __malloc__));
 159:/usr/include/c++/11/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t, std::align_val_t, const std::nothrow_t&)
 160:/usr/include/c++/11/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__, __alloc_size__ (1), __malloc__));
 161:/usr/include/c++/11/new **** void operator delete[](void*, std::align_val_t)
 162:/usr/include/c++/11/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 163:/usr/include/c++/11/new **** void operator delete[](void*, std::align_val_t, const std::nothrow_t&)
 164:/usr/include/c++/11/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 165:/usr/include/c++/11/new **** #if __cpp_sized_deallocation
 166:/usr/include/c++/11/new **** void operator delete(void*, std::size_t, std::align_val_t)
 167:/usr/include/c++/11/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 168:/usr/include/c++/11/new **** void operator delete[](void*, std::size_t, std::align_val_t)
 169:/usr/include/c++/11/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 170:/usr/include/c++/11/new **** #endif // __cpp_sized_deallocation
 171:/usr/include/c++/11/new **** #endif // __cpp_aligned_new
 172:/usr/include/c++/11/new **** 
 173:/usr/include/c++/11/new **** // Default placement versions of operator new.
 174:/usr/include/c++/11/new **** _GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
 175:/usr/include/c++/11/new **** { return __p; }
  11              		.loc 1 175 1
  12              		.cfi_startproc
  13 0000 F30F1EFA 		endbr64
  14 0004 55       		pushq	%rbp
  15              		.cfi_def_cfa_offset 16
  16              		.cfi_offset 6, -16
  17 0005 4889E5   		movq	%rsp, %rbp
  18              		.cfi_def_cfa_register 6
  19 0008 48897DF8 		movq	%rdi, -8(%rbp)
  20 000c 488975F0 		movq	%rsi, -16(%rbp)
  21              		.loc 1 175 10
  22 0010 488B45F0 		movq	-16(%rbp), %rax
  23              		.loc 1 175 15
  24 0014 5D       		popq	%rbp
  25              		.cfi_def_cfa 7, 8
  26 0015 C3       		ret
  27              		.cfi_endproc
  28              	.LFE304:
  30              		.section	.text._ZdlPvS_,"axG",@progbits,_ZdlPvS_,comdat
  31              		.weak	_ZdlPvS_
  33              	_ZdlPvS_:
  34              	.LFB306:
 176:/usr/include/c++/11/new **** _GLIBCXX_NODISCARD inline void* operator new[](std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
 177:/usr/include/c++/11/new **** { return __p; }
 178:/usr/include/c++/11/new **** 
 179:/usr/include/c++/11/new **** // Default placement versions of operator delete.
 180:/usr/include/c++/11/new **** inline void operator delete  (void*, void*) _GLIBCXX_USE_NOEXCEPT { }
  35              		.loc 1 180 67
  36              		.cfi_startproc
  37 0000 F30F1EFA 		endbr64
  38 0004 55       		pushq	%rbp
  39              		.cfi_def_cfa_offset 16
  40              		.cfi_offset 6, -16
  41 0005 4889E5   		movq	%rsp, %rbp
  42              		.cfi_def_cfa_register 6
  43 0008 48897DF8 		movq	%rdi, -8(%rbp)
  44 000c 488975F0 		movq	%rsi, -16(%rbp)
  45              		.loc 1 180 69
  46 0010 90       		nop
  47 0011 5D       		popq	%rbp
  48              		.cfi_def_cfa 7, 8
  49 0012 C3       		ret
  50              		.cfi_endproc
  51              	.LFE306:
  53              		.section	.text._ZN8UnitTest18DeferredTestResultD2Ev,"axG",@progbits,_ZN8UnitTest18DeferredTestResu
  54              		.align 2
  55              		.weak	_ZN8UnitTest18DeferredTestResultD2Ev
  57              	_ZN8UnitTest18DeferredTestResultD2Ev:
  58              	.LFB930:
  59              		.file 2 "DeferredTestResult.h"
   1:DeferredTestResult.h **** #ifndef UNITTEST_DEFERREDTESTRESULT_H
   2:DeferredTestResult.h **** #define UNITTEST_DEFERREDTESTRESULT_H
   3:DeferredTestResult.h **** 
   4:DeferredTestResult.h **** #include <string>
   5:DeferredTestResult.h **** #include <vector>
   6:DeferredTestResult.h **** 
   7:DeferredTestResult.h **** namespace UnitTest
   8:DeferredTestResult.h **** {
   9:DeferredTestResult.h **** 
  10:DeferredTestResult.h **** struct DeferredTestResult
  60              		.loc 2 10 8
  61              		.cfi_startproc
  62              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
  63              		.cfi_lsda 0x1b,.LLSDA930
  64 0000 F30F1EFA 		endbr64
  65 0004 55       		pushq	%rbp
  66              		.cfi_def_cfa_offset 16
  67              		.cfi_offset 6, -16
  68 0005 4889E5   		movq	%rsp, %rbp
  69              		.cfi_def_cfa_register 6
  70 0008 53       		pushq	%rbx
  71 0009 4883EC18 		subq	$24, %rsp
  72              		.cfi_offset 3, -24
  73 000d 48897DE8 		movq	%rdi, -24(%rbp)
  74              	.LBB2:
  75              		.loc 2 10 8
  76 0011 488B45E8 		movq	-24(%rbp), %rax
  77 0015 4883C060 		addq	$96, %rax
  78 0019 4889C7   		movq	%rax, %rdi
  79              	.LEHB0:
  80 001c E8000000 		call	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED1Ev@PLT
  80      00
  81              	.LEHE0:
  82              		.loc 2 10 8 is_stmt 0 discriminator 2
  83 0021 488B45E8 		movq	-24(%rbp), %rax
  84 0025 4883C040 		addq	$64, %rax
  85 0029 4889C7   		movq	%rax, %rdi
  86              	.LEHB1:
  87 002c E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
  87      00
  88              	.LEHE1:
  89              		.loc 2 10 8 discriminator 4
  90 0031 488B45E8 		movq	-24(%rbp), %rax
  91 0035 4883C020 		addq	$32, %rax
  92 0039 4889C7   		movq	%rax, %rdi
  93              	.LEHB2:
  94 003c E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
  94      00
  95              	.LEHE2:
  96              		.loc 2 10 8 discriminator 6
  97 0041 488B45E8 		movq	-24(%rbp), %rax
  98 0045 4889C7   		movq	%rax, %rdi
  99              	.LEHB3:
 100 0048 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 100      00
 101              	.LEHE3:
 102              	.LBE2:
 103 004d EB50     		jmp	.L11
 104              	.L8:
 105 004f F30F1EFA 		endbr64
 106              	.LBB3:
 107              		.loc 2 10 8
 108 0053 4889C3   		movq	%rax, %rbx
 109 0056 488B45E8 		movq	-24(%rbp), %rax
 110 005a 4883C040 		addq	$64, %rax
 111 005e 4889C7   		movq	%rax, %rdi
 112 0061 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 112      00
 113 0066 EB07     		jmp	.L6
 114              	.L9:
 115 0068 F30F1EFA 		endbr64
 116 006c 4889C3   		movq	%rax, %rbx
 117              	.L6:
 118              		.loc 2 10 8 discriminator 3
 119 006f 488B45E8 		movq	-24(%rbp), %rax
 120 0073 4883C020 		addq	$32, %rax
 121 0077 4889C7   		movq	%rax, %rdi
 122 007a E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 122      00
 123 007f EB07     		jmp	.L7
 124              	.L10:
 125 0081 F30F1EFA 		endbr64
 126              		.loc 2 10 8
 127 0085 4889C3   		movq	%rax, %rbx
 128              	.L7:
 129              		.loc 2 10 8 discriminator 5
 130 0088 488B45E8 		movq	-24(%rbp), %rax
 131 008c 4889C7   		movq	%rax, %rdi
 132 008f E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 132      00
 133 0094 4889D8   		movq	%rbx, %rax
 134 0097 4889C7   		movq	%rax, %rdi
 135              	.LEHB4:
 136 009a E8000000 		call	_Unwind_Resume@PLT
 136      00
 137              	.LEHE4:
 138              	.L11:
 139              	.LBE3:
 140              		.loc 2 10 8
 141 009f 488B5DF8 		movq	-8(%rbp), %rbx
 142 00a3 C9       		leave
 143              		.cfi_def_cfa 7, 8
 144 00a4 C3       		ret
 145              		.cfi_endproc
 146              	.LFE930:
 147              		.globl	__gxx_personality_v0
 148              		.section	.gcc_except_table._ZN8UnitTest18DeferredTestResultD2Ev,"aG",@progbits,_ZN8UnitTest18Defer
 149              	.LLSDA930:
 150 0000 FF       		.byte	0xff
 151 0001 FF       		.byte	0xff
 152 0002 01       		.byte	0x1
 153 0003 16       		.uleb128 .LLSDACSE930-.LLSDACSB930
 154              	.LLSDACSB930:
 155 0004 1C       		.uleb128 .LEHB0-.LFB930
 156 0005 05       		.uleb128 .LEHE0-.LEHB0
 157 0006 4F       		.uleb128 .L8-.LFB930
 158 0007 00       		.uleb128 0
 159 0008 2C       		.uleb128 .LEHB1-.LFB930
 160 0009 05       		.uleb128 .LEHE1-.LEHB1
 161 000a 68       		.uleb128 .L9-.LFB930
 162 000b 00       		.uleb128 0
 163 000c 3C       		.uleb128 .LEHB2-.LFB930
 164 000d 05       		.uleb128 .LEHE2-.LEHB2
 165 000e 8101     		.uleb128 .L10-.LFB930
 166 0010 00       		.uleb128 0
 167 0011 48       		.uleb128 .LEHB3-.LFB930
 168 0012 05       		.uleb128 .LEHE3-.LEHB3
 169 0013 00       		.uleb128 0
 170 0014 00       		.uleb128 0
 171 0015 9A01     		.uleb128 .LEHB4-.LFB930
 172 0017 05       		.uleb128 .LEHE4-.LEHB4
 173 0018 00       		.uleb128 0
 174 0019 00       		.uleb128 0
 175              	.LLSDACSE930:
 176              		.section	.text._ZN8UnitTest18DeferredTestResultD2Ev,"axG",@progbits,_ZN8UnitTest18DeferredTestResu
 178              		.weak	_ZN8UnitTest18DeferredTestResultD1Ev
 179              		.set	_ZN8UnitTest18DeferredTestResultD1Ev,_ZN8UnitTest18DeferredTestResultD2Ev
 180              		.text
 181              		.align 2
 182              		.globl	_ZN8UnitTest20DeferredTestReporter15ReportTestStartERKNS_11TestDetailsE
 184              	_ZN8UnitTest20DeferredTestReporter15ReportTestStartERKNS_11TestDetailsE:
 185              	.LFB928:
 186              		.file 3 "DeferredTestReporter.cpp"
   1:DeferredTestReporter.cpp **** #include "DeferredTestReporter.h"
   2:DeferredTestReporter.cpp **** #include "TestDetails.h"
   3:DeferredTestReporter.cpp **** #include "Config.h"
   4:DeferredTestReporter.cpp **** 
   5:DeferredTestReporter.cpp **** using namespace UnitTest;
   6:DeferredTestReporter.cpp **** 
   7:DeferredTestReporter.cpp **** void DeferredTestReporter::ReportTestStart(TestDetails const& details)
   8:DeferredTestReporter.cpp **** {
 187              		.loc 3 8 1 is_stmt 1
 188              		.cfi_startproc
 189              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 190              		.cfi_lsda 0x1b,.LLSDA928
 191 0000 F30F1EFA 		endbr64
 192 0004 55       		pushq	%rbp
 193              		.cfi_def_cfa_offset 16
 194              		.cfi_offset 6, -16
 195 0005 4889E5   		movq	%rsp, %rbp
 196              		.cfi_def_cfa_register 6
 197 0008 53       		pushq	%rbx
 198 0009 4881ECA8 		subq	$168, %rsp
 198      000000
 199              		.cfi_offset 3, -24
 200 0010 4889BD58 		movq	%rdi, -168(%rbp)
 200      FFFFFF
 201 0017 4889B550 		movq	%rsi, -176(%rbp)
 201      FFFFFF
 202              		.loc 3 8 1
 203 001e 64488B04 		movq	%fs:40, %rax
 203      25280000 
 203      00
 204 0027 488945E8 		movq	%rax, -24(%rbp)
 205 002b 31C0     		xorl	%eax, %eax
   9:DeferredTestReporter.cpp ****     m_results.push_back(DeferredTestResult(details.suiteName, details.testName));
 206              		.loc 3 9 24
 207 002d 488B8558 		movq	-168(%rbp), %rax
 207      FFFFFF
 208 0034 488D5808 		leaq	8(%rax), %rbx
 209              		.loc 3 9 71
 210 0038 488B8550 		movq	-176(%rbp), %rax
 210      FFFFFF
 211 003f 488B5008 		movq	8(%rax), %rdx
 212              		.loc 3 9 52
 213 0043 488B8550 		movq	-176(%rbp), %rax
 213      FFFFFF
 214 004a 488B08   		movq	(%rax), %rcx
 215              		.loc 3 9 25
 216 004d 488D8560 		leaq	-160(%rbp), %rax
 216      FFFFFF
 217 0054 4889CE   		movq	%rcx, %rsi
 218 0057 4889C7   		movq	%rax, %rdi
 219              	.LEHB5:
 220 005a E8000000 		call	_ZN8UnitTest18DeferredTestResultC1EPKcS2_@PLT
 220      00
 221              	.LEHE5:
 222              		.loc 3 9 24
 223 005f 488D8560 		leaq	-160(%rbp), %rax
 223      FFFFFF
 224 0066 4889C6   		movq	%rax, %rsi
 225 0069 4889DF   		movq	%rbx, %rdi
 226              	.LEHB6:
 227 006c E8000000 		call	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE9push_backERKS1_@PLT
 227      00
 228              	.LEHE6:
 229              		.loc 3 9 25 discriminator 2
 230 0071 488D8560 		leaq	-160(%rbp), %rax
 230      FFFFFF
 231 0078 4889C7   		movq	%rax, %rdi
 232              	.LEHB7:
 233 007b E8000000 		call	_ZN8UnitTest18DeferredTestResultD1Ev@PLT
 233      00
 234              	.LEHE7:
  10:DeferredTestReporter.cpp **** }
 235              		.loc 3 10 1 discriminator 2
 236 0080 90       		nop
 237 0081 488B45E8 		movq	-24(%rbp), %rax
 238 0085 64482B04 		subq	%fs:40, %rax
 238      25280000 
 238      00
 239 008e 7428     		je	.L14
 240 0090 EB21     		jmp	.L16
 241              	.L15:
 242 0092 F30F1EFA 		endbr64
   9:DeferredTestReporter.cpp ****     m_results.push_back(DeferredTestResult(details.suiteName, details.testName));
 243              		.loc 3 9 25
 244 0096 4889C3   		movq	%rax, %rbx
 245 0099 488D8560 		leaq	-160(%rbp), %rax
 245      FFFFFF
 246 00a0 4889C7   		movq	%rax, %rdi
 247 00a3 E8000000 		call	_ZN8UnitTest18DeferredTestResultD1Ev@PLT
 247      00
 248 00a8 4889D8   		movq	%rbx, %rax
 249 00ab 4889C7   		movq	%rax, %rdi
 250              	.LEHB8:
 251 00ae E8000000 		call	_Unwind_Resume@PLT
 251      00
 252              	.LEHE8:
 253              	.L16:
 254              		.loc 3 10 1
 255 00b3 E8000000 		call	__stack_chk_fail@PLT
 255      00
 256              	.L14:
 257 00b8 488B5DF8 		movq	-8(%rbp), %rbx
 258 00bc C9       		leave
 259              		.cfi_def_cfa 7, 8
 260 00bd C3       		ret
 261              		.cfi_endproc
 262              	.LFE928:
 263              		.section	.gcc_except_table,"a",@progbits
 264              	.LLSDA928:
 265 0000 FF       		.byte	0xff
 266 0001 FF       		.byte	0xff
 267 0002 01       		.byte	0x1
 268 0003 12       		.uleb128 .LLSDACSE928-.LLSDACSB928
 269              	.LLSDACSB928:
 270 0004 5A       		.uleb128 .LEHB5-.LFB928
 271 0005 05       		.uleb128 .LEHE5-.LEHB5
 272 0006 00       		.uleb128 0
 273 0007 00       		.uleb128 0
 274 0008 6C       		.uleb128 .LEHB6-.LFB928
 275 0009 05       		.uleb128 .LEHE6-.LEHB6
 276 000a 9201     		.uleb128 .L15-.LFB928
 277 000c 00       		.uleb128 0
 278 000d 7B       		.uleb128 .LEHB7-.LFB928
 279 000e 05       		.uleb128 .LEHE7-.LEHB7
 280 000f 00       		.uleb128 0
 281 0010 00       		.uleb128 0
 282 0011 AE01     		.uleb128 .LEHB8-.LFB928
 283 0013 05       		.uleb128 .LEHE8-.LEHB8
 284 0014 00       		.uleb128 0
 285 0015 00       		.uleb128 0
 286              	.LLSDACSE928:
 287              		.text
 289              		.section	.text._ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev,"axG",@progbi
 290              		.align 2
 291              		.weak	_ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev
 293              	_ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev:
 294              	.LFB934:
 295              		.file 4 "/usr/include/c++/11/bits/stl_pair.h"
   1:/usr/include/c++/11/bits/stl_pair.h **** // Pair implementation -*- C++ -*-
   2:/usr/include/c++/11/bits/stl_pair.h **** 
   3:/usr/include/c++/11/bits/stl_pair.h **** // Copyright (C) 2001-2021 Free Software Foundation, Inc.
   4:/usr/include/c++/11/bits/stl_pair.h **** //
   5:/usr/include/c++/11/bits/stl_pair.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/11/bits/stl_pair.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/11/bits/stl_pair.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/11/bits/stl_pair.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/11/bits/stl_pair.h **** // any later version.
  10:/usr/include/c++/11/bits/stl_pair.h **** 
  11:/usr/include/c++/11/bits/stl_pair.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/11/bits/stl_pair.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/11/bits/stl_pair.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/11/bits/stl_pair.h **** // GNU General Public License for more details.
  15:/usr/include/c++/11/bits/stl_pair.h **** 
  16:/usr/include/c++/11/bits/stl_pair.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/11/bits/stl_pair.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/11/bits/stl_pair.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/11/bits/stl_pair.h **** 
  20:/usr/include/c++/11/bits/stl_pair.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/11/bits/stl_pair.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/11/bits/stl_pair.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/11/bits/stl_pair.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/11/bits/stl_pair.h **** 
  25:/usr/include/c++/11/bits/stl_pair.h **** /*
  26:/usr/include/c++/11/bits/stl_pair.h ****  *
  27:/usr/include/c++/11/bits/stl_pair.h ****  * Copyright (c) 1994
  28:/usr/include/c++/11/bits/stl_pair.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/11/bits/stl_pair.h ****  *
  30:/usr/include/c++/11/bits/stl_pair.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/11/bits/stl_pair.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/11/bits/stl_pair.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/11/bits/stl_pair.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/11/bits/stl_pair.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/11/bits/stl_pair.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/11/bits/stl_pair.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/11/bits/stl_pair.h ****  *
  38:/usr/include/c++/11/bits/stl_pair.h ****  *
  39:/usr/include/c++/11/bits/stl_pair.h ****  * Copyright (c) 1996,1997
  40:/usr/include/c++/11/bits/stl_pair.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/11/bits/stl_pair.h ****  *
  42:/usr/include/c++/11/bits/stl_pair.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/11/bits/stl_pair.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/11/bits/stl_pair.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/11/bits/stl_pair.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/11/bits/stl_pair.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/11/bits/stl_pair.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/11/bits/stl_pair.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/11/bits/stl_pair.h ****  */
  50:/usr/include/c++/11/bits/stl_pair.h **** 
  51:/usr/include/c++/11/bits/stl_pair.h **** /** @file bits/stl_pair.h
  52:/usr/include/c++/11/bits/stl_pair.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/11/bits/stl_pair.h ****  *  Do not attempt to use it directly. @headername{utility}
  54:/usr/include/c++/11/bits/stl_pair.h ****  */
  55:/usr/include/c++/11/bits/stl_pair.h **** 
  56:/usr/include/c++/11/bits/stl_pair.h **** #ifndef _STL_PAIR_H
  57:/usr/include/c++/11/bits/stl_pair.h **** #define _STL_PAIR_H 1
  58:/usr/include/c++/11/bits/stl_pair.h **** 
  59:/usr/include/c++/11/bits/stl_pair.h **** #include <bits/move.h> // for std::move / std::forward, and std::swap
  60:/usr/include/c++/11/bits/stl_pair.h **** 
  61:/usr/include/c++/11/bits/stl_pair.h **** #if __cplusplus >= 201103L
  62:/usr/include/c++/11/bits/stl_pair.h **** # include <type_traits> // for std::__decay_and_strip, std::is_reference_v
  63:/usr/include/c++/11/bits/stl_pair.h **** #endif
  64:/usr/include/c++/11/bits/stl_pair.h **** #if __cplusplus > 201703L
  65:/usr/include/c++/11/bits/stl_pair.h **** # include <compare>
  66:/usr/include/c++/11/bits/stl_pair.h **** # define __cpp_lib_constexpr_utility 201811L
  67:/usr/include/c++/11/bits/stl_pair.h **** #endif
  68:/usr/include/c++/11/bits/stl_pair.h **** 
  69:/usr/include/c++/11/bits/stl_pair.h **** namespace std _GLIBCXX_VISIBILITY(default)
  70:/usr/include/c++/11/bits/stl_pair.h **** {
  71:/usr/include/c++/11/bits/stl_pair.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  72:/usr/include/c++/11/bits/stl_pair.h **** 
  73:/usr/include/c++/11/bits/stl_pair.h ****   /**
  74:/usr/include/c++/11/bits/stl_pair.h ****    *  @addtogroup utilities
  75:/usr/include/c++/11/bits/stl_pair.h ****    *  @{
  76:/usr/include/c++/11/bits/stl_pair.h ****    */
  77:/usr/include/c++/11/bits/stl_pair.h **** 
  78:/usr/include/c++/11/bits/stl_pair.h **** #if __cplusplus >= 201103L
  79:/usr/include/c++/11/bits/stl_pair.h ****   /// Tag type for piecewise construction of std::pair objects.
  80:/usr/include/c++/11/bits/stl_pair.h ****   struct piecewise_construct_t { explicit piecewise_construct_t() = default; };
  81:/usr/include/c++/11/bits/stl_pair.h **** 
  82:/usr/include/c++/11/bits/stl_pair.h ****   /// Tag for piecewise construction of std::pair objects.
  83:/usr/include/c++/11/bits/stl_pair.h ****   _GLIBCXX17_INLINE constexpr piecewise_construct_t piecewise_construct =
  84:/usr/include/c++/11/bits/stl_pair.h ****     piecewise_construct_t();
  85:/usr/include/c++/11/bits/stl_pair.h **** 
  86:/usr/include/c++/11/bits/stl_pair.h ****   /// @cond undocumented
  87:/usr/include/c++/11/bits/stl_pair.h **** 
  88:/usr/include/c++/11/bits/stl_pair.h ****   // Forward declarations.
  89:/usr/include/c++/11/bits/stl_pair.h ****   template<typename...>
  90:/usr/include/c++/11/bits/stl_pair.h ****     class tuple;
  91:/usr/include/c++/11/bits/stl_pair.h **** 
  92:/usr/include/c++/11/bits/stl_pair.h ****   template<size_t...>
  93:/usr/include/c++/11/bits/stl_pair.h ****     struct _Index_tuple;
  94:/usr/include/c++/11/bits/stl_pair.h **** 
  95:/usr/include/c++/11/bits/stl_pair.h ****   // Concept utility functions, reused in conditionally-explicit
  96:/usr/include/c++/11/bits/stl_pair.h ****   // constructors.
  97:/usr/include/c++/11/bits/stl_pair.h ****   // See PR 70437, don't look at is_constructible or
  98:/usr/include/c++/11/bits/stl_pair.h ****   // is_convertible if the types are the same to
  99:/usr/include/c++/11/bits/stl_pair.h ****   // avoid querying those properties for incomplete types.
 100:/usr/include/c++/11/bits/stl_pair.h ****   template <bool, typename _T1, typename _T2>
 101:/usr/include/c++/11/bits/stl_pair.h ****     struct _PCC
 102:/usr/include/c++/11/bits/stl_pair.h ****     {
 103:/usr/include/c++/11/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 104:/usr/include/c++/11/bits/stl_pair.h ****       static constexpr bool _ConstructiblePair()
 105:/usr/include/c++/11/bits/stl_pair.h ****       {
 106:/usr/include/c++/11/bits/stl_pair.h **** 	return __and_<is_constructible<_T1, const _U1&>,
 107:/usr/include/c++/11/bits/stl_pair.h **** 		      is_constructible<_T2, const _U2&>>::value;
 108:/usr/include/c++/11/bits/stl_pair.h ****       }
 109:/usr/include/c++/11/bits/stl_pair.h **** 
 110:/usr/include/c++/11/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 111:/usr/include/c++/11/bits/stl_pair.h ****       static constexpr bool _ImplicitlyConvertiblePair()
 112:/usr/include/c++/11/bits/stl_pair.h ****       {
 113:/usr/include/c++/11/bits/stl_pair.h **** 	return __and_<is_convertible<const _U1&, _T1>,
 114:/usr/include/c++/11/bits/stl_pair.h **** 		      is_convertible<const _U2&, _T2>>::value;
 115:/usr/include/c++/11/bits/stl_pair.h ****       }
 116:/usr/include/c++/11/bits/stl_pair.h **** 
 117:/usr/include/c++/11/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 118:/usr/include/c++/11/bits/stl_pair.h ****       static constexpr bool _MoveConstructiblePair()
 119:/usr/include/c++/11/bits/stl_pair.h ****       {
 120:/usr/include/c++/11/bits/stl_pair.h **** 	return __and_<is_constructible<_T1, _U1&&>,
 121:/usr/include/c++/11/bits/stl_pair.h **** 		      is_constructible<_T2, _U2&&>>::value;
 122:/usr/include/c++/11/bits/stl_pair.h ****       }
 123:/usr/include/c++/11/bits/stl_pair.h **** 
 124:/usr/include/c++/11/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 125:/usr/include/c++/11/bits/stl_pair.h ****       static constexpr bool _ImplicitlyMoveConvertiblePair()
 126:/usr/include/c++/11/bits/stl_pair.h ****       {
 127:/usr/include/c++/11/bits/stl_pair.h **** 	return __and_<is_convertible<_U1&&, _T1>,
 128:/usr/include/c++/11/bits/stl_pair.h **** 		      is_convertible<_U2&&, _T2>>::value;
 129:/usr/include/c++/11/bits/stl_pair.h ****       }
 130:/usr/include/c++/11/bits/stl_pair.h **** 
 131:/usr/include/c++/11/bits/stl_pair.h ****       template <bool __implicit, typename _U1, typename _U2>
 132:/usr/include/c++/11/bits/stl_pair.h ****       static constexpr bool _CopyMovePair()
 133:/usr/include/c++/11/bits/stl_pair.h ****       {
 134:/usr/include/c++/11/bits/stl_pair.h **** 	using __do_converts = __and_<is_convertible<const _U1&, _T1>,
 135:/usr/include/c++/11/bits/stl_pair.h **** 				  is_convertible<_U2&&, _T2>>;
 136:/usr/include/c++/11/bits/stl_pair.h **** 	using __converts = typename conditional<__implicit,
 137:/usr/include/c++/11/bits/stl_pair.h **** 				       __do_converts,
 138:/usr/include/c++/11/bits/stl_pair.h **** 				       __not_<__do_converts>>::type;
 139:/usr/include/c++/11/bits/stl_pair.h **** 	return __and_<is_constructible<_T1, const _U1&>,
 140:/usr/include/c++/11/bits/stl_pair.h **** 		      is_constructible<_T2, _U2&&>,
 141:/usr/include/c++/11/bits/stl_pair.h **** 		      __converts
 142:/usr/include/c++/11/bits/stl_pair.h **** 		      >::value;
 143:/usr/include/c++/11/bits/stl_pair.h ****       }
 144:/usr/include/c++/11/bits/stl_pair.h **** 
 145:/usr/include/c++/11/bits/stl_pair.h ****       template <bool __implicit, typename _U1, typename _U2>
 146:/usr/include/c++/11/bits/stl_pair.h ****       static constexpr bool _MoveCopyPair()
 147:/usr/include/c++/11/bits/stl_pair.h ****       {
 148:/usr/include/c++/11/bits/stl_pair.h **** 	using __do_converts = __and_<is_convertible<_U1&&, _T1>,
 149:/usr/include/c++/11/bits/stl_pair.h **** 				  is_convertible<const _U2&, _T2>>;
 150:/usr/include/c++/11/bits/stl_pair.h **** 	using __converts = typename conditional<__implicit,
 151:/usr/include/c++/11/bits/stl_pair.h **** 				       __do_converts,
 152:/usr/include/c++/11/bits/stl_pair.h **** 				       __not_<__do_converts>>::type;
 153:/usr/include/c++/11/bits/stl_pair.h **** 	return __and_<is_constructible<_T1, _U1&&>,
 154:/usr/include/c++/11/bits/stl_pair.h **** 		      is_constructible<_T2, const _U2&&>,
 155:/usr/include/c++/11/bits/stl_pair.h **** 		      __converts
 156:/usr/include/c++/11/bits/stl_pair.h **** 		      >::value;
 157:/usr/include/c++/11/bits/stl_pair.h ****       }
 158:/usr/include/c++/11/bits/stl_pair.h ****   };
 159:/usr/include/c++/11/bits/stl_pair.h **** 
 160:/usr/include/c++/11/bits/stl_pair.h ****   template <typename _T1, typename _T2>
 161:/usr/include/c++/11/bits/stl_pair.h ****     struct _PCC<false, _T1, _T2>
 162:/usr/include/c++/11/bits/stl_pair.h ****     {
 163:/usr/include/c++/11/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 164:/usr/include/c++/11/bits/stl_pair.h ****       static constexpr bool _ConstructiblePair()
 165:/usr/include/c++/11/bits/stl_pair.h ****       {
 166:/usr/include/c++/11/bits/stl_pair.h **** 	return false;
 167:/usr/include/c++/11/bits/stl_pair.h ****       }
 168:/usr/include/c++/11/bits/stl_pair.h **** 
 169:/usr/include/c++/11/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 170:/usr/include/c++/11/bits/stl_pair.h ****       static constexpr bool _ImplicitlyConvertiblePair()
 171:/usr/include/c++/11/bits/stl_pair.h ****       {
 172:/usr/include/c++/11/bits/stl_pair.h **** 	return false;
 173:/usr/include/c++/11/bits/stl_pair.h ****       }
 174:/usr/include/c++/11/bits/stl_pair.h **** 
 175:/usr/include/c++/11/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 176:/usr/include/c++/11/bits/stl_pair.h ****       static constexpr bool _MoveConstructiblePair()
 177:/usr/include/c++/11/bits/stl_pair.h ****       {
 178:/usr/include/c++/11/bits/stl_pair.h **** 	return false;
 179:/usr/include/c++/11/bits/stl_pair.h ****       }
 180:/usr/include/c++/11/bits/stl_pair.h **** 
 181:/usr/include/c++/11/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 182:/usr/include/c++/11/bits/stl_pair.h ****       static constexpr bool _ImplicitlyMoveConvertiblePair()
 183:/usr/include/c++/11/bits/stl_pair.h ****       {
 184:/usr/include/c++/11/bits/stl_pair.h **** 	return false;
 185:/usr/include/c++/11/bits/stl_pair.h ****       }
 186:/usr/include/c++/11/bits/stl_pair.h ****   };
 187:/usr/include/c++/11/bits/stl_pair.h **** #endif // C++11
 188:/usr/include/c++/11/bits/stl_pair.h **** 
 189:/usr/include/c++/11/bits/stl_pair.h ****   template<typename _U1, typename _U2> class __pair_base
 190:/usr/include/c++/11/bits/stl_pair.h ****   {
 191:/usr/include/c++/11/bits/stl_pair.h **** #if __cplusplus >= 201103L
 192:/usr/include/c++/11/bits/stl_pair.h ****     template<typename _T1, typename _T2> friend struct pair;
 193:/usr/include/c++/11/bits/stl_pair.h ****     __pair_base() = default;
 194:/usr/include/c++/11/bits/stl_pair.h ****     ~__pair_base() = default;
 195:/usr/include/c++/11/bits/stl_pair.h ****     __pair_base(const __pair_base&) = default;
 196:/usr/include/c++/11/bits/stl_pair.h ****     __pair_base& operator=(const __pair_base&) = delete;
 197:/usr/include/c++/11/bits/stl_pair.h **** #endif // C++11
 198:/usr/include/c++/11/bits/stl_pair.h ****   };
 199:/usr/include/c++/11/bits/stl_pair.h **** 
 200:/usr/include/c++/11/bits/stl_pair.h ****   /// @endcond
 201:/usr/include/c++/11/bits/stl_pair.h **** 
 202:/usr/include/c++/11/bits/stl_pair.h ****  /**
 203:/usr/include/c++/11/bits/stl_pair.h ****    *  @brief Struct holding two objects of arbitrary type.
 204:/usr/include/c++/11/bits/stl_pair.h ****    *
 205:/usr/include/c++/11/bits/stl_pair.h ****    *  @tparam _T1  Type of first object.
 206:/usr/include/c++/11/bits/stl_pair.h ****    *  @tparam _T2  Type of second object.
 207:/usr/include/c++/11/bits/stl_pair.h ****    *
 208:/usr/include/c++/11/bits/stl_pair.h ****    *  <https://gcc.gnu.org/onlinedocs/libstdc++/manual/utilities.html>
 209:/usr/include/c++/11/bits/stl_pair.h ****    */
 210:/usr/include/c++/11/bits/stl_pair.h ****   template<typename _T1, typename _T2>
 211:/usr/include/c++/11/bits/stl_pair.h ****     struct pair
 296              		.loc 4 211 12
 297              		.cfi_startproc
 298 0000 F30F1EFA 		endbr64
 299 0004 55       		pushq	%rbp
 300              		.cfi_def_cfa_offset 16
 301              		.cfi_offset 6, -16
 302 0005 4889E5   		movq	%rsp, %rbp
 303              		.cfi_def_cfa_register 6
 304 0008 4883EC10 		subq	$16, %rsp
 305 000c 48897DF8 		movq	%rdi, -8(%rbp)
 306              	.LBB4:
 307              		.loc 4 211 12
 308 0010 488B45F8 		movq	-8(%rbp), %rax
 309 0014 4883C008 		addq	$8, %rax
 310 0018 4889C7   		movq	%rax, %rdi
 311 001b E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 311      00
 312              	.LBE4:
 313 0020 90       		nop
 314 0021 C9       		leave
 315              		.cfi_def_cfa 7, 8
 316 0022 C3       		ret
 317              		.cfi_endproc
 318              	.LFE934:
 320              		.weak	_ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev
 321              		.set	_ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev,_ZNSt4pairIiNSt7__cxx11
 322              		.text
 323              		.align 2
 324              		.globl	_ZN8UnitTest20DeferredTestReporter13ReportFailureERKNS_11TestDetailsEPKc
 326              	_ZN8UnitTest20DeferredTestReporter13ReportFailureERKNS_11TestDetailsEPKc:
 327              	.LFB932:
  11:DeferredTestReporter.cpp **** 
  12:DeferredTestReporter.cpp **** void DeferredTestReporter::ReportFailure(TestDetails const& details, char const* failure)
  13:DeferredTestReporter.cpp **** {
 328              		.loc 3 13 1
 329              		.cfi_startproc
 330              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 331              		.cfi_lsda 0x1b,.LLSDA932
 332 00be F30F1EFA 		endbr64
 333 00c2 55       		pushq	%rbp
 334              		.cfi_def_cfa_offset 16
 335              		.cfi_offset 6, -16
 336 00c3 4889E5   		movq	%rsp, %rbp
 337              		.cfi_def_cfa_register 6
 338 00c6 53       		pushq	%rbx
 339 00c7 4881EC88 		subq	$136, %rsp
 339      000000
 340              		.cfi_offset 3, -24
 341 00ce 48897D88 		movq	%rdi, -120(%rbp)
 342 00d2 48897580 		movq	%rsi, -128(%rbp)
 343 00d6 48899578 		movq	%rdx, -136(%rbp)
 343      FFFFFF
 344              		.loc 3 13 1
 345 00dd 64488B04 		movq	%fs:40, %rax
 345      25280000 
 345      00
 346 00e6 488945E8 		movq	%rax, -24(%rbp)
 347 00ea 31C0     		xorl	%eax, %eax
  14:DeferredTestReporter.cpp ****     DeferredTestResult& r = m_results.back();
 348              		.loc 3 14 43
 349 00ec 488B4588 		movq	-120(%rbp), %rax
 350 00f0 4883C008 		addq	$8, %rax
 351 00f4 4889C7   		movq	%rax, %rdi
 352              	.LEHB9:
 353 00f7 E8000000 		call	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4backEv@PLT
 353      00
 354              	.LEHE9:
 355 00fc 48894598 		movq	%rax, -104(%rbp)
  15:DeferredTestReporter.cpp ****     r.failed = true;
 356              		.loc 3 15 14
 357 0100 488B4598 		movq	-104(%rbp), %rax
 358 0104 C6407C01 		movb	$1, 124(%rax)
  16:DeferredTestReporter.cpp ****     r.failures.push_back(DeferredTestResult::Failure(details.lineNumber, failure));
 359              		.loc 3 16 25
 360 0108 488B4598 		movq	-104(%rbp), %rax
 361 010c 488D5860 		leaq	96(%rax), %rbx
 362              		.loc 3 16 46
 363 0110 488D4597 		leaq	-105(%rbp), %rax
 364 0114 4889C7   		movq	%rax, %rdi
 365 0117 E8000000 		call	_ZNSaIcEC1Ev@PLT
 365      00
 366 011c 488D5597 		leaq	-105(%rbp), %rdx
 367 0120 488B8D78 		movq	-136(%rbp), %rcx
 367      FFFFFF
 368 0127 488D45A0 		leaq	-96(%rbp), %rax
 369 012b 4889CE   		movq	%rcx, %rsi
 370 012e 4889C7   		movq	%rax, %rdi
 371              	.LEHB10:
 372 0131 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_@PLT
 372      00
 373              	.LEHE10:
 374              		.loc 3 16 62 discriminator 2
 375 0136 488B4580 		movq	-128(%rbp), %rax
 376 013a 488D4818 		leaq	24(%rax), %rcx
 377              		.loc 3 16 46 discriminator 2
 378 013e 488D55A0 		leaq	-96(%rbp), %rdx
 379 0142 488D45C0 		leaq	-64(%rbp), %rax
 380 0146 4889CE   		movq	%rcx, %rsi
 381 0149 4889C7   		movq	%rax, %rdi
 382              	.LEHB11:
 383 014c E8000000 		call	_ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKiRKS5_@PLT
 383      00
 384              	.LEHE11:
 385              		.loc 3 16 25 discriminator 4
 386 0151 488D45C0 		leaq	-64(%rbp), %rax
 387 0155 4889C6   		movq	%rax, %rsi
 388 0158 4889DF   		movq	%rbx, %rdi
 389              	.LEHB12:
 390 015b E8000000 		call	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE9push_back
 390      00
 391              	.LEHE12:
 392              		.loc 3 16 46 discriminator 6
 393 0160 488D45C0 		leaq	-64(%rbp), %rax
 394 0164 4889C7   		movq	%rax, %rdi
 395              	.LEHB13:
 396 0167 E8000000 		call	_ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev@PLT
 396      00
 397              	.LEHE13:
 398              		.loc 3 16 46 is_stmt 0 discriminator 8
 399 016c 488D45A0 		leaq	-96(%rbp), %rax
 400 0170 4889C7   		movq	%rax, %rdi
 401              	.LEHB14:
 402 0173 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 402      00
 403              	.LEHE14:
 404              		.loc 3 16 46 discriminator 10
 405 0178 488D4597 		leaq	-105(%rbp), %rax
 406 017c 4889C7   		movq	%rax, %rdi
 407 017f E8000000 		call	_ZNSaIcED1Ev@PLT
 407      00
  17:DeferredTestReporter.cpp ****     r.failureFile = details.filename;
 408              		.loc 3 17 29 is_stmt 1 discriminator 10
 409 0184 488B4580 		movq	-128(%rbp), %rax
 410 0188 488B4010 		movq	16(%rax), %rax
 411 018c 488B5598 		movq	-104(%rbp), %rdx
 412 0190 4883C240 		addq	$64, %rdx
 413 0194 4889C6   		movq	%rax, %rsi
 414 0197 4889D7   		movq	%rdx, %rdi
 415              	.LEHB15:
 416 019a E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc@PLT
 416      00
 417              	.LEHE15:
  18:DeferredTestReporter.cpp **** }
 418              		.loc 3 18 1 discriminator 10
 419 019f 90       		nop
 420 01a0 488B45E8 		movq	-24(%rbp), %rax
 421 01a4 64482B04 		subq	%fs:40, %rax
 421      25280000 
 421      00
 422 01ad 744F     		je	.L22
 423 01af EB48     		jmp	.L26
 424              	.L25:
 425 01b1 F30F1EFA 		endbr64
  16:DeferredTestReporter.cpp ****     r.failures.push_back(DeferredTestResult::Failure(details.lineNumber, failure));
 426              		.loc 3 16 46
 427 01b5 4889C3   		movq	%rax, %rbx
 428 01b8 488D45C0 		leaq	-64(%rbp), %rax
 429 01bc 4889C7   		movq	%rax, %rdi
 430 01bf E8000000 		call	_ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev@PLT
 430      00
 431 01c4 EB07     		jmp	.L20
 432              	.L24:
 433 01c6 F30F1EFA 		endbr64
 434 01ca 4889C3   		movq	%rax, %rbx
 435              	.L20:
  16:DeferredTestReporter.cpp ****     r.failures.push_back(DeferredTestResult::Failure(details.lineNumber, failure));
 436              		.loc 3 16 46 is_stmt 0 discriminator 3
 437 01cd 488D45A0 		leaq	-96(%rbp), %rax
 438 01d1 4889C7   		movq	%rax, %rdi
 439 01d4 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 439      00
 440 01d9 EB07     		jmp	.L21
 441              	.L23:
 442 01db F30F1EFA 		endbr64
  16:DeferredTestReporter.cpp ****     r.failures.push_back(DeferredTestResult::Failure(details.lineNumber, failure));
 443              		.loc 3 16 46
 444 01df 4889C3   		movq	%rax, %rbx
 445              	.L21:
  16:DeferredTestReporter.cpp ****     r.failures.push_back(DeferredTestResult::Failure(details.lineNumber, failure));
 446              		.loc 3 16 46 discriminator 1
 447 01e2 488D4597 		leaq	-105(%rbp), %rax
 448 01e6 4889C7   		movq	%rax, %rdi
 449 01e9 E8000000 		call	_ZNSaIcED1Ev@PLT
 449      00
 450 01ee 4889D8   		movq	%rbx, %rax
 451 01f1 4889C7   		movq	%rax, %rdi
 452              	.LEHB16:
 453 01f4 E8000000 		call	_Unwind_Resume@PLT
 453      00
 454              	.LEHE16:
 455              	.L26:
 456              		.loc 3 18 1 is_stmt 1
 457 01f9 E8000000 		call	__stack_chk_fail@PLT
 457      00
 458              	.L22:
 459 01fe 488B5DF8 		movq	-8(%rbp), %rbx
 460 0202 C9       		leave
 461              		.cfi_def_cfa 7, 8
 462 0203 C3       		ret
 463              		.cfi_endproc
 464              	.LFE932:
 465              		.section	.gcc_except_table
 466              	.LLSDA932:
 467 0016 FF       		.byte	0xff
 468 0017 FF       		.byte	0xff
 469 0018 01       		.byte	0x1
 470 0019 2B       		.uleb128 .LLSDACSE932-.LLSDACSB932
 471              	.LLSDACSB932:
 472 001a 39       		.uleb128 .LEHB9-.LFB932
 473 001b 05       		.uleb128 .LEHE9-.LEHB9
 474 001c 00       		.uleb128 0
 475 001d 00       		.uleb128 0
 476 001e 73       		.uleb128 .LEHB10-.LFB932
 477 001f 05       		.uleb128 .LEHE10-.LEHB10
 478 0020 9D02     		.uleb128 .L23-.LFB932
 479 0022 00       		.uleb128 0
 480 0023 8E01     		.uleb128 .LEHB11-.LFB932
 481 0025 05       		.uleb128 .LEHE11-.LEHB11
 482 0026 8802     		.uleb128 .L24-.LFB932
 483 0028 00       		.uleb128 0
 484 0029 9D01     		.uleb128 .LEHB12-.LFB932
 485 002b 05       		.uleb128 .LEHE12-.LEHB12
 486 002c F301     		.uleb128 .L25-.LFB932
 487 002e 00       		.uleb128 0
 488 002f A901     		.uleb128 .LEHB13-.LFB932
 489 0031 05       		.uleb128 .LEHE13-.LEHB13
 490 0032 8802     		.uleb128 .L24-.LFB932
 491 0034 00       		.uleb128 0
 492 0035 B501     		.uleb128 .LEHB14-.LFB932
 493 0037 05       		.uleb128 .LEHE14-.LEHB14
 494 0038 9D02     		.uleb128 .L23-.LFB932
 495 003a 00       		.uleb128 0
 496 003b DC01     		.uleb128 .LEHB15-.LFB932
 497 003d 05       		.uleb128 .LEHE15-.LEHB15
 498 003e 00       		.uleb128 0
 499 003f 00       		.uleb128 0
 500 0040 B602     		.uleb128 .LEHB16-.LFB932
 501 0042 05       		.uleb128 .LEHE16-.LEHB16
 502 0043 00       		.uleb128 0
 503 0044 00       		.uleb128 0
 504              	.LLSDACSE932:
 505              		.text
 507              		.align 2
 508              		.globl	_ZN8UnitTest20DeferredTestReporter16ReportTestFinishERKNS_11TestDetailsEf
 510              	_ZN8UnitTest20DeferredTestReporter16ReportTestFinishERKNS_11TestDetailsEf:
 511              	.LFB936:
  19:DeferredTestReporter.cpp **** 
  20:DeferredTestReporter.cpp **** void DeferredTestReporter::ReportTestFinish(TestDetails const&, float secondsElapsed)
  21:DeferredTestReporter.cpp **** {
 512              		.loc 3 21 1
 513              		.cfi_startproc
 514 0204 F30F1EFA 		endbr64
 515 0208 55       		pushq	%rbp
 516              		.cfi_def_cfa_offset 16
 517              		.cfi_offset 6, -16
 518 0209 4889E5   		movq	%rsp, %rbp
 519              		.cfi_def_cfa_register 6
 520 020c 4883EC30 		subq	$48, %rsp
 521 0210 48897DE8 		movq	%rdi, -24(%rbp)
 522 0214 488975E0 		movq	%rsi, -32(%rbp)
 523 0218 F30F1145 		movss	%xmm0, -36(%rbp)
 523      DC
  22:DeferredTestReporter.cpp ****     DeferredTestResult& r = m_results.back();
 524              		.loc 3 22 43
 525 021d 488B45E8 		movq	-24(%rbp), %rax
 526 0221 4883C008 		addq	$8, %rax
 527 0225 4889C7   		movq	%rax, %rdi
 528 0228 E8000000 		call	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4backEv@PLT
 528      00
 529 022d 488945F8 		movq	%rax, -8(%rbp)
  23:DeferredTestReporter.cpp ****     r.timeElapsed = secondsElapsed;
 530              		.loc 3 23 19
 531 0231 488B45F8 		movq	-8(%rbp), %rax
 532 0235 F30F1045 		movss	-36(%rbp), %xmm0
 532      DC
 533 023a F30F1140 		movss	%xmm0, 120(%rax)
 533      78
  24:DeferredTestReporter.cpp **** }
 534              		.loc 3 24 1
 535 023f 90       		nop
 536 0240 C9       		leave
 537              		.cfi_def_cfa 7, 8
 538 0241 C3       		ret
 539              		.cfi_endproc
 540              	.LFE936:
 542              		.align 2
 543              		.globl	_ZN8UnitTest20DeferredTestReporter10GetResultsEv
 545              	_ZN8UnitTest20DeferredTestReporter10GetResultsEv:
 546              	.LFB937:
  25:DeferredTestReporter.cpp **** 
  26:DeferredTestReporter.cpp **** DeferredTestReporter::DeferredTestResultList& DeferredTestReporter::GetResults()
  27:DeferredTestReporter.cpp **** {
 547              		.loc 3 27 1
 548              		.cfi_startproc
 549 0242 F30F1EFA 		endbr64
 550 0246 55       		pushq	%rbp
 551              		.cfi_def_cfa_offset 16
 552              		.cfi_offset 6, -16
 553 0247 4889E5   		movq	%rsp, %rbp
 554              		.cfi_def_cfa_register 6
 555 024a 48897DF8 		movq	%rdi, -8(%rbp)
  28:DeferredTestReporter.cpp ****     return m_results;
 556              		.loc 3 28 12
 557 024e 488B45F8 		movq	-8(%rbp), %rax
 558 0252 4883C008 		addq	$8, %rax
  29:DeferredTestReporter.cpp **** }
 559              		.loc 3 29 1
 560 0256 5D       		popq	%rbp
 561              		.cfi_def_cfa 7, 8
 562 0257 C3       		ret
 563              		.cfi_endproc
 564              	.LFE937:
 566              		.section	.text._ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE
 567              		.align 2
 568              		.weak	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2Ev
 570              	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2Ev:
 571              	.LFB945:
 572              		.file 5 "/usr/include/c++/11/bits/stl_vector.h"
   1:/usr/include/c++/11/bits/stl_vector.h **** // Vector implementation -*- C++ -*-
   2:/usr/include/c++/11/bits/stl_vector.h **** 
   3:/usr/include/c++/11/bits/stl_vector.h **** // Copyright (C) 2001-2021 Free Software Foundation, Inc.
   4:/usr/include/c++/11/bits/stl_vector.h **** //
   5:/usr/include/c++/11/bits/stl_vector.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/11/bits/stl_vector.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/11/bits/stl_vector.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/11/bits/stl_vector.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/11/bits/stl_vector.h **** // any later version.
  10:/usr/include/c++/11/bits/stl_vector.h **** 
  11:/usr/include/c++/11/bits/stl_vector.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/11/bits/stl_vector.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/11/bits/stl_vector.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/11/bits/stl_vector.h **** // GNU General Public License for more details.
  15:/usr/include/c++/11/bits/stl_vector.h **** 
  16:/usr/include/c++/11/bits/stl_vector.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/11/bits/stl_vector.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/11/bits/stl_vector.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/11/bits/stl_vector.h **** 
  20:/usr/include/c++/11/bits/stl_vector.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/11/bits/stl_vector.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/11/bits/stl_vector.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/11/bits/stl_vector.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/11/bits/stl_vector.h **** 
  25:/usr/include/c++/11/bits/stl_vector.h **** /*
  26:/usr/include/c++/11/bits/stl_vector.h ****  *
  27:/usr/include/c++/11/bits/stl_vector.h ****  * Copyright (c) 1994
  28:/usr/include/c++/11/bits/stl_vector.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/11/bits/stl_vector.h ****  *
  30:/usr/include/c++/11/bits/stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/11/bits/stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/11/bits/stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/11/bits/stl_vector.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/11/bits/stl_vector.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/11/bits/stl_vector.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/11/bits/stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/11/bits/stl_vector.h ****  *
  38:/usr/include/c++/11/bits/stl_vector.h ****  *
  39:/usr/include/c++/11/bits/stl_vector.h ****  * Copyright (c) 1996
  40:/usr/include/c++/11/bits/stl_vector.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/11/bits/stl_vector.h ****  *
  42:/usr/include/c++/11/bits/stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/11/bits/stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/11/bits/stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/11/bits/stl_vector.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/11/bits/stl_vector.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/11/bits/stl_vector.h ****  * representations about the suitability of this  software for any
  48:/usr/include/c++/11/bits/stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/11/bits/stl_vector.h ****  */
  50:/usr/include/c++/11/bits/stl_vector.h **** 
  51:/usr/include/c++/11/bits/stl_vector.h **** /** @file bits/stl_vector.h
  52:/usr/include/c++/11/bits/stl_vector.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/11/bits/stl_vector.h ****  *  Do not attempt to use it directly. @headername{vector}
  54:/usr/include/c++/11/bits/stl_vector.h ****  */
  55:/usr/include/c++/11/bits/stl_vector.h **** 
  56:/usr/include/c++/11/bits/stl_vector.h **** #ifndef _STL_VECTOR_H
  57:/usr/include/c++/11/bits/stl_vector.h **** #define _STL_VECTOR_H 1
  58:/usr/include/c++/11/bits/stl_vector.h **** 
  59:/usr/include/c++/11/bits/stl_vector.h **** #include <bits/stl_iterator_base_funcs.h>
  60:/usr/include/c++/11/bits/stl_vector.h **** #include <bits/functexcept.h>
  61:/usr/include/c++/11/bits/stl_vector.h **** #include <bits/concept_check.h>
  62:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
  63:/usr/include/c++/11/bits/stl_vector.h **** #include <initializer_list>
  64:/usr/include/c++/11/bits/stl_vector.h **** #endif
  65:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus > 201703L
  66:/usr/include/c++/11/bits/stl_vector.h **** # include <compare>
  67:/usr/include/c++/11/bits/stl_vector.h **** #endif
  68:/usr/include/c++/11/bits/stl_vector.h **** 
  69:/usr/include/c++/11/bits/stl_vector.h **** #include <debug/assertions.h>
  70:/usr/include/c++/11/bits/stl_vector.h **** 
  71:/usr/include/c++/11/bits/stl_vector.h **** #if _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
  72:/usr/include/c++/11/bits/stl_vector.h **** extern "C" void
  73:/usr/include/c++/11/bits/stl_vector.h **** __sanitizer_annotate_contiguous_container(const void*, const void*,
  74:/usr/include/c++/11/bits/stl_vector.h **** 					  const void*, const void*);
  75:/usr/include/c++/11/bits/stl_vector.h **** #endif
  76:/usr/include/c++/11/bits/stl_vector.h **** 
  77:/usr/include/c++/11/bits/stl_vector.h **** namespace std _GLIBCXX_VISIBILITY(default)
  78:/usr/include/c++/11/bits/stl_vector.h **** {
  79:/usr/include/c++/11/bits/stl_vector.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  80:/usr/include/c++/11/bits/stl_vector.h **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  81:/usr/include/c++/11/bits/stl_vector.h **** 
  82:/usr/include/c++/11/bits/stl_vector.h ****   /// See bits/stl_deque.h's _Deque_base for an explanation.
  83:/usr/include/c++/11/bits/stl_vector.h ****   template<typename _Tp, typename _Alloc>
  84:/usr/include/c++/11/bits/stl_vector.h ****     struct _Vector_base
  85:/usr/include/c++/11/bits/stl_vector.h ****     {
  86:/usr/include/c++/11/bits/stl_vector.h ****       typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
  87:/usr/include/c++/11/bits/stl_vector.h **** 	rebind<_Tp>::other _Tp_alloc_type;
  88:/usr/include/c++/11/bits/stl_vector.h ****       typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer
  89:/usr/include/c++/11/bits/stl_vector.h ****        	pointer;
  90:/usr/include/c++/11/bits/stl_vector.h **** 
  91:/usr/include/c++/11/bits/stl_vector.h ****       struct _Vector_impl_data
  92:/usr/include/c++/11/bits/stl_vector.h ****       {
  93:/usr/include/c++/11/bits/stl_vector.h **** 	pointer _M_start;
  94:/usr/include/c++/11/bits/stl_vector.h **** 	pointer _M_finish;
  95:/usr/include/c++/11/bits/stl_vector.h **** 	pointer _M_end_of_storage;
  96:/usr/include/c++/11/bits/stl_vector.h **** 
  97:/usr/include/c++/11/bits/stl_vector.h **** 	_Vector_impl_data() _GLIBCXX_NOEXCEPT
  98:/usr/include/c++/11/bits/stl_vector.h **** 	: _M_start(), _M_finish(), _M_end_of_storage()
  99:/usr/include/c++/11/bits/stl_vector.h **** 	{ }
 100:/usr/include/c++/11/bits/stl_vector.h **** 
 101:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
 102:/usr/include/c++/11/bits/stl_vector.h **** 	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
 103:/usr/include/c++/11/bits/stl_vector.h **** 	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 104:/usr/include/c++/11/bits/stl_vector.h **** 	  _M_end_of_storage(__x._M_end_of_storage)
 105:/usr/include/c++/11/bits/stl_vector.h **** 	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 106:/usr/include/c++/11/bits/stl_vector.h **** #endif
 107:/usr/include/c++/11/bits/stl_vector.h **** 
 108:/usr/include/c++/11/bits/stl_vector.h **** 	void
 109:/usr/include/c++/11/bits/stl_vector.h **** 	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
 110:/usr/include/c++/11/bits/stl_vector.h **** 	{
 111:/usr/include/c++/11/bits/stl_vector.h **** 	  _M_start = __x._M_start;
 112:/usr/include/c++/11/bits/stl_vector.h **** 	  _M_finish = __x._M_finish;
 113:/usr/include/c++/11/bits/stl_vector.h **** 	  _M_end_of_storage = __x._M_end_of_storage;
 114:/usr/include/c++/11/bits/stl_vector.h **** 	}
 115:/usr/include/c++/11/bits/stl_vector.h **** 
 116:/usr/include/c++/11/bits/stl_vector.h **** 	void
 117:/usr/include/c++/11/bits/stl_vector.h **** 	_M_swap_data(_Vector_impl_data& __x) _GLIBCXX_NOEXCEPT
 118:/usr/include/c++/11/bits/stl_vector.h **** 	{
 119:/usr/include/c++/11/bits/stl_vector.h **** 	  // Do not use std::swap(_M_start, __x._M_start), etc as it loses
 120:/usr/include/c++/11/bits/stl_vector.h **** 	  // information used by TBAA.
 121:/usr/include/c++/11/bits/stl_vector.h **** 	  _Vector_impl_data __tmp;
 122:/usr/include/c++/11/bits/stl_vector.h **** 	  __tmp._M_copy_data(*this);
 123:/usr/include/c++/11/bits/stl_vector.h **** 	  _M_copy_data(__x);
 124:/usr/include/c++/11/bits/stl_vector.h **** 	  __x._M_copy_data(__tmp);
 125:/usr/include/c++/11/bits/stl_vector.h **** 	}
 126:/usr/include/c++/11/bits/stl_vector.h ****       };
 127:/usr/include/c++/11/bits/stl_vector.h **** 
 128:/usr/include/c++/11/bits/stl_vector.h ****       struct _Vector_impl
 129:/usr/include/c++/11/bits/stl_vector.h **** 	: public _Tp_alloc_type, public _Vector_impl_data
 130:/usr/include/c++/11/bits/stl_vector.h ****       {
 131:/usr/include/c++/11/bits/stl_vector.h **** 	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 132:/usr/include/c++/11/bits/stl_vector.h **** 	    is_nothrow_default_constructible<_Tp_alloc_type>::value)
 133:/usr/include/c++/11/bits/stl_vector.h **** 	: _Tp_alloc_type()
 134:/usr/include/c++/11/bits/stl_vector.h **** 	{ }
 135:/usr/include/c++/11/bits/stl_vector.h **** 
 136:/usr/include/c++/11/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 137:/usr/include/c++/11/bits/stl_vector.h **** 	: _Tp_alloc_type(__a)
 138:/usr/include/c++/11/bits/stl_vector.h **** 	{ }
 139:/usr/include/c++/11/bits/stl_vector.h **** 
 140:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
 141:/usr/include/c++/11/bits/stl_vector.h **** 	// Not defaulted, to enforce noexcept(true) even when
 142:/usr/include/c++/11/bits/stl_vector.h **** 	// !is_nothrow_move_constructible<_Tp_alloc_type>.
 143:/usr/include/c++/11/bits/stl_vector.h **** 	_Vector_impl(_Vector_impl&& __x) noexcept
 144:/usr/include/c++/11/bits/stl_vector.h **** 	: _Tp_alloc_type(std::move(__x)), _Vector_impl_data(std::move(__x))
 145:/usr/include/c++/11/bits/stl_vector.h **** 	{ }
 146:/usr/include/c++/11/bits/stl_vector.h **** 
 147:/usr/include/c++/11/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type&& __a) noexcept
 148:/usr/include/c++/11/bits/stl_vector.h **** 	: _Tp_alloc_type(std::move(__a))
 149:/usr/include/c++/11/bits/stl_vector.h **** 	{ }
 150:/usr/include/c++/11/bits/stl_vector.h **** 
 151:/usr/include/c++/11/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type&& __a, _Vector_impl&& __rv) noexcept
 152:/usr/include/c++/11/bits/stl_vector.h **** 	: _Tp_alloc_type(std::move(__a)), _Vector_impl_data(std::move(__rv))
 153:/usr/include/c++/11/bits/stl_vector.h **** 	{ }
 154:/usr/include/c++/11/bits/stl_vector.h **** #endif
 155:/usr/include/c++/11/bits/stl_vector.h **** 
 156:/usr/include/c++/11/bits/stl_vector.h **** #if _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
 157:/usr/include/c++/11/bits/stl_vector.h **** 	template<typename = _Tp_alloc_type>
 158:/usr/include/c++/11/bits/stl_vector.h **** 	  struct _Asan
 159:/usr/include/c++/11/bits/stl_vector.h **** 	  {
 160:/usr/include/c++/11/bits/stl_vector.h **** 	    typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>
 161:/usr/include/c++/11/bits/stl_vector.h **** 	      ::size_type size_type;
 162:/usr/include/c++/11/bits/stl_vector.h **** 
 163:/usr/include/c++/11/bits/stl_vector.h **** 	    static void _S_shrink(_Vector_impl&, size_type) { }
 164:/usr/include/c++/11/bits/stl_vector.h **** 	    static void _S_on_dealloc(_Vector_impl&) { }
 165:/usr/include/c++/11/bits/stl_vector.h **** 
 166:/usr/include/c++/11/bits/stl_vector.h **** 	    typedef _Vector_impl& _Reinit;
 167:/usr/include/c++/11/bits/stl_vector.h **** 
 168:/usr/include/c++/11/bits/stl_vector.h **** 	    struct _Grow
 169:/usr/include/c++/11/bits/stl_vector.h **** 	    {
 170:/usr/include/c++/11/bits/stl_vector.h **** 	      _Grow(_Vector_impl&, size_type) { }
 171:/usr/include/c++/11/bits/stl_vector.h **** 	      void _M_grew(size_type) { }
 172:/usr/include/c++/11/bits/stl_vector.h **** 	    };
 173:/usr/include/c++/11/bits/stl_vector.h **** 	  };
 174:/usr/include/c++/11/bits/stl_vector.h **** 
 175:/usr/include/c++/11/bits/stl_vector.h **** 	// Enable ASan annotations for memory obtained from std::allocator.
 176:/usr/include/c++/11/bits/stl_vector.h **** 	template<typename _Up>
 177:/usr/include/c++/11/bits/stl_vector.h **** 	  struct _Asan<allocator<_Up> >
 178:/usr/include/c++/11/bits/stl_vector.h **** 	  {
 179:/usr/include/c++/11/bits/stl_vector.h **** 	    typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>
 180:/usr/include/c++/11/bits/stl_vector.h **** 	      ::size_type size_type;
 181:/usr/include/c++/11/bits/stl_vector.h **** 
 182:/usr/include/c++/11/bits/stl_vector.h **** 	    // Adjust ASan annotation for [_M_start, _M_end_of_storage) to
 183:/usr/include/c++/11/bits/stl_vector.h **** 	    // mark end of valid region as __curr instead of __prev.
 184:/usr/include/c++/11/bits/stl_vector.h **** 	    static void
 185:/usr/include/c++/11/bits/stl_vector.h **** 	    _S_adjust(_Vector_impl& __impl, pointer __prev, pointer __curr)
 186:/usr/include/c++/11/bits/stl_vector.h **** 	    {
 187:/usr/include/c++/11/bits/stl_vector.h **** 	      __sanitizer_annotate_contiguous_container(__impl._M_start,
 188:/usr/include/c++/11/bits/stl_vector.h **** 		  __impl._M_end_of_storage, __prev, __curr);
 189:/usr/include/c++/11/bits/stl_vector.h **** 	    }
 190:/usr/include/c++/11/bits/stl_vector.h **** 
 191:/usr/include/c++/11/bits/stl_vector.h **** 	    static void
 192:/usr/include/c++/11/bits/stl_vector.h **** 	    _S_grow(_Vector_impl& __impl, size_type __n)
 193:/usr/include/c++/11/bits/stl_vector.h **** 	    { _S_adjust(__impl, __impl._M_finish, __impl._M_finish + __n); }
 194:/usr/include/c++/11/bits/stl_vector.h **** 
 195:/usr/include/c++/11/bits/stl_vector.h **** 	    static void
 196:/usr/include/c++/11/bits/stl_vector.h **** 	    _S_shrink(_Vector_impl& __impl, size_type __n)
 197:/usr/include/c++/11/bits/stl_vector.h **** 	    { _S_adjust(__impl, __impl._M_finish + __n, __impl._M_finish); }
 198:/usr/include/c++/11/bits/stl_vector.h **** 
 199:/usr/include/c++/11/bits/stl_vector.h **** 	    static void
 200:/usr/include/c++/11/bits/stl_vector.h **** 	    _S_on_dealloc(_Vector_impl& __impl)
 201:/usr/include/c++/11/bits/stl_vector.h **** 	    {
 202:/usr/include/c++/11/bits/stl_vector.h **** 	      if (__impl._M_start)
 203:/usr/include/c++/11/bits/stl_vector.h **** 		_S_adjust(__impl, __impl._M_finish, __impl._M_end_of_storage);
 204:/usr/include/c++/11/bits/stl_vector.h **** 	    }
 205:/usr/include/c++/11/bits/stl_vector.h **** 
 206:/usr/include/c++/11/bits/stl_vector.h **** 	    // Used on reallocation to tell ASan unused capacity is invalid.
 207:/usr/include/c++/11/bits/stl_vector.h **** 	    struct _Reinit
 208:/usr/include/c++/11/bits/stl_vector.h **** 	    {
 209:/usr/include/c++/11/bits/stl_vector.h **** 	      explicit _Reinit(_Vector_impl& __impl) : _M_impl(__impl)
 210:/usr/include/c++/11/bits/stl_vector.h **** 	      {
 211:/usr/include/c++/11/bits/stl_vector.h **** 		// Mark unused capacity as valid again before deallocating it.
 212:/usr/include/c++/11/bits/stl_vector.h **** 		_S_on_dealloc(_M_impl);
 213:/usr/include/c++/11/bits/stl_vector.h **** 	      }
 214:/usr/include/c++/11/bits/stl_vector.h **** 
 215:/usr/include/c++/11/bits/stl_vector.h **** 	      ~_Reinit()
 216:/usr/include/c++/11/bits/stl_vector.h **** 	      {
 217:/usr/include/c++/11/bits/stl_vector.h **** 		// Mark unused capacity as invalid after reallocation.
 218:/usr/include/c++/11/bits/stl_vector.h **** 		if (_M_impl._M_start)
 219:/usr/include/c++/11/bits/stl_vector.h **** 		  _S_adjust(_M_impl, _M_impl._M_end_of_storage,
 220:/usr/include/c++/11/bits/stl_vector.h **** 			    _M_impl._M_finish);
 221:/usr/include/c++/11/bits/stl_vector.h **** 	      }
 222:/usr/include/c++/11/bits/stl_vector.h **** 
 223:/usr/include/c++/11/bits/stl_vector.h **** 	      _Vector_impl& _M_impl;
 224:/usr/include/c++/11/bits/stl_vector.h **** 
 225:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
 226:/usr/include/c++/11/bits/stl_vector.h **** 	      _Reinit(const _Reinit&) = delete;
 227:/usr/include/c++/11/bits/stl_vector.h **** 	      _Reinit& operator=(const _Reinit&) = delete;
 228:/usr/include/c++/11/bits/stl_vector.h **** #endif
 229:/usr/include/c++/11/bits/stl_vector.h **** 	    };
 230:/usr/include/c++/11/bits/stl_vector.h **** 
 231:/usr/include/c++/11/bits/stl_vector.h **** 	    // Tell ASan when unused capacity is initialized to be valid.
 232:/usr/include/c++/11/bits/stl_vector.h **** 	    struct _Grow
 233:/usr/include/c++/11/bits/stl_vector.h **** 	    {
 234:/usr/include/c++/11/bits/stl_vector.h **** 	      _Grow(_Vector_impl& __impl, size_type __n)
 235:/usr/include/c++/11/bits/stl_vector.h **** 	      : _M_impl(__impl), _M_n(__n)
 236:/usr/include/c++/11/bits/stl_vector.h **** 	      { _S_grow(_M_impl, __n); }
 237:/usr/include/c++/11/bits/stl_vector.h **** 
 238:/usr/include/c++/11/bits/stl_vector.h **** 	      ~_Grow() { if (_M_n) _S_shrink(_M_impl, _M_n); }
 239:/usr/include/c++/11/bits/stl_vector.h **** 
 240:/usr/include/c++/11/bits/stl_vector.h **** 	      void _M_grew(size_type __n) { _M_n -= __n; }
 241:/usr/include/c++/11/bits/stl_vector.h **** 
 242:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
 243:/usr/include/c++/11/bits/stl_vector.h **** 	      _Grow(const _Grow&) = delete;
 244:/usr/include/c++/11/bits/stl_vector.h **** 	      _Grow& operator=(const _Grow&) = delete;
 245:/usr/include/c++/11/bits/stl_vector.h **** #endif
 246:/usr/include/c++/11/bits/stl_vector.h **** 	    private:
 247:/usr/include/c++/11/bits/stl_vector.h **** 	      _Vector_impl& _M_impl;
 248:/usr/include/c++/11/bits/stl_vector.h **** 	      size_type _M_n;
 249:/usr/include/c++/11/bits/stl_vector.h **** 	    };
 250:/usr/include/c++/11/bits/stl_vector.h **** 	  };
 251:/usr/include/c++/11/bits/stl_vector.h **** 
 252:/usr/include/c++/11/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_REINIT \
 253:/usr/include/c++/11/bits/stl_vector.h ****   typename _Base::_Vector_impl::template _Asan<>::_Reinit const \
 254:/usr/include/c++/11/bits/stl_vector.h **** 	__attribute__((__unused__)) __reinit_guard(this->_M_impl)
 255:/usr/include/c++/11/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GROW(n) \
 256:/usr/include/c++/11/bits/stl_vector.h ****   typename _Base::_Vector_impl::template _Asan<>::_Grow \
 257:/usr/include/c++/11/bits/stl_vector.h **** 	__attribute__((__unused__)) __grow_guard(this->_M_impl, (n))
 258:/usr/include/c++/11/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GREW(n) __grow_guard._M_grew(n)
 259:/usr/include/c++/11/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_SHRINK(n) \
 260:/usr/include/c++/11/bits/stl_vector.h ****   _Base::_Vector_impl::template _Asan<>::_S_shrink(this->_M_impl, n)
 261:/usr/include/c++/11/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC \
 262:/usr/include/c++/11/bits/stl_vector.h ****   _Base::_Vector_impl::template _Asan<>::_S_on_dealloc(this->_M_impl)
 263:/usr/include/c++/11/bits/stl_vector.h **** #else // ! (_GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR)
 264:/usr/include/c++/11/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_REINIT
 265:/usr/include/c++/11/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GROW(n)
 266:/usr/include/c++/11/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GREW(n)
 267:/usr/include/c++/11/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_SHRINK(n)
 268:/usr/include/c++/11/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC
 269:/usr/include/c++/11/bits/stl_vector.h **** #endif // _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
 270:/usr/include/c++/11/bits/stl_vector.h ****       };
 271:/usr/include/c++/11/bits/stl_vector.h **** 
 272:/usr/include/c++/11/bits/stl_vector.h ****     public:
 273:/usr/include/c++/11/bits/stl_vector.h ****       typedef _Alloc allocator_type;
 274:/usr/include/c++/11/bits/stl_vector.h **** 
 275:/usr/include/c++/11/bits/stl_vector.h ****       _Tp_alloc_type&
 276:/usr/include/c++/11/bits/stl_vector.h ****       _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 277:/usr/include/c++/11/bits/stl_vector.h ****       { return this->_M_impl; }
 278:/usr/include/c++/11/bits/stl_vector.h **** 
 279:/usr/include/c++/11/bits/stl_vector.h ****       const _Tp_alloc_type&
 280:/usr/include/c++/11/bits/stl_vector.h ****       _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 281:/usr/include/c++/11/bits/stl_vector.h ****       { return this->_M_impl; }
 282:/usr/include/c++/11/bits/stl_vector.h **** 
 283:/usr/include/c++/11/bits/stl_vector.h ****       allocator_type
 284:/usr/include/c++/11/bits/stl_vector.h ****       get_allocator() const _GLIBCXX_NOEXCEPT
 285:/usr/include/c++/11/bits/stl_vector.h ****       { return allocator_type(_M_get_Tp_allocator()); }
 286:/usr/include/c++/11/bits/stl_vector.h **** 
 287:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
 288:/usr/include/c++/11/bits/stl_vector.h ****       _Vector_base() = default;
 289:/usr/include/c++/11/bits/stl_vector.h **** #else
 290:/usr/include/c++/11/bits/stl_vector.h ****       _Vector_base() { }
 291:/usr/include/c++/11/bits/stl_vector.h **** #endif
 292:/usr/include/c++/11/bits/stl_vector.h **** 
 293:/usr/include/c++/11/bits/stl_vector.h ****       _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 294:/usr/include/c++/11/bits/stl_vector.h ****       : _M_impl(__a) { }
 295:/usr/include/c++/11/bits/stl_vector.h **** 
 296:/usr/include/c++/11/bits/stl_vector.h ****       // Kept for ABI compatibility.
 297:/usr/include/c++/11/bits/stl_vector.h **** #if !_GLIBCXX_INLINE_VERSION
 298:/usr/include/c++/11/bits/stl_vector.h ****       _Vector_base(size_t __n)
 299:/usr/include/c++/11/bits/stl_vector.h ****       : _M_impl()
 300:/usr/include/c++/11/bits/stl_vector.h ****       { _M_create_storage(__n); }
 301:/usr/include/c++/11/bits/stl_vector.h **** #endif
 302:/usr/include/c++/11/bits/stl_vector.h **** 
 303:/usr/include/c++/11/bits/stl_vector.h ****       _Vector_base(size_t __n, const allocator_type& __a)
 304:/usr/include/c++/11/bits/stl_vector.h ****       : _M_impl(__a)
 305:/usr/include/c++/11/bits/stl_vector.h ****       { _M_create_storage(__n); }
 306:/usr/include/c++/11/bits/stl_vector.h **** 
 307:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
 308:/usr/include/c++/11/bits/stl_vector.h ****       _Vector_base(_Vector_base&&) = default;
 309:/usr/include/c++/11/bits/stl_vector.h **** 
 310:/usr/include/c++/11/bits/stl_vector.h ****       // Kept for ABI compatibility.
 311:/usr/include/c++/11/bits/stl_vector.h **** # if !_GLIBCXX_INLINE_VERSION
 312:/usr/include/c++/11/bits/stl_vector.h ****       _Vector_base(_Tp_alloc_type&& __a) noexcept
 313:/usr/include/c++/11/bits/stl_vector.h ****       : _M_impl(std::move(__a)) { }
 314:/usr/include/c++/11/bits/stl_vector.h **** 
 315:/usr/include/c++/11/bits/stl_vector.h ****       _Vector_base(_Vector_base&& __x, const allocator_type& __a)
 316:/usr/include/c++/11/bits/stl_vector.h ****       : _M_impl(__a)
 317:/usr/include/c++/11/bits/stl_vector.h ****       {
 318:/usr/include/c++/11/bits/stl_vector.h **** 	if (__x.get_allocator() == __a)
 319:/usr/include/c++/11/bits/stl_vector.h **** 	  this->_M_impl._M_swap_data(__x._M_impl);
 320:/usr/include/c++/11/bits/stl_vector.h **** 	else
 321:/usr/include/c++/11/bits/stl_vector.h **** 	  {
 322:/usr/include/c++/11/bits/stl_vector.h **** 	    size_t __n = __x._M_impl._M_finish - __x._M_impl._M_start;
 323:/usr/include/c++/11/bits/stl_vector.h **** 	    _M_create_storage(__n);
 324:/usr/include/c++/11/bits/stl_vector.h **** 	  }
 325:/usr/include/c++/11/bits/stl_vector.h ****       }
 326:/usr/include/c++/11/bits/stl_vector.h **** # endif
 327:/usr/include/c++/11/bits/stl_vector.h **** 
 328:/usr/include/c++/11/bits/stl_vector.h ****       _Vector_base(const allocator_type& __a, _Vector_base&& __x)
 329:/usr/include/c++/11/bits/stl_vector.h ****       : _M_impl(_Tp_alloc_type(__a), std::move(__x._M_impl))
 330:/usr/include/c++/11/bits/stl_vector.h ****       { }
 331:/usr/include/c++/11/bits/stl_vector.h **** #endif
 332:/usr/include/c++/11/bits/stl_vector.h **** 
 333:/usr/include/c++/11/bits/stl_vector.h ****       ~_Vector_base() _GLIBCXX_NOEXCEPT
 334:/usr/include/c++/11/bits/stl_vector.h ****       {
 335:/usr/include/c++/11/bits/stl_vector.h **** 	_M_deallocate(_M_impl._M_start,
 336:/usr/include/c++/11/bits/stl_vector.h **** 		      _M_impl._M_end_of_storage - _M_impl._M_start);
 337:/usr/include/c++/11/bits/stl_vector.h ****       }
 338:/usr/include/c++/11/bits/stl_vector.h **** 
 339:/usr/include/c++/11/bits/stl_vector.h ****     public:
 340:/usr/include/c++/11/bits/stl_vector.h ****       _Vector_impl _M_impl;
 341:/usr/include/c++/11/bits/stl_vector.h **** 
 342:/usr/include/c++/11/bits/stl_vector.h ****       pointer
 343:/usr/include/c++/11/bits/stl_vector.h ****       _M_allocate(size_t __n)
 344:/usr/include/c++/11/bits/stl_vector.h ****       {
 345:/usr/include/c++/11/bits/stl_vector.h **** 	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 346:/usr/include/c++/11/bits/stl_vector.h **** 	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 347:/usr/include/c++/11/bits/stl_vector.h ****       }
 348:/usr/include/c++/11/bits/stl_vector.h **** 
 349:/usr/include/c++/11/bits/stl_vector.h ****       void
 350:/usr/include/c++/11/bits/stl_vector.h ****       _M_deallocate(pointer __p, size_t __n)
 351:/usr/include/c++/11/bits/stl_vector.h ****       {
 352:/usr/include/c++/11/bits/stl_vector.h **** 	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 353:/usr/include/c++/11/bits/stl_vector.h **** 	if (__p)
 354:/usr/include/c++/11/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 355:/usr/include/c++/11/bits/stl_vector.h ****       }
 356:/usr/include/c++/11/bits/stl_vector.h **** 
 357:/usr/include/c++/11/bits/stl_vector.h ****     protected:
 358:/usr/include/c++/11/bits/stl_vector.h ****       void
 359:/usr/include/c++/11/bits/stl_vector.h ****       _M_create_storage(size_t __n)
 360:/usr/include/c++/11/bits/stl_vector.h ****       {
 361:/usr/include/c++/11/bits/stl_vector.h **** 	this->_M_impl._M_start = this->_M_allocate(__n);
 362:/usr/include/c++/11/bits/stl_vector.h **** 	this->_M_impl._M_finish = this->_M_impl._M_start;
 363:/usr/include/c++/11/bits/stl_vector.h **** 	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 364:/usr/include/c++/11/bits/stl_vector.h ****       }
 365:/usr/include/c++/11/bits/stl_vector.h ****     };
 366:/usr/include/c++/11/bits/stl_vector.h **** 
 367:/usr/include/c++/11/bits/stl_vector.h ****   /**
 368:/usr/include/c++/11/bits/stl_vector.h ****    *  @brief A standard container which offers fixed time access to
 369:/usr/include/c++/11/bits/stl_vector.h ****    *  individual elements in any order.
 370:/usr/include/c++/11/bits/stl_vector.h ****    *
 371:/usr/include/c++/11/bits/stl_vector.h ****    *  @ingroup sequences
 372:/usr/include/c++/11/bits/stl_vector.h ****    *
 373:/usr/include/c++/11/bits/stl_vector.h ****    *  @tparam _Tp  Type of element.
 374:/usr/include/c++/11/bits/stl_vector.h ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_Tp>.
 375:/usr/include/c++/11/bits/stl_vector.h ****    *
 376:/usr/include/c++/11/bits/stl_vector.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
 377:/usr/include/c++/11/bits/stl_vector.h ****    *  <a href="tables.html#66">reversible container</a>, and a
 378:/usr/include/c++/11/bits/stl_vector.h ****    *  <a href="tables.html#67">sequence</a>, including the
 379:/usr/include/c++/11/bits/stl_vector.h ****    *  <a href="tables.html#68">optional sequence requirements</a> with the
 380:/usr/include/c++/11/bits/stl_vector.h ****    *  %exception of @c push_front and @c pop_front.
 381:/usr/include/c++/11/bits/stl_vector.h ****    *
 382:/usr/include/c++/11/bits/stl_vector.h ****    *  In some terminology a %vector can be described as a dynamic
 383:/usr/include/c++/11/bits/stl_vector.h ****    *  C-style array, it offers fast and efficient access to individual
 384:/usr/include/c++/11/bits/stl_vector.h ****    *  elements in any order and saves the user from worrying about
 385:/usr/include/c++/11/bits/stl_vector.h ****    *  memory and size allocation.  Subscripting ( @c [] ) access is
 386:/usr/include/c++/11/bits/stl_vector.h ****    *  also provided as with C-style arrays.
 387:/usr/include/c++/11/bits/stl_vector.h ****   */
 388:/usr/include/c++/11/bits/stl_vector.h ****   template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
 389:/usr/include/c++/11/bits/stl_vector.h ****     class vector : protected _Vector_base<_Tp, _Alloc>
 390:/usr/include/c++/11/bits/stl_vector.h ****     {
 391:/usr/include/c++/11/bits/stl_vector.h **** #ifdef _GLIBCXX_CONCEPT_CHECKS
 392:/usr/include/c++/11/bits/stl_vector.h ****       // Concept requirements.
 393:/usr/include/c++/11/bits/stl_vector.h ****       typedef typename _Alloc::value_type		_Alloc_value_type;
 394:/usr/include/c++/11/bits/stl_vector.h **** # if __cplusplus < 201103L
 395:/usr/include/c++/11/bits/stl_vector.h ****       __glibcxx_class_requires(_Tp, _SGIAssignableConcept)
 396:/usr/include/c++/11/bits/stl_vector.h **** # endif
 397:/usr/include/c++/11/bits/stl_vector.h ****       __glibcxx_class_requires2(_Tp, _Alloc_value_type, _SameTypeConcept)
 398:/usr/include/c++/11/bits/stl_vector.h **** #endif
 399:/usr/include/c++/11/bits/stl_vector.h **** 
 400:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
 401:/usr/include/c++/11/bits/stl_vector.h ****       static_assert(is_same<typename remove_cv<_Tp>::type, _Tp>::value,
 402:/usr/include/c++/11/bits/stl_vector.h **** 	  "std::vector must have a non-const, non-volatile value_type");
 403:/usr/include/c++/11/bits/stl_vector.h **** # if __cplusplus > 201703L || defined __STRICT_ANSI__
 404:/usr/include/c++/11/bits/stl_vector.h ****       static_assert(is_same<typename _Alloc::value_type, _Tp>::value,
 405:/usr/include/c++/11/bits/stl_vector.h **** 	  "std::vector must have the same value_type as its allocator");
 406:/usr/include/c++/11/bits/stl_vector.h **** # endif
 407:/usr/include/c++/11/bits/stl_vector.h **** #endif
 408:/usr/include/c++/11/bits/stl_vector.h **** 
 409:/usr/include/c++/11/bits/stl_vector.h ****       typedef _Vector_base<_Tp, _Alloc>			_Base;
 410:/usr/include/c++/11/bits/stl_vector.h ****       typedef typename _Base::_Tp_alloc_type		_Tp_alloc_type;
 411:/usr/include/c++/11/bits/stl_vector.h ****       typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type>	_Alloc_traits;
 412:/usr/include/c++/11/bits/stl_vector.h **** 
 413:/usr/include/c++/11/bits/stl_vector.h ****     public:
 414:/usr/include/c++/11/bits/stl_vector.h ****       typedef _Tp					value_type;
 415:/usr/include/c++/11/bits/stl_vector.h ****       typedef typename _Base::pointer			pointer;
 416:/usr/include/c++/11/bits/stl_vector.h ****       typedef typename _Alloc_traits::const_pointer	const_pointer;
 417:/usr/include/c++/11/bits/stl_vector.h ****       typedef typename _Alloc_traits::reference		reference;
 418:/usr/include/c++/11/bits/stl_vector.h ****       typedef typename _Alloc_traits::const_reference	const_reference;
 419:/usr/include/c++/11/bits/stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<pointer, vector> iterator;
 420:/usr/include/c++/11/bits/stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<const_pointer, vector>
 421:/usr/include/c++/11/bits/stl_vector.h ****       const_iterator;
 422:/usr/include/c++/11/bits/stl_vector.h ****       typedef std::reverse_iterator<const_iterator>	const_reverse_iterator;
 423:/usr/include/c++/11/bits/stl_vector.h ****       typedef std::reverse_iterator<iterator>		reverse_iterator;
 424:/usr/include/c++/11/bits/stl_vector.h ****       typedef size_t					size_type;
 425:/usr/include/c++/11/bits/stl_vector.h ****       typedef ptrdiff_t					difference_type;
 426:/usr/include/c++/11/bits/stl_vector.h ****       typedef _Alloc					allocator_type;
 427:/usr/include/c++/11/bits/stl_vector.h **** 
 428:/usr/include/c++/11/bits/stl_vector.h ****     private:
 429:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
 430:/usr/include/c++/11/bits/stl_vector.h ****       static constexpr bool
 431:/usr/include/c++/11/bits/stl_vector.h ****       _S_nothrow_relocate(true_type)
 432:/usr/include/c++/11/bits/stl_vector.h ****       {
 433:/usr/include/c++/11/bits/stl_vector.h **** 	return noexcept(std::__relocate_a(std::declval<pointer>(),
 434:/usr/include/c++/11/bits/stl_vector.h **** 					  std::declval<pointer>(),
 435:/usr/include/c++/11/bits/stl_vector.h **** 					  std::declval<pointer>(),
 436:/usr/include/c++/11/bits/stl_vector.h **** 					  std::declval<_Tp_alloc_type&>()));
 437:/usr/include/c++/11/bits/stl_vector.h ****       }
 438:/usr/include/c++/11/bits/stl_vector.h **** 
 439:/usr/include/c++/11/bits/stl_vector.h ****       static constexpr bool
 440:/usr/include/c++/11/bits/stl_vector.h ****       _S_nothrow_relocate(false_type)
 441:/usr/include/c++/11/bits/stl_vector.h ****       { return false; }
 442:/usr/include/c++/11/bits/stl_vector.h **** 
 443:/usr/include/c++/11/bits/stl_vector.h ****       static constexpr bool
 444:/usr/include/c++/11/bits/stl_vector.h ****       _S_use_relocate()
 445:/usr/include/c++/11/bits/stl_vector.h ****       {
 446:/usr/include/c++/11/bits/stl_vector.h **** 	// Instantiating std::__relocate_a might cause an error outside the
 447:/usr/include/c++/11/bits/stl_vector.h **** 	// immediate context (in __relocate_object_a's noexcept-specifier),
 448:/usr/include/c++/11/bits/stl_vector.h **** 	// so only do it if we know the type can be move-inserted into *this.
 449:/usr/include/c++/11/bits/stl_vector.h **** 	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 450:/usr/include/c++/11/bits/stl_vector.h ****       }
 451:/usr/include/c++/11/bits/stl_vector.h **** 
 452:/usr/include/c++/11/bits/stl_vector.h ****       static pointer
 453:/usr/include/c++/11/bits/stl_vector.h ****       _S_do_relocate(pointer __first, pointer __last, pointer __result,
 454:/usr/include/c++/11/bits/stl_vector.h **** 		     _Tp_alloc_type& __alloc, true_type) noexcept
 455:/usr/include/c++/11/bits/stl_vector.h ****       {
 456:/usr/include/c++/11/bits/stl_vector.h **** 	return std::__relocate_a(__first, __last, __result, __alloc);
 457:/usr/include/c++/11/bits/stl_vector.h ****       }
 458:/usr/include/c++/11/bits/stl_vector.h **** 
 459:/usr/include/c++/11/bits/stl_vector.h ****       static pointer
 460:/usr/include/c++/11/bits/stl_vector.h ****       _S_do_relocate(pointer, pointer, pointer __result,
 461:/usr/include/c++/11/bits/stl_vector.h **** 		     _Tp_alloc_type&, false_type) noexcept
 462:/usr/include/c++/11/bits/stl_vector.h ****       { return __result; }
 463:/usr/include/c++/11/bits/stl_vector.h **** 
 464:/usr/include/c++/11/bits/stl_vector.h ****       static pointer
 465:/usr/include/c++/11/bits/stl_vector.h ****       _S_relocate(pointer __first, pointer __last, pointer __result,
 466:/usr/include/c++/11/bits/stl_vector.h **** 		  _Tp_alloc_type& __alloc) noexcept
 467:/usr/include/c++/11/bits/stl_vector.h ****       {
 468:/usr/include/c++/11/bits/stl_vector.h **** 	using __do_it = __bool_constant<_S_use_relocate()>;
 469:/usr/include/c++/11/bits/stl_vector.h **** 	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 470:/usr/include/c++/11/bits/stl_vector.h ****       }
 471:/usr/include/c++/11/bits/stl_vector.h **** #endif // C++11
 472:/usr/include/c++/11/bits/stl_vector.h **** 
 473:/usr/include/c++/11/bits/stl_vector.h ****     protected:
 474:/usr/include/c++/11/bits/stl_vector.h ****       using _Base::_M_allocate;
 475:/usr/include/c++/11/bits/stl_vector.h ****       using _Base::_M_deallocate;
 476:/usr/include/c++/11/bits/stl_vector.h ****       using _Base::_M_impl;
 477:/usr/include/c++/11/bits/stl_vector.h ****       using _Base::_M_get_Tp_allocator;
 478:/usr/include/c++/11/bits/stl_vector.h **** 
 479:/usr/include/c++/11/bits/stl_vector.h ****     public:
 480:/usr/include/c++/11/bits/stl_vector.h ****       // [23.2.4.1] construct/copy/destroy
 481:/usr/include/c++/11/bits/stl_vector.h ****       // (assign() and get_allocator() are also listed in this section)
 482:/usr/include/c++/11/bits/stl_vector.h **** 
 483:/usr/include/c++/11/bits/stl_vector.h ****       /**
 484:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Creates a %vector with no elements.
 485:/usr/include/c++/11/bits/stl_vector.h ****        */
 486:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
 487:/usr/include/c++/11/bits/stl_vector.h ****       vector() = default;
 488:/usr/include/c++/11/bits/stl_vector.h **** #else
 489:/usr/include/c++/11/bits/stl_vector.h ****       vector() { }
 490:/usr/include/c++/11/bits/stl_vector.h **** #endif
 491:/usr/include/c++/11/bits/stl_vector.h **** 
 492:/usr/include/c++/11/bits/stl_vector.h ****       /**
 493:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Creates a %vector with no elements.
 494:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __a  An allocator object.
 495:/usr/include/c++/11/bits/stl_vector.h ****        */
 496:/usr/include/c++/11/bits/stl_vector.h ****       explicit
 497:/usr/include/c++/11/bits/stl_vector.h ****       vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 498:/usr/include/c++/11/bits/stl_vector.h ****       : _Base(__a) { }
 499:/usr/include/c++/11/bits/stl_vector.h **** 
 500:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
 501:/usr/include/c++/11/bits/stl_vector.h ****       /**
 502:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Creates a %vector with default constructed elements.
 503:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 504:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __a  An allocator.
 505:/usr/include/c++/11/bits/stl_vector.h ****        *
 506:/usr/include/c++/11/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n default
 507:/usr/include/c++/11/bits/stl_vector.h ****        *  constructed elements.
 508:/usr/include/c++/11/bits/stl_vector.h ****        */
 509:/usr/include/c++/11/bits/stl_vector.h ****       explicit
 510:/usr/include/c++/11/bits/stl_vector.h ****       vector(size_type __n, const allocator_type& __a = allocator_type())
 511:/usr/include/c++/11/bits/stl_vector.h ****       : _Base(_S_check_init_len(__n, __a), __a)
 512:/usr/include/c++/11/bits/stl_vector.h ****       { _M_default_initialize(__n); }
 513:/usr/include/c++/11/bits/stl_vector.h **** 
 514:/usr/include/c++/11/bits/stl_vector.h ****       /**
 515:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 516:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 517:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __value  An element to copy.
 518:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __a  An allocator.
 519:/usr/include/c++/11/bits/stl_vector.h ****        *
 520:/usr/include/c++/11/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n copies of @a __value.
 521:/usr/include/c++/11/bits/stl_vector.h ****        */
 522:/usr/include/c++/11/bits/stl_vector.h ****       vector(size_type __n, const value_type& __value,
 523:/usr/include/c++/11/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 524:/usr/include/c++/11/bits/stl_vector.h ****       : _Base(_S_check_init_len(__n, __a), __a)
 525:/usr/include/c++/11/bits/stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 526:/usr/include/c++/11/bits/stl_vector.h **** #else
 527:/usr/include/c++/11/bits/stl_vector.h ****       /**
 528:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 529:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 530:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __value  An element to copy.
 531:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __a  An allocator.
 532:/usr/include/c++/11/bits/stl_vector.h ****        *
 533:/usr/include/c++/11/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n copies of @a __value.
 534:/usr/include/c++/11/bits/stl_vector.h ****        */
 535:/usr/include/c++/11/bits/stl_vector.h ****       explicit
 536:/usr/include/c++/11/bits/stl_vector.h ****       vector(size_type __n, const value_type& __value = value_type(),
 537:/usr/include/c++/11/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 538:/usr/include/c++/11/bits/stl_vector.h ****       : _Base(_S_check_init_len(__n, __a), __a)
 539:/usr/include/c++/11/bits/stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 540:/usr/include/c++/11/bits/stl_vector.h **** #endif
 541:/usr/include/c++/11/bits/stl_vector.h **** 
 542:/usr/include/c++/11/bits/stl_vector.h ****       /**
 543:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  %Vector copy constructor.
 544:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 545:/usr/include/c++/11/bits/stl_vector.h ****        *
 546:/usr/include/c++/11/bits/stl_vector.h ****        *  All the elements of @a __x are copied, but any unused capacity in
 547:/usr/include/c++/11/bits/stl_vector.h ****        *  @a __x  will not be copied
 548:/usr/include/c++/11/bits/stl_vector.h ****        *  (i.e. capacity() == size() in the new %vector).
 549:/usr/include/c++/11/bits/stl_vector.h ****        *
 550:/usr/include/c++/11/bits/stl_vector.h ****        *  The newly-created %vector uses a copy of the allocator object used
 551:/usr/include/c++/11/bits/stl_vector.h ****        *  by @a __x (unless the allocator traits dictate a different object).
 552:/usr/include/c++/11/bits/stl_vector.h ****        */
 553:/usr/include/c++/11/bits/stl_vector.h ****       vector(const vector& __x)
 554:/usr/include/c++/11/bits/stl_vector.h ****       : _Base(__x.size(),
 555:/usr/include/c++/11/bits/stl_vector.h **** 	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 556:/usr/include/c++/11/bits/stl_vector.h ****       {
 557:/usr/include/c++/11/bits/stl_vector.h **** 	this->_M_impl._M_finish =
 558:/usr/include/c++/11/bits/stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 559:/usr/include/c++/11/bits/stl_vector.h **** 				      this->_M_impl._M_start,
 560:/usr/include/c++/11/bits/stl_vector.h **** 				      _M_get_Tp_allocator());
 561:/usr/include/c++/11/bits/stl_vector.h ****       }
 562:/usr/include/c++/11/bits/stl_vector.h **** 
 563:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
 564:/usr/include/c++/11/bits/stl_vector.h ****       /**
 565:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  %Vector move constructor.
 566:/usr/include/c++/11/bits/stl_vector.h ****        *
 567:/usr/include/c++/11/bits/stl_vector.h ****        *  The newly-created %vector contains the exact contents of the
 568:/usr/include/c++/11/bits/stl_vector.h ****        *  moved instance.
 569:/usr/include/c++/11/bits/stl_vector.h ****        *  The contents of the moved instance are a valid, but unspecified
 570:/usr/include/c++/11/bits/stl_vector.h ****        *  %vector.
 571:/usr/include/c++/11/bits/stl_vector.h ****        */
 572:/usr/include/c++/11/bits/stl_vector.h ****       vector(vector&&) noexcept = default;
 573:/usr/include/c++/11/bits/stl_vector.h **** 
 574:/usr/include/c++/11/bits/stl_vector.h ****       /// Copy constructor with alternative allocator
 575:/usr/include/c++/11/bits/stl_vector.h ****       vector(const vector& __x, const allocator_type& __a)
 576:/usr/include/c++/11/bits/stl_vector.h ****       : _Base(__x.size(), __a)
 577:/usr/include/c++/11/bits/stl_vector.h ****       {
 578:/usr/include/c++/11/bits/stl_vector.h **** 	this->_M_impl._M_finish =
 579:/usr/include/c++/11/bits/stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 580:/usr/include/c++/11/bits/stl_vector.h **** 				      this->_M_impl._M_start,
 581:/usr/include/c++/11/bits/stl_vector.h **** 				      _M_get_Tp_allocator());
 582:/usr/include/c++/11/bits/stl_vector.h ****       }
 583:/usr/include/c++/11/bits/stl_vector.h **** 
 584:/usr/include/c++/11/bits/stl_vector.h ****     private:
 585:/usr/include/c++/11/bits/stl_vector.h ****       vector(vector&& __rv, const allocator_type& __m, true_type) noexcept
 586:/usr/include/c++/11/bits/stl_vector.h ****       : _Base(__m, std::move(__rv))
 587:/usr/include/c++/11/bits/stl_vector.h ****       { }
 588:/usr/include/c++/11/bits/stl_vector.h **** 
 589:/usr/include/c++/11/bits/stl_vector.h ****       vector(vector&& __rv, const allocator_type& __m, false_type)
 590:/usr/include/c++/11/bits/stl_vector.h ****       : _Base(__m)
 591:/usr/include/c++/11/bits/stl_vector.h ****       {
 592:/usr/include/c++/11/bits/stl_vector.h **** 	if (__rv.get_allocator() == __m)
 593:/usr/include/c++/11/bits/stl_vector.h **** 	  this->_M_impl._M_swap_data(__rv._M_impl);
 594:/usr/include/c++/11/bits/stl_vector.h **** 	else if (!__rv.empty())
 595:/usr/include/c++/11/bits/stl_vector.h **** 	  {
 596:/usr/include/c++/11/bits/stl_vector.h **** 	    this->_M_create_storage(__rv.size());
 597:/usr/include/c++/11/bits/stl_vector.h **** 	    this->_M_impl._M_finish =
 598:/usr/include/c++/11/bits/stl_vector.h **** 	      std::__uninitialized_move_a(__rv.begin(), __rv.end(),
 599:/usr/include/c++/11/bits/stl_vector.h **** 					  this->_M_impl._M_start,
 600:/usr/include/c++/11/bits/stl_vector.h **** 					  _M_get_Tp_allocator());
 601:/usr/include/c++/11/bits/stl_vector.h **** 	    __rv.clear();
 602:/usr/include/c++/11/bits/stl_vector.h **** 	  }
 603:/usr/include/c++/11/bits/stl_vector.h ****       }
 604:/usr/include/c++/11/bits/stl_vector.h **** 
 605:/usr/include/c++/11/bits/stl_vector.h ****     public:
 606:/usr/include/c++/11/bits/stl_vector.h ****       /// Move constructor with alternative allocator
 607:/usr/include/c++/11/bits/stl_vector.h ****       vector(vector&& __rv, const allocator_type& __m)
 608:/usr/include/c++/11/bits/stl_vector.h ****       noexcept( noexcept(
 609:/usr/include/c++/11/bits/stl_vector.h **** 	vector(std::declval<vector&&>(), std::declval<const allocator_type&>(),
 610:/usr/include/c++/11/bits/stl_vector.h **** 	       std::declval<typename _Alloc_traits::is_always_equal>())) )
 611:/usr/include/c++/11/bits/stl_vector.h ****       : vector(std::move(__rv), __m, typename _Alloc_traits::is_always_equal{})
 612:/usr/include/c++/11/bits/stl_vector.h ****       { }
 613:/usr/include/c++/11/bits/stl_vector.h **** 
 614:/usr/include/c++/11/bits/stl_vector.h ****       /**
 615:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Builds a %vector from an initializer list.
 616:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 617:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __a  An allocator.
 618:/usr/include/c++/11/bits/stl_vector.h ****        *
 619:/usr/include/c++/11/bits/stl_vector.h ****        *  Create a %vector consisting of copies of the elements in the
 620:/usr/include/c++/11/bits/stl_vector.h ****        *  initializer_list @a __l.
 621:/usr/include/c++/11/bits/stl_vector.h ****        *
 622:/usr/include/c++/11/bits/stl_vector.h ****        *  This will call the element type's copy constructor N times
 623:/usr/include/c++/11/bits/stl_vector.h ****        *  (where N is @a __l.size()) and do no memory reallocation.
 624:/usr/include/c++/11/bits/stl_vector.h ****        */
 625:/usr/include/c++/11/bits/stl_vector.h ****       vector(initializer_list<value_type> __l,
 626:/usr/include/c++/11/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 627:/usr/include/c++/11/bits/stl_vector.h ****       : _Base(__a)
 628:/usr/include/c++/11/bits/stl_vector.h ****       {
 629:/usr/include/c++/11/bits/stl_vector.h **** 	_M_range_initialize(__l.begin(), __l.end(),
 630:/usr/include/c++/11/bits/stl_vector.h **** 			    random_access_iterator_tag());
 631:/usr/include/c++/11/bits/stl_vector.h ****       }
 632:/usr/include/c++/11/bits/stl_vector.h **** #endif
 633:/usr/include/c++/11/bits/stl_vector.h **** 
 634:/usr/include/c++/11/bits/stl_vector.h ****       /**
 635:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Builds a %vector from a range.
 636:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __first  An input iterator.
 637:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __last  An input iterator.
 638:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __a  An allocator.
 639:/usr/include/c++/11/bits/stl_vector.h ****        *
 640:/usr/include/c++/11/bits/stl_vector.h ****        *  Create a %vector consisting of copies of the elements from
 641:/usr/include/c++/11/bits/stl_vector.h ****        *  [first,last).
 642:/usr/include/c++/11/bits/stl_vector.h ****        *
 643:/usr/include/c++/11/bits/stl_vector.h ****        *  If the iterators are forward, bidirectional, or
 644:/usr/include/c++/11/bits/stl_vector.h ****        *  random-access, then this will call the elements' copy
 645:/usr/include/c++/11/bits/stl_vector.h ****        *  constructor N times (where N is distance(first,last)) and do
 646:/usr/include/c++/11/bits/stl_vector.h ****        *  no memory reallocation.  But if only input iterators are
 647:/usr/include/c++/11/bits/stl_vector.h ****        *  used, then this will do at most 2N calls to the copy
 648:/usr/include/c++/11/bits/stl_vector.h ****        *  constructor, and logN memory reallocations.
 649:/usr/include/c++/11/bits/stl_vector.h ****        */
 650:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
 651:/usr/include/c++/11/bits/stl_vector.h ****       template<typename _InputIterator,
 652:/usr/include/c++/11/bits/stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 653:/usr/include/c++/11/bits/stl_vector.h **** 	vector(_InputIterator __first, _InputIterator __last,
 654:/usr/include/c++/11/bits/stl_vector.h **** 	       const allocator_type& __a = allocator_type())
 655:/usr/include/c++/11/bits/stl_vector.h **** 	: _Base(__a)
 656:/usr/include/c++/11/bits/stl_vector.h **** 	{
 657:/usr/include/c++/11/bits/stl_vector.h **** 	  _M_range_initialize(__first, __last,
 658:/usr/include/c++/11/bits/stl_vector.h **** 			      std::__iterator_category(__first));
 659:/usr/include/c++/11/bits/stl_vector.h **** 	}
 660:/usr/include/c++/11/bits/stl_vector.h **** #else
 661:/usr/include/c++/11/bits/stl_vector.h ****       template<typename _InputIterator>
 662:/usr/include/c++/11/bits/stl_vector.h **** 	vector(_InputIterator __first, _InputIterator __last,
 663:/usr/include/c++/11/bits/stl_vector.h **** 	       const allocator_type& __a = allocator_type())
 664:/usr/include/c++/11/bits/stl_vector.h **** 	: _Base(__a)
 665:/usr/include/c++/11/bits/stl_vector.h **** 	{
 666:/usr/include/c++/11/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 667:/usr/include/c++/11/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 668:/usr/include/c++/11/bits/stl_vector.h **** 	  _M_initialize_dispatch(__first, __last, _Integral());
 669:/usr/include/c++/11/bits/stl_vector.h **** 	}
 670:/usr/include/c++/11/bits/stl_vector.h **** #endif
 671:/usr/include/c++/11/bits/stl_vector.h **** 
 672:/usr/include/c++/11/bits/stl_vector.h ****       /**
 673:/usr/include/c++/11/bits/stl_vector.h ****        *  The dtor only erases the elements, and note that if the
 674:/usr/include/c++/11/bits/stl_vector.h ****        *  elements themselves are pointers, the pointed-to memory is
 675:/usr/include/c++/11/bits/stl_vector.h ****        *  not touched in any way.  Managing the pointer is the user's
 676:/usr/include/c++/11/bits/stl_vector.h ****        *  responsibility.
 677:/usr/include/c++/11/bits/stl_vector.h ****        */
 678:/usr/include/c++/11/bits/stl_vector.h ****       ~vector() _GLIBCXX_NOEXCEPT
 573              		.loc 5 678 7
 574              		.cfi_startproc
 575              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 576              		.cfi_lsda 0x1b,.LLSDA945
 577 0000 F30F1EFA 		endbr64
 578 0004 55       		pushq	%rbp
 579              		.cfi_def_cfa_offset 16
 580              		.cfi_offset 6, -16
 581 0005 4889E5   		movq	%rsp, %rbp
 582              		.cfi_def_cfa_register 6
 583 0008 53       		pushq	%rbx
 584 0009 4883EC18 		subq	$24, %rsp
 585              		.cfi_offset 3, -24
 586 000d 48897DE8 		movq	%rdi, -24(%rbp)
 587              	.LBB5:
 679:/usr/include/c++/11/bits/stl_vector.h ****       {
 680:/usr/include/c++/11/bits/stl_vector.h **** 	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 681:/usr/include/c++/11/bits/stl_vector.h **** 		      _M_get_Tp_allocator());
 588              		.loc 5 681 28
 589 0011 488B45E8 		movq	-24(%rbp), %rax
 590 0015 4889C7   		movq	%rax, %rdi
 591 0018 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE19_
 591      00
 592 001d 4889C2   		movq	%rax, %rdx
 680:/usr/include/c++/11/bits/stl_vector.h **** 		      _M_get_Tp_allocator());
 593              		.loc 5 680 15
 594 0020 488B45E8 		movq	-24(%rbp), %rax
 595 0024 488B4808 		movq	8(%rax), %rcx
 596 0028 488B45E8 		movq	-24(%rbp), %rax
 597 002c 488B00   		movq	(%rax), %rax
 598 002f 4889CE   		movq	%rcx, %rsi
 599 0032 4889C7   		movq	%rax, %rdi
 600              	.LEHB17:
 601 0035 E8000000 		call	_ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_EvT_S9_RSaIT0
 601      00
 602              	.LEHE17:
 682:/usr/include/c++/11/bits/stl_vector.h **** 	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
 683:/usr/include/c++/11/bits/stl_vector.h ****       }
 603              		.loc 5 683 7
 604 003a 488B45E8 		movq	-24(%rbp), %rax
 605 003e 4889C7   		movq	%rax, %rdi
 606              	.LEHB18:
 607 0041 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2E
 607      00
 608              	.LEHE18:
 609              	.LBE5:
 610 0046 EB1E     		jmp	.L33
 611              	.L32:
 612 0048 F30F1EFA 		endbr64
 613              	.LBB6:
 614 004c 4889C3   		movq	%rax, %rbx
 615 004f 488B45E8 		movq	-24(%rbp), %rax
 616 0053 4889C7   		movq	%rax, %rdi
 617 0056 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2E
 617      00
 618 005b 4889D8   		movq	%rbx, %rax
 619 005e 4889C7   		movq	%rax, %rdi
 620              	.LEHB19:
 621 0061 E8000000 		call	_Unwind_Resume@PLT
 621      00
 622              	.LEHE19:
 623              	.L33:
 624              	.LBE6:
 625 0066 488B5DF8 		movq	-8(%rbp), %rbx
 626 006a C9       		leave
 627              		.cfi_def_cfa 7, 8
 628 006b C3       		ret
 629              		.cfi_endproc
 630              	.LFE945:
 631              		.section	.gcc_except_table
 632              	.LLSDA945:
 633 0045 FF       		.byte	0xff
 634 0046 FF       		.byte	0xff
 635 0047 01       		.byte	0x1
 636 0048 0C       		.uleb128 .LLSDACSE945-.LLSDACSB945
 637              	.LLSDACSB945:
 638 0049 35       		.uleb128 .LEHB17-.LFB945
 639 004a 05       		.uleb128 .LEHE17-.LEHB17
 640 004b 48       		.uleb128 .L32-.LFB945
 641 004c 00       		.uleb128 0
 642 004d 41       		.uleb128 .LEHB18-.LFB945
 643 004e 05       		.uleb128 .LEHE18-.LEHB18
 644 004f 00       		.uleb128 0
 645 0050 00       		.uleb128 0
 646 0051 61       		.uleb128 .LEHB19-.LFB945
 647 0052 05       		.uleb128 .LEHE19-.LEHB19
 648 0053 00       		.uleb128 0
 649 0054 00       		.uleb128 0
 650              	.LLSDACSE945:
 651              		.section	.text._ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE
 653              		.weak	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED1Ev
 654              		.set	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED1Ev,_ZNSt
 655              		.section	.text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE9push_backERKS1_,"axG",@progbit
 656              		.align 2
 657              		.weak	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE9push_backERKS1_
 659              	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE9push_backERKS1_:
 660              	.LFB947:
 684:/usr/include/c++/11/bits/stl_vector.h **** 
 685:/usr/include/c++/11/bits/stl_vector.h ****       /**
 686:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  %Vector assignment operator.
 687:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 688:/usr/include/c++/11/bits/stl_vector.h ****        *
 689:/usr/include/c++/11/bits/stl_vector.h ****        *  All the elements of @a __x are copied, but any unused capacity in
 690:/usr/include/c++/11/bits/stl_vector.h ****        *  @a __x will not be copied.
 691:/usr/include/c++/11/bits/stl_vector.h ****        *
 692:/usr/include/c++/11/bits/stl_vector.h ****        *  Whether the allocator is copied depends on the allocator traits.
 693:/usr/include/c++/11/bits/stl_vector.h ****        */
 694:/usr/include/c++/11/bits/stl_vector.h ****       vector&
 695:/usr/include/c++/11/bits/stl_vector.h ****       operator=(const vector& __x);
 696:/usr/include/c++/11/bits/stl_vector.h **** 
 697:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
 698:/usr/include/c++/11/bits/stl_vector.h ****       /**
 699:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  %Vector move assignment operator.
 700:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 701:/usr/include/c++/11/bits/stl_vector.h ****        *
 702:/usr/include/c++/11/bits/stl_vector.h ****        *  The contents of @a __x are moved into this %vector (without copying,
 703:/usr/include/c++/11/bits/stl_vector.h ****        *  if the allocators permit it).
 704:/usr/include/c++/11/bits/stl_vector.h ****        *  Afterwards @a __x is a valid, but unspecified %vector.
 705:/usr/include/c++/11/bits/stl_vector.h ****        *
 706:/usr/include/c++/11/bits/stl_vector.h ****        *  Whether the allocator is moved depends on the allocator traits.
 707:/usr/include/c++/11/bits/stl_vector.h ****        */
 708:/usr/include/c++/11/bits/stl_vector.h ****       vector&
 709:/usr/include/c++/11/bits/stl_vector.h ****       operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 710:/usr/include/c++/11/bits/stl_vector.h ****       {
 711:/usr/include/c++/11/bits/stl_vector.h **** 	constexpr bool __move_storage =
 712:/usr/include/c++/11/bits/stl_vector.h **** 	  _Alloc_traits::_S_propagate_on_move_assign()
 713:/usr/include/c++/11/bits/stl_vector.h **** 	  || _Alloc_traits::_S_always_equal();
 714:/usr/include/c++/11/bits/stl_vector.h **** 	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 715:/usr/include/c++/11/bits/stl_vector.h **** 	return *this;
 716:/usr/include/c++/11/bits/stl_vector.h ****       }
 717:/usr/include/c++/11/bits/stl_vector.h **** 
 718:/usr/include/c++/11/bits/stl_vector.h ****       /**
 719:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  %Vector list assignment operator.
 720:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 721:/usr/include/c++/11/bits/stl_vector.h ****        *
 722:/usr/include/c++/11/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 723:/usr/include/c++/11/bits/stl_vector.h ****        *  initializer list @a __l.
 724:/usr/include/c++/11/bits/stl_vector.h ****        *
 725:/usr/include/c++/11/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 726:/usr/include/c++/11/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 727:/usr/include/c++/11/bits/stl_vector.h ****        *  of elements assigned.
 728:/usr/include/c++/11/bits/stl_vector.h ****        */
 729:/usr/include/c++/11/bits/stl_vector.h ****       vector&
 730:/usr/include/c++/11/bits/stl_vector.h ****       operator=(initializer_list<value_type> __l)
 731:/usr/include/c++/11/bits/stl_vector.h ****       {
 732:/usr/include/c++/11/bits/stl_vector.h **** 	this->_M_assign_aux(__l.begin(), __l.end(),
 733:/usr/include/c++/11/bits/stl_vector.h **** 			    random_access_iterator_tag());
 734:/usr/include/c++/11/bits/stl_vector.h **** 	return *this;
 735:/usr/include/c++/11/bits/stl_vector.h ****       }
 736:/usr/include/c++/11/bits/stl_vector.h **** #endif
 737:/usr/include/c++/11/bits/stl_vector.h **** 
 738:/usr/include/c++/11/bits/stl_vector.h ****       /**
 739:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Assigns a given value to a %vector.
 740:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __n  Number of elements to be assigned.
 741:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __val  Value to be assigned.
 742:/usr/include/c++/11/bits/stl_vector.h ****        *
 743:/usr/include/c++/11/bits/stl_vector.h ****        *  This function fills a %vector with @a __n copies of the given
 744:/usr/include/c++/11/bits/stl_vector.h ****        *  value.  Note that the assignment completely changes the
 745:/usr/include/c++/11/bits/stl_vector.h ****        *  %vector and that the resulting %vector's size is the same as
 746:/usr/include/c++/11/bits/stl_vector.h ****        *  the number of elements assigned.
 747:/usr/include/c++/11/bits/stl_vector.h ****        */
 748:/usr/include/c++/11/bits/stl_vector.h ****       void
 749:/usr/include/c++/11/bits/stl_vector.h ****       assign(size_type __n, const value_type& __val)
 750:/usr/include/c++/11/bits/stl_vector.h ****       { _M_fill_assign(__n, __val); }
 751:/usr/include/c++/11/bits/stl_vector.h **** 
 752:/usr/include/c++/11/bits/stl_vector.h ****       /**
 753:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Assigns a range to a %vector.
 754:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __first  An input iterator.
 755:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __last   An input iterator.
 756:/usr/include/c++/11/bits/stl_vector.h ****        *
 757:/usr/include/c++/11/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 758:/usr/include/c++/11/bits/stl_vector.h ****        *  range [__first,__last).
 759:/usr/include/c++/11/bits/stl_vector.h ****        *
 760:/usr/include/c++/11/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 761:/usr/include/c++/11/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 762:/usr/include/c++/11/bits/stl_vector.h ****        *  of elements assigned.
 763:/usr/include/c++/11/bits/stl_vector.h ****        */
 764:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
 765:/usr/include/c++/11/bits/stl_vector.h ****       template<typename _InputIterator,
 766:/usr/include/c++/11/bits/stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 767:/usr/include/c++/11/bits/stl_vector.h **** 	void
 768:/usr/include/c++/11/bits/stl_vector.h **** 	assign(_InputIterator __first, _InputIterator __last)
 769:/usr/include/c++/11/bits/stl_vector.h **** 	{ _M_assign_dispatch(__first, __last, __false_type()); }
 770:/usr/include/c++/11/bits/stl_vector.h **** #else
 771:/usr/include/c++/11/bits/stl_vector.h ****       template<typename _InputIterator>
 772:/usr/include/c++/11/bits/stl_vector.h **** 	void
 773:/usr/include/c++/11/bits/stl_vector.h **** 	assign(_InputIterator __first, _InputIterator __last)
 774:/usr/include/c++/11/bits/stl_vector.h **** 	{
 775:/usr/include/c++/11/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 776:/usr/include/c++/11/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 777:/usr/include/c++/11/bits/stl_vector.h **** 	  _M_assign_dispatch(__first, __last, _Integral());
 778:/usr/include/c++/11/bits/stl_vector.h **** 	}
 779:/usr/include/c++/11/bits/stl_vector.h **** #endif
 780:/usr/include/c++/11/bits/stl_vector.h **** 
 781:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
 782:/usr/include/c++/11/bits/stl_vector.h ****       /**
 783:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Assigns an initializer list to a %vector.
 784:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 785:/usr/include/c++/11/bits/stl_vector.h ****        *
 786:/usr/include/c++/11/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 787:/usr/include/c++/11/bits/stl_vector.h ****        *  initializer list @a __l.
 788:/usr/include/c++/11/bits/stl_vector.h ****        *
 789:/usr/include/c++/11/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 790:/usr/include/c++/11/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 791:/usr/include/c++/11/bits/stl_vector.h ****        *  of elements assigned.
 792:/usr/include/c++/11/bits/stl_vector.h ****        */
 793:/usr/include/c++/11/bits/stl_vector.h ****       void
 794:/usr/include/c++/11/bits/stl_vector.h ****       assign(initializer_list<value_type> __l)
 795:/usr/include/c++/11/bits/stl_vector.h ****       {
 796:/usr/include/c++/11/bits/stl_vector.h **** 	this->_M_assign_aux(__l.begin(), __l.end(),
 797:/usr/include/c++/11/bits/stl_vector.h **** 			    random_access_iterator_tag());
 798:/usr/include/c++/11/bits/stl_vector.h ****       }
 799:/usr/include/c++/11/bits/stl_vector.h **** #endif
 800:/usr/include/c++/11/bits/stl_vector.h **** 
 801:/usr/include/c++/11/bits/stl_vector.h ****       /// Get a copy of the memory allocation object.
 802:/usr/include/c++/11/bits/stl_vector.h ****       using _Base::get_allocator;
 803:/usr/include/c++/11/bits/stl_vector.h **** 
 804:/usr/include/c++/11/bits/stl_vector.h ****       // iterators
 805:/usr/include/c++/11/bits/stl_vector.h ****       /**
 806:/usr/include/c++/11/bits/stl_vector.h ****        *  Returns a read/write iterator that points to the first
 807:/usr/include/c++/11/bits/stl_vector.h ****        *  element in the %vector.  Iteration is done in ordinary
 808:/usr/include/c++/11/bits/stl_vector.h ****        *  element order.
 809:/usr/include/c++/11/bits/stl_vector.h ****        */
 810:/usr/include/c++/11/bits/stl_vector.h ****       iterator
 811:/usr/include/c++/11/bits/stl_vector.h ****       begin() _GLIBCXX_NOEXCEPT
 812:/usr/include/c++/11/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_start); }
 813:/usr/include/c++/11/bits/stl_vector.h **** 
 814:/usr/include/c++/11/bits/stl_vector.h ****       /**
 815:/usr/include/c++/11/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points to the
 816:/usr/include/c++/11/bits/stl_vector.h ****        *  first element in the %vector.  Iteration is done in ordinary
 817:/usr/include/c++/11/bits/stl_vector.h ****        *  element order.
 818:/usr/include/c++/11/bits/stl_vector.h ****        */
 819:/usr/include/c++/11/bits/stl_vector.h ****       const_iterator
 820:/usr/include/c++/11/bits/stl_vector.h ****       begin() const _GLIBCXX_NOEXCEPT
 821:/usr/include/c++/11/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 822:/usr/include/c++/11/bits/stl_vector.h **** 
 823:/usr/include/c++/11/bits/stl_vector.h ****       /**
 824:/usr/include/c++/11/bits/stl_vector.h ****        *  Returns a read/write iterator that points one past the last
 825:/usr/include/c++/11/bits/stl_vector.h ****        *  element in the %vector.  Iteration is done in ordinary
 826:/usr/include/c++/11/bits/stl_vector.h ****        *  element order.
 827:/usr/include/c++/11/bits/stl_vector.h ****        */
 828:/usr/include/c++/11/bits/stl_vector.h ****       iterator
 829:/usr/include/c++/11/bits/stl_vector.h ****       end() _GLIBCXX_NOEXCEPT
 830:/usr/include/c++/11/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 831:/usr/include/c++/11/bits/stl_vector.h **** 
 832:/usr/include/c++/11/bits/stl_vector.h ****       /**
 833:/usr/include/c++/11/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points one past
 834:/usr/include/c++/11/bits/stl_vector.h ****        *  the last element in the %vector.  Iteration is done in
 835:/usr/include/c++/11/bits/stl_vector.h ****        *  ordinary element order.
 836:/usr/include/c++/11/bits/stl_vector.h ****        */
 837:/usr/include/c++/11/bits/stl_vector.h ****       const_iterator
 838:/usr/include/c++/11/bits/stl_vector.h ****       end() const _GLIBCXX_NOEXCEPT
 839:/usr/include/c++/11/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 840:/usr/include/c++/11/bits/stl_vector.h **** 
 841:/usr/include/c++/11/bits/stl_vector.h ****       /**
 842:/usr/include/c++/11/bits/stl_vector.h ****        *  Returns a read/write reverse iterator that points to the
 843:/usr/include/c++/11/bits/stl_vector.h ****        *  last element in the %vector.  Iteration is done in reverse
 844:/usr/include/c++/11/bits/stl_vector.h ****        *  element order.
 845:/usr/include/c++/11/bits/stl_vector.h ****        */
 846:/usr/include/c++/11/bits/stl_vector.h ****       reverse_iterator
 847:/usr/include/c++/11/bits/stl_vector.h ****       rbegin() _GLIBCXX_NOEXCEPT
 848:/usr/include/c++/11/bits/stl_vector.h ****       { return reverse_iterator(end()); }
 849:/usr/include/c++/11/bits/stl_vector.h **** 
 850:/usr/include/c++/11/bits/stl_vector.h ****       /**
 851:/usr/include/c++/11/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 852:/usr/include/c++/11/bits/stl_vector.h ****        *  to the last element in the %vector.  Iteration is done in
 853:/usr/include/c++/11/bits/stl_vector.h ****        *  reverse element order.
 854:/usr/include/c++/11/bits/stl_vector.h ****        */
 855:/usr/include/c++/11/bits/stl_vector.h ****       const_reverse_iterator
 856:/usr/include/c++/11/bits/stl_vector.h ****       rbegin() const _GLIBCXX_NOEXCEPT
 857:/usr/include/c++/11/bits/stl_vector.h ****       { return const_reverse_iterator(end()); }
 858:/usr/include/c++/11/bits/stl_vector.h **** 
 859:/usr/include/c++/11/bits/stl_vector.h ****       /**
 860:/usr/include/c++/11/bits/stl_vector.h ****        *  Returns a read/write reverse iterator that points to one
 861:/usr/include/c++/11/bits/stl_vector.h ****        *  before the first element in the %vector.  Iteration is done
 862:/usr/include/c++/11/bits/stl_vector.h ****        *  in reverse element order.
 863:/usr/include/c++/11/bits/stl_vector.h ****        */
 864:/usr/include/c++/11/bits/stl_vector.h ****       reverse_iterator
 865:/usr/include/c++/11/bits/stl_vector.h ****       rend() _GLIBCXX_NOEXCEPT
 866:/usr/include/c++/11/bits/stl_vector.h ****       { return reverse_iterator(begin()); }
 867:/usr/include/c++/11/bits/stl_vector.h **** 
 868:/usr/include/c++/11/bits/stl_vector.h ****       /**
 869:/usr/include/c++/11/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 870:/usr/include/c++/11/bits/stl_vector.h ****        *  to one before the first element in the %vector.  Iteration
 871:/usr/include/c++/11/bits/stl_vector.h ****        *  is done in reverse element order.
 872:/usr/include/c++/11/bits/stl_vector.h ****        */
 873:/usr/include/c++/11/bits/stl_vector.h ****       const_reverse_iterator
 874:/usr/include/c++/11/bits/stl_vector.h ****       rend() const _GLIBCXX_NOEXCEPT
 875:/usr/include/c++/11/bits/stl_vector.h ****       { return const_reverse_iterator(begin()); }
 876:/usr/include/c++/11/bits/stl_vector.h **** 
 877:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
 878:/usr/include/c++/11/bits/stl_vector.h ****       /**
 879:/usr/include/c++/11/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points to the
 880:/usr/include/c++/11/bits/stl_vector.h ****        *  first element in the %vector.  Iteration is done in ordinary
 881:/usr/include/c++/11/bits/stl_vector.h ****        *  element order.
 882:/usr/include/c++/11/bits/stl_vector.h ****        */
 883:/usr/include/c++/11/bits/stl_vector.h ****       const_iterator
 884:/usr/include/c++/11/bits/stl_vector.h ****       cbegin() const noexcept
 885:/usr/include/c++/11/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 886:/usr/include/c++/11/bits/stl_vector.h **** 
 887:/usr/include/c++/11/bits/stl_vector.h ****       /**
 888:/usr/include/c++/11/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points one past
 889:/usr/include/c++/11/bits/stl_vector.h ****        *  the last element in the %vector.  Iteration is done in
 890:/usr/include/c++/11/bits/stl_vector.h ****        *  ordinary element order.
 891:/usr/include/c++/11/bits/stl_vector.h ****        */
 892:/usr/include/c++/11/bits/stl_vector.h ****       const_iterator
 893:/usr/include/c++/11/bits/stl_vector.h ****       cend() const noexcept
 894:/usr/include/c++/11/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 895:/usr/include/c++/11/bits/stl_vector.h **** 
 896:/usr/include/c++/11/bits/stl_vector.h ****       /**
 897:/usr/include/c++/11/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 898:/usr/include/c++/11/bits/stl_vector.h ****        *  to the last element in the %vector.  Iteration is done in
 899:/usr/include/c++/11/bits/stl_vector.h ****        *  reverse element order.
 900:/usr/include/c++/11/bits/stl_vector.h ****        */
 901:/usr/include/c++/11/bits/stl_vector.h ****       const_reverse_iterator
 902:/usr/include/c++/11/bits/stl_vector.h ****       crbegin() const noexcept
 903:/usr/include/c++/11/bits/stl_vector.h ****       { return const_reverse_iterator(end()); }
 904:/usr/include/c++/11/bits/stl_vector.h **** 
 905:/usr/include/c++/11/bits/stl_vector.h ****       /**
 906:/usr/include/c++/11/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 907:/usr/include/c++/11/bits/stl_vector.h ****        *  to one before the first element in the %vector.  Iteration
 908:/usr/include/c++/11/bits/stl_vector.h ****        *  is done in reverse element order.
 909:/usr/include/c++/11/bits/stl_vector.h ****        */
 910:/usr/include/c++/11/bits/stl_vector.h ****       const_reverse_iterator
 911:/usr/include/c++/11/bits/stl_vector.h ****       crend() const noexcept
 912:/usr/include/c++/11/bits/stl_vector.h ****       { return const_reverse_iterator(begin()); }
 913:/usr/include/c++/11/bits/stl_vector.h **** #endif
 914:/usr/include/c++/11/bits/stl_vector.h **** 
 915:/usr/include/c++/11/bits/stl_vector.h ****       // [23.2.4.2] capacity
 916:/usr/include/c++/11/bits/stl_vector.h ****       /**  Returns the number of elements in the %vector.  */
 917:/usr/include/c++/11/bits/stl_vector.h ****       size_type
 918:/usr/include/c++/11/bits/stl_vector.h ****       size() const _GLIBCXX_NOEXCEPT
 919:/usr/include/c++/11/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 920:/usr/include/c++/11/bits/stl_vector.h **** 
 921:/usr/include/c++/11/bits/stl_vector.h ****       /**  Returns the size() of the largest possible %vector.  */
 922:/usr/include/c++/11/bits/stl_vector.h ****       size_type
 923:/usr/include/c++/11/bits/stl_vector.h ****       max_size() const _GLIBCXX_NOEXCEPT
 924:/usr/include/c++/11/bits/stl_vector.h ****       { return _S_max_size(_M_get_Tp_allocator()); }
 925:/usr/include/c++/11/bits/stl_vector.h **** 
 926:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
 927:/usr/include/c++/11/bits/stl_vector.h ****       /**
 928:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 929:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __new_size  Number of elements the %vector should contain.
 930:/usr/include/c++/11/bits/stl_vector.h ****        *
 931:/usr/include/c++/11/bits/stl_vector.h ****        *  This function will %resize the %vector to the specified
 932:/usr/include/c++/11/bits/stl_vector.h ****        *  number of elements.  If the number is smaller than the
 933:/usr/include/c++/11/bits/stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 934:/usr/include/c++/11/bits/stl_vector.h ****        *  default constructed elements are appended.
 935:/usr/include/c++/11/bits/stl_vector.h ****        */
 936:/usr/include/c++/11/bits/stl_vector.h ****       void
 937:/usr/include/c++/11/bits/stl_vector.h ****       resize(size_type __new_size)
 938:/usr/include/c++/11/bits/stl_vector.h ****       {
 939:/usr/include/c++/11/bits/stl_vector.h **** 	if (__new_size > size())
 940:/usr/include/c++/11/bits/stl_vector.h **** 	  _M_default_append(__new_size - size());
 941:/usr/include/c++/11/bits/stl_vector.h **** 	else if (__new_size < size())
 942:/usr/include/c++/11/bits/stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 943:/usr/include/c++/11/bits/stl_vector.h ****       }
 944:/usr/include/c++/11/bits/stl_vector.h **** 
 945:/usr/include/c++/11/bits/stl_vector.h ****       /**
 946:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 947:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __new_size  Number of elements the %vector should contain.
 948:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __x  Data with which new elements should be populated.
 949:/usr/include/c++/11/bits/stl_vector.h ****        *
 950:/usr/include/c++/11/bits/stl_vector.h ****        *  This function will %resize the %vector to the specified
 951:/usr/include/c++/11/bits/stl_vector.h ****        *  number of elements.  If the number is smaller than the
 952:/usr/include/c++/11/bits/stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 953:/usr/include/c++/11/bits/stl_vector.h ****        *  the %vector is extended and new elements are populated with
 954:/usr/include/c++/11/bits/stl_vector.h ****        *  given data.
 955:/usr/include/c++/11/bits/stl_vector.h ****        */
 956:/usr/include/c++/11/bits/stl_vector.h ****       void
 957:/usr/include/c++/11/bits/stl_vector.h ****       resize(size_type __new_size, const value_type& __x)
 958:/usr/include/c++/11/bits/stl_vector.h ****       {
 959:/usr/include/c++/11/bits/stl_vector.h **** 	if (__new_size > size())
 960:/usr/include/c++/11/bits/stl_vector.h **** 	  _M_fill_insert(end(), __new_size - size(), __x);
 961:/usr/include/c++/11/bits/stl_vector.h **** 	else if (__new_size < size())
 962:/usr/include/c++/11/bits/stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 963:/usr/include/c++/11/bits/stl_vector.h ****       }
 964:/usr/include/c++/11/bits/stl_vector.h **** #else
 965:/usr/include/c++/11/bits/stl_vector.h ****       /**
 966:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 967:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __new_size  Number of elements the %vector should contain.
 968:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __x  Data with which new elements should be populated.
 969:/usr/include/c++/11/bits/stl_vector.h ****        *
 970:/usr/include/c++/11/bits/stl_vector.h ****        *  This function will %resize the %vector to the specified
 971:/usr/include/c++/11/bits/stl_vector.h ****        *  number of elements.  If the number is smaller than the
 972:/usr/include/c++/11/bits/stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 973:/usr/include/c++/11/bits/stl_vector.h ****        *  the %vector is extended and new elements are populated with
 974:/usr/include/c++/11/bits/stl_vector.h ****        *  given data.
 975:/usr/include/c++/11/bits/stl_vector.h ****        */
 976:/usr/include/c++/11/bits/stl_vector.h ****       void
 977:/usr/include/c++/11/bits/stl_vector.h ****       resize(size_type __new_size, value_type __x = value_type())
 978:/usr/include/c++/11/bits/stl_vector.h ****       {
 979:/usr/include/c++/11/bits/stl_vector.h **** 	if (__new_size > size())
 980:/usr/include/c++/11/bits/stl_vector.h **** 	  _M_fill_insert(end(), __new_size - size(), __x);
 981:/usr/include/c++/11/bits/stl_vector.h **** 	else if (__new_size < size())
 982:/usr/include/c++/11/bits/stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 983:/usr/include/c++/11/bits/stl_vector.h ****       }
 984:/usr/include/c++/11/bits/stl_vector.h **** #endif
 985:/usr/include/c++/11/bits/stl_vector.h **** 
 986:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
 987:/usr/include/c++/11/bits/stl_vector.h ****       /**  A non-binding request to reduce capacity() to size().  */
 988:/usr/include/c++/11/bits/stl_vector.h ****       void
 989:/usr/include/c++/11/bits/stl_vector.h ****       shrink_to_fit()
 990:/usr/include/c++/11/bits/stl_vector.h ****       { _M_shrink_to_fit(); }
 991:/usr/include/c++/11/bits/stl_vector.h **** #endif
 992:/usr/include/c++/11/bits/stl_vector.h **** 
 993:/usr/include/c++/11/bits/stl_vector.h ****       /**
 994:/usr/include/c++/11/bits/stl_vector.h ****        *  Returns the total number of elements that the %vector can
 995:/usr/include/c++/11/bits/stl_vector.h ****        *  hold before needing to allocate more memory.
 996:/usr/include/c++/11/bits/stl_vector.h ****        */
 997:/usr/include/c++/11/bits/stl_vector.h ****       size_type
 998:/usr/include/c++/11/bits/stl_vector.h ****       capacity() const _GLIBCXX_NOEXCEPT
 999:/usr/include/c++/11/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_end_of_storage
1000:/usr/include/c++/11/bits/stl_vector.h **** 			 - this->_M_impl._M_start); }
1001:/usr/include/c++/11/bits/stl_vector.h **** 
1002:/usr/include/c++/11/bits/stl_vector.h ****       /**
1003:/usr/include/c++/11/bits/stl_vector.h ****        *  Returns true if the %vector is empty.  (Thus begin() would
1004:/usr/include/c++/11/bits/stl_vector.h ****        *  equal end().)
1005:/usr/include/c++/11/bits/stl_vector.h ****        */
1006:/usr/include/c++/11/bits/stl_vector.h ****       _GLIBCXX_NODISCARD bool
1007:/usr/include/c++/11/bits/stl_vector.h ****       empty() const _GLIBCXX_NOEXCEPT
1008:/usr/include/c++/11/bits/stl_vector.h ****       { return begin() == end(); }
1009:/usr/include/c++/11/bits/stl_vector.h **** 
1010:/usr/include/c++/11/bits/stl_vector.h ****       /**
1011:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Attempt to preallocate enough memory for specified number of
1012:/usr/include/c++/11/bits/stl_vector.h ****        *          elements.
1013:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __n  Number of elements required.
1014:/usr/include/c++/11/bits/stl_vector.h ****        *  @throw  std::length_error  If @a n exceeds @c max_size().
1015:/usr/include/c++/11/bits/stl_vector.h ****        *
1016:/usr/include/c++/11/bits/stl_vector.h ****        *  This function attempts to reserve enough memory for the
1017:/usr/include/c++/11/bits/stl_vector.h ****        *  %vector to hold the specified number of elements.  If the
1018:/usr/include/c++/11/bits/stl_vector.h ****        *  number requested is more than max_size(), length_error is
1019:/usr/include/c++/11/bits/stl_vector.h ****        *  thrown.
1020:/usr/include/c++/11/bits/stl_vector.h ****        *
1021:/usr/include/c++/11/bits/stl_vector.h ****        *  The advantage of this function is that if optimal code is a
1022:/usr/include/c++/11/bits/stl_vector.h ****        *  necessity and the user can determine the number of elements
1023:/usr/include/c++/11/bits/stl_vector.h ****        *  that will be required, the user can reserve the memory in
1024:/usr/include/c++/11/bits/stl_vector.h ****        *  %advance, and thus prevent a possible reallocation of memory
1025:/usr/include/c++/11/bits/stl_vector.h ****        *  and copying of %vector data.
1026:/usr/include/c++/11/bits/stl_vector.h ****        */
1027:/usr/include/c++/11/bits/stl_vector.h ****       void
1028:/usr/include/c++/11/bits/stl_vector.h ****       reserve(size_type __n);
1029:/usr/include/c++/11/bits/stl_vector.h **** 
1030:/usr/include/c++/11/bits/stl_vector.h ****       // element access
1031:/usr/include/c++/11/bits/stl_vector.h ****       /**
1032:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Subscript access to the data contained in the %vector.
1033:/usr/include/c++/11/bits/stl_vector.h ****        *  @param __n The index of the element for which data should be
1034:/usr/include/c++/11/bits/stl_vector.h ****        *  accessed.
1035:/usr/include/c++/11/bits/stl_vector.h ****        *  @return  Read/write reference to data.
1036:/usr/include/c++/11/bits/stl_vector.h ****        *
1037:/usr/include/c++/11/bits/stl_vector.h ****        *  This operator allows for easy, array-style, data access.
1038:/usr/include/c++/11/bits/stl_vector.h ****        *  Note that data access with this operator is unchecked and
1039:/usr/include/c++/11/bits/stl_vector.h ****        *  out_of_range lookups are not defined. (For checked lookups
1040:/usr/include/c++/11/bits/stl_vector.h ****        *  see at().)
1041:/usr/include/c++/11/bits/stl_vector.h ****        */
1042:/usr/include/c++/11/bits/stl_vector.h ****       reference
1043:/usr/include/c++/11/bits/stl_vector.h ****       operator[](size_type __n) _GLIBCXX_NOEXCEPT
1044:/usr/include/c++/11/bits/stl_vector.h ****       {
1045:/usr/include/c++/11/bits/stl_vector.h **** 	__glibcxx_requires_subscript(__n);
1046:/usr/include/c++/11/bits/stl_vector.h **** 	return *(this->_M_impl._M_start + __n);
1047:/usr/include/c++/11/bits/stl_vector.h ****       }
1048:/usr/include/c++/11/bits/stl_vector.h **** 
1049:/usr/include/c++/11/bits/stl_vector.h ****       /**
1050:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Subscript access to the data contained in the %vector.
1051:/usr/include/c++/11/bits/stl_vector.h ****        *  @param __n The index of the element for which data should be
1052:/usr/include/c++/11/bits/stl_vector.h ****        *  accessed.
1053:/usr/include/c++/11/bits/stl_vector.h ****        *  @return  Read-only (constant) reference to data.
1054:/usr/include/c++/11/bits/stl_vector.h ****        *
1055:/usr/include/c++/11/bits/stl_vector.h ****        *  This operator allows for easy, array-style, data access.
1056:/usr/include/c++/11/bits/stl_vector.h ****        *  Note that data access with this operator is unchecked and
1057:/usr/include/c++/11/bits/stl_vector.h ****        *  out_of_range lookups are not defined. (For checked lookups
1058:/usr/include/c++/11/bits/stl_vector.h ****        *  see at().)
1059:/usr/include/c++/11/bits/stl_vector.h ****        */
1060:/usr/include/c++/11/bits/stl_vector.h ****       const_reference
1061:/usr/include/c++/11/bits/stl_vector.h ****       operator[](size_type __n) const _GLIBCXX_NOEXCEPT
1062:/usr/include/c++/11/bits/stl_vector.h ****       {
1063:/usr/include/c++/11/bits/stl_vector.h **** 	__glibcxx_requires_subscript(__n);
1064:/usr/include/c++/11/bits/stl_vector.h **** 	return *(this->_M_impl._M_start + __n);
1065:/usr/include/c++/11/bits/stl_vector.h ****       }
1066:/usr/include/c++/11/bits/stl_vector.h **** 
1067:/usr/include/c++/11/bits/stl_vector.h ****     protected:
1068:/usr/include/c++/11/bits/stl_vector.h ****       /// Safety check used only from at().
1069:/usr/include/c++/11/bits/stl_vector.h ****       void
1070:/usr/include/c++/11/bits/stl_vector.h ****       _M_range_check(size_type __n) const
1071:/usr/include/c++/11/bits/stl_vector.h ****       {
1072:/usr/include/c++/11/bits/stl_vector.h **** 	if (__n >= this->size())
1073:/usr/include/c++/11/bits/stl_vector.h **** 	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
1074:/usr/include/c++/11/bits/stl_vector.h **** 				       "(which is %zu) >= this->size() "
1075:/usr/include/c++/11/bits/stl_vector.h **** 				       "(which is %zu)"),
1076:/usr/include/c++/11/bits/stl_vector.h **** 				   __n, this->size());
1077:/usr/include/c++/11/bits/stl_vector.h ****       }
1078:/usr/include/c++/11/bits/stl_vector.h **** 
1079:/usr/include/c++/11/bits/stl_vector.h ****     public:
1080:/usr/include/c++/11/bits/stl_vector.h ****       /**
1081:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Provides access to the data contained in the %vector.
1082:/usr/include/c++/11/bits/stl_vector.h ****        *  @param __n The index of the element for which data should be
1083:/usr/include/c++/11/bits/stl_vector.h ****        *  accessed.
1084:/usr/include/c++/11/bits/stl_vector.h ****        *  @return  Read/write reference to data.
1085:/usr/include/c++/11/bits/stl_vector.h ****        *  @throw  std::out_of_range  If @a __n is an invalid index.
1086:/usr/include/c++/11/bits/stl_vector.h ****        *
1087:/usr/include/c++/11/bits/stl_vector.h ****        *  This function provides for safer data access.  The parameter
1088:/usr/include/c++/11/bits/stl_vector.h ****        *  is first checked that it is in the range of the vector.  The
1089:/usr/include/c++/11/bits/stl_vector.h ****        *  function throws out_of_range if the check fails.
1090:/usr/include/c++/11/bits/stl_vector.h ****        */
1091:/usr/include/c++/11/bits/stl_vector.h ****       reference
1092:/usr/include/c++/11/bits/stl_vector.h ****       at(size_type __n)
1093:/usr/include/c++/11/bits/stl_vector.h ****       {
1094:/usr/include/c++/11/bits/stl_vector.h **** 	_M_range_check(__n);
1095:/usr/include/c++/11/bits/stl_vector.h **** 	return (*this)[__n];
1096:/usr/include/c++/11/bits/stl_vector.h ****       }
1097:/usr/include/c++/11/bits/stl_vector.h **** 
1098:/usr/include/c++/11/bits/stl_vector.h ****       /**
1099:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Provides access to the data contained in the %vector.
1100:/usr/include/c++/11/bits/stl_vector.h ****        *  @param __n The index of the element for which data should be
1101:/usr/include/c++/11/bits/stl_vector.h ****        *  accessed.
1102:/usr/include/c++/11/bits/stl_vector.h ****        *  @return  Read-only (constant) reference to data.
1103:/usr/include/c++/11/bits/stl_vector.h ****        *  @throw  std::out_of_range  If @a __n is an invalid index.
1104:/usr/include/c++/11/bits/stl_vector.h ****        *
1105:/usr/include/c++/11/bits/stl_vector.h ****        *  This function provides for safer data access.  The parameter
1106:/usr/include/c++/11/bits/stl_vector.h ****        *  is first checked that it is in the range of the vector.  The
1107:/usr/include/c++/11/bits/stl_vector.h ****        *  function throws out_of_range if the check fails.
1108:/usr/include/c++/11/bits/stl_vector.h ****        */
1109:/usr/include/c++/11/bits/stl_vector.h ****       const_reference
1110:/usr/include/c++/11/bits/stl_vector.h ****       at(size_type __n) const
1111:/usr/include/c++/11/bits/stl_vector.h ****       {
1112:/usr/include/c++/11/bits/stl_vector.h **** 	_M_range_check(__n);
1113:/usr/include/c++/11/bits/stl_vector.h **** 	return (*this)[__n];
1114:/usr/include/c++/11/bits/stl_vector.h ****       }
1115:/usr/include/c++/11/bits/stl_vector.h **** 
1116:/usr/include/c++/11/bits/stl_vector.h ****       /**
1117:/usr/include/c++/11/bits/stl_vector.h ****        *  Returns a read/write reference to the data at the first
1118:/usr/include/c++/11/bits/stl_vector.h ****        *  element of the %vector.
1119:/usr/include/c++/11/bits/stl_vector.h ****        */
1120:/usr/include/c++/11/bits/stl_vector.h ****       reference
1121:/usr/include/c++/11/bits/stl_vector.h ****       front() _GLIBCXX_NOEXCEPT
1122:/usr/include/c++/11/bits/stl_vector.h ****       {
1123:/usr/include/c++/11/bits/stl_vector.h **** 	__glibcxx_requires_nonempty();
1124:/usr/include/c++/11/bits/stl_vector.h **** 	return *begin();
1125:/usr/include/c++/11/bits/stl_vector.h ****       }
1126:/usr/include/c++/11/bits/stl_vector.h **** 
1127:/usr/include/c++/11/bits/stl_vector.h ****       /**
1128:/usr/include/c++/11/bits/stl_vector.h ****        *  Returns a read-only (constant) reference to the data at the first
1129:/usr/include/c++/11/bits/stl_vector.h ****        *  element of the %vector.
1130:/usr/include/c++/11/bits/stl_vector.h ****        */
1131:/usr/include/c++/11/bits/stl_vector.h ****       const_reference
1132:/usr/include/c++/11/bits/stl_vector.h ****       front() const _GLIBCXX_NOEXCEPT
1133:/usr/include/c++/11/bits/stl_vector.h ****       {
1134:/usr/include/c++/11/bits/stl_vector.h **** 	__glibcxx_requires_nonempty();
1135:/usr/include/c++/11/bits/stl_vector.h **** 	return *begin();
1136:/usr/include/c++/11/bits/stl_vector.h ****       }
1137:/usr/include/c++/11/bits/stl_vector.h **** 
1138:/usr/include/c++/11/bits/stl_vector.h ****       /**
1139:/usr/include/c++/11/bits/stl_vector.h ****        *  Returns a read/write reference to the data at the last
1140:/usr/include/c++/11/bits/stl_vector.h ****        *  element of the %vector.
1141:/usr/include/c++/11/bits/stl_vector.h ****        */
1142:/usr/include/c++/11/bits/stl_vector.h ****       reference
1143:/usr/include/c++/11/bits/stl_vector.h ****       back() _GLIBCXX_NOEXCEPT
1144:/usr/include/c++/11/bits/stl_vector.h ****       {
1145:/usr/include/c++/11/bits/stl_vector.h **** 	__glibcxx_requires_nonempty();
1146:/usr/include/c++/11/bits/stl_vector.h **** 	return *(end() - 1);
1147:/usr/include/c++/11/bits/stl_vector.h ****       }
1148:/usr/include/c++/11/bits/stl_vector.h **** 
1149:/usr/include/c++/11/bits/stl_vector.h ****       /**
1150:/usr/include/c++/11/bits/stl_vector.h ****        *  Returns a read-only (constant) reference to the data at the
1151:/usr/include/c++/11/bits/stl_vector.h ****        *  last element of the %vector.
1152:/usr/include/c++/11/bits/stl_vector.h ****        */
1153:/usr/include/c++/11/bits/stl_vector.h ****       const_reference
1154:/usr/include/c++/11/bits/stl_vector.h ****       back() const _GLIBCXX_NOEXCEPT
1155:/usr/include/c++/11/bits/stl_vector.h ****       {
1156:/usr/include/c++/11/bits/stl_vector.h **** 	__glibcxx_requires_nonempty();
1157:/usr/include/c++/11/bits/stl_vector.h **** 	return *(end() - 1);
1158:/usr/include/c++/11/bits/stl_vector.h ****       }
1159:/usr/include/c++/11/bits/stl_vector.h **** 
1160:/usr/include/c++/11/bits/stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1161:/usr/include/c++/11/bits/stl_vector.h ****       // DR 464. Suggestion for new member functions in standard containers.
1162:/usr/include/c++/11/bits/stl_vector.h ****       // data access
1163:/usr/include/c++/11/bits/stl_vector.h ****       /**
1164:/usr/include/c++/11/bits/stl_vector.h ****        *   Returns a pointer such that [data(), data() + size()) is a valid
1165:/usr/include/c++/11/bits/stl_vector.h ****        *   range.  For a non-empty %vector, data() == &front().
1166:/usr/include/c++/11/bits/stl_vector.h ****        */
1167:/usr/include/c++/11/bits/stl_vector.h ****       _Tp*
1168:/usr/include/c++/11/bits/stl_vector.h ****       data() _GLIBCXX_NOEXCEPT
1169:/usr/include/c++/11/bits/stl_vector.h ****       { return _M_data_ptr(this->_M_impl._M_start); }
1170:/usr/include/c++/11/bits/stl_vector.h **** 
1171:/usr/include/c++/11/bits/stl_vector.h ****       const _Tp*
1172:/usr/include/c++/11/bits/stl_vector.h ****       data() const _GLIBCXX_NOEXCEPT
1173:/usr/include/c++/11/bits/stl_vector.h ****       { return _M_data_ptr(this->_M_impl._M_start); }
1174:/usr/include/c++/11/bits/stl_vector.h **** 
1175:/usr/include/c++/11/bits/stl_vector.h ****       // [23.2.4.3] modifiers
1176:/usr/include/c++/11/bits/stl_vector.h ****       /**
1177:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Add data to the end of the %vector.
1178:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __x  Data to be added.
1179:/usr/include/c++/11/bits/stl_vector.h ****        *
1180:/usr/include/c++/11/bits/stl_vector.h ****        *  This is a typical stack operation.  The function creates an
1181:/usr/include/c++/11/bits/stl_vector.h ****        *  element at the end of the %vector and assigns the given data
1182:/usr/include/c++/11/bits/stl_vector.h ****        *  to it.  Due to the nature of a %vector this operation can be
1183:/usr/include/c++/11/bits/stl_vector.h ****        *  done in constant time if the %vector has preallocated space
1184:/usr/include/c++/11/bits/stl_vector.h ****        *  available.
1185:/usr/include/c++/11/bits/stl_vector.h ****        */
1186:/usr/include/c++/11/bits/stl_vector.h ****       void
1187:/usr/include/c++/11/bits/stl_vector.h ****       push_back(const value_type& __x)
 661              		.loc 5 1187 7
 662              		.cfi_startproc
 663 0000 F30F1EFA 		endbr64
 664 0004 55       		pushq	%rbp
 665              		.cfi_def_cfa_offset 16
 666              		.cfi_offset 6, -16
 667 0005 4889E5   		movq	%rsp, %rbp
 668              		.cfi_def_cfa_register 6
 669 0008 4883EC10 		subq	$16, %rsp
 670 000c 48897DF8 		movq	%rdi, -8(%rbp)
 671 0010 488975F0 		movq	%rsi, -16(%rbp)
1188:/usr/include/c++/11/bits/stl_vector.h ****       {
1189:/usr/include/c++/11/bits/stl_vector.h **** 	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 672              		.loc 5 1189 20
 673 0014 488B45F8 		movq	-8(%rbp), %rax
 674 0018 488B5008 		movq	8(%rax), %rdx
 675              		.loc 5 1189 47
 676 001c 488B45F8 		movq	-8(%rbp), %rax
 677 0020 488B4010 		movq	16(%rax), %rax
 678              		.loc 5 1189 2
 679 0024 4839C2   		cmpq	%rax, %rdx
 680 0027 7434     		je	.L35
1190:/usr/include/c++/11/bits/stl_vector.h **** 	  {
1191:/usr/include/c++/11/bits/stl_vector.h **** 	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
1192:/usr/include/c++/11/bits/stl_vector.h **** 	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 681              		.loc 5 1192 30
 682 0029 488B45F8 		movq	-8(%rbp), %rax
 683 002d 488B4808 		movq	8(%rax), %rcx
 684              		.loc 5 1192 37
 685 0031 488B45F8 		movq	-8(%rbp), %rax
 686              		.loc 5 1192 30
 687 0035 488B55F0 		movq	-16(%rbp), %rdx
 688 0039 4889CE   		movq	%rcx, %rsi
 689 003c 4889C7   		movq	%rax, %rdi
 690 003f E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEES2_E9constructIS2_EEvRS3_PS2
 690      00
1193:/usr/include/c++/11/bits/stl_vector.h **** 				     __x);
1194:/usr/include/c++/11/bits/stl_vector.h **** 	    ++this->_M_impl._M_finish;
 691              		.loc 5 1194 22
 692 0044 488B45F8 		movq	-8(%rbp), %rax
 693 0048 488B4008 		movq	8(%rax), %rax
 694              		.loc 5 1194 6
 695 004c 488D9080 		leaq	128(%rax), %rdx
 695      000000
 696 0053 488B45F8 		movq	-8(%rbp), %rax
 697 0057 48895008 		movq	%rdx, 8(%rax)
1195:/usr/include/c++/11/bits/stl_vector.h **** 	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
1196:/usr/include/c++/11/bits/stl_vector.h **** 	  }
1197:/usr/include/c++/11/bits/stl_vector.h **** 	else
1198:/usr/include/c++/11/bits/stl_vector.h **** 	  _M_realloc_insert(end(), __x);
1199:/usr/include/c++/11/bits/stl_vector.h ****       }
 698              		.loc 5 1199 7
 699 005b EB22     		jmp	.L37
 700              	.L35:
1198:/usr/include/c++/11/bits/stl_vector.h ****       }
 701              		.loc 5 1198 21
 702 005d 488B45F8 		movq	-8(%rbp), %rax
 703 0061 4889C7   		movq	%rax, %rdi
 704 0064 E8000000 		call	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE3endEv@PLT
 704      00
 705 0069 4889C1   		movq	%rax, %rcx
 706 006c 488B55F0 		movq	-16(%rbp), %rdx
 707 0070 488B45F8 		movq	-8(%rbp), %rax
 708 0074 4889CE   		movq	%rcx, %rsi
 709 0077 4889C7   		movq	%rax, %rdi
 710 007a E8000000 		call	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE17_M_realloc_insertEN9__gnu_cxx17__normal
 710      00
 711              	.L37:
 712              		.loc 5 1199 7
 713 007f 90       		nop
 714 0080 C9       		leave
 715              		.cfi_def_cfa 7, 8
 716 0081 C3       		ret
 717              		.cfi_endproc
 718              	.LFE947:
 720              		.section	.text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4backEv,"axG",@progbits,_ZNSt6v
 721              		.align 2
 722              		.weak	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4backEv
 724              	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4backEv:
 725              	.LFB948:
1143:/usr/include/c++/11/bits/stl_vector.h ****       {
 726              		.loc 5 1143 7
 727              		.cfi_startproc
 728 0000 F30F1EFA 		endbr64
 729 0004 55       		pushq	%rbp
 730              		.cfi_def_cfa_offset 16
 731              		.cfi_offset 6, -16
 732 0005 4889E5   		movq	%rsp, %rbp
 733              		.cfi_def_cfa_register 6
 734 0008 4883EC30 		subq	$48, %rsp
 735 000c 48897DD8 		movq	%rdi, -40(%rbp)
1143:/usr/include/c++/11/bits/stl_vector.h ****       {
 736              		.loc 5 1143 7
 737 0010 64488B04 		movq	%fs:40, %rax
 737      25280000 
 737      00
 738 0019 488945F8 		movq	%rax, -8(%rbp)
 739 001d 31C0     		xorl	%eax, %eax
1146:/usr/include/c++/11/bits/stl_vector.h ****       }
 740              		.loc 5 1146 14
 741 001f 488B45D8 		movq	-40(%rbp), %rax
 742 0023 4889C7   		movq	%rax, %rdi
 743 0026 E8000000 		call	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE3endEv@PLT
 743      00
 744 002b 488945E8 		movq	%rax, -24(%rbp)
1146:/usr/include/c++/11/bits/stl_vector.h ****       }
 745              		.loc 5 1146 17
 746 002f 488D45E8 		leaq	-24(%rbp), %rax
 747 0033 BE010000 		movl	$1, %esi
 747      00
 748 0038 4889C7   		movq	%rax, %rdi
 749 003b E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEmiEl@
 749      00
 750 0040 488945F0 		movq	%rax, -16(%rbp)
1146:/usr/include/c++/11/bits/stl_vector.h ****       }
 751              		.loc 5 1146 9
 752 0044 488D45F0 		leaq	-16(%rbp), %rax
 753 0048 4889C7   		movq	%rax, %rdi
 754 004b E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEdeEv@
 754      00
1147:/usr/include/c++/11/bits/stl_vector.h **** 
 755              		.loc 5 1147 7
 756 0050 488B55F8 		movq	-8(%rbp), %rdx
 757 0054 64482B14 		subq	%fs:40, %rdx
 757      25280000 
 757      00
 758 005d 7405     		je	.L40
 759 005f E8000000 		call	__stack_chk_fail@PLT
 759      00
 760              	.L40:
 761 0064 C9       		leave
 762              		.cfi_def_cfa 7, 8
 763 0065 C3       		ret
 764              		.cfi_endproc
 765              	.LFE948:
 767              		.section	.text._ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2ERKiRKS5_,"axG",
 768              		.align 2
 769              		.weak	_ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2ERKiRKS5_
 771              	_ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2ERKiRKS5_:
 772              	.LFB959:
 212:/usr/include/c++/11/bits/stl_pair.h ****     : private __pair_base<_T1, _T2>
 213:/usr/include/c++/11/bits/stl_pair.h ****     {
 214:/usr/include/c++/11/bits/stl_pair.h ****       typedef _T1 first_type;    ///< The type of the `first` member
 215:/usr/include/c++/11/bits/stl_pair.h ****       typedef _T2 second_type;   ///< The type of the `second` member
 216:/usr/include/c++/11/bits/stl_pair.h **** 
 217:/usr/include/c++/11/bits/stl_pair.h ****       _T1 first;                 ///< The first member
 218:/usr/include/c++/11/bits/stl_pair.h ****       _T2 second;                ///< The second member
 219:/usr/include/c++/11/bits/stl_pair.h **** 
 220:/usr/include/c++/11/bits/stl_pair.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 221:/usr/include/c++/11/bits/stl_pair.h ****       // 265.  std::pair::pair() effects overly restrictive
 222:/usr/include/c++/11/bits/stl_pair.h ****       /** The default constructor creates @c first and @c second using their
 223:/usr/include/c++/11/bits/stl_pair.h ****        *  respective default constructors.  */
 224:/usr/include/c++/11/bits/stl_pair.h **** #if __cplusplus >= 201103L
 225:/usr/include/c++/11/bits/stl_pair.h ****       template <typename _U1 = _T1,
 226:/usr/include/c++/11/bits/stl_pair.h ****                 typename _U2 = _T2,
 227:/usr/include/c++/11/bits/stl_pair.h ****                 typename enable_if<__and_<
 228:/usr/include/c++/11/bits/stl_pair.h ****                                      __is_implicitly_default_constructible<_U1>,
 229:/usr/include/c++/11/bits/stl_pair.h ****                                      __is_implicitly_default_constructible<_U2>>
 230:/usr/include/c++/11/bits/stl_pair.h ****                                    ::value, bool>::type = true>
 231:/usr/include/c++/11/bits/stl_pair.h **** #endif
 232:/usr/include/c++/11/bits/stl_pair.h ****       _GLIBCXX_CONSTEXPR pair()
 233:/usr/include/c++/11/bits/stl_pair.h ****       : first(), second() { }
 234:/usr/include/c++/11/bits/stl_pair.h **** 
 235:/usr/include/c++/11/bits/stl_pair.h **** #if __cplusplus >= 201103L
 236:/usr/include/c++/11/bits/stl_pair.h ****       template <typename _U1 = _T1,
 237:/usr/include/c++/11/bits/stl_pair.h ****                 typename _U2 = _T2,
 238:/usr/include/c++/11/bits/stl_pair.h ****                 typename enable_if<__and_<
 239:/usr/include/c++/11/bits/stl_pair.h ****                        is_default_constructible<_U1>,
 240:/usr/include/c++/11/bits/stl_pair.h ****                        is_default_constructible<_U2>,
 241:/usr/include/c++/11/bits/stl_pair.h ****                        __not_<
 242:/usr/include/c++/11/bits/stl_pair.h ****                          __and_<__is_implicitly_default_constructible<_U1>,
 243:/usr/include/c++/11/bits/stl_pair.h ****                                 __is_implicitly_default_constructible<_U2>>>>
 244:/usr/include/c++/11/bits/stl_pair.h ****                                    ::value, bool>::type = false>
 245:/usr/include/c++/11/bits/stl_pair.h ****       explicit constexpr pair()
 246:/usr/include/c++/11/bits/stl_pair.h ****       : first(), second() { }
 247:/usr/include/c++/11/bits/stl_pair.h **** #endif
 248:/usr/include/c++/11/bits/stl_pair.h **** 
 249:/usr/include/c++/11/bits/stl_pair.h **** #if __cplusplus < 201103L
 250:/usr/include/c++/11/bits/stl_pair.h ****       /// Two objects may be passed to a @c pair constructor to be copied.
 251:/usr/include/c++/11/bits/stl_pair.h ****       pair(const _T1& __a, const _T2& __b)
 773              		.loc 4 251 7
 774              		.cfi_startproc
 775 0000 F30F1EFA 		endbr64
 776 0004 55       		pushq	%rbp
 777              		.cfi_def_cfa_offset 16
 778              		.cfi_offset 6, -16
 779 0005 4889E5   		movq	%rsp, %rbp
 780              		.cfi_def_cfa_register 6
 781 0008 4883EC20 		subq	$32, %rsp
 782 000c 48897DF8 		movq	%rdi, -8(%rbp)
 783 0010 488975F0 		movq	%rsi, -16(%rbp)
 784 0014 488955E8 		movq	%rdx, -24(%rbp)
 785              	.LBB7:
 252:/usr/include/c++/11/bits/stl_pair.h ****       : first(__a), second(__b) { }
 786              		.loc 4 252 9
 787 0018 488B45F0 		movq	-16(%rbp), %rax
 788 001c 8B10     		movl	(%rax), %edx
 789 001e 488B45F8 		movq	-8(%rbp), %rax
 790 0022 8910     		movl	%edx, (%rax)
 791              		.loc 4 252 21
 792 0024 488B45F8 		movq	-8(%rbp), %rax
 793 0028 488D5008 		leaq	8(%rax), %rdx
 794 002c 488B45E8 		movq	-24(%rbp), %rax
 795 0030 4889C6   		movq	%rax, %rsi
 796 0033 4889D7   		movq	%rdx, %rdi
 797 0036 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_@PLT
 797      00
 798              	.LBE7:
 799              		.loc 4 252 35
 800 003b 90       		nop
 801 003c C9       		leave
 802              		.cfi_def_cfa 7, 8
 803 003d C3       		ret
 804              		.cfi_endproc
 805              	.LFE959:
 807              		.weak	_ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKiRKS5_
 808              		.set	_ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKiRKS5_,_ZNSt4pairIiNSt7
 809              		.section	.text._ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE
 810              		.align 2
 811              		.weak	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE9push_bac
 813              	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE9push_backERKS7_
 814              	.LFB961:
1187:/usr/include/c++/11/bits/stl_vector.h ****       {
 815              		.loc 5 1187 7
 816              		.cfi_startproc
 817 0000 F30F1EFA 		endbr64
 818 0004 55       		pushq	%rbp
 819              		.cfi_def_cfa_offset 16
 820              		.cfi_offset 6, -16
 821 0005 4889E5   		movq	%rsp, %rbp
 822              		.cfi_def_cfa_register 6
 823 0008 4883EC10 		subq	$16, %rsp
 824 000c 48897DF8 		movq	%rdi, -8(%rbp)
 825 0010 488975F0 		movq	%rsi, -16(%rbp)
1189:/usr/include/c++/11/bits/stl_vector.h **** 	  {
 826              		.loc 5 1189 20
 827 0014 488B45F8 		movq	-8(%rbp), %rax
 828 0018 488B5008 		movq	8(%rax), %rdx
1189:/usr/include/c++/11/bits/stl_vector.h **** 	  {
 829              		.loc 5 1189 47
 830 001c 488B45F8 		movq	-8(%rbp), %rax
 831 0020 488B4010 		movq	16(%rax), %rax
1189:/usr/include/c++/11/bits/stl_vector.h **** 	  {
 832              		.loc 5 1189 2
 833 0024 4839C2   		cmpq	%rax, %rdx
 834 0027 7431     		je	.L43
1192:/usr/include/c++/11/bits/stl_vector.h **** 				     __x);
 835              		.loc 5 1192 30
 836 0029 488B45F8 		movq	-8(%rbp), %rax
 837 002d 488B4808 		movq	8(%rax), %rcx
1192:/usr/include/c++/11/bits/stl_vector.h **** 				     __x);
 838              		.loc 5 1192 37
 839 0031 488B45F8 		movq	-8(%rbp), %rax
1192:/usr/include/c++/11/bits/stl_vector.h **** 				     __x);
 840              		.loc 5 1192 30
 841 0035 488B55F0 		movq	-16(%rbp), %rdx
 842 0039 4889CE   		movq	%rcx, %rsi
 843 003c 4889C7   		movq	%rax, %rdi
 844 003f E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE
 844      00
1194:/usr/include/c++/11/bits/stl_vector.h **** 	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
 845              		.loc 5 1194 22
 846 0044 488B45F8 		movq	-8(%rbp), %rax
 847 0048 488B4008 		movq	8(%rax), %rax
1194:/usr/include/c++/11/bits/stl_vector.h **** 	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
 848              		.loc 5 1194 6
 849 004c 488D5028 		leaq	40(%rax), %rdx
 850 0050 488B45F8 		movq	-8(%rbp), %rax
 851 0054 48895008 		movq	%rdx, 8(%rax)
 852              		.loc 5 1199 7
 853 0058 EB22     		jmp	.L45
 854              	.L43:
1198:/usr/include/c++/11/bits/stl_vector.h ****       }
 855              		.loc 5 1198 21
 856 005a 488B45F8 		movq	-8(%rbp), %rax
 857 005e 4889C7   		movq	%rax, %rdi
 858 0061 E8000000 		call	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE3endEv@PLT
 858      00
 859 0066 4889C1   		movq	%rax, %rcx
 860 0069 488B55F0 		movq	-16(%rbp), %rdx
 861 006d 488B45F8 		movq	-8(%rbp), %rax
 862 0071 4889CE   		movq	%rcx, %rsi
 863 0074 4889C7   		movq	%rax, %rdi
 864 0077 E8000000 		call	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE17_M_reall
 864      00
 865              	.L45:
 866              		.loc 5 1199 7
 867 007c 90       		nop
 868 007d C9       		leave
 869              		.cfi_def_cfa 7, 8
 870 007e C3       		ret
 871              		.cfi_endproc
 872              	.LFE961:
 874              		.section	.text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES
 875              		.align 2
 876              		.weak	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12
 878              	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_Vector
 879              	.LFB966:
 128:/usr/include/c++/11/bits/stl_vector.h **** 	: public _Tp_alloc_type, public _Vector_impl_data
 880              		.loc 5 128 14
 881              		.cfi_startproc
 882 0000 F30F1EFA 		endbr64
 883 0004 55       		pushq	%rbp
 884              		.cfi_def_cfa_offset 16
 885              		.cfi_offset 6, -16
 886 0005 4889E5   		movq	%rsp, %rbp
 887              		.cfi_def_cfa_register 6
 888 0008 4883EC10 		subq	$16, %rsp
 889 000c 48897DF8 		movq	%rdi, -8(%rbp)
 890              	.LBB8:
 128:/usr/include/c++/11/bits/stl_vector.h **** 	: public _Tp_alloc_type, public _Vector_impl_data
 891              		.loc 5 128 14
 892 0010 488B45F8 		movq	-8(%rbp), %rax
 893 0014 4889C7   		movq	%rax, %rdi
 894 0017 E8000000 		call	_ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev@PLT
 894      00
 895              	.LBE8:
 896 001c 90       		nop
 897 001d C9       		leave
 898              		.cfi_def_cfa 7, 8
 899 001e C3       		ret
 900              		.cfi_endproc
 901              	.LFE966:
 903              		.weak	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12
 904              		.set	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_
 905              		.section	.text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES
 906              		.align 2
 907              		.weak	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2
 909              	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2Ev:
 910              	.LFB968:
 333:/usr/include/c++/11/bits/stl_vector.h ****       {
 911              		.loc 5 333 7
 912              		.cfi_startproc
 913              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 914              		.cfi_lsda 0x1b,.LLSDA968
 915 0000 F30F1EFA 		endbr64
 916 0004 55       		pushq	%rbp
 917              		.cfi_def_cfa_offset 16
 918              		.cfi_offset 6, -16
 919 0005 4889E5   		movq	%rsp, %rbp
 920              		.cfi_def_cfa_register 6
 921 0008 53       		pushq	%rbx
 922 0009 4883EC18 		subq	$24, %rsp
 923              		.cfi_offset 3, -24
 924 000d 48897DE8 		movq	%rdi, -24(%rbp)
 925              	.LBB9:
 336:/usr/include/c++/11/bits/stl_vector.h ****       }
 926              		.loc 5 336 17
 927 0011 488B45E8 		movq	-24(%rbp), %rax
 928 0015 488B5010 		movq	16(%rax), %rdx
 336:/usr/include/c++/11/bits/stl_vector.h ****       }
 929              		.loc 5 336 45
 930 0019 488B45E8 		movq	-24(%rbp), %rax
 931 001d 488B08   		movq	(%rax), %rcx
 336:/usr/include/c++/11/bits/stl_vector.h ****       }
 932              		.loc 5 336 35
 933 0020 4889D0   		movq	%rdx, %rax
 934 0023 4829C8   		subq	%rcx, %rax
 935 0026 48C1F803 		sarq	$3, %rax
 936 002a 4889C2   		movq	%rax, %rdx
 937 002d 48B8CDCC 		movabsq	$-3689348814741910323, %rax
 937      CCCCCCCC 
 937      CCCC
 938 0037 480FAFC2 		imulq	%rdx, %rax
 335:/usr/include/c++/11/bits/stl_vector.h **** 		      _M_impl._M_end_of_storage - _M_impl._M_start);
 939              		.loc 5 335 15
 940 003b 4889C2   		movq	%rax, %rdx
 941 003e 488B45E8 		movq	-24(%rbp), %rax
 942 0042 488B08   		movq	(%rax), %rcx
 943 0045 488B45E8 		movq	-24(%rbp), %rax
 944 0049 4889CE   		movq	%rcx, %rsi
 945 004c 4889C7   		movq	%rax, %rdi
 946              	.LEHB20:
 947 004f E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE13_
 947      00
 948              	.LEHE20:
 337:/usr/include/c++/11/bits/stl_vector.h **** 
 949              		.loc 5 337 7
 950 0054 488B45E8 		movq	-24(%rbp), %rax
 951 0058 4889C7   		movq	%rax, %rdi
 952 005b E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_
 952      00
 953              	.LBE9:
 954 0060 EB1E     		jmp	.L50
 955              	.L49:
 956 0062 F30F1EFA 		endbr64
 957              	.LBB10:
 958 0066 4889C3   		movq	%rax, %rbx
 959 0069 488B45E8 		movq	-24(%rbp), %rax
 960 006d 4889C7   		movq	%rax, %rdi
 961 0070 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_
 961      00
 962 0075 4889D8   		movq	%rbx, %rax
 963 0078 4889C7   		movq	%rax, %rdi
 964              	.LEHB21:
 965 007b E8000000 		call	_Unwind_Resume@PLT
 965      00
 966              	.LEHE21:
 967              	.L50:
 968              	.LBE10:
 969 0080 488B5DF8 		movq	-8(%rbp), %rbx
 970 0084 C9       		leave
 971              		.cfi_def_cfa 7, 8
 972 0085 C3       		ret
 973              		.cfi_endproc
 974              	.LFE968:
 975              		.section	.gcc_except_table
 976              	.LLSDA968:
 977 0055 FF       		.byte	0xff
 978 0056 FF       		.byte	0xff
 979 0057 01       		.byte	0x1
 980 0058 08       		.uleb128 .LLSDACSE968-.LLSDACSB968
 981              	.LLSDACSB968:
 982 0059 4F       		.uleb128 .LEHB20-.LFB968
 983 005a 05       		.uleb128 .LEHE20-.LEHB20
 984 005b 62       		.uleb128 .L49-.LFB968
 985 005c 00       		.uleb128 0
 986 005d 7B       		.uleb128 .LEHB21-.LFB968
 987 005e 05       		.uleb128 .LEHE21-.LEHB21
 988 005f 00       		.uleb128 0
 989 0060 00       		.uleb128 0
 990              	.LLSDACSE968:
 991              		.section	.text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES
 993              		.weak	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED1
 994              		.set	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED1E
 995              		.section	.text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES
 996              		.align 2
 997              		.weak	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE19
 999              	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE19_M_get_
 1000              	.LFB970:
 276:/usr/include/c++/11/bits/stl_vector.h ****       { return this->_M_impl; }
 1001              		.loc 5 276 7
 1002              		.cfi_startproc
 1003 0000 F30F1EFA 		endbr64
 1004 0004 55       		pushq	%rbp
 1005              		.cfi_def_cfa_offset 16
 1006              		.cfi_offset 6, -16
 1007 0005 4889E5   		movq	%rsp, %rbp
 1008              		.cfi_def_cfa_register 6
 1009 0008 48897DF8 		movq	%rdi, -8(%rbp)
 277:/usr/include/c++/11/bits/stl_vector.h **** 
 1010              		.loc 5 277 22
 1011 000c 488B45F8 		movq	-8(%rbp), %rax
 277:/usr/include/c++/11/bits/stl_vector.h **** 
 1012              		.loc 5 277 31
 1013 0010 5D       		popq	%rbp
 1014              		.cfi_def_cfa 7, 8
 1015 0011 C3       		ret
 1016              		.cfi_endproc
 1017              	.LFE970:
 1019              		.section	.text._ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_EvT
 1020              		.weak	_ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_EvT_S9_RSaIT
 1022              	_ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_EvT_S9_RSaIT0_E:
 1023              	.LFB971:
 1024              		.file 6 "/usr/include/c++/11/bits/alloc_traits.h"
   1:/usr/include/c++/11/bits/alloc_traits.h **** // Allocator traits -*- C++ -*-
   2:/usr/include/c++/11/bits/alloc_traits.h **** 
   3:/usr/include/c++/11/bits/alloc_traits.h **** // Copyright (C) 2011-2021 Free Software Foundation, Inc.
   4:/usr/include/c++/11/bits/alloc_traits.h **** //
   5:/usr/include/c++/11/bits/alloc_traits.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/11/bits/alloc_traits.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/11/bits/alloc_traits.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/11/bits/alloc_traits.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/11/bits/alloc_traits.h **** // any later version.
  10:/usr/include/c++/11/bits/alloc_traits.h **** 
  11:/usr/include/c++/11/bits/alloc_traits.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/11/bits/alloc_traits.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/11/bits/alloc_traits.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/11/bits/alloc_traits.h **** // GNU General Public License for more details.
  15:/usr/include/c++/11/bits/alloc_traits.h **** 
  16:/usr/include/c++/11/bits/alloc_traits.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/11/bits/alloc_traits.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/11/bits/alloc_traits.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/11/bits/alloc_traits.h **** 
  20:/usr/include/c++/11/bits/alloc_traits.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/11/bits/alloc_traits.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/11/bits/alloc_traits.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/11/bits/alloc_traits.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/11/bits/alloc_traits.h **** 
  25:/usr/include/c++/11/bits/alloc_traits.h **** /** @file bits/alloc_traits.h
  26:/usr/include/c++/11/bits/alloc_traits.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/c++/11/bits/alloc_traits.h ****  *  Do not attempt to use it directly. @headername{memory}
  28:/usr/include/c++/11/bits/alloc_traits.h ****  */
  29:/usr/include/c++/11/bits/alloc_traits.h **** 
  30:/usr/include/c++/11/bits/alloc_traits.h **** #ifndef _ALLOC_TRAITS_H
  31:/usr/include/c++/11/bits/alloc_traits.h **** #define _ALLOC_TRAITS_H 1
  32:/usr/include/c++/11/bits/alloc_traits.h **** 
  33:/usr/include/c++/11/bits/alloc_traits.h **** #include <bits/stl_construct.h>
  34:/usr/include/c++/11/bits/alloc_traits.h **** #include <bits/memoryfwd.h>
  35:/usr/include/c++/11/bits/alloc_traits.h **** #if __cplusplus >= 201103L
  36:/usr/include/c++/11/bits/alloc_traits.h **** # include <bits/allocator.h>
  37:/usr/include/c++/11/bits/alloc_traits.h **** # include <bits/ptr_traits.h>
  38:/usr/include/c++/11/bits/alloc_traits.h **** # include <ext/numeric_traits.h>
  39:/usr/include/c++/11/bits/alloc_traits.h **** #endif
  40:/usr/include/c++/11/bits/alloc_traits.h **** 
  41:/usr/include/c++/11/bits/alloc_traits.h **** namespace std _GLIBCXX_VISIBILITY(default)
  42:/usr/include/c++/11/bits/alloc_traits.h **** {
  43:/usr/include/c++/11/bits/alloc_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  44:/usr/include/c++/11/bits/alloc_traits.h **** 
  45:/usr/include/c++/11/bits/alloc_traits.h **** #if __cplusplus >= 201103L
  46:/usr/include/c++/11/bits/alloc_traits.h **** #define __cpp_lib_allocator_traits_is_always_equal 201411
  47:/usr/include/c++/11/bits/alloc_traits.h **** 
  48:/usr/include/c++/11/bits/alloc_traits.h ****   /// @cond undocumented
  49:/usr/include/c++/11/bits/alloc_traits.h ****   struct __allocator_traits_base
  50:/usr/include/c++/11/bits/alloc_traits.h ****   {
  51:/usr/include/c++/11/bits/alloc_traits.h ****     template<typename _Tp, typename _Up, typename = void>
  52:/usr/include/c++/11/bits/alloc_traits.h ****       struct __rebind : __replace_first_arg<_Tp, _Up> { };
  53:/usr/include/c++/11/bits/alloc_traits.h **** 
  54:/usr/include/c++/11/bits/alloc_traits.h ****     template<typename _Tp, typename _Up>
  55:/usr/include/c++/11/bits/alloc_traits.h ****       struct __rebind<_Tp, _Up,
  56:/usr/include/c++/11/bits/alloc_traits.h **** 		      __void_t<typename _Tp::template rebind<_Up>::other>>
  57:/usr/include/c++/11/bits/alloc_traits.h ****       { using type = typename _Tp::template rebind<_Up>::other; };
  58:/usr/include/c++/11/bits/alloc_traits.h **** 
  59:/usr/include/c++/11/bits/alloc_traits.h ****   protected:
  60:/usr/include/c++/11/bits/alloc_traits.h ****     template<typename _Tp>
  61:/usr/include/c++/11/bits/alloc_traits.h ****       using __pointer = typename _Tp::pointer;
  62:/usr/include/c++/11/bits/alloc_traits.h ****     template<typename _Tp>
  63:/usr/include/c++/11/bits/alloc_traits.h ****       using __c_pointer = typename _Tp::const_pointer;
  64:/usr/include/c++/11/bits/alloc_traits.h ****     template<typename _Tp>
  65:/usr/include/c++/11/bits/alloc_traits.h ****       using __v_pointer = typename _Tp::void_pointer;
  66:/usr/include/c++/11/bits/alloc_traits.h ****     template<typename _Tp>
  67:/usr/include/c++/11/bits/alloc_traits.h ****       using __cv_pointer = typename _Tp::const_void_pointer;
  68:/usr/include/c++/11/bits/alloc_traits.h ****     template<typename _Tp>
  69:/usr/include/c++/11/bits/alloc_traits.h ****       using __pocca = typename _Tp::propagate_on_container_copy_assignment;
  70:/usr/include/c++/11/bits/alloc_traits.h ****     template<typename _Tp>
  71:/usr/include/c++/11/bits/alloc_traits.h ****       using __pocma = typename _Tp::propagate_on_container_move_assignment;
  72:/usr/include/c++/11/bits/alloc_traits.h ****     template<typename _Tp>
  73:/usr/include/c++/11/bits/alloc_traits.h ****       using __pocs = typename _Tp::propagate_on_container_swap;
  74:/usr/include/c++/11/bits/alloc_traits.h ****     template<typename _Tp>
  75:/usr/include/c++/11/bits/alloc_traits.h ****       using __equal = typename _Tp::is_always_equal;
  76:/usr/include/c++/11/bits/alloc_traits.h ****   };
  77:/usr/include/c++/11/bits/alloc_traits.h **** 
  78:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc, typename _Up>
  79:/usr/include/c++/11/bits/alloc_traits.h ****     using __alloc_rebind
  80:/usr/include/c++/11/bits/alloc_traits.h ****       = typename __allocator_traits_base::template __rebind<_Alloc, _Up>::type;
  81:/usr/include/c++/11/bits/alloc_traits.h ****   /// @endcond
  82:/usr/include/c++/11/bits/alloc_traits.h **** 
  83:/usr/include/c++/11/bits/alloc_traits.h ****   /**
  84:/usr/include/c++/11/bits/alloc_traits.h ****    * @brief  Uniform interface to all allocator types.
  85:/usr/include/c++/11/bits/alloc_traits.h ****    * @headerfile memory
  86:/usr/include/c++/11/bits/alloc_traits.h ****    * @ingroup allocators
  87:/usr/include/c++/11/bits/alloc_traits.h ****    * @since C++11
  88:/usr/include/c++/11/bits/alloc_traits.h ****   */
  89:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc>
  90:/usr/include/c++/11/bits/alloc_traits.h ****     struct allocator_traits : __allocator_traits_base
  91:/usr/include/c++/11/bits/alloc_traits.h ****     {
  92:/usr/include/c++/11/bits/alloc_traits.h ****       /// The allocator type
  93:/usr/include/c++/11/bits/alloc_traits.h ****       typedef _Alloc allocator_type;
  94:/usr/include/c++/11/bits/alloc_traits.h ****       /// The allocated type
  95:/usr/include/c++/11/bits/alloc_traits.h ****       typedef typename _Alloc::value_type value_type;
  96:/usr/include/c++/11/bits/alloc_traits.h **** 
  97:/usr/include/c++/11/bits/alloc_traits.h ****       /**
  98:/usr/include/c++/11/bits/alloc_traits.h ****        * @brief   The allocator's pointer type.
  99:/usr/include/c++/11/bits/alloc_traits.h ****        *
 100:/usr/include/c++/11/bits/alloc_traits.h ****        * @c Alloc::pointer if that type exists, otherwise @c value_type*
 101:/usr/include/c++/11/bits/alloc_traits.h ****       */
 102:/usr/include/c++/11/bits/alloc_traits.h ****       using pointer = __detected_or_t<value_type*, __pointer, _Alloc>;
 103:/usr/include/c++/11/bits/alloc_traits.h **** 
 104:/usr/include/c++/11/bits/alloc_traits.h ****     private:
 105:/usr/include/c++/11/bits/alloc_traits.h ****       // Select _Func<_Alloc> or pointer_traits<pointer>::rebind<_Tp>
 106:/usr/include/c++/11/bits/alloc_traits.h ****       template<template<typename> class _Func, typename _Tp, typename = void>
 107:/usr/include/c++/11/bits/alloc_traits.h **** 	struct _Ptr
 108:/usr/include/c++/11/bits/alloc_traits.h **** 	{
 109:/usr/include/c++/11/bits/alloc_traits.h **** 	  using type = typename pointer_traits<pointer>::template rebind<_Tp>;
 110:/usr/include/c++/11/bits/alloc_traits.h **** 	};
 111:/usr/include/c++/11/bits/alloc_traits.h **** 
 112:/usr/include/c++/11/bits/alloc_traits.h ****       template<template<typename> class _Func, typename _Tp>
 113:/usr/include/c++/11/bits/alloc_traits.h **** 	struct _Ptr<_Func, _Tp, __void_t<_Func<_Alloc>>>
 114:/usr/include/c++/11/bits/alloc_traits.h **** 	{
 115:/usr/include/c++/11/bits/alloc_traits.h **** 	  using type = _Func<_Alloc>;
 116:/usr/include/c++/11/bits/alloc_traits.h **** 	};
 117:/usr/include/c++/11/bits/alloc_traits.h **** 
 118:/usr/include/c++/11/bits/alloc_traits.h ****       // Select _A2::difference_type or pointer_traits<_Ptr>::difference_type
 119:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _A2, typename _PtrT, typename = void>
 120:/usr/include/c++/11/bits/alloc_traits.h **** 	struct _Diff
 121:/usr/include/c++/11/bits/alloc_traits.h **** 	{ using type = typename pointer_traits<_PtrT>::difference_type; };
 122:/usr/include/c++/11/bits/alloc_traits.h **** 
 123:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _A2, typename _PtrT>
 124:/usr/include/c++/11/bits/alloc_traits.h **** 	struct _Diff<_A2, _PtrT, __void_t<typename _A2::difference_type>>
 125:/usr/include/c++/11/bits/alloc_traits.h **** 	{ using type = typename _A2::difference_type; };
 126:/usr/include/c++/11/bits/alloc_traits.h **** 
 127:/usr/include/c++/11/bits/alloc_traits.h ****       // Select _A2::size_type or make_unsigned<_DiffT>::type
 128:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _A2, typename _DiffT, typename = void>
 129:/usr/include/c++/11/bits/alloc_traits.h **** 	struct _Size : make_unsigned<_DiffT> { };
 130:/usr/include/c++/11/bits/alloc_traits.h **** 
 131:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _A2, typename _DiffT>
 132:/usr/include/c++/11/bits/alloc_traits.h **** 	struct _Size<_A2, _DiffT, __void_t<typename _A2::size_type>>
 133:/usr/include/c++/11/bits/alloc_traits.h **** 	{ using type = typename _A2::size_type; };
 134:/usr/include/c++/11/bits/alloc_traits.h **** 
 135:/usr/include/c++/11/bits/alloc_traits.h ****     public:
 136:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 137:/usr/include/c++/11/bits/alloc_traits.h ****        * @brief   The allocator's const pointer type.
 138:/usr/include/c++/11/bits/alloc_traits.h ****        *
 139:/usr/include/c++/11/bits/alloc_traits.h ****        * @c Alloc::const_pointer if that type exists, otherwise
 140:/usr/include/c++/11/bits/alloc_traits.h ****        * <tt> pointer_traits<pointer>::rebind<const value_type> </tt>
 141:/usr/include/c++/11/bits/alloc_traits.h ****       */
 142:/usr/include/c++/11/bits/alloc_traits.h ****       using const_pointer = typename _Ptr<__c_pointer, const value_type>::type;
 143:/usr/include/c++/11/bits/alloc_traits.h **** 
 144:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 145:/usr/include/c++/11/bits/alloc_traits.h ****        * @brief   The allocator's void pointer type.
 146:/usr/include/c++/11/bits/alloc_traits.h ****        *
 147:/usr/include/c++/11/bits/alloc_traits.h ****        * @c Alloc::void_pointer if that type exists, otherwise
 148:/usr/include/c++/11/bits/alloc_traits.h ****        * <tt> pointer_traits<pointer>::rebind<void> </tt>
 149:/usr/include/c++/11/bits/alloc_traits.h ****       */
 150:/usr/include/c++/11/bits/alloc_traits.h ****       using void_pointer = typename _Ptr<__v_pointer, void>::type;
 151:/usr/include/c++/11/bits/alloc_traits.h **** 
 152:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 153:/usr/include/c++/11/bits/alloc_traits.h ****        * @brief   The allocator's const void pointer type.
 154:/usr/include/c++/11/bits/alloc_traits.h ****        *
 155:/usr/include/c++/11/bits/alloc_traits.h ****        * @c Alloc::const_void_pointer if that type exists, otherwise
 156:/usr/include/c++/11/bits/alloc_traits.h ****        * <tt> pointer_traits<pointer>::rebind<const void> </tt>
 157:/usr/include/c++/11/bits/alloc_traits.h ****       */
 158:/usr/include/c++/11/bits/alloc_traits.h ****       using const_void_pointer = typename _Ptr<__cv_pointer, const void>::type;
 159:/usr/include/c++/11/bits/alloc_traits.h **** 
 160:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 161:/usr/include/c++/11/bits/alloc_traits.h ****        * @brief   The allocator's difference type
 162:/usr/include/c++/11/bits/alloc_traits.h ****        *
 163:/usr/include/c++/11/bits/alloc_traits.h ****        * @c Alloc::difference_type if that type exists, otherwise
 164:/usr/include/c++/11/bits/alloc_traits.h ****        * <tt> pointer_traits<pointer>::difference_type </tt>
 165:/usr/include/c++/11/bits/alloc_traits.h ****       */
 166:/usr/include/c++/11/bits/alloc_traits.h ****       using difference_type = typename _Diff<_Alloc, pointer>::type;
 167:/usr/include/c++/11/bits/alloc_traits.h **** 
 168:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 169:/usr/include/c++/11/bits/alloc_traits.h ****        * @brief   The allocator's size type
 170:/usr/include/c++/11/bits/alloc_traits.h ****        *
 171:/usr/include/c++/11/bits/alloc_traits.h ****        * @c Alloc::size_type if that type exists, otherwise
 172:/usr/include/c++/11/bits/alloc_traits.h ****        * <tt> make_unsigned<difference_type>::type </tt>
 173:/usr/include/c++/11/bits/alloc_traits.h ****       */
 174:/usr/include/c++/11/bits/alloc_traits.h ****       using size_type = typename _Size<_Alloc, difference_type>::type;
 175:/usr/include/c++/11/bits/alloc_traits.h **** 
 176:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 177:/usr/include/c++/11/bits/alloc_traits.h ****        * @brief   How the allocator is propagated on copy assignment
 178:/usr/include/c++/11/bits/alloc_traits.h ****        *
 179:/usr/include/c++/11/bits/alloc_traits.h ****        * @c Alloc::propagate_on_container_copy_assignment if that type exists,
 180:/usr/include/c++/11/bits/alloc_traits.h ****        * otherwise @c false_type
 181:/usr/include/c++/11/bits/alloc_traits.h ****       */
 182:/usr/include/c++/11/bits/alloc_traits.h ****       using propagate_on_container_copy_assignment
 183:/usr/include/c++/11/bits/alloc_traits.h **** 	= __detected_or_t<false_type, __pocca, _Alloc>;
 184:/usr/include/c++/11/bits/alloc_traits.h **** 
 185:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 186:/usr/include/c++/11/bits/alloc_traits.h ****        * @brief   How the allocator is propagated on move assignment
 187:/usr/include/c++/11/bits/alloc_traits.h ****        *
 188:/usr/include/c++/11/bits/alloc_traits.h ****        * @c Alloc::propagate_on_container_move_assignment if that type exists,
 189:/usr/include/c++/11/bits/alloc_traits.h ****        * otherwise @c false_type
 190:/usr/include/c++/11/bits/alloc_traits.h ****       */
 191:/usr/include/c++/11/bits/alloc_traits.h ****       using propagate_on_container_move_assignment
 192:/usr/include/c++/11/bits/alloc_traits.h **** 	= __detected_or_t<false_type, __pocma, _Alloc>;
 193:/usr/include/c++/11/bits/alloc_traits.h **** 
 194:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 195:/usr/include/c++/11/bits/alloc_traits.h ****        * @brief   How the allocator is propagated on swap
 196:/usr/include/c++/11/bits/alloc_traits.h ****        *
 197:/usr/include/c++/11/bits/alloc_traits.h ****        * @c Alloc::propagate_on_container_swap if that type exists,
 198:/usr/include/c++/11/bits/alloc_traits.h ****        * otherwise @c false_type
 199:/usr/include/c++/11/bits/alloc_traits.h ****       */
 200:/usr/include/c++/11/bits/alloc_traits.h ****       using propagate_on_container_swap
 201:/usr/include/c++/11/bits/alloc_traits.h **** 	= __detected_or_t<false_type, __pocs, _Alloc>;
 202:/usr/include/c++/11/bits/alloc_traits.h **** 
 203:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 204:/usr/include/c++/11/bits/alloc_traits.h ****        * @brief   Whether all instances of the allocator type compare equal.
 205:/usr/include/c++/11/bits/alloc_traits.h ****        *
 206:/usr/include/c++/11/bits/alloc_traits.h ****        * @c Alloc::is_always_equal if that type exists,
 207:/usr/include/c++/11/bits/alloc_traits.h ****        * otherwise @c is_empty<Alloc>::type
 208:/usr/include/c++/11/bits/alloc_traits.h ****       */
 209:/usr/include/c++/11/bits/alloc_traits.h ****       using is_always_equal
 210:/usr/include/c++/11/bits/alloc_traits.h **** 	= __detected_or_t<typename is_empty<_Alloc>::type, __equal, _Alloc>;
 211:/usr/include/c++/11/bits/alloc_traits.h **** 
 212:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Tp>
 213:/usr/include/c++/11/bits/alloc_traits.h **** 	using rebind_alloc = __alloc_rebind<_Alloc, _Tp>;
 214:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Tp>
 215:/usr/include/c++/11/bits/alloc_traits.h **** 	using rebind_traits = allocator_traits<rebind_alloc<_Tp>>;
 216:/usr/include/c++/11/bits/alloc_traits.h **** 
 217:/usr/include/c++/11/bits/alloc_traits.h ****     private:
 218:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Alloc2>
 219:/usr/include/c++/11/bits/alloc_traits.h **** 	static constexpr auto
 220:/usr/include/c++/11/bits/alloc_traits.h **** 	_S_allocate(_Alloc2& __a, size_type __n, const_void_pointer __hint, int)
 221:/usr/include/c++/11/bits/alloc_traits.h **** 	-> decltype(__a.allocate(__n, __hint))
 222:/usr/include/c++/11/bits/alloc_traits.h **** 	{ return __a.allocate(__n, __hint); }
 223:/usr/include/c++/11/bits/alloc_traits.h **** 
 224:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Alloc2>
 225:/usr/include/c++/11/bits/alloc_traits.h **** 	static constexpr pointer
 226:/usr/include/c++/11/bits/alloc_traits.h **** 	_S_allocate(_Alloc2& __a, size_type __n, const_void_pointer, ...)
 227:/usr/include/c++/11/bits/alloc_traits.h **** 	{ return __a.allocate(__n); }
 228:/usr/include/c++/11/bits/alloc_traits.h **** 
 229:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 230:/usr/include/c++/11/bits/alloc_traits.h **** 	struct __construct_helper
 231:/usr/include/c++/11/bits/alloc_traits.h **** 	{
 232:/usr/include/c++/11/bits/alloc_traits.h **** 	  template<typename _Alloc2,
 233:/usr/include/c++/11/bits/alloc_traits.h **** 	    typename = decltype(std::declval<_Alloc2*>()->construct(
 234:/usr/include/c++/11/bits/alloc_traits.h **** 		  std::declval<_Tp*>(), std::declval<_Args>()...))>
 235:/usr/include/c++/11/bits/alloc_traits.h **** 	    static true_type __test(int);
 236:/usr/include/c++/11/bits/alloc_traits.h **** 
 237:/usr/include/c++/11/bits/alloc_traits.h **** 	  template<typename>
 238:/usr/include/c++/11/bits/alloc_traits.h **** 	    static false_type __test(...);
 239:/usr/include/c++/11/bits/alloc_traits.h **** 
 240:/usr/include/c++/11/bits/alloc_traits.h **** 	  using type = decltype(__test<_Alloc>(0));
 241:/usr/include/c++/11/bits/alloc_traits.h **** 	};
 242:/usr/include/c++/11/bits/alloc_traits.h **** 
 243:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 244:/usr/include/c++/11/bits/alloc_traits.h **** 	using __has_construct
 245:/usr/include/c++/11/bits/alloc_traits.h **** 	  = typename __construct_helper<_Tp, _Args...>::type;
 246:/usr/include/c++/11/bits/alloc_traits.h **** 
 247:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 248:/usr/include/c++/11/bits/alloc_traits.h **** 	static _GLIBCXX14_CONSTEXPR _Require<__has_construct<_Tp, _Args...>>
 249:/usr/include/c++/11/bits/alloc_traits.h **** 	_S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 250:/usr/include/c++/11/bits/alloc_traits.h **** 	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
 251:/usr/include/c++/11/bits/alloc_traits.h **** 	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 252:/usr/include/c++/11/bits/alloc_traits.h **** 
 253:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 254:/usr/include/c++/11/bits/alloc_traits.h **** 	static _GLIBCXX14_CONSTEXPR
 255:/usr/include/c++/11/bits/alloc_traits.h **** 	_Require<__and_<__not_<__has_construct<_Tp, _Args...>>,
 256:/usr/include/c++/11/bits/alloc_traits.h **** 			       is_constructible<_Tp, _Args...>>>
 257:/usr/include/c++/11/bits/alloc_traits.h **** 	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 258:/usr/include/c++/11/bits/alloc_traits.h **** 	noexcept(std::is_nothrow_constructible<_Tp, _Args...>::value)
 259:/usr/include/c++/11/bits/alloc_traits.h **** 	{
 260:/usr/include/c++/11/bits/alloc_traits.h **** #if __cplusplus <= 201703L
 261:/usr/include/c++/11/bits/alloc_traits.h **** 	  ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 262:/usr/include/c++/11/bits/alloc_traits.h **** #else
 263:/usr/include/c++/11/bits/alloc_traits.h **** 	  std::construct_at(__p, std::forward<_Args>(__args)...);
 264:/usr/include/c++/11/bits/alloc_traits.h **** #endif
 265:/usr/include/c++/11/bits/alloc_traits.h **** 	}
 266:/usr/include/c++/11/bits/alloc_traits.h **** 
 267:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Alloc2, typename _Tp>
 268:/usr/include/c++/11/bits/alloc_traits.h **** 	static _GLIBCXX14_CONSTEXPR auto
 269:/usr/include/c++/11/bits/alloc_traits.h **** 	_S_destroy(_Alloc2& __a, _Tp* __p, int)
 270:/usr/include/c++/11/bits/alloc_traits.h **** 	noexcept(noexcept(__a.destroy(__p)))
 271:/usr/include/c++/11/bits/alloc_traits.h **** 	-> decltype(__a.destroy(__p))
 272:/usr/include/c++/11/bits/alloc_traits.h **** 	{ __a.destroy(__p); }
 273:/usr/include/c++/11/bits/alloc_traits.h **** 
 274:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Alloc2, typename _Tp>
 275:/usr/include/c++/11/bits/alloc_traits.h **** 	static _GLIBCXX14_CONSTEXPR void
 276:/usr/include/c++/11/bits/alloc_traits.h **** 	_S_destroy(_Alloc2&, _Tp* __p, ...)
 277:/usr/include/c++/11/bits/alloc_traits.h **** 	noexcept(std::is_nothrow_destructible<_Tp>::value)
 278:/usr/include/c++/11/bits/alloc_traits.h **** 	{ std::_Destroy(__p); }
 279:/usr/include/c++/11/bits/alloc_traits.h **** 
 280:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Alloc2>
 281:/usr/include/c++/11/bits/alloc_traits.h **** 	static constexpr auto
 282:/usr/include/c++/11/bits/alloc_traits.h **** 	_S_max_size(_Alloc2& __a, int)
 283:/usr/include/c++/11/bits/alloc_traits.h **** 	-> decltype(__a.max_size())
 284:/usr/include/c++/11/bits/alloc_traits.h **** 	{ return __a.max_size(); }
 285:/usr/include/c++/11/bits/alloc_traits.h **** 
 286:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Alloc2>
 287:/usr/include/c++/11/bits/alloc_traits.h **** 	static constexpr size_type
 288:/usr/include/c++/11/bits/alloc_traits.h **** 	_S_max_size(_Alloc2&, ...)
 289:/usr/include/c++/11/bits/alloc_traits.h **** 	{
 290:/usr/include/c++/11/bits/alloc_traits.h **** 	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
 291:/usr/include/c++/11/bits/alloc_traits.h **** 	  // 2466. allocator_traits::max_size() default behavior is incorrect
 292:/usr/include/c++/11/bits/alloc_traits.h **** 	  return __gnu_cxx::__numeric_traits<size_type>::__max
 293:/usr/include/c++/11/bits/alloc_traits.h **** 	    / sizeof(value_type);
 294:/usr/include/c++/11/bits/alloc_traits.h **** 	}
 295:/usr/include/c++/11/bits/alloc_traits.h **** 
 296:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Alloc2>
 297:/usr/include/c++/11/bits/alloc_traits.h **** 	static constexpr auto
 298:/usr/include/c++/11/bits/alloc_traits.h **** 	_S_select(_Alloc2& __a, int)
 299:/usr/include/c++/11/bits/alloc_traits.h **** 	-> decltype(__a.select_on_container_copy_construction())
 300:/usr/include/c++/11/bits/alloc_traits.h **** 	{ return __a.select_on_container_copy_construction(); }
 301:/usr/include/c++/11/bits/alloc_traits.h **** 
 302:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Alloc2>
 303:/usr/include/c++/11/bits/alloc_traits.h **** 	static constexpr _Alloc2
 304:/usr/include/c++/11/bits/alloc_traits.h **** 	_S_select(_Alloc2& __a, ...)
 305:/usr/include/c++/11/bits/alloc_traits.h **** 	{ return __a; }
 306:/usr/include/c++/11/bits/alloc_traits.h **** 
 307:/usr/include/c++/11/bits/alloc_traits.h ****     public:
 308:/usr/include/c++/11/bits/alloc_traits.h **** 
 309:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 310:/usr/include/c++/11/bits/alloc_traits.h ****        *  @brief  Allocate memory.
 311:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 312:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 313:/usr/include/c++/11/bits/alloc_traits.h ****        *
 314:/usr/include/c++/11/bits/alloc_traits.h ****        *  Calls @c a.allocate(n)
 315:/usr/include/c++/11/bits/alloc_traits.h ****       */
 316:/usr/include/c++/11/bits/alloc_traits.h ****       _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
 317:/usr/include/c++/11/bits/alloc_traits.h ****       allocate(_Alloc& __a, size_type __n)
 318:/usr/include/c++/11/bits/alloc_traits.h ****       { return __a.allocate(__n); }
 319:/usr/include/c++/11/bits/alloc_traits.h **** 
 320:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 321:/usr/include/c++/11/bits/alloc_traits.h ****        *  @brief  Allocate memory.
 322:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 323:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 324:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __hint Aid to locality.
 325:/usr/include/c++/11/bits/alloc_traits.h ****        *  @return Memory of suitable size and alignment for @a n objects
 326:/usr/include/c++/11/bits/alloc_traits.h ****        *          of type @c value_type
 327:/usr/include/c++/11/bits/alloc_traits.h ****        *
 328:/usr/include/c++/11/bits/alloc_traits.h ****        *  Returns <tt> a.allocate(n, hint) </tt> if that expression is
 329:/usr/include/c++/11/bits/alloc_traits.h ****        *  well-formed, otherwise returns @c a.allocate(n)
 330:/usr/include/c++/11/bits/alloc_traits.h ****       */
 331:/usr/include/c++/11/bits/alloc_traits.h ****       _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
 332:/usr/include/c++/11/bits/alloc_traits.h ****       allocate(_Alloc& __a, size_type __n, const_void_pointer __hint)
 333:/usr/include/c++/11/bits/alloc_traits.h ****       { return _S_allocate(__a, __n, __hint, 0); }
 334:/usr/include/c++/11/bits/alloc_traits.h **** 
 335:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 336:/usr/include/c++/11/bits/alloc_traits.h ****        *  @brief  Deallocate memory.
 337:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 338:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __p  Pointer to the memory to deallocate.
 339:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __n  The number of objects space was allocated for.
 340:/usr/include/c++/11/bits/alloc_traits.h ****        *
 341:/usr/include/c++/11/bits/alloc_traits.h ****        *  Calls <tt> a.deallocate(p, n) </tt>
 342:/usr/include/c++/11/bits/alloc_traits.h ****       */
 343:/usr/include/c++/11/bits/alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR void
 344:/usr/include/c++/11/bits/alloc_traits.h ****       deallocate(_Alloc& __a, pointer __p, size_type __n)
 345:/usr/include/c++/11/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 346:/usr/include/c++/11/bits/alloc_traits.h **** 
 347:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 348:/usr/include/c++/11/bits/alloc_traits.h ****        *  @brief  Construct an object of type `_Tp`
 349:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 350:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __p  Pointer to memory of suitable size and alignment for Tp
 351:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __args Constructor arguments.
 352:/usr/include/c++/11/bits/alloc_traits.h ****        *
 353:/usr/include/c++/11/bits/alloc_traits.h ****        *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
 354:/usr/include/c++/11/bits/alloc_traits.h ****        *  if that expression is well-formed, otherwise uses placement-new
 355:/usr/include/c++/11/bits/alloc_traits.h ****        *  to construct an object of type @a _Tp at location @a __p from the
 356:/usr/include/c++/11/bits/alloc_traits.h ****        *  arguments @a __args...
 357:/usr/include/c++/11/bits/alloc_traits.h ****       */
 358:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 359:/usr/include/c++/11/bits/alloc_traits.h **** 	static _GLIBCXX20_CONSTEXPR auto
 360:/usr/include/c++/11/bits/alloc_traits.h **** 	construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 361:/usr/include/c++/11/bits/alloc_traits.h **** 	noexcept(noexcept(_S_construct(__a, __p,
 362:/usr/include/c++/11/bits/alloc_traits.h **** 				       std::forward<_Args>(__args)...)))
 363:/usr/include/c++/11/bits/alloc_traits.h **** 	-> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))
 364:/usr/include/c++/11/bits/alloc_traits.h **** 	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 365:/usr/include/c++/11/bits/alloc_traits.h **** 
 366:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 367:/usr/include/c++/11/bits/alloc_traits.h ****        *  @brief  Destroy an object of type @a _Tp
 368:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 369:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __p  Pointer to the object to destroy
 370:/usr/include/c++/11/bits/alloc_traits.h ****        *
 371:/usr/include/c++/11/bits/alloc_traits.h ****        *  Calls @c __a.destroy(__p) if that expression is well-formed,
 372:/usr/include/c++/11/bits/alloc_traits.h ****        *  otherwise calls @c __p->~_Tp()
 373:/usr/include/c++/11/bits/alloc_traits.h ****       */
 374:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Tp>
 375:/usr/include/c++/11/bits/alloc_traits.h **** 	static _GLIBCXX20_CONSTEXPR void
 376:/usr/include/c++/11/bits/alloc_traits.h **** 	destroy(_Alloc& __a, _Tp* __p)
 377:/usr/include/c++/11/bits/alloc_traits.h **** 	noexcept(noexcept(_S_destroy(__a, __p, 0)))
 378:/usr/include/c++/11/bits/alloc_traits.h **** 	{ _S_destroy(__a, __p, 0); }
 379:/usr/include/c++/11/bits/alloc_traits.h **** 
 380:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 381:/usr/include/c++/11/bits/alloc_traits.h ****        *  @brief  The maximum supported allocation size
 382:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 383:/usr/include/c++/11/bits/alloc_traits.h ****        *  @return @c __a.max_size() or @c numeric_limits<size_type>::max()
 384:/usr/include/c++/11/bits/alloc_traits.h ****        *
 385:/usr/include/c++/11/bits/alloc_traits.h ****        *  Returns @c __a.max_size() if that expression is well-formed,
 386:/usr/include/c++/11/bits/alloc_traits.h ****        *  otherwise returns @c numeric_limits<size_type>::max()
 387:/usr/include/c++/11/bits/alloc_traits.h ****       */
 388:/usr/include/c++/11/bits/alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR size_type
 389:/usr/include/c++/11/bits/alloc_traits.h ****       max_size(const _Alloc& __a) noexcept
 390:/usr/include/c++/11/bits/alloc_traits.h ****       { return _S_max_size(__a, 0); }
 391:/usr/include/c++/11/bits/alloc_traits.h **** 
 392:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 393:/usr/include/c++/11/bits/alloc_traits.h ****        *  @brief  Obtain an allocator to use when copying a container.
 394:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __rhs  An allocator.
 395:/usr/include/c++/11/bits/alloc_traits.h ****        *  @return @c __rhs.select_on_container_copy_construction() or @a __rhs
 396:/usr/include/c++/11/bits/alloc_traits.h ****        *
 397:/usr/include/c++/11/bits/alloc_traits.h ****        *  Returns @c __rhs.select_on_container_copy_construction() if that
 398:/usr/include/c++/11/bits/alloc_traits.h ****        *  expression is well-formed, otherwise returns @a __rhs
 399:/usr/include/c++/11/bits/alloc_traits.h ****       */
 400:/usr/include/c++/11/bits/alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR _Alloc
 401:/usr/include/c++/11/bits/alloc_traits.h ****       select_on_container_copy_construction(const _Alloc& __rhs)
 402:/usr/include/c++/11/bits/alloc_traits.h ****       { return _S_select(__rhs, 0); }
 403:/usr/include/c++/11/bits/alloc_traits.h ****     };
 404:/usr/include/c++/11/bits/alloc_traits.h **** 
 405:/usr/include/c++/11/bits/alloc_traits.h **** #if __cplusplus > 201703L
 406:/usr/include/c++/11/bits/alloc_traits.h **** # define __cpp_lib_constexpr_dynamic_alloc 201907L
 407:/usr/include/c++/11/bits/alloc_traits.h **** #endif
 408:/usr/include/c++/11/bits/alloc_traits.h **** 
 409:/usr/include/c++/11/bits/alloc_traits.h ****   /// Partial specialization for std::allocator.
 410:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Tp>
 411:/usr/include/c++/11/bits/alloc_traits.h ****     struct allocator_traits<allocator<_Tp>>
 412:/usr/include/c++/11/bits/alloc_traits.h ****     {
 413:/usr/include/c++/11/bits/alloc_traits.h ****       /// The allocator type
 414:/usr/include/c++/11/bits/alloc_traits.h ****       using allocator_type = allocator<_Tp>;
 415:/usr/include/c++/11/bits/alloc_traits.h **** 
 416:/usr/include/c++/11/bits/alloc_traits.h ****       /// The allocated type
 417:/usr/include/c++/11/bits/alloc_traits.h ****       using value_type = _Tp;
 418:/usr/include/c++/11/bits/alloc_traits.h **** 
 419:/usr/include/c++/11/bits/alloc_traits.h ****       /// The allocator's pointer type.
 420:/usr/include/c++/11/bits/alloc_traits.h ****       using pointer = _Tp*;
 421:/usr/include/c++/11/bits/alloc_traits.h **** 
 422:/usr/include/c++/11/bits/alloc_traits.h ****       /// The allocator's const pointer type.
 423:/usr/include/c++/11/bits/alloc_traits.h ****       using const_pointer = const _Tp*;
 424:/usr/include/c++/11/bits/alloc_traits.h **** 
 425:/usr/include/c++/11/bits/alloc_traits.h ****       /// The allocator's void pointer type.
 426:/usr/include/c++/11/bits/alloc_traits.h ****       using void_pointer = void*;
 427:/usr/include/c++/11/bits/alloc_traits.h **** 
 428:/usr/include/c++/11/bits/alloc_traits.h ****       /// The allocator's const void pointer type.
 429:/usr/include/c++/11/bits/alloc_traits.h ****       using const_void_pointer = const void*;
 430:/usr/include/c++/11/bits/alloc_traits.h **** 
 431:/usr/include/c++/11/bits/alloc_traits.h ****       /// The allocator's difference type
 432:/usr/include/c++/11/bits/alloc_traits.h ****       using difference_type = std::ptrdiff_t;
 433:/usr/include/c++/11/bits/alloc_traits.h **** 
 434:/usr/include/c++/11/bits/alloc_traits.h ****       /// The allocator's size type
 435:/usr/include/c++/11/bits/alloc_traits.h ****       using size_type = std::size_t;
 436:/usr/include/c++/11/bits/alloc_traits.h **** 
 437:/usr/include/c++/11/bits/alloc_traits.h ****       /// How the allocator is propagated on copy assignment
 438:/usr/include/c++/11/bits/alloc_traits.h ****       using propagate_on_container_copy_assignment = false_type;
 439:/usr/include/c++/11/bits/alloc_traits.h **** 
 440:/usr/include/c++/11/bits/alloc_traits.h ****       /// How the allocator is propagated on move assignment
 441:/usr/include/c++/11/bits/alloc_traits.h ****       using propagate_on_container_move_assignment = true_type;
 442:/usr/include/c++/11/bits/alloc_traits.h **** 
 443:/usr/include/c++/11/bits/alloc_traits.h ****       /// How the allocator is propagated on swap
 444:/usr/include/c++/11/bits/alloc_traits.h ****       using propagate_on_container_swap = false_type;
 445:/usr/include/c++/11/bits/alloc_traits.h **** 
 446:/usr/include/c++/11/bits/alloc_traits.h ****       /// Whether all instances of the allocator type compare equal.
 447:/usr/include/c++/11/bits/alloc_traits.h ****       using is_always_equal = true_type;
 448:/usr/include/c++/11/bits/alloc_traits.h **** 
 449:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Up>
 450:/usr/include/c++/11/bits/alloc_traits.h **** 	using rebind_alloc = allocator<_Up>;
 451:/usr/include/c++/11/bits/alloc_traits.h **** 
 452:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Up>
 453:/usr/include/c++/11/bits/alloc_traits.h **** 	using rebind_traits = allocator_traits<allocator<_Up>>;
 454:/usr/include/c++/11/bits/alloc_traits.h **** 
 455:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 456:/usr/include/c++/11/bits/alloc_traits.h ****        *  @brief  Allocate memory.
 457:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 458:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 459:/usr/include/c++/11/bits/alloc_traits.h ****        *
 460:/usr/include/c++/11/bits/alloc_traits.h ****        *  Calls @c a.allocate(n)
 461:/usr/include/c++/11/bits/alloc_traits.h ****       */
 462:/usr/include/c++/11/bits/alloc_traits.h ****       _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
 463:/usr/include/c++/11/bits/alloc_traits.h ****       allocate(allocator_type& __a, size_type __n)
 464:/usr/include/c++/11/bits/alloc_traits.h ****       { return __a.allocate(__n); }
 465:/usr/include/c++/11/bits/alloc_traits.h **** 
 466:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 467:/usr/include/c++/11/bits/alloc_traits.h ****        *  @brief  Allocate memory.
 468:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 469:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 470:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __hint Aid to locality.
 471:/usr/include/c++/11/bits/alloc_traits.h ****        *  @return Memory of suitable size and alignment for @a n objects
 472:/usr/include/c++/11/bits/alloc_traits.h ****        *          of type @c value_type
 473:/usr/include/c++/11/bits/alloc_traits.h ****        *
 474:/usr/include/c++/11/bits/alloc_traits.h ****        *  Returns <tt> a.allocate(n, hint) </tt>
 475:/usr/include/c++/11/bits/alloc_traits.h ****       */
 476:/usr/include/c++/11/bits/alloc_traits.h ****       _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
 477:/usr/include/c++/11/bits/alloc_traits.h ****       allocate(allocator_type& __a, size_type __n, const_void_pointer __hint)
 478:/usr/include/c++/11/bits/alloc_traits.h ****       {
 479:/usr/include/c++/11/bits/alloc_traits.h **** #if __cplusplus <= 201703L
 480:/usr/include/c++/11/bits/alloc_traits.h **** 	return __a.allocate(__n, __hint);
 481:/usr/include/c++/11/bits/alloc_traits.h **** #else
 482:/usr/include/c++/11/bits/alloc_traits.h **** 	return __a.allocate(__n);
 483:/usr/include/c++/11/bits/alloc_traits.h **** #endif
 484:/usr/include/c++/11/bits/alloc_traits.h ****       }
 485:/usr/include/c++/11/bits/alloc_traits.h **** 
 486:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 487:/usr/include/c++/11/bits/alloc_traits.h ****        *  @brief  Deallocate memory.
 488:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 489:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __p  Pointer to the memory to deallocate.
 490:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __n  The number of objects space was allocated for.
 491:/usr/include/c++/11/bits/alloc_traits.h ****        *
 492:/usr/include/c++/11/bits/alloc_traits.h ****        *  Calls <tt> a.deallocate(p, n) </tt>
 493:/usr/include/c++/11/bits/alloc_traits.h ****       */
 494:/usr/include/c++/11/bits/alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR void
 495:/usr/include/c++/11/bits/alloc_traits.h ****       deallocate(allocator_type& __a, pointer __p, size_type __n)
 496:/usr/include/c++/11/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 497:/usr/include/c++/11/bits/alloc_traits.h **** 
 498:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 499:/usr/include/c++/11/bits/alloc_traits.h ****        *  @brief  Construct an object of type `_Up`
 500:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 501:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __p  Pointer to memory of suitable size and alignment for
 502:/usr/include/c++/11/bits/alloc_traits.h ****        *	       an object of type `_Up`.
 503:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __args Constructor arguments.
 504:/usr/include/c++/11/bits/alloc_traits.h ****        *
 505:/usr/include/c++/11/bits/alloc_traits.h ****        *  Calls `__a.construct(__p, std::forward<_Args>(__args)...)`
 506:/usr/include/c++/11/bits/alloc_traits.h ****        *  in C++11, C++14 and C++17. Changed in C++20 to call
 507:/usr/include/c++/11/bits/alloc_traits.h ****        *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
 508:/usr/include/c++/11/bits/alloc_traits.h ****       */
 509:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Up, typename... _Args>
 510:/usr/include/c++/11/bits/alloc_traits.h **** 	static _GLIBCXX20_CONSTEXPR void
 511:/usr/include/c++/11/bits/alloc_traits.h **** 	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 512:/usr/include/c++/11/bits/alloc_traits.h **** 		  _Args&&... __args)
 513:/usr/include/c++/11/bits/alloc_traits.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 514:/usr/include/c++/11/bits/alloc_traits.h **** 	{
 515:/usr/include/c++/11/bits/alloc_traits.h **** #if __cplusplus <= 201703L
 516:/usr/include/c++/11/bits/alloc_traits.h **** 	  __a.construct(__p, std::forward<_Args>(__args)...);
 517:/usr/include/c++/11/bits/alloc_traits.h **** #else
 518:/usr/include/c++/11/bits/alloc_traits.h **** 	  std::construct_at(__p, std::forward<_Args>(__args)...);
 519:/usr/include/c++/11/bits/alloc_traits.h **** #endif
 520:/usr/include/c++/11/bits/alloc_traits.h **** 	}
 521:/usr/include/c++/11/bits/alloc_traits.h **** 
 522:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 523:/usr/include/c++/11/bits/alloc_traits.h ****        *  @brief  Destroy an object of type @a _Up
 524:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 525:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __p  Pointer to the object to destroy
 526:/usr/include/c++/11/bits/alloc_traits.h ****        *
 527:/usr/include/c++/11/bits/alloc_traits.h ****        *  Calls @c __a.destroy(__p).
 528:/usr/include/c++/11/bits/alloc_traits.h ****       */
 529:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Up>
 530:/usr/include/c++/11/bits/alloc_traits.h **** 	static _GLIBCXX20_CONSTEXPR void
 531:/usr/include/c++/11/bits/alloc_traits.h **** 	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 532:/usr/include/c++/11/bits/alloc_traits.h **** 	noexcept(is_nothrow_destructible<_Up>::value)
 533:/usr/include/c++/11/bits/alloc_traits.h **** 	{
 534:/usr/include/c++/11/bits/alloc_traits.h **** #if __cplusplus <= 201703L
 535:/usr/include/c++/11/bits/alloc_traits.h **** 	  __a.destroy(__p);
 536:/usr/include/c++/11/bits/alloc_traits.h **** #else
 537:/usr/include/c++/11/bits/alloc_traits.h **** 	  std::destroy_at(__p);
 538:/usr/include/c++/11/bits/alloc_traits.h **** #endif
 539:/usr/include/c++/11/bits/alloc_traits.h **** 	}
 540:/usr/include/c++/11/bits/alloc_traits.h **** 
 541:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 542:/usr/include/c++/11/bits/alloc_traits.h ****        *  @brief  The maximum supported allocation size
 543:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 544:/usr/include/c++/11/bits/alloc_traits.h ****        *  @return @c __a.max_size()
 545:/usr/include/c++/11/bits/alloc_traits.h ****       */
 546:/usr/include/c++/11/bits/alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR size_type
 547:/usr/include/c++/11/bits/alloc_traits.h ****       max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 548:/usr/include/c++/11/bits/alloc_traits.h ****       {
 549:/usr/include/c++/11/bits/alloc_traits.h **** #if __cplusplus <= 201703L
 550:/usr/include/c++/11/bits/alloc_traits.h **** 	return __a.max_size();
 551:/usr/include/c++/11/bits/alloc_traits.h **** #else
 552:/usr/include/c++/11/bits/alloc_traits.h **** 	return size_t(-1) / sizeof(value_type);
 553:/usr/include/c++/11/bits/alloc_traits.h **** #endif
 554:/usr/include/c++/11/bits/alloc_traits.h ****       }
 555:/usr/include/c++/11/bits/alloc_traits.h **** 
 556:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 557:/usr/include/c++/11/bits/alloc_traits.h ****        *  @brief  Obtain an allocator to use when copying a container.
 558:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __rhs  An allocator.
 559:/usr/include/c++/11/bits/alloc_traits.h ****        *  @return @c __rhs
 560:/usr/include/c++/11/bits/alloc_traits.h ****       */
 561:/usr/include/c++/11/bits/alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR allocator_type
 562:/usr/include/c++/11/bits/alloc_traits.h ****       select_on_container_copy_construction(const allocator_type& __rhs)
 563:/usr/include/c++/11/bits/alloc_traits.h ****       { return __rhs; }
 564:/usr/include/c++/11/bits/alloc_traits.h ****     };
 565:/usr/include/c++/11/bits/alloc_traits.h **** 
 566:/usr/include/c++/11/bits/alloc_traits.h ****   /// Explicit specialization for std::allocator<void>.
 567:/usr/include/c++/11/bits/alloc_traits.h ****   template<>
 568:/usr/include/c++/11/bits/alloc_traits.h ****     struct allocator_traits<allocator<void>>
 569:/usr/include/c++/11/bits/alloc_traits.h ****     {
 570:/usr/include/c++/11/bits/alloc_traits.h ****       /// The allocator type
 571:/usr/include/c++/11/bits/alloc_traits.h ****       using allocator_type = allocator<void>;
 572:/usr/include/c++/11/bits/alloc_traits.h **** 
 573:/usr/include/c++/11/bits/alloc_traits.h ****       /// The allocated type
 574:/usr/include/c++/11/bits/alloc_traits.h ****       using value_type = void;
 575:/usr/include/c++/11/bits/alloc_traits.h **** 
 576:/usr/include/c++/11/bits/alloc_traits.h ****       /// The allocator's pointer type.
 577:/usr/include/c++/11/bits/alloc_traits.h ****       using pointer = void*;
 578:/usr/include/c++/11/bits/alloc_traits.h **** 
 579:/usr/include/c++/11/bits/alloc_traits.h ****       /// The allocator's const pointer type.
 580:/usr/include/c++/11/bits/alloc_traits.h ****       using const_pointer = const void*;
 581:/usr/include/c++/11/bits/alloc_traits.h **** 
 582:/usr/include/c++/11/bits/alloc_traits.h ****       /// The allocator's void pointer type.
 583:/usr/include/c++/11/bits/alloc_traits.h ****       using void_pointer = void*;
 584:/usr/include/c++/11/bits/alloc_traits.h **** 
 585:/usr/include/c++/11/bits/alloc_traits.h ****       /// The allocator's const void pointer type.
 586:/usr/include/c++/11/bits/alloc_traits.h ****       using const_void_pointer = const void*;
 587:/usr/include/c++/11/bits/alloc_traits.h **** 
 588:/usr/include/c++/11/bits/alloc_traits.h ****       /// The allocator's difference type
 589:/usr/include/c++/11/bits/alloc_traits.h ****       using difference_type = std::ptrdiff_t;
 590:/usr/include/c++/11/bits/alloc_traits.h **** 
 591:/usr/include/c++/11/bits/alloc_traits.h ****       /// The allocator's size type
 592:/usr/include/c++/11/bits/alloc_traits.h ****       using size_type = std::size_t;
 593:/usr/include/c++/11/bits/alloc_traits.h **** 
 594:/usr/include/c++/11/bits/alloc_traits.h ****       /// How the allocator is propagated on copy assignment
 595:/usr/include/c++/11/bits/alloc_traits.h ****       using propagate_on_container_copy_assignment = false_type;
 596:/usr/include/c++/11/bits/alloc_traits.h **** 
 597:/usr/include/c++/11/bits/alloc_traits.h ****       /// How the allocator is propagated on move assignment
 598:/usr/include/c++/11/bits/alloc_traits.h ****       using propagate_on_container_move_assignment = true_type;
 599:/usr/include/c++/11/bits/alloc_traits.h **** 
 600:/usr/include/c++/11/bits/alloc_traits.h ****       /// How the allocator is propagated on swap
 601:/usr/include/c++/11/bits/alloc_traits.h ****       using propagate_on_container_swap = false_type;
 602:/usr/include/c++/11/bits/alloc_traits.h **** 
 603:/usr/include/c++/11/bits/alloc_traits.h ****       /// Whether all instances of the allocator type compare equal.
 604:/usr/include/c++/11/bits/alloc_traits.h ****       using is_always_equal = true_type;
 605:/usr/include/c++/11/bits/alloc_traits.h **** 
 606:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Up>
 607:/usr/include/c++/11/bits/alloc_traits.h **** 	using rebind_alloc = allocator<_Up>;
 608:/usr/include/c++/11/bits/alloc_traits.h **** 
 609:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Up>
 610:/usr/include/c++/11/bits/alloc_traits.h **** 	using rebind_traits = allocator_traits<allocator<_Up>>;
 611:/usr/include/c++/11/bits/alloc_traits.h **** 
 612:/usr/include/c++/11/bits/alloc_traits.h ****       /// allocate is ill-formed for allocator<void>
 613:/usr/include/c++/11/bits/alloc_traits.h ****       static void*
 614:/usr/include/c++/11/bits/alloc_traits.h ****       allocate(allocator_type&, size_type, const void* = nullptr) = delete;
 615:/usr/include/c++/11/bits/alloc_traits.h **** 
 616:/usr/include/c++/11/bits/alloc_traits.h ****       /// deallocate is ill-formed for allocator<void>
 617:/usr/include/c++/11/bits/alloc_traits.h ****       static void
 618:/usr/include/c++/11/bits/alloc_traits.h ****       deallocate(allocator_type&, void*, size_type) = delete;
 619:/usr/include/c++/11/bits/alloc_traits.h **** 
 620:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 621:/usr/include/c++/11/bits/alloc_traits.h ****        *  @brief  Construct an object of type `_Up`
 622:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 623:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __p  Pointer to memory of suitable size and alignment for
 624:/usr/include/c++/11/bits/alloc_traits.h ****        *	       an object of type `_Up`.
 625:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __args Constructor arguments.
 626:/usr/include/c++/11/bits/alloc_traits.h ****        *
 627:/usr/include/c++/11/bits/alloc_traits.h ****        *  Calls `__a.construct(__p, std::forward<_Args>(__args)...)`
 628:/usr/include/c++/11/bits/alloc_traits.h ****        *  in C++11, C++14 and C++17. Changed in C++20 to call
 629:/usr/include/c++/11/bits/alloc_traits.h ****        *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
 630:/usr/include/c++/11/bits/alloc_traits.h ****       */
 631:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Up, typename... _Args>
 632:/usr/include/c++/11/bits/alloc_traits.h **** 	static _GLIBCXX20_CONSTEXPR void
 633:/usr/include/c++/11/bits/alloc_traits.h **** 	construct(allocator_type&, _Up* __p, _Args&&... __args)
 634:/usr/include/c++/11/bits/alloc_traits.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 635:/usr/include/c++/11/bits/alloc_traits.h **** 	{ std::_Construct(__p, std::forward<_Args>(__args)...); }
 636:/usr/include/c++/11/bits/alloc_traits.h **** 
 637:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 638:/usr/include/c++/11/bits/alloc_traits.h ****        *  @brief  Destroy an object of type `_Up`
 639:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 640:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __p  Pointer to the object to destroy
 641:/usr/include/c++/11/bits/alloc_traits.h ****        *
 642:/usr/include/c++/11/bits/alloc_traits.h ****        *  Invokes the destructor for `*__p`.
 643:/usr/include/c++/11/bits/alloc_traits.h ****       */
 644:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Up>
 645:/usr/include/c++/11/bits/alloc_traits.h **** 	static _GLIBCXX20_CONSTEXPR void
 646:/usr/include/c++/11/bits/alloc_traits.h **** 	destroy(allocator_type&, _Up* __p)
 647:/usr/include/c++/11/bits/alloc_traits.h **** 	noexcept(is_nothrow_destructible<_Up>::value)
 648:/usr/include/c++/11/bits/alloc_traits.h **** 	{ std::_Destroy(__p); }
 649:/usr/include/c++/11/bits/alloc_traits.h **** 
 650:/usr/include/c++/11/bits/alloc_traits.h ****       /// max_size is ill-formed for allocator<void>
 651:/usr/include/c++/11/bits/alloc_traits.h ****       static size_type
 652:/usr/include/c++/11/bits/alloc_traits.h ****       max_size(const allocator_type&) = delete;
 653:/usr/include/c++/11/bits/alloc_traits.h **** 
 654:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 655:/usr/include/c++/11/bits/alloc_traits.h ****        *  @brief  Obtain an allocator to use when copying a container.
 656:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __rhs  An allocator.
 657:/usr/include/c++/11/bits/alloc_traits.h ****        *  @return `__rhs`
 658:/usr/include/c++/11/bits/alloc_traits.h ****       */
 659:/usr/include/c++/11/bits/alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR allocator_type
 660:/usr/include/c++/11/bits/alloc_traits.h ****       select_on_container_copy_construction(const allocator_type& __rhs)
 661:/usr/include/c++/11/bits/alloc_traits.h ****       { return __rhs; }
 662:/usr/include/c++/11/bits/alloc_traits.h ****     };
 663:/usr/include/c++/11/bits/alloc_traits.h **** 
 664:/usr/include/c++/11/bits/alloc_traits.h **** #if __cplusplus < 201703L
 665:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc>
 666:/usr/include/c++/11/bits/alloc_traits.h ****     inline void
 667:/usr/include/c++/11/bits/alloc_traits.h ****     __do_alloc_on_copy(_Alloc& __one, const _Alloc& __two, true_type)
 668:/usr/include/c++/11/bits/alloc_traits.h ****     { __one = __two; }
 669:/usr/include/c++/11/bits/alloc_traits.h **** 
 670:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc>
 671:/usr/include/c++/11/bits/alloc_traits.h ****     inline void
 672:/usr/include/c++/11/bits/alloc_traits.h ****     __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
 673:/usr/include/c++/11/bits/alloc_traits.h ****     { }
 674:/usr/include/c++/11/bits/alloc_traits.h **** #endif
 675:/usr/include/c++/11/bits/alloc_traits.h **** 
 676:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc>
 677:/usr/include/c++/11/bits/alloc_traits.h ****     _GLIBCXX14_CONSTEXPR inline void
 678:/usr/include/c++/11/bits/alloc_traits.h ****     __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
 679:/usr/include/c++/11/bits/alloc_traits.h ****     {
 680:/usr/include/c++/11/bits/alloc_traits.h ****       typedef allocator_traits<_Alloc> __traits;
 681:/usr/include/c++/11/bits/alloc_traits.h ****       typedef typename __traits::propagate_on_container_copy_assignment __pocca;
 682:/usr/include/c++/11/bits/alloc_traits.h **** #if __cplusplus >= 201703L
 683:/usr/include/c++/11/bits/alloc_traits.h ****       if constexpr (__pocca::value)
 684:/usr/include/c++/11/bits/alloc_traits.h **** 	__one = __two;
 685:/usr/include/c++/11/bits/alloc_traits.h **** #else
 686:/usr/include/c++/11/bits/alloc_traits.h ****       __do_alloc_on_copy(__one, __two, __pocca());
 687:/usr/include/c++/11/bits/alloc_traits.h **** #endif
 688:/usr/include/c++/11/bits/alloc_traits.h ****     }
 689:/usr/include/c++/11/bits/alloc_traits.h **** 
 690:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc>
 691:/usr/include/c++/11/bits/alloc_traits.h ****     constexpr _Alloc
 692:/usr/include/c++/11/bits/alloc_traits.h ****     __alloc_on_copy(const _Alloc& __a)
 693:/usr/include/c++/11/bits/alloc_traits.h ****     {
 694:/usr/include/c++/11/bits/alloc_traits.h ****       typedef allocator_traits<_Alloc> __traits;
 695:/usr/include/c++/11/bits/alloc_traits.h ****       return __traits::select_on_container_copy_construction(__a);
 696:/usr/include/c++/11/bits/alloc_traits.h ****     }
 697:/usr/include/c++/11/bits/alloc_traits.h **** 
 698:/usr/include/c++/11/bits/alloc_traits.h **** #if __cplusplus < 201703L
 699:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc>
 700:/usr/include/c++/11/bits/alloc_traits.h ****     inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 701:/usr/include/c++/11/bits/alloc_traits.h ****     { __one = std::move(__two); }
 702:/usr/include/c++/11/bits/alloc_traits.h **** 
 703:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc>
 704:/usr/include/c++/11/bits/alloc_traits.h ****     inline void __do_alloc_on_move(_Alloc&, _Alloc&, false_type)
 705:/usr/include/c++/11/bits/alloc_traits.h ****     { }
 706:/usr/include/c++/11/bits/alloc_traits.h **** #endif
 707:/usr/include/c++/11/bits/alloc_traits.h **** 
 708:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc>
 709:/usr/include/c++/11/bits/alloc_traits.h ****     _GLIBCXX14_CONSTEXPR inline void
 710:/usr/include/c++/11/bits/alloc_traits.h ****     __alloc_on_move(_Alloc& __one, _Alloc& __two)
 711:/usr/include/c++/11/bits/alloc_traits.h ****     {
 712:/usr/include/c++/11/bits/alloc_traits.h ****       typedef allocator_traits<_Alloc> __traits;
 713:/usr/include/c++/11/bits/alloc_traits.h ****       typedef typename __traits::propagate_on_container_move_assignment __pocma;
 714:/usr/include/c++/11/bits/alloc_traits.h **** #if __cplusplus >= 201703L
 715:/usr/include/c++/11/bits/alloc_traits.h ****       if constexpr (__pocma::value)
 716:/usr/include/c++/11/bits/alloc_traits.h **** 	__one = std::move(__two);
 717:/usr/include/c++/11/bits/alloc_traits.h **** #else
 718:/usr/include/c++/11/bits/alloc_traits.h ****       __do_alloc_on_move(__one, __two, __pocma());
 719:/usr/include/c++/11/bits/alloc_traits.h **** #endif
 720:/usr/include/c++/11/bits/alloc_traits.h ****     }
 721:/usr/include/c++/11/bits/alloc_traits.h **** 
 722:/usr/include/c++/11/bits/alloc_traits.h **** #if __cplusplus < 201703L
 723:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc>
 724:/usr/include/c++/11/bits/alloc_traits.h ****     inline void __do_alloc_on_swap(_Alloc& __one, _Alloc& __two, true_type)
 725:/usr/include/c++/11/bits/alloc_traits.h ****     {
 726:/usr/include/c++/11/bits/alloc_traits.h ****       using std::swap;
 727:/usr/include/c++/11/bits/alloc_traits.h ****       swap(__one, __two);
 728:/usr/include/c++/11/bits/alloc_traits.h ****     }
 729:/usr/include/c++/11/bits/alloc_traits.h **** 
 730:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc>
 731:/usr/include/c++/11/bits/alloc_traits.h ****     inline void __do_alloc_on_swap(_Alloc&, _Alloc&, false_type)
 732:/usr/include/c++/11/bits/alloc_traits.h ****     { }
 733:/usr/include/c++/11/bits/alloc_traits.h **** #endif
 734:/usr/include/c++/11/bits/alloc_traits.h **** 
 735:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc>
 736:/usr/include/c++/11/bits/alloc_traits.h ****     _GLIBCXX14_CONSTEXPR inline void
 737:/usr/include/c++/11/bits/alloc_traits.h ****     __alloc_on_swap(_Alloc& __one, _Alloc& __two)
 738:/usr/include/c++/11/bits/alloc_traits.h ****     {
 739:/usr/include/c++/11/bits/alloc_traits.h ****       typedef allocator_traits<_Alloc> __traits;
 740:/usr/include/c++/11/bits/alloc_traits.h ****       typedef typename __traits::propagate_on_container_swap __pocs;
 741:/usr/include/c++/11/bits/alloc_traits.h **** #if __cplusplus >= 201703L
 742:/usr/include/c++/11/bits/alloc_traits.h ****       if constexpr (__pocs::value)
 743:/usr/include/c++/11/bits/alloc_traits.h **** 	{
 744:/usr/include/c++/11/bits/alloc_traits.h **** 	  using std::swap;
 745:/usr/include/c++/11/bits/alloc_traits.h **** 	  swap(__one, __two);
 746:/usr/include/c++/11/bits/alloc_traits.h **** 	}
 747:/usr/include/c++/11/bits/alloc_traits.h **** #else
 748:/usr/include/c++/11/bits/alloc_traits.h ****       __do_alloc_on_swap(__one, __two, __pocs());
 749:/usr/include/c++/11/bits/alloc_traits.h **** #endif
 750:/usr/include/c++/11/bits/alloc_traits.h ****     }
 751:/usr/include/c++/11/bits/alloc_traits.h **** 
 752:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc, typename _Tp,
 753:/usr/include/c++/11/bits/alloc_traits.h **** 	   typename _ValueT = __remove_cvref_t<typename _Alloc::value_type>,
 754:/usr/include/c++/11/bits/alloc_traits.h **** 	   typename = void>
 755:/usr/include/c++/11/bits/alloc_traits.h ****     struct __is_alloc_insertable_impl
 756:/usr/include/c++/11/bits/alloc_traits.h ****     : false_type
 757:/usr/include/c++/11/bits/alloc_traits.h ****     { };
 758:/usr/include/c++/11/bits/alloc_traits.h **** 
 759:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc, typename _Tp, typename _ValueT>
 760:/usr/include/c++/11/bits/alloc_traits.h ****     struct __is_alloc_insertable_impl<_Alloc, _Tp, _ValueT,
 761:/usr/include/c++/11/bits/alloc_traits.h ****       __void_t<decltype(allocator_traits<_Alloc>::construct(
 762:/usr/include/c++/11/bits/alloc_traits.h **** 		   std::declval<_Alloc&>(), std::declval<_ValueT*>(),
 763:/usr/include/c++/11/bits/alloc_traits.h **** 		   std::declval<_Tp>()))>>
 764:/usr/include/c++/11/bits/alloc_traits.h ****     : true_type
 765:/usr/include/c++/11/bits/alloc_traits.h ****     { };
 766:/usr/include/c++/11/bits/alloc_traits.h **** 
 767:/usr/include/c++/11/bits/alloc_traits.h ****   // true if _Alloc::value_type is CopyInsertable into containers using _Alloc
 768:/usr/include/c++/11/bits/alloc_traits.h ****   // (might be wrong if _Alloc::construct exists but is not constrained,
 769:/usr/include/c++/11/bits/alloc_traits.h ****   // i.e. actually trying to use it would still be invalid. Use with caution.)
 770:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc>
 771:/usr/include/c++/11/bits/alloc_traits.h ****     struct __is_copy_insertable
 772:/usr/include/c++/11/bits/alloc_traits.h ****     : __is_alloc_insertable_impl<_Alloc,
 773:/usr/include/c++/11/bits/alloc_traits.h **** 				 typename _Alloc::value_type const&>::type
 774:/usr/include/c++/11/bits/alloc_traits.h ****     { };
 775:/usr/include/c++/11/bits/alloc_traits.h **** 
 776:/usr/include/c++/11/bits/alloc_traits.h ****   // std::allocator<_Tp> just requires CopyConstructible
 777:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Tp>
 778:/usr/include/c++/11/bits/alloc_traits.h ****     struct __is_copy_insertable<allocator<_Tp>>
 779:/usr/include/c++/11/bits/alloc_traits.h ****     : is_copy_constructible<_Tp>
 780:/usr/include/c++/11/bits/alloc_traits.h ****     { };
 781:/usr/include/c++/11/bits/alloc_traits.h **** 
 782:/usr/include/c++/11/bits/alloc_traits.h ****   // true if _Alloc::value_type is MoveInsertable into containers using _Alloc
 783:/usr/include/c++/11/bits/alloc_traits.h ****   // (might be wrong if _Alloc::construct exists but is not constrained,
 784:/usr/include/c++/11/bits/alloc_traits.h ****   // i.e. actually trying to use it would still be invalid. Use with caution.)
 785:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc>
 786:/usr/include/c++/11/bits/alloc_traits.h ****     struct __is_move_insertable
 787:/usr/include/c++/11/bits/alloc_traits.h ****     : __is_alloc_insertable_impl<_Alloc, typename _Alloc::value_type>::type
 788:/usr/include/c++/11/bits/alloc_traits.h ****     { };
 789:/usr/include/c++/11/bits/alloc_traits.h **** 
 790:/usr/include/c++/11/bits/alloc_traits.h ****   // std::allocator<_Tp> just requires MoveConstructible
 791:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Tp>
 792:/usr/include/c++/11/bits/alloc_traits.h ****     struct __is_move_insertable<allocator<_Tp>>
 793:/usr/include/c++/11/bits/alloc_traits.h ****     : is_move_constructible<_Tp>
 794:/usr/include/c++/11/bits/alloc_traits.h ****     { };
 795:/usr/include/c++/11/bits/alloc_traits.h **** 
 796:/usr/include/c++/11/bits/alloc_traits.h ****   // Trait to detect Allocator-like types.
 797:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc, typename = void>
 798:/usr/include/c++/11/bits/alloc_traits.h ****     struct __is_allocator : false_type { };
 799:/usr/include/c++/11/bits/alloc_traits.h **** 
 800:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc>
 801:/usr/include/c++/11/bits/alloc_traits.h ****     struct __is_allocator<_Alloc,
 802:/usr/include/c++/11/bits/alloc_traits.h ****       __void_t<typename _Alloc::value_type,
 803:/usr/include/c++/11/bits/alloc_traits.h **** 	       decltype(std::declval<_Alloc&>().allocate(size_t{}))>>
 804:/usr/include/c++/11/bits/alloc_traits.h ****     : true_type { };
 805:/usr/include/c++/11/bits/alloc_traits.h **** 
 806:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc>
 807:/usr/include/c++/11/bits/alloc_traits.h ****     using _RequireAllocator
 808:/usr/include/c++/11/bits/alloc_traits.h ****       = typename enable_if<__is_allocator<_Alloc>::value, _Alloc>::type;
 809:/usr/include/c++/11/bits/alloc_traits.h **** 
 810:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc>
 811:/usr/include/c++/11/bits/alloc_traits.h ****     using _RequireNotAllocator
 812:/usr/include/c++/11/bits/alloc_traits.h ****       = typename enable_if<!__is_allocator<_Alloc>::value, _Alloc>::type;
 813:/usr/include/c++/11/bits/alloc_traits.h **** 
 814:/usr/include/c++/11/bits/alloc_traits.h **** #if __cpp_concepts >= 201907L
 815:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc>
 816:/usr/include/c++/11/bits/alloc_traits.h ****     concept __allocator_like = requires (_Alloc& __a) {
 817:/usr/include/c++/11/bits/alloc_traits.h ****       typename _Alloc::value_type;
 818:/usr/include/c++/11/bits/alloc_traits.h ****       __a.deallocate(__a.allocate(1u), 1u);
 819:/usr/include/c++/11/bits/alloc_traits.h ****     };
 820:/usr/include/c++/11/bits/alloc_traits.h **** #endif
 821:/usr/include/c++/11/bits/alloc_traits.h **** #endif // C++11
 822:/usr/include/c++/11/bits/alloc_traits.h **** 
 823:/usr/include/c++/11/bits/alloc_traits.h ****   /**
 824:/usr/include/c++/11/bits/alloc_traits.h ****    * Destroy a range of objects using the supplied allocator.  For
 825:/usr/include/c++/11/bits/alloc_traits.h ****    * non-default allocators we do not optimize away invocation of
 826:/usr/include/c++/11/bits/alloc_traits.h ****    * destroy() even if _Tp has a trivial destructor.
 827:/usr/include/c++/11/bits/alloc_traits.h ****    */
 828:/usr/include/c++/11/bits/alloc_traits.h **** 
 829:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _ForwardIterator, typename _Allocator>
 830:/usr/include/c++/11/bits/alloc_traits.h ****     void
 831:/usr/include/c++/11/bits/alloc_traits.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 832:/usr/include/c++/11/bits/alloc_traits.h **** 	     _Allocator& __alloc)
 833:/usr/include/c++/11/bits/alloc_traits.h ****     {
 834:/usr/include/c++/11/bits/alloc_traits.h ****       for (; __first != __last; ++__first)
 835:/usr/include/c++/11/bits/alloc_traits.h **** #if __cplusplus < 201103L
 836:/usr/include/c++/11/bits/alloc_traits.h **** 	__alloc.destroy(std::__addressof(*__first));
 837:/usr/include/c++/11/bits/alloc_traits.h **** #else
 838:/usr/include/c++/11/bits/alloc_traits.h **** 	allocator_traits<_Allocator>::destroy(__alloc,
 839:/usr/include/c++/11/bits/alloc_traits.h **** 					      std::__addressof(*__first));
 840:/usr/include/c++/11/bits/alloc_traits.h **** #endif
 841:/usr/include/c++/11/bits/alloc_traits.h ****     }
 842:/usr/include/c++/11/bits/alloc_traits.h **** 
 843:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _ForwardIterator, typename _Tp>
 844:/usr/include/c++/11/bits/alloc_traits.h ****     inline void
 845:/usr/include/c++/11/bits/alloc_traits.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 1025              		.loc 6 845 5
 1026              		.cfi_startproc
 1027 0000 F30F1EFA 		endbr64
 1028 0004 55       		pushq	%rbp
 1029              		.cfi_def_cfa_offset 16
 1030              		.cfi_offset 6, -16
 1031 0005 4889E5   		movq	%rsp, %rbp
 1032              		.cfi_def_cfa_register 6
 1033 0008 4883EC20 		subq	$32, %rsp
 1034 000c 48897DF8 		movq	%rdi, -8(%rbp)
 1035 0010 488975F0 		movq	%rsi, -16(%rbp)
 1036 0014 488955E8 		movq	%rdx, -24(%rbp)
 846:/usr/include/c++/11/bits/alloc_traits.h **** 	     allocator<_Tp>&)
 847:/usr/include/c++/11/bits/alloc_traits.h ****     {
 848:/usr/include/c++/11/bits/alloc_traits.h ****       _Destroy(__first, __last);
 1037              		.loc 6 848 15
 1038 0018 488B55F0 		movq	-16(%rbp), %rdx
 1039 001c 488B45F8 		movq	-8(%rbp), %rax
 1040 0020 4889D6   		movq	%rdx, %rsi
 1041 0023 4889C7   		movq	%rax, %rdi
 1042 0026 E8000000 		call	_ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_@PLT
 1042      00
 849:/usr/include/c++/11/bits/alloc_traits.h ****     }
 1043              		.loc 6 849 5
 1044 002b 90       		nop
 1045 002c C9       		leave
 1046              		.cfi_def_cfa 7, 8
 1047 002d C3       		ret
 1048              		.cfi_endproc
 1049              	.LFE971:
 1051              		.section	.text._ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEES2_E9constructIS2_
 1052              		.weak	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEES2_E9constructIS2_EEvRS3_PS
 1054              	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEES2_E9constructIS2_EEvRS3_PS2_RKT_:
 1055              	.LFB972:
 1056              		.file 7 "/usr/include/c++/11/ext/alloc_traits.h"
   1:/usr/include/c++/11/ext/alloc_traits.h **** // Allocator traits -*- C++ -*-
   2:/usr/include/c++/11/ext/alloc_traits.h **** 
   3:/usr/include/c++/11/ext/alloc_traits.h **** // Copyright (C) 2011-2021 Free Software Foundation, Inc.
   4:/usr/include/c++/11/ext/alloc_traits.h **** //
   5:/usr/include/c++/11/ext/alloc_traits.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/11/ext/alloc_traits.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/11/ext/alloc_traits.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/11/ext/alloc_traits.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/11/ext/alloc_traits.h **** // any later version.
  10:/usr/include/c++/11/ext/alloc_traits.h **** 
  11:/usr/include/c++/11/ext/alloc_traits.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/11/ext/alloc_traits.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/11/ext/alloc_traits.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/11/ext/alloc_traits.h **** // GNU General Public License for more details.
  15:/usr/include/c++/11/ext/alloc_traits.h **** 
  16:/usr/include/c++/11/ext/alloc_traits.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/11/ext/alloc_traits.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/11/ext/alloc_traits.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/11/ext/alloc_traits.h **** 
  20:/usr/include/c++/11/ext/alloc_traits.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/11/ext/alloc_traits.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/11/ext/alloc_traits.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/11/ext/alloc_traits.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/11/ext/alloc_traits.h **** 
  25:/usr/include/c++/11/ext/alloc_traits.h **** /** @file ext/alloc_traits.h
  26:/usr/include/c++/11/ext/alloc_traits.h ****  *  This file is a GNU extension to the Standard C++ Library.
  27:/usr/include/c++/11/ext/alloc_traits.h ****  */
  28:/usr/include/c++/11/ext/alloc_traits.h **** 
  29:/usr/include/c++/11/ext/alloc_traits.h **** #ifndef _EXT_ALLOC_TRAITS_H
  30:/usr/include/c++/11/ext/alloc_traits.h **** #define _EXT_ALLOC_TRAITS_H 1
  31:/usr/include/c++/11/ext/alloc_traits.h **** 
  32:/usr/include/c++/11/ext/alloc_traits.h **** #pragma GCC system_header
  33:/usr/include/c++/11/ext/alloc_traits.h **** 
  34:/usr/include/c++/11/ext/alloc_traits.h **** # include <bits/alloc_traits.h>
  35:/usr/include/c++/11/ext/alloc_traits.h **** #if __cplusplus < 201103L
  36:/usr/include/c++/11/ext/alloc_traits.h **** # include <bits/allocator.h>  // for __alloc_swap
  37:/usr/include/c++/11/ext/alloc_traits.h **** #endif
  38:/usr/include/c++/11/ext/alloc_traits.h **** 
  39:/usr/include/c++/11/ext/alloc_traits.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  40:/usr/include/c++/11/ext/alloc_traits.h **** {
  41:/usr/include/c++/11/ext/alloc_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  42:/usr/include/c++/11/ext/alloc_traits.h **** 
  43:/usr/include/c++/11/ext/alloc_traits.h **** /**
  44:/usr/include/c++/11/ext/alloc_traits.h ****  * @brief  Uniform interface to C++98 and C++11 allocators.
  45:/usr/include/c++/11/ext/alloc_traits.h ****  * @ingroup allocators
  46:/usr/include/c++/11/ext/alloc_traits.h **** */
  47:/usr/include/c++/11/ext/alloc_traits.h **** template<typename _Alloc, typename = typename _Alloc::value_type>
  48:/usr/include/c++/11/ext/alloc_traits.h ****   struct __alloc_traits
  49:/usr/include/c++/11/ext/alloc_traits.h **** #if __cplusplus >= 201103L
  50:/usr/include/c++/11/ext/alloc_traits.h ****   : std::allocator_traits<_Alloc>
  51:/usr/include/c++/11/ext/alloc_traits.h **** #endif
  52:/usr/include/c++/11/ext/alloc_traits.h ****   {
  53:/usr/include/c++/11/ext/alloc_traits.h ****     typedef _Alloc allocator_type;
  54:/usr/include/c++/11/ext/alloc_traits.h **** #if __cplusplus >= 201103L
  55:/usr/include/c++/11/ext/alloc_traits.h ****     typedef std::allocator_traits<_Alloc>           _Base_type;
  56:/usr/include/c++/11/ext/alloc_traits.h ****     typedef typename _Base_type::value_type         value_type;
  57:/usr/include/c++/11/ext/alloc_traits.h ****     typedef typename _Base_type::pointer            pointer;
  58:/usr/include/c++/11/ext/alloc_traits.h ****     typedef typename _Base_type::const_pointer      const_pointer;
  59:/usr/include/c++/11/ext/alloc_traits.h ****     typedef typename _Base_type::size_type          size_type;
  60:/usr/include/c++/11/ext/alloc_traits.h ****     typedef typename _Base_type::difference_type    difference_type;
  61:/usr/include/c++/11/ext/alloc_traits.h ****     // C++11 allocators do not define reference or const_reference
  62:/usr/include/c++/11/ext/alloc_traits.h ****     typedef value_type&                             reference;
  63:/usr/include/c++/11/ext/alloc_traits.h ****     typedef const value_type&                       const_reference;
  64:/usr/include/c++/11/ext/alloc_traits.h ****     using _Base_type::allocate;
  65:/usr/include/c++/11/ext/alloc_traits.h ****     using _Base_type::deallocate;
  66:/usr/include/c++/11/ext/alloc_traits.h ****     using _Base_type::construct;
  67:/usr/include/c++/11/ext/alloc_traits.h ****     using _Base_type::destroy;
  68:/usr/include/c++/11/ext/alloc_traits.h ****     using _Base_type::max_size;
  69:/usr/include/c++/11/ext/alloc_traits.h **** 
  70:/usr/include/c++/11/ext/alloc_traits.h ****   private:
  71:/usr/include/c++/11/ext/alloc_traits.h ****     template<typename _Ptr>
  72:/usr/include/c++/11/ext/alloc_traits.h ****       using __is_custom_pointer
  73:/usr/include/c++/11/ext/alloc_traits.h **** 	= std::__and_<std::is_same<pointer, _Ptr>,
  74:/usr/include/c++/11/ext/alloc_traits.h **** 		      std::__not_<std::is_pointer<_Ptr>>>;
  75:/usr/include/c++/11/ext/alloc_traits.h **** 
  76:/usr/include/c++/11/ext/alloc_traits.h ****   public:
  77:/usr/include/c++/11/ext/alloc_traits.h ****     // overload construct for non-standard pointer types
  78:/usr/include/c++/11/ext/alloc_traits.h ****     template<typename _Ptr, typename... _Args>
  79:/usr/include/c++/11/ext/alloc_traits.h ****       static _GLIBCXX14_CONSTEXPR
  80:/usr/include/c++/11/ext/alloc_traits.h ****       std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
  81:/usr/include/c++/11/ext/alloc_traits.h ****       construct(_Alloc& __a, _Ptr __p, _Args&&... __args)
  82:/usr/include/c++/11/ext/alloc_traits.h ****       noexcept(noexcept(_Base_type::construct(__a, std::__to_address(__p),
  83:/usr/include/c++/11/ext/alloc_traits.h **** 					      std::forward<_Args>(__args)...)))
  84:/usr/include/c++/11/ext/alloc_traits.h ****       {
  85:/usr/include/c++/11/ext/alloc_traits.h **** 	_Base_type::construct(__a, std::__to_address(__p),
  86:/usr/include/c++/11/ext/alloc_traits.h **** 			      std::forward<_Args>(__args)...);
  87:/usr/include/c++/11/ext/alloc_traits.h ****       }
  88:/usr/include/c++/11/ext/alloc_traits.h **** 
  89:/usr/include/c++/11/ext/alloc_traits.h ****     // overload destroy for non-standard pointer types
  90:/usr/include/c++/11/ext/alloc_traits.h ****     template<typename _Ptr>
  91:/usr/include/c++/11/ext/alloc_traits.h ****       static _GLIBCXX14_CONSTEXPR
  92:/usr/include/c++/11/ext/alloc_traits.h ****       std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
  93:/usr/include/c++/11/ext/alloc_traits.h ****       destroy(_Alloc& __a, _Ptr __p)
  94:/usr/include/c++/11/ext/alloc_traits.h ****       noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
  95:/usr/include/c++/11/ext/alloc_traits.h ****       { _Base_type::destroy(__a, std::__to_address(__p)); }
  96:/usr/include/c++/11/ext/alloc_traits.h **** 
  97:/usr/include/c++/11/ext/alloc_traits.h ****     static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
  98:/usr/include/c++/11/ext/alloc_traits.h ****     { return _Base_type::select_on_container_copy_construction(__a); }
  99:/usr/include/c++/11/ext/alloc_traits.h **** 
 100:/usr/include/c++/11/ext/alloc_traits.h ****     static _GLIBCXX14_CONSTEXPR void _S_on_swap(_Alloc& __a, _Alloc& __b)
 101:/usr/include/c++/11/ext/alloc_traits.h ****     { std::__alloc_on_swap(__a, __b); }
 102:/usr/include/c++/11/ext/alloc_traits.h **** 
 103:/usr/include/c++/11/ext/alloc_traits.h ****     static constexpr bool _S_propagate_on_copy_assign()
 104:/usr/include/c++/11/ext/alloc_traits.h ****     { return _Base_type::propagate_on_container_copy_assignment::value; }
 105:/usr/include/c++/11/ext/alloc_traits.h **** 
 106:/usr/include/c++/11/ext/alloc_traits.h ****     static constexpr bool _S_propagate_on_move_assign()
 107:/usr/include/c++/11/ext/alloc_traits.h ****     { return _Base_type::propagate_on_container_move_assignment::value; }
 108:/usr/include/c++/11/ext/alloc_traits.h **** 
 109:/usr/include/c++/11/ext/alloc_traits.h ****     static constexpr bool _S_propagate_on_swap()
 110:/usr/include/c++/11/ext/alloc_traits.h ****     { return _Base_type::propagate_on_container_swap::value; }
 111:/usr/include/c++/11/ext/alloc_traits.h **** 
 112:/usr/include/c++/11/ext/alloc_traits.h ****     static constexpr bool _S_always_equal()
 113:/usr/include/c++/11/ext/alloc_traits.h ****     { return _Base_type::is_always_equal::value; }
 114:/usr/include/c++/11/ext/alloc_traits.h **** 
 115:/usr/include/c++/11/ext/alloc_traits.h ****     static constexpr bool _S_nothrow_move()
 116:/usr/include/c++/11/ext/alloc_traits.h ****     { return _S_propagate_on_move_assign() || _S_always_equal(); }
 117:/usr/include/c++/11/ext/alloc_traits.h **** 
 118:/usr/include/c++/11/ext/alloc_traits.h ****     template<typename _Tp>
 119:/usr/include/c++/11/ext/alloc_traits.h ****       struct rebind
 120:/usr/include/c++/11/ext/alloc_traits.h ****       { typedef typename _Base_type::template rebind_alloc<_Tp> other; };
 121:/usr/include/c++/11/ext/alloc_traits.h **** #else // ! C++11
 122:/usr/include/c++/11/ext/alloc_traits.h **** 
 123:/usr/include/c++/11/ext/alloc_traits.h ****     typedef typename _Alloc::pointer                pointer;
 124:/usr/include/c++/11/ext/alloc_traits.h ****     typedef typename _Alloc::const_pointer          const_pointer;
 125:/usr/include/c++/11/ext/alloc_traits.h ****     typedef typename _Alloc::value_type             value_type;
 126:/usr/include/c++/11/ext/alloc_traits.h ****     typedef typename _Alloc::reference              reference;
 127:/usr/include/c++/11/ext/alloc_traits.h ****     typedef typename _Alloc::const_reference        const_reference;
 128:/usr/include/c++/11/ext/alloc_traits.h ****     typedef typename _Alloc::size_type              size_type;
 129:/usr/include/c++/11/ext/alloc_traits.h ****     typedef typename _Alloc::difference_type        difference_type;
 130:/usr/include/c++/11/ext/alloc_traits.h **** 
 131:/usr/include/c++/11/ext/alloc_traits.h ****     _GLIBCXX_NODISCARD static pointer
 132:/usr/include/c++/11/ext/alloc_traits.h ****     allocate(_Alloc& __a, size_type __n)
 133:/usr/include/c++/11/ext/alloc_traits.h ****     { return __a.allocate(__n); }
 134:/usr/include/c++/11/ext/alloc_traits.h **** 
 135:/usr/include/c++/11/ext/alloc_traits.h ****     template<typename _Hint>
 136:/usr/include/c++/11/ext/alloc_traits.h ****       _GLIBCXX_NODISCARD static pointer
 137:/usr/include/c++/11/ext/alloc_traits.h ****       allocate(_Alloc& __a, size_type __n, _Hint __hint)
 138:/usr/include/c++/11/ext/alloc_traits.h ****       { return __a.allocate(__n, __hint); }
 139:/usr/include/c++/11/ext/alloc_traits.h **** 
 140:/usr/include/c++/11/ext/alloc_traits.h ****     static void deallocate(_Alloc& __a, pointer __p, size_type __n)
 141:/usr/include/c++/11/ext/alloc_traits.h ****     { __a.deallocate(__p, __n); }
 142:/usr/include/c++/11/ext/alloc_traits.h **** 
 143:/usr/include/c++/11/ext/alloc_traits.h ****     template<typename _Tp>
 144:/usr/include/c++/11/ext/alloc_traits.h ****       static void construct(_Alloc& __a, pointer __p, const _Tp& __arg)
 1057              		.loc 7 144 19
 1058              		.cfi_startproc
 1059 0000 F30F1EFA 		endbr64
 1060 0004 55       		pushq	%rbp
 1061              		.cfi_def_cfa_offset 16
 1062              		.cfi_offset 6, -16
 1063 0005 4889E5   		movq	%rsp, %rbp
 1064              		.cfi_def_cfa_register 6
 1065 0008 4883EC20 		subq	$32, %rsp
 1066 000c 48897DF8 		movq	%rdi, -8(%rbp)
 1067 0010 488975F0 		movq	%rsi, -16(%rbp)
 1068 0014 488955E8 		movq	%rdx, -24(%rbp)
 145:/usr/include/c++/11/ext/alloc_traits.h ****       { __a.construct(__p, __arg); }
 1069              		.loc 7 145 22
 1070 0018 488B55E8 		movq	-24(%rbp), %rdx
 1071 001c 488B4DF0 		movq	-16(%rbp), %rcx
 1072 0020 488B45F8 		movq	-8(%rbp), %rax
 1073 0024 4889CE   		movq	%rcx, %rsi
 1074 0027 4889C7   		movq	%rax, %rdi
 1075 002a E8000000 		call	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE9constructEPS2_RKS2_@PLT
 1075      00
 1076              		.loc 7 145 36
 1077 002f 90       		nop
 1078 0030 C9       		leave
 1079              		.cfi_def_cfa 7, 8
 1080 0031 C3       		ret
 1081              		.cfi_endproc
 1082              	.LFE972:
 1084              		.section	.rodata
 1085              	.LC0:
 1086 0000 76656374 		.string	"vector::_M_realloc_insert"
 1086      6F723A3A 
 1086      5F4D5F72 
 1086      65616C6C 
 1086      6F635F69 
 1087              		.section	.text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE17_M_realloc_insertEN9__gnu_cxx
 1088              		.align 2
 1089              		.weak	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE17_M_realloc_insertEN9__gnu_cxx17__norma
 1091              	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE17_M_realloc_insertEN9__gnu_cxx17__normal_itera
 1092              	.LFB973:
 1093              		.file 8 "/usr/include/c++/11/bits/vector.tcc"
   1:/usr/include/c++/11/bits/vector.tcc **** // Vector implementation (out of line) -*- C++ -*-
   2:/usr/include/c++/11/bits/vector.tcc **** 
   3:/usr/include/c++/11/bits/vector.tcc **** // Copyright (C) 2001-2021 Free Software Foundation, Inc.
   4:/usr/include/c++/11/bits/vector.tcc **** //
   5:/usr/include/c++/11/bits/vector.tcc **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/11/bits/vector.tcc **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/11/bits/vector.tcc **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/11/bits/vector.tcc **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/11/bits/vector.tcc **** // any later version.
  10:/usr/include/c++/11/bits/vector.tcc **** 
  11:/usr/include/c++/11/bits/vector.tcc **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/11/bits/vector.tcc **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/11/bits/vector.tcc **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/11/bits/vector.tcc **** // GNU General Public License for more details.
  15:/usr/include/c++/11/bits/vector.tcc **** 
  16:/usr/include/c++/11/bits/vector.tcc **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/11/bits/vector.tcc **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/11/bits/vector.tcc **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/11/bits/vector.tcc **** 
  20:/usr/include/c++/11/bits/vector.tcc **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/11/bits/vector.tcc **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/11/bits/vector.tcc **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/11/bits/vector.tcc **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/11/bits/vector.tcc **** 
  25:/usr/include/c++/11/bits/vector.tcc **** /*
  26:/usr/include/c++/11/bits/vector.tcc ****  *
  27:/usr/include/c++/11/bits/vector.tcc ****  * Copyright (c) 1994
  28:/usr/include/c++/11/bits/vector.tcc ****  * Hewlett-Packard Company
  29:/usr/include/c++/11/bits/vector.tcc ****  *
  30:/usr/include/c++/11/bits/vector.tcc ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/11/bits/vector.tcc ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/11/bits/vector.tcc ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/11/bits/vector.tcc ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/11/bits/vector.tcc ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/11/bits/vector.tcc ****  * representations about the suitability of this software for any
  36:/usr/include/c++/11/bits/vector.tcc ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/11/bits/vector.tcc ****  *
  38:/usr/include/c++/11/bits/vector.tcc ****  *
  39:/usr/include/c++/11/bits/vector.tcc ****  * Copyright (c) 1996
  40:/usr/include/c++/11/bits/vector.tcc ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/11/bits/vector.tcc ****  *
  42:/usr/include/c++/11/bits/vector.tcc ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/11/bits/vector.tcc ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/11/bits/vector.tcc ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/11/bits/vector.tcc ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/11/bits/vector.tcc ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/11/bits/vector.tcc ****  * representations about the suitability of this  software for any
  48:/usr/include/c++/11/bits/vector.tcc ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/11/bits/vector.tcc ****  */
  50:/usr/include/c++/11/bits/vector.tcc **** 
  51:/usr/include/c++/11/bits/vector.tcc **** /** @file bits/vector.tcc
  52:/usr/include/c++/11/bits/vector.tcc ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/11/bits/vector.tcc ****  *  Do not attempt to use it directly. @headername{vector}
  54:/usr/include/c++/11/bits/vector.tcc ****  */
  55:/usr/include/c++/11/bits/vector.tcc **** 
  56:/usr/include/c++/11/bits/vector.tcc **** #ifndef _VECTOR_TCC
  57:/usr/include/c++/11/bits/vector.tcc **** #define _VECTOR_TCC 1
  58:/usr/include/c++/11/bits/vector.tcc **** 
  59:/usr/include/c++/11/bits/vector.tcc **** namespace std _GLIBCXX_VISIBILITY(default)
  60:/usr/include/c++/11/bits/vector.tcc **** {
  61:/usr/include/c++/11/bits/vector.tcc **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  62:/usr/include/c++/11/bits/vector.tcc **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  63:/usr/include/c++/11/bits/vector.tcc **** 
  64:/usr/include/c++/11/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
  65:/usr/include/c++/11/bits/vector.tcc ****     void
  66:/usr/include/c++/11/bits/vector.tcc ****     vector<_Tp, _Alloc>::
  67:/usr/include/c++/11/bits/vector.tcc ****     reserve(size_type __n)
  68:/usr/include/c++/11/bits/vector.tcc ****     {
  69:/usr/include/c++/11/bits/vector.tcc ****       if (__n > this->max_size())
  70:/usr/include/c++/11/bits/vector.tcc **** 	__throw_length_error(__N("vector::reserve"));
  71:/usr/include/c++/11/bits/vector.tcc ****       if (this->capacity() < __n)
  72:/usr/include/c++/11/bits/vector.tcc **** 	{
  73:/usr/include/c++/11/bits/vector.tcc **** 	  const size_type __old_size = size();
  74:/usr/include/c++/11/bits/vector.tcc **** 	  pointer __tmp;
  75:/usr/include/c++/11/bits/vector.tcc **** #if __cplusplus >= 201103L
  76:/usr/include/c++/11/bits/vector.tcc **** 	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
  77:/usr/include/c++/11/bits/vector.tcc **** 	    {
  78:/usr/include/c++/11/bits/vector.tcc **** 	      __tmp = this->_M_allocate(__n);
  79:/usr/include/c++/11/bits/vector.tcc **** 	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
  80:/usr/include/c++/11/bits/vector.tcc **** 			  __tmp, _M_get_Tp_allocator());
  81:/usr/include/c++/11/bits/vector.tcc **** 	    }
  82:/usr/include/c++/11/bits/vector.tcc **** 	  else
  83:/usr/include/c++/11/bits/vector.tcc **** #endif
  84:/usr/include/c++/11/bits/vector.tcc **** 	    {
  85:/usr/include/c++/11/bits/vector.tcc **** 	      __tmp = _M_allocate_and_copy(__n,
  86:/usr/include/c++/11/bits/vector.tcc **** 		_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_start),
  87:/usr/include/c++/11/bits/vector.tcc **** 		_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_finish));
  88:/usr/include/c++/11/bits/vector.tcc **** 	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  89:/usr/include/c++/11/bits/vector.tcc **** 			    _M_get_Tp_allocator());
  90:/usr/include/c++/11/bits/vector.tcc **** 	    }
  91:/usr/include/c++/11/bits/vector.tcc **** 	  _GLIBCXX_ASAN_ANNOTATE_REINIT;
  92:/usr/include/c++/11/bits/vector.tcc **** 	  _M_deallocate(this->_M_impl._M_start,
  93:/usr/include/c++/11/bits/vector.tcc **** 			this->_M_impl._M_end_of_storage
  94:/usr/include/c++/11/bits/vector.tcc **** 			- this->_M_impl._M_start);
  95:/usr/include/c++/11/bits/vector.tcc **** 	  this->_M_impl._M_start = __tmp;
  96:/usr/include/c++/11/bits/vector.tcc **** 	  this->_M_impl._M_finish = __tmp + __old_size;
  97:/usr/include/c++/11/bits/vector.tcc **** 	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  98:/usr/include/c++/11/bits/vector.tcc **** 	}
  99:/usr/include/c++/11/bits/vector.tcc ****     }
 100:/usr/include/c++/11/bits/vector.tcc **** 
 101:/usr/include/c++/11/bits/vector.tcc **** #if __cplusplus >= 201103L
 102:/usr/include/c++/11/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 103:/usr/include/c++/11/bits/vector.tcc ****     template<typename... _Args>
 104:/usr/include/c++/11/bits/vector.tcc **** #if __cplusplus > 201402L
 105:/usr/include/c++/11/bits/vector.tcc ****       typename vector<_Tp, _Alloc>::reference
 106:/usr/include/c++/11/bits/vector.tcc **** #else
 107:/usr/include/c++/11/bits/vector.tcc ****       void
 108:/usr/include/c++/11/bits/vector.tcc **** #endif
 109:/usr/include/c++/11/bits/vector.tcc ****       vector<_Tp, _Alloc>::
 110:/usr/include/c++/11/bits/vector.tcc ****       emplace_back(_Args&&... __args)
 111:/usr/include/c++/11/bits/vector.tcc ****       {
 112:/usr/include/c++/11/bits/vector.tcc **** 	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 113:/usr/include/c++/11/bits/vector.tcc **** 	  {
 114:/usr/include/c++/11/bits/vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
 115:/usr/include/c++/11/bits/vector.tcc **** 	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 116:/usr/include/c++/11/bits/vector.tcc **** 				     std::forward<_Args>(__args)...);
 117:/usr/include/c++/11/bits/vector.tcc **** 	    ++this->_M_impl._M_finish;
 118:/usr/include/c++/11/bits/vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
 119:/usr/include/c++/11/bits/vector.tcc **** 	  }
 120:/usr/include/c++/11/bits/vector.tcc **** 	else
 121:/usr/include/c++/11/bits/vector.tcc **** 	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 122:/usr/include/c++/11/bits/vector.tcc **** #if __cplusplus > 201402L
 123:/usr/include/c++/11/bits/vector.tcc **** 	return back();
 124:/usr/include/c++/11/bits/vector.tcc **** #endif
 125:/usr/include/c++/11/bits/vector.tcc ****       }
 126:/usr/include/c++/11/bits/vector.tcc **** #endif
 127:/usr/include/c++/11/bits/vector.tcc **** 
 128:/usr/include/c++/11/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 129:/usr/include/c++/11/bits/vector.tcc ****     typename vector<_Tp, _Alloc>::iterator
 130:/usr/include/c++/11/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 131:/usr/include/c++/11/bits/vector.tcc **** #if __cplusplus >= 201103L
 132:/usr/include/c++/11/bits/vector.tcc ****     insert(const_iterator __position, const value_type& __x)
 133:/usr/include/c++/11/bits/vector.tcc **** #else
 134:/usr/include/c++/11/bits/vector.tcc ****     insert(iterator __position, const value_type& __x)
 135:/usr/include/c++/11/bits/vector.tcc **** #endif
 136:/usr/include/c++/11/bits/vector.tcc ****     {
 137:/usr/include/c++/11/bits/vector.tcc ****       const size_type __n = __position - begin();
 138:/usr/include/c++/11/bits/vector.tcc ****       if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 139:/usr/include/c++/11/bits/vector.tcc **** 	if (__position == end())
 140:/usr/include/c++/11/bits/vector.tcc **** 	  {
 141:/usr/include/c++/11/bits/vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
 142:/usr/include/c++/11/bits/vector.tcc **** 	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 143:/usr/include/c++/11/bits/vector.tcc **** 				     __x);
 144:/usr/include/c++/11/bits/vector.tcc **** 	    ++this->_M_impl._M_finish;
 145:/usr/include/c++/11/bits/vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
 146:/usr/include/c++/11/bits/vector.tcc **** 	  }
 147:/usr/include/c++/11/bits/vector.tcc **** 	else
 148:/usr/include/c++/11/bits/vector.tcc **** 	  {
 149:/usr/include/c++/11/bits/vector.tcc **** #if __cplusplus >= 201103L
 150:/usr/include/c++/11/bits/vector.tcc **** 	    const auto __pos = begin() + (__position - cbegin());
 151:/usr/include/c++/11/bits/vector.tcc **** 	    // __x could be an existing element of this vector, so make a
 152:/usr/include/c++/11/bits/vector.tcc **** 	    // copy of it before _M_insert_aux moves elements around.
 153:/usr/include/c++/11/bits/vector.tcc **** 	    _Temporary_value __x_copy(this, __x);
 154:/usr/include/c++/11/bits/vector.tcc **** 	    _M_insert_aux(__pos, std::move(__x_copy._M_val()));
 155:/usr/include/c++/11/bits/vector.tcc **** #else
 156:/usr/include/c++/11/bits/vector.tcc **** 	    _M_insert_aux(__position, __x);
 157:/usr/include/c++/11/bits/vector.tcc **** #endif
 158:/usr/include/c++/11/bits/vector.tcc **** 	  }
 159:/usr/include/c++/11/bits/vector.tcc ****       else
 160:/usr/include/c++/11/bits/vector.tcc **** #if __cplusplus >= 201103L
 161:/usr/include/c++/11/bits/vector.tcc **** 	_M_realloc_insert(begin() + (__position - cbegin()), __x);
 162:/usr/include/c++/11/bits/vector.tcc **** #else
 163:/usr/include/c++/11/bits/vector.tcc **** 	_M_realloc_insert(__position, __x);
 164:/usr/include/c++/11/bits/vector.tcc **** #endif
 165:/usr/include/c++/11/bits/vector.tcc **** 
 166:/usr/include/c++/11/bits/vector.tcc ****       return iterator(this->_M_impl._M_start + __n);
 167:/usr/include/c++/11/bits/vector.tcc ****     }
 168:/usr/include/c++/11/bits/vector.tcc **** 
 169:/usr/include/c++/11/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 170:/usr/include/c++/11/bits/vector.tcc ****     typename vector<_Tp, _Alloc>::iterator
 171:/usr/include/c++/11/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 172:/usr/include/c++/11/bits/vector.tcc ****     _M_erase(iterator __position)
 173:/usr/include/c++/11/bits/vector.tcc ****     {
 174:/usr/include/c++/11/bits/vector.tcc ****       if (__position + 1 != end())
 175:/usr/include/c++/11/bits/vector.tcc **** 	_GLIBCXX_MOVE3(__position + 1, end(), __position);
 176:/usr/include/c++/11/bits/vector.tcc ****       --this->_M_impl._M_finish;
 177:/usr/include/c++/11/bits/vector.tcc ****       _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 178:/usr/include/c++/11/bits/vector.tcc ****       _GLIBCXX_ASAN_ANNOTATE_SHRINK(1);
 179:/usr/include/c++/11/bits/vector.tcc ****       return __position;
 180:/usr/include/c++/11/bits/vector.tcc ****     }
 181:/usr/include/c++/11/bits/vector.tcc **** 
 182:/usr/include/c++/11/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 183:/usr/include/c++/11/bits/vector.tcc ****     typename vector<_Tp, _Alloc>::iterator
 184:/usr/include/c++/11/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 185:/usr/include/c++/11/bits/vector.tcc ****     _M_erase(iterator __first, iterator __last)
 186:/usr/include/c++/11/bits/vector.tcc ****     {
 187:/usr/include/c++/11/bits/vector.tcc ****       if (__first != __last)
 188:/usr/include/c++/11/bits/vector.tcc **** 	{
 189:/usr/include/c++/11/bits/vector.tcc **** 	  if (__last != end())
 190:/usr/include/c++/11/bits/vector.tcc **** 	    _GLIBCXX_MOVE3(__last, end(), __first);
 191:/usr/include/c++/11/bits/vector.tcc **** 	  _M_erase_at_end(__first.base() + (end() - __last));
 192:/usr/include/c++/11/bits/vector.tcc **** 	}
 193:/usr/include/c++/11/bits/vector.tcc ****       return __first;
 194:/usr/include/c++/11/bits/vector.tcc ****     }
 195:/usr/include/c++/11/bits/vector.tcc **** 
 196:/usr/include/c++/11/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 197:/usr/include/c++/11/bits/vector.tcc ****     vector<_Tp, _Alloc>&
 198:/usr/include/c++/11/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 199:/usr/include/c++/11/bits/vector.tcc ****     operator=(const vector<_Tp, _Alloc>& __x)
 200:/usr/include/c++/11/bits/vector.tcc ****     {
 201:/usr/include/c++/11/bits/vector.tcc ****       if (&__x != this)
 202:/usr/include/c++/11/bits/vector.tcc **** 	{
 203:/usr/include/c++/11/bits/vector.tcc **** 	  _GLIBCXX_ASAN_ANNOTATE_REINIT;
 204:/usr/include/c++/11/bits/vector.tcc **** #if __cplusplus >= 201103L
 205:/usr/include/c++/11/bits/vector.tcc **** 	  if (_Alloc_traits::_S_propagate_on_copy_assign())
 206:/usr/include/c++/11/bits/vector.tcc **** 	    {
 207:/usr/include/c++/11/bits/vector.tcc **** 	      if (!_Alloc_traits::_S_always_equal()
 208:/usr/include/c++/11/bits/vector.tcc **** 	          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
 209:/usr/include/c++/11/bits/vector.tcc **** 	        {
 210:/usr/include/c++/11/bits/vector.tcc **** 		  // replacement allocator cannot free existing storage
 211:/usr/include/c++/11/bits/vector.tcc **** 		  this->clear();
 212:/usr/include/c++/11/bits/vector.tcc **** 		  _M_deallocate(this->_M_impl._M_start,
 213:/usr/include/c++/11/bits/vector.tcc **** 				this->_M_impl._M_end_of_storage
 214:/usr/include/c++/11/bits/vector.tcc **** 				- this->_M_impl._M_start);
 215:/usr/include/c++/11/bits/vector.tcc **** 		  this->_M_impl._M_start = nullptr;
 216:/usr/include/c++/11/bits/vector.tcc **** 		  this->_M_impl._M_finish = nullptr;
 217:/usr/include/c++/11/bits/vector.tcc **** 		  this->_M_impl._M_end_of_storage = nullptr;
 218:/usr/include/c++/11/bits/vector.tcc **** 		}
 219:/usr/include/c++/11/bits/vector.tcc **** 	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 220:/usr/include/c++/11/bits/vector.tcc **** 				   __x._M_get_Tp_allocator());
 221:/usr/include/c++/11/bits/vector.tcc **** 	    }
 222:/usr/include/c++/11/bits/vector.tcc **** #endif
 223:/usr/include/c++/11/bits/vector.tcc **** 	  const size_type __xlen = __x.size();
 224:/usr/include/c++/11/bits/vector.tcc **** 	  if (__xlen > capacity())
 225:/usr/include/c++/11/bits/vector.tcc **** 	    {
 226:/usr/include/c++/11/bits/vector.tcc **** 	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
 227:/usr/include/c++/11/bits/vector.tcc **** 						   __x.end());
 228:/usr/include/c++/11/bits/vector.tcc **** 	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 229:/usr/include/c++/11/bits/vector.tcc **** 			    _M_get_Tp_allocator());
 230:/usr/include/c++/11/bits/vector.tcc **** 	      _M_deallocate(this->_M_impl._M_start,
 231:/usr/include/c++/11/bits/vector.tcc **** 			    this->_M_impl._M_end_of_storage
 232:/usr/include/c++/11/bits/vector.tcc **** 			    - this->_M_impl._M_start);
 233:/usr/include/c++/11/bits/vector.tcc **** 	      this->_M_impl._M_start = __tmp;
 234:/usr/include/c++/11/bits/vector.tcc **** 	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 235:/usr/include/c++/11/bits/vector.tcc **** 	    }
 236:/usr/include/c++/11/bits/vector.tcc **** 	  else if (size() >= __xlen)
 237:/usr/include/c++/11/bits/vector.tcc **** 	    {
 238:/usr/include/c++/11/bits/vector.tcc **** 	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 239:/usr/include/c++/11/bits/vector.tcc **** 			    end(), _M_get_Tp_allocator());
 240:/usr/include/c++/11/bits/vector.tcc **** 	    }
 241:/usr/include/c++/11/bits/vector.tcc **** 	  else
 242:/usr/include/c++/11/bits/vector.tcc **** 	    {
 243:/usr/include/c++/11/bits/vector.tcc **** 	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 244:/usr/include/c++/11/bits/vector.tcc **** 			this->_M_impl._M_start);
 245:/usr/include/c++/11/bits/vector.tcc **** 	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 246:/usr/include/c++/11/bits/vector.tcc **** 					  __x._M_impl._M_finish,
 247:/usr/include/c++/11/bits/vector.tcc **** 					  this->_M_impl._M_finish,
 248:/usr/include/c++/11/bits/vector.tcc **** 					  _M_get_Tp_allocator());
 249:/usr/include/c++/11/bits/vector.tcc **** 	    }
 250:/usr/include/c++/11/bits/vector.tcc **** 	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 251:/usr/include/c++/11/bits/vector.tcc **** 	}
 252:/usr/include/c++/11/bits/vector.tcc ****       return *this;
 253:/usr/include/c++/11/bits/vector.tcc ****     }
 254:/usr/include/c++/11/bits/vector.tcc **** 
 255:/usr/include/c++/11/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 256:/usr/include/c++/11/bits/vector.tcc ****     void
 257:/usr/include/c++/11/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 258:/usr/include/c++/11/bits/vector.tcc ****     _M_fill_assign(size_t __n, const value_type& __val)
 259:/usr/include/c++/11/bits/vector.tcc ****     {
 260:/usr/include/c++/11/bits/vector.tcc ****       if (__n > capacity())
 261:/usr/include/c++/11/bits/vector.tcc **** 	{
 262:/usr/include/c++/11/bits/vector.tcc **** 	  vector __tmp(__n, __val, _M_get_Tp_allocator());
 263:/usr/include/c++/11/bits/vector.tcc **** 	  __tmp._M_impl._M_swap_data(this->_M_impl);
 264:/usr/include/c++/11/bits/vector.tcc **** 	}
 265:/usr/include/c++/11/bits/vector.tcc ****       else if (__n > size())
 266:/usr/include/c++/11/bits/vector.tcc **** 	{
 267:/usr/include/c++/11/bits/vector.tcc **** 	  std::fill(begin(), end(), __val);
 268:/usr/include/c++/11/bits/vector.tcc **** 	  const size_type __add = __n - size();
 269:/usr/include/c++/11/bits/vector.tcc **** 	  _GLIBCXX_ASAN_ANNOTATE_GROW(__add);
 270:/usr/include/c++/11/bits/vector.tcc **** 	  this->_M_impl._M_finish =
 271:/usr/include/c++/11/bits/vector.tcc **** 	    std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
 272:/usr/include/c++/11/bits/vector.tcc **** 					  __add, __val, _M_get_Tp_allocator());
 273:/usr/include/c++/11/bits/vector.tcc **** 	  _GLIBCXX_ASAN_ANNOTATE_GREW(__add);
 274:/usr/include/c++/11/bits/vector.tcc **** 	}
 275:/usr/include/c++/11/bits/vector.tcc ****       else
 276:/usr/include/c++/11/bits/vector.tcc ****         _M_erase_at_end(std::fill_n(this->_M_impl._M_start, __n, __val));
 277:/usr/include/c++/11/bits/vector.tcc ****     }
 278:/usr/include/c++/11/bits/vector.tcc **** 
 279:/usr/include/c++/11/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 280:/usr/include/c++/11/bits/vector.tcc ****     template<typename _InputIterator>
 281:/usr/include/c++/11/bits/vector.tcc ****       void
 282:/usr/include/c++/11/bits/vector.tcc ****       vector<_Tp, _Alloc>::
 283:/usr/include/c++/11/bits/vector.tcc ****       _M_assign_aux(_InputIterator __first, _InputIterator __last,
 284:/usr/include/c++/11/bits/vector.tcc **** 		    std::input_iterator_tag)
 285:/usr/include/c++/11/bits/vector.tcc ****       {
 286:/usr/include/c++/11/bits/vector.tcc **** 	pointer __cur(this->_M_impl._M_start);
 287:/usr/include/c++/11/bits/vector.tcc **** 	for (; __first != __last && __cur != this->_M_impl._M_finish;
 288:/usr/include/c++/11/bits/vector.tcc **** 	     ++__cur, (void)++__first)
 289:/usr/include/c++/11/bits/vector.tcc **** 	  *__cur = *__first;
 290:/usr/include/c++/11/bits/vector.tcc **** 	if (__first == __last)
 291:/usr/include/c++/11/bits/vector.tcc **** 	  _M_erase_at_end(__cur);
 292:/usr/include/c++/11/bits/vector.tcc **** 	else
 293:/usr/include/c++/11/bits/vector.tcc **** 	  _M_range_insert(end(), __first, __last,
 294:/usr/include/c++/11/bits/vector.tcc **** 			  std::__iterator_category(__first));
 295:/usr/include/c++/11/bits/vector.tcc ****       }
 296:/usr/include/c++/11/bits/vector.tcc **** 
 297:/usr/include/c++/11/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 298:/usr/include/c++/11/bits/vector.tcc ****     template<typename _ForwardIterator>
 299:/usr/include/c++/11/bits/vector.tcc ****       void
 300:/usr/include/c++/11/bits/vector.tcc ****       vector<_Tp, _Alloc>::
 301:/usr/include/c++/11/bits/vector.tcc ****       _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
 302:/usr/include/c++/11/bits/vector.tcc **** 		    std::forward_iterator_tag)
 303:/usr/include/c++/11/bits/vector.tcc ****       {
 304:/usr/include/c++/11/bits/vector.tcc **** 	const size_type __len = std::distance(__first, __last);
 305:/usr/include/c++/11/bits/vector.tcc **** 
 306:/usr/include/c++/11/bits/vector.tcc **** 	if (__len > capacity())
 307:/usr/include/c++/11/bits/vector.tcc **** 	  {
 308:/usr/include/c++/11/bits/vector.tcc **** 	    _S_check_init_len(__len, _M_get_Tp_allocator());
 309:/usr/include/c++/11/bits/vector.tcc **** 	    pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
 310:/usr/include/c++/11/bits/vector.tcc **** 	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 311:/usr/include/c++/11/bits/vector.tcc **** 			  _M_get_Tp_allocator());
 312:/usr/include/c++/11/bits/vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_REINIT;
 313:/usr/include/c++/11/bits/vector.tcc **** 	    _M_deallocate(this->_M_impl._M_start,
 314:/usr/include/c++/11/bits/vector.tcc **** 			  this->_M_impl._M_end_of_storage
 315:/usr/include/c++/11/bits/vector.tcc **** 			  - this->_M_impl._M_start);
 316:/usr/include/c++/11/bits/vector.tcc **** 	    this->_M_impl._M_start = __tmp;
 317:/usr/include/c++/11/bits/vector.tcc **** 	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
 318:/usr/include/c++/11/bits/vector.tcc **** 	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
 319:/usr/include/c++/11/bits/vector.tcc **** 	  }
 320:/usr/include/c++/11/bits/vector.tcc **** 	else if (size() >= __len)
 321:/usr/include/c++/11/bits/vector.tcc **** 	  _M_erase_at_end(std::copy(__first, __last, this->_M_impl._M_start));
 322:/usr/include/c++/11/bits/vector.tcc **** 	else
 323:/usr/include/c++/11/bits/vector.tcc **** 	  {
 324:/usr/include/c++/11/bits/vector.tcc **** 	    _ForwardIterator __mid = __first;
 325:/usr/include/c++/11/bits/vector.tcc **** 	    std::advance(__mid, size());
 326:/usr/include/c++/11/bits/vector.tcc **** 	    std::copy(__first, __mid, this->_M_impl._M_start);
 327:/usr/include/c++/11/bits/vector.tcc **** 	    const size_type __attribute__((__unused__)) __n = __len - size();
 328:/usr/include/c++/11/bits/vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
 329:/usr/include/c++/11/bits/vector.tcc **** 	    this->_M_impl._M_finish =
 330:/usr/include/c++/11/bits/vector.tcc **** 	      std::__uninitialized_copy_a(__mid, __last,
 331:/usr/include/c++/11/bits/vector.tcc **** 					  this->_M_impl._M_finish,
 332:/usr/include/c++/11/bits/vector.tcc **** 					  _M_get_Tp_allocator());
 333:/usr/include/c++/11/bits/vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GREW(__n);
 334:/usr/include/c++/11/bits/vector.tcc **** 	  }
 335:/usr/include/c++/11/bits/vector.tcc ****       }
 336:/usr/include/c++/11/bits/vector.tcc **** 
 337:/usr/include/c++/11/bits/vector.tcc **** #if __cplusplus >= 201103L
 338:/usr/include/c++/11/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 339:/usr/include/c++/11/bits/vector.tcc ****     auto
 340:/usr/include/c++/11/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 341:/usr/include/c++/11/bits/vector.tcc ****     _M_insert_rval(const_iterator __position, value_type&& __v) -> iterator
 342:/usr/include/c++/11/bits/vector.tcc ****     {
 343:/usr/include/c++/11/bits/vector.tcc ****       const auto __n = __position - cbegin();
 344:/usr/include/c++/11/bits/vector.tcc ****       if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 345:/usr/include/c++/11/bits/vector.tcc **** 	if (__position == cend())
 346:/usr/include/c++/11/bits/vector.tcc **** 	  {
 347:/usr/include/c++/11/bits/vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
 348:/usr/include/c++/11/bits/vector.tcc **** 	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 349:/usr/include/c++/11/bits/vector.tcc **** 				     std::move(__v));
 350:/usr/include/c++/11/bits/vector.tcc **** 	    ++this->_M_impl._M_finish;
 351:/usr/include/c++/11/bits/vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
 352:/usr/include/c++/11/bits/vector.tcc **** 	  }
 353:/usr/include/c++/11/bits/vector.tcc **** 	else
 354:/usr/include/c++/11/bits/vector.tcc **** 	  _M_insert_aux(begin() + __n, std::move(__v));
 355:/usr/include/c++/11/bits/vector.tcc ****       else
 356:/usr/include/c++/11/bits/vector.tcc **** 	_M_realloc_insert(begin() + __n, std::move(__v));
 357:/usr/include/c++/11/bits/vector.tcc **** 
 358:/usr/include/c++/11/bits/vector.tcc ****       return iterator(this->_M_impl._M_start + __n);
 359:/usr/include/c++/11/bits/vector.tcc ****     }
 360:/usr/include/c++/11/bits/vector.tcc **** 
 361:/usr/include/c++/11/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 362:/usr/include/c++/11/bits/vector.tcc ****     template<typename... _Args>
 363:/usr/include/c++/11/bits/vector.tcc ****       auto
 364:/usr/include/c++/11/bits/vector.tcc ****       vector<_Tp, _Alloc>::
 365:/usr/include/c++/11/bits/vector.tcc ****       _M_emplace_aux(const_iterator __position, _Args&&... __args)
 366:/usr/include/c++/11/bits/vector.tcc ****       -> iterator
 367:/usr/include/c++/11/bits/vector.tcc ****       {
 368:/usr/include/c++/11/bits/vector.tcc **** 	const auto __n = __position - cbegin();
 369:/usr/include/c++/11/bits/vector.tcc **** 	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 370:/usr/include/c++/11/bits/vector.tcc **** 	  if (__position == cend())
 371:/usr/include/c++/11/bits/vector.tcc **** 	    {
 372:/usr/include/c++/11/bits/vector.tcc **** 	      _GLIBCXX_ASAN_ANNOTATE_GROW(1);
 373:/usr/include/c++/11/bits/vector.tcc **** 	      _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 374:/usr/include/c++/11/bits/vector.tcc **** 				       std::forward<_Args>(__args)...);
 375:/usr/include/c++/11/bits/vector.tcc **** 	      ++this->_M_impl._M_finish;
 376:/usr/include/c++/11/bits/vector.tcc **** 	      _GLIBCXX_ASAN_ANNOTATE_GREW(1);
 377:/usr/include/c++/11/bits/vector.tcc **** 	    }
 378:/usr/include/c++/11/bits/vector.tcc **** 	  else
 379:/usr/include/c++/11/bits/vector.tcc **** 	    {
 380:/usr/include/c++/11/bits/vector.tcc **** 	      // We need to construct a temporary because something in __args...
 381:/usr/include/c++/11/bits/vector.tcc **** 	      // could alias one of the elements of the container and so we
 382:/usr/include/c++/11/bits/vector.tcc **** 	      // need to use it before _M_insert_aux moves elements around.
 383:/usr/include/c++/11/bits/vector.tcc **** 	      _Temporary_value __tmp(this, std::forward<_Args>(__args)...);
 384:/usr/include/c++/11/bits/vector.tcc **** 	      _M_insert_aux(begin() + __n, std::move(__tmp._M_val()));
 385:/usr/include/c++/11/bits/vector.tcc **** 	    }
 386:/usr/include/c++/11/bits/vector.tcc **** 	else
 387:/usr/include/c++/11/bits/vector.tcc **** 	  _M_realloc_insert(begin() + __n, std::forward<_Args>(__args)...);
 388:/usr/include/c++/11/bits/vector.tcc **** 
 389:/usr/include/c++/11/bits/vector.tcc **** 	return iterator(this->_M_impl._M_start + __n);
 390:/usr/include/c++/11/bits/vector.tcc ****       }
 391:/usr/include/c++/11/bits/vector.tcc **** 
 392:/usr/include/c++/11/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 393:/usr/include/c++/11/bits/vector.tcc ****     template<typename _Arg>
 394:/usr/include/c++/11/bits/vector.tcc ****       void
 395:/usr/include/c++/11/bits/vector.tcc ****       vector<_Tp, _Alloc>::
 396:/usr/include/c++/11/bits/vector.tcc ****       _M_insert_aux(iterator __position, _Arg&& __arg)
 397:/usr/include/c++/11/bits/vector.tcc **** #else
 398:/usr/include/c++/11/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 399:/usr/include/c++/11/bits/vector.tcc ****     void
 400:/usr/include/c++/11/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 401:/usr/include/c++/11/bits/vector.tcc ****     _M_insert_aux(iterator __position, const _Tp& __x)
 402:/usr/include/c++/11/bits/vector.tcc **** #endif
 403:/usr/include/c++/11/bits/vector.tcc ****     {
 404:/usr/include/c++/11/bits/vector.tcc ****       _GLIBCXX_ASAN_ANNOTATE_GROW(1);
 405:/usr/include/c++/11/bits/vector.tcc ****       _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 406:/usr/include/c++/11/bits/vector.tcc **** 			       _GLIBCXX_MOVE(*(this->_M_impl._M_finish - 1)));
 407:/usr/include/c++/11/bits/vector.tcc ****       ++this->_M_impl._M_finish;
 408:/usr/include/c++/11/bits/vector.tcc ****       _GLIBCXX_ASAN_ANNOTATE_GREW(1);
 409:/usr/include/c++/11/bits/vector.tcc **** #if __cplusplus < 201103L
 410:/usr/include/c++/11/bits/vector.tcc ****       _Tp __x_copy = __x;
 411:/usr/include/c++/11/bits/vector.tcc **** #endif
 412:/usr/include/c++/11/bits/vector.tcc ****       _GLIBCXX_MOVE_BACKWARD3(__position.base(),
 413:/usr/include/c++/11/bits/vector.tcc **** 			      this->_M_impl._M_finish - 2,
 414:/usr/include/c++/11/bits/vector.tcc **** 			      this->_M_impl._M_finish - 1);
 415:/usr/include/c++/11/bits/vector.tcc **** #if __cplusplus < 201103L
 416:/usr/include/c++/11/bits/vector.tcc ****       *__position = __x_copy;
 417:/usr/include/c++/11/bits/vector.tcc **** #else
 418:/usr/include/c++/11/bits/vector.tcc ****       *__position = std::forward<_Arg>(__arg);
 419:/usr/include/c++/11/bits/vector.tcc **** #endif
 420:/usr/include/c++/11/bits/vector.tcc ****     }
 421:/usr/include/c++/11/bits/vector.tcc **** 
 422:/usr/include/c++/11/bits/vector.tcc **** #if __cplusplus >= 201103L
 423:/usr/include/c++/11/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 424:/usr/include/c++/11/bits/vector.tcc ****     template<typename... _Args>
 425:/usr/include/c++/11/bits/vector.tcc ****       void
 426:/usr/include/c++/11/bits/vector.tcc ****       vector<_Tp, _Alloc>::
 427:/usr/include/c++/11/bits/vector.tcc ****       _M_realloc_insert(iterator __position, _Args&&... __args)
 428:/usr/include/c++/11/bits/vector.tcc **** #else
 429:/usr/include/c++/11/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 430:/usr/include/c++/11/bits/vector.tcc ****     void
 431:/usr/include/c++/11/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 1094              		.loc 8 431 5
 1095              		.cfi_startproc
 1096              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 1097              		.cfi_lsda 0x1b,.LLSDA973
 1098 0000 F30F1EFA 		endbr64
 1099 0004 55       		pushq	%rbp
 1100              		.cfi_def_cfa_offset 16
 1101              		.cfi_offset 6, -16
 1102 0005 4889E5   		movq	%rsp, %rbp
 1103              		.cfi_def_cfa_register 6
 1104 0008 53       		pushq	%rbx
 1105 0009 4883EC68 		subq	$104, %rsp
 1106              		.cfi_offset 3, -24
 1107 000d 48897DA8 		movq	%rdi, -88(%rbp)
 1108 0011 488975A0 		movq	%rsi, -96(%rbp)
 1109 0015 48895598 		movq	%rdx, -104(%rbp)
 1110              		.loc 8 431 5
 1111 0019 64488B04 		movq	%fs:40, %rax
 1111      25280000 
 1111      00
 1112 0022 488945E8 		movq	%rax, -24(%rbp)
 1113 0026 31C0     		xorl	%eax, %eax
 432:/usr/include/c++/11/bits/vector.tcc ****     _M_realloc_insert(iterator __position, const _Tp& __x)
 433:/usr/include/c++/11/bits/vector.tcc **** #endif
 434:/usr/include/c++/11/bits/vector.tcc ****     {
 435:/usr/include/c++/11/bits/vector.tcc ****       const size_type __len =
 436:/usr/include/c++/11/bits/vector.tcc **** 	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 1114              		.loc 8 436 14
 1115 0028 488B45A8 		movq	-88(%rbp), %rax
 1116 002c 488D1500 		leaq	.LC0(%rip), %rdx
 1116      000000
 1117 0033 BE010000 		movl	$1, %esi
 1117      00
 1118 0038 4889C7   		movq	%rax, %rdi
 1119              	.LEHB22:
 1120 003b E8000000 		call	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE12_M_check_lenEmPKc@PLT
 1120      00
 1121 0040 488945C0 		movq	%rax, -64(%rbp)
 437:/usr/include/c++/11/bits/vector.tcc ****       pointer __old_start = this->_M_impl._M_start;
 1122              		.loc 8 437 15
 1123 0044 488B45A8 		movq	-88(%rbp), %rax
 1124 0048 488B00   		movq	(%rax), %rax
 1125 004b 488945C8 		movq	%rax, -56(%rbp)
 438:/usr/include/c++/11/bits/vector.tcc ****       pointer __old_finish = this->_M_impl._M_finish;
 1126              		.loc 8 438 15
 1127 004f 488B45A8 		movq	-88(%rbp), %rax
 1128 0053 488B4008 		movq	8(%rax), %rax
 1129 0057 488945D0 		movq	%rax, -48(%rbp)
 439:/usr/include/c++/11/bits/vector.tcc ****       const size_type __elems_before = __position - begin();
 1130              		.loc 8 439 58
 1131 005b 488B45A8 		movq	-88(%rbp), %rax
 1132 005f 4889C7   		movq	%rax, %rdi
 1133 0062 E8000000 		call	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE5beginEv@PLT
 1133      00
 1134 0067 488945B0 		movq	%rax, -80(%rbp)
 1135              		.loc 8 439 51
 1136 006b 488D55B0 		leaq	-80(%rbp), %rdx
 1137 006f 488D45A0 		leaq	-96(%rbp), %rax
 1138 0073 4889D6   		movq	%rdx, %rsi
 1139 0076 4889C7   		movq	%rax, %rdi
 1140 0079 E8000000 		call	_ZN9__gnu_cxxmiIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEENS_17__normal_iterator
 1140      00
 1141              		.loc 8 439 23
 1142 007e 488945D8 		movq	%rax, -40(%rbp)
 440:/usr/include/c++/11/bits/vector.tcc ****       pointer __new_start(this->_M_allocate(__len));
 1143              		.loc 8 440 44
 1144 0082 488B45A8 		movq	-88(%rbp), %rax
 1145 0086 488B55C0 		movq	-64(%rbp), %rdx
 1146 008a 4889D6   		movq	%rdx, %rsi
 1147 008d 4889C7   		movq	%rax, %rdi
 1148 0090 E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE11_M_allocateEm@PLT
 1148      00
 1149              	.LEHE22:
 1150 0095 488945E0 		movq	%rax, -32(%rbp)
 441:/usr/include/c++/11/bits/vector.tcc ****       pointer __new_finish(__new_start);
 1151              		.loc 8 441 15
 1152 0099 488B45E0 		movq	-32(%rbp), %rax
 1153 009d 488945B8 		movq	%rax, -72(%rbp)
 442:/usr/include/c++/11/bits/vector.tcc ****       __try
 443:/usr/include/c++/11/bits/vector.tcc **** 	{
 444:/usr/include/c++/11/bits/vector.tcc **** 	  // The order of the three operations is dictated by the C++11
 445:/usr/include/c++/11/bits/vector.tcc **** 	  // case, where the moves could alter a new element belonging
 446:/usr/include/c++/11/bits/vector.tcc **** 	  // to the existing vector.  This is an issue only for callers
 447:/usr/include/c++/11/bits/vector.tcc **** 	  // taking the element by lvalue ref (see last bullet of C++11
 448:/usr/include/c++/11/bits/vector.tcc **** 	  // [res.on.arguments]).
 449:/usr/include/c++/11/bits/vector.tcc **** 	  _Alloc_traits::construct(this->_M_impl,
 450:/usr/include/c++/11/bits/vector.tcc **** 				   __new_start + __elems_before,
 1154              		.loc 8 450 20
 1155 00a1 488B45D8 		movq	-40(%rbp), %rax
 1156 00a5 48C1E007 		salq	$7, %rax
 1157 00a9 4889C2   		movq	%rax, %rdx
 449:/usr/include/c++/11/bits/vector.tcc **** 				   __new_start + __elems_before,
 1158              		.loc 8 449 28
 1159 00ac 488B45E0 		movq	-32(%rbp), %rax
 1160 00b0 488D0C02 		leaq	(%rdx,%rax), %rcx
 449:/usr/include/c++/11/bits/vector.tcc **** 				   __new_start + __elems_before,
 1161              		.loc 8 449 35
 1162 00b4 488B45A8 		movq	-88(%rbp), %rax
 449:/usr/include/c++/11/bits/vector.tcc **** 				   __new_start + __elems_before,
 1163              		.loc 8 449 28
 1164 00b8 488B5598 		movq	-104(%rbp), %rdx
 1165 00bc 4889CE   		movq	%rcx, %rsi
 1166 00bf 4889C7   		movq	%rax, %rdi
 1167              	.LEHB23:
 1168 00c2 E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEES2_E9constructIS2_EEvRS3_PS2
 1168      00
 451:/usr/include/c++/11/bits/vector.tcc **** #if __cplusplus >= 201103L
 452:/usr/include/c++/11/bits/vector.tcc **** 				   std::forward<_Args>(__args)...);
 453:/usr/include/c++/11/bits/vector.tcc **** #else
 454:/usr/include/c++/11/bits/vector.tcc **** 				   __x);
 455:/usr/include/c++/11/bits/vector.tcc **** #endif
 456:/usr/include/c++/11/bits/vector.tcc **** 	  __new_finish = pointer();
 1169              		.loc 8 456 17
 1170 00c7 48C745B8 		movq	$0, -72(%rbp)
 1170      00000000 
 457:/usr/include/c++/11/bits/vector.tcc **** 
 458:/usr/include/c++/11/bits/vector.tcc **** #if __cplusplus >= 201103L
 459:/usr/include/c++/11/bits/vector.tcc **** 	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 460:/usr/include/c++/11/bits/vector.tcc **** 	    {
 461:/usr/include/c++/11/bits/vector.tcc **** 	      __new_finish = _S_relocate(__old_start, __position.base(),
 462:/usr/include/c++/11/bits/vector.tcc **** 					 __new_start, _M_get_Tp_allocator());
 463:/usr/include/c++/11/bits/vector.tcc **** 
 464:/usr/include/c++/11/bits/vector.tcc **** 	      ++__new_finish;
 465:/usr/include/c++/11/bits/vector.tcc **** 
 466:/usr/include/c++/11/bits/vector.tcc **** 	      __new_finish = _S_relocate(__position.base(), __old_finish,
 467:/usr/include/c++/11/bits/vector.tcc **** 					 __new_finish, _M_get_Tp_allocator());
 468:/usr/include/c++/11/bits/vector.tcc **** 	    }
 469:/usr/include/c++/11/bits/vector.tcc **** 	  else
 470:/usr/include/c++/11/bits/vector.tcc **** #endif
 471:/usr/include/c++/11/bits/vector.tcc **** 	    {
 472:/usr/include/c++/11/bits/vector.tcc **** 	      __new_finish
 473:/usr/include/c++/11/bits/vector.tcc **** 		= std::__uninitialized_move_if_noexcept_a
 474:/usr/include/c++/11/bits/vector.tcc **** 		(__old_start, __position.base(),
 475:/usr/include/c++/11/bits/vector.tcc **** 		 __new_start, _M_get_Tp_allocator());
 1171              		.loc 8 475 36
 1172 00cf 488B45A8 		movq	-88(%rbp), %rax
 1173 00d3 4889C7   		movq	%rax, %rdi
 1174 00d6 E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv@PLT
 1174      00
 1175 00db 4889C3   		movq	%rax, %rbx
 474:/usr/include/c++/11/bits/vector.tcc **** 		 __new_start, _M_get_Tp_allocator());
 1176              		.loc 8 474 32
 1177 00de 488D45A0 		leaq	-96(%rbp), %rax
 1178 00e2 4889C7   		movq	%rax, %rdi
 1179 00e5 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4base
 1179      00
 474:/usr/include/c++/11/bits/vector.tcc **** 		 __new_start, _M_get_Tp_allocator());
 1180              		.loc 8 474 3
 1181 00ea 488B30   		movq	(%rax), %rsi
 1182 00ed 488B55E0 		movq	-32(%rbp), %rdx
 1183 00f1 488B45C8 		movq	-56(%rbp), %rax
 1184 00f5 4889D9   		movq	%rbx, %rcx
 1185 00f8 4889C7   		movq	%rax, %rdi
 1186 00fb E8000000 		call	_ZSt34__uninitialized_move_if_noexcept_aIPN8UnitTest18DeferredTestResultES2_SaIS1_EET0_T_S5_S
 1186      00
 1187 0100 488945B8 		movq	%rax, -72(%rbp)
 476:/usr/include/c++/11/bits/vector.tcc **** 
 477:/usr/include/c++/11/bits/vector.tcc **** 	      ++__new_finish;
 1188              		.loc 8 477 8
 1189 0104 48836DB8 		subq	$-128, -72(%rbp)
 1189      80
 478:/usr/include/c++/11/bits/vector.tcc **** 
 479:/usr/include/c++/11/bits/vector.tcc **** 	      __new_finish
 480:/usr/include/c++/11/bits/vector.tcc **** 		= std::__uninitialized_move_if_noexcept_a
 481:/usr/include/c++/11/bits/vector.tcc **** 		(__position.base(), __old_finish,
 482:/usr/include/c++/11/bits/vector.tcc **** 		 __new_finish, _M_get_Tp_allocator());
 1190              		.loc 8 482 37
 1191 0109 488B45A8 		movq	-88(%rbp), %rax
 1192 010d 4889C7   		movq	%rax, %rdi
 1193 0110 E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv@PLT
 1193      00
 1194 0115 4889C3   		movq	%rax, %rbx
 481:/usr/include/c++/11/bits/vector.tcc **** 		 __new_finish, _M_get_Tp_allocator());
 1195              		.loc 8 481 19
 1196 0118 488D45A0 		leaq	-96(%rbp), %rax
 1197 011c 4889C7   		movq	%rax, %rdi
 1198 011f E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4base
 1198      00
 481:/usr/include/c++/11/bits/vector.tcc **** 		 __new_finish, _M_get_Tp_allocator());
 1199              		.loc 8 481 3
 1200 0124 488B00   		movq	(%rax), %rax
 1201 0127 488B55B8 		movq	-72(%rbp), %rdx
 1202 012b 488B75D0 		movq	-48(%rbp), %rsi
 1203 012f 4889D9   		movq	%rbx, %rcx
 1204 0132 4889C7   		movq	%rax, %rdi
 1205 0135 E8000000 		call	_ZSt34__uninitialized_move_if_noexcept_aIPN8UnitTest18DeferredTestResultES2_SaIS1_EET0_T_S5_S
 1205      00
 1206              	.LEHE23:
 481:/usr/include/c++/11/bits/vector.tcc **** 		 __new_finish, _M_get_Tp_allocator());
 1207              		.loc 8 481 3 is_stmt 0 discriminator 1
 1208 013a 488945B8 		movq	%rax, -72(%rbp)
 483:/usr/include/c++/11/bits/vector.tcc **** 	    }
 484:/usr/include/c++/11/bits/vector.tcc **** 	}
 485:/usr/include/c++/11/bits/vector.tcc ****       __catch(...)
 486:/usr/include/c++/11/bits/vector.tcc **** 	{
 487:/usr/include/c++/11/bits/vector.tcc **** 	  if (!__new_finish)
 488:/usr/include/c++/11/bits/vector.tcc **** 	    _Alloc_traits::destroy(this->_M_impl,
 489:/usr/include/c++/11/bits/vector.tcc **** 				   __new_start + __elems_before);
 490:/usr/include/c++/11/bits/vector.tcc **** 	  else
 491:/usr/include/c++/11/bits/vector.tcc **** 	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
 492:/usr/include/c++/11/bits/vector.tcc **** 	  _M_deallocate(__new_start, __len);
 493:/usr/include/c++/11/bits/vector.tcc **** 	  __throw_exception_again;
 494:/usr/include/c++/11/bits/vector.tcc **** 	}
 495:/usr/include/c++/11/bits/vector.tcc **** #if __cplusplus >= 201103L
 496:/usr/include/c++/11/bits/vector.tcc ****       if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 497:/usr/include/c++/11/bits/vector.tcc **** #endif
 498:/usr/include/c++/11/bits/vector.tcc **** 	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 1209              		.loc 8 498 62 is_stmt 1 discriminator 1
 1210 013e 488B45A8 		movq	-88(%rbp), %rax
 1211 0142 4889C7   		movq	%rax, %rdi
 1212 0145 E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv@PLT
 1212      00
 1213 014a 4889C2   		movq	%rax, %rdx
 1214              		.loc 8 498 15 discriminator 1
 1215 014d 488B4DD0 		movq	-48(%rbp), %rcx
 1216 0151 488B45C8 		movq	-56(%rbp), %rax
 1217 0155 4889CE   		movq	%rcx, %rsi
 1218 0158 4889C7   		movq	%rax, %rdi
 1219              	.LEHB24:
 1220 015b E8000000 		call	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultES1_EvT_S3_RSaIT0_E@PLT
 1220      00
 499:/usr/include/c++/11/bits/vector.tcc ****       _GLIBCXX_ASAN_ANNOTATE_REINIT;
 500:/usr/include/c++/11/bits/vector.tcc ****       _M_deallocate(__old_start,
 1221              		.loc 8 500 20 discriminator 1
 1222 0160 488B45A8 		movq	-88(%rbp), %rax
 501:/usr/include/c++/11/bits/vector.tcc **** 		    this->_M_impl._M_end_of_storage - __old_start);
 1223              		.loc 8 501 21 discriminator 1
 1224 0164 488B55A8 		movq	-88(%rbp), %rdx
 1225 0168 488B5210 		movq	16(%rdx), %rdx
 1226              		.loc 8 501 39 discriminator 1
 1227 016c 482B55C8 		subq	-56(%rbp), %rdx
 1228 0170 48C1FA07 		sarq	$7, %rdx
 500:/usr/include/c++/11/bits/vector.tcc **** 		    this->_M_impl._M_end_of_storage - __old_start);
 1229              		.loc 8 500 20 discriminator 1
 1230 0174 488B4DC8 		movq	-56(%rbp), %rcx
 1231 0178 4889CE   		movq	%rcx, %rsi
 1232 017b 4889C7   		movq	%rax, %rdi
 1233 017e E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE13_M_deallocateEPS1_m@PLT
 1233      00
 1234              	.LEHE24:
 502:/usr/include/c++/11/bits/vector.tcc ****       this->_M_impl._M_start = __new_start;
 1235              		.loc 8 502 30 discriminator 1
 1236 0183 488B45A8 		movq	-88(%rbp), %rax
 1237 0187 488B55E0 		movq	-32(%rbp), %rdx
 1238 018b 488910   		movq	%rdx, (%rax)
 503:/usr/include/c++/11/bits/vector.tcc ****       this->_M_impl._M_finish = __new_finish;
 1239              		.loc 8 503 31 discriminator 1
 1240 018e 488B45A8 		movq	-88(%rbp), %rax
 1241 0192 488B55B8 		movq	-72(%rbp), %rdx
 1242 0196 48895008 		movq	%rdx, 8(%rax)
 504:/usr/include/c++/11/bits/vector.tcc ****       this->_M_impl._M_end_of_storage = __new_start + __len;
 1243              		.loc 8 504 53 discriminator 1
 1244 019a 488B45C0 		movq	-64(%rbp), %rax
 1245 019e 48C1E007 		salq	$7, %rax
 1246 01a2 4889C2   		movq	%rax, %rdx
 1247 01a5 488B45E0 		movq	-32(%rbp), %rax
 1248 01a9 4801C2   		addq	%rax, %rdx
 1249              		.loc 8 504 39 discriminator 1
 1250 01ac 488B45A8 		movq	-88(%rbp), %rax
 1251 01b0 48895010 		movq	%rdx, 16(%rax)
 505:/usr/include/c++/11/bits/vector.tcc ****     }
 1252              		.loc 8 505 5 discriminator 1
 1253 01b4 90       		nop
 1254 01b5 488B45E8 		movq	-24(%rbp), %rax
 1255 01b9 64482B04 		subq	%fs:40, %rax
 1255      25280000 
 1255      00
 1256 01c2 0F849500 		je	.L60
 1256      0000
 1257 01c8 E98B0000 		jmp	.L63
 1257      00
 1258              	.L61:
 1259 01cd F30F1EFA 		endbr64
 485:/usr/include/c++/11/bits/vector.tcc **** 	{
 1260              		.loc 8 485 7
 1261 01d1 4889C7   		movq	%rax, %rdi
 1262 01d4 E8000000 		call	__cxa_begin_catch@PLT
 1262      00
 487:/usr/include/c++/11/bits/vector.tcc **** 	    _Alloc_traits::destroy(this->_M_impl,
 1263              		.loc 8 487 4
 1264 01d9 48837DB8 		cmpq	$0, -72(%rbp)
 1264      00
 1265 01de 7523     		jne	.L57
 489:/usr/include/c++/11/bits/vector.tcc **** 	  else
 1266              		.loc 8 489 20
 1267 01e0 488B45D8 		movq	-40(%rbp), %rax
 1268 01e4 48C1E007 		salq	$7, %rax
 1269 01e8 4889C2   		movq	%rax, %rdx
 488:/usr/include/c++/11/bits/vector.tcc **** 				   __new_start + __elems_before);
 1270              		.loc 8 488 28
 1271 01eb 488B45E0 		movq	-32(%rbp), %rax
 1272 01ef 4801C2   		addq	%rax, %rdx
 488:/usr/include/c++/11/bits/vector.tcc **** 				   __new_start + __elems_before);
 1273              		.loc 8 488 35
 1274 01f2 488B45A8 		movq	-88(%rbp), %rax
 488:/usr/include/c++/11/bits/vector.tcc **** 				   __new_start + __elems_before);
 1275              		.loc 8 488 28
 1276 01f6 4889D6   		movq	%rdx, %rsi
 1277 01f9 4889C7   		movq	%rax, %rdi
 1278              	.LEHB25:
 1279 01fc E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEES2_E7destroyERS3_PS2_@PLT
 1279      00
 1280 0201 EB22     		jmp	.L58
 1281              	.L57:
 491:/usr/include/c++/11/bits/vector.tcc **** 	  _M_deallocate(__new_start, __len);
 1282              		.loc 8 491 66
 1283 0203 488B45A8 		movq	-88(%rbp), %rax
 1284 0207 4889C7   		movq	%rax, %rdi
 1285 020a E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv@PLT
 1285      00
 1286 020f 4889C2   		movq	%rax, %rdx
 491:/usr/include/c++/11/bits/vector.tcc **** 	  _M_deallocate(__new_start, __len);
 1287              		.loc 8 491 19
 1288 0212 488B4DB8 		movq	-72(%rbp), %rcx
 1289 0216 488B45E0 		movq	-32(%rbp), %rax
 1290 021a 4889CE   		movq	%rcx, %rsi
 1291 021d 4889C7   		movq	%rax, %rdi
 1292 0220 E8000000 		call	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultES1_EvT_S3_RSaIT0_E@PLT
 1292      00
 1293              	.L58:
 492:/usr/include/c++/11/bits/vector.tcc **** 	  __throw_exception_again;
 1294              		.loc 8 492 17
 1295 0225 488B45A8 		movq	-88(%rbp), %rax
 1296 0229 488B55C0 		movq	-64(%rbp), %rdx
 1297 022d 488B4DE0 		movq	-32(%rbp), %rcx
 1298 0231 4889CE   		movq	%rcx, %rsi
 1299 0234 4889C7   		movq	%rax, %rdi
 1300 0237 E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE13_M_deallocateEPS1_m@PLT
 1300      00
 493:/usr/include/c++/11/bits/vector.tcc **** 	}
 1301              		.loc 8 493 4
 1302 023c E8000000 		call	__cxa_rethrow@PLT
 1302      00
 1303              	.LEHE25:
 1304              	.L62:
 1305 0241 F30F1EFA 		endbr64
 485:/usr/include/c++/11/bits/vector.tcc **** 	{
 1306              		.loc 8 485 7
 1307 0245 4889C3   		movq	%rax, %rbx
 1308 0248 E8000000 		call	__cxa_end_catch@PLT
 1308      00
 1309 024d 4889D8   		movq	%rbx, %rax
 1310 0250 4889C7   		movq	%rax, %rdi
 1311              	.LEHB26:
 1312 0253 E8000000 		call	_Unwind_Resume@PLT
 1312      00
 1313              	.LEHE26:
 1314              	.L63:
 1315              		.loc 8 505 5
 1316 0258 E8000000 		call	__stack_chk_fail@PLT
 1316      00
 1317              	.L60:
 1318 025d 488B5DF8 		movq	-8(%rbp), %rbx
 1319 0261 C9       		leave
 1320              		.cfi_def_cfa 7, 8
 1321 0262 C3       		ret
 1322              		.cfi_endproc
 1323              	.LFE973:
 1324              		.section	.gcc_except_table
 1325 0061 000000   		.align 4
 1326              	.LLSDA973:
 1327 0064 FF       		.byte	0xff
 1328 0065 9B       		.byte	0x9b
 1329 0066 25       		.uleb128 .LLSDATT973-.LLSDATTD973
 1330              	.LLSDATTD973:
 1331 0067 01       		.byte	0x1
 1332 0068 1A       		.uleb128 .LLSDACSE973-.LLSDACSB973
 1333              	.LLSDACSB973:
 1334 0069 3B       		.uleb128 .LEHB22-.LFB973
 1335 006a 5A       		.uleb128 .LEHE22-.LEHB22
 1336 006b 00       		.uleb128 0
 1337 006c 00       		.uleb128 0
 1338 006d C201     		.uleb128 .LEHB23-.LFB973
 1339 006f 78       		.uleb128 .LEHE23-.LEHB23
 1340 0070 CD03     		.uleb128 .L61-.LFB973
 1341 0072 01       		.uleb128 0x1
 1342 0073 DB02     		.uleb128 .LEHB24-.LFB973
 1343 0075 28       		.uleb128 .LEHE24-.LEHB24
 1344 0076 00       		.uleb128 0
 1345 0077 00       		.uleb128 0
 1346 0078 FC03     		.uleb128 .LEHB25-.LFB973
 1347 007a 45       		.uleb128 .LEHE25-.LEHB25
 1348 007b C104     		.uleb128 .L62-.LFB973
 1349 007d 00       		.uleb128 0
 1350 007e D304     		.uleb128 .LEHB26-.LFB973
 1351 0080 05       		.uleb128 .LEHE26-.LEHB26
 1352 0081 00       		.uleb128 0
 1353 0082 00       		.uleb128 0
 1354              	.LLSDACSE973:
 1355 0083 01       		.byte	0x1
 1356 0084 00       		.byte	0
 1357 0085 000000   		.align 4
 1358 0088 00000000 		.long	0
 1359              	
 1360              	.LLSDATT973:
 1361              		.section	.text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE17_M_realloc_insertEN9__gnu_cxx
 1363              		.section	.text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE3endEv,"axG",@progbits,_ZNSt6ve
 1364              		.align 2
 1365              		.weak	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE3endEv
 1367              	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE3endEv:
 1368              	.LFB974:
 829:/usr/include/c++/11/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 1369              		.loc 5 829 7
 1370              		.cfi_startproc
 1371 0000 F30F1EFA 		endbr64
 1372 0004 55       		pushq	%rbp
 1373              		.cfi_def_cfa_offset 16
 1374              		.cfi_offset 6, -16
 1375 0005 4889E5   		movq	%rsp, %rbp
 1376              		.cfi_def_cfa_register 6
 1377 0008 4883EC20 		subq	$32, %rsp
 1378 000c 48897DE8 		movq	%rdi, -24(%rbp)
 829:/usr/include/c++/11/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 1379              		.loc 5 829 7
 1380 0010 64488B04 		movq	%fs:40, %rax
 1380      25280000 
 1380      00
 1381 0019 488945F8 		movq	%rax, -8(%rbp)
 1382 001d 31C0     		xorl	%eax, %eax
 830:/usr/include/c++/11/bits/stl_vector.h **** 
 1383              		.loc 5 830 39
 1384 001f 488B45E8 		movq	-24(%rbp), %rax
 1385 0023 488D5008 		leaq	8(%rax), %rdx
 830:/usr/include/c++/11/bits/stl_vector.h **** 
 1386              		.loc 5 830 16
 1387 0027 488D45F0 		leaq	-16(%rbp), %rax
 1388 002b 4889D6   		movq	%rdx, %rsi
 1389 002e 4889C7   		movq	%rax, %rdi
 1390 0031 E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC1ERKS
 1390      00
 830:/usr/include/c++/11/bits/stl_vector.h **** 
 1391              		.loc 5 830 48
 1392 0036 488B45F0 		movq	-16(%rbp), %rax
 830:/usr/include/c++/11/bits/stl_vector.h **** 
 1393              		.loc 5 830 51
 1394 003a 488B55F8 		movq	-8(%rbp), %rdx
 1395 003e 64482B14 		subq	%fs:40, %rdx
 1395      25280000 
 1395      00
 1396 0047 7405     		je	.L66
 1397 0049 E8000000 		call	__stack_chk_fail@PLT
 1397      00
 1398              	.L66:
 1399 004e C9       		leave
 1400              		.cfi_def_cfa 7, 8
 1401 004f C3       		ret
 1402              		.cfi_endproc
 1403              	.LFE974:
 1405              		.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS
 1406              		.align 2
 1407              		.weak	_ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEmiEl
 1409              	_ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEmiEl:
 1410              	.LFB975:
 1411              		.file 9 "/usr/include/c++/11/bits/stl_iterator.h"
   1:/usr/include/c++/11/bits/stl_iterator.h **** // Iterators -*- C++ -*-
   2:/usr/include/c++/11/bits/stl_iterator.h **** 
   3:/usr/include/c++/11/bits/stl_iterator.h **** // Copyright (C) 2001-2021 Free Software Foundation, Inc.
   4:/usr/include/c++/11/bits/stl_iterator.h **** //
   5:/usr/include/c++/11/bits/stl_iterator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/11/bits/stl_iterator.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/11/bits/stl_iterator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/11/bits/stl_iterator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/11/bits/stl_iterator.h **** // any later version.
  10:/usr/include/c++/11/bits/stl_iterator.h **** 
  11:/usr/include/c++/11/bits/stl_iterator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/11/bits/stl_iterator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/11/bits/stl_iterator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/11/bits/stl_iterator.h **** // GNU General Public License for more details.
  15:/usr/include/c++/11/bits/stl_iterator.h **** 
  16:/usr/include/c++/11/bits/stl_iterator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/11/bits/stl_iterator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/11/bits/stl_iterator.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/11/bits/stl_iterator.h **** 
  20:/usr/include/c++/11/bits/stl_iterator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/11/bits/stl_iterator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/11/bits/stl_iterator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/11/bits/stl_iterator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/11/bits/stl_iterator.h **** 
  25:/usr/include/c++/11/bits/stl_iterator.h **** /*
  26:/usr/include/c++/11/bits/stl_iterator.h ****  *
  27:/usr/include/c++/11/bits/stl_iterator.h ****  * Copyright (c) 1994
  28:/usr/include/c++/11/bits/stl_iterator.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/11/bits/stl_iterator.h ****  *
  30:/usr/include/c++/11/bits/stl_iterator.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/11/bits/stl_iterator.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/11/bits/stl_iterator.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/11/bits/stl_iterator.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/11/bits/stl_iterator.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/11/bits/stl_iterator.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/11/bits/stl_iterator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/11/bits/stl_iterator.h ****  *
  38:/usr/include/c++/11/bits/stl_iterator.h ****  *
  39:/usr/include/c++/11/bits/stl_iterator.h ****  * Copyright (c) 1996-1998
  40:/usr/include/c++/11/bits/stl_iterator.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/11/bits/stl_iterator.h ****  *
  42:/usr/include/c++/11/bits/stl_iterator.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/11/bits/stl_iterator.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/11/bits/stl_iterator.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/11/bits/stl_iterator.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/11/bits/stl_iterator.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/11/bits/stl_iterator.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/11/bits/stl_iterator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/11/bits/stl_iterator.h ****  */
  50:/usr/include/c++/11/bits/stl_iterator.h **** 
  51:/usr/include/c++/11/bits/stl_iterator.h **** /** @file bits/stl_iterator.h
  52:/usr/include/c++/11/bits/stl_iterator.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/11/bits/stl_iterator.h ****  *  Do not attempt to use it directly. @headername{iterator}
  54:/usr/include/c++/11/bits/stl_iterator.h ****  *
  55:/usr/include/c++/11/bits/stl_iterator.h ****  *  This file implements reverse_iterator, back_insert_iterator,
  56:/usr/include/c++/11/bits/stl_iterator.h ****  *  front_insert_iterator, insert_iterator, __normal_iterator, and their
  57:/usr/include/c++/11/bits/stl_iterator.h ****  *  supporting functions and overloaded operators.
  58:/usr/include/c++/11/bits/stl_iterator.h ****  */
  59:/usr/include/c++/11/bits/stl_iterator.h **** 
  60:/usr/include/c++/11/bits/stl_iterator.h **** #ifndef _STL_ITERATOR_H
  61:/usr/include/c++/11/bits/stl_iterator.h **** #define _STL_ITERATOR_H 1
  62:/usr/include/c++/11/bits/stl_iterator.h **** 
  63:/usr/include/c++/11/bits/stl_iterator.h **** #include <bits/cpp_type_traits.h>
  64:/usr/include/c++/11/bits/stl_iterator.h **** #include <bits/stl_iterator_base_types.h>
  65:/usr/include/c++/11/bits/stl_iterator.h **** #include <ext/type_traits.h>
  66:/usr/include/c++/11/bits/stl_iterator.h **** #include <bits/move.h>
  67:/usr/include/c++/11/bits/stl_iterator.h **** #include <bits/ptr_traits.h>
  68:/usr/include/c++/11/bits/stl_iterator.h **** 
  69:/usr/include/c++/11/bits/stl_iterator.h **** #if __cplusplus >= 201103L
  70:/usr/include/c++/11/bits/stl_iterator.h **** # include <type_traits>
  71:/usr/include/c++/11/bits/stl_iterator.h **** #endif
  72:/usr/include/c++/11/bits/stl_iterator.h **** 
  73:/usr/include/c++/11/bits/stl_iterator.h **** #if __cplusplus > 201703L
  74:/usr/include/c++/11/bits/stl_iterator.h **** # define __cpp_lib_array_constexpr 201811L
  75:/usr/include/c++/11/bits/stl_iterator.h **** # define __cpp_lib_constexpr_iterator 201811L
  76:/usr/include/c++/11/bits/stl_iterator.h **** #elif __cplusplus == 201703L
  77:/usr/include/c++/11/bits/stl_iterator.h **** # define __cpp_lib_array_constexpr 201803L
  78:/usr/include/c++/11/bits/stl_iterator.h **** #endif
  79:/usr/include/c++/11/bits/stl_iterator.h **** 
  80:/usr/include/c++/11/bits/stl_iterator.h **** #if __cplusplus > 201703L
  81:/usr/include/c++/11/bits/stl_iterator.h **** # include <compare>
  82:/usr/include/c++/11/bits/stl_iterator.h **** # include <new>
  83:/usr/include/c++/11/bits/stl_iterator.h **** # include <bits/exception_defines.h>
  84:/usr/include/c++/11/bits/stl_iterator.h **** # include <bits/iterator_concepts.h>
  85:/usr/include/c++/11/bits/stl_iterator.h **** #endif
  86:/usr/include/c++/11/bits/stl_iterator.h **** 
  87:/usr/include/c++/11/bits/stl_iterator.h **** namespace std _GLIBCXX_VISIBILITY(default)
  88:/usr/include/c++/11/bits/stl_iterator.h **** {
  89:/usr/include/c++/11/bits/stl_iterator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  90:/usr/include/c++/11/bits/stl_iterator.h **** 
  91:/usr/include/c++/11/bits/stl_iterator.h ****   /**
  92:/usr/include/c++/11/bits/stl_iterator.h ****    * @addtogroup iterators
  93:/usr/include/c++/11/bits/stl_iterator.h ****    * @{
  94:/usr/include/c++/11/bits/stl_iterator.h ****    */
  95:/usr/include/c++/11/bits/stl_iterator.h **** 
  96:/usr/include/c++/11/bits/stl_iterator.h **** #if __cpp_lib_concepts
  97:/usr/include/c++/11/bits/stl_iterator.h ****   namespace __detail
  98:/usr/include/c++/11/bits/stl_iterator.h ****   {
  99:/usr/include/c++/11/bits/stl_iterator.h ****     // Weaken iterator_category _Cat to _Limit if it is derived from that,
 100:/usr/include/c++/11/bits/stl_iterator.h ****     // otherwise use _Otherwise.
 101:/usr/include/c++/11/bits/stl_iterator.h ****     template<typename _Cat, typename _Limit, typename _Otherwise = _Cat>
 102:/usr/include/c++/11/bits/stl_iterator.h ****       using __clamp_iter_cat
 103:/usr/include/c++/11/bits/stl_iterator.h **** 	= conditional_t<derived_from<_Cat, _Limit>, _Limit, _Otherwise>;
 104:/usr/include/c++/11/bits/stl_iterator.h ****   }
 105:/usr/include/c++/11/bits/stl_iterator.h **** #endif
 106:/usr/include/c++/11/bits/stl_iterator.h **** 
 107:/usr/include/c++/11/bits/stl_iterator.h ****   // 24.4.1 Reverse iterators
 108:/usr/include/c++/11/bits/stl_iterator.h ****   /**
 109:/usr/include/c++/11/bits/stl_iterator.h ****    *  Bidirectional and random access iterators have corresponding reverse
 110:/usr/include/c++/11/bits/stl_iterator.h ****    *  %iterator adaptors that iterate through the data structure in the
 111:/usr/include/c++/11/bits/stl_iterator.h ****    *  opposite direction.  They have the same signatures as the corresponding
 112:/usr/include/c++/11/bits/stl_iterator.h ****    *  iterators.  The fundamental relation between a reverse %iterator and its
 113:/usr/include/c++/11/bits/stl_iterator.h ****    *  corresponding %iterator @c i is established by the identity:
 114:/usr/include/c++/11/bits/stl_iterator.h ****    *  @code
 115:/usr/include/c++/11/bits/stl_iterator.h ****    *      &*(reverse_iterator(i)) == &*(i - 1)
 116:/usr/include/c++/11/bits/stl_iterator.h ****    *  @endcode
 117:/usr/include/c++/11/bits/stl_iterator.h ****    *
 118:/usr/include/c++/11/bits/stl_iterator.h ****    *  <em>This mapping is dictated by the fact that while there is always a
 119:/usr/include/c++/11/bits/stl_iterator.h ****    *  pointer past the end of an array, there might not be a valid pointer
 120:/usr/include/c++/11/bits/stl_iterator.h ****    *  before the beginning of an array.</em> [24.4.1]/1,2
 121:/usr/include/c++/11/bits/stl_iterator.h ****    *
 122:/usr/include/c++/11/bits/stl_iterator.h ****    *  Reverse iterators can be tricky and surprising at first.  Their
 123:/usr/include/c++/11/bits/stl_iterator.h ****    *  semantics make sense, however, and the trickiness is a side effect of
 124:/usr/include/c++/11/bits/stl_iterator.h ****    *  the requirement that the iterators must be safe.
 125:/usr/include/c++/11/bits/stl_iterator.h ****   */
 126:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _Iterator>
 127:/usr/include/c++/11/bits/stl_iterator.h ****     class reverse_iterator
 128:/usr/include/c++/11/bits/stl_iterator.h ****     : public iterator<typename iterator_traits<_Iterator>::iterator_category,
 129:/usr/include/c++/11/bits/stl_iterator.h **** 		      typename iterator_traits<_Iterator>::value_type,
 130:/usr/include/c++/11/bits/stl_iterator.h **** 		      typename iterator_traits<_Iterator>::difference_type,
 131:/usr/include/c++/11/bits/stl_iterator.h **** 		      typename iterator_traits<_Iterator>::pointer,
 132:/usr/include/c++/11/bits/stl_iterator.h ****                       typename iterator_traits<_Iterator>::reference>
 133:/usr/include/c++/11/bits/stl_iterator.h ****     {
 134:/usr/include/c++/11/bits/stl_iterator.h ****       template<typename _Iter>
 135:/usr/include/c++/11/bits/stl_iterator.h **** 	friend class reverse_iterator;
 136:/usr/include/c++/11/bits/stl_iterator.h **** 
 137:/usr/include/c++/11/bits/stl_iterator.h **** #if __cpp_lib_concepts
 138:/usr/include/c++/11/bits/stl_iterator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 139:/usr/include/c++/11/bits/stl_iterator.h ****       // 3435. three_way_comparable_with<reverse_iterator<int*>, [...]>
 140:/usr/include/c++/11/bits/stl_iterator.h ****       template<typename _Iter>
 141:/usr/include/c++/11/bits/stl_iterator.h **** 	static constexpr bool __convertible = !is_same_v<_Iter, _Iterator>
 142:/usr/include/c++/11/bits/stl_iterator.h **** 	    && convertible_to<const _Iter&, _Iterator>;
 143:/usr/include/c++/11/bits/stl_iterator.h **** #endif
 144:/usr/include/c++/11/bits/stl_iterator.h **** 
 145:/usr/include/c++/11/bits/stl_iterator.h ****     protected:
 146:/usr/include/c++/11/bits/stl_iterator.h ****       _Iterator current;
 147:/usr/include/c++/11/bits/stl_iterator.h **** 
 148:/usr/include/c++/11/bits/stl_iterator.h ****       typedef iterator_traits<_Iterator>		__traits_type;
 149:/usr/include/c++/11/bits/stl_iterator.h **** 
 150:/usr/include/c++/11/bits/stl_iterator.h ****     public:
 151:/usr/include/c++/11/bits/stl_iterator.h ****       typedef _Iterator					iterator_type;
 152:/usr/include/c++/11/bits/stl_iterator.h ****       typedef typename __traits_type::pointer		pointer;
 153:/usr/include/c++/11/bits/stl_iterator.h **** #if ! __cpp_lib_concepts
 154:/usr/include/c++/11/bits/stl_iterator.h ****       typedef typename __traits_type::difference_type	difference_type;
 155:/usr/include/c++/11/bits/stl_iterator.h ****       typedef typename __traits_type::reference		reference;
 156:/usr/include/c++/11/bits/stl_iterator.h **** #else
 157:/usr/include/c++/11/bits/stl_iterator.h ****       using iterator_concept
 158:/usr/include/c++/11/bits/stl_iterator.h **** 	= conditional_t<random_access_iterator<_Iterator>,
 159:/usr/include/c++/11/bits/stl_iterator.h **** 			random_access_iterator_tag,
 160:/usr/include/c++/11/bits/stl_iterator.h **** 			bidirectional_iterator_tag>;
 161:/usr/include/c++/11/bits/stl_iterator.h ****       using iterator_category
 162:/usr/include/c++/11/bits/stl_iterator.h **** 	= __detail::__clamp_iter_cat<typename __traits_type::iterator_category,
 163:/usr/include/c++/11/bits/stl_iterator.h **** 				     random_access_iterator_tag>;
 164:/usr/include/c++/11/bits/stl_iterator.h ****       using value_type = iter_value_t<_Iterator>;
 165:/usr/include/c++/11/bits/stl_iterator.h ****       using difference_type = iter_difference_t<_Iterator>;
 166:/usr/include/c++/11/bits/stl_iterator.h ****       using reference = iter_reference_t<_Iterator>;
 167:/usr/include/c++/11/bits/stl_iterator.h **** #endif
 168:/usr/include/c++/11/bits/stl_iterator.h **** 
 169:/usr/include/c++/11/bits/stl_iterator.h ****       /**
 170:/usr/include/c++/11/bits/stl_iterator.h ****        *  The default constructor value-initializes member @p current.
 171:/usr/include/c++/11/bits/stl_iterator.h ****        *  If it is a pointer, that means it is zero-initialized.
 172:/usr/include/c++/11/bits/stl_iterator.h ****       */
 173:/usr/include/c++/11/bits/stl_iterator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 174:/usr/include/c++/11/bits/stl_iterator.h ****       // 235 No specification of default ctor for reverse_iterator
 175:/usr/include/c++/11/bits/stl_iterator.h ****       // 1012. reverse_iterator default ctor should value initialize
 176:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR
 177:/usr/include/c++/11/bits/stl_iterator.h ****       reverse_iterator() : current() { }
 178:/usr/include/c++/11/bits/stl_iterator.h **** 
 179:/usr/include/c++/11/bits/stl_iterator.h ****       /**
 180:/usr/include/c++/11/bits/stl_iterator.h ****        *  This %iterator will move in the opposite direction that @p x does.
 181:/usr/include/c++/11/bits/stl_iterator.h ****       */
 182:/usr/include/c++/11/bits/stl_iterator.h ****       explicit _GLIBCXX17_CONSTEXPR
 183:/usr/include/c++/11/bits/stl_iterator.h ****       reverse_iterator(iterator_type __x) : current(__x) { }
 184:/usr/include/c++/11/bits/stl_iterator.h **** 
 185:/usr/include/c++/11/bits/stl_iterator.h ****       /**
 186:/usr/include/c++/11/bits/stl_iterator.h ****        *  The copy constructor is normal.
 187:/usr/include/c++/11/bits/stl_iterator.h ****       */
 188:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR
 189:/usr/include/c++/11/bits/stl_iterator.h ****       reverse_iterator(const reverse_iterator& __x)
 190:/usr/include/c++/11/bits/stl_iterator.h ****       : current(__x.current) { }
 191:/usr/include/c++/11/bits/stl_iterator.h **** 
 192:/usr/include/c++/11/bits/stl_iterator.h **** #if __cplusplus >= 201103L
 193:/usr/include/c++/11/bits/stl_iterator.h ****       reverse_iterator& operator=(const reverse_iterator&) = default;
 194:/usr/include/c++/11/bits/stl_iterator.h **** #endif
 195:/usr/include/c++/11/bits/stl_iterator.h **** 
 196:/usr/include/c++/11/bits/stl_iterator.h ****       /**
 197:/usr/include/c++/11/bits/stl_iterator.h ****        *  A %reverse_iterator across other types can be copied if the
 198:/usr/include/c++/11/bits/stl_iterator.h ****        *  underlying %iterator can be converted to the type of @c current.
 199:/usr/include/c++/11/bits/stl_iterator.h ****       */
 200:/usr/include/c++/11/bits/stl_iterator.h ****       template<typename _Iter>
 201:/usr/include/c++/11/bits/stl_iterator.h **** #if __cpp_lib_concepts
 202:/usr/include/c++/11/bits/stl_iterator.h **** 	requires __convertible<_Iter>
 203:/usr/include/c++/11/bits/stl_iterator.h **** #endif
 204:/usr/include/c++/11/bits/stl_iterator.h **** 	_GLIBCXX17_CONSTEXPR
 205:/usr/include/c++/11/bits/stl_iterator.h ****         reverse_iterator(const reverse_iterator<_Iter>& __x)
 206:/usr/include/c++/11/bits/stl_iterator.h **** 	: current(__x.current) { }
 207:/usr/include/c++/11/bits/stl_iterator.h **** 
 208:/usr/include/c++/11/bits/stl_iterator.h **** #if __cplusplus >= 201103L
 209:/usr/include/c++/11/bits/stl_iterator.h ****       template<typename _Iter>
 210:/usr/include/c++/11/bits/stl_iterator.h **** #if __cpp_lib_concepts
 211:/usr/include/c++/11/bits/stl_iterator.h **** 	requires __convertible<_Iter>
 212:/usr/include/c++/11/bits/stl_iterator.h **** 	  && assignable_from<_Iterator&, const _Iter&>
 213:/usr/include/c++/11/bits/stl_iterator.h **** #endif
 214:/usr/include/c++/11/bits/stl_iterator.h **** 	_GLIBCXX17_CONSTEXPR
 215:/usr/include/c++/11/bits/stl_iterator.h **** 	reverse_iterator&
 216:/usr/include/c++/11/bits/stl_iterator.h **** 	operator=(const reverse_iterator<_Iter>& __x)
 217:/usr/include/c++/11/bits/stl_iterator.h **** 	{
 218:/usr/include/c++/11/bits/stl_iterator.h **** 	  current = __x.current;
 219:/usr/include/c++/11/bits/stl_iterator.h **** 	  return *this;
 220:/usr/include/c++/11/bits/stl_iterator.h **** 	}
 221:/usr/include/c++/11/bits/stl_iterator.h **** #endif
 222:/usr/include/c++/11/bits/stl_iterator.h **** 
 223:/usr/include/c++/11/bits/stl_iterator.h ****       /**
 224:/usr/include/c++/11/bits/stl_iterator.h ****        *  @return  @c current, the %iterator used for underlying work.
 225:/usr/include/c++/11/bits/stl_iterator.h ****       */
 226:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR iterator_type
 227:/usr/include/c++/11/bits/stl_iterator.h ****       base() const
 228:/usr/include/c++/11/bits/stl_iterator.h ****       { return current; }
 229:/usr/include/c++/11/bits/stl_iterator.h **** 
 230:/usr/include/c++/11/bits/stl_iterator.h ****       /**
 231:/usr/include/c++/11/bits/stl_iterator.h ****        *  @return  A reference to the value at @c --current
 232:/usr/include/c++/11/bits/stl_iterator.h ****        *
 233:/usr/include/c++/11/bits/stl_iterator.h ****        *  This requires that @c --current is dereferenceable.
 234:/usr/include/c++/11/bits/stl_iterator.h ****        *
 235:/usr/include/c++/11/bits/stl_iterator.h ****        *  @warning This implementation requires that for an iterator of the
 236:/usr/include/c++/11/bits/stl_iterator.h ****        *           underlying iterator type, @c x, a reference obtained by
 237:/usr/include/c++/11/bits/stl_iterator.h ****        *           @c *x remains valid after @c x has been modified or
 238:/usr/include/c++/11/bits/stl_iterator.h ****        *           destroyed. This is a bug: http://gcc.gnu.org/PR51823
 239:/usr/include/c++/11/bits/stl_iterator.h ****       */
 240:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reference
 241:/usr/include/c++/11/bits/stl_iterator.h ****       operator*() const
 242:/usr/include/c++/11/bits/stl_iterator.h ****       {
 243:/usr/include/c++/11/bits/stl_iterator.h **** 	_Iterator __tmp = current;
 244:/usr/include/c++/11/bits/stl_iterator.h **** 	return *--__tmp;
 245:/usr/include/c++/11/bits/stl_iterator.h ****       }
 246:/usr/include/c++/11/bits/stl_iterator.h **** 
 247:/usr/include/c++/11/bits/stl_iterator.h ****       /**
 248:/usr/include/c++/11/bits/stl_iterator.h ****        *  @return  A pointer to the value at @c --current
 249:/usr/include/c++/11/bits/stl_iterator.h ****        *
 250:/usr/include/c++/11/bits/stl_iterator.h ****        *  This requires that @c --current is dereferenceable.
 251:/usr/include/c++/11/bits/stl_iterator.h ****       */
 252:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR pointer
 253:/usr/include/c++/11/bits/stl_iterator.h ****       operator->() const
 254:/usr/include/c++/11/bits/stl_iterator.h **** #if __cplusplus > 201703L && __cpp_concepts >= 201907L
 255:/usr/include/c++/11/bits/stl_iterator.h ****       requires is_pointer_v<_Iterator>
 256:/usr/include/c++/11/bits/stl_iterator.h **** 	|| requires(const _Iterator __i) { __i.operator->(); }
 257:/usr/include/c++/11/bits/stl_iterator.h **** #endif
 258:/usr/include/c++/11/bits/stl_iterator.h ****       {
 259:/usr/include/c++/11/bits/stl_iterator.h **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
 260:/usr/include/c++/11/bits/stl_iterator.h **** 	// 1052. operator-> should also support smart pointers
 261:/usr/include/c++/11/bits/stl_iterator.h **** 	_Iterator __tmp = current;
 262:/usr/include/c++/11/bits/stl_iterator.h **** 	--__tmp;
 263:/usr/include/c++/11/bits/stl_iterator.h **** 	return _S_to_pointer(__tmp);
 264:/usr/include/c++/11/bits/stl_iterator.h ****       }
 265:/usr/include/c++/11/bits/stl_iterator.h **** 
 266:/usr/include/c++/11/bits/stl_iterator.h ****       /**
 267:/usr/include/c++/11/bits/stl_iterator.h ****        *  @return  @c *this
 268:/usr/include/c++/11/bits/stl_iterator.h ****        *
 269:/usr/include/c++/11/bits/stl_iterator.h ****        *  Decrements the underlying iterator.
 270:/usr/include/c++/11/bits/stl_iterator.h ****       */
 271:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator&
 272:/usr/include/c++/11/bits/stl_iterator.h ****       operator++()
 273:/usr/include/c++/11/bits/stl_iterator.h ****       {
 274:/usr/include/c++/11/bits/stl_iterator.h **** 	--current;
 275:/usr/include/c++/11/bits/stl_iterator.h **** 	return *this;
 276:/usr/include/c++/11/bits/stl_iterator.h ****       }
 277:/usr/include/c++/11/bits/stl_iterator.h **** 
 278:/usr/include/c++/11/bits/stl_iterator.h ****       /**
 279:/usr/include/c++/11/bits/stl_iterator.h ****        *  @return  The original value of @c *this
 280:/usr/include/c++/11/bits/stl_iterator.h ****        *
 281:/usr/include/c++/11/bits/stl_iterator.h ****        *  Decrements the underlying iterator.
 282:/usr/include/c++/11/bits/stl_iterator.h ****       */
 283:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 284:/usr/include/c++/11/bits/stl_iterator.h ****       operator++(int)
 285:/usr/include/c++/11/bits/stl_iterator.h ****       {
 286:/usr/include/c++/11/bits/stl_iterator.h **** 	reverse_iterator __tmp = *this;
 287:/usr/include/c++/11/bits/stl_iterator.h **** 	--current;
 288:/usr/include/c++/11/bits/stl_iterator.h **** 	return __tmp;
 289:/usr/include/c++/11/bits/stl_iterator.h ****       }
 290:/usr/include/c++/11/bits/stl_iterator.h **** 
 291:/usr/include/c++/11/bits/stl_iterator.h ****       /**
 292:/usr/include/c++/11/bits/stl_iterator.h ****        *  @return  @c *this
 293:/usr/include/c++/11/bits/stl_iterator.h ****        *
 294:/usr/include/c++/11/bits/stl_iterator.h ****        *  Increments the underlying iterator.
 295:/usr/include/c++/11/bits/stl_iterator.h ****       */
 296:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator&
 297:/usr/include/c++/11/bits/stl_iterator.h ****       operator--()
 298:/usr/include/c++/11/bits/stl_iterator.h ****       {
 299:/usr/include/c++/11/bits/stl_iterator.h **** 	++current;
 300:/usr/include/c++/11/bits/stl_iterator.h **** 	return *this;
 301:/usr/include/c++/11/bits/stl_iterator.h ****       }
 302:/usr/include/c++/11/bits/stl_iterator.h **** 
 303:/usr/include/c++/11/bits/stl_iterator.h ****       /**
 304:/usr/include/c++/11/bits/stl_iterator.h ****        *  @return  A reverse_iterator with the previous value of @c *this
 305:/usr/include/c++/11/bits/stl_iterator.h ****        *
 306:/usr/include/c++/11/bits/stl_iterator.h ****        *  Increments the underlying iterator.
 307:/usr/include/c++/11/bits/stl_iterator.h ****       */
 308:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 309:/usr/include/c++/11/bits/stl_iterator.h ****       operator--(int)
 310:/usr/include/c++/11/bits/stl_iterator.h ****       {
 311:/usr/include/c++/11/bits/stl_iterator.h **** 	reverse_iterator __tmp = *this;
 312:/usr/include/c++/11/bits/stl_iterator.h **** 	++current;
 313:/usr/include/c++/11/bits/stl_iterator.h **** 	return __tmp;
 314:/usr/include/c++/11/bits/stl_iterator.h ****       }
 315:/usr/include/c++/11/bits/stl_iterator.h **** 
 316:/usr/include/c++/11/bits/stl_iterator.h ****       /**
 317:/usr/include/c++/11/bits/stl_iterator.h ****        *  @return  A reverse_iterator that refers to @c current - @a __n
 318:/usr/include/c++/11/bits/stl_iterator.h ****        *
 319:/usr/include/c++/11/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 320:/usr/include/c++/11/bits/stl_iterator.h ****       */
 321:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 322:/usr/include/c++/11/bits/stl_iterator.h ****       operator+(difference_type __n) const
 323:/usr/include/c++/11/bits/stl_iterator.h ****       { return reverse_iterator(current - __n); }
 324:/usr/include/c++/11/bits/stl_iterator.h **** 
 325:/usr/include/c++/11/bits/stl_iterator.h ****       /**
 326:/usr/include/c++/11/bits/stl_iterator.h ****        *  @return  *this
 327:/usr/include/c++/11/bits/stl_iterator.h ****        *
 328:/usr/include/c++/11/bits/stl_iterator.h ****        *  Moves the underlying iterator backwards @a __n steps.
 329:/usr/include/c++/11/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 330:/usr/include/c++/11/bits/stl_iterator.h ****       */
 331:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator&
 332:/usr/include/c++/11/bits/stl_iterator.h ****       operator+=(difference_type __n)
 333:/usr/include/c++/11/bits/stl_iterator.h ****       {
 334:/usr/include/c++/11/bits/stl_iterator.h **** 	current -= __n;
 335:/usr/include/c++/11/bits/stl_iterator.h **** 	return *this;
 336:/usr/include/c++/11/bits/stl_iterator.h ****       }
 337:/usr/include/c++/11/bits/stl_iterator.h **** 
 338:/usr/include/c++/11/bits/stl_iterator.h ****       /**
 339:/usr/include/c++/11/bits/stl_iterator.h ****        *  @return  A reverse_iterator that refers to @c current - @a __n
 340:/usr/include/c++/11/bits/stl_iterator.h ****        *
 341:/usr/include/c++/11/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 342:/usr/include/c++/11/bits/stl_iterator.h ****       */
 343:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 344:/usr/include/c++/11/bits/stl_iterator.h ****       operator-(difference_type __n) const
 345:/usr/include/c++/11/bits/stl_iterator.h ****       { return reverse_iterator(current + __n); }
 346:/usr/include/c++/11/bits/stl_iterator.h **** 
 347:/usr/include/c++/11/bits/stl_iterator.h ****       /**
 348:/usr/include/c++/11/bits/stl_iterator.h ****        *  @return  *this
 349:/usr/include/c++/11/bits/stl_iterator.h ****        *
 350:/usr/include/c++/11/bits/stl_iterator.h ****        *  Moves the underlying iterator forwards @a __n steps.
 351:/usr/include/c++/11/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 352:/usr/include/c++/11/bits/stl_iterator.h ****       */
 353:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator&
 354:/usr/include/c++/11/bits/stl_iterator.h ****       operator-=(difference_type __n)
 355:/usr/include/c++/11/bits/stl_iterator.h ****       {
 356:/usr/include/c++/11/bits/stl_iterator.h **** 	current += __n;
 357:/usr/include/c++/11/bits/stl_iterator.h **** 	return *this;
 358:/usr/include/c++/11/bits/stl_iterator.h ****       }
 359:/usr/include/c++/11/bits/stl_iterator.h **** 
 360:/usr/include/c++/11/bits/stl_iterator.h ****       /**
 361:/usr/include/c++/11/bits/stl_iterator.h ****        *  @return  The value at @c current - @a __n - 1
 362:/usr/include/c++/11/bits/stl_iterator.h ****        *
 363:/usr/include/c++/11/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 364:/usr/include/c++/11/bits/stl_iterator.h ****       */
 365:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reference
 366:/usr/include/c++/11/bits/stl_iterator.h ****       operator[](difference_type __n) const
 367:/usr/include/c++/11/bits/stl_iterator.h ****       { return *(*this + __n); }
 368:/usr/include/c++/11/bits/stl_iterator.h **** 
 369:/usr/include/c++/11/bits/stl_iterator.h **** #if __cplusplus > 201703L && __cpp_lib_concepts
 370:/usr/include/c++/11/bits/stl_iterator.h ****       friend constexpr iter_rvalue_reference_t<_Iterator>
 371:/usr/include/c++/11/bits/stl_iterator.h ****       iter_move(const reverse_iterator& __i)
 372:/usr/include/c++/11/bits/stl_iterator.h ****       noexcept(is_nothrow_copy_constructible_v<_Iterator>
 373:/usr/include/c++/11/bits/stl_iterator.h **** 	       && noexcept(ranges::iter_move(--std::declval<_Iterator&>())))
 374:/usr/include/c++/11/bits/stl_iterator.h ****       {
 375:/usr/include/c++/11/bits/stl_iterator.h **** 	auto __tmp = __i.base();
 376:/usr/include/c++/11/bits/stl_iterator.h **** 	return ranges::iter_move(--__tmp);
 377:/usr/include/c++/11/bits/stl_iterator.h ****       }
 378:/usr/include/c++/11/bits/stl_iterator.h **** 
 379:/usr/include/c++/11/bits/stl_iterator.h ****       template<indirectly_swappable<_Iterator> _Iter2>
 380:/usr/include/c++/11/bits/stl_iterator.h **** 	friend constexpr void
 381:/usr/include/c++/11/bits/stl_iterator.h **** 	iter_swap(const reverse_iterator& __x,
 382:/usr/include/c++/11/bits/stl_iterator.h **** 		  const reverse_iterator<_Iter2>& __y)
 383:/usr/include/c++/11/bits/stl_iterator.h **** 	noexcept(is_nothrow_copy_constructible_v<_Iterator>
 384:/usr/include/c++/11/bits/stl_iterator.h **** 		 && is_nothrow_copy_constructible_v<_Iter2>
 385:/usr/include/c++/11/bits/stl_iterator.h **** 		 && noexcept(ranges::iter_swap(--std::declval<_Iterator&>(),
 386:/usr/include/c++/11/bits/stl_iterator.h **** 					       --std::declval<_Iter2&>())))
 387:/usr/include/c++/11/bits/stl_iterator.h **** 	{
 388:/usr/include/c++/11/bits/stl_iterator.h **** 	  auto __xtmp = __x.base();
 389:/usr/include/c++/11/bits/stl_iterator.h **** 	  auto __ytmp = __y.base();
 390:/usr/include/c++/11/bits/stl_iterator.h **** 	  ranges::iter_swap(--__xtmp, --__ytmp);
 391:/usr/include/c++/11/bits/stl_iterator.h **** 	}
 392:/usr/include/c++/11/bits/stl_iterator.h **** #endif
 393:/usr/include/c++/11/bits/stl_iterator.h **** 
 394:/usr/include/c++/11/bits/stl_iterator.h ****     private:
 395:/usr/include/c++/11/bits/stl_iterator.h ****       template<typename _Tp>
 396:/usr/include/c++/11/bits/stl_iterator.h **** 	static _GLIBCXX17_CONSTEXPR _Tp*
 397:/usr/include/c++/11/bits/stl_iterator.h **** 	_S_to_pointer(_Tp* __p)
 398:/usr/include/c++/11/bits/stl_iterator.h ****         { return __p; }
 399:/usr/include/c++/11/bits/stl_iterator.h **** 
 400:/usr/include/c++/11/bits/stl_iterator.h ****       template<typename _Tp>
 401:/usr/include/c++/11/bits/stl_iterator.h **** 	static _GLIBCXX17_CONSTEXPR pointer
 402:/usr/include/c++/11/bits/stl_iterator.h **** 	_S_to_pointer(_Tp __t)
 403:/usr/include/c++/11/bits/stl_iterator.h ****         { return __t.operator->(); }
 404:/usr/include/c++/11/bits/stl_iterator.h ****     };
 405:/usr/include/c++/11/bits/stl_iterator.h **** 
 406:/usr/include/c++/11/bits/stl_iterator.h ****   ///@{
 407:/usr/include/c++/11/bits/stl_iterator.h ****   /**
 408:/usr/include/c++/11/bits/stl_iterator.h ****    *  @param  __x  A %reverse_iterator.
 409:/usr/include/c++/11/bits/stl_iterator.h ****    *  @param  __y  A %reverse_iterator.
 410:/usr/include/c++/11/bits/stl_iterator.h ****    *  @return  A simple bool.
 411:/usr/include/c++/11/bits/stl_iterator.h ****    *
 412:/usr/include/c++/11/bits/stl_iterator.h ****    *  Reverse iterators forward comparisons to their underlying base()
 413:/usr/include/c++/11/bits/stl_iterator.h ****    *  iterators.
 414:/usr/include/c++/11/bits/stl_iterator.h ****    *
 415:/usr/include/c++/11/bits/stl_iterator.h ****   */
 416:/usr/include/c++/11/bits/stl_iterator.h **** #if __cplusplus <= 201703L || ! defined __cpp_lib_concepts
 417:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _Iterator>
 418:/usr/include/c++/11/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 419:/usr/include/c++/11/bits/stl_iterator.h ****     operator==(const reverse_iterator<_Iterator>& __x,
 420:/usr/include/c++/11/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 421:/usr/include/c++/11/bits/stl_iterator.h ****     { return __x.base() == __y.base(); }
 422:/usr/include/c++/11/bits/stl_iterator.h **** 
 423:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _Iterator>
 424:/usr/include/c++/11/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 425:/usr/include/c++/11/bits/stl_iterator.h ****     operator<(const reverse_iterator<_Iterator>& __x,
 426:/usr/include/c++/11/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 427:/usr/include/c++/11/bits/stl_iterator.h ****     { return __y.base() < __x.base(); }
 428:/usr/include/c++/11/bits/stl_iterator.h **** 
 429:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _Iterator>
 430:/usr/include/c++/11/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 431:/usr/include/c++/11/bits/stl_iterator.h ****     operator!=(const reverse_iterator<_Iterator>& __x,
 432:/usr/include/c++/11/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 433:/usr/include/c++/11/bits/stl_iterator.h ****     { return !(__x == __y); }
 434:/usr/include/c++/11/bits/stl_iterator.h **** 
 435:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _Iterator>
 436:/usr/include/c++/11/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 437:/usr/include/c++/11/bits/stl_iterator.h ****     operator>(const reverse_iterator<_Iterator>& __x,
 438:/usr/include/c++/11/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 439:/usr/include/c++/11/bits/stl_iterator.h ****     { return __y < __x; }
 440:/usr/include/c++/11/bits/stl_iterator.h **** 
 441:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _Iterator>
 442:/usr/include/c++/11/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 443:/usr/include/c++/11/bits/stl_iterator.h ****     operator<=(const reverse_iterator<_Iterator>& __x,
 444:/usr/include/c++/11/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 445:/usr/include/c++/11/bits/stl_iterator.h ****     { return !(__y < __x); }
 446:/usr/include/c++/11/bits/stl_iterator.h **** 
 447:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _Iterator>
 448:/usr/include/c++/11/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 449:/usr/include/c++/11/bits/stl_iterator.h ****     operator>=(const reverse_iterator<_Iterator>& __x,
 450:/usr/include/c++/11/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 451:/usr/include/c++/11/bits/stl_iterator.h ****     { return !(__x < __y); }
 452:/usr/include/c++/11/bits/stl_iterator.h **** 
 453:/usr/include/c++/11/bits/stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 454:/usr/include/c++/11/bits/stl_iterator.h ****   // DR 280. Comparison of reverse_iterator to const reverse_iterator.
 455:/usr/include/c++/11/bits/stl_iterator.h **** 
 456:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 457:/usr/include/c++/11/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 458:/usr/include/c++/11/bits/stl_iterator.h ****     operator==(const reverse_iterator<_IteratorL>& __x,
 459:/usr/include/c++/11/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 460:/usr/include/c++/11/bits/stl_iterator.h ****     { return __x.base() == __y.base(); }
 461:/usr/include/c++/11/bits/stl_iterator.h **** 
 462:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 463:/usr/include/c++/11/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 464:/usr/include/c++/11/bits/stl_iterator.h ****     operator<(const reverse_iterator<_IteratorL>& __x,
 465:/usr/include/c++/11/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 466:/usr/include/c++/11/bits/stl_iterator.h ****     { return __x.base() > __y.base(); }
 467:/usr/include/c++/11/bits/stl_iterator.h **** 
 468:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 469:/usr/include/c++/11/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 470:/usr/include/c++/11/bits/stl_iterator.h ****     operator!=(const reverse_iterator<_IteratorL>& __x,
 471:/usr/include/c++/11/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 472:/usr/include/c++/11/bits/stl_iterator.h ****     { return __x.base() != __y.base(); }
 473:/usr/include/c++/11/bits/stl_iterator.h **** 
 474:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 475:/usr/include/c++/11/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 476:/usr/include/c++/11/bits/stl_iterator.h ****     operator>(const reverse_iterator<_IteratorL>& __x,
 477:/usr/include/c++/11/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 478:/usr/include/c++/11/bits/stl_iterator.h ****     { return __x.base() < __y.base(); }
 479:/usr/include/c++/11/bits/stl_iterator.h **** 
 480:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 481:/usr/include/c++/11/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 482:/usr/include/c++/11/bits/stl_iterator.h ****     operator<=(const reverse_iterator<_IteratorL>& __x,
 483:/usr/include/c++/11/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 484:/usr/include/c++/11/bits/stl_iterator.h ****     { return __x.base() >= __y.base(); }
 485:/usr/include/c++/11/bits/stl_iterator.h **** 
 486:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 487:/usr/include/c++/11/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 488:/usr/include/c++/11/bits/stl_iterator.h ****     operator>=(const reverse_iterator<_IteratorL>& __x,
 489:/usr/include/c++/11/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 490:/usr/include/c++/11/bits/stl_iterator.h ****     { return __x.base() <= __y.base(); }
 491:/usr/include/c++/11/bits/stl_iterator.h **** #else // C++20
 492:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 493:/usr/include/c++/11/bits/stl_iterator.h ****     constexpr bool
 494:/usr/include/c++/11/bits/stl_iterator.h ****     operator==(const reverse_iterator<_IteratorL>& __x,
 495:/usr/include/c++/11/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 496:/usr/include/c++/11/bits/stl_iterator.h ****     requires requires { { __x.base() == __y.base() } -> convertible_to<bool>; }
 497:/usr/include/c++/11/bits/stl_iterator.h ****     { return __x.base() == __y.base(); }
 498:/usr/include/c++/11/bits/stl_iterator.h **** 
 499:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 500:/usr/include/c++/11/bits/stl_iterator.h ****     constexpr bool
 501:/usr/include/c++/11/bits/stl_iterator.h ****     operator!=(const reverse_iterator<_IteratorL>& __x,
 502:/usr/include/c++/11/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 503:/usr/include/c++/11/bits/stl_iterator.h ****     requires requires { { __x.base() != __y.base() } -> convertible_to<bool>; }
 504:/usr/include/c++/11/bits/stl_iterator.h ****     { return __x.base() != __y.base(); }
 505:/usr/include/c++/11/bits/stl_iterator.h **** 
 506:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 507:/usr/include/c++/11/bits/stl_iterator.h ****     constexpr bool
 508:/usr/include/c++/11/bits/stl_iterator.h ****     operator<(const reverse_iterator<_IteratorL>& __x,
 509:/usr/include/c++/11/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 510:/usr/include/c++/11/bits/stl_iterator.h ****     requires requires { { __x.base() > __y.base() } -> convertible_to<bool>; }
 511:/usr/include/c++/11/bits/stl_iterator.h ****     { return __x.base() > __y.base(); }
 512:/usr/include/c++/11/bits/stl_iterator.h **** 
 513:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 514:/usr/include/c++/11/bits/stl_iterator.h ****     constexpr bool
 515:/usr/include/c++/11/bits/stl_iterator.h ****     operator>(const reverse_iterator<_IteratorL>& __x,
 516:/usr/include/c++/11/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 517:/usr/include/c++/11/bits/stl_iterator.h ****     requires requires { { __x.base() < __y.base() } -> convertible_to<bool>; }
 518:/usr/include/c++/11/bits/stl_iterator.h ****     { return __x.base() < __y.base(); }
 519:/usr/include/c++/11/bits/stl_iterator.h **** 
 520:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 521:/usr/include/c++/11/bits/stl_iterator.h ****     constexpr bool
 522:/usr/include/c++/11/bits/stl_iterator.h ****     operator<=(const reverse_iterator<_IteratorL>& __x,
 523:/usr/include/c++/11/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 524:/usr/include/c++/11/bits/stl_iterator.h ****     requires requires { { __x.base() >= __y.base() } -> convertible_to<bool>; }
 525:/usr/include/c++/11/bits/stl_iterator.h ****     { return __x.base() >= __y.base(); }
 526:/usr/include/c++/11/bits/stl_iterator.h **** 
 527:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 528:/usr/include/c++/11/bits/stl_iterator.h ****     constexpr bool
 529:/usr/include/c++/11/bits/stl_iterator.h ****     operator>=(const reverse_iterator<_IteratorL>& __x,
 530:/usr/include/c++/11/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 531:/usr/include/c++/11/bits/stl_iterator.h ****     requires requires { { __x.base() <= __y.base() } -> convertible_to<bool>; }
 532:/usr/include/c++/11/bits/stl_iterator.h ****     { return __x.base() <= __y.base(); }
 533:/usr/include/c++/11/bits/stl_iterator.h **** 
 534:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _IteratorL,
 535:/usr/include/c++/11/bits/stl_iterator.h **** 	   three_way_comparable_with<_IteratorL> _IteratorR>
 536:/usr/include/c++/11/bits/stl_iterator.h ****     constexpr compare_three_way_result_t<_IteratorL, _IteratorR>
 537:/usr/include/c++/11/bits/stl_iterator.h ****     operator<=>(const reverse_iterator<_IteratorL>& __x,
 538:/usr/include/c++/11/bits/stl_iterator.h **** 		const reverse_iterator<_IteratorR>& __y)
 539:/usr/include/c++/11/bits/stl_iterator.h ****     { return __y.base() <=> __x.base(); }
 540:/usr/include/c++/11/bits/stl_iterator.h **** #endif // C++20
 541:/usr/include/c++/11/bits/stl_iterator.h ****   ///@}
 542:/usr/include/c++/11/bits/stl_iterator.h **** 
 543:/usr/include/c++/11/bits/stl_iterator.h **** #if __cplusplus < 201103L
 544:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _Iterator>
 545:/usr/include/c++/11/bits/stl_iterator.h ****     inline typename reverse_iterator<_Iterator>::difference_type
 546:/usr/include/c++/11/bits/stl_iterator.h ****     operator-(const reverse_iterator<_Iterator>& __x,
 547:/usr/include/c++/11/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 548:/usr/include/c++/11/bits/stl_iterator.h ****     { return __y.base() - __x.base(); }
 549:/usr/include/c++/11/bits/stl_iterator.h **** 
 550:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 551:/usr/include/c++/11/bits/stl_iterator.h ****     inline typename reverse_iterator<_IteratorL>::difference_type
 552:/usr/include/c++/11/bits/stl_iterator.h ****     operator-(const reverse_iterator<_IteratorL>& __x,
 553:/usr/include/c++/11/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 554:/usr/include/c++/11/bits/stl_iterator.h ****     { return __y.base() - __x.base(); }
 555:/usr/include/c++/11/bits/stl_iterator.h **** #else
 556:/usr/include/c++/11/bits/stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 557:/usr/include/c++/11/bits/stl_iterator.h ****   // DR 685. reverse_iterator/move_iterator difference has invalid signatures
 558:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 559:/usr/include/c++/11/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR auto
 560:/usr/include/c++/11/bits/stl_iterator.h ****     operator-(const reverse_iterator<_IteratorL>& __x,
 561:/usr/include/c++/11/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 562:/usr/include/c++/11/bits/stl_iterator.h ****     -> decltype(__y.base() - __x.base())
 563:/usr/include/c++/11/bits/stl_iterator.h ****     { return __y.base() - __x.base(); }
 564:/usr/include/c++/11/bits/stl_iterator.h **** #endif
 565:/usr/include/c++/11/bits/stl_iterator.h **** 
 566:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _Iterator>
 567:/usr/include/c++/11/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>
 568:/usr/include/c++/11/bits/stl_iterator.h ****     operator+(typename reverse_iterator<_Iterator>::difference_type __n,
 569:/usr/include/c++/11/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __x)
 570:/usr/include/c++/11/bits/stl_iterator.h ****     { return reverse_iterator<_Iterator>(__x.base() - __n); }
 571:/usr/include/c++/11/bits/stl_iterator.h **** 
 572:/usr/include/c++/11/bits/stl_iterator.h **** #if __cplusplus >= 201103L
 573:/usr/include/c++/11/bits/stl_iterator.h ****   // Same as C++14 make_reverse_iterator but used in C++11 mode too.
 574:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _Iterator>
 575:/usr/include/c++/11/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>
 576:/usr/include/c++/11/bits/stl_iterator.h ****     __make_reverse_iterator(_Iterator __i)
 577:/usr/include/c++/11/bits/stl_iterator.h ****     { return reverse_iterator<_Iterator>(__i); }
 578:/usr/include/c++/11/bits/stl_iterator.h **** 
 579:/usr/include/c++/11/bits/stl_iterator.h **** # if __cplusplus >= 201402L
 580:/usr/include/c++/11/bits/stl_iterator.h **** #  define __cpp_lib_make_reverse_iterator 201402
 581:/usr/include/c++/11/bits/stl_iterator.h **** 
 582:/usr/include/c++/11/bits/stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 583:/usr/include/c++/11/bits/stl_iterator.h ****   // DR 2285. make_reverse_iterator
 584:/usr/include/c++/11/bits/stl_iterator.h ****   /// Generator function for reverse_iterator.
 585:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _Iterator>
 586:/usr/include/c++/11/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>
 587:/usr/include/c++/11/bits/stl_iterator.h ****     make_reverse_iterator(_Iterator __i)
 588:/usr/include/c++/11/bits/stl_iterator.h ****     { return reverse_iterator<_Iterator>(__i); }
 589:/usr/include/c++/11/bits/stl_iterator.h **** 
 590:/usr/include/c++/11/bits/stl_iterator.h **** #  if __cplusplus > 201703L && defined __cpp_lib_concepts
 591:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _Iterator1, typename _Iterator2>
 592:/usr/include/c++/11/bits/stl_iterator.h ****     requires (!sized_sentinel_for<_Iterator1, _Iterator2>)
 593:/usr/include/c++/11/bits/stl_iterator.h ****     inline constexpr bool
 594:/usr/include/c++/11/bits/stl_iterator.h ****     disable_sized_sentinel_for<reverse_iterator<_Iterator1>,
 595:/usr/include/c++/11/bits/stl_iterator.h **** 			       reverse_iterator<_Iterator2>> = true;
 596:/usr/include/c++/11/bits/stl_iterator.h **** #  endif // C++20
 597:/usr/include/c++/11/bits/stl_iterator.h **** # endif // C++14
 598:/usr/include/c++/11/bits/stl_iterator.h **** 
 599:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _Iterator>
 600:/usr/include/c++/11/bits/stl_iterator.h ****     _GLIBCXX20_CONSTEXPR
 601:/usr/include/c++/11/bits/stl_iterator.h ****     auto
 602:/usr/include/c++/11/bits/stl_iterator.h ****     __niter_base(reverse_iterator<_Iterator> __it)
 603:/usr/include/c++/11/bits/stl_iterator.h ****     -> decltype(__make_reverse_iterator(__niter_base(__it.base())))
 604:/usr/include/c++/11/bits/stl_iterator.h ****     { return __make_reverse_iterator(__niter_base(__it.base())); }
 605:/usr/include/c++/11/bits/stl_iterator.h **** 
 606:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _Iterator>
 607:/usr/include/c++/11/bits/stl_iterator.h ****     struct __is_move_iterator<reverse_iterator<_Iterator> >
 608:/usr/include/c++/11/bits/stl_iterator.h ****       : __is_move_iterator<_Iterator>
 609:/usr/include/c++/11/bits/stl_iterator.h ****     { };
 610:/usr/include/c++/11/bits/stl_iterator.h **** 
 611:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _Iterator>
 612:/usr/include/c++/11/bits/stl_iterator.h ****     _GLIBCXX20_CONSTEXPR
 613:/usr/include/c++/11/bits/stl_iterator.h ****     auto
 614:/usr/include/c++/11/bits/stl_iterator.h ****     __miter_base(reverse_iterator<_Iterator> __it)
 615:/usr/include/c++/11/bits/stl_iterator.h ****     -> decltype(__make_reverse_iterator(__miter_base(__it.base())))
 616:/usr/include/c++/11/bits/stl_iterator.h ****     { return __make_reverse_iterator(__miter_base(__it.base())); }
 617:/usr/include/c++/11/bits/stl_iterator.h **** #endif // C++11
 618:/usr/include/c++/11/bits/stl_iterator.h **** 
 619:/usr/include/c++/11/bits/stl_iterator.h ****   // 24.4.2.2.1 back_insert_iterator
 620:/usr/include/c++/11/bits/stl_iterator.h ****   /**
 621:/usr/include/c++/11/bits/stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 622:/usr/include/c++/11/bits/stl_iterator.h ****    *
 623:/usr/include/c++/11/bits/stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 624:/usr/include/c++/11/bits/stl_iterator.h ****    *  Assigning a T to the iterator appends it to the container using
 625:/usr/include/c++/11/bits/stl_iterator.h ****    *  push_back.
 626:/usr/include/c++/11/bits/stl_iterator.h ****    *
 627:/usr/include/c++/11/bits/stl_iterator.h ****    *  Tip:  Using the back_inserter function to create these iterators can
 628:/usr/include/c++/11/bits/stl_iterator.h ****    *  save typing.
 629:/usr/include/c++/11/bits/stl_iterator.h ****   */
 630:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _Container>
 631:/usr/include/c++/11/bits/stl_iterator.h ****     class back_insert_iterator
 632:/usr/include/c++/11/bits/stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 633:/usr/include/c++/11/bits/stl_iterator.h ****     {
 634:/usr/include/c++/11/bits/stl_iterator.h ****     protected:
 635:/usr/include/c++/11/bits/stl_iterator.h ****       _Container* container;
 636:/usr/include/c++/11/bits/stl_iterator.h **** 
 637:/usr/include/c++/11/bits/stl_iterator.h ****     public:
 638:/usr/include/c++/11/bits/stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 639:/usr/include/c++/11/bits/stl_iterator.h ****       typedef _Container          container_type;
 640:/usr/include/c++/11/bits/stl_iterator.h **** #if __cplusplus > 201703L
 641:/usr/include/c++/11/bits/stl_iterator.h ****       using difference_type = ptrdiff_t;
 642:/usr/include/c++/11/bits/stl_iterator.h **** 
 643:/usr/include/c++/11/bits/stl_iterator.h ****       constexpr back_insert_iterator() noexcept : container(nullptr) { }
 644:/usr/include/c++/11/bits/stl_iterator.h **** #endif
 645:/usr/include/c++/11/bits/stl_iterator.h **** 
 646:/usr/include/c++/11/bits/stl_iterator.h ****       /// The only way to create this %iterator is with a container.
 647:/usr/include/c++/11/bits/stl_iterator.h ****       explicit _GLIBCXX20_CONSTEXPR
 648:/usr/include/c++/11/bits/stl_iterator.h ****       back_insert_iterator(_Container& __x)
 649:/usr/include/c++/11/bits/stl_iterator.h ****       : container(std::__addressof(__x)) { }
 650:/usr/include/c++/11/bits/stl_iterator.h **** 
 651:/usr/include/c++/11/bits/stl_iterator.h ****       /**
 652:/usr/include/c++/11/bits/stl_iterator.h ****        *  @param  __value  An instance of whatever type
 653:/usr/include/c++/11/bits/stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 654:/usr/include/c++/11/bits/stl_iterator.h ****        *                 reference-to-const T for container<T>.
 655:/usr/include/c++/11/bits/stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 656:/usr/include/c++/11/bits/stl_iterator.h ****        *
 657:/usr/include/c++/11/bits/stl_iterator.h ****        *  This kind of %iterator doesn't really have a @a position in the
 658:/usr/include/c++/11/bits/stl_iterator.h ****        *  container (you can think of the position as being permanently at
 659:/usr/include/c++/11/bits/stl_iterator.h ****        *  the end, if you like).  Assigning a value to the %iterator will
 660:/usr/include/c++/11/bits/stl_iterator.h ****        *  always append the value to the end of the container.
 661:/usr/include/c++/11/bits/stl_iterator.h ****       */
 662:/usr/include/c++/11/bits/stl_iterator.h **** #if __cplusplus < 201103L
 663:/usr/include/c++/11/bits/stl_iterator.h ****       back_insert_iterator&
 664:/usr/include/c++/11/bits/stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 665:/usr/include/c++/11/bits/stl_iterator.h ****       {
 666:/usr/include/c++/11/bits/stl_iterator.h **** 	container->push_back(__value);
 667:/usr/include/c++/11/bits/stl_iterator.h **** 	return *this;
 668:/usr/include/c++/11/bits/stl_iterator.h ****       }
 669:/usr/include/c++/11/bits/stl_iterator.h **** #else
 670:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 671:/usr/include/c++/11/bits/stl_iterator.h ****       back_insert_iterator&
 672:/usr/include/c++/11/bits/stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 673:/usr/include/c++/11/bits/stl_iterator.h ****       {
 674:/usr/include/c++/11/bits/stl_iterator.h **** 	container->push_back(__value);
 675:/usr/include/c++/11/bits/stl_iterator.h **** 	return *this;
 676:/usr/include/c++/11/bits/stl_iterator.h ****       }
 677:/usr/include/c++/11/bits/stl_iterator.h **** 
 678:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 679:/usr/include/c++/11/bits/stl_iterator.h ****       back_insert_iterator&
 680:/usr/include/c++/11/bits/stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 681:/usr/include/c++/11/bits/stl_iterator.h ****       {
 682:/usr/include/c++/11/bits/stl_iterator.h **** 	container->push_back(std::move(__value));
 683:/usr/include/c++/11/bits/stl_iterator.h **** 	return *this;
 684:/usr/include/c++/11/bits/stl_iterator.h ****       }
 685:/usr/include/c++/11/bits/stl_iterator.h **** #endif
 686:/usr/include/c++/11/bits/stl_iterator.h **** 
 687:/usr/include/c++/11/bits/stl_iterator.h ****       /// Simply returns *this.
 688:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 689:/usr/include/c++/11/bits/stl_iterator.h ****       back_insert_iterator&
 690:/usr/include/c++/11/bits/stl_iterator.h ****       operator*()
 691:/usr/include/c++/11/bits/stl_iterator.h ****       { return *this; }
 692:/usr/include/c++/11/bits/stl_iterator.h **** 
 693:/usr/include/c++/11/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 694:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 695:/usr/include/c++/11/bits/stl_iterator.h ****       back_insert_iterator&
 696:/usr/include/c++/11/bits/stl_iterator.h ****       operator++()
 697:/usr/include/c++/11/bits/stl_iterator.h ****       { return *this; }
 698:/usr/include/c++/11/bits/stl_iterator.h **** 
 699:/usr/include/c++/11/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 700:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 701:/usr/include/c++/11/bits/stl_iterator.h ****       back_insert_iterator
 702:/usr/include/c++/11/bits/stl_iterator.h ****       operator++(int)
 703:/usr/include/c++/11/bits/stl_iterator.h ****       { return *this; }
 704:/usr/include/c++/11/bits/stl_iterator.h ****     };
 705:/usr/include/c++/11/bits/stl_iterator.h **** 
 706:/usr/include/c++/11/bits/stl_iterator.h ****   /**
 707:/usr/include/c++/11/bits/stl_iterator.h ****    *  @param  __x  A container of arbitrary type.
 708:/usr/include/c++/11/bits/stl_iterator.h ****    *  @return  An instance of back_insert_iterator working on @p __x.
 709:/usr/include/c++/11/bits/stl_iterator.h ****    *
 710:/usr/include/c++/11/bits/stl_iterator.h ****    *  This wrapper function helps in creating back_insert_iterator instances.
 711:/usr/include/c++/11/bits/stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 712:/usr/include/c++/11/bits/stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 713:/usr/include/c++/11/bits/stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 714:/usr/include/c++/11/bits/stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 715:/usr/include/c++/11/bits/stl_iterator.h ****    *  types for you.
 716:/usr/include/c++/11/bits/stl_iterator.h ****   */
 717:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _Container>
 718:/usr/include/c++/11/bits/stl_iterator.h ****     _GLIBCXX20_CONSTEXPR
 719:/usr/include/c++/11/bits/stl_iterator.h ****     inline back_insert_iterator<_Container>
 720:/usr/include/c++/11/bits/stl_iterator.h ****     back_inserter(_Container& __x)
 721:/usr/include/c++/11/bits/stl_iterator.h ****     { return back_insert_iterator<_Container>(__x); }
 722:/usr/include/c++/11/bits/stl_iterator.h **** 
 723:/usr/include/c++/11/bits/stl_iterator.h ****   /**
 724:/usr/include/c++/11/bits/stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 725:/usr/include/c++/11/bits/stl_iterator.h ****    *
 726:/usr/include/c++/11/bits/stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 727:/usr/include/c++/11/bits/stl_iterator.h ****    *  Assigning a T to the iterator prepends it to the container using
 728:/usr/include/c++/11/bits/stl_iterator.h ****    *  push_front.
 729:/usr/include/c++/11/bits/stl_iterator.h ****    *
 730:/usr/include/c++/11/bits/stl_iterator.h ****    *  Tip:  Using the front_inserter function to create these iterators can
 731:/usr/include/c++/11/bits/stl_iterator.h ****    *  save typing.
 732:/usr/include/c++/11/bits/stl_iterator.h ****   */
 733:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _Container>
 734:/usr/include/c++/11/bits/stl_iterator.h ****     class front_insert_iterator
 735:/usr/include/c++/11/bits/stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 736:/usr/include/c++/11/bits/stl_iterator.h ****     {
 737:/usr/include/c++/11/bits/stl_iterator.h ****     protected:
 738:/usr/include/c++/11/bits/stl_iterator.h ****       _Container* container;
 739:/usr/include/c++/11/bits/stl_iterator.h **** 
 740:/usr/include/c++/11/bits/stl_iterator.h ****     public:
 741:/usr/include/c++/11/bits/stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 742:/usr/include/c++/11/bits/stl_iterator.h ****       typedef _Container          container_type;
 743:/usr/include/c++/11/bits/stl_iterator.h **** #if __cplusplus > 201703L
 744:/usr/include/c++/11/bits/stl_iterator.h ****       using difference_type = ptrdiff_t;
 745:/usr/include/c++/11/bits/stl_iterator.h **** 
 746:/usr/include/c++/11/bits/stl_iterator.h ****       constexpr front_insert_iterator() noexcept : container(nullptr) { }
 747:/usr/include/c++/11/bits/stl_iterator.h **** #endif
 748:/usr/include/c++/11/bits/stl_iterator.h **** 
 749:/usr/include/c++/11/bits/stl_iterator.h ****       /// The only way to create this %iterator is with a container.
 750:/usr/include/c++/11/bits/stl_iterator.h ****       explicit _GLIBCXX20_CONSTEXPR
 751:/usr/include/c++/11/bits/stl_iterator.h ****       front_insert_iterator(_Container& __x)
 752:/usr/include/c++/11/bits/stl_iterator.h ****       : container(std::__addressof(__x)) { }
 753:/usr/include/c++/11/bits/stl_iterator.h **** 
 754:/usr/include/c++/11/bits/stl_iterator.h ****       /**
 755:/usr/include/c++/11/bits/stl_iterator.h ****        *  @param  __value  An instance of whatever type
 756:/usr/include/c++/11/bits/stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 757:/usr/include/c++/11/bits/stl_iterator.h ****        *                 reference-to-const T for container<T>.
 758:/usr/include/c++/11/bits/stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 759:/usr/include/c++/11/bits/stl_iterator.h ****        *
 760:/usr/include/c++/11/bits/stl_iterator.h ****        *  This kind of %iterator doesn't really have a @a position in the
 761:/usr/include/c++/11/bits/stl_iterator.h ****        *  container (you can think of the position as being permanently at
 762:/usr/include/c++/11/bits/stl_iterator.h ****        *  the front, if you like).  Assigning a value to the %iterator will
 763:/usr/include/c++/11/bits/stl_iterator.h ****        *  always prepend the value to the front of the container.
 764:/usr/include/c++/11/bits/stl_iterator.h ****       */
 765:/usr/include/c++/11/bits/stl_iterator.h **** #if __cplusplus < 201103L
 766:/usr/include/c++/11/bits/stl_iterator.h ****       front_insert_iterator&
 767:/usr/include/c++/11/bits/stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 768:/usr/include/c++/11/bits/stl_iterator.h ****       {
 769:/usr/include/c++/11/bits/stl_iterator.h **** 	container->push_front(__value);
 770:/usr/include/c++/11/bits/stl_iterator.h **** 	return *this;
 771:/usr/include/c++/11/bits/stl_iterator.h ****       }
 772:/usr/include/c++/11/bits/stl_iterator.h **** #else
 773:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 774:/usr/include/c++/11/bits/stl_iterator.h ****       front_insert_iterator&
 775:/usr/include/c++/11/bits/stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 776:/usr/include/c++/11/bits/stl_iterator.h ****       {
 777:/usr/include/c++/11/bits/stl_iterator.h **** 	container->push_front(__value);
 778:/usr/include/c++/11/bits/stl_iterator.h **** 	return *this;
 779:/usr/include/c++/11/bits/stl_iterator.h ****       }
 780:/usr/include/c++/11/bits/stl_iterator.h **** 
 781:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 782:/usr/include/c++/11/bits/stl_iterator.h ****       front_insert_iterator&
 783:/usr/include/c++/11/bits/stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 784:/usr/include/c++/11/bits/stl_iterator.h ****       {
 785:/usr/include/c++/11/bits/stl_iterator.h **** 	container->push_front(std::move(__value));
 786:/usr/include/c++/11/bits/stl_iterator.h **** 	return *this;
 787:/usr/include/c++/11/bits/stl_iterator.h ****       }
 788:/usr/include/c++/11/bits/stl_iterator.h **** #endif
 789:/usr/include/c++/11/bits/stl_iterator.h **** 
 790:/usr/include/c++/11/bits/stl_iterator.h ****       /// Simply returns *this.
 791:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 792:/usr/include/c++/11/bits/stl_iterator.h ****       front_insert_iterator&
 793:/usr/include/c++/11/bits/stl_iterator.h ****       operator*()
 794:/usr/include/c++/11/bits/stl_iterator.h ****       { return *this; }
 795:/usr/include/c++/11/bits/stl_iterator.h **** 
 796:/usr/include/c++/11/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 797:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 798:/usr/include/c++/11/bits/stl_iterator.h ****       front_insert_iterator&
 799:/usr/include/c++/11/bits/stl_iterator.h ****       operator++()
 800:/usr/include/c++/11/bits/stl_iterator.h ****       { return *this; }
 801:/usr/include/c++/11/bits/stl_iterator.h **** 
 802:/usr/include/c++/11/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 803:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 804:/usr/include/c++/11/bits/stl_iterator.h ****       front_insert_iterator
 805:/usr/include/c++/11/bits/stl_iterator.h ****       operator++(int)
 806:/usr/include/c++/11/bits/stl_iterator.h ****       { return *this; }
 807:/usr/include/c++/11/bits/stl_iterator.h ****     };
 808:/usr/include/c++/11/bits/stl_iterator.h **** 
 809:/usr/include/c++/11/bits/stl_iterator.h ****   /**
 810:/usr/include/c++/11/bits/stl_iterator.h ****    *  @param  __x  A container of arbitrary type.
 811:/usr/include/c++/11/bits/stl_iterator.h ****    *  @return  An instance of front_insert_iterator working on @p x.
 812:/usr/include/c++/11/bits/stl_iterator.h ****    *
 813:/usr/include/c++/11/bits/stl_iterator.h ****    *  This wrapper function helps in creating front_insert_iterator instances.
 814:/usr/include/c++/11/bits/stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 815:/usr/include/c++/11/bits/stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 816:/usr/include/c++/11/bits/stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 817:/usr/include/c++/11/bits/stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 818:/usr/include/c++/11/bits/stl_iterator.h ****    *  types for you.
 819:/usr/include/c++/11/bits/stl_iterator.h ****   */
 820:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _Container>
 821:/usr/include/c++/11/bits/stl_iterator.h ****     _GLIBCXX20_CONSTEXPR
 822:/usr/include/c++/11/bits/stl_iterator.h ****     inline front_insert_iterator<_Container>
 823:/usr/include/c++/11/bits/stl_iterator.h ****     front_inserter(_Container& __x)
 824:/usr/include/c++/11/bits/stl_iterator.h ****     { return front_insert_iterator<_Container>(__x); }
 825:/usr/include/c++/11/bits/stl_iterator.h **** 
 826:/usr/include/c++/11/bits/stl_iterator.h ****   /**
 827:/usr/include/c++/11/bits/stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 828:/usr/include/c++/11/bits/stl_iterator.h ****    *
 829:/usr/include/c++/11/bits/stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 830:/usr/include/c++/11/bits/stl_iterator.h ****    *  Assigning a T to the iterator inserts it in the container at the
 831:/usr/include/c++/11/bits/stl_iterator.h ****    *  %iterator's position, rather than overwriting the value at that
 832:/usr/include/c++/11/bits/stl_iterator.h ****    *  position.
 833:/usr/include/c++/11/bits/stl_iterator.h ****    *
 834:/usr/include/c++/11/bits/stl_iterator.h ****    *  (Sequences will actually insert a @e copy of the value before the
 835:/usr/include/c++/11/bits/stl_iterator.h ****    *  %iterator's position.)
 836:/usr/include/c++/11/bits/stl_iterator.h ****    *
 837:/usr/include/c++/11/bits/stl_iterator.h ****    *  Tip:  Using the inserter function to create these iterators can
 838:/usr/include/c++/11/bits/stl_iterator.h ****    *  save typing.
 839:/usr/include/c++/11/bits/stl_iterator.h ****   */
 840:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _Container>
 841:/usr/include/c++/11/bits/stl_iterator.h ****     class insert_iterator
 842:/usr/include/c++/11/bits/stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 843:/usr/include/c++/11/bits/stl_iterator.h ****     {
 844:/usr/include/c++/11/bits/stl_iterator.h **** #if __cplusplus > 201703L && defined __cpp_lib_concepts
 845:/usr/include/c++/11/bits/stl_iterator.h ****       using _Iter = std::__detail::__range_iter_t<_Container>;
 846:/usr/include/c++/11/bits/stl_iterator.h **** 
 847:/usr/include/c++/11/bits/stl_iterator.h ****     protected:
 848:/usr/include/c++/11/bits/stl_iterator.h ****       _Container* container = nullptr;
 849:/usr/include/c++/11/bits/stl_iterator.h ****       _Iter iter = _Iter();
 850:/usr/include/c++/11/bits/stl_iterator.h **** #else
 851:/usr/include/c++/11/bits/stl_iterator.h ****       typedef typename _Container::iterator		_Iter;
 852:/usr/include/c++/11/bits/stl_iterator.h **** 
 853:/usr/include/c++/11/bits/stl_iterator.h ****     protected:
 854:/usr/include/c++/11/bits/stl_iterator.h ****       _Container* container;
 855:/usr/include/c++/11/bits/stl_iterator.h ****       _Iter iter;
 856:/usr/include/c++/11/bits/stl_iterator.h **** #endif
 857:/usr/include/c++/11/bits/stl_iterator.h **** 
 858:/usr/include/c++/11/bits/stl_iterator.h ****     public:
 859:/usr/include/c++/11/bits/stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 860:/usr/include/c++/11/bits/stl_iterator.h ****       typedef _Container          container_type;
 861:/usr/include/c++/11/bits/stl_iterator.h **** 
 862:/usr/include/c++/11/bits/stl_iterator.h **** #if __cplusplus > 201703L && defined __cpp_lib_concepts
 863:/usr/include/c++/11/bits/stl_iterator.h ****       using difference_type = ptrdiff_t;
 864:/usr/include/c++/11/bits/stl_iterator.h **** 
 865:/usr/include/c++/11/bits/stl_iterator.h ****       insert_iterator() = default;
 866:/usr/include/c++/11/bits/stl_iterator.h **** #endif
 867:/usr/include/c++/11/bits/stl_iterator.h **** 
 868:/usr/include/c++/11/bits/stl_iterator.h ****       /**
 869:/usr/include/c++/11/bits/stl_iterator.h ****        *  The only way to create this %iterator is with a container and an
 870:/usr/include/c++/11/bits/stl_iterator.h ****        *  initial position (a normal %iterator into the container).
 871:/usr/include/c++/11/bits/stl_iterator.h ****       */
 872:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 873:/usr/include/c++/11/bits/stl_iterator.h ****       insert_iterator(_Container& __x, _Iter __i)
 874:/usr/include/c++/11/bits/stl_iterator.h ****       : container(std::__addressof(__x)), iter(__i) {}
 875:/usr/include/c++/11/bits/stl_iterator.h **** 
 876:/usr/include/c++/11/bits/stl_iterator.h ****       /**
 877:/usr/include/c++/11/bits/stl_iterator.h ****        *  @param  __value  An instance of whatever type
 878:/usr/include/c++/11/bits/stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 879:/usr/include/c++/11/bits/stl_iterator.h ****        *                 reference-to-const T for container<T>.
 880:/usr/include/c++/11/bits/stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 881:/usr/include/c++/11/bits/stl_iterator.h ****        *
 882:/usr/include/c++/11/bits/stl_iterator.h ****        *  This kind of %iterator maintains its own position in the
 883:/usr/include/c++/11/bits/stl_iterator.h ****        *  container.  Assigning a value to the %iterator will insert the
 884:/usr/include/c++/11/bits/stl_iterator.h ****        *  value into the container at the place before the %iterator.
 885:/usr/include/c++/11/bits/stl_iterator.h ****        *
 886:/usr/include/c++/11/bits/stl_iterator.h ****        *  The position is maintained such that subsequent assignments will
 887:/usr/include/c++/11/bits/stl_iterator.h ****        *  insert values immediately after one another.  For example,
 888:/usr/include/c++/11/bits/stl_iterator.h ****        *  @code
 889:/usr/include/c++/11/bits/stl_iterator.h ****        *     // vector v contains A and Z
 890:/usr/include/c++/11/bits/stl_iterator.h ****        *
 891:/usr/include/c++/11/bits/stl_iterator.h ****        *     insert_iterator i (v, ++v.begin());
 892:/usr/include/c++/11/bits/stl_iterator.h ****        *     i = 1;
 893:/usr/include/c++/11/bits/stl_iterator.h ****        *     i = 2;
 894:/usr/include/c++/11/bits/stl_iterator.h ****        *     i = 3;
 895:/usr/include/c++/11/bits/stl_iterator.h ****        *
 896:/usr/include/c++/11/bits/stl_iterator.h ****        *     // vector v contains A, 1, 2, 3, and Z
 897:/usr/include/c++/11/bits/stl_iterator.h ****        *  @endcode
 898:/usr/include/c++/11/bits/stl_iterator.h ****       */
 899:/usr/include/c++/11/bits/stl_iterator.h **** #if __cplusplus < 201103L
 900:/usr/include/c++/11/bits/stl_iterator.h ****       insert_iterator&
 901:/usr/include/c++/11/bits/stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 902:/usr/include/c++/11/bits/stl_iterator.h ****       {
 903:/usr/include/c++/11/bits/stl_iterator.h **** 	iter = container->insert(iter, __value);
 904:/usr/include/c++/11/bits/stl_iterator.h **** 	++iter;
 905:/usr/include/c++/11/bits/stl_iterator.h **** 	return *this;
 906:/usr/include/c++/11/bits/stl_iterator.h ****       }
 907:/usr/include/c++/11/bits/stl_iterator.h **** #else
 908:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 909:/usr/include/c++/11/bits/stl_iterator.h ****       insert_iterator&
 910:/usr/include/c++/11/bits/stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 911:/usr/include/c++/11/bits/stl_iterator.h ****       {
 912:/usr/include/c++/11/bits/stl_iterator.h **** 	iter = container->insert(iter, __value);
 913:/usr/include/c++/11/bits/stl_iterator.h **** 	++iter;
 914:/usr/include/c++/11/bits/stl_iterator.h **** 	return *this;
 915:/usr/include/c++/11/bits/stl_iterator.h ****       }
 916:/usr/include/c++/11/bits/stl_iterator.h **** 
 917:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 918:/usr/include/c++/11/bits/stl_iterator.h ****       insert_iterator&
 919:/usr/include/c++/11/bits/stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 920:/usr/include/c++/11/bits/stl_iterator.h ****       {
 921:/usr/include/c++/11/bits/stl_iterator.h **** 	iter = container->insert(iter, std::move(__value));
 922:/usr/include/c++/11/bits/stl_iterator.h **** 	++iter;
 923:/usr/include/c++/11/bits/stl_iterator.h **** 	return *this;
 924:/usr/include/c++/11/bits/stl_iterator.h ****       }
 925:/usr/include/c++/11/bits/stl_iterator.h **** #endif
 926:/usr/include/c++/11/bits/stl_iterator.h **** 
 927:/usr/include/c++/11/bits/stl_iterator.h ****       /// Simply returns *this.
 928:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 929:/usr/include/c++/11/bits/stl_iterator.h ****       insert_iterator&
 930:/usr/include/c++/11/bits/stl_iterator.h ****       operator*()
 931:/usr/include/c++/11/bits/stl_iterator.h ****       { return *this; }
 932:/usr/include/c++/11/bits/stl_iterator.h **** 
 933:/usr/include/c++/11/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 934:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 935:/usr/include/c++/11/bits/stl_iterator.h ****       insert_iterator&
 936:/usr/include/c++/11/bits/stl_iterator.h ****       operator++()
 937:/usr/include/c++/11/bits/stl_iterator.h ****       { return *this; }
 938:/usr/include/c++/11/bits/stl_iterator.h **** 
 939:/usr/include/c++/11/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 940:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 941:/usr/include/c++/11/bits/stl_iterator.h ****       insert_iterator&
 942:/usr/include/c++/11/bits/stl_iterator.h ****       operator++(int)
 943:/usr/include/c++/11/bits/stl_iterator.h ****       { return *this; }
 944:/usr/include/c++/11/bits/stl_iterator.h ****     };
 945:/usr/include/c++/11/bits/stl_iterator.h **** 
 946:/usr/include/c++/11/bits/stl_iterator.h ****   /**
 947:/usr/include/c++/11/bits/stl_iterator.h ****    *  @param __x  A container of arbitrary type.
 948:/usr/include/c++/11/bits/stl_iterator.h ****    *  @param __i  An iterator into the container.
 949:/usr/include/c++/11/bits/stl_iterator.h ****    *  @return  An instance of insert_iterator working on @p __x.
 950:/usr/include/c++/11/bits/stl_iterator.h ****    *
 951:/usr/include/c++/11/bits/stl_iterator.h ****    *  This wrapper function helps in creating insert_iterator instances.
 952:/usr/include/c++/11/bits/stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 953:/usr/include/c++/11/bits/stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 954:/usr/include/c++/11/bits/stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 955:/usr/include/c++/11/bits/stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 956:/usr/include/c++/11/bits/stl_iterator.h ****    *  types for you.
 957:/usr/include/c++/11/bits/stl_iterator.h ****   */
 958:/usr/include/c++/11/bits/stl_iterator.h **** #if __cplusplus > 201703L && defined __cpp_lib_concepts
 959:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _Container>
 960:/usr/include/c++/11/bits/stl_iterator.h ****     constexpr insert_iterator<_Container>
 961:/usr/include/c++/11/bits/stl_iterator.h ****     inserter(_Container& __x, std::__detail::__range_iter_t<_Container> __i)
 962:/usr/include/c++/11/bits/stl_iterator.h ****     { return insert_iterator<_Container>(__x, __i); }
 963:/usr/include/c++/11/bits/stl_iterator.h **** #else
 964:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _Container>
 965:/usr/include/c++/11/bits/stl_iterator.h ****     inline insert_iterator<_Container>
 966:/usr/include/c++/11/bits/stl_iterator.h ****     inserter(_Container& __x, typename _Container::iterator __i)
 967:/usr/include/c++/11/bits/stl_iterator.h ****     { return insert_iterator<_Container>(__x, __i); }
 968:/usr/include/c++/11/bits/stl_iterator.h **** #endif
 969:/usr/include/c++/11/bits/stl_iterator.h **** 
 970:/usr/include/c++/11/bits/stl_iterator.h ****   /// @} group iterators
 971:/usr/include/c++/11/bits/stl_iterator.h **** 
 972:/usr/include/c++/11/bits/stl_iterator.h **** _GLIBCXX_END_NAMESPACE_VERSION
 973:/usr/include/c++/11/bits/stl_iterator.h **** } // namespace
 974:/usr/include/c++/11/bits/stl_iterator.h **** 
 975:/usr/include/c++/11/bits/stl_iterator.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
 976:/usr/include/c++/11/bits/stl_iterator.h **** {
 977:/usr/include/c++/11/bits/stl_iterator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
 978:/usr/include/c++/11/bits/stl_iterator.h **** 
 979:/usr/include/c++/11/bits/stl_iterator.h ****   // This iterator adapter is @a normal in the sense that it does not
 980:/usr/include/c++/11/bits/stl_iterator.h ****   // change the semantics of any of the operators of its iterator
 981:/usr/include/c++/11/bits/stl_iterator.h ****   // parameter.  Its primary purpose is to convert an iterator that is
 982:/usr/include/c++/11/bits/stl_iterator.h ****   // not a class, e.g. a pointer, into an iterator that is a class.
 983:/usr/include/c++/11/bits/stl_iterator.h ****   // The _Container parameter exists solely so that different containers
 984:/usr/include/c++/11/bits/stl_iterator.h ****   // using this template can instantiate different types, even if the
 985:/usr/include/c++/11/bits/stl_iterator.h ****   // _Iterator parameter is the same.
 986:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 987:/usr/include/c++/11/bits/stl_iterator.h ****     class __normal_iterator
 988:/usr/include/c++/11/bits/stl_iterator.h ****     {
 989:/usr/include/c++/11/bits/stl_iterator.h ****     protected:
 990:/usr/include/c++/11/bits/stl_iterator.h ****       _Iterator _M_current;
 991:/usr/include/c++/11/bits/stl_iterator.h **** 
 992:/usr/include/c++/11/bits/stl_iterator.h ****       typedef std::iterator_traits<_Iterator>		__traits_type;
 993:/usr/include/c++/11/bits/stl_iterator.h **** 
 994:/usr/include/c++/11/bits/stl_iterator.h ****     public:
 995:/usr/include/c++/11/bits/stl_iterator.h ****       typedef _Iterator					iterator_type;
 996:/usr/include/c++/11/bits/stl_iterator.h ****       typedef typename __traits_type::iterator_category iterator_category;
 997:/usr/include/c++/11/bits/stl_iterator.h ****       typedef typename __traits_type::value_type  	value_type;
 998:/usr/include/c++/11/bits/stl_iterator.h ****       typedef typename __traits_type::difference_type 	difference_type;
 999:/usr/include/c++/11/bits/stl_iterator.h ****       typedef typename __traits_type::reference 	reference;
1000:/usr/include/c++/11/bits/stl_iterator.h ****       typedef typename __traits_type::pointer   	pointer;
1001:/usr/include/c++/11/bits/stl_iterator.h **** 
1002:/usr/include/c++/11/bits/stl_iterator.h **** #if __cplusplus > 201703L && __cpp_lib_concepts
1003:/usr/include/c++/11/bits/stl_iterator.h ****       using iterator_concept = std::__detail::__iter_concept<_Iterator>;
1004:/usr/include/c++/11/bits/stl_iterator.h **** #endif
1005:/usr/include/c++/11/bits/stl_iterator.h **** 
1006:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
1007:/usr/include/c++/11/bits/stl_iterator.h ****       : _M_current(_Iterator()) { }
1008:/usr/include/c++/11/bits/stl_iterator.h **** 
1009:/usr/include/c++/11/bits/stl_iterator.h ****       explicit _GLIBCXX20_CONSTEXPR
1010:/usr/include/c++/11/bits/stl_iterator.h ****       __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
1011:/usr/include/c++/11/bits/stl_iterator.h ****       : _M_current(__i) { }
1012:/usr/include/c++/11/bits/stl_iterator.h **** 
1013:/usr/include/c++/11/bits/stl_iterator.h ****       // Allow iterator to const_iterator conversion
1014:/usr/include/c++/11/bits/stl_iterator.h ****       template<typename _Iter>
1015:/usr/include/c++/11/bits/stl_iterator.h ****         _GLIBCXX20_CONSTEXPR
1016:/usr/include/c++/11/bits/stl_iterator.h ****         __normal_iterator(const __normal_iterator<_Iter,
1017:/usr/include/c++/11/bits/stl_iterator.h **** 			  typename __enable_if<
1018:/usr/include/c++/11/bits/stl_iterator.h ****       	       (std::__are_same<_Iter, typename _Container::pointer>::__value),
1019:/usr/include/c++/11/bits/stl_iterator.h **** 		      _Container>::__type>& __i) _GLIBCXX_NOEXCEPT
1020:/usr/include/c++/11/bits/stl_iterator.h ****         : _M_current(__i.base()) { }
1021:/usr/include/c++/11/bits/stl_iterator.h **** 
1022:/usr/include/c++/11/bits/stl_iterator.h ****       // Forward iterator requirements
1023:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1024:/usr/include/c++/11/bits/stl_iterator.h ****       reference
1025:/usr/include/c++/11/bits/stl_iterator.h ****       operator*() const _GLIBCXX_NOEXCEPT
1026:/usr/include/c++/11/bits/stl_iterator.h ****       { return *_M_current; }
1027:/usr/include/c++/11/bits/stl_iterator.h **** 
1028:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1029:/usr/include/c++/11/bits/stl_iterator.h ****       pointer
1030:/usr/include/c++/11/bits/stl_iterator.h ****       operator->() const _GLIBCXX_NOEXCEPT
1031:/usr/include/c++/11/bits/stl_iterator.h ****       { return _M_current; }
1032:/usr/include/c++/11/bits/stl_iterator.h **** 
1033:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1034:/usr/include/c++/11/bits/stl_iterator.h ****       __normal_iterator&
1035:/usr/include/c++/11/bits/stl_iterator.h ****       operator++() _GLIBCXX_NOEXCEPT
1036:/usr/include/c++/11/bits/stl_iterator.h ****       {
1037:/usr/include/c++/11/bits/stl_iterator.h **** 	++_M_current;
1038:/usr/include/c++/11/bits/stl_iterator.h **** 	return *this;
1039:/usr/include/c++/11/bits/stl_iterator.h ****       }
1040:/usr/include/c++/11/bits/stl_iterator.h **** 
1041:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1042:/usr/include/c++/11/bits/stl_iterator.h ****       __normal_iterator
1043:/usr/include/c++/11/bits/stl_iterator.h ****       operator++(int) _GLIBCXX_NOEXCEPT
1044:/usr/include/c++/11/bits/stl_iterator.h ****       { return __normal_iterator(_M_current++); }
1045:/usr/include/c++/11/bits/stl_iterator.h **** 
1046:/usr/include/c++/11/bits/stl_iterator.h ****       // Bidirectional iterator requirements
1047:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1048:/usr/include/c++/11/bits/stl_iterator.h ****       __normal_iterator&
1049:/usr/include/c++/11/bits/stl_iterator.h ****       operator--() _GLIBCXX_NOEXCEPT
1050:/usr/include/c++/11/bits/stl_iterator.h ****       {
1051:/usr/include/c++/11/bits/stl_iterator.h **** 	--_M_current;
1052:/usr/include/c++/11/bits/stl_iterator.h **** 	return *this;
1053:/usr/include/c++/11/bits/stl_iterator.h ****       }
1054:/usr/include/c++/11/bits/stl_iterator.h **** 
1055:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1056:/usr/include/c++/11/bits/stl_iterator.h ****       __normal_iterator
1057:/usr/include/c++/11/bits/stl_iterator.h ****       operator--(int) _GLIBCXX_NOEXCEPT
1058:/usr/include/c++/11/bits/stl_iterator.h ****       { return __normal_iterator(_M_current--); }
1059:/usr/include/c++/11/bits/stl_iterator.h **** 
1060:/usr/include/c++/11/bits/stl_iterator.h ****       // Random access iterator requirements
1061:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1062:/usr/include/c++/11/bits/stl_iterator.h ****       reference
1063:/usr/include/c++/11/bits/stl_iterator.h ****       operator[](difference_type __n) const _GLIBCXX_NOEXCEPT
1064:/usr/include/c++/11/bits/stl_iterator.h ****       { return _M_current[__n]; }
1065:/usr/include/c++/11/bits/stl_iterator.h **** 
1066:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1067:/usr/include/c++/11/bits/stl_iterator.h ****       __normal_iterator&
1068:/usr/include/c++/11/bits/stl_iterator.h ****       operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
1069:/usr/include/c++/11/bits/stl_iterator.h ****       { _M_current += __n; return *this; }
1070:/usr/include/c++/11/bits/stl_iterator.h **** 
1071:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1072:/usr/include/c++/11/bits/stl_iterator.h ****       __normal_iterator
1073:/usr/include/c++/11/bits/stl_iterator.h ****       operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
1074:/usr/include/c++/11/bits/stl_iterator.h ****       { return __normal_iterator(_M_current + __n); }
1075:/usr/include/c++/11/bits/stl_iterator.h **** 
1076:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1077:/usr/include/c++/11/bits/stl_iterator.h ****       __normal_iterator&
1078:/usr/include/c++/11/bits/stl_iterator.h ****       operator-=(difference_type __n) _GLIBCXX_NOEXCEPT
1079:/usr/include/c++/11/bits/stl_iterator.h ****       { _M_current -= __n; return *this; }
1080:/usr/include/c++/11/bits/stl_iterator.h **** 
1081:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1082:/usr/include/c++/11/bits/stl_iterator.h ****       __normal_iterator
1083:/usr/include/c++/11/bits/stl_iterator.h ****       operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 1412              		.loc 9 1083 7
 1413              		.cfi_startproc
 1414 0000 F30F1EFA 		endbr64
 1415 0004 55       		pushq	%rbp
 1416              		.cfi_def_cfa_offset 16
 1417              		.cfi_offset 6, -16
 1418 0005 4889E5   		movq	%rsp, %rbp
 1419              		.cfi_def_cfa_register 6
 1420 0008 4883EC30 		subq	$48, %rsp
 1421 000c 48897DD8 		movq	%rdi, -40(%rbp)
 1422 0010 488975D0 		movq	%rsi, -48(%rbp)
 1423              		.loc 9 1083 7
 1424 0014 64488B04 		movq	%fs:40, %rax
 1424      25280000 
 1424      00
 1425 001d 488945F8 		movq	%rax, -8(%rbp)
 1426 0021 31C0     		xorl	%eax, %eax
1084:/usr/include/c++/11/bits/stl_iterator.h ****       { return __normal_iterator(_M_current - __n); }
 1427              		.loc 9 1084 34
 1428 0023 488B45D8 		movq	-40(%rbp), %rax
 1429 0027 488B10   		movq	(%rax), %rdx
 1430              		.loc 9 1084 47
 1431 002a 488B45D0 		movq	-48(%rbp), %rax
 1432              		.loc 9 1084 45
 1433 002e 48C1E007 		salq	$7, %rax
 1434 0032 48F7D8   		negq	%rax
 1435 0035 4801D0   		addq	%rdx, %rax
 1436 0038 488945E8 		movq	%rax, -24(%rbp)
 1437              		.loc 9 1084 16
 1438 003c 488D55E8 		leaq	-24(%rbp), %rdx
 1439 0040 488D45F0 		leaq	-16(%rbp), %rax
 1440 0044 4889D6   		movq	%rdx, %rsi
 1441 0047 4889C7   		movq	%rax, %rdi
 1442 004a E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC1ERKS
 1442      00
 1443              		.loc 9 1084 50
 1444 004f 488B45F0 		movq	-16(%rbp), %rax
 1445              		.loc 9 1084 53
 1446 0053 488B55F8 		movq	-8(%rbp), %rdx
 1447 0057 64482B14 		subq	%fs:40, %rdx
 1447      25280000 
 1447      00
 1448 0060 7405     		je	.L69
 1449 0062 E8000000 		call	__stack_chk_fail@PLT
 1449      00
 1450              	.L69:
 1451 0067 C9       		leave
 1452              		.cfi_def_cfa 7, 8
 1453 0068 C3       		ret
 1454              		.cfi_endproc
 1455              	.LFE975:
 1457              		.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS
 1458              		.align 2
 1459              		.weak	_ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEdeEv
 1461              	_ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEdeEv:
 1462              	.LFB976:
1025:/usr/include/c++/11/bits/stl_iterator.h ****       { return *_M_current; }
 1463              		.loc 9 1025 7
 1464              		.cfi_startproc
 1465 0000 F30F1EFA 		endbr64
 1466 0004 55       		pushq	%rbp
 1467              		.cfi_def_cfa_offset 16
 1468              		.cfi_offset 6, -16
 1469 0005 4889E5   		movq	%rsp, %rbp
 1470              		.cfi_def_cfa_register 6
 1471 0008 48897DF8 		movq	%rdi, -8(%rbp)
1026:/usr/include/c++/11/bits/stl_iterator.h **** 
 1472              		.loc 9 1026 17
 1473 000c 488B45F8 		movq	-8(%rbp), %rax
 1474 0010 488B00   		movq	(%rax), %rax
1026:/usr/include/c++/11/bits/stl_iterator.h **** 
 1475              		.loc 9 1026 29
 1476 0013 5D       		popq	%rbp
 1477              		.cfi_def_cfa 7, 8
 1478 0014 C3       		ret
 1479              		.cfi_endproc
 1480              	.LFE976:
 1482              		.section	.text._ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_trait
 1483              		.weak	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcE
 1485              	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEES8_
 1486              	.LFB991:
 144:/usr/include/c++/11/ext/alloc_traits.h ****       { __a.construct(__p, __arg); }
 1487              		.loc 7 144 19
 1488              		.cfi_startproc
 1489 0000 F30F1EFA 		endbr64
 1490 0004 55       		pushq	%rbp
 1491              		.cfi_def_cfa_offset 16
 1492              		.cfi_offset 6, -16
 1493 0005 4889E5   		movq	%rsp, %rbp
 1494              		.cfi_def_cfa_register 6
 1495 0008 4883EC20 		subq	$32, %rsp
 1496 000c 48897DF8 		movq	%rdi, -8(%rbp)
 1497 0010 488975F0 		movq	%rsi, -16(%rbp)
 1498 0014 488955E8 		movq	%rdx, -24(%rbp)
 1499              		.loc 7 145 22
 1500 0018 488B55E8 		movq	-24(%rbp), %rdx
 1501 001c 488B4DF0 		movq	-16(%rbp), %rcx
 1502 0020 488B45F8 		movq	-8(%rbp), %rax
 1503 0024 4889CE   		movq	%rcx, %rsi
 1504 0027 4889C7   		movq	%rax, %rdi
 1505 002a E8000000 		call	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9
 1505      00
 1506              		.loc 7 145 36
 1507 002f 90       		nop
 1508 0030 C9       		leave
 1509              		.cfi_def_cfa 7, 8
 1510 0031 C3       		ret
 1511              		.cfi_endproc
 1512              	.LFE991:
 1514              		.section	.text._ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE
 1515              		.align 2
 1516              		.weak	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE17_M_real
 1518              	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE17_M_realloc_ins
 1519              	.LFB992:
 431:/usr/include/c++/11/bits/vector.tcc ****     _M_realloc_insert(iterator __position, const _Tp& __x)
 1520              		.loc 8 431 5
 1521              		.cfi_startproc
 1522              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 1523              		.cfi_lsda 0x1b,.LLSDA992
 1524 0000 F30F1EFA 		endbr64
 1525 0004 55       		pushq	%rbp
 1526              		.cfi_def_cfa_offset 16
 1527              		.cfi_offset 6, -16
 1528 0005 4889E5   		movq	%rsp, %rbp
 1529              		.cfi_def_cfa_register 6
 1530 0008 53       		pushq	%rbx
 1531 0009 4883EC68 		subq	$104, %rsp
 1532              		.cfi_offset 3, -24
 1533 000d 48897DA8 		movq	%rdi, -88(%rbp)
 1534 0011 488975A0 		movq	%rsi, -96(%rbp)
 1535 0015 48895598 		movq	%rdx, -104(%rbp)
 431:/usr/include/c++/11/bits/vector.tcc ****     _M_realloc_insert(iterator __position, const _Tp& __x)
 1536              		.loc 8 431 5
 1537 0019 64488B04 		movq	%fs:40, %rax
 1537      25280000 
 1537      00
 1538 0022 488945E8 		movq	%rax, -24(%rbp)
 1539 0026 31C0     		xorl	%eax, %eax
 436:/usr/include/c++/11/bits/vector.tcc ****       pointer __old_start = this->_M_impl._M_start;
 1540              		.loc 8 436 14
 1541 0028 488B45A8 		movq	-88(%rbp), %rax
 1542 002c 488D1500 		leaq	.LC0(%rip), %rdx
 1542      000000
 1543 0033 BE010000 		movl	$1, %esi
 1543      00
 1544 0038 4889C7   		movq	%rax, %rdi
 1545              	.LEHB27:
 1546 003b E8000000 		call	_ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_M_chec
 1546      00
 1547 0040 488945C0 		movq	%rax, -64(%rbp)
 437:/usr/include/c++/11/bits/vector.tcc ****       pointer __old_finish = this->_M_impl._M_finish;
 1548              		.loc 8 437 15
 1549 0044 488B45A8 		movq	-88(%rbp), %rax
 1550 0048 488B00   		movq	(%rax), %rax
 1551 004b 488945C8 		movq	%rax, -56(%rbp)
 438:/usr/include/c++/11/bits/vector.tcc ****       const size_type __elems_before = __position - begin();
 1552              		.loc 8 438 15
 1553 004f 488B45A8 		movq	-88(%rbp), %rax
 1554 0053 488B4008 		movq	8(%rax), %rax
 1555 0057 488945D0 		movq	%rax, -48(%rbp)
 439:/usr/include/c++/11/bits/vector.tcc ****       pointer __new_start(this->_M_allocate(__len));
 1556              		.loc 8 439 58
 1557 005b 488B45A8 		movq	-88(%rbp), %rax
 1558 005f 4889C7   		movq	%rax, %rdi
 1559 0062 E8000000 		call	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE5beginEv@P
 1559      00
 1560 0067 488945B0 		movq	%rax, -80(%rbp)
 439:/usr/include/c++/11/bits/vector.tcc ****       pointer __new_start(this->_M_allocate(__len));
 1561              		.loc 8 439 51
 1562 006b 488D55B0 		leaq	-80(%rbp), %rdx
 1563 006f 488D45A0 		leaq	-96(%rbp), %rax
 1564 0073 4889D6   		movq	%rdx, %rsi
 1565 0076 4889C7   		movq	%rax, %rdi
 1566 0079 E8000000 		call	_ZN9__gnu_cxxmiIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_S
 1566      00
 439:/usr/include/c++/11/bits/vector.tcc ****       pointer __new_start(this->_M_allocate(__len));
 1567              		.loc 8 439 23
 1568 007e 488945D8 		movq	%rax, -40(%rbp)
 440:/usr/include/c++/11/bits/vector.tcc ****       pointer __new_finish(__new_start);
 1569              		.loc 8 440 44
 1570 0082 488B45A8 		movq	-88(%rbp), %rax
 1571 0086 488B55C0 		movq	-64(%rbp), %rdx
 1572 008a 4889D6   		movq	%rdx, %rsi
 1573 008d 4889C7   		movq	%rax, %rdi
 1574 0090 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE11_
 1574      00
 1575              	.LEHE27:
 1576 0095 488945E0 		movq	%rax, -32(%rbp)
 441:/usr/include/c++/11/bits/vector.tcc ****       __try
 1577              		.loc 8 441 15
 1578 0099 488B45E0 		movq	-32(%rbp), %rax
 1579 009d 488945B8 		movq	%rax, -72(%rbp)
 450:/usr/include/c++/11/bits/vector.tcc **** #if __cplusplus >= 201103L
 1580              		.loc 8 450 20
 1581 00a1 488B55D8 		movq	-40(%rbp), %rdx
 1582 00a5 4889D0   		movq	%rdx, %rax
 1583 00a8 48C1E002 		salq	$2, %rax
 1584 00ac 4801D0   		addq	%rdx, %rax
 1585 00af 48C1E003 		salq	$3, %rax
 1586 00b3 4889C2   		movq	%rax, %rdx
 449:/usr/include/c++/11/bits/vector.tcc **** 				   __new_start + __elems_before,
 1587              		.loc 8 449 28
 1588 00b6 488B45E0 		movq	-32(%rbp), %rax
 1589 00ba 488D0C02 		leaq	(%rdx,%rax), %rcx
 449:/usr/include/c++/11/bits/vector.tcc **** 				   __new_start + __elems_before,
 1590              		.loc 8 449 35
 1591 00be 488B45A8 		movq	-88(%rbp), %rax
 449:/usr/include/c++/11/bits/vector.tcc **** 				   __new_start + __elems_before,
 1592              		.loc 8 449 28
 1593 00c2 488B5598 		movq	-104(%rbp), %rdx
 1594 00c6 4889CE   		movq	%rcx, %rsi
 1595 00c9 4889C7   		movq	%rax, %rdi
 1596              	.LEHB28:
 1597 00cc E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE
 1597      00
 456:/usr/include/c++/11/bits/vector.tcc **** 
 1598              		.loc 8 456 17
 1599 00d1 48C745B8 		movq	$0, -72(%rbp)
 1599      00000000 
 475:/usr/include/c++/11/bits/vector.tcc **** 
 1600              		.loc 8 475 36
 1601 00d9 488B45A8 		movq	-88(%rbp), %rax
 1602 00dd 4889C7   		movq	%rax, %rdi
 1603 00e0 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE19_
 1603      00
 1604 00e5 4889C3   		movq	%rax, %rbx
 474:/usr/include/c++/11/bits/vector.tcc **** 		 __new_start, _M_get_Tp_allocator());
 1605              		.loc 8 474 32
 1606 00e8 488D45A0 		leaq	-96(%rbp), %rax
 1607 00ec 4889C7   		movq	%rax, %rdi
 1608 00ef E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIc
 1608      00
 474:/usr/include/c++/11/bits/vector.tcc **** 		 __new_start, _M_get_Tp_allocator());
 1609              		.loc 8 474 3
 1610 00f4 488B30   		movq	(%rax), %rsi
 1611 00f7 488B55E0 		movq	-32(%rbp), %rdx
 1612 00fb 488B45C8 		movq	-56(%rbp), %rax
 1613 00ff 4889D9   		movq	%rbx, %rcx
 1614 0102 4889C7   		movq	%rax, %rdi
 1615 0105 E8000000 		call	_ZSt34__uninitialized_move_if_noexcept_aIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traits
 1615      00
 1616 010a 488945B8 		movq	%rax, -72(%rbp)
 477:/usr/include/c++/11/bits/vector.tcc **** 
 1617              		.loc 8 477 8
 1618 010e 488345B8 		addq	$40, -72(%rbp)
 1618      28
 482:/usr/include/c++/11/bits/vector.tcc **** 	    }
 1619              		.loc 8 482 37
 1620 0113 488B45A8 		movq	-88(%rbp), %rax
 1621 0117 4889C7   		movq	%rax, %rdi
 1622 011a E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE19_
 1622      00
 1623 011f 4889C3   		movq	%rax, %rbx
 481:/usr/include/c++/11/bits/vector.tcc **** 		 __new_finish, _M_get_Tp_allocator());
 1624              		.loc 8 481 19
 1625 0122 488D45A0 		leaq	-96(%rbp), %rax
 1626 0126 4889C7   		movq	%rax, %rdi
 1627 0129 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIc
 1627      00
 481:/usr/include/c++/11/bits/vector.tcc **** 		 __new_finish, _M_get_Tp_allocator());
 1628              		.loc 8 481 3
 1629 012e 488B00   		movq	(%rax), %rax
 1630 0131 488B55B8 		movq	-72(%rbp), %rdx
 1631 0135 488B75D0 		movq	-48(%rbp), %rsi
 1632 0139 4889D9   		movq	%rbx, %rcx
 1633 013c 4889C7   		movq	%rax, %rdi
 1634 013f E8000000 		call	_ZSt34__uninitialized_move_if_noexcept_aIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traits
 1634      00
 1635              	.LEHE28:
 481:/usr/include/c++/11/bits/vector.tcc **** 		 __new_finish, _M_get_Tp_allocator());
 1636              		.loc 8 481 3 is_stmt 0 discriminator 1
 1637 0144 488945B8 		movq	%rax, -72(%rbp)
 498:/usr/include/c++/11/bits/vector.tcc ****       _GLIBCXX_ASAN_ANNOTATE_REINIT;
 1638              		.loc 8 498 62 is_stmt 1 discriminator 1
 1639 0148 488B45A8 		movq	-88(%rbp), %rax
 1640 014c 4889C7   		movq	%rax, %rdi
 1641 014f E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE19_
 1641      00
 1642 0154 4889C2   		movq	%rax, %rdx
 498:/usr/include/c++/11/bits/vector.tcc ****       _GLIBCXX_ASAN_ANNOTATE_REINIT;
 1643              		.loc 8 498 15 discriminator 1
 1644 0157 488B4DD0 		movq	-48(%rbp), %rcx
 1645 015b 488B45C8 		movq	-56(%rbp), %rax
 1646 015f 4889CE   		movq	%rcx, %rsi
 1647 0162 4889C7   		movq	%rax, %rdi
 1648              	.LEHB29:
 1649 0165 E8000000 		call	_ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_EvT_S9_RSaIT0
 1649      00
 500:/usr/include/c++/11/bits/vector.tcc **** 		    this->_M_impl._M_end_of_storage - __old_start);
 1650              		.loc 8 500 20 discriminator 1
 1651 016a 488B45A8 		movq	-88(%rbp), %rax
 501:/usr/include/c++/11/bits/vector.tcc ****       this->_M_impl._M_start = __new_start;
 1652              		.loc 8 501 21 discriminator 1
 1653 016e 488B55A8 		movq	-88(%rbp), %rdx
 1654 0172 488B5210 		movq	16(%rdx), %rdx
 501:/usr/include/c++/11/bits/vector.tcc ****       this->_M_impl._M_start = __new_start;
 1655              		.loc 8 501 39 discriminator 1
 1656 0176 482B55C8 		subq	-56(%rbp), %rdx
 1657 017a 4889D1   		movq	%rdx, %rcx
 1658 017d 48C1F903 		sarq	$3, %rcx
 1659 0181 48BACDCC 		movabsq	$-3689348814741910323, %rdx
 1659      CCCCCCCC 
 1659      CCCC
 1660 018b 480FAFD1 		imulq	%rcx, %rdx
 500:/usr/include/c++/11/bits/vector.tcc **** 		    this->_M_impl._M_end_of_storage - __old_start);
 1661              		.loc 8 500 20 discriminator 1
 1662 018f 488B4DC8 		movq	-56(%rbp), %rcx
 1663 0193 4889CE   		movq	%rcx, %rsi
 1664 0196 4889C7   		movq	%rax, %rdi
 1665 0199 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE13_
 1665      00
 1666              	.LEHE29:
 502:/usr/include/c++/11/bits/vector.tcc ****       this->_M_impl._M_finish = __new_finish;
 1667              		.loc 8 502 30 discriminator 1
 1668 019e 488B45A8 		movq	-88(%rbp), %rax
 1669 01a2 488B55E0 		movq	-32(%rbp), %rdx
 1670 01a6 488910   		movq	%rdx, (%rax)
 503:/usr/include/c++/11/bits/vector.tcc ****       this->_M_impl._M_end_of_storage = __new_start + __len;
 1671              		.loc 8 503 31 discriminator 1
 1672 01a9 488B45A8 		movq	-88(%rbp), %rax
 1673 01ad 488B55B8 		movq	-72(%rbp), %rdx
 1674 01b1 48895008 		movq	%rdx, 8(%rax)
 504:/usr/include/c++/11/bits/vector.tcc ****     }
 1675              		.loc 8 504 53 discriminator 1
 1676 01b5 488B55C0 		movq	-64(%rbp), %rdx
 1677 01b9 4889D0   		movq	%rdx, %rax
 1678 01bc 48C1E002 		salq	$2, %rax
 1679 01c0 4801D0   		addq	%rdx, %rax
 1680 01c3 48C1E003 		salq	$3, %rax
 1681 01c7 4889C2   		movq	%rax, %rdx
 1682 01ca 488B45E0 		movq	-32(%rbp), %rax
 1683 01ce 4801C2   		addq	%rax, %rdx
 504:/usr/include/c++/11/bits/vector.tcc ****     }
 1684              		.loc 8 504 39 discriminator 1
 1685 01d1 488B45A8 		movq	-88(%rbp), %rax
 1686 01d5 48895010 		movq	%rdx, 16(%rax)
 1687              		.loc 8 505 5 discriminator 1
 1688 01d9 90       		nop
 1689 01da 488B45E8 		movq	-24(%rbp), %rax
 1690 01de 64482B04 		subq	%fs:40, %rax
 1690      25280000 
 1690      00
 1691 01e7 0F849F00 		je	.L78
 1691      0000
 1692 01ed E9950000 		jmp	.L81
 1692      00
 1693              	.L79:
 1694 01f2 F30F1EFA 		endbr64
 485:/usr/include/c++/11/bits/vector.tcc **** 	{
 1695              		.loc 8 485 7
 1696 01f6 4889C7   		movq	%rax, %rdi
 1697 01f9 E8000000 		call	__cxa_begin_catch@PLT
 1697      00
 487:/usr/include/c++/11/bits/vector.tcc **** 	    _Alloc_traits::destroy(this->_M_impl,
 1698              		.loc 8 487 4
 1699 01fe 48837DB8 		cmpq	$0, -72(%rbp)
 1699      00
 1700 0203 752D     		jne	.L75
 489:/usr/include/c++/11/bits/vector.tcc **** 	  else
 1701              		.loc 8 489 20
 1702 0205 488B55D8 		movq	-40(%rbp), %rdx
 1703 0209 4889D0   		movq	%rdx, %rax
 1704 020c 48C1E002 		salq	$2, %rax
 1705 0210 4801D0   		addq	%rdx, %rax
 1706 0213 48C1E003 		salq	$3, %rax
 1707 0217 4889C2   		movq	%rax, %rdx
 488:/usr/include/c++/11/bits/vector.tcc **** 				   __new_start + __elems_before);
 1708              		.loc 8 488 28
 1709 021a 488B45E0 		movq	-32(%rbp), %rax
 1710 021e 4801C2   		addq	%rax, %rdx
 488:/usr/include/c++/11/bits/vector.tcc **** 				   __new_start + __elems_before);
 1711              		.loc 8 488 35
 1712 0221 488B45A8 		movq	-88(%rbp), %rax
 488:/usr/include/c++/11/bits/vector.tcc **** 				   __new_start + __elems_before);
 1713              		.loc 8 488 28
 1714 0225 4889D6   		movq	%rdx, %rsi
 1715 0228 4889C7   		movq	%rax, %rdi
 1716              	.LEHB30:
 1717 022b E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE
 1717      00
 1718 0230 EB22     		jmp	.L76
 1719              	.L75:
 491:/usr/include/c++/11/bits/vector.tcc **** 	  _M_deallocate(__new_start, __len);
 1720              		.loc 8 491 66
 1721 0232 488B45A8 		movq	-88(%rbp), %rax
 1722 0236 4889C7   		movq	%rax, %rdi
 1723 0239 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE19_
 1723      00
 1724 023e 4889C2   		movq	%rax, %rdx
 491:/usr/include/c++/11/bits/vector.tcc **** 	  _M_deallocate(__new_start, __len);
 1725              		.loc 8 491 19
 1726 0241 488B4DB8 		movq	-72(%rbp), %rcx
 1727 0245 488B45E0 		movq	-32(%rbp), %rax
 1728 0249 4889CE   		movq	%rcx, %rsi
 1729 024c 4889C7   		movq	%rax, %rdi
 1730 024f E8000000 		call	_ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_EvT_S9_RSaIT0
 1730      00
 1731              	.L76:
 492:/usr/include/c++/11/bits/vector.tcc **** 	  __throw_exception_again;
 1732              		.loc 8 492 17
 1733 0254 488B45A8 		movq	-88(%rbp), %rax
 1734 0258 488B55C0 		movq	-64(%rbp), %rdx
 1735 025c 488B4DE0 		movq	-32(%rbp), %rcx
 1736 0260 4889CE   		movq	%rcx, %rsi
 1737 0263 4889C7   		movq	%rax, %rdi
 1738 0266 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE13_
 1738      00
 493:/usr/include/c++/11/bits/vector.tcc **** 	}
 1739              		.loc 8 493 4
 1740 026b E8000000 		call	__cxa_rethrow@PLT
 1740      00
 1741              	.LEHE30:
 1742              	.L80:
 1743 0270 F30F1EFA 		endbr64
 485:/usr/include/c++/11/bits/vector.tcc **** 	{
 1744              		.loc 8 485 7
 1745 0274 4889C3   		movq	%rax, %rbx
 1746 0277 E8000000 		call	__cxa_end_catch@PLT
 1746      00
 1747 027c 4889D8   		movq	%rbx, %rax
 1748 027f 4889C7   		movq	%rax, %rdi
 1749              	.LEHB31:
 1750 0282 E8000000 		call	_Unwind_Resume@PLT
 1750      00
 1751              	.LEHE31:
 1752              	.L81:
 1753              		.loc 8 505 5
 1754 0287 E8000000 		call	__stack_chk_fail@PLT
 1754      00
 1755              	.L78:
 1756 028c 488B5DF8 		movq	-8(%rbp), %rbx
 1757 0290 C9       		leave
 1758              		.cfi_def_cfa 7, 8
 1759 0291 C3       		ret
 1760              		.cfi_endproc
 1761              	.LFE992:
 1762              		.section	.gcc_except_table
 1763              		.align 4
 1764              	.LLSDA992:
 1765 008c FF       		.byte	0xff
 1766 008d 9B       		.byte	0x9b
 1767 008e 25       		.uleb128 .LLSDATT992-.LLSDATTD992
 1768              	.LLSDATTD992:
 1769 008f 01       		.byte	0x1
 1770 0090 1A       		.uleb128 .LLSDACSE992-.LLSDACSB992
 1771              	.LLSDACSB992:
 1772 0091 3B       		.uleb128 .LEHB27-.LFB992
 1773 0092 5A       		.uleb128 .LEHE27-.LEHB27
 1774 0093 00       		.uleb128 0
 1775 0094 00       		.uleb128 0
 1776 0095 CC01     		.uleb128 .LEHB28-.LFB992
 1777 0097 78       		.uleb128 .LEHE28-.LEHB28
 1778 0098 F203     		.uleb128 .L79-.LFB992
 1779 009a 01       		.uleb128 0x1
 1780 009b E502     		.uleb128 .LEHB29-.LFB992
 1781 009d 39       		.uleb128 .LEHE29-.LEHB29
 1782 009e 00       		.uleb128 0
 1783 009f 00       		.uleb128 0
 1784 00a0 AB04     		.uleb128 .LEHB30-.LFB992
 1785 00a2 45       		.uleb128 .LEHE30-.LEHB30
 1786 00a3 F004     		.uleb128 .L80-.LFB992
 1787 00a5 00       		.uleb128 0
 1788 00a6 8205     		.uleb128 .LEHB31-.LFB992
 1789 00a8 05       		.uleb128 .LEHE31-.LEHB31
 1790 00a9 00       		.uleb128 0
 1791 00aa 00       		.uleb128 0
 1792              	.LLSDACSE992:
 1793 00ab 01       		.byte	0x1
 1794 00ac 00       		.byte	0
 1795 00ad 000000   		.align 4
 1796 00b0 00000000 		.long	0
 1797              	
 1798              	.LLSDATT992:
 1799              		.section	.text._ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE
 1801              		.section	.text._ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE
 1802              		.align 2
 1803              		.weak	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE3endEv
 1805              	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE3endEv:
 1806              	.LFB993:
 829:/usr/include/c++/11/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 1807              		.loc 5 829 7
 1808              		.cfi_startproc
 1809 0000 F30F1EFA 		endbr64
 1810 0004 55       		pushq	%rbp
 1811              		.cfi_def_cfa_offset 16
 1812              		.cfi_offset 6, -16
 1813 0005 4889E5   		movq	%rsp, %rbp
 1814              		.cfi_def_cfa_register 6
 1815 0008 4883EC20 		subq	$32, %rsp
 1816 000c 48897DE8 		movq	%rdi, -24(%rbp)
 829:/usr/include/c++/11/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 1817              		.loc 5 829 7
 1818 0010 64488B04 		movq	%fs:40, %rax
 1818      25280000 
 1818      00
 1819 0019 488945F8 		movq	%rax, -8(%rbp)
 1820 001d 31C0     		xorl	%eax, %eax
 830:/usr/include/c++/11/bits/stl_vector.h **** 
 1821              		.loc 5 830 39
 1822 001f 488B45E8 		movq	-24(%rbp), %rax
 1823 0023 488D5008 		leaq	8(%rax), %rdx
 830:/usr/include/c++/11/bits/stl_vector.h **** 
 1824              		.loc 5 830 16
 1825 0027 488D45F0 		leaq	-16(%rbp), %rax
 1826 002b 4889D6   		movq	%rdx, %rsi
 1827 002e 4889C7   		movq	%rax, %rdi
 1828 0031 E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcE
 1828      00
 830:/usr/include/c++/11/bits/stl_vector.h **** 
 1829              		.loc 5 830 48
 1830 0036 488B45F0 		movq	-16(%rbp), %rax
 830:/usr/include/c++/11/bits/stl_vector.h **** 
 1831              		.loc 5 830 51
 1832 003a 488B55F8 		movq	-8(%rbp), %rdx
 1833 003e 64482B14 		subq	%fs:40, %rdx
 1833      25280000 
 1833      00
 1834 0047 7405     		je	.L84
 1835 0049 E8000000 		call	__stack_chk_fail@PLT
 1835      00
 1836              	.L84:
 1837 004e C9       		leave
 1838              		.cfi_def_cfa 7, 8
 1839 004f C3       		ret
 1840              		.cfi_endproc
 1841              	.LFE993:
 1843              		.section	.text._ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev,"axG",@pr
 1844              		.align 2
 1845              		.weak	_ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev
 1847              	_ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev:
 1848              	.LFB998:
 1849              		.file 10 "/usr/include/c++/11/bits/allocator.h"
   1:/usr/include/c++/11/bits/allocator.h **** // Allocators -*- C++ -*-
   2:/usr/include/c++/11/bits/allocator.h **** 
   3:/usr/include/c++/11/bits/allocator.h **** // Copyright (C) 2001-2021 Free Software Foundation, Inc.
   4:/usr/include/c++/11/bits/allocator.h **** //
   5:/usr/include/c++/11/bits/allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/11/bits/allocator.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/11/bits/allocator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/11/bits/allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/11/bits/allocator.h **** // any later version.
  10:/usr/include/c++/11/bits/allocator.h **** 
  11:/usr/include/c++/11/bits/allocator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/11/bits/allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/11/bits/allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/11/bits/allocator.h **** // GNU General Public License for more details.
  15:/usr/include/c++/11/bits/allocator.h **** 
  16:/usr/include/c++/11/bits/allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/11/bits/allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/11/bits/allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/11/bits/allocator.h **** 
  20:/usr/include/c++/11/bits/allocator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/11/bits/allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/11/bits/allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/11/bits/allocator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/11/bits/allocator.h **** 
  25:/usr/include/c++/11/bits/allocator.h **** /*
  26:/usr/include/c++/11/bits/allocator.h ****  * Copyright (c) 1996-1997
  27:/usr/include/c++/11/bits/allocator.h ****  * Silicon Graphics Computer Systems, Inc.
  28:/usr/include/c++/11/bits/allocator.h ****  *
  29:/usr/include/c++/11/bits/allocator.h ****  * Permission to use, copy, modify, distribute and sell this software
  30:/usr/include/c++/11/bits/allocator.h ****  * and its documentation for any purpose is hereby granted without fee,
  31:/usr/include/c++/11/bits/allocator.h ****  * provided that the above copyright notice appear in all copies and
  32:/usr/include/c++/11/bits/allocator.h ****  * that both that copyright notice and this permission notice appear
  33:/usr/include/c++/11/bits/allocator.h ****  * in supporting documentation.  Silicon Graphics makes no
  34:/usr/include/c++/11/bits/allocator.h ****  * representations about the suitability of this software for any
  35:/usr/include/c++/11/bits/allocator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  36:/usr/include/c++/11/bits/allocator.h ****  */
  37:/usr/include/c++/11/bits/allocator.h **** 
  38:/usr/include/c++/11/bits/allocator.h **** /** @file bits/allocator.h
  39:/usr/include/c++/11/bits/allocator.h ****  *  This is an internal header file, included by other library headers.
  40:/usr/include/c++/11/bits/allocator.h ****  *  Do not attempt to use it directly. @headername{memory}
  41:/usr/include/c++/11/bits/allocator.h ****  */
  42:/usr/include/c++/11/bits/allocator.h **** 
  43:/usr/include/c++/11/bits/allocator.h **** #ifndef _ALLOCATOR_H
  44:/usr/include/c++/11/bits/allocator.h **** #define _ALLOCATOR_H 1
  45:/usr/include/c++/11/bits/allocator.h **** 
  46:/usr/include/c++/11/bits/allocator.h **** #include <bits/c++allocator.h> // Define the base class to std::allocator.
  47:/usr/include/c++/11/bits/allocator.h **** #include <bits/memoryfwd.h>
  48:/usr/include/c++/11/bits/allocator.h **** #if __cplusplus >= 201103L
  49:/usr/include/c++/11/bits/allocator.h **** #include <type_traits>
  50:/usr/include/c++/11/bits/allocator.h **** #endif
  51:/usr/include/c++/11/bits/allocator.h **** 
  52:/usr/include/c++/11/bits/allocator.h **** #define __cpp_lib_incomplete_container_elements 201505
  53:/usr/include/c++/11/bits/allocator.h **** 
  54:/usr/include/c++/11/bits/allocator.h **** namespace std _GLIBCXX_VISIBILITY(default)
  55:/usr/include/c++/11/bits/allocator.h **** {
  56:/usr/include/c++/11/bits/allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  57:/usr/include/c++/11/bits/allocator.h **** 
  58:/usr/include/c++/11/bits/allocator.h ****   /**
  59:/usr/include/c++/11/bits/allocator.h ****    *  @addtogroup allocators
  60:/usr/include/c++/11/bits/allocator.h ****    *  @{
  61:/usr/include/c++/11/bits/allocator.h ****    */
  62:/usr/include/c++/11/bits/allocator.h **** 
  63:/usr/include/c++/11/bits/allocator.h ****   // Since C++20 the primary template should be used for allocator<void>,
  64:/usr/include/c++/11/bits/allocator.h ****   // but then it would have a non-trivial default ctor and dtor for C++20,
  65:/usr/include/c++/11/bits/allocator.h ****   // but trivial for C++98-17, which would be an ABI incompatibiliy between
  66:/usr/include/c++/11/bits/allocator.h ****   // different standard dialects. So C++20 still uses the allocator<void>
  67:/usr/include/c++/11/bits/allocator.h ****   // explicit specialization, with the historical ABI properties, but with
  68:/usr/include/c++/11/bits/allocator.h ****   // the same members that are present in the primary template.
  69:/usr/include/c++/11/bits/allocator.h **** 
  70:/usr/include/c++/11/bits/allocator.h ****   /// allocator<void> specialization.
  71:/usr/include/c++/11/bits/allocator.h ****   template<>
  72:/usr/include/c++/11/bits/allocator.h ****     class allocator<void>
  73:/usr/include/c++/11/bits/allocator.h ****     {
  74:/usr/include/c++/11/bits/allocator.h ****     public:
  75:/usr/include/c++/11/bits/allocator.h ****       typedef void        value_type;
  76:/usr/include/c++/11/bits/allocator.h ****       typedef size_t      size_type;
  77:/usr/include/c++/11/bits/allocator.h ****       typedef ptrdiff_t   difference_type;
  78:/usr/include/c++/11/bits/allocator.h **** 
  79:/usr/include/c++/11/bits/allocator.h **** #if __cplusplus <= 201703L
  80:/usr/include/c++/11/bits/allocator.h ****       // These were removed for C++20, allocator_traits does the right thing.
  81:/usr/include/c++/11/bits/allocator.h ****       typedef void*       pointer;
  82:/usr/include/c++/11/bits/allocator.h ****       typedef const void* const_pointer;
  83:/usr/include/c++/11/bits/allocator.h **** 
  84:/usr/include/c++/11/bits/allocator.h ****       template<typename _Tp1>
  85:/usr/include/c++/11/bits/allocator.h **** 	struct rebind
  86:/usr/include/c++/11/bits/allocator.h **** 	{ typedef allocator<_Tp1> other; };
  87:/usr/include/c++/11/bits/allocator.h **** #endif
  88:/usr/include/c++/11/bits/allocator.h **** 
  89:/usr/include/c++/11/bits/allocator.h **** #if __cplusplus >= 201103L
  90:/usr/include/c++/11/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  91:/usr/include/c++/11/bits/allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
  92:/usr/include/c++/11/bits/allocator.h ****       using propagate_on_container_move_assignment = true_type;
  93:/usr/include/c++/11/bits/allocator.h **** 
  94:/usr/include/c++/11/bits/allocator.h ****       using is_always_equal
  95:/usr/include/c++/11/bits/allocator.h **** 	_GLIBCXX20_DEPRECATED_SUGGEST("std::allocator_traits::is_always_equal")
  96:/usr/include/c++/11/bits/allocator.h **** 	= true_type;
  97:/usr/include/c++/11/bits/allocator.h **** 
  98:/usr/include/c++/11/bits/allocator.h **** #if __cplusplus >= 202002L
  99:/usr/include/c++/11/bits/allocator.h ****       // As noted above, these members are present for C++20 to provide the
 100:/usr/include/c++/11/bits/allocator.h ****       // same API as the primary template, but still trivial as in pre-C++20.
 101:/usr/include/c++/11/bits/allocator.h ****       allocator() = default;
 102:/usr/include/c++/11/bits/allocator.h ****       ~allocator() = default;
 103:/usr/include/c++/11/bits/allocator.h **** 
 104:/usr/include/c++/11/bits/allocator.h ****       template<typename _Up>
 105:/usr/include/c++/11/bits/allocator.h **** 	constexpr
 106:/usr/include/c++/11/bits/allocator.h **** 	allocator(const allocator<_Up>&) noexcept { }
 107:/usr/include/c++/11/bits/allocator.h **** 
 108:/usr/include/c++/11/bits/allocator.h ****       // No allocate member because it's ill-formed by LWG 3307.
 109:/usr/include/c++/11/bits/allocator.h ****       // No deallocate member because it would be undefined to call it
 110:/usr/include/c++/11/bits/allocator.h ****       // with any pointer which wasn't obtained from allocate.
 111:/usr/include/c++/11/bits/allocator.h **** #endif // C++20
 112:/usr/include/c++/11/bits/allocator.h **** #endif // C++11
 113:/usr/include/c++/11/bits/allocator.h ****     };
 114:/usr/include/c++/11/bits/allocator.h **** 
 115:/usr/include/c++/11/bits/allocator.h ****   /**
 116:/usr/include/c++/11/bits/allocator.h ****    * @brief  The @a standard allocator, as per C++03 [20.4.1].
 117:/usr/include/c++/11/bits/allocator.h ****    *
 118:/usr/include/c++/11/bits/allocator.h ****    *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/memory.html#std.util.memory.allocator
 119:/usr/include/c++/11/bits/allocator.h ****    *  for further details.
 120:/usr/include/c++/11/bits/allocator.h ****    *
 121:/usr/include/c++/11/bits/allocator.h ****    *  @tparam  _Tp  Type of allocated object.
 122:/usr/include/c++/11/bits/allocator.h ****    */
 123:/usr/include/c++/11/bits/allocator.h ****   template<typename _Tp>
 124:/usr/include/c++/11/bits/allocator.h ****     class allocator : public __allocator_base<_Tp>
 125:/usr/include/c++/11/bits/allocator.h ****     {
 126:/usr/include/c++/11/bits/allocator.h ****     public:
 127:/usr/include/c++/11/bits/allocator.h ****       typedef _Tp        value_type;
 128:/usr/include/c++/11/bits/allocator.h ****       typedef size_t     size_type;
 129:/usr/include/c++/11/bits/allocator.h ****       typedef ptrdiff_t  difference_type;
 130:/usr/include/c++/11/bits/allocator.h **** 
 131:/usr/include/c++/11/bits/allocator.h **** #if __cplusplus <= 201703L
 132:/usr/include/c++/11/bits/allocator.h ****       // These were removed for C++20.
 133:/usr/include/c++/11/bits/allocator.h ****       typedef _Tp*       pointer;
 134:/usr/include/c++/11/bits/allocator.h ****       typedef const _Tp* const_pointer;
 135:/usr/include/c++/11/bits/allocator.h ****       typedef _Tp&       reference;
 136:/usr/include/c++/11/bits/allocator.h ****       typedef const _Tp& const_reference;
 137:/usr/include/c++/11/bits/allocator.h **** 
 138:/usr/include/c++/11/bits/allocator.h ****       template<typename _Tp1>
 139:/usr/include/c++/11/bits/allocator.h **** 	struct rebind
 140:/usr/include/c++/11/bits/allocator.h **** 	{ typedef allocator<_Tp1> other; };
 141:/usr/include/c++/11/bits/allocator.h **** #endif
 142:/usr/include/c++/11/bits/allocator.h **** 
 143:/usr/include/c++/11/bits/allocator.h **** #if __cplusplus >= 201103L
 144:/usr/include/c++/11/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 145:/usr/include/c++/11/bits/allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
 146:/usr/include/c++/11/bits/allocator.h ****       using propagate_on_container_move_assignment = true_type;
 147:/usr/include/c++/11/bits/allocator.h **** 
 148:/usr/include/c++/11/bits/allocator.h ****       using is_always_equal
 149:/usr/include/c++/11/bits/allocator.h **** 	_GLIBCXX20_DEPRECATED_SUGGEST("std::allocator_traits::is_always_equal")
 150:/usr/include/c++/11/bits/allocator.h **** 	= true_type;
 151:/usr/include/c++/11/bits/allocator.h **** #endif
 152:/usr/include/c++/11/bits/allocator.h **** 
 153:/usr/include/c++/11/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 154:/usr/include/c++/11/bits/allocator.h ****       // 3035. std::allocator's constructors should be constexpr
 155:/usr/include/c++/11/bits/allocator.h ****       _GLIBCXX20_CONSTEXPR
 156:/usr/include/c++/11/bits/allocator.h ****       allocator() _GLIBCXX_NOTHROW { }
 157:/usr/include/c++/11/bits/allocator.h **** 
 158:/usr/include/c++/11/bits/allocator.h ****       _GLIBCXX20_CONSTEXPR
 159:/usr/include/c++/11/bits/allocator.h ****       allocator(const allocator& __a) _GLIBCXX_NOTHROW
 160:/usr/include/c++/11/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 161:/usr/include/c++/11/bits/allocator.h **** 
 162:/usr/include/c++/11/bits/allocator.h **** #if __cplusplus >= 201103L
 163:/usr/include/c++/11/bits/allocator.h ****       // Avoid implicit deprecation.
 164:/usr/include/c++/11/bits/allocator.h ****       allocator& operator=(const allocator&) = default;
 165:/usr/include/c++/11/bits/allocator.h **** #endif
 166:/usr/include/c++/11/bits/allocator.h **** 
 167:/usr/include/c++/11/bits/allocator.h ****       template<typename _Tp1>
 168:/usr/include/c++/11/bits/allocator.h **** 	_GLIBCXX20_CONSTEXPR
 169:/usr/include/c++/11/bits/allocator.h **** 	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 170:/usr/include/c++/11/bits/allocator.h **** 
 171:/usr/include/c++/11/bits/allocator.h **** #if __cpp_constexpr_dynamic_alloc
 172:/usr/include/c++/11/bits/allocator.h ****       constexpr
 173:/usr/include/c++/11/bits/allocator.h **** #endif
 174:/usr/include/c++/11/bits/allocator.h ****       ~allocator() _GLIBCXX_NOTHROW { }
 1850              		.loc 10 174 7
 1851              		.cfi_startproc
 1852 0000 F30F1EFA 		endbr64
 1853 0004 55       		pushq	%rbp
 1854              		.cfi_def_cfa_offset 16
 1855              		.cfi_offset 6, -16
 1856 0005 4889E5   		movq	%rsp, %rbp
 1857              		.cfi_def_cfa_register 6
 1858 0008 4883EC10 		subq	$16, %rsp
 1859 000c 48897DF8 		movq	%rdi, -8(%rbp)
 1860              	.LBB11:
 1861              		.loc 10 174 39
 1862 0010 488B45F8 		movq	-8(%rbp), %rax
 1863 0014 4889C7   		movq	%rax, %rdi
 1864 0017 E8000000 		call	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED
 1864      00
 1865              	.LBE11:
 1866 001c 90       		nop
 1867 001d C9       		leave
 1868              		.cfi_def_cfa 7, 8
 1869 001e C3       		ret
 1870              		.cfi_endproc
 1871              	.LFE998:
 1873              		.weak	_ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED1Ev
 1874              		.set	_ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED1Ev,_ZNSaISt4pairIiNSt7
 1875              		.section	.text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES
 1876              		.align 2
 1877              		.weak	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE13
 1879              	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE13_M_deal
 1880              	.LFB1000:
 350:/usr/include/c++/11/bits/stl_vector.h ****       {
 1881              		.loc 5 350 7
 1882              		.cfi_startproc
 1883 0000 F30F1EFA 		endbr64
 1884 0004 55       		pushq	%rbp
 1885              		.cfi_def_cfa_offset 16
 1886              		.cfi_offset 6, -16
 1887 0005 4889E5   		movq	%rsp, %rbp
 1888              		.cfi_def_cfa_register 6
 1889 0008 4883EC20 		subq	$32, %rsp
 1890 000c 48897DF8 		movq	%rdi, -8(%rbp)
 1891 0010 488975F0 		movq	%rsi, -16(%rbp)
 1892 0014 488955E8 		movq	%rdx, -24(%rbp)
 353:/usr/include/c++/11/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 1893              		.loc 5 353 2
 1894 0018 48837DF0 		cmpq	$0, -16(%rbp)
 1894      00
 1895 001d 7417     		je	.L88
 354:/usr/include/c++/11/bits/stl_vector.h ****       }
 1896              		.loc 5 354 20
 1897 001f 488B45F8 		movq	-8(%rbp), %rax
 354:/usr/include/c++/11/bits/stl_vector.h ****       }
 1898              		.loc 5 354 19
 1899 0023 488B55E8 		movq	-24(%rbp), %rdx
 1900 0027 488B4DF0 		movq	-16(%rbp), %rcx
 1901 002b 4889CE   		movq	%rcx, %rsi
 1902 002e 4889C7   		movq	%rax, %rdi
 1903 0031 E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE
 1903      00
 1904              	.L88:
 355:/usr/include/c++/11/bits/stl_vector.h **** 
 1905              		.loc 5 355 7
 1906 0036 90       		nop
 1907 0037 C9       		leave
 1908              		.cfi_def_cfa 7, 8
 1909 0038 C3       		ret
 1910              		.cfi_endproc
 1911              	.LFE1000:
 1913              		.section	.text._ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9
 1914              		.weak	_ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_
 1916              	_ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_:
 1917              	.LFB1001:
 1918              		.file 11 "/usr/include/c++/11/bits/stl_construct.h"
   1:/usr/include/c++/11/bits/stl_construct.h **** // nonstandard construct and destroy functions -*- C++ -*-
   2:/usr/include/c++/11/bits/stl_construct.h **** 
   3:/usr/include/c++/11/bits/stl_construct.h **** // Copyright (C) 2001-2021 Free Software Foundation, Inc.
   4:/usr/include/c++/11/bits/stl_construct.h **** //
   5:/usr/include/c++/11/bits/stl_construct.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/11/bits/stl_construct.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/11/bits/stl_construct.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/11/bits/stl_construct.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/11/bits/stl_construct.h **** // any later version.
  10:/usr/include/c++/11/bits/stl_construct.h **** 
  11:/usr/include/c++/11/bits/stl_construct.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/11/bits/stl_construct.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/11/bits/stl_construct.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/11/bits/stl_construct.h **** // GNU General Public License for more details.
  15:/usr/include/c++/11/bits/stl_construct.h **** 
  16:/usr/include/c++/11/bits/stl_construct.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/11/bits/stl_construct.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/11/bits/stl_construct.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/11/bits/stl_construct.h **** 
  20:/usr/include/c++/11/bits/stl_construct.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/11/bits/stl_construct.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/11/bits/stl_construct.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/11/bits/stl_construct.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/11/bits/stl_construct.h **** 
  25:/usr/include/c++/11/bits/stl_construct.h **** /*
  26:/usr/include/c++/11/bits/stl_construct.h ****  *
  27:/usr/include/c++/11/bits/stl_construct.h ****  * Copyright (c) 1994
  28:/usr/include/c++/11/bits/stl_construct.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/11/bits/stl_construct.h ****  *
  30:/usr/include/c++/11/bits/stl_construct.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/11/bits/stl_construct.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/11/bits/stl_construct.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/11/bits/stl_construct.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/11/bits/stl_construct.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/11/bits/stl_construct.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/11/bits/stl_construct.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/11/bits/stl_construct.h ****  *
  38:/usr/include/c++/11/bits/stl_construct.h ****  *
  39:/usr/include/c++/11/bits/stl_construct.h ****  * Copyright (c) 1996,1997
  40:/usr/include/c++/11/bits/stl_construct.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/11/bits/stl_construct.h ****  *
  42:/usr/include/c++/11/bits/stl_construct.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/11/bits/stl_construct.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/11/bits/stl_construct.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/11/bits/stl_construct.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/11/bits/stl_construct.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/11/bits/stl_construct.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/11/bits/stl_construct.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/11/bits/stl_construct.h ****  */
  50:/usr/include/c++/11/bits/stl_construct.h **** 
  51:/usr/include/c++/11/bits/stl_construct.h **** /** @file bits/stl_construct.h
  52:/usr/include/c++/11/bits/stl_construct.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/11/bits/stl_construct.h ****  *  Do not attempt to use it directly. @headername{memory}
  54:/usr/include/c++/11/bits/stl_construct.h ****  */
  55:/usr/include/c++/11/bits/stl_construct.h **** 
  56:/usr/include/c++/11/bits/stl_construct.h **** #ifndef _STL_CONSTRUCT_H
  57:/usr/include/c++/11/bits/stl_construct.h **** #define _STL_CONSTRUCT_H 1
  58:/usr/include/c++/11/bits/stl_construct.h **** 
  59:/usr/include/c++/11/bits/stl_construct.h **** #include <new>
  60:/usr/include/c++/11/bits/stl_construct.h **** #include <bits/move.h>
  61:/usr/include/c++/11/bits/stl_construct.h **** #include <bits/stl_iterator_base_types.h> // for iterator_traits
  62:/usr/include/c++/11/bits/stl_construct.h **** #include <bits/stl_iterator_base_funcs.h> // for advance
  63:/usr/include/c++/11/bits/stl_construct.h **** 
  64:/usr/include/c++/11/bits/stl_construct.h **** /* This file provides the C++17 functions std::destroy_at, std::destroy, and
  65:/usr/include/c++/11/bits/stl_construct.h ****  * std::destroy_n, and the C++20 function std::construct_at.
  66:/usr/include/c++/11/bits/stl_construct.h ****  * It also provides std::_Construct, std::_Destroy,and std::_Destroy_n functions
  67:/usr/include/c++/11/bits/stl_construct.h ****  * which are defined in all standard modes and so can be used in C++98-14 code.
  68:/usr/include/c++/11/bits/stl_construct.h ****  * The _Destroy functions will dispatch to destroy_at during constant
  69:/usr/include/c++/11/bits/stl_construct.h ****  * evaluation, because calls to that function are intercepted by the compiler
  70:/usr/include/c++/11/bits/stl_construct.h ****  * to allow use in constant expressions.
  71:/usr/include/c++/11/bits/stl_construct.h ****  */
  72:/usr/include/c++/11/bits/stl_construct.h **** 
  73:/usr/include/c++/11/bits/stl_construct.h **** namespace std _GLIBCXX_VISIBILITY(default)
  74:/usr/include/c++/11/bits/stl_construct.h **** {
  75:/usr/include/c++/11/bits/stl_construct.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  76:/usr/include/c++/11/bits/stl_construct.h **** 
  77:/usr/include/c++/11/bits/stl_construct.h **** #if __cplusplus >= 201703L
  78:/usr/include/c++/11/bits/stl_construct.h ****   template <typename _Tp>
  79:/usr/include/c++/11/bits/stl_construct.h ****     _GLIBCXX20_CONSTEXPR inline void
  80:/usr/include/c++/11/bits/stl_construct.h ****     destroy_at(_Tp* __location)
  81:/usr/include/c++/11/bits/stl_construct.h ****     {
  82:/usr/include/c++/11/bits/stl_construct.h ****       if constexpr (__cplusplus > 201703L && is_array_v<_Tp>)
  83:/usr/include/c++/11/bits/stl_construct.h **** 	{
  84:/usr/include/c++/11/bits/stl_construct.h **** 	  for (auto& __x : *__location)
  85:/usr/include/c++/11/bits/stl_construct.h **** 	    std::destroy_at(std::__addressof(__x));
  86:/usr/include/c++/11/bits/stl_construct.h **** 	}
  87:/usr/include/c++/11/bits/stl_construct.h ****       else
  88:/usr/include/c++/11/bits/stl_construct.h **** 	__location->~_Tp();
  89:/usr/include/c++/11/bits/stl_construct.h ****     }
  90:/usr/include/c++/11/bits/stl_construct.h **** 
  91:/usr/include/c++/11/bits/stl_construct.h **** #if __cplusplus >= 202002L
  92:/usr/include/c++/11/bits/stl_construct.h ****   template<typename _Tp, typename... _Args>
  93:/usr/include/c++/11/bits/stl_construct.h ****     constexpr auto
  94:/usr/include/c++/11/bits/stl_construct.h ****     construct_at(_Tp* __location, _Args&&... __args)
  95:/usr/include/c++/11/bits/stl_construct.h ****     noexcept(noexcept(::new((void*)0) _Tp(std::declval<_Args>()...)))
  96:/usr/include/c++/11/bits/stl_construct.h ****     -> decltype(::new((void*)0) _Tp(std::declval<_Args>()...))
  97:/usr/include/c++/11/bits/stl_construct.h ****     { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
  98:/usr/include/c++/11/bits/stl_construct.h **** #endif // C++20
  99:/usr/include/c++/11/bits/stl_construct.h **** #endif// C++17
 100:/usr/include/c++/11/bits/stl_construct.h **** 
 101:/usr/include/c++/11/bits/stl_construct.h ****   /**
 102:/usr/include/c++/11/bits/stl_construct.h ****    * Constructs an object in existing memory by invoking an allocated
 103:/usr/include/c++/11/bits/stl_construct.h ****    * object's constructor with an initializer.
 104:/usr/include/c++/11/bits/stl_construct.h ****    */
 105:/usr/include/c++/11/bits/stl_construct.h **** #if __cplusplus >= 201103L
 106:/usr/include/c++/11/bits/stl_construct.h ****   template<typename _Tp, typename... _Args>
 107:/usr/include/c++/11/bits/stl_construct.h ****     _GLIBCXX20_CONSTEXPR
 108:/usr/include/c++/11/bits/stl_construct.h ****     inline void
 109:/usr/include/c++/11/bits/stl_construct.h ****     _Construct(_Tp* __p, _Args&&... __args)
 110:/usr/include/c++/11/bits/stl_construct.h ****     {
 111:/usr/include/c++/11/bits/stl_construct.h **** #if __cplusplus >= 202002L && __has_builtin(__builtin_is_constant_evaluated)
 112:/usr/include/c++/11/bits/stl_construct.h ****       if (__builtin_is_constant_evaluated())
 113:/usr/include/c++/11/bits/stl_construct.h **** 	{
 114:/usr/include/c++/11/bits/stl_construct.h **** 	  // Allow std::_Construct to be used in constant expressions.
 115:/usr/include/c++/11/bits/stl_construct.h **** 	  std::construct_at(__p, std::forward<_Args>(__args)...);
 116:/usr/include/c++/11/bits/stl_construct.h **** 	  return;
 117:/usr/include/c++/11/bits/stl_construct.h **** 	}
 118:/usr/include/c++/11/bits/stl_construct.h **** #endif
 119:/usr/include/c++/11/bits/stl_construct.h ****       ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...);
 120:/usr/include/c++/11/bits/stl_construct.h ****     }
 121:/usr/include/c++/11/bits/stl_construct.h **** #else
 122:/usr/include/c++/11/bits/stl_construct.h ****   template<typename _T1, typename _T2>
 123:/usr/include/c++/11/bits/stl_construct.h ****     inline void
 124:/usr/include/c++/11/bits/stl_construct.h ****     _Construct(_T1* __p, const _T2& __value)
 125:/usr/include/c++/11/bits/stl_construct.h ****     {
 126:/usr/include/c++/11/bits/stl_construct.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 127:/usr/include/c++/11/bits/stl_construct.h ****       // 402. wrong new expression in [some_]allocator::construct
 128:/usr/include/c++/11/bits/stl_construct.h ****       ::new(static_cast<void*>(__p)) _T1(__value);
 129:/usr/include/c++/11/bits/stl_construct.h ****     }
 130:/usr/include/c++/11/bits/stl_construct.h **** #endif
 131:/usr/include/c++/11/bits/stl_construct.h **** 
 132:/usr/include/c++/11/bits/stl_construct.h ****   template<typename _T1>
 133:/usr/include/c++/11/bits/stl_construct.h ****     inline void
 134:/usr/include/c++/11/bits/stl_construct.h ****     _Construct_novalue(_T1* __p)
 135:/usr/include/c++/11/bits/stl_construct.h ****     { ::new(static_cast<void*>(__p)) _T1; }
 136:/usr/include/c++/11/bits/stl_construct.h **** 
 137:/usr/include/c++/11/bits/stl_construct.h ****   template<typename _ForwardIterator>
 138:/usr/include/c++/11/bits/stl_construct.h ****     _GLIBCXX20_CONSTEXPR void
 139:/usr/include/c++/11/bits/stl_construct.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last);
 140:/usr/include/c++/11/bits/stl_construct.h **** 
 141:/usr/include/c++/11/bits/stl_construct.h ****   /**
 142:/usr/include/c++/11/bits/stl_construct.h ****    * Destroy the object pointed to by a pointer type.
 143:/usr/include/c++/11/bits/stl_construct.h ****    */
 144:/usr/include/c++/11/bits/stl_construct.h ****   template<typename _Tp>
 145:/usr/include/c++/11/bits/stl_construct.h ****     _GLIBCXX14_CONSTEXPR inline void
 146:/usr/include/c++/11/bits/stl_construct.h ****     _Destroy(_Tp* __pointer)
 147:/usr/include/c++/11/bits/stl_construct.h ****     {
 148:/usr/include/c++/11/bits/stl_construct.h **** #if __cplusplus > 201703L
 149:/usr/include/c++/11/bits/stl_construct.h ****       std::destroy_at(__pointer);
 150:/usr/include/c++/11/bits/stl_construct.h **** #else
 151:/usr/include/c++/11/bits/stl_construct.h ****       __pointer->~_Tp();
 152:/usr/include/c++/11/bits/stl_construct.h **** #endif
 153:/usr/include/c++/11/bits/stl_construct.h ****     }
 154:/usr/include/c++/11/bits/stl_construct.h **** 
 155:/usr/include/c++/11/bits/stl_construct.h ****   template<bool>
 156:/usr/include/c++/11/bits/stl_construct.h ****     struct _Destroy_aux
 157:/usr/include/c++/11/bits/stl_construct.h ****     {
 158:/usr/include/c++/11/bits/stl_construct.h ****       template<typename _ForwardIterator>
 159:/usr/include/c++/11/bits/stl_construct.h **** 	static _GLIBCXX20_CONSTEXPR void
 160:/usr/include/c++/11/bits/stl_construct.h **** 	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 161:/usr/include/c++/11/bits/stl_construct.h **** 	{
 162:/usr/include/c++/11/bits/stl_construct.h **** 	  for (; __first != __last; ++__first)
 163:/usr/include/c++/11/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 164:/usr/include/c++/11/bits/stl_construct.h **** 	}
 165:/usr/include/c++/11/bits/stl_construct.h ****     };
 166:/usr/include/c++/11/bits/stl_construct.h **** 
 167:/usr/include/c++/11/bits/stl_construct.h ****   template<>
 168:/usr/include/c++/11/bits/stl_construct.h ****     struct _Destroy_aux<true>
 169:/usr/include/c++/11/bits/stl_construct.h ****     {
 170:/usr/include/c++/11/bits/stl_construct.h ****       template<typename _ForwardIterator>
 171:/usr/include/c++/11/bits/stl_construct.h ****         static void
 172:/usr/include/c++/11/bits/stl_construct.h ****         __destroy(_ForwardIterator, _ForwardIterator) { }
 173:/usr/include/c++/11/bits/stl_construct.h ****     };
 174:/usr/include/c++/11/bits/stl_construct.h **** 
 175:/usr/include/c++/11/bits/stl_construct.h ****   /**
 176:/usr/include/c++/11/bits/stl_construct.h ****    * Destroy a range of objects.  If the value_type of the object has
 177:/usr/include/c++/11/bits/stl_construct.h ****    * a trivial destructor, the compiler should optimize all of this
 178:/usr/include/c++/11/bits/stl_construct.h ****    * away, otherwise the objects' destructors must be invoked.
 179:/usr/include/c++/11/bits/stl_construct.h ****    */
 180:/usr/include/c++/11/bits/stl_construct.h ****   template<typename _ForwardIterator>
 181:/usr/include/c++/11/bits/stl_construct.h ****     _GLIBCXX20_CONSTEXPR inline void
 182:/usr/include/c++/11/bits/stl_construct.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 1919              		.loc 11 182 5
 1920              		.cfi_startproc
 1921 0000 F30F1EFA 		endbr64
 1922 0004 55       		pushq	%rbp
 1923              		.cfi_def_cfa_offset 16
 1924              		.cfi_offset 6, -16
 1925 0005 4889E5   		movq	%rsp, %rbp
 1926              		.cfi_def_cfa_register 6
 1927 0008 4883EC10 		subq	$16, %rsp
 1928 000c 48897DF8 		movq	%rdi, -8(%rbp)
 1929 0010 488975F0 		movq	%rsi, -16(%rbp)
 183:/usr/include/c++/11/bits/stl_construct.h ****     {
 184:/usr/include/c++/11/bits/stl_construct.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 185:/usr/include/c++/11/bits/stl_construct.h ****                        _Value_type;
 186:/usr/include/c++/11/bits/stl_construct.h **** #if __cplusplus >= 201103L
 187:/usr/include/c++/11/bits/stl_construct.h ****       // A deleted destructor is trivial, this ensures we reject such types:
 188:/usr/include/c++/11/bits/stl_construct.h ****       static_assert(is_destructible<_Value_type>::value,
 189:/usr/include/c++/11/bits/stl_construct.h **** 		    "value type is destructible");
 190:/usr/include/c++/11/bits/stl_construct.h **** #endif
 191:/usr/include/c++/11/bits/stl_construct.h **** #if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
 192:/usr/include/c++/11/bits/stl_construct.h ****       if (std::is_constant_evaluated())
 193:/usr/include/c++/11/bits/stl_construct.h **** 	return _Destroy_aux<false>::__destroy(__first, __last);
 194:/usr/include/c++/11/bits/stl_construct.h **** #endif
 195:/usr/include/c++/11/bits/stl_construct.h ****       std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
 196:/usr/include/c++/11/bits/stl_construct.h **** 	__destroy(__first, __last);
 1930              		.loc 11 196 11
 1931 0014 488B55F0 		movq	-16(%rbp), %rdx
 1932 0018 488B45F8 		movq	-8(%rbp), %rax
 1933 001c 4889D6   		movq	%rdx, %rsi
 1934 001f 4889C7   		movq	%rax, %rdi
 1935 0022 E8000000 		call	_ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESa
 1935      00
 197:/usr/include/c++/11/bits/stl_construct.h ****     }
 1936              		.loc 11 197 5
 1937 0027 90       		nop
 1938 0028 C9       		leave
 1939              		.cfi_def_cfa 7, 8
 1940 0029 C3       		ret
 1941              		.cfi_endproc
 1942              	.LFE1001:
 1944              		.section	.text._ZN8UnitTest18DeferredTestResultC2ERKS0_,"axG",@progbits,_ZN8UnitTest18DeferredTest
 1945              		.align 2
 1946              		.weak	_ZN8UnitTest18DeferredTestResultC2ERKS0_
 1948              	_ZN8UnitTest18DeferredTestResultC2ERKS0_:
 1949              	.LFB1004:
 1950              		.loc 2 10 8
 1951              		.cfi_startproc
 1952              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 1953              		.cfi_lsda 0x1b,.LLSDA1004
 1954 0000 F30F1EFA 		endbr64
 1955 0004 55       		pushq	%rbp
 1956              		.cfi_def_cfa_offset 16
 1957              		.cfi_offset 6, -16
 1958 0005 4889E5   		movq	%rsp, %rbp
 1959              		.cfi_def_cfa_register 6
 1960 0008 53       		pushq	%rbx
 1961 0009 4883EC18 		subq	$24, %rsp
 1962              		.cfi_offset 3, -24
 1963 000d 48897DE8 		movq	%rdi, -24(%rbp)
 1964 0011 488975E0 		movq	%rsi, -32(%rbp)
 1965              	.LBB12:
 1966              		.loc 2 10 8
 1967 0015 488B45E8 		movq	-24(%rbp), %rax
 1968 0019 488B55E0 		movq	-32(%rbp), %rdx
 1969 001d 4889D6   		movq	%rdx, %rsi
 1970 0020 4889C7   		movq	%rax, %rdi
 1971              	.LEHB32:
 1972 0023 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_@PLT
 1972      00
 1973              	.LEHE32:
 1974 0028 488B45E8 		movq	-24(%rbp), %rax
 1975 002c 4883C020 		addq	$32, %rax
 1976 0030 488B55E0 		movq	-32(%rbp), %rdx
 1977 0034 4883C220 		addq	$32, %rdx
 1978 0038 4889D6   		movq	%rdx, %rsi
 1979 003b 4889C7   		movq	%rax, %rdi
 1980              	.LEHB33:
 1981 003e E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_@PLT
 1981      00
 1982              	.LEHE33:
 1983              		.loc 2 10 8 is_stmt 0 discriminator 2
 1984 0043 488B45E8 		movq	-24(%rbp), %rax
 1985 0047 4883C040 		addq	$64, %rax
 1986 004b 488B55E0 		movq	-32(%rbp), %rdx
 1987 004f 4883C240 		addq	$64, %rdx
 1988 0053 4889D6   		movq	%rdx, %rsi
 1989 0056 4889C7   		movq	%rax, %rdi
 1990              	.LEHB34:
 1991 0059 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_@PLT
 1991      00
 1992              	.LEHE34:
 1993              		.loc 2 10 8 discriminator 4
 1994 005e 488B45E8 		movq	-24(%rbp), %rax
 1995 0062 4883C060 		addq	$96, %rax
 1996 0066 488B55E0 		movq	-32(%rbp), %rdx
 1997 006a 4883C260 		addq	$96, %rdx
 1998 006e 4889D6   		movq	%rdx, %rsi
 1999 0071 4889C7   		movq	%rax, %rdi
 2000              	.LEHB35:
 2001 0074 E8000000 		call	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EEC1ERKS9_@P
 2001      00
 2002              	.LEHE35:
 2003              		.loc 2 10 8 discriminator 6
 2004 0079 488B45E0 		movq	-32(%rbp), %rax
 2005 007d F30F1040 		movss	120(%rax), %xmm0
 2005      78
 2006 0082 488B45E8 		movq	-24(%rbp), %rax
 2007 0086 F30F1140 		movss	%xmm0, 120(%rax)
 2007      78
 2008 008b 488B45E0 		movq	-32(%rbp), %rax
 2009 008f 0FB6507C 		movzbl	124(%rax), %edx
 2010 0093 488B45E8 		movq	-24(%rbp), %rax
 2011 0097 88507C   		movb	%dl, 124(%rax)
 2012              	.LBE12:
 2013 009a EB50     		jmp	.L97
 2014              	.L96:
 2015 009c F30F1EFA 		endbr64
 2016              	.LBB13:
 2017              		.loc 2 10 8
 2018 00a0 4889C3   		movq	%rax, %rbx
 2019 00a3 488B45E8 		movq	-24(%rbp), %rax
 2020 00a7 4883C040 		addq	$64, %rax
 2021 00ab 4889C7   		movq	%rax, %rdi
 2022 00ae E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 2022      00
 2023 00b3 EB07     		jmp	.L92
 2024              	.L95:
 2025 00b5 F30F1EFA 		endbr64
 2026 00b9 4889C3   		movq	%rax, %rbx
 2027              	.L92:
 2028              		.loc 2 10 8 discriminator 3
 2029 00bc 488B45E8 		movq	-24(%rbp), %rax
 2030 00c0 4883C020 		addq	$32, %rax
 2031 00c4 4889C7   		movq	%rax, %rdi
 2032 00c7 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 2032      00
 2033 00cc EB07     		jmp	.L93
 2034              	.L94:
 2035 00ce F30F1EFA 		endbr64
 2036              		.loc 2 10 8
 2037 00d2 4889C3   		movq	%rax, %rbx
 2038              	.L93:
 2039              		.loc 2 10 8 discriminator 1
 2040 00d5 488B45E8 		movq	-24(%rbp), %rax
 2041 00d9 4889C7   		movq	%rax, %rdi
 2042 00dc E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 2042      00
 2043 00e1 4889D8   		movq	%rbx, %rax
 2044 00e4 4889C7   		movq	%rax, %rdi
 2045              	.LEHB36:
 2046 00e7 E8000000 		call	_Unwind_Resume@PLT
 2046      00
 2047              	.LEHE36:
 2048              	.L97:
 2049              	.LBE13:
 2050              		.loc 2 10 8
 2051 00ec 488B5DF8 		movq	-8(%rbp), %rbx
 2052 00f0 C9       		leave
 2053              		.cfi_def_cfa 7, 8
 2054 00f1 C3       		ret
 2055              		.cfi_endproc
 2056              	.LFE1004:
 2057              		.section	.gcc_except_table
 2058              	.LLSDA1004:
 2059 00b4 FF       		.byte	0xff
 2060 00b5 FF       		.byte	0xff
 2061 00b6 01       		.byte	0x1
 2062 00b7 18       		.uleb128 .LLSDACSE1004-.LLSDACSB1004
 2063              	.LLSDACSB1004:
 2064 00b8 23       		.uleb128 .LEHB32-.LFB1004
 2065 00b9 05       		.uleb128 .LEHE32-.LEHB32
 2066 00ba 00       		.uleb128 0
 2067 00bb 00       		.uleb128 0
 2068 00bc 3E       		.uleb128 .LEHB33-.LFB1004
 2069 00bd 05       		.uleb128 .LEHE33-.LEHB33
 2070 00be CE01     		.uleb128 .L94-.LFB1004
 2071 00c0 00       		.uleb128 0
 2072 00c1 59       		.uleb128 .LEHB34-.LFB1004
 2073 00c2 05       		.uleb128 .LEHE34-.LEHB34
 2074 00c3 B501     		.uleb128 .L95-.LFB1004
 2075 00c5 00       		.uleb128 0
 2076 00c6 74       		.uleb128 .LEHB35-.LFB1004
 2077 00c7 05       		.uleb128 .LEHE35-.LEHB35
 2078 00c8 9C01     		.uleb128 .L96-.LFB1004
 2079 00ca 00       		.uleb128 0
 2080 00cb E701     		.uleb128 .LEHB36-.LFB1004
 2081 00cd 05       		.uleb128 .LEHE36-.LEHB36
 2082 00ce 00       		.uleb128 0
 2083 00cf 00       		.uleb128 0
 2084              	.LLSDACSE1004:
 2085              		.section	.text._ZN8UnitTest18DeferredTestResultC2ERKS0_,"axG",@progbits,_ZN8UnitTest18DeferredTest
 2087              		.weak	_ZN8UnitTest18DeferredTestResultC1ERKS0_
 2088              		.set	_ZN8UnitTest18DeferredTestResultC1ERKS0_,_ZN8UnitTest18DeferredTestResultC2ERKS0_
 2089              		.section	.text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE9constructEPS2_RKS2_,"
 2090              		.align 2
 2091              		.weak	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE9constructEPS2_RKS2_
 2093              	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE9constructEPS2_RKS2_:
 2094              	.LFB1002:
 2095              		.file 12 "/usr/include/c++/11/ext/new_allocator.h"
   1:/usr/include/c++/11/ext/new_allocator.h **** // Allocator that wraps operator new -*- C++ -*-
   2:/usr/include/c++/11/ext/new_allocator.h **** 
   3:/usr/include/c++/11/ext/new_allocator.h **** // Copyright (C) 2001-2021 Free Software Foundation, Inc.
   4:/usr/include/c++/11/ext/new_allocator.h **** //
   5:/usr/include/c++/11/ext/new_allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/11/ext/new_allocator.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/11/ext/new_allocator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/11/ext/new_allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/11/ext/new_allocator.h **** // any later version.
  10:/usr/include/c++/11/ext/new_allocator.h **** 
  11:/usr/include/c++/11/ext/new_allocator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/11/ext/new_allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/11/ext/new_allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/11/ext/new_allocator.h **** // GNU General Public License for more details.
  15:/usr/include/c++/11/ext/new_allocator.h **** 
  16:/usr/include/c++/11/ext/new_allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/11/ext/new_allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/11/ext/new_allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/11/ext/new_allocator.h **** 
  20:/usr/include/c++/11/ext/new_allocator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/11/ext/new_allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/11/ext/new_allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/11/ext/new_allocator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/11/ext/new_allocator.h **** 
  25:/usr/include/c++/11/ext/new_allocator.h **** /** @file ext/new_allocator.h
  26:/usr/include/c++/11/ext/new_allocator.h ****  *  This file is a GNU extension to the Standard C++ Library.
  27:/usr/include/c++/11/ext/new_allocator.h ****  */
  28:/usr/include/c++/11/ext/new_allocator.h **** 
  29:/usr/include/c++/11/ext/new_allocator.h **** #ifndef _NEW_ALLOCATOR_H
  30:/usr/include/c++/11/ext/new_allocator.h **** #define _NEW_ALLOCATOR_H 1
  31:/usr/include/c++/11/ext/new_allocator.h **** 
  32:/usr/include/c++/11/ext/new_allocator.h **** #include <bits/c++config.h>
  33:/usr/include/c++/11/ext/new_allocator.h **** #include <new>
  34:/usr/include/c++/11/ext/new_allocator.h **** #include <bits/functexcept.h>
  35:/usr/include/c++/11/ext/new_allocator.h **** #include <bits/move.h>
  36:/usr/include/c++/11/ext/new_allocator.h **** #if __cplusplus >= 201103L
  37:/usr/include/c++/11/ext/new_allocator.h **** #include <type_traits>
  38:/usr/include/c++/11/ext/new_allocator.h **** #endif
  39:/usr/include/c++/11/ext/new_allocator.h **** 
  40:/usr/include/c++/11/ext/new_allocator.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  41:/usr/include/c++/11/ext/new_allocator.h **** {
  42:/usr/include/c++/11/ext/new_allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  43:/usr/include/c++/11/ext/new_allocator.h **** 
  44:/usr/include/c++/11/ext/new_allocator.h ****   /**
  45:/usr/include/c++/11/ext/new_allocator.h ****    *  @brief  An allocator that uses global new, as per C++03 [20.4.1].
  46:/usr/include/c++/11/ext/new_allocator.h ****    *  @ingroup allocators
  47:/usr/include/c++/11/ext/new_allocator.h ****    *
  48:/usr/include/c++/11/ext/new_allocator.h ****    *  This is precisely the allocator defined in the C++ Standard.
  49:/usr/include/c++/11/ext/new_allocator.h ****    *    - all allocation calls operator new
  50:/usr/include/c++/11/ext/new_allocator.h ****    *    - all deallocation calls operator delete
  51:/usr/include/c++/11/ext/new_allocator.h ****    *
  52:/usr/include/c++/11/ext/new_allocator.h ****    *  @tparam  _Tp  Type of allocated object.
  53:/usr/include/c++/11/ext/new_allocator.h ****    */
  54:/usr/include/c++/11/ext/new_allocator.h ****   template<typename _Tp>
  55:/usr/include/c++/11/ext/new_allocator.h ****     class new_allocator
  56:/usr/include/c++/11/ext/new_allocator.h ****     {
  57:/usr/include/c++/11/ext/new_allocator.h ****     public:
  58:/usr/include/c++/11/ext/new_allocator.h ****       typedef _Tp        value_type;
  59:/usr/include/c++/11/ext/new_allocator.h ****       typedef std::size_t     size_type;
  60:/usr/include/c++/11/ext/new_allocator.h ****       typedef std::ptrdiff_t  difference_type;
  61:/usr/include/c++/11/ext/new_allocator.h **** #if __cplusplus <= 201703L
  62:/usr/include/c++/11/ext/new_allocator.h ****       typedef _Tp*       pointer;
  63:/usr/include/c++/11/ext/new_allocator.h ****       typedef const _Tp* const_pointer;
  64:/usr/include/c++/11/ext/new_allocator.h ****       typedef _Tp&       reference;
  65:/usr/include/c++/11/ext/new_allocator.h ****       typedef const _Tp& const_reference;
  66:/usr/include/c++/11/ext/new_allocator.h **** 
  67:/usr/include/c++/11/ext/new_allocator.h ****       template<typename _Tp1>
  68:/usr/include/c++/11/ext/new_allocator.h **** 	struct rebind
  69:/usr/include/c++/11/ext/new_allocator.h **** 	{ typedef new_allocator<_Tp1> other; };
  70:/usr/include/c++/11/ext/new_allocator.h **** #endif
  71:/usr/include/c++/11/ext/new_allocator.h **** 
  72:/usr/include/c++/11/ext/new_allocator.h **** #if __cplusplus >= 201103L
  73:/usr/include/c++/11/ext/new_allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  74:/usr/include/c++/11/ext/new_allocator.h ****       // 2103. propagate_on_container_move_assignment
  75:/usr/include/c++/11/ext/new_allocator.h ****       typedef std::true_type propagate_on_container_move_assignment;
  76:/usr/include/c++/11/ext/new_allocator.h **** #endif
  77:/usr/include/c++/11/ext/new_allocator.h **** 
  78:/usr/include/c++/11/ext/new_allocator.h ****       _GLIBCXX20_CONSTEXPR
  79:/usr/include/c++/11/ext/new_allocator.h ****       new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  80:/usr/include/c++/11/ext/new_allocator.h **** 
  81:/usr/include/c++/11/ext/new_allocator.h ****       _GLIBCXX20_CONSTEXPR
  82:/usr/include/c++/11/ext/new_allocator.h ****       new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
  83:/usr/include/c++/11/ext/new_allocator.h **** 
  84:/usr/include/c++/11/ext/new_allocator.h ****       template<typename _Tp1>
  85:/usr/include/c++/11/ext/new_allocator.h **** 	_GLIBCXX20_CONSTEXPR
  86:/usr/include/c++/11/ext/new_allocator.h **** 	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
  87:/usr/include/c++/11/ext/new_allocator.h **** 
  88:/usr/include/c++/11/ext/new_allocator.h **** #if __cplusplus <= 201703L
  89:/usr/include/c++/11/ext/new_allocator.h ****       ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  90:/usr/include/c++/11/ext/new_allocator.h **** 
  91:/usr/include/c++/11/ext/new_allocator.h ****       pointer
  92:/usr/include/c++/11/ext/new_allocator.h ****       address(reference __x) const _GLIBCXX_NOEXCEPT
  93:/usr/include/c++/11/ext/new_allocator.h ****       { return std::__addressof(__x); }
  94:/usr/include/c++/11/ext/new_allocator.h **** 
  95:/usr/include/c++/11/ext/new_allocator.h ****       const_pointer
  96:/usr/include/c++/11/ext/new_allocator.h ****       address(const_reference __x) const _GLIBCXX_NOEXCEPT
  97:/usr/include/c++/11/ext/new_allocator.h ****       { return std::__addressof(__x); }
  98:/usr/include/c++/11/ext/new_allocator.h **** #endif
  99:/usr/include/c++/11/ext/new_allocator.h **** 
 100:/usr/include/c++/11/ext/new_allocator.h ****       // NB: __n is permitted to be 0.  The C++ standard says nothing
 101:/usr/include/c++/11/ext/new_allocator.h ****       // about what the return value is when __n == 0.
 102:/usr/include/c++/11/ext/new_allocator.h ****       _GLIBCXX_NODISCARD _Tp*
 103:/usr/include/c++/11/ext/new_allocator.h ****       allocate(size_type __n, const void* = static_cast<const void*>(0))
 104:/usr/include/c++/11/ext/new_allocator.h ****       {
 105:/usr/include/c++/11/ext/new_allocator.h **** #if __cplusplus >= 201103L
 106:/usr/include/c++/11/ext/new_allocator.h **** 	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
 107:/usr/include/c++/11/ext/new_allocator.h **** 	 // 3308. std::allocator<void>().allocate(n)
 108:/usr/include/c++/11/ext/new_allocator.h **** 	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
 109:/usr/include/c++/11/ext/new_allocator.h **** #endif
 110:/usr/include/c++/11/ext/new_allocator.h **** 
 111:/usr/include/c++/11/ext/new_allocator.h **** 	if (__builtin_expect(__n > this->_M_max_size(), false))
 112:/usr/include/c++/11/ext/new_allocator.h **** 	  {
 113:/usr/include/c++/11/ext/new_allocator.h **** 	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
 114:/usr/include/c++/11/ext/new_allocator.h **** 	    // 3190. allocator::allocate sometimes returns too little storage
 115:/usr/include/c++/11/ext/new_allocator.h **** 	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 116:/usr/include/c++/11/ext/new_allocator.h **** 	      std::__throw_bad_array_new_length();
 117:/usr/include/c++/11/ext/new_allocator.h **** 	    std::__throw_bad_alloc();
 118:/usr/include/c++/11/ext/new_allocator.h **** 	  }
 119:/usr/include/c++/11/ext/new_allocator.h **** 
 120:/usr/include/c++/11/ext/new_allocator.h **** #if __cpp_aligned_new
 121:/usr/include/c++/11/ext/new_allocator.h **** 	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
 122:/usr/include/c++/11/ext/new_allocator.h **** 	  {
 123:/usr/include/c++/11/ext/new_allocator.h **** 	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
 124:/usr/include/c++/11/ext/new_allocator.h **** 	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
 125:/usr/include/c++/11/ext/new_allocator.h **** 	  }
 126:/usr/include/c++/11/ext/new_allocator.h **** #endif
 127:/usr/include/c++/11/ext/new_allocator.h **** 	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 128:/usr/include/c++/11/ext/new_allocator.h ****       }
 129:/usr/include/c++/11/ext/new_allocator.h **** 
 130:/usr/include/c++/11/ext/new_allocator.h ****       // __p is not permitted to be a null pointer.
 131:/usr/include/c++/11/ext/new_allocator.h ****       void
 132:/usr/include/c++/11/ext/new_allocator.h ****       deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 133:/usr/include/c++/11/ext/new_allocator.h ****       {
 134:/usr/include/c++/11/ext/new_allocator.h **** #if __cpp_aligned_new
 135:/usr/include/c++/11/ext/new_allocator.h **** 	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
 136:/usr/include/c++/11/ext/new_allocator.h **** 	  {
 137:/usr/include/c++/11/ext/new_allocator.h **** 	    ::operator delete(__p,
 138:/usr/include/c++/11/ext/new_allocator.h **** # if __cpp_sized_deallocation
 139:/usr/include/c++/11/ext/new_allocator.h **** 			      __t * sizeof(_Tp),
 140:/usr/include/c++/11/ext/new_allocator.h **** # endif
 141:/usr/include/c++/11/ext/new_allocator.h **** 			      std::align_val_t(alignof(_Tp)));
 142:/usr/include/c++/11/ext/new_allocator.h **** 	    return;
 143:/usr/include/c++/11/ext/new_allocator.h **** 	  }
 144:/usr/include/c++/11/ext/new_allocator.h **** #endif
 145:/usr/include/c++/11/ext/new_allocator.h **** 	::operator delete(__p
 146:/usr/include/c++/11/ext/new_allocator.h **** #if __cpp_sized_deallocation
 147:/usr/include/c++/11/ext/new_allocator.h **** 			  , __t * sizeof(_Tp)
 148:/usr/include/c++/11/ext/new_allocator.h **** #endif
 149:/usr/include/c++/11/ext/new_allocator.h **** 			 );
 150:/usr/include/c++/11/ext/new_allocator.h ****       }
 151:/usr/include/c++/11/ext/new_allocator.h **** 
 152:/usr/include/c++/11/ext/new_allocator.h **** #if __cplusplus <= 201703L
 153:/usr/include/c++/11/ext/new_allocator.h ****       size_type
 154:/usr/include/c++/11/ext/new_allocator.h ****       max_size() const _GLIBCXX_USE_NOEXCEPT
 155:/usr/include/c++/11/ext/new_allocator.h ****       { return _M_max_size(); }
 156:/usr/include/c++/11/ext/new_allocator.h **** 
 157:/usr/include/c++/11/ext/new_allocator.h **** #if __cplusplus >= 201103L
 158:/usr/include/c++/11/ext/new_allocator.h ****       template<typename _Up, typename... _Args>
 159:/usr/include/c++/11/ext/new_allocator.h **** 	void
 160:/usr/include/c++/11/ext/new_allocator.h **** 	construct(_Up* __p, _Args&&... __args)
 161:/usr/include/c++/11/ext/new_allocator.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 162:/usr/include/c++/11/ext/new_allocator.h **** 	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 163:/usr/include/c++/11/ext/new_allocator.h **** 
 164:/usr/include/c++/11/ext/new_allocator.h ****       template<typename _Up>
 165:/usr/include/c++/11/ext/new_allocator.h **** 	void
 166:/usr/include/c++/11/ext/new_allocator.h **** 	destroy(_Up* __p)
 167:/usr/include/c++/11/ext/new_allocator.h **** 	noexcept(std::is_nothrow_destructible<_Up>::value)
 168:/usr/include/c++/11/ext/new_allocator.h **** 	{ __p->~_Up(); }
 169:/usr/include/c++/11/ext/new_allocator.h **** #else
 170:/usr/include/c++/11/ext/new_allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 171:/usr/include/c++/11/ext/new_allocator.h ****       // 402. wrong new expression in [some_] allocator::construct
 172:/usr/include/c++/11/ext/new_allocator.h ****       void
 173:/usr/include/c++/11/ext/new_allocator.h ****       construct(pointer __p, const _Tp& __val)
 2096              		.loc 12 173 7 is_stmt 1
 2097              		.cfi_startproc
 2098              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 2099              		.cfi_lsda 0x1b,.LLSDA1002
 2100 0000 F30F1EFA 		endbr64
 2101 0004 55       		pushq	%rbp
 2102              		.cfi_def_cfa_offset 16
 2103              		.cfi_offset 6, -16
 2104 0005 4889E5   		movq	%rsp, %rbp
 2105              		.cfi_def_cfa_register 6
 2106 0008 4155     		pushq	%r13
 2107 000a 4154     		pushq	%r12
 2108 000c 53       		pushq	%rbx
 2109 000d 4883EC28 		subq	$40, %rsp
 2110              		.cfi_offset 13, -24
 2111              		.cfi_offset 12, -32
 2112              		.cfi_offset 3, -40
 2113 0011 48897DD8 		movq	%rdi, -40(%rbp)
 2114 0015 488975D0 		movq	%rsi, -48(%rbp)
 2115 0019 488955C8 		movq	%rdx, -56(%rbp)
 174:/usr/include/c++/11/ext/new_allocator.h ****       { ::new((void *)__p) _Tp(__val); }
 2116              		.loc 12 174 15
 2117 001d 488B5DD0 		movq	-48(%rbp), %rbx
 2118              		.loc 12 174 9
 2119 0021 4889DE   		movq	%rbx, %rsi
 2120 0024 BF800000 		movl	$128, %edi
 2120      00
 2121 0029 E8000000 		call	_ZnwmPv@PLT
 2121      00
 2122 002e 4989C4   		movq	%rax, %r12
 2123 0031 488B45C8 		movq	-56(%rbp), %rax
 2124 0035 4889C6   		movq	%rax, %rsi
 2125 0038 4C89E7   		movq	%r12, %rdi
 2126              	.LEHB37:
 2127 003b E8000000 		call	_ZN8UnitTest18DeferredTestResultC1ERKS0_@PLT
 2127      00
 2128              	.LEHE37:
 2129              		.loc 12 174 40
 2130 0040 EB1D     		jmp	.L101
 2131              	.L100:
 2132 0042 F30F1EFA 		endbr64
 2133              		.loc 12 174 9
 2134 0046 4989C5   		movq	%rax, %r13
 2135 0049 4889DE   		movq	%rbx, %rsi
 2136 004c 4C89E7   		movq	%r12, %rdi
 2137 004f E8000000 		call	_ZdlPvS_@PLT
 2137      00
 2138 0054 4C89E8   		movq	%r13, %rax
 2139 0057 4889C7   		movq	%rax, %rdi
 2140              	.LEHB38:
 2141 005a E8000000 		call	_Unwind_Resume@PLT
 2141      00
 2142              	.LEHE38:
 2143              	.L101:
 2144              		.loc 12 174 40
 2145 005f 4883C428 		addq	$40, %rsp
 2146 0063 5B       		popq	%rbx
 2147 0064 415C     		popq	%r12
 2148 0066 415D     		popq	%r13
 2149 0068 5D       		popq	%rbp
 2150              		.cfi_def_cfa 7, 8
 2151 0069 C3       		ret
 2152              		.cfi_endproc
 2153              	.LFE1002:
 2154              		.section	.gcc_except_table
 2155              	.LLSDA1002:
 2156 00d0 FF       		.byte	0xff
 2157 00d1 FF       		.byte	0xff
 2158 00d2 01       		.byte	0x1
 2159 00d3 08       		.uleb128 .LLSDACSE1002-.LLSDACSB1002
 2160              	.LLSDACSB1002:
 2161 00d4 3B       		.uleb128 .LEHB37-.LFB1002
 2162 00d5 05       		.uleb128 .LEHE37-.LEHB37
 2163 00d6 42       		.uleb128 .L100-.LFB1002
 2164 00d7 00       		.uleb128 0
 2165 00d8 5A       		.uleb128 .LEHB38-.LFB1002
 2166 00d9 05       		.uleb128 .LEHE38-.LEHB38
 2167 00da 00       		.uleb128 0
 2168 00db 00       		.uleb128 0
 2169              	.LLSDACSE1002:
 2170              		.section	.text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE9constructEPS2_RKS2_,"
 2172              		.section	.text._ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE12_M_check_lenEmPKc,"axG",@pro
 2173              		.align 2
 2174              		.weak	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE12_M_check_lenEmPKc
 2176              	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE12_M_check_lenEmPKc:
 2177              	.LFB1006:
1200:/usr/include/c++/11/bits/stl_vector.h **** 
1201:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
1202:/usr/include/c++/11/bits/stl_vector.h ****       void
1203:/usr/include/c++/11/bits/stl_vector.h ****       push_back(value_type&& __x)
1204:/usr/include/c++/11/bits/stl_vector.h ****       { emplace_back(std::move(__x)); }
1205:/usr/include/c++/11/bits/stl_vector.h **** 
1206:/usr/include/c++/11/bits/stl_vector.h ****       template<typename... _Args>
1207:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus > 201402L
1208:/usr/include/c++/11/bits/stl_vector.h **** 	reference
1209:/usr/include/c++/11/bits/stl_vector.h **** #else
1210:/usr/include/c++/11/bits/stl_vector.h **** 	void
1211:/usr/include/c++/11/bits/stl_vector.h **** #endif
1212:/usr/include/c++/11/bits/stl_vector.h **** 	emplace_back(_Args&&... __args);
1213:/usr/include/c++/11/bits/stl_vector.h **** #endif
1214:/usr/include/c++/11/bits/stl_vector.h **** 
1215:/usr/include/c++/11/bits/stl_vector.h ****       /**
1216:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Removes last element.
1217:/usr/include/c++/11/bits/stl_vector.h ****        *
1218:/usr/include/c++/11/bits/stl_vector.h ****        *  This is a typical stack operation. It shrinks the %vector by one.
1219:/usr/include/c++/11/bits/stl_vector.h ****        *
1220:/usr/include/c++/11/bits/stl_vector.h ****        *  Note that no data is returned, and if the last element's
1221:/usr/include/c++/11/bits/stl_vector.h ****        *  data is needed, it should be retrieved before pop_back() is
1222:/usr/include/c++/11/bits/stl_vector.h ****        *  called.
1223:/usr/include/c++/11/bits/stl_vector.h ****        */
1224:/usr/include/c++/11/bits/stl_vector.h ****       void
1225:/usr/include/c++/11/bits/stl_vector.h ****       pop_back() _GLIBCXX_NOEXCEPT
1226:/usr/include/c++/11/bits/stl_vector.h ****       {
1227:/usr/include/c++/11/bits/stl_vector.h **** 	__glibcxx_requires_nonempty();
1228:/usr/include/c++/11/bits/stl_vector.h **** 	--this->_M_impl._M_finish;
1229:/usr/include/c++/11/bits/stl_vector.h **** 	_Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
1230:/usr/include/c++/11/bits/stl_vector.h **** 	_GLIBCXX_ASAN_ANNOTATE_SHRINK(1);
1231:/usr/include/c++/11/bits/stl_vector.h ****       }
1232:/usr/include/c++/11/bits/stl_vector.h **** 
1233:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
1234:/usr/include/c++/11/bits/stl_vector.h ****       /**
1235:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Inserts an object in %vector before specified iterator.
1236:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1237:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __args  Arguments.
1238:/usr/include/c++/11/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1239:/usr/include/c++/11/bits/stl_vector.h ****        *
1240:/usr/include/c++/11/bits/stl_vector.h ****        *  This function will insert an object of type T constructed
1241:/usr/include/c++/11/bits/stl_vector.h ****        *  with T(std::forward<Args>(args)...) before the specified location.
1242:/usr/include/c++/11/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a %vector
1243:/usr/include/c++/11/bits/stl_vector.h ****        *  and if it is frequently used the user should consider using
1244:/usr/include/c++/11/bits/stl_vector.h ****        *  std::list.
1245:/usr/include/c++/11/bits/stl_vector.h ****        */
1246:/usr/include/c++/11/bits/stl_vector.h ****       template<typename... _Args>
1247:/usr/include/c++/11/bits/stl_vector.h **** 	iterator
1248:/usr/include/c++/11/bits/stl_vector.h **** 	emplace(const_iterator __position, _Args&&... __args)
1249:/usr/include/c++/11/bits/stl_vector.h **** 	{ return _M_emplace_aux(__position, std::forward<_Args>(__args)...); }
1250:/usr/include/c++/11/bits/stl_vector.h **** 
1251:/usr/include/c++/11/bits/stl_vector.h ****       /**
1252:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Inserts given value into %vector before specified iterator.
1253:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1254:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
1255:/usr/include/c++/11/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1256:/usr/include/c++/11/bits/stl_vector.h ****        *
1257:/usr/include/c++/11/bits/stl_vector.h ****        *  This function will insert a copy of the given value before
1258:/usr/include/c++/11/bits/stl_vector.h ****        *  the specified location.  Note that this kind of operation
1259:/usr/include/c++/11/bits/stl_vector.h ****        *  could be expensive for a %vector and if it is frequently
1260:/usr/include/c++/11/bits/stl_vector.h ****        *  used the user should consider using std::list.
1261:/usr/include/c++/11/bits/stl_vector.h ****        */
1262:/usr/include/c++/11/bits/stl_vector.h ****       iterator
1263:/usr/include/c++/11/bits/stl_vector.h ****       insert(const_iterator __position, const value_type& __x);
1264:/usr/include/c++/11/bits/stl_vector.h **** #else
1265:/usr/include/c++/11/bits/stl_vector.h ****       /**
1266:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Inserts given value into %vector before specified iterator.
1267:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1268:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
1269:/usr/include/c++/11/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1270:/usr/include/c++/11/bits/stl_vector.h ****        *
1271:/usr/include/c++/11/bits/stl_vector.h ****        *  This function will insert a copy of the given value before
1272:/usr/include/c++/11/bits/stl_vector.h ****        *  the specified location.  Note that this kind of operation
1273:/usr/include/c++/11/bits/stl_vector.h ****        *  could be expensive for a %vector and if it is frequently
1274:/usr/include/c++/11/bits/stl_vector.h ****        *  used the user should consider using std::list.
1275:/usr/include/c++/11/bits/stl_vector.h ****        */
1276:/usr/include/c++/11/bits/stl_vector.h ****       iterator
1277:/usr/include/c++/11/bits/stl_vector.h ****       insert(iterator __position, const value_type& __x);
1278:/usr/include/c++/11/bits/stl_vector.h **** #endif
1279:/usr/include/c++/11/bits/stl_vector.h **** 
1280:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
1281:/usr/include/c++/11/bits/stl_vector.h ****       /**
1282:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Inserts given rvalue into %vector before specified iterator.
1283:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1284:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
1285:/usr/include/c++/11/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1286:/usr/include/c++/11/bits/stl_vector.h ****        *
1287:/usr/include/c++/11/bits/stl_vector.h ****        *  This function will insert a copy of the given rvalue before
1288:/usr/include/c++/11/bits/stl_vector.h ****        *  the specified location.  Note that this kind of operation
1289:/usr/include/c++/11/bits/stl_vector.h ****        *  could be expensive for a %vector and if it is frequently
1290:/usr/include/c++/11/bits/stl_vector.h ****        *  used the user should consider using std::list.
1291:/usr/include/c++/11/bits/stl_vector.h ****        */
1292:/usr/include/c++/11/bits/stl_vector.h ****       iterator
1293:/usr/include/c++/11/bits/stl_vector.h ****       insert(const_iterator __position, value_type&& __x)
1294:/usr/include/c++/11/bits/stl_vector.h ****       { return _M_insert_rval(__position, std::move(__x)); }
1295:/usr/include/c++/11/bits/stl_vector.h **** 
1296:/usr/include/c++/11/bits/stl_vector.h ****       /**
1297:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Inserts an initializer_list into the %vector.
1298:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1299:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
1300:/usr/include/c++/11/bits/stl_vector.h ****        *
1301:/usr/include/c++/11/bits/stl_vector.h ****        *  This function will insert copies of the data in the
1302:/usr/include/c++/11/bits/stl_vector.h ****        *  initializer_list @a l into the %vector before the location
1303:/usr/include/c++/11/bits/stl_vector.h ****        *  specified by @a position.
1304:/usr/include/c++/11/bits/stl_vector.h ****        *
1305:/usr/include/c++/11/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1306:/usr/include/c++/11/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1307:/usr/include/c++/11/bits/stl_vector.h ****        *  consider using std::list.
1308:/usr/include/c++/11/bits/stl_vector.h ****        */
1309:/usr/include/c++/11/bits/stl_vector.h ****       iterator
1310:/usr/include/c++/11/bits/stl_vector.h ****       insert(const_iterator __position, initializer_list<value_type> __l)
1311:/usr/include/c++/11/bits/stl_vector.h ****       {
1312:/usr/include/c++/11/bits/stl_vector.h **** 	auto __offset = __position - cbegin();
1313:/usr/include/c++/11/bits/stl_vector.h **** 	_M_range_insert(begin() + __offset, __l.begin(), __l.end(),
1314:/usr/include/c++/11/bits/stl_vector.h **** 			std::random_access_iterator_tag());
1315:/usr/include/c++/11/bits/stl_vector.h **** 	return begin() + __offset;
1316:/usr/include/c++/11/bits/stl_vector.h ****       }
1317:/usr/include/c++/11/bits/stl_vector.h **** #endif
1318:/usr/include/c++/11/bits/stl_vector.h **** 
1319:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
1320:/usr/include/c++/11/bits/stl_vector.h ****       /**
1321:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Inserts a number of copies of given data into the %vector.
1322:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1323:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __n  Number of elements to be inserted.
1324:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
1325:/usr/include/c++/11/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1326:/usr/include/c++/11/bits/stl_vector.h ****        *
1327:/usr/include/c++/11/bits/stl_vector.h ****        *  This function will insert a specified number of copies of
1328:/usr/include/c++/11/bits/stl_vector.h ****        *  the given data before the location specified by @a position.
1329:/usr/include/c++/11/bits/stl_vector.h ****        *
1330:/usr/include/c++/11/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1331:/usr/include/c++/11/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1332:/usr/include/c++/11/bits/stl_vector.h ****        *  consider using std::list.
1333:/usr/include/c++/11/bits/stl_vector.h ****        */
1334:/usr/include/c++/11/bits/stl_vector.h ****       iterator
1335:/usr/include/c++/11/bits/stl_vector.h ****       insert(const_iterator __position, size_type __n, const value_type& __x)
1336:/usr/include/c++/11/bits/stl_vector.h ****       {
1337:/usr/include/c++/11/bits/stl_vector.h **** 	difference_type __offset = __position - cbegin();
1338:/usr/include/c++/11/bits/stl_vector.h **** 	_M_fill_insert(begin() + __offset, __n, __x);
1339:/usr/include/c++/11/bits/stl_vector.h **** 	return begin() + __offset;
1340:/usr/include/c++/11/bits/stl_vector.h ****       }
1341:/usr/include/c++/11/bits/stl_vector.h **** #else
1342:/usr/include/c++/11/bits/stl_vector.h ****       /**
1343:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Inserts a number of copies of given data into the %vector.
1344:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1345:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __n  Number of elements to be inserted.
1346:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
1347:/usr/include/c++/11/bits/stl_vector.h ****        *
1348:/usr/include/c++/11/bits/stl_vector.h ****        *  This function will insert a specified number of copies of
1349:/usr/include/c++/11/bits/stl_vector.h ****        *  the given data before the location specified by @a position.
1350:/usr/include/c++/11/bits/stl_vector.h ****        *
1351:/usr/include/c++/11/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1352:/usr/include/c++/11/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1353:/usr/include/c++/11/bits/stl_vector.h ****        *  consider using std::list.
1354:/usr/include/c++/11/bits/stl_vector.h ****        */
1355:/usr/include/c++/11/bits/stl_vector.h ****       void
1356:/usr/include/c++/11/bits/stl_vector.h ****       insert(iterator __position, size_type __n, const value_type& __x)
1357:/usr/include/c++/11/bits/stl_vector.h ****       { _M_fill_insert(__position, __n, __x); }
1358:/usr/include/c++/11/bits/stl_vector.h **** #endif
1359:/usr/include/c++/11/bits/stl_vector.h **** 
1360:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
1361:/usr/include/c++/11/bits/stl_vector.h ****       /**
1362:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Inserts a range into the %vector.
1363:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1364:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __first  An input iterator.
1365:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __last   An input iterator.
1366:/usr/include/c++/11/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1367:/usr/include/c++/11/bits/stl_vector.h ****        *
1368:/usr/include/c++/11/bits/stl_vector.h ****        *  This function will insert copies of the data in the range
1369:/usr/include/c++/11/bits/stl_vector.h ****        *  [__first,__last) into the %vector before the location specified
1370:/usr/include/c++/11/bits/stl_vector.h ****        *  by @a pos.
1371:/usr/include/c++/11/bits/stl_vector.h ****        *
1372:/usr/include/c++/11/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1373:/usr/include/c++/11/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1374:/usr/include/c++/11/bits/stl_vector.h ****        *  consider using std::list.
1375:/usr/include/c++/11/bits/stl_vector.h ****        */
1376:/usr/include/c++/11/bits/stl_vector.h ****       template<typename _InputIterator,
1377:/usr/include/c++/11/bits/stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1378:/usr/include/c++/11/bits/stl_vector.h **** 	iterator
1379:/usr/include/c++/11/bits/stl_vector.h **** 	insert(const_iterator __position, _InputIterator __first,
1380:/usr/include/c++/11/bits/stl_vector.h **** 	       _InputIterator __last)
1381:/usr/include/c++/11/bits/stl_vector.h **** 	{
1382:/usr/include/c++/11/bits/stl_vector.h **** 	  difference_type __offset = __position - cbegin();
1383:/usr/include/c++/11/bits/stl_vector.h **** 	  _M_insert_dispatch(begin() + __offset,
1384:/usr/include/c++/11/bits/stl_vector.h **** 			     __first, __last, __false_type());
1385:/usr/include/c++/11/bits/stl_vector.h **** 	  return begin() + __offset;
1386:/usr/include/c++/11/bits/stl_vector.h **** 	}
1387:/usr/include/c++/11/bits/stl_vector.h **** #else
1388:/usr/include/c++/11/bits/stl_vector.h ****       /**
1389:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Inserts a range into the %vector.
1390:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1391:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __first  An input iterator.
1392:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __last   An input iterator.
1393:/usr/include/c++/11/bits/stl_vector.h ****        *
1394:/usr/include/c++/11/bits/stl_vector.h ****        *  This function will insert copies of the data in the range
1395:/usr/include/c++/11/bits/stl_vector.h ****        *  [__first,__last) into the %vector before the location specified
1396:/usr/include/c++/11/bits/stl_vector.h ****        *  by @a pos.
1397:/usr/include/c++/11/bits/stl_vector.h ****        *
1398:/usr/include/c++/11/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1399:/usr/include/c++/11/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1400:/usr/include/c++/11/bits/stl_vector.h ****        *  consider using std::list.
1401:/usr/include/c++/11/bits/stl_vector.h ****        */
1402:/usr/include/c++/11/bits/stl_vector.h ****       template<typename _InputIterator>
1403:/usr/include/c++/11/bits/stl_vector.h **** 	void
1404:/usr/include/c++/11/bits/stl_vector.h **** 	insert(iterator __position, _InputIterator __first,
1405:/usr/include/c++/11/bits/stl_vector.h **** 	       _InputIterator __last)
1406:/usr/include/c++/11/bits/stl_vector.h **** 	{
1407:/usr/include/c++/11/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
1408:/usr/include/c++/11/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
1409:/usr/include/c++/11/bits/stl_vector.h **** 	  _M_insert_dispatch(__position, __first, __last, _Integral());
1410:/usr/include/c++/11/bits/stl_vector.h **** 	}
1411:/usr/include/c++/11/bits/stl_vector.h **** #endif
1412:/usr/include/c++/11/bits/stl_vector.h **** 
1413:/usr/include/c++/11/bits/stl_vector.h ****       /**
1414:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Remove element at given position.
1415:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __position  Iterator pointing to element to be erased.
1416:/usr/include/c++/11/bits/stl_vector.h ****        *  @return  An iterator pointing to the next element (or end()).
1417:/usr/include/c++/11/bits/stl_vector.h ****        *
1418:/usr/include/c++/11/bits/stl_vector.h ****        *  This function will erase the element at the given position and thus
1419:/usr/include/c++/11/bits/stl_vector.h ****        *  shorten the %vector by one.
1420:/usr/include/c++/11/bits/stl_vector.h ****        *
1421:/usr/include/c++/11/bits/stl_vector.h ****        *  Note This operation could be expensive and if it is
1422:/usr/include/c++/11/bits/stl_vector.h ****        *  frequently used the user should consider using std::list.
1423:/usr/include/c++/11/bits/stl_vector.h ****        *  The user is also cautioned that this function only erases
1424:/usr/include/c++/11/bits/stl_vector.h ****        *  the element, and that if the element is itself a pointer,
1425:/usr/include/c++/11/bits/stl_vector.h ****        *  the pointed-to memory is not touched in any way.  Managing
1426:/usr/include/c++/11/bits/stl_vector.h ****        *  the pointer is the user's responsibility.
1427:/usr/include/c++/11/bits/stl_vector.h ****        */
1428:/usr/include/c++/11/bits/stl_vector.h ****       iterator
1429:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
1430:/usr/include/c++/11/bits/stl_vector.h ****       erase(const_iterator __position)
1431:/usr/include/c++/11/bits/stl_vector.h ****       { return _M_erase(begin() + (__position - cbegin())); }
1432:/usr/include/c++/11/bits/stl_vector.h **** #else
1433:/usr/include/c++/11/bits/stl_vector.h ****       erase(iterator __position)
1434:/usr/include/c++/11/bits/stl_vector.h ****       { return _M_erase(__position); }
1435:/usr/include/c++/11/bits/stl_vector.h **** #endif
1436:/usr/include/c++/11/bits/stl_vector.h **** 
1437:/usr/include/c++/11/bits/stl_vector.h ****       /**
1438:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Remove a range of elements.
1439:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __first  Iterator pointing to the first element to be erased.
1440:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __last  Iterator pointing to one past the last element to be
1441:/usr/include/c++/11/bits/stl_vector.h ****        *                  erased.
1442:/usr/include/c++/11/bits/stl_vector.h ****        *  @return  An iterator pointing to the element pointed to by @a __last
1443:/usr/include/c++/11/bits/stl_vector.h ****        *           prior to erasing (or end()).
1444:/usr/include/c++/11/bits/stl_vector.h ****        *
1445:/usr/include/c++/11/bits/stl_vector.h ****        *  This function will erase the elements in the range
1446:/usr/include/c++/11/bits/stl_vector.h ****        *  [__first,__last) and shorten the %vector accordingly.
1447:/usr/include/c++/11/bits/stl_vector.h ****        *
1448:/usr/include/c++/11/bits/stl_vector.h ****        *  Note This operation could be expensive and if it is
1449:/usr/include/c++/11/bits/stl_vector.h ****        *  frequently used the user should consider using std::list.
1450:/usr/include/c++/11/bits/stl_vector.h ****        *  The user is also cautioned that this function only erases
1451:/usr/include/c++/11/bits/stl_vector.h ****        *  the elements, and that if the elements themselves are
1452:/usr/include/c++/11/bits/stl_vector.h ****        *  pointers, the pointed-to memory is not touched in any way.
1453:/usr/include/c++/11/bits/stl_vector.h ****        *  Managing the pointer is the user's responsibility.
1454:/usr/include/c++/11/bits/stl_vector.h ****        */
1455:/usr/include/c++/11/bits/stl_vector.h ****       iterator
1456:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
1457:/usr/include/c++/11/bits/stl_vector.h ****       erase(const_iterator __first, const_iterator __last)
1458:/usr/include/c++/11/bits/stl_vector.h ****       {
1459:/usr/include/c++/11/bits/stl_vector.h **** 	const auto __beg = begin();
1460:/usr/include/c++/11/bits/stl_vector.h **** 	const auto __cbeg = cbegin();
1461:/usr/include/c++/11/bits/stl_vector.h **** 	return _M_erase(__beg + (__first - __cbeg), __beg + (__last - __cbeg));
1462:/usr/include/c++/11/bits/stl_vector.h ****       }
1463:/usr/include/c++/11/bits/stl_vector.h **** #else
1464:/usr/include/c++/11/bits/stl_vector.h ****       erase(iterator __first, iterator __last)
1465:/usr/include/c++/11/bits/stl_vector.h ****       { return _M_erase(__first, __last); }
1466:/usr/include/c++/11/bits/stl_vector.h **** #endif
1467:/usr/include/c++/11/bits/stl_vector.h **** 
1468:/usr/include/c++/11/bits/stl_vector.h ****       /**
1469:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Swaps data with another %vector.
1470:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __x  A %vector of the same element and allocator types.
1471:/usr/include/c++/11/bits/stl_vector.h ****        *
1472:/usr/include/c++/11/bits/stl_vector.h ****        *  This exchanges the elements between two vectors in constant time.
1473:/usr/include/c++/11/bits/stl_vector.h ****        *  (Three pointers, so it should be quite fast.)
1474:/usr/include/c++/11/bits/stl_vector.h ****        *  Note that the global std::swap() function is specialized such that
1475:/usr/include/c++/11/bits/stl_vector.h ****        *  std::swap(v1,v2) will feed to this function.
1476:/usr/include/c++/11/bits/stl_vector.h ****        *
1477:/usr/include/c++/11/bits/stl_vector.h ****        *  Whether the allocators are swapped depends on the allocator traits.
1478:/usr/include/c++/11/bits/stl_vector.h ****        */
1479:/usr/include/c++/11/bits/stl_vector.h ****       void
1480:/usr/include/c++/11/bits/stl_vector.h ****       swap(vector& __x) _GLIBCXX_NOEXCEPT
1481:/usr/include/c++/11/bits/stl_vector.h ****       {
1482:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
1483:/usr/include/c++/11/bits/stl_vector.h **** 	__glibcxx_assert(_Alloc_traits::propagate_on_container_swap::value
1484:/usr/include/c++/11/bits/stl_vector.h **** 			 || _M_get_Tp_allocator() == __x._M_get_Tp_allocator());
1485:/usr/include/c++/11/bits/stl_vector.h **** #endif
1486:/usr/include/c++/11/bits/stl_vector.h **** 	this->_M_impl._M_swap_data(__x._M_impl);
1487:/usr/include/c++/11/bits/stl_vector.h **** 	_Alloc_traits::_S_on_swap(_M_get_Tp_allocator(),
1488:/usr/include/c++/11/bits/stl_vector.h **** 				  __x._M_get_Tp_allocator());
1489:/usr/include/c++/11/bits/stl_vector.h ****       }
1490:/usr/include/c++/11/bits/stl_vector.h **** 
1491:/usr/include/c++/11/bits/stl_vector.h ****       /**
1492:/usr/include/c++/11/bits/stl_vector.h ****        *  Erases all the elements.  Note that this function only erases the
1493:/usr/include/c++/11/bits/stl_vector.h ****        *  elements, and that if the elements themselves are pointers, the
1494:/usr/include/c++/11/bits/stl_vector.h ****        *  pointed-to memory is not touched in any way.  Managing the pointer is
1495:/usr/include/c++/11/bits/stl_vector.h ****        *  the user's responsibility.
1496:/usr/include/c++/11/bits/stl_vector.h ****        */
1497:/usr/include/c++/11/bits/stl_vector.h ****       void
1498:/usr/include/c++/11/bits/stl_vector.h ****       clear() _GLIBCXX_NOEXCEPT
1499:/usr/include/c++/11/bits/stl_vector.h ****       { _M_erase_at_end(this->_M_impl._M_start); }
1500:/usr/include/c++/11/bits/stl_vector.h **** 
1501:/usr/include/c++/11/bits/stl_vector.h ****     protected:
1502:/usr/include/c++/11/bits/stl_vector.h ****       /**
1503:/usr/include/c++/11/bits/stl_vector.h ****        *  Memory expansion handler.  Uses the member allocation function to
1504:/usr/include/c++/11/bits/stl_vector.h ****        *  obtain @a n bytes of memory, and then copies [first,last) into it.
1505:/usr/include/c++/11/bits/stl_vector.h ****        */
1506:/usr/include/c++/11/bits/stl_vector.h ****       template<typename _ForwardIterator>
1507:/usr/include/c++/11/bits/stl_vector.h **** 	pointer
1508:/usr/include/c++/11/bits/stl_vector.h **** 	_M_allocate_and_copy(size_type __n,
1509:/usr/include/c++/11/bits/stl_vector.h **** 			     _ForwardIterator __first, _ForwardIterator __last)
1510:/usr/include/c++/11/bits/stl_vector.h **** 	{
1511:/usr/include/c++/11/bits/stl_vector.h **** 	  pointer __result = this->_M_allocate(__n);
1512:/usr/include/c++/11/bits/stl_vector.h **** 	  __try
1513:/usr/include/c++/11/bits/stl_vector.h **** 	    {
1514:/usr/include/c++/11/bits/stl_vector.h **** 	      std::__uninitialized_copy_a(__first, __last, __result,
1515:/usr/include/c++/11/bits/stl_vector.h **** 					  _M_get_Tp_allocator());
1516:/usr/include/c++/11/bits/stl_vector.h **** 	      return __result;
1517:/usr/include/c++/11/bits/stl_vector.h **** 	    }
1518:/usr/include/c++/11/bits/stl_vector.h **** 	  __catch(...)
1519:/usr/include/c++/11/bits/stl_vector.h **** 	    {
1520:/usr/include/c++/11/bits/stl_vector.h **** 	      _M_deallocate(__result, __n);
1521:/usr/include/c++/11/bits/stl_vector.h **** 	      __throw_exception_again;
1522:/usr/include/c++/11/bits/stl_vector.h **** 	    }
1523:/usr/include/c++/11/bits/stl_vector.h **** 	}
1524:/usr/include/c++/11/bits/stl_vector.h **** 
1525:/usr/include/c++/11/bits/stl_vector.h **** 
1526:/usr/include/c++/11/bits/stl_vector.h ****       // Internal constructor functions follow.
1527:/usr/include/c++/11/bits/stl_vector.h **** 
1528:/usr/include/c++/11/bits/stl_vector.h ****       // Called by the range constructor to implement [23.1.1]/9
1529:/usr/include/c++/11/bits/stl_vector.h **** 
1530:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus < 201103L
1531:/usr/include/c++/11/bits/stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1532:/usr/include/c++/11/bits/stl_vector.h ****       // 438. Ambiguity in the "do the right thing" clause
1533:/usr/include/c++/11/bits/stl_vector.h ****       template<typename _Integer>
1534:/usr/include/c++/11/bits/stl_vector.h **** 	void
1535:/usr/include/c++/11/bits/stl_vector.h **** 	_M_initialize_dispatch(_Integer __n, _Integer __value, __true_type)
1536:/usr/include/c++/11/bits/stl_vector.h **** 	{
1537:/usr/include/c++/11/bits/stl_vector.h **** 	  this->_M_impl._M_start = _M_allocate(_S_check_init_len(
1538:/usr/include/c++/11/bits/stl_vector.h **** 		static_cast<size_type>(__n), _M_get_Tp_allocator()));
1539:/usr/include/c++/11/bits/stl_vector.h **** 	  this->_M_impl._M_end_of_storage =
1540:/usr/include/c++/11/bits/stl_vector.h **** 	    this->_M_impl._M_start + static_cast<size_type>(__n);
1541:/usr/include/c++/11/bits/stl_vector.h **** 	  _M_fill_initialize(static_cast<size_type>(__n), __value);
1542:/usr/include/c++/11/bits/stl_vector.h **** 	}
1543:/usr/include/c++/11/bits/stl_vector.h **** 
1544:/usr/include/c++/11/bits/stl_vector.h ****       // Called by the range constructor to implement [23.1.1]/9
1545:/usr/include/c++/11/bits/stl_vector.h ****       template<typename _InputIterator>
1546:/usr/include/c++/11/bits/stl_vector.h **** 	void
1547:/usr/include/c++/11/bits/stl_vector.h **** 	_M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
1548:/usr/include/c++/11/bits/stl_vector.h **** 			       __false_type)
1549:/usr/include/c++/11/bits/stl_vector.h **** 	{
1550:/usr/include/c++/11/bits/stl_vector.h **** 	  _M_range_initialize(__first, __last,
1551:/usr/include/c++/11/bits/stl_vector.h **** 			      std::__iterator_category(__first));
1552:/usr/include/c++/11/bits/stl_vector.h **** 	}
1553:/usr/include/c++/11/bits/stl_vector.h **** #endif
1554:/usr/include/c++/11/bits/stl_vector.h **** 
1555:/usr/include/c++/11/bits/stl_vector.h ****       // Called by the second initialize_dispatch above
1556:/usr/include/c++/11/bits/stl_vector.h ****       template<typename _InputIterator>
1557:/usr/include/c++/11/bits/stl_vector.h **** 	void
1558:/usr/include/c++/11/bits/stl_vector.h **** 	_M_range_initialize(_InputIterator __first, _InputIterator __last,
1559:/usr/include/c++/11/bits/stl_vector.h **** 			    std::input_iterator_tag)
1560:/usr/include/c++/11/bits/stl_vector.h **** 	{
1561:/usr/include/c++/11/bits/stl_vector.h **** 	  __try {
1562:/usr/include/c++/11/bits/stl_vector.h **** 	    for (; __first != __last; ++__first)
1563:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
1564:/usr/include/c++/11/bits/stl_vector.h **** 	      emplace_back(*__first);
1565:/usr/include/c++/11/bits/stl_vector.h **** #else
1566:/usr/include/c++/11/bits/stl_vector.h **** 	      push_back(*__first);
1567:/usr/include/c++/11/bits/stl_vector.h **** #endif
1568:/usr/include/c++/11/bits/stl_vector.h **** 	  } __catch(...) {
1569:/usr/include/c++/11/bits/stl_vector.h **** 	    clear();
1570:/usr/include/c++/11/bits/stl_vector.h **** 	    __throw_exception_again;
1571:/usr/include/c++/11/bits/stl_vector.h **** 	  }
1572:/usr/include/c++/11/bits/stl_vector.h **** 	}
1573:/usr/include/c++/11/bits/stl_vector.h **** 
1574:/usr/include/c++/11/bits/stl_vector.h ****       // Called by the second initialize_dispatch above
1575:/usr/include/c++/11/bits/stl_vector.h ****       template<typename _ForwardIterator>
1576:/usr/include/c++/11/bits/stl_vector.h **** 	void
1577:/usr/include/c++/11/bits/stl_vector.h **** 	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
1578:/usr/include/c++/11/bits/stl_vector.h **** 			    std::forward_iterator_tag)
1579:/usr/include/c++/11/bits/stl_vector.h **** 	{
1580:/usr/include/c++/11/bits/stl_vector.h **** 	  const size_type __n = std::distance(__first, __last);
1581:/usr/include/c++/11/bits/stl_vector.h **** 	  this->_M_impl._M_start
1582:/usr/include/c++/11/bits/stl_vector.h **** 	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
1583:/usr/include/c++/11/bits/stl_vector.h **** 	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
1584:/usr/include/c++/11/bits/stl_vector.h **** 	  this->_M_impl._M_finish =
1585:/usr/include/c++/11/bits/stl_vector.h **** 	    std::__uninitialized_copy_a(__first, __last,
1586:/usr/include/c++/11/bits/stl_vector.h **** 					this->_M_impl._M_start,
1587:/usr/include/c++/11/bits/stl_vector.h **** 					_M_get_Tp_allocator());
1588:/usr/include/c++/11/bits/stl_vector.h **** 	}
1589:/usr/include/c++/11/bits/stl_vector.h **** 
1590:/usr/include/c++/11/bits/stl_vector.h ****       // Called by the first initialize_dispatch above and by the
1591:/usr/include/c++/11/bits/stl_vector.h ****       // vector(n,value,a) constructor.
1592:/usr/include/c++/11/bits/stl_vector.h ****       void
1593:/usr/include/c++/11/bits/stl_vector.h ****       _M_fill_initialize(size_type __n, const value_type& __value)
1594:/usr/include/c++/11/bits/stl_vector.h ****       {
1595:/usr/include/c++/11/bits/stl_vector.h **** 	this->_M_impl._M_finish =
1596:/usr/include/c++/11/bits/stl_vector.h **** 	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
1597:/usr/include/c++/11/bits/stl_vector.h **** 					_M_get_Tp_allocator());
1598:/usr/include/c++/11/bits/stl_vector.h ****       }
1599:/usr/include/c++/11/bits/stl_vector.h **** 
1600:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
1601:/usr/include/c++/11/bits/stl_vector.h ****       // Called by the vector(n) constructor.
1602:/usr/include/c++/11/bits/stl_vector.h ****       void
1603:/usr/include/c++/11/bits/stl_vector.h ****       _M_default_initialize(size_type __n)
1604:/usr/include/c++/11/bits/stl_vector.h ****       {
1605:/usr/include/c++/11/bits/stl_vector.h **** 	this->_M_impl._M_finish =
1606:/usr/include/c++/11/bits/stl_vector.h **** 	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
1607:/usr/include/c++/11/bits/stl_vector.h **** 					   _M_get_Tp_allocator());
1608:/usr/include/c++/11/bits/stl_vector.h ****       }
1609:/usr/include/c++/11/bits/stl_vector.h **** #endif
1610:/usr/include/c++/11/bits/stl_vector.h **** 
1611:/usr/include/c++/11/bits/stl_vector.h ****       // Internal assign functions follow.  The *_aux functions do the actual
1612:/usr/include/c++/11/bits/stl_vector.h ****       // assignment work for the range versions.
1613:/usr/include/c++/11/bits/stl_vector.h **** 
1614:/usr/include/c++/11/bits/stl_vector.h ****       // Called by the range assign to implement [23.1.1]/9
1615:/usr/include/c++/11/bits/stl_vector.h **** 
1616:/usr/include/c++/11/bits/stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1617:/usr/include/c++/11/bits/stl_vector.h ****       // 438. Ambiguity in the "do the right thing" clause
1618:/usr/include/c++/11/bits/stl_vector.h ****       template<typename _Integer>
1619:/usr/include/c++/11/bits/stl_vector.h **** 	void
1620:/usr/include/c++/11/bits/stl_vector.h **** 	_M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
1621:/usr/include/c++/11/bits/stl_vector.h **** 	{ _M_fill_assign(__n, __val); }
1622:/usr/include/c++/11/bits/stl_vector.h **** 
1623:/usr/include/c++/11/bits/stl_vector.h ****       // Called by the range assign to implement [23.1.1]/9
1624:/usr/include/c++/11/bits/stl_vector.h ****       template<typename _InputIterator>
1625:/usr/include/c++/11/bits/stl_vector.h **** 	void
1626:/usr/include/c++/11/bits/stl_vector.h **** 	_M_assign_dispatch(_InputIterator __first, _InputIterator __last,
1627:/usr/include/c++/11/bits/stl_vector.h **** 			   __false_type)
1628:/usr/include/c++/11/bits/stl_vector.h **** 	{ _M_assign_aux(__first, __last, std::__iterator_category(__first)); }
1629:/usr/include/c++/11/bits/stl_vector.h **** 
1630:/usr/include/c++/11/bits/stl_vector.h ****       // Called by the second assign_dispatch above
1631:/usr/include/c++/11/bits/stl_vector.h ****       template<typename _InputIterator>
1632:/usr/include/c++/11/bits/stl_vector.h **** 	void
1633:/usr/include/c++/11/bits/stl_vector.h **** 	_M_assign_aux(_InputIterator __first, _InputIterator __last,
1634:/usr/include/c++/11/bits/stl_vector.h **** 		      std::input_iterator_tag);
1635:/usr/include/c++/11/bits/stl_vector.h **** 
1636:/usr/include/c++/11/bits/stl_vector.h ****       // Called by the second assign_dispatch above
1637:/usr/include/c++/11/bits/stl_vector.h ****       template<typename _ForwardIterator>
1638:/usr/include/c++/11/bits/stl_vector.h **** 	void
1639:/usr/include/c++/11/bits/stl_vector.h **** 	_M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
1640:/usr/include/c++/11/bits/stl_vector.h **** 		      std::forward_iterator_tag);
1641:/usr/include/c++/11/bits/stl_vector.h **** 
1642:/usr/include/c++/11/bits/stl_vector.h ****       // Called by assign(n,t), and the range assign when it turns out
1643:/usr/include/c++/11/bits/stl_vector.h ****       // to be the same thing.
1644:/usr/include/c++/11/bits/stl_vector.h ****       void
1645:/usr/include/c++/11/bits/stl_vector.h ****       _M_fill_assign(size_type __n, const value_type& __val);
1646:/usr/include/c++/11/bits/stl_vector.h **** 
1647:/usr/include/c++/11/bits/stl_vector.h ****       // Internal insert functions follow.
1648:/usr/include/c++/11/bits/stl_vector.h **** 
1649:/usr/include/c++/11/bits/stl_vector.h ****       // Called by the range insert to implement [23.1.1]/9
1650:/usr/include/c++/11/bits/stl_vector.h **** 
1651:/usr/include/c++/11/bits/stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1652:/usr/include/c++/11/bits/stl_vector.h ****       // 438. Ambiguity in the "do the right thing" clause
1653:/usr/include/c++/11/bits/stl_vector.h ****       template<typename _Integer>
1654:/usr/include/c++/11/bits/stl_vector.h **** 	void
1655:/usr/include/c++/11/bits/stl_vector.h **** 	_M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val,
1656:/usr/include/c++/11/bits/stl_vector.h **** 			   __true_type)
1657:/usr/include/c++/11/bits/stl_vector.h **** 	{ _M_fill_insert(__pos, __n, __val); }
1658:/usr/include/c++/11/bits/stl_vector.h **** 
1659:/usr/include/c++/11/bits/stl_vector.h ****       // Called by the range insert to implement [23.1.1]/9
1660:/usr/include/c++/11/bits/stl_vector.h ****       template<typename _InputIterator>
1661:/usr/include/c++/11/bits/stl_vector.h **** 	void
1662:/usr/include/c++/11/bits/stl_vector.h **** 	_M_insert_dispatch(iterator __pos, _InputIterator __first,
1663:/usr/include/c++/11/bits/stl_vector.h **** 			   _InputIterator __last, __false_type)
1664:/usr/include/c++/11/bits/stl_vector.h **** 	{
1665:/usr/include/c++/11/bits/stl_vector.h **** 	  _M_range_insert(__pos, __first, __last,
1666:/usr/include/c++/11/bits/stl_vector.h **** 			  std::__iterator_category(__first));
1667:/usr/include/c++/11/bits/stl_vector.h **** 	}
1668:/usr/include/c++/11/bits/stl_vector.h **** 
1669:/usr/include/c++/11/bits/stl_vector.h ****       // Called by the second insert_dispatch above
1670:/usr/include/c++/11/bits/stl_vector.h ****       template<typename _InputIterator>
1671:/usr/include/c++/11/bits/stl_vector.h **** 	void
1672:/usr/include/c++/11/bits/stl_vector.h **** 	_M_range_insert(iterator __pos, _InputIterator __first,
1673:/usr/include/c++/11/bits/stl_vector.h **** 			_InputIterator __last, std::input_iterator_tag);
1674:/usr/include/c++/11/bits/stl_vector.h **** 
1675:/usr/include/c++/11/bits/stl_vector.h ****       // Called by the second insert_dispatch above
1676:/usr/include/c++/11/bits/stl_vector.h ****       template<typename _ForwardIterator>
1677:/usr/include/c++/11/bits/stl_vector.h **** 	void
1678:/usr/include/c++/11/bits/stl_vector.h **** 	_M_range_insert(iterator __pos, _ForwardIterator __first,
1679:/usr/include/c++/11/bits/stl_vector.h **** 			_ForwardIterator __last, std::forward_iterator_tag);
1680:/usr/include/c++/11/bits/stl_vector.h **** 
1681:/usr/include/c++/11/bits/stl_vector.h ****       // Called by insert(p,n,x), and the range insert when it turns out to be
1682:/usr/include/c++/11/bits/stl_vector.h ****       // the same thing.
1683:/usr/include/c++/11/bits/stl_vector.h ****       void
1684:/usr/include/c++/11/bits/stl_vector.h ****       _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);
1685:/usr/include/c++/11/bits/stl_vector.h **** 
1686:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
1687:/usr/include/c++/11/bits/stl_vector.h ****       // Called by resize(n).
1688:/usr/include/c++/11/bits/stl_vector.h ****       void
1689:/usr/include/c++/11/bits/stl_vector.h ****       _M_default_append(size_type __n);
1690:/usr/include/c++/11/bits/stl_vector.h **** 
1691:/usr/include/c++/11/bits/stl_vector.h ****       bool
1692:/usr/include/c++/11/bits/stl_vector.h ****       _M_shrink_to_fit();
1693:/usr/include/c++/11/bits/stl_vector.h **** #endif
1694:/usr/include/c++/11/bits/stl_vector.h **** 
1695:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus < 201103L
1696:/usr/include/c++/11/bits/stl_vector.h ****       // Called by insert(p,x)
1697:/usr/include/c++/11/bits/stl_vector.h ****       void
1698:/usr/include/c++/11/bits/stl_vector.h ****       _M_insert_aux(iterator __position, const value_type& __x);
1699:/usr/include/c++/11/bits/stl_vector.h **** 
1700:/usr/include/c++/11/bits/stl_vector.h ****       void
1701:/usr/include/c++/11/bits/stl_vector.h ****       _M_realloc_insert(iterator __position, const value_type& __x);
1702:/usr/include/c++/11/bits/stl_vector.h **** #else
1703:/usr/include/c++/11/bits/stl_vector.h ****       // A value_type object constructed with _Alloc_traits::construct()
1704:/usr/include/c++/11/bits/stl_vector.h ****       // and destroyed with _Alloc_traits::destroy().
1705:/usr/include/c++/11/bits/stl_vector.h ****       struct _Temporary_value
1706:/usr/include/c++/11/bits/stl_vector.h ****       {
1707:/usr/include/c++/11/bits/stl_vector.h **** 	template<typename... _Args>
1708:/usr/include/c++/11/bits/stl_vector.h **** 	  explicit
1709:/usr/include/c++/11/bits/stl_vector.h **** 	  _Temporary_value(vector* __vec, _Args&&... __args) : _M_this(__vec)
1710:/usr/include/c++/11/bits/stl_vector.h **** 	  {
1711:/usr/include/c++/11/bits/stl_vector.h **** 	    _Alloc_traits::construct(_M_this->_M_impl, _M_ptr(),
1712:/usr/include/c++/11/bits/stl_vector.h **** 				     std::forward<_Args>(__args)...);
1713:/usr/include/c++/11/bits/stl_vector.h **** 	  }
1714:/usr/include/c++/11/bits/stl_vector.h **** 
1715:/usr/include/c++/11/bits/stl_vector.h **** 	~_Temporary_value()
1716:/usr/include/c++/11/bits/stl_vector.h **** 	{ _Alloc_traits::destroy(_M_this->_M_impl, _M_ptr()); }
1717:/usr/include/c++/11/bits/stl_vector.h **** 
1718:/usr/include/c++/11/bits/stl_vector.h **** 	value_type&
1719:/usr/include/c++/11/bits/stl_vector.h **** 	_M_val() { return *_M_ptr(); }
1720:/usr/include/c++/11/bits/stl_vector.h **** 
1721:/usr/include/c++/11/bits/stl_vector.h ****       private:
1722:/usr/include/c++/11/bits/stl_vector.h **** 	_Tp*
1723:/usr/include/c++/11/bits/stl_vector.h **** 	_M_ptr() { return reinterpret_cast<_Tp*>(&__buf); }
1724:/usr/include/c++/11/bits/stl_vector.h **** 
1725:/usr/include/c++/11/bits/stl_vector.h **** 	vector* _M_this;
1726:/usr/include/c++/11/bits/stl_vector.h **** 	typename aligned_storage<sizeof(_Tp), alignof(_Tp)>::type __buf;
1727:/usr/include/c++/11/bits/stl_vector.h ****       };
1728:/usr/include/c++/11/bits/stl_vector.h **** 
1729:/usr/include/c++/11/bits/stl_vector.h ****       // Called by insert(p,x) and other functions when insertion needs to
1730:/usr/include/c++/11/bits/stl_vector.h ****       // reallocate or move existing elements. _Arg is either _Tp& or _Tp.
1731:/usr/include/c++/11/bits/stl_vector.h ****       template<typename _Arg>
1732:/usr/include/c++/11/bits/stl_vector.h **** 	void
1733:/usr/include/c++/11/bits/stl_vector.h **** 	_M_insert_aux(iterator __position, _Arg&& __arg);
1734:/usr/include/c++/11/bits/stl_vector.h **** 
1735:/usr/include/c++/11/bits/stl_vector.h ****       template<typename... _Args>
1736:/usr/include/c++/11/bits/stl_vector.h **** 	void
1737:/usr/include/c++/11/bits/stl_vector.h **** 	_M_realloc_insert(iterator __position, _Args&&... __args);
1738:/usr/include/c++/11/bits/stl_vector.h **** 
1739:/usr/include/c++/11/bits/stl_vector.h ****       // Either move-construct at the end, or forward to _M_insert_aux.
1740:/usr/include/c++/11/bits/stl_vector.h ****       iterator
1741:/usr/include/c++/11/bits/stl_vector.h ****       _M_insert_rval(const_iterator __position, value_type&& __v);
1742:/usr/include/c++/11/bits/stl_vector.h **** 
1743:/usr/include/c++/11/bits/stl_vector.h ****       // Try to emplace at the end, otherwise forward to _M_insert_aux.
1744:/usr/include/c++/11/bits/stl_vector.h ****       template<typename... _Args>
1745:/usr/include/c++/11/bits/stl_vector.h **** 	iterator
1746:/usr/include/c++/11/bits/stl_vector.h **** 	_M_emplace_aux(const_iterator __position, _Args&&... __args);
1747:/usr/include/c++/11/bits/stl_vector.h **** 
1748:/usr/include/c++/11/bits/stl_vector.h ****       // Emplacing an rvalue of the correct type can use _M_insert_rval.
1749:/usr/include/c++/11/bits/stl_vector.h ****       iterator
1750:/usr/include/c++/11/bits/stl_vector.h ****       _M_emplace_aux(const_iterator __position, value_type&& __v)
1751:/usr/include/c++/11/bits/stl_vector.h ****       { return _M_insert_rval(__position, std::move(__v)); }
1752:/usr/include/c++/11/bits/stl_vector.h **** #endif
1753:/usr/include/c++/11/bits/stl_vector.h **** 
1754:/usr/include/c++/11/bits/stl_vector.h ****       // Called by _M_fill_insert, _M_insert_aux etc.
1755:/usr/include/c++/11/bits/stl_vector.h ****       size_type
1756:/usr/include/c++/11/bits/stl_vector.h ****       _M_check_len(size_type __n, const char* __s) const
 2178              		.loc 5 1756 7
 2179              		.cfi_startproc
 2180 0000 F30F1EFA 		endbr64
 2181 0004 55       		pushq	%rbp
 2182              		.cfi_def_cfa_offset 16
 2183              		.cfi_offset 6, -16
 2184 0005 4889E5   		movq	%rsp, %rbp
 2185              		.cfi_def_cfa_register 6
 2186 0008 53       		pushq	%rbx
 2187 0009 4883EC48 		subq	$72, %rsp
 2188              		.cfi_offset 3, -24
 2189 000d 48897DC8 		movq	%rdi, -56(%rbp)
 2190 0011 488975C0 		movq	%rsi, -64(%rbp)
 2191 0015 488955B8 		movq	%rdx, -72(%rbp)
 2192              		.loc 5 1756 7
 2193 0019 64488B04 		movq	%fs:40, %rax
 2193      25280000 
 2193      00
 2194 0022 488945E8 		movq	%rax, -24(%rbp)
 2195 0026 31C0     		xorl	%eax, %eax
1757:/usr/include/c++/11/bits/stl_vector.h ****       {
1758:/usr/include/c++/11/bits/stl_vector.h **** 	if (max_size() - size() < __n)
 2196              		.loc 5 1758 14
 2197 0028 488B45C8 		movq	-56(%rbp), %rax
 2198 002c 4889C7   		movq	%rax, %rdi
 2199 002f E8000000 		call	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE8max_sizeEv@PLT
 2199      00
 2200 0034 4889C3   		movq	%rax, %rbx
 2201              		.loc 5 1758 23
 2202 0037 488B45C8 		movq	-56(%rbp), %rax
 2203 003b 4889C7   		movq	%rax, %rdi
 2204 003e E8000000 		call	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4sizeEv@PLT
 2204      00
 2205              		.loc 5 1758 17
 2206 0043 4829C3   		subq	%rax, %rbx
 2207 0046 4889DA   		movq	%rbx, %rdx
 2208              		.loc 5 1758 26
 2209 0049 488B45C0 		movq	-64(%rbp), %rax
 2210 004d 4839C2   		cmpq	%rax, %rdx
 2211 0050 0F92C0   		setb	%al
 2212              		.loc 5 1758 2
 2213 0053 84C0     		testb	%al, %al
 2214 0055 740C     		je	.L103
1759:/usr/include/c++/11/bits/stl_vector.h **** 	  __throw_length_error(__N(__s));
 2215              		.loc 5 1759 24
 2216 0057 488B45B8 		movq	-72(%rbp), %rax
 2217 005b 4889C7   		movq	%rax, %rdi
 2218 005e E8000000 		call	_ZSt20__throw_length_errorPKc@PLT
 2218      00
 2219              	.L103:
1760:/usr/include/c++/11/bits/stl_vector.h **** 
1761:/usr/include/c++/11/bits/stl_vector.h **** 	const size_type __len = size() + (std::max)(size(), __n);
 2220              		.loc 5 1761 30
 2221 0063 488B45C8 		movq	-56(%rbp), %rax
 2222 0067 4889C7   		movq	%rax, %rdi
 2223 006a E8000000 		call	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4sizeEv@PLT
 2223      00
 2224 006f 4889C3   		movq	%rax, %rbx
 2225              		.loc 5 1761 50
 2226 0072 488B45C8 		movq	-56(%rbp), %rax
 2227 0076 4889C7   		movq	%rax, %rdi
 2228 0079 E8000000 		call	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4sizeEv@PLT
 2228      00
 2229 007e 488945D8 		movq	%rax, -40(%rbp)
 2230              		.loc 5 1761 45
 2231 0082 488D55C0 		leaq	-64(%rbp), %rdx
 2232 0086 488D45D8 		leaq	-40(%rbp), %rax
 2233 008a 4889D6   		movq	%rdx, %rsi
 2234 008d 4889C7   		movq	%rax, %rdi
 2235 0090 E8000000 		call	_ZSt3maxImERKT_S2_S2_@PLT
 2235      00
 2236              		.loc 5 1761 33
 2237 0095 488B00   		movq	(%rax), %rax
 2238              		.loc 5 1761 18
 2239 0098 4801D8   		addq	%rbx, %rax
 2240 009b 488945E0 		movq	%rax, -32(%rbp)
1762:/usr/include/c++/11/bits/stl_vector.h **** 	return (__len < size() || __len > max_size()) ? max_size() : __len;
 2241              		.loc 5 1762 22
 2242 009f 488B45C8 		movq	-56(%rbp), %rax
 2243 00a3 4889C7   		movq	%rax, %rdi
 2244 00a6 E8000000 		call	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4sizeEv@PLT
 2244      00
 2245              		.loc 5 1762 48
 2246 00ab 483945E0 		cmpq	%rax, -32(%rbp)
 2247 00af 7212     		jb	.L104
 2248              		.loc 5 1762 44 discriminator 2
 2249 00b1 488B45C8 		movq	-56(%rbp), %rax
 2250 00b5 4889C7   		movq	%rax, %rdi
 2251 00b8 E8000000 		call	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE8max_sizeEv@PLT
 2251      00
 2252              		.loc 5 1762 25 discriminator 2
 2253 00bd 483945E0 		cmpq	%rax, -32(%rbp)
 2254 00c1 760E     		jbe	.L105
 2255              	.L104:
 2256              		.loc 5 1762 58 discriminator 3
 2257 00c3 488B45C8 		movq	-56(%rbp), %rax
 2258 00c7 4889C7   		movq	%rax, %rdi
 2259 00ca E8000000 		call	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE8max_sizeEv@PLT
 2259      00
 2260              		.loc 5 1762 48 discriminator 3
 2261 00cf EB04     		jmp	.L106
 2262              	.L105:
 2263              		.loc 5 1762 48 is_stmt 0 discriminator 4
 2264 00d1 488B45E0 		movq	-32(%rbp), %rax
 2265              	.L106:
1763:/usr/include/c++/11/bits/stl_vector.h ****       }
 2266              		.loc 5 1763 7 is_stmt 1 discriminator 6
 2267 00d5 488B55E8 		movq	-24(%rbp), %rdx
 2268 00d9 64482B14 		subq	%fs:40, %rdx
 2268      25280000 
 2268      00
 2269 00e2 7405     		je	.L108
 2270              		.loc 5 1763 7 is_stmt 0
 2271 00e4 E8000000 		call	__stack_chk_fail@PLT
 2271      00
 2272              	.L108:
 2273 00e9 488B5DF8 		movq	-8(%rbp), %rbx
 2274 00ed C9       		leave
 2275              		.cfi_def_cfa 7, 8
 2276 00ee C3       		ret
 2277              		.cfi_endproc
 2278              	.LFE1006:
 2280              		.section	.text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE5beginEv,"axG",@progbits,_ZNSt6
 2281              		.align 2
 2282              		.weak	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE5beginEv
 2284              	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE5beginEv:
 2285              	.LFB1007:
 811:/usr/include/c++/11/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_start); }
 2286              		.loc 5 811 7 is_stmt 1
 2287              		.cfi_startproc
 2288 0000 F30F1EFA 		endbr64
 2289 0004 55       		pushq	%rbp
 2290              		.cfi_def_cfa_offset 16
 2291              		.cfi_offset 6, -16
 2292 0005 4889E5   		movq	%rsp, %rbp
 2293              		.cfi_def_cfa_register 6
 2294 0008 4883EC20 		subq	$32, %rsp
 2295 000c 48897DE8 		movq	%rdi, -24(%rbp)
 811:/usr/include/c++/11/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_start); }
 2296              		.loc 5 811 7
 2297 0010 64488B04 		movq	%fs:40, %rax
 2297      25280000 
 2297      00
 2298 0019 488945F8 		movq	%rax, -8(%rbp)
 2299 001d 31C0     		xorl	%eax, %eax
 812:/usr/include/c++/11/bits/stl_vector.h **** 
 2300              		.loc 5 812 39
 2301 001f 488B55E8 		movq	-24(%rbp), %rdx
 812:/usr/include/c++/11/bits/stl_vector.h **** 
 2302              		.loc 5 812 16
 2303 0023 488D45F0 		leaq	-16(%rbp), %rax
 2304 0027 4889D6   		movq	%rdx, %rsi
 2305 002a 4889C7   		movq	%rax, %rdi
 2306 002d E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC1ERKS
 2306      00
 812:/usr/include/c++/11/bits/stl_vector.h **** 
 2307              		.loc 5 812 47
 2308 0032 488B45F0 		movq	-16(%rbp), %rax
 812:/usr/include/c++/11/bits/stl_vector.h **** 
 2309              		.loc 5 812 50
 2310 0036 488B55F8 		movq	-8(%rbp), %rdx
 2311 003a 64482B14 		subq	%fs:40, %rdx
 2311      25280000 
 2311      00
 2312 0043 7405     		je	.L111
 2313 0045 E8000000 		call	__stack_chk_fail@PLT
 2313      00
 2314              	.L111:
 2315 004a C9       		leave
 2316              		.cfi_def_cfa 7, 8
 2317 004b C3       		ret
 2318              		.cfi_endproc
 2319              	.LFE1007:
 2321              		.section	.text._ZN9__gnu_cxxmiIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEENS_17__norma
 2322              		.weak	_ZN9__gnu_cxxmiIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEENS_17__normal_iterato
 2324              	_ZN9__gnu_cxxmiIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_
 2325              	.LFB1008:
1085:/usr/include/c++/11/bits/stl_iterator.h **** 
1086:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1087:/usr/include/c++/11/bits/stl_iterator.h ****       const _Iterator&
1088:/usr/include/c++/11/bits/stl_iterator.h ****       base() const _GLIBCXX_NOEXCEPT
1089:/usr/include/c++/11/bits/stl_iterator.h ****       { return _M_current; }
1090:/usr/include/c++/11/bits/stl_iterator.h ****     };
1091:/usr/include/c++/11/bits/stl_iterator.h **** 
1092:/usr/include/c++/11/bits/stl_iterator.h ****   // Note: In what follows, the left- and right-hand-side iterators are
1093:/usr/include/c++/11/bits/stl_iterator.h ****   // allowed to vary in types (conceptually in cv-qualification) so that
1094:/usr/include/c++/11/bits/stl_iterator.h ****   // comparison between cv-qualified and non-cv-qualified iterators be
1095:/usr/include/c++/11/bits/stl_iterator.h ****   // valid.  However, the greedy and unfriendly operators in std::rel_ops
1096:/usr/include/c++/11/bits/stl_iterator.h ****   // will make overload resolution ambiguous (when in scope) if we don't
1097:/usr/include/c++/11/bits/stl_iterator.h ****   // provide overloads whose operands are of the same type.  Can someone
1098:/usr/include/c++/11/bits/stl_iterator.h ****   // remind me what generic programming is about? -- Gaby
1099:/usr/include/c++/11/bits/stl_iterator.h **** 
1100:/usr/include/c++/11/bits/stl_iterator.h **** #if __cpp_lib_three_way_comparison
1101:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
1102:/usr/include/c++/11/bits/stl_iterator.h ****     requires requires (_IteratorL __lhs, _IteratorR __rhs)
1103:/usr/include/c++/11/bits/stl_iterator.h ****     { { __lhs == __rhs } -> std::convertible_to<bool>; }
1104:/usr/include/c++/11/bits/stl_iterator.h ****     constexpr bool
1105:/usr/include/c++/11/bits/stl_iterator.h ****     operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
1106:/usr/include/c++/11/bits/stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
1107:/usr/include/c++/11/bits/stl_iterator.h ****     noexcept(noexcept(__lhs.base() == __rhs.base()))
1108:/usr/include/c++/11/bits/stl_iterator.h ****     { return __lhs.base() == __rhs.base(); }
1109:/usr/include/c++/11/bits/stl_iterator.h **** 
1110:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
1111:/usr/include/c++/11/bits/stl_iterator.h ****     constexpr std::__detail::__synth3way_t<_IteratorR, _IteratorL>
1112:/usr/include/c++/11/bits/stl_iterator.h ****     operator<=>(const __normal_iterator<_IteratorL, _Container>& __lhs,
1113:/usr/include/c++/11/bits/stl_iterator.h **** 		const __normal_iterator<_IteratorR, _Container>& __rhs)
1114:/usr/include/c++/11/bits/stl_iterator.h ****     noexcept(noexcept(std::__detail::__synth3way(__lhs.base(), __rhs.base())))
1115:/usr/include/c++/11/bits/stl_iterator.h ****     { return std::__detail::__synth3way(__lhs.base(), __rhs.base()); }
1116:/usr/include/c++/11/bits/stl_iterator.h **** #else
1117:/usr/include/c++/11/bits/stl_iterator.h ****    // Forward iterator requirements
1118:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
1119:/usr/include/c++/11/bits/stl_iterator.h ****     _GLIBCXX20_CONSTEXPR
1120:/usr/include/c++/11/bits/stl_iterator.h ****     inline bool
1121:/usr/include/c++/11/bits/stl_iterator.h ****     operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
1122:/usr/include/c++/11/bits/stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
1123:/usr/include/c++/11/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1124:/usr/include/c++/11/bits/stl_iterator.h ****     { return __lhs.base() == __rhs.base(); }
1125:/usr/include/c++/11/bits/stl_iterator.h **** 
1126:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
1127:/usr/include/c++/11/bits/stl_iterator.h ****     _GLIBCXX20_CONSTEXPR
1128:/usr/include/c++/11/bits/stl_iterator.h ****     inline bool
1129:/usr/include/c++/11/bits/stl_iterator.h ****     operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
1130:/usr/include/c++/11/bits/stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
1131:/usr/include/c++/11/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1132:/usr/include/c++/11/bits/stl_iterator.h ****     { return __lhs.base() == __rhs.base(); }
1133:/usr/include/c++/11/bits/stl_iterator.h **** 
1134:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
1135:/usr/include/c++/11/bits/stl_iterator.h ****     _GLIBCXX20_CONSTEXPR
1136:/usr/include/c++/11/bits/stl_iterator.h ****     inline bool
1137:/usr/include/c++/11/bits/stl_iterator.h ****     operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
1138:/usr/include/c++/11/bits/stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
1139:/usr/include/c++/11/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1140:/usr/include/c++/11/bits/stl_iterator.h ****     { return __lhs.base() != __rhs.base(); }
1141:/usr/include/c++/11/bits/stl_iterator.h **** 
1142:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
1143:/usr/include/c++/11/bits/stl_iterator.h ****     _GLIBCXX20_CONSTEXPR
1144:/usr/include/c++/11/bits/stl_iterator.h ****     inline bool
1145:/usr/include/c++/11/bits/stl_iterator.h ****     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
1146:/usr/include/c++/11/bits/stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
1147:/usr/include/c++/11/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1148:/usr/include/c++/11/bits/stl_iterator.h ****     { return __lhs.base() != __rhs.base(); }
1149:/usr/include/c++/11/bits/stl_iterator.h **** 
1150:/usr/include/c++/11/bits/stl_iterator.h ****   // Random access iterator requirements
1151:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
1152:/usr/include/c++/11/bits/stl_iterator.h ****     inline bool
1153:/usr/include/c++/11/bits/stl_iterator.h ****     operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,
1154:/usr/include/c++/11/bits/stl_iterator.h **** 	      const __normal_iterator<_IteratorR, _Container>& __rhs)
1155:/usr/include/c++/11/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1156:/usr/include/c++/11/bits/stl_iterator.h ****     { return __lhs.base() < __rhs.base(); }
1157:/usr/include/c++/11/bits/stl_iterator.h **** 
1158:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
1159:/usr/include/c++/11/bits/stl_iterator.h ****     _GLIBCXX20_CONSTEXPR
1160:/usr/include/c++/11/bits/stl_iterator.h ****     inline bool
1161:/usr/include/c++/11/bits/stl_iterator.h ****     operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
1162:/usr/include/c++/11/bits/stl_iterator.h **** 	      const __normal_iterator<_Iterator, _Container>& __rhs)
1163:/usr/include/c++/11/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1164:/usr/include/c++/11/bits/stl_iterator.h ****     { return __lhs.base() < __rhs.base(); }
1165:/usr/include/c++/11/bits/stl_iterator.h **** 
1166:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
1167:/usr/include/c++/11/bits/stl_iterator.h ****     inline bool
1168:/usr/include/c++/11/bits/stl_iterator.h ****     operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,
1169:/usr/include/c++/11/bits/stl_iterator.h **** 	      const __normal_iterator<_IteratorR, _Container>& __rhs)
1170:/usr/include/c++/11/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1171:/usr/include/c++/11/bits/stl_iterator.h ****     { return __lhs.base() > __rhs.base(); }
1172:/usr/include/c++/11/bits/stl_iterator.h **** 
1173:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
1174:/usr/include/c++/11/bits/stl_iterator.h ****     _GLIBCXX20_CONSTEXPR
1175:/usr/include/c++/11/bits/stl_iterator.h ****     inline bool
1176:/usr/include/c++/11/bits/stl_iterator.h ****     operator>(const __normal_iterator<_Iterator, _Container>& __lhs,
1177:/usr/include/c++/11/bits/stl_iterator.h **** 	      const __normal_iterator<_Iterator, _Container>& __rhs)
1178:/usr/include/c++/11/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1179:/usr/include/c++/11/bits/stl_iterator.h ****     { return __lhs.base() > __rhs.base(); }
1180:/usr/include/c++/11/bits/stl_iterator.h **** 
1181:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
1182:/usr/include/c++/11/bits/stl_iterator.h ****     inline bool
1183:/usr/include/c++/11/bits/stl_iterator.h ****     operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,
1184:/usr/include/c++/11/bits/stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
1185:/usr/include/c++/11/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1186:/usr/include/c++/11/bits/stl_iterator.h ****     { return __lhs.base() <= __rhs.base(); }
1187:/usr/include/c++/11/bits/stl_iterator.h **** 
1188:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
1189:/usr/include/c++/11/bits/stl_iterator.h ****     _GLIBCXX20_CONSTEXPR
1190:/usr/include/c++/11/bits/stl_iterator.h ****     inline bool
1191:/usr/include/c++/11/bits/stl_iterator.h ****     operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,
1192:/usr/include/c++/11/bits/stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
1193:/usr/include/c++/11/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1194:/usr/include/c++/11/bits/stl_iterator.h ****     { return __lhs.base() <= __rhs.base(); }
1195:/usr/include/c++/11/bits/stl_iterator.h **** 
1196:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
1197:/usr/include/c++/11/bits/stl_iterator.h ****     inline bool
1198:/usr/include/c++/11/bits/stl_iterator.h ****     operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,
1199:/usr/include/c++/11/bits/stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
1200:/usr/include/c++/11/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1201:/usr/include/c++/11/bits/stl_iterator.h ****     { return __lhs.base() >= __rhs.base(); }
1202:/usr/include/c++/11/bits/stl_iterator.h **** 
1203:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
1204:/usr/include/c++/11/bits/stl_iterator.h ****     _GLIBCXX20_CONSTEXPR
1205:/usr/include/c++/11/bits/stl_iterator.h ****     inline bool
1206:/usr/include/c++/11/bits/stl_iterator.h ****     operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,
1207:/usr/include/c++/11/bits/stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
1208:/usr/include/c++/11/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1209:/usr/include/c++/11/bits/stl_iterator.h ****     { return __lhs.base() >= __rhs.base(); }
1210:/usr/include/c++/11/bits/stl_iterator.h **** #endif // three-way comparison
1211:/usr/include/c++/11/bits/stl_iterator.h **** 
1212:/usr/include/c++/11/bits/stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
1213:/usr/include/c++/11/bits/stl_iterator.h ****   // According to the resolution of DR179 not only the various comparison
1214:/usr/include/c++/11/bits/stl_iterator.h ****   // operators but also operator- must accept mixed iterator/const_iterator
1215:/usr/include/c++/11/bits/stl_iterator.h ****   // parameters.
1216:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
1217:/usr/include/c++/11/bits/stl_iterator.h **** #if __cplusplus >= 201103L
1218:/usr/include/c++/11/bits/stl_iterator.h ****     // DR 685.
1219:/usr/include/c++/11/bits/stl_iterator.h ****     _GLIBCXX20_CONSTEXPR
1220:/usr/include/c++/11/bits/stl_iterator.h ****     inline auto
1221:/usr/include/c++/11/bits/stl_iterator.h ****     operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
1222:/usr/include/c++/11/bits/stl_iterator.h **** 	      const __normal_iterator<_IteratorR, _Container>& __rhs) noexcept
1223:/usr/include/c++/11/bits/stl_iterator.h ****     -> decltype(__lhs.base() - __rhs.base())
1224:/usr/include/c++/11/bits/stl_iterator.h **** #else
1225:/usr/include/c++/11/bits/stl_iterator.h ****     inline typename __normal_iterator<_IteratorL, _Container>::difference_type
1226:/usr/include/c++/11/bits/stl_iterator.h ****     operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
1227:/usr/include/c++/11/bits/stl_iterator.h **** 	      const __normal_iterator<_IteratorR, _Container>& __rhs)
1228:/usr/include/c++/11/bits/stl_iterator.h **** #endif
1229:/usr/include/c++/11/bits/stl_iterator.h ****     { return __lhs.base() - __rhs.base(); }
1230:/usr/include/c++/11/bits/stl_iterator.h **** 
1231:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
1232:/usr/include/c++/11/bits/stl_iterator.h ****     _GLIBCXX20_CONSTEXPR
1233:/usr/include/c++/11/bits/stl_iterator.h ****     inline typename __normal_iterator<_Iterator, _Container>::difference_type
1234:/usr/include/c++/11/bits/stl_iterator.h ****     operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 2326              		.loc 9 1234 5
 2327              		.cfi_startproc
 2328 0000 F30F1EFA 		endbr64
 2329 0004 55       		pushq	%rbp
 2330              		.cfi_def_cfa_offset 16
 2331              		.cfi_offset 6, -16
 2332 0005 4889E5   		movq	%rsp, %rbp
 2333              		.cfi_def_cfa_register 6
 2334 0008 53       		pushq	%rbx
 2335 0009 4883EC18 		subq	$24, %rsp
 2336              		.cfi_offset 3, -24
 2337 000d 48897DE8 		movq	%rdi, -24(%rbp)
 2338 0011 488975E0 		movq	%rsi, -32(%rbp)
1235:/usr/include/c++/11/bits/stl_iterator.h **** 	      const __normal_iterator<_Iterator, _Container>& __rhs)
1236:/usr/include/c++/11/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1237:/usr/include/c++/11/bits/stl_iterator.h ****     { return __lhs.base() - __rhs.base(); }
 2339              		.loc 9 1237 24
 2340 0015 488B45E8 		movq	-24(%rbp), %rax
 2341 0019 4889C7   		movq	%rax, %rdi
 2342 001c E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4base
 2342      00
 2343              		.loc 9 1237 27
 2344 0021 488B18   		movq	(%rax), %rbx
 2345              		.loc 9 1237 39
 2346 0024 488B45E0 		movq	-32(%rbp), %rax
 2347 0028 4889C7   		movq	%rax, %rdi
 2348 002b E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4base
 2348      00
 2349              		.loc 9 1237 27
 2350 0030 488B10   		movq	(%rax), %rdx
 2351 0033 4889D8   		movq	%rbx, %rax
 2352 0036 4829D0   		subq	%rdx, %rax
 2353              		.loc 9 1237 40
 2354 0039 48C1F807 		sarq	$7, %rax
 2355              		.loc 9 1237 43
 2356 003d 488B5DF8 		movq	-8(%rbp), %rbx
 2357 0041 C9       		leave
 2358              		.cfi_def_cfa 7, 8
 2359 0042 C3       		ret
 2360              		.cfi_endproc
 2361              	.LFE1008:
 2363              		.section	.text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE11_M_allocateEm,"axG",@p
 2364              		.align 2
 2365              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE11_M_allocateEm
 2367              	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE11_M_allocateEm:
 2368              	.LFB1009:
 343:/usr/include/c++/11/bits/stl_vector.h ****       {
 2369              		.loc 5 343 7
 2370              		.cfi_startproc
 2371 0000 F30F1EFA 		endbr64
 2372 0004 55       		pushq	%rbp
 2373              		.cfi_def_cfa_offset 16
 2374              		.cfi_offset 6, -16
 2375 0005 4889E5   		movq	%rsp, %rbp
 2376              		.cfi_def_cfa_register 6
 2377 0008 4883EC10 		subq	$16, %rsp
 2378 000c 48897DF8 		movq	%rdi, -8(%rbp)
 2379 0010 488975F0 		movq	%rsi, -16(%rbp)
 346:/usr/include/c++/11/bits/stl_vector.h ****       }
 2380              		.loc 5 346 18
 2381 0014 48837DF0 		cmpq	$0, -16(%rbp)
 2381      00
 2382 0019 7415     		je	.L115
 346:/usr/include/c++/11/bits/stl_vector.h ****       }
 2383              		.loc 5 346 34 discriminator 1
 2384 001b 488B45F8 		movq	-8(%rbp), %rax
 346:/usr/include/c++/11/bits/stl_vector.h ****       }
 2385              		.loc 5 346 33 discriminator 1
 2386 001f 488B55F0 		movq	-16(%rbp), %rdx
 2387 0023 4889D6   		movq	%rdx, %rsi
 2388 0026 4889C7   		movq	%rax, %rdi
 2389 0029 E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEES2_E8allocateERS3_m@PLT
 2389      00
 346:/usr/include/c++/11/bits/stl_vector.h ****       }
 2390              		.loc 5 346 58 discriminator 1
 2391 002e EB05     		jmp	.L117
 2392              	.L115:
 346:/usr/include/c++/11/bits/stl_vector.h ****       }
 2393              		.loc 5 346 18 discriminator 2
 2394 0030 B8000000 		movl	$0, %eax
 2394      00
 2395              	.L117:
 347:/usr/include/c++/11/bits/stl_vector.h **** 
 2396              		.loc 5 347 7 discriminator 5
 2397 0035 C9       		leave
 2398              		.cfi_def_cfa 7, 8
 2399 0036 C3       		ret
 2400              		.cfi_endproc
 2401              	.LFE1009:
 2403              		.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS
 2404              		.align 2
 2405              		.weak	_ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4bas
 2407              	_ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4baseEv:
 2408              	.LFB1010:
1088:/usr/include/c++/11/bits/stl_iterator.h ****       { return _M_current; }
 2409              		.loc 9 1088 7
 2410              		.cfi_startproc
 2411 0000 F30F1EFA 		endbr64
 2412 0004 55       		pushq	%rbp
 2413              		.cfi_def_cfa_offset 16
 2414              		.cfi_offset 6, -16
 2415 0005 4889E5   		movq	%rsp, %rbp
 2416              		.cfi_def_cfa_register 6
 2417 0008 48897DF8 		movq	%rdi, -8(%rbp)
1089:/usr/include/c++/11/bits/stl_iterator.h ****     };
 2418              		.loc 9 1089 16
 2419 000c 488B45F8 		movq	-8(%rbp), %rax
1089:/usr/include/c++/11/bits/stl_iterator.h ****     };
 2420              		.loc 9 1089 28
 2421 0010 5D       		popq	%rbp
 2422              		.cfi_def_cfa 7, 8
 2423 0011 C3       		ret
 2424              		.cfi_endproc
 2425              	.LFE1010:
 2427              		.section	.text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv,
 2428              		.align 2
 2429              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv
 2431              	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv:
 2432              	.LFB1011:
 276:/usr/include/c++/11/bits/stl_vector.h ****       { return this->_M_impl; }
 2433              		.loc 5 276 7
 2434              		.cfi_startproc
 2435 0000 F30F1EFA 		endbr64
 2436 0004 55       		pushq	%rbp
 2437              		.cfi_def_cfa_offset 16
 2438              		.cfi_offset 6, -16
 2439 0005 4889E5   		movq	%rsp, %rbp
 2440              		.cfi_def_cfa_register 6
 2441 0008 48897DF8 		movq	%rdi, -8(%rbp)
 277:/usr/include/c++/11/bits/stl_vector.h **** 
 2442              		.loc 5 277 22
 2443 000c 488B45F8 		movq	-8(%rbp), %rax
 277:/usr/include/c++/11/bits/stl_vector.h **** 
 2444              		.loc 5 277 31
 2445 0010 5D       		popq	%rbp
 2446              		.cfi_def_cfa 7, 8
 2447 0011 C3       		ret
 2448              		.cfi_endproc
 2449              	.LFE1011:
 2451              		.section	.text._ZSt34__uninitialized_move_if_noexcept_aIPN8UnitTest18DeferredTestResultES2_SaIS1_E
 2452              		.weak	_ZSt34__uninitialized_move_if_noexcept_aIPN8UnitTest18DeferredTestResultES2_SaIS1_EET0_T_S5_
 2454              	_ZSt34__uninitialized_move_if_noexcept_aIPN8UnitTest18DeferredTestResultES2_SaIS1_EET0_T_S5_S4_RT1_
 2455              	.LFB1012:
 2456              		.file 13 "/usr/include/c++/11/bits/stl_uninitialized.h"
   1:/usr/include/c++/11/bits/stl_uninitialized.h **** // Raw memory manipulators -*- C++ -*-
   2:/usr/include/c++/11/bits/stl_uninitialized.h **** 
   3:/usr/include/c++/11/bits/stl_uninitialized.h **** // Copyright (C) 2001-2021 Free Software Foundation, Inc.
   4:/usr/include/c++/11/bits/stl_uninitialized.h **** //
   5:/usr/include/c++/11/bits/stl_uninitialized.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/11/bits/stl_uninitialized.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/11/bits/stl_uninitialized.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/11/bits/stl_uninitialized.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/11/bits/stl_uninitialized.h **** // any later version.
  10:/usr/include/c++/11/bits/stl_uninitialized.h **** 
  11:/usr/include/c++/11/bits/stl_uninitialized.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/11/bits/stl_uninitialized.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/11/bits/stl_uninitialized.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/11/bits/stl_uninitialized.h **** // GNU General Public License for more details.
  15:/usr/include/c++/11/bits/stl_uninitialized.h **** 
  16:/usr/include/c++/11/bits/stl_uninitialized.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/11/bits/stl_uninitialized.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/11/bits/stl_uninitialized.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/11/bits/stl_uninitialized.h **** 
  20:/usr/include/c++/11/bits/stl_uninitialized.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/11/bits/stl_uninitialized.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/11/bits/stl_uninitialized.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/11/bits/stl_uninitialized.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/11/bits/stl_uninitialized.h **** 
  25:/usr/include/c++/11/bits/stl_uninitialized.h **** /*
  26:/usr/include/c++/11/bits/stl_uninitialized.h ****  *
  27:/usr/include/c++/11/bits/stl_uninitialized.h ****  * Copyright (c) 1994
  28:/usr/include/c++/11/bits/stl_uninitialized.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/11/bits/stl_uninitialized.h ****  *
  30:/usr/include/c++/11/bits/stl_uninitialized.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/11/bits/stl_uninitialized.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/11/bits/stl_uninitialized.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/11/bits/stl_uninitialized.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/11/bits/stl_uninitialized.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/11/bits/stl_uninitialized.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/11/bits/stl_uninitialized.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/11/bits/stl_uninitialized.h ****  *
  38:/usr/include/c++/11/bits/stl_uninitialized.h ****  *
  39:/usr/include/c++/11/bits/stl_uninitialized.h ****  * Copyright (c) 1996,1997
  40:/usr/include/c++/11/bits/stl_uninitialized.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/11/bits/stl_uninitialized.h ****  *
  42:/usr/include/c++/11/bits/stl_uninitialized.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/11/bits/stl_uninitialized.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/11/bits/stl_uninitialized.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/11/bits/stl_uninitialized.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/11/bits/stl_uninitialized.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/11/bits/stl_uninitialized.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/11/bits/stl_uninitialized.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/11/bits/stl_uninitialized.h ****  */
  50:/usr/include/c++/11/bits/stl_uninitialized.h **** 
  51:/usr/include/c++/11/bits/stl_uninitialized.h **** /** @file bits/stl_uninitialized.h
  52:/usr/include/c++/11/bits/stl_uninitialized.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/11/bits/stl_uninitialized.h ****  *  Do not attempt to use it directly. @headername{memory}
  54:/usr/include/c++/11/bits/stl_uninitialized.h ****  */
  55:/usr/include/c++/11/bits/stl_uninitialized.h **** 
  56:/usr/include/c++/11/bits/stl_uninitialized.h **** #ifndef _STL_UNINITIALIZED_H
  57:/usr/include/c++/11/bits/stl_uninitialized.h **** #define _STL_UNINITIALIZED_H 1
  58:/usr/include/c++/11/bits/stl_uninitialized.h **** 
  59:/usr/include/c++/11/bits/stl_uninitialized.h **** #if __cplusplus >= 201103L
  60:/usr/include/c++/11/bits/stl_uninitialized.h **** #include <type_traits>
  61:/usr/include/c++/11/bits/stl_uninitialized.h **** #endif
  62:/usr/include/c++/11/bits/stl_uninitialized.h **** 
  63:/usr/include/c++/11/bits/stl_uninitialized.h **** #include <bits/stl_algobase.h>    // copy
  64:/usr/include/c++/11/bits/stl_uninitialized.h **** #include <ext/alloc_traits.h>     // __alloc_traits
  65:/usr/include/c++/11/bits/stl_uninitialized.h **** 
  66:/usr/include/c++/11/bits/stl_uninitialized.h **** #if __cplusplus >= 201703L
  67:/usr/include/c++/11/bits/stl_uninitialized.h **** #include <bits/stl_pair.h>
  68:/usr/include/c++/11/bits/stl_uninitialized.h **** #endif
  69:/usr/include/c++/11/bits/stl_uninitialized.h **** 
  70:/usr/include/c++/11/bits/stl_uninitialized.h **** namespace std _GLIBCXX_VISIBILITY(default)
  71:/usr/include/c++/11/bits/stl_uninitialized.h **** {
  72:/usr/include/c++/11/bits/stl_uninitialized.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  73:/usr/include/c++/11/bits/stl_uninitialized.h **** 
  74:/usr/include/c++/11/bits/stl_uninitialized.h ****   /** @addtogroup memory
  75:/usr/include/c++/11/bits/stl_uninitialized.h ****    *  @{
  76:/usr/include/c++/11/bits/stl_uninitialized.h ****    */
  77:/usr/include/c++/11/bits/stl_uninitialized.h **** 
  78:/usr/include/c++/11/bits/stl_uninitialized.h ****   /// @cond undocumented
  79:/usr/include/c++/11/bits/stl_uninitialized.h **** 
  80:/usr/include/c++/11/bits/stl_uninitialized.h ****   template<bool _TrivialValueTypes>
  81:/usr/include/c++/11/bits/stl_uninitialized.h ****     struct __uninitialized_copy
  82:/usr/include/c++/11/bits/stl_uninitialized.h ****     {
  83:/usr/include/c++/11/bits/stl_uninitialized.h ****       template<typename _InputIterator, typename _ForwardIterator>
  84:/usr/include/c++/11/bits/stl_uninitialized.h ****         static _ForwardIterator
  85:/usr/include/c++/11/bits/stl_uninitialized.h ****         __uninit_copy(_InputIterator __first, _InputIterator __last,
  86:/usr/include/c++/11/bits/stl_uninitialized.h **** 		      _ForwardIterator __result)
  87:/usr/include/c++/11/bits/stl_uninitialized.h ****         {
  88:/usr/include/c++/11/bits/stl_uninitialized.h **** 	  _ForwardIterator __cur = __result;
  89:/usr/include/c++/11/bits/stl_uninitialized.h **** 	  __try
  90:/usr/include/c++/11/bits/stl_uninitialized.h **** 	    {
  91:/usr/include/c++/11/bits/stl_uninitialized.h **** 	      for (; __first != __last; ++__first, (void)++__cur)
  92:/usr/include/c++/11/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
  93:/usr/include/c++/11/bits/stl_uninitialized.h **** 	      return __cur;
  94:/usr/include/c++/11/bits/stl_uninitialized.h **** 	    }
  95:/usr/include/c++/11/bits/stl_uninitialized.h **** 	  __catch(...)
  96:/usr/include/c++/11/bits/stl_uninitialized.h **** 	    {
  97:/usr/include/c++/11/bits/stl_uninitialized.h **** 	      std::_Destroy(__result, __cur);
  98:/usr/include/c++/11/bits/stl_uninitialized.h **** 	      __throw_exception_again;
  99:/usr/include/c++/11/bits/stl_uninitialized.h **** 	    }
 100:/usr/include/c++/11/bits/stl_uninitialized.h **** 	}
 101:/usr/include/c++/11/bits/stl_uninitialized.h ****     };
 102:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 103:/usr/include/c++/11/bits/stl_uninitialized.h ****   template<>
 104:/usr/include/c++/11/bits/stl_uninitialized.h ****     struct __uninitialized_copy<true>
 105:/usr/include/c++/11/bits/stl_uninitialized.h ****     {
 106:/usr/include/c++/11/bits/stl_uninitialized.h ****       template<typename _InputIterator, typename _ForwardIterator>
 107:/usr/include/c++/11/bits/stl_uninitialized.h ****         static _ForwardIterator
 108:/usr/include/c++/11/bits/stl_uninitialized.h ****         __uninit_copy(_InputIterator __first, _InputIterator __last,
 109:/usr/include/c++/11/bits/stl_uninitialized.h **** 		      _ForwardIterator __result)
 110:/usr/include/c++/11/bits/stl_uninitialized.h ****         { return std::copy(__first, __last, __result); }
 111:/usr/include/c++/11/bits/stl_uninitialized.h ****     };
 112:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 113:/usr/include/c++/11/bits/stl_uninitialized.h ****   /// @endcond
 114:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 115:/usr/include/c++/11/bits/stl_uninitialized.h ****   /**
 116:/usr/include/c++/11/bits/stl_uninitialized.h ****    *  @brief Copies the range [first,last) into result.
 117:/usr/include/c++/11/bits/stl_uninitialized.h ****    *  @param  __first  An input iterator.
 118:/usr/include/c++/11/bits/stl_uninitialized.h ****    *  @param  __last   An input iterator.
 119:/usr/include/c++/11/bits/stl_uninitialized.h ****    *  @param  __result An output iterator.
 120:/usr/include/c++/11/bits/stl_uninitialized.h ****    *  @return   __result + (__first - __last)
 121:/usr/include/c++/11/bits/stl_uninitialized.h ****    *
 122:/usr/include/c++/11/bits/stl_uninitialized.h ****    *  Like copy(), but does not require an initialized output range.
 123:/usr/include/c++/11/bits/stl_uninitialized.h ****   */
 124:/usr/include/c++/11/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator>
 125:/usr/include/c++/11/bits/stl_uninitialized.h ****     inline _ForwardIterator
 126:/usr/include/c++/11/bits/stl_uninitialized.h ****     uninitialized_copy(_InputIterator __first, _InputIterator __last,
 127:/usr/include/c++/11/bits/stl_uninitialized.h **** 		       _ForwardIterator __result)
 128:/usr/include/c++/11/bits/stl_uninitialized.h ****     {
 129:/usr/include/c++/11/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_InputIterator>::value_type
 130:/usr/include/c++/11/bits/stl_uninitialized.h **** 	_ValueType1;
 131:/usr/include/c++/11/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 132:/usr/include/c++/11/bits/stl_uninitialized.h **** 	_ValueType2;
 133:/usr/include/c++/11/bits/stl_uninitialized.h **** #if __cplusplus < 201103L
 134:/usr/include/c++/11/bits/stl_uninitialized.h ****       const bool __assignable = true;
 135:/usr/include/c++/11/bits/stl_uninitialized.h **** #else
 136:/usr/include/c++/11/bits/stl_uninitialized.h ****       // Trivial types can have deleted copy constructor, but the std::copy
 137:/usr/include/c++/11/bits/stl_uninitialized.h ****       // optimization that uses memmove would happily "copy" them anyway.
 138:/usr/include/c++/11/bits/stl_uninitialized.h ****       static_assert(is_constructible<_ValueType2, decltype(*__first)>::value,
 139:/usr/include/c++/11/bits/stl_uninitialized.h **** 	  "result type must be constructible from value type of input range");
 140:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 141:/usr/include/c++/11/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_InputIterator>::reference _RefType1;
 142:/usr/include/c++/11/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::reference _RefType2;
 143:/usr/include/c++/11/bits/stl_uninitialized.h ****       // Trivial types can have deleted assignment, so using std::copy
 144:/usr/include/c++/11/bits/stl_uninitialized.h ****       // would be ill-formed. Require assignability before using std::copy:
 145:/usr/include/c++/11/bits/stl_uninitialized.h ****       const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 146:/usr/include/c++/11/bits/stl_uninitialized.h **** #endif
 147:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 148:/usr/include/c++/11/bits/stl_uninitialized.h ****       return std::__uninitialized_copy<__is_trivial(_ValueType1)
 149:/usr/include/c++/11/bits/stl_uninitialized.h **** 				       && __is_trivial(_ValueType2)
 150:/usr/include/c++/11/bits/stl_uninitialized.h **** 				       && __assignable>::
 151:/usr/include/c++/11/bits/stl_uninitialized.h **** 	__uninit_copy(__first, __last, __result);
 152:/usr/include/c++/11/bits/stl_uninitialized.h ****     }
 153:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 154:/usr/include/c++/11/bits/stl_uninitialized.h ****   /// @cond undocumented
 155:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 156:/usr/include/c++/11/bits/stl_uninitialized.h ****   template<bool _TrivialValueType>
 157:/usr/include/c++/11/bits/stl_uninitialized.h ****     struct __uninitialized_fill
 158:/usr/include/c++/11/bits/stl_uninitialized.h ****     {
 159:/usr/include/c++/11/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Tp>
 160:/usr/include/c++/11/bits/stl_uninitialized.h ****         static void
 161:/usr/include/c++/11/bits/stl_uninitialized.h ****         __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
 162:/usr/include/c++/11/bits/stl_uninitialized.h **** 		      const _Tp& __x)
 163:/usr/include/c++/11/bits/stl_uninitialized.h ****         {
 164:/usr/include/c++/11/bits/stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 165:/usr/include/c++/11/bits/stl_uninitialized.h **** 	  __try
 166:/usr/include/c++/11/bits/stl_uninitialized.h **** 	    {
 167:/usr/include/c++/11/bits/stl_uninitialized.h **** 	      for (; __cur != __last; ++__cur)
 168:/usr/include/c++/11/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), __x);
 169:/usr/include/c++/11/bits/stl_uninitialized.h **** 	    }
 170:/usr/include/c++/11/bits/stl_uninitialized.h **** 	  __catch(...)
 171:/usr/include/c++/11/bits/stl_uninitialized.h **** 	    {
 172:/usr/include/c++/11/bits/stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 173:/usr/include/c++/11/bits/stl_uninitialized.h **** 	      __throw_exception_again;
 174:/usr/include/c++/11/bits/stl_uninitialized.h **** 	    }
 175:/usr/include/c++/11/bits/stl_uninitialized.h **** 	}
 176:/usr/include/c++/11/bits/stl_uninitialized.h ****     };
 177:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 178:/usr/include/c++/11/bits/stl_uninitialized.h ****   template<>
 179:/usr/include/c++/11/bits/stl_uninitialized.h ****     struct __uninitialized_fill<true>
 180:/usr/include/c++/11/bits/stl_uninitialized.h ****     {
 181:/usr/include/c++/11/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Tp>
 182:/usr/include/c++/11/bits/stl_uninitialized.h ****         static void
 183:/usr/include/c++/11/bits/stl_uninitialized.h ****         __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
 184:/usr/include/c++/11/bits/stl_uninitialized.h **** 		      const _Tp& __x)
 185:/usr/include/c++/11/bits/stl_uninitialized.h ****         { std::fill(__first, __last, __x); }
 186:/usr/include/c++/11/bits/stl_uninitialized.h ****     };
 187:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 188:/usr/include/c++/11/bits/stl_uninitialized.h ****   /// @endcond
 189:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 190:/usr/include/c++/11/bits/stl_uninitialized.h ****   /**
 191:/usr/include/c++/11/bits/stl_uninitialized.h ****    *  @brief Copies the value x into the range [first,last).
 192:/usr/include/c++/11/bits/stl_uninitialized.h ****    *  @param  __first  An input iterator.
 193:/usr/include/c++/11/bits/stl_uninitialized.h ****    *  @param  __last   An input iterator.
 194:/usr/include/c++/11/bits/stl_uninitialized.h ****    *  @param  __x      The source value.
 195:/usr/include/c++/11/bits/stl_uninitialized.h ****    *  @return   Nothing.
 196:/usr/include/c++/11/bits/stl_uninitialized.h ****    *
 197:/usr/include/c++/11/bits/stl_uninitialized.h ****    *  Like fill(), but does not require an initialized output range.
 198:/usr/include/c++/11/bits/stl_uninitialized.h ****   */
 199:/usr/include/c++/11/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp>
 200:/usr/include/c++/11/bits/stl_uninitialized.h ****     inline void
 201:/usr/include/c++/11/bits/stl_uninitialized.h ****     uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last,
 202:/usr/include/c++/11/bits/stl_uninitialized.h **** 		       const _Tp& __x)
 203:/usr/include/c++/11/bits/stl_uninitialized.h ****     {
 204:/usr/include/c++/11/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 205:/usr/include/c++/11/bits/stl_uninitialized.h **** 	_ValueType;
 206:/usr/include/c++/11/bits/stl_uninitialized.h **** #if __cplusplus < 201103L
 207:/usr/include/c++/11/bits/stl_uninitialized.h ****       const bool __assignable = true;
 208:/usr/include/c++/11/bits/stl_uninitialized.h **** #else
 209:/usr/include/c++/11/bits/stl_uninitialized.h ****       // Trivial types can have deleted copy constructor, but the std::fill
 210:/usr/include/c++/11/bits/stl_uninitialized.h ****       // optimization that uses memmove would happily "copy" them anyway.
 211:/usr/include/c++/11/bits/stl_uninitialized.h ****       static_assert(is_constructible<_ValueType, const _Tp&>::value,
 212:/usr/include/c++/11/bits/stl_uninitialized.h **** 	  "result type must be constructible from input type");
 213:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 214:/usr/include/c++/11/bits/stl_uninitialized.h ****       // Trivial types can have deleted assignment, so using std::fill
 215:/usr/include/c++/11/bits/stl_uninitialized.h ****       // would be ill-formed. Require assignability before using std::fill:
 216:/usr/include/c++/11/bits/stl_uninitialized.h ****       const bool __assignable = is_copy_assignable<_ValueType>::value;
 217:/usr/include/c++/11/bits/stl_uninitialized.h **** #endif
 218:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 219:/usr/include/c++/11/bits/stl_uninitialized.h ****       std::__uninitialized_fill<__is_trivial(_ValueType) && __assignable>::
 220:/usr/include/c++/11/bits/stl_uninitialized.h **** 	__uninit_fill(__first, __last, __x);
 221:/usr/include/c++/11/bits/stl_uninitialized.h ****     }
 222:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 223:/usr/include/c++/11/bits/stl_uninitialized.h ****   /// @cond undocumented
 224:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 225:/usr/include/c++/11/bits/stl_uninitialized.h ****   template<bool _TrivialValueType>
 226:/usr/include/c++/11/bits/stl_uninitialized.h ****     struct __uninitialized_fill_n
 227:/usr/include/c++/11/bits/stl_uninitialized.h ****     {
 228:/usr/include/c++/11/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size, typename _Tp>
 229:/usr/include/c++/11/bits/stl_uninitialized.h ****         static _ForwardIterator
 230:/usr/include/c++/11/bits/stl_uninitialized.h ****         __uninit_fill_n(_ForwardIterator __first, _Size __n,
 231:/usr/include/c++/11/bits/stl_uninitialized.h **** 			const _Tp& __x)
 232:/usr/include/c++/11/bits/stl_uninitialized.h ****         {
 233:/usr/include/c++/11/bits/stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 234:/usr/include/c++/11/bits/stl_uninitialized.h **** 	  __try
 235:/usr/include/c++/11/bits/stl_uninitialized.h **** 	    {
 236:/usr/include/c++/11/bits/stl_uninitialized.h **** 	      for (; __n > 0; --__n, (void) ++__cur)
 237:/usr/include/c++/11/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), __x);
 238:/usr/include/c++/11/bits/stl_uninitialized.h **** 	      return __cur;
 239:/usr/include/c++/11/bits/stl_uninitialized.h **** 	    }
 240:/usr/include/c++/11/bits/stl_uninitialized.h **** 	  __catch(...)
 241:/usr/include/c++/11/bits/stl_uninitialized.h **** 	    {
 242:/usr/include/c++/11/bits/stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 243:/usr/include/c++/11/bits/stl_uninitialized.h **** 	      __throw_exception_again;
 244:/usr/include/c++/11/bits/stl_uninitialized.h **** 	    }
 245:/usr/include/c++/11/bits/stl_uninitialized.h **** 	}
 246:/usr/include/c++/11/bits/stl_uninitialized.h ****     };
 247:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 248:/usr/include/c++/11/bits/stl_uninitialized.h ****   template<>
 249:/usr/include/c++/11/bits/stl_uninitialized.h ****     struct __uninitialized_fill_n<true>
 250:/usr/include/c++/11/bits/stl_uninitialized.h ****     {
 251:/usr/include/c++/11/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size, typename _Tp>
 252:/usr/include/c++/11/bits/stl_uninitialized.h ****         static _ForwardIterator
 253:/usr/include/c++/11/bits/stl_uninitialized.h ****         __uninit_fill_n(_ForwardIterator __first, _Size __n,
 254:/usr/include/c++/11/bits/stl_uninitialized.h **** 			const _Tp& __x)
 255:/usr/include/c++/11/bits/stl_uninitialized.h ****         { return std::fill_n(__first, __n, __x); }
 256:/usr/include/c++/11/bits/stl_uninitialized.h ****     };
 257:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 258:/usr/include/c++/11/bits/stl_uninitialized.h ****   /// @endcond
 259:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 260:/usr/include/c++/11/bits/stl_uninitialized.h ****    // _GLIBCXX_RESOLVE_LIB_DEFECTS
 261:/usr/include/c++/11/bits/stl_uninitialized.h ****    // DR 1339. uninitialized_fill_n should return the end of its range
 262:/usr/include/c++/11/bits/stl_uninitialized.h ****   /**
 263:/usr/include/c++/11/bits/stl_uninitialized.h ****    *  @brief Copies the value x into the range [first,first+n).
 264:/usr/include/c++/11/bits/stl_uninitialized.h ****    *  @param  __first  An input iterator.
 265:/usr/include/c++/11/bits/stl_uninitialized.h ****    *  @param  __n      The number of copies to make.
 266:/usr/include/c++/11/bits/stl_uninitialized.h ****    *  @param  __x      The source value.
 267:/usr/include/c++/11/bits/stl_uninitialized.h ****    *  @return   Nothing.
 268:/usr/include/c++/11/bits/stl_uninitialized.h ****    *
 269:/usr/include/c++/11/bits/stl_uninitialized.h ****    *  Like fill_n(), but does not require an initialized output range.
 270:/usr/include/c++/11/bits/stl_uninitialized.h ****   */
 271:/usr/include/c++/11/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Tp>
 272:/usr/include/c++/11/bits/stl_uninitialized.h ****     inline _ForwardIterator
 273:/usr/include/c++/11/bits/stl_uninitialized.h ****     uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
 274:/usr/include/c++/11/bits/stl_uninitialized.h ****     {
 275:/usr/include/c++/11/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 276:/usr/include/c++/11/bits/stl_uninitialized.h **** 	_ValueType;
 277:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 278:/usr/include/c++/11/bits/stl_uninitialized.h ****       // Trivial types do not need a constructor to begin their lifetime,
 279:/usr/include/c++/11/bits/stl_uninitialized.h ****       // so try to use std::fill_n to benefit from its memmove optimization.
 280:/usr/include/c++/11/bits/stl_uninitialized.h ****       // For arbitrary class types and floating point types we can't assume
 281:/usr/include/c++/11/bits/stl_uninitialized.h ****       // that __n > 0 and std::__size_to_integer(__n) > 0 are equivalent,
 282:/usr/include/c++/11/bits/stl_uninitialized.h ****       // so only use std::fill_n when _Size is already an integral type.
 283:/usr/include/c++/11/bits/stl_uninitialized.h **** #if __cplusplus < 201103L
 284:/usr/include/c++/11/bits/stl_uninitialized.h ****       const bool __can_fill = __is_integer<_Size>::__value;
 285:/usr/include/c++/11/bits/stl_uninitialized.h **** #else
 286:/usr/include/c++/11/bits/stl_uninitialized.h ****       // Trivial types can have deleted copy constructor, but the std::fill_n
 287:/usr/include/c++/11/bits/stl_uninitialized.h ****       // optimization that uses memmove would happily "copy" them anyway.
 288:/usr/include/c++/11/bits/stl_uninitialized.h ****       static_assert(is_constructible<_ValueType, const _Tp&>::value,
 289:/usr/include/c++/11/bits/stl_uninitialized.h **** 	  "result type must be constructible from input type");
 290:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 291:/usr/include/c++/11/bits/stl_uninitialized.h ****       // Trivial types can have deleted assignment, so using std::fill_n
 292:/usr/include/c++/11/bits/stl_uninitialized.h ****       // would be ill-formed. Require assignability before using std::fill_n:
 293:/usr/include/c++/11/bits/stl_uninitialized.h ****       constexpr bool __can_fill
 294:/usr/include/c++/11/bits/stl_uninitialized.h **** 	= __and_<is_integral<_Size>, is_copy_assignable<_ValueType>>::value;
 295:/usr/include/c++/11/bits/stl_uninitialized.h **** #endif
 296:/usr/include/c++/11/bits/stl_uninitialized.h ****       return __uninitialized_fill_n<__is_trivial(_ValueType) && __can_fill>::
 297:/usr/include/c++/11/bits/stl_uninitialized.h **** 	__uninit_fill_n(__first, __n, __x);
 298:/usr/include/c++/11/bits/stl_uninitialized.h ****     }
 299:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 300:/usr/include/c++/11/bits/stl_uninitialized.h ****   /// @cond undocumented
 301:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 302:/usr/include/c++/11/bits/stl_uninitialized.h ****   // Extensions: versions of uninitialized_copy, uninitialized_fill,
 303:/usr/include/c++/11/bits/stl_uninitialized.h ****   //  and uninitialized_fill_n that take an allocator parameter.
 304:/usr/include/c++/11/bits/stl_uninitialized.h ****   //  We dispatch back to the standard versions when we're given the
 305:/usr/include/c++/11/bits/stl_uninitialized.h ****   //  default allocator.  For nondefault allocators we do not use 
 306:/usr/include/c++/11/bits/stl_uninitialized.h ****   //  any of the POD optimizations.
 307:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 308:/usr/include/c++/11/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator,
 309:/usr/include/c++/11/bits/stl_uninitialized.h **** 	   typename _Allocator>
 310:/usr/include/c++/11/bits/stl_uninitialized.h ****     _ForwardIterator
 311:/usr/include/c++/11/bits/stl_uninitialized.h ****     __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 312:/usr/include/c++/11/bits/stl_uninitialized.h **** 			   _ForwardIterator __result, _Allocator& __alloc)
 313:/usr/include/c++/11/bits/stl_uninitialized.h ****     {
 314:/usr/include/c++/11/bits/stl_uninitialized.h ****       _ForwardIterator __cur = __result;
 315:/usr/include/c++/11/bits/stl_uninitialized.h ****       __try
 316:/usr/include/c++/11/bits/stl_uninitialized.h **** 	{
 317:/usr/include/c++/11/bits/stl_uninitialized.h **** 	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 318:/usr/include/c++/11/bits/stl_uninitialized.h **** 	  for (; __first != __last; ++__first, (void)++__cur)
 319:/usr/include/c++/11/bits/stl_uninitialized.h **** 	    __traits::construct(__alloc, std::__addressof(*__cur), *__first);
 320:/usr/include/c++/11/bits/stl_uninitialized.h **** 	  return __cur;
 321:/usr/include/c++/11/bits/stl_uninitialized.h **** 	}
 322:/usr/include/c++/11/bits/stl_uninitialized.h ****       __catch(...)
 323:/usr/include/c++/11/bits/stl_uninitialized.h **** 	{
 324:/usr/include/c++/11/bits/stl_uninitialized.h **** 	  std::_Destroy(__result, __cur, __alloc);
 325:/usr/include/c++/11/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 326:/usr/include/c++/11/bits/stl_uninitialized.h **** 	}
 327:/usr/include/c++/11/bits/stl_uninitialized.h ****     }
 328:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 329:/usr/include/c++/11/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
 330:/usr/include/c++/11/bits/stl_uninitialized.h ****     inline _ForwardIterator
 331:/usr/include/c++/11/bits/stl_uninitialized.h ****     __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 332:/usr/include/c++/11/bits/stl_uninitialized.h **** 			   _ForwardIterator __result, allocator<_Tp>&)
 333:/usr/include/c++/11/bits/stl_uninitialized.h ****     { return std::uninitialized_copy(__first, __last, __result); }
 334:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 335:/usr/include/c++/11/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator,
 336:/usr/include/c++/11/bits/stl_uninitialized.h **** 	   typename _Allocator>
 337:/usr/include/c++/11/bits/stl_uninitialized.h ****     inline _ForwardIterator
 338:/usr/include/c++/11/bits/stl_uninitialized.h ****     __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
 339:/usr/include/c++/11/bits/stl_uninitialized.h **** 			   _ForwardIterator __result, _Allocator& __alloc)
 340:/usr/include/c++/11/bits/stl_uninitialized.h ****     {
 341:/usr/include/c++/11/bits/stl_uninitialized.h ****       return std::__uninitialized_copy_a(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),
 342:/usr/include/c++/11/bits/stl_uninitialized.h **** 					 _GLIBCXX_MAKE_MOVE_ITERATOR(__last),
 343:/usr/include/c++/11/bits/stl_uninitialized.h **** 					 __result, __alloc);
 344:/usr/include/c++/11/bits/stl_uninitialized.h ****     }
 345:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 346:/usr/include/c++/11/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator,
 347:/usr/include/c++/11/bits/stl_uninitialized.h **** 	   typename _Allocator>
 348:/usr/include/c++/11/bits/stl_uninitialized.h ****     inline _ForwardIterator
 349:/usr/include/c++/11/bits/stl_uninitialized.h ****     __uninitialized_move_if_noexcept_a(_InputIterator __first,
 2457              		.loc 13 349 5
 2458              		.cfi_startproc
 2459 0000 F30F1EFA 		endbr64
 2460 0004 55       		pushq	%rbp
 2461              		.cfi_def_cfa_offset 16
 2462              		.cfi_offset 6, -16
 2463 0005 4889E5   		movq	%rsp, %rbp
 2464              		.cfi_def_cfa_register 6
 2465 0008 4883EC20 		subq	$32, %rsp
 2466 000c 48897DF8 		movq	%rdi, -8(%rbp)
 2467 0010 488975F0 		movq	%rsi, -16(%rbp)
 2468 0014 488955E8 		movq	%rdx, -24(%rbp)
 2469 0018 48894DE0 		movq	%rcx, -32(%rbp)
 350:/usr/include/c++/11/bits/stl_uninitialized.h **** 				       _InputIterator __last,
 351:/usr/include/c++/11/bits/stl_uninitialized.h **** 				       _ForwardIterator __result,
 352:/usr/include/c++/11/bits/stl_uninitialized.h **** 				       _Allocator& __alloc)
 353:/usr/include/c++/11/bits/stl_uninitialized.h ****     {
 354:/usr/include/c++/11/bits/stl_uninitialized.h ****       return std::__uninitialized_copy_a
 355:/usr/include/c++/11/bits/stl_uninitialized.h **** 	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 2470              		.loc 13 355 2
 2471 001c 488B4DE0 		movq	-32(%rbp), %rcx
 2472 0020 488B55E8 		movq	-24(%rbp), %rdx
 2473 0024 488B75F0 		movq	-16(%rbp), %rsi
 2474 0028 488B45F8 		movq	-8(%rbp), %rax
 2475 002c 4889C7   		movq	%rax, %rdi
 2476 002f E8000000 		call	_ZSt22__uninitialized_copy_aIPN8UnitTest18DeferredTestResultES2_S1_ET0_T_S4_S3_RSaIT1_E@PLT
 2476      00
 356:/usr/include/c++/11/bits/stl_uninitialized.h **** 	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 357:/usr/include/c++/11/bits/stl_uninitialized.h ****     }
 2477              		.loc 13 357 5
 2478 0034 C9       		leave
 2479              		.cfi_def_cfa 7, 8
 2480 0035 C3       		ret
 2481              		.cfi_endproc
 2482              	.LFE1012:
 2484              		.section	.text._ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEES2_E7destroyERS3_P
 2485              		.weak	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEES2_E7destroyERS3_PS2_
 2487              	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEES2_E7destroyERS3_PS2_:
 2488              	.LFB1013:
 146:/usr/include/c++/11/ext/alloc_traits.h **** 
 147:/usr/include/c++/11/ext/alloc_traits.h ****     static void destroy(_Alloc& __a, pointer __p)
 2489              		.loc 7 147 17
 2490              		.cfi_startproc
 2491 0000 F30F1EFA 		endbr64
 2492 0004 55       		pushq	%rbp
 2493              		.cfi_def_cfa_offset 16
 2494              		.cfi_offset 6, -16
 2495 0005 4889E5   		movq	%rsp, %rbp
 2496              		.cfi_def_cfa_register 6
 2497 0008 4883EC10 		subq	$16, %rsp
 2498 000c 48897DF8 		movq	%rdi, -8(%rbp)
 2499 0010 488975F0 		movq	%rsi, -16(%rbp)
 148:/usr/include/c++/11/ext/alloc_traits.h ****     { __a.destroy(__p); }
 2500              		.loc 7 148 18
 2501 0014 488B55F0 		movq	-16(%rbp), %rdx
 2502 0018 488B45F8 		movq	-8(%rbp), %rax
 2503 001c 4889D6   		movq	%rdx, %rsi
 2504 001f 4889C7   		movq	%rax, %rdi
 2505 0022 E8000000 		call	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE7destroyEPS2_@PLT
 2505      00
 2506              		.loc 7 148 25
 2507 0027 90       		nop
 2508 0028 C9       		leave
 2509              		.cfi_def_cfa 7, 8
 2510 0029 C3       		ret
 2511              		.cfi_endproc
 2512              	.LFE1013:
 2514              		.section	.text._ZSt8_DestroyIPN8UnitTest18DeferredTestResultES1_EvT_S3_RSaIT0_E,"axG",@progbits,_Z
 2515              		.weak	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultES1_EvT_S3_RSaIT0_E
 2517              	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultES1_EvT_S3_RSaIT0_E:
 2518              	.LFB1014:
 845:/usr/include/c++/11/bits/alloc_traits.h **** 	     allocator<_Tp>&)
 2519              		.loc 6 845 5
 2520              		.cfi_startproc
 2521 0000 F30F1EFA 		endbr64
 2522 0004 55       		pushq	%rbp
 2523              		.cfi_def_cfa_offset 16
 2524              		.cfi_offset 6, -16
 2525 0005 4889E5   		movq	%rsp, %rbp
 2526              		.cfi_def_cfa_register 6
 2527 0008 4883EC20 		subq	$32, %rsp
 2528 000c 48897DF8 		movq	%rdi, -8(%rbp)
 2529 0010 488975F0 		movq	%rsi, -16(%rbp)
 2530 0014 488955E8 		movq	%rdx, -24(%rbp)
 848:/usr/include/c++/11/bits/alloc_traits.h ****     }
 2531              		.loc 6 848 15
 2532 0018 488B55F0 		movq	-16(%rbp), %rdx
 2533 001c 488B45F8 		movq	-8(%rbp), %rax
 2534 0020 4889D6   		movq	%rdx, %rsi
 2535 0023 4889C7   		movq	%rax, %rdi
 2536 0026 E8000000 		call	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultEEvT_S3_@PLT
 2536      00
 2537              		.loc 6 849 5
 2538 002b 90       		nop
 2539 002c C9       		leave
 2540              		.cfi_def_cfa 7, 8
 2541 002d C3       		ret
 2542              		.cfi_endproc
 2543              	.LFE1014:
 2545              		.section	.text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE13_M_deallocateEPS1_m,"a
 2546              		.align 2
 2547              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE13_M_deallocateEPS1_m
 2549              	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE13_M_deallocateEPS1_m:
 2550              	.LFB1015:
 350:/usr/include/c++/11/bits/stl_vector.h ****       {
 2551              		.loc 5 350 7
 2552              		.cfi_startproc
 2553 0000 F30F1EFA 		endbr64
 2554 0004 55       		pushq	%rbp
 2555              		.cfi_def_cfa_offset 16
 2556              		.cfi_offset 6, -16
 2557 0005 4889E5   		movq	%rsp, %rbp
 2558              		.cfi_def_cfa_register 6
 2559 0008 4883EC20 		subq	$32, %rsp
 2560 000c 48897DF8 		movq	%rdi, -8(%rbp)
 2561 0010 488975F0 		movq	%rsi, -16(%rbp)
 2562 0014 488955E8 		movq	%rdx, -24(%rbp)
 353:/usr/include/c++/11/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 2563              		.loc 5 353 2
 2564 0018 48837DF0 		cmpq	$0, -16(%rbp)
 2564      00
 2565 001d 7417     		je	.L128
 354:/usr/include/c++/11/bits/stl_vector.h ****       }
 2566              		.loc 5 354 20
 2567 001f 488B45F8 		movq	-8(%rbp), %rax
 354:/usr/include/c++/11/bits/stl_vector.h ****       }
 2568              		.loc 5 354 19
 2569 0023 488B55E8 		movq	-24(%rbp), %rdx
 2570 0027 488B4DF0 		movq	-16(%rbp), %rcx
 2571 002b 4889CE   		movq	%rcx, %rsi
 2572 002e 4889C7   		movq	%rax, %rdi
 2573 0031 E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEES2_E10deallocateERS3_PS2_m@P
 2573      00
 2574              	.L128:
 355:/usr/include/c++/11/bits/stl_vector.h **** 
 2575              		.loc 5 355 7
 2576 0036 90       		nop
 2577 0037 C9       		leave
 2578              		.cfi_def_cfa 7, 8
 2579 0038 C3       		ret
 2580              		.cfi_endproc
 2581              	.LFE1015:
 2583              		.section	.text._ZN9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2
 2584              		.align 2
 2585              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC2ERK
 2587              	_ZN9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC2ERKS3_:
 2588              	.LFB1017:
1010:/usr/include/c++/11/bits/stl_iterator.h ****       : _M_current(__i) { }
 2589              		.loc 9 1010 7
 2590              		.cfi_startproc
 2591 0000 F30F1EFA 		endbr64
 2592 0004 55       		pushq	%rbp
 2593              		.cfi_def_cfa_offset 16
 2594              		.cfi_offset 6, -16
 2595 0005 4889E5   		movq	%rsp, %rbp
 2596              		.cfi_def_cfa_register 6
 2597 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2598 000c 488975F0 		movq	%rsi, -16(%rbp)
 2599              	.LBB14:
1011:/usr/include/c++/11/bits/stl_iterator.h **** 
 2600              		.loc 9 1011 9
 2601 0010 488B45F0 		movq	-16(%rbp), %rax
 2602 0014 488B10   		movq	(%rax), %rdx
 2603 0017 488B45F8 		movq	-8(%rbp), %rax
 2604 001b 488910   		movq	%rdx, (%rax)
 2605              	.LBE14:
1011:/usr/include/c++/11/bits/stl_iterator.h **** 
 2606              		.loc 9 1011 27
 2607 001e 90       		nop
 2608 001f 5D       		popq	%rbp
 2609              		.cfi_def_cfa 7, 8
 2610 0020 C3       		ret
 2611              		.cfi_endproc
 2612              	.LFE1017:
 2614              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC1ERK
 2615              		.set	_ZN9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC1ERKS
 2616              		.section	.text._ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2ERKS6_,"axG",@pr
 2617              		.align 2
 2618              		.weak	_ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2ERKS6_
 2620              	_ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2ERKS6_:
 2621              	.LFB1035:
 211:/usr/include/c++/11/bits/stl_pair.h ****     : private __pair_base<_T1, _T2>
 2622              		.loc 4 211 12
 2623              		.cfi_startproc
 2624 0000 F30F1EFA 		endbr64
 2625 0004 55       		pushq	%rbp
 2626              		.cfi_def_cfa_offset 16
 2627              		.cfi_offset 6, -16
 2628 0005 4889E5   		movq	%rsp, %rbp
 2629              		.cfi_def_cfa_register 6
 2630 0008 4883EC10 		subq	$16, %rsp
 2631 000c 48897DF8 		movq	%rdi, -8(%rbp)
 2632 0010 488975F0 		movq	%rsi, -16(%rbp)
 2633              	.LBB15:
 211:/usr/include/c++/11/bits/stl_pair.h ****     : private __pair_base<_T1, _T2>
 2634              		.loc 4 211 12
 2635 0014 488B45F0 		movq	-16(%rbp), %rax
 2636 0018 8B10     		movl	(%rax), %edx
 2637 001a 488B45F8 		movq	-8(%rbp), %rax
 2638 001e 8910     		movl	%edx, (%rax)
 2639 0020 488B45F8 		movq	-8(%rbp), %rax
 2640 0024 4883C008 		addq	$8, %rax
 2641 0028 488B55F0 		movq	-16(%rbp), %rdx
 2642 002c 4883C208 		addq	$8, %rdx
 2643 0030 4889D6   		movq	%rdx, %rsi
 2644 0033 4889C7   		movq	%rax, %rdi
 2645 0036 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_@PLT
 2645      00
 2646              	.LBE15:
 2647 003b 90       		nop
 2648 003c C9       		leave
 2649              		.cfi_def_cfa 7, 8
 2650 003d C3       		ret
 2651              		.cfi_endproc
 2652              	.LFE1035:
 2654              		.weak	_ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKS6_
 2655              		.set	_ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKS6_,_ZNSt4pairIiNSt7__c
 2656              		.section	.text._ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcE
 2657              		.align 2
 2658              		.weak	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE
 2660              	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constr
 2661              	.LFB1033:
 173:/usr/include/c++/11/ext/new_allocator.h ****       { ::new((void *)__p) _Tp(__val); }
 2662              		.loc 12 173 7
 2663              		.cfi_startproc
 2664              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 2665              		.cfi_lsda 0x1b,.LLSDA1033
 2666 0000 F30F1EFA 		endbr64
 2667 0004 55       		pushq	%rbp
 2668              		.cfi_def_cfa_offset 16
 2669              		.cfi_offset 6, -16
 2670 0005 4889E5   		movq	%rsp, %rbp
 2671              		.cfi_def_cfa_register 6
 2672 0008 4155     		pushq	%r13
 2673 000a 4154     		pushq	%r12
 2674 000c 53       		pushq	%rbx
 2675 000d 4883EC28 		subq	$40, %rsp
 2676              		.cfi_offset 13, -24
 2677              		.cfi_offset 12, -32
 2678              		.cfi_offset 3, -40
 2679 0011 48897DD8 		movq	%rdi, -40(%rbp)
 2680 0015 488975D0 		movq	%rsi, -48(%rbp)
 2681 0019 488955C8 		movq	%rdx, -56(%rbp)
 2682              		.loc 12 174 15
 2683 001d 488B5DD0 		movq	-48(%rbp), %rbx
 2684              		.loc 12 174 9
 2685 0021 4889DE   		movq	%rbx, %rsi
 2686 0024 BF280000 		movl	$40, %edi
 2686      00
 2687 0029 E8000000 		call	_ZnwmPv@PLT
 2687      00
 2688 002e 4989C4   		movq	%rax, %r12
 2689 0031 488B45C8 		movq	-56(%rbp), %rax
 2690 0035 4889C6   		movq	%rax, %rsi
 2691 0038 4C89E7   		movq	%r12, %rdi
 2692              	.LEHB39:
 2693 003b E8000000 		call	_ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKS6_@PLT
 2693      00
 2694              	.LEHE39:
 2695              		.loc 12 174 40
 2696 0040 EB1D     		jmp	.L134
 2697              	.L133:
 2698 0042 F30F1EFA 		endbr64
 2699              		.loc 12 174 9
 2700 0046 4989C5   		movq	%rax, %r13
 2701 0049 4889DE   		movq	%rbx, %rsi
 2702 004c 4C89E7   		movq	%r12, %rdi
 2703 004f E8000000 		call	_ZdlPvS_@PLT
 2703      00
 2704 0054 4C89E8   		movq	%r13, %rax
 2705 0057 4889C7   		movq	%rax, %rdi
 2706              	.LEHB40:
 2707 005a E8000000 		call	_Unwind_Resume@PLT
 2707      00
 2708              	.LEHE40:
 2709              	.L134:
 2710              		.loc 12 174 40
 2711 005f 4883C428 		addq	$40, %rsp
 2712 0063 5B       		popq	%rbx
 2713 0064 415C     		popq	%r12
 2714 0066 415D     		popq	%r13
 2715 0068 5D       		popq	%rbp
 2716              		.cfi_def_cfa 7, 8
 2717 0069 C3       		ret
 2718              		.cfi_endproc
 2719              	.LFE1033:
 2720              		.section	.gcc_except_table
 2721              	.LLSDA1033:
 2722 00dc FF       		.byte	0xff
 2723 00dd FF       		.byte	0xff
 2724 00de 01       		.byte	0x1
 2725 00df 08       		.uleb128 .LLSDACSE1033-.LLSDACSB1033
 2726              	.LLSDACSB1033:
 2727 00e0 3B       		.uleb128 .LEHB39-.LFB1033
 2728 00e1 05       		.uleb128 .LEHE39-.LEHB39
 2729 00e2 42       		.uleb128 .L133-.LFB1033
 2730 00e3 00       		.uleb128 0
 2731 00e4 5A       		.uleb128 .LEHB40-.LFB1033
 2732 00e5 05       		.uleb128 .LEHE40-.LEHB40
 2733 00e6 00       		.uleb128 0
 2734 00e7 00       		.uleb128 0
 2735              	.LLSDACSE1033:
 2736              		.section	.text._ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcE
 2738              		.section	.text._ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_E
 2739              		.align 2
 2740              		.weak	_ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_M_che
 2742              	_ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_M_check_lenE
 2743              	.LFB1037:
1756:/usr/include/c++/11/bits/stl_vector.h ****       {
 2744              		.loc 5 1756 7
 2745              		.cfi_startproc
 2746 0000 F30F1EFA 		endbr64
 2747 0004 55       		pushq	%rbp
 2748              		.cfi_def_cfa_offset 16
 2749              		.cfi_offset 6, -16
 2750 0005 4889E5   		movq	%rsp, %rbp
 2751              		.cfi_def_cfa_register 6
 2752 0008 53       		pushq	%rbx
 2753 0009 4883EC48 		subq	$72, %rsp
 2754              		.cfi_offset 3, -24
 2755 000d 48897DC8 		movq	%rdi, -56(%rbp)
 2756 0011 488975C0 		movq	%rsi, -64(%rbp)
 2757 0015 488955B8 		movq	%rdx, -72(%rbp)
1756:/usr/include/c++/11/bits/stl_vector.h ****       {
 2758              		.loc 5 1756 7
 2759 0019 64488B04 		movq	%fs:40, %rax
 2759      25280000 
 2759      00
 2760 0022 488945E8 		movq	%rax, -24(%rbp)
 2761 0026 31C0     		xorl	%eax, %eax
1758:/usr/include/c++/11/bits/stl_vector.h **** 	  __throw_length_error(__N(__s));
 2762              		.loc 5 1758 14
 2763 0028 488B45C8 		movq	-56(%rbp), %rax
 2764 002c 4889C7   		movq	%rax, %rdi
 2765 002f E8000000 		call	_ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE8max_size
 2765      00
 2766 0034 4889C3   		movq	%rax, %rbx
1758:/usr/include/c++/11/bits/stl_vector.h **** 	  __throw_length_error(__N(__s));
 2767              		.loc 5 1758 23
 2768 0037 488B45C8 		movq	-56(%rbp), %rax
 2769 003b 4889C7   		movq	%rax, %rdi
 2770 003e E8000000 		call	_ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE4sizeEv@P
 2770      00
1758:/usr/include/c++/11/bits/stl_vector.h **** 	  __throw_length_error(__N(__s));
 2771              		.loc 5 1758 17
 2772 0043 4829C3   		subq	%rax, %rbx
 2773 0046 4889DA   		movq	%rbx, %rdx
1758:/usr/include/c++/11/bits/stl_vector.h **** 	  __throw_length_error(__N(__s));
 2774              		.loc 5 1758 26
 2775 0049 488B45C0 		movq	-64(%rbp), %rax
 2776 004d 4839C2   		cmpq	%rax, %rdx
 2777 0050 0F92C0   		setb	%al
1758:/usr/include/c++/11/bits/stl_vector.h **** 	  __throw_length_error(__N(__s));
 2778              		.loc 5 1758 2
 2779 0053 84C0     		testb	%al, %al
 2780 0055 740C     		je	.L136
1759:/usr/include/c++/11/bits/stl_vector.h **** 
 2781              		.loc 5 1759 24
 2782 0057 488B45B8 		movq	-72(%rbp), %rax
 2783 005b 4889C7   		movq	%rax, %rdi
 2784 005e E8000000 		call	_ZSt20__throw_length_errorPKc@PLT
 2784      00
 2785              	.L136:
1761:/usr/include/c++/11/bits/stl_vector.h **** 	return (__len < size() || __len > max_size()) ? max_size() : __len;
 2786              		.loc 5 1761 30
 2787 0063 488B45C8 		movq	-56(%rbp), %rax
 2788 0067 4889C7   		movq	%rax, %rdi
 2789 006a E8000000 		call	_ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE4sizeEv@P
 2789      00
 2790 006f 4889C3   		movq	%rax, %rbx
1761:/usr/include/c++/11/bits/stl_vector.h **** 	return (__len < size() || __len > max_size()) ? max_size() : __len;
 2791              		.loc 5 1761 50
 2792 0072 488B45C8 		movq	-56(%rbp), %rax
 2793 0076 4889C7   		movq	%rax, %rdi
 2794 0079 E8000000 		call	_ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE4sizeEv@P
 2794      00
 2795 007e 488945D8 		movq	%rax, -40(%rbp)
1761:/usr/include/c++/11/bits/stl_vector.h **** 	return (__len < size() || __len > max_size()) ? max_size() : __len;
 2796              		.loc 5 1761 45
 2797 0082 488D55C0 		leaq	-64(%rbp), %rdx
 2798 0086 488D45D8 		leaq	-40(%rbp), %rax
 2799 008a 4889D6   		movq	%rdx, %rsi
 2800 008d 4889C7   		movq	%rax, %rdi
 2801 0090 E8000000 		call	_ZSt3maxImERKT_S2_S2_@PLT
 2801      00
1761:/usr/include/c++/11/bits/stl_vector.h **** 	return (__len < size() || __len > max_size()) ? max_size() : __len;
 2802              		.loc 5 1761 33
 2803 0095 488B00   		movq	(%rax), %rax
1761:/usr/include/c++/11/bits/stl_vector.h **** 	return (__len < size() || __len > max_size()) ? max_size() : __len;
 2804              		.loc 5 1761 18
 2805 0098 4801D8   		addq	%rbx, %rax
 2806 009b 488945E0 		movq	%rax, -32(%rbp)
1762:/usr/include/c++/11/bits/stl_vector.h ****       }
 2807              		.loc 5 1762 22
 2808 009f 488B45C8 		movq	-56(%rbp), %rax
 2809 00a3 4889C7   		movq	%rax, %rdi
 2810 00a6 E8000000 		call	_ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE4sizeEv@P
 2810      00
1762:/usr/include/c++/11/bits/stl_vector.h ****       }
 2811              		.loc 5 1762 48
 2812 00ab 483945E0 		cmpq	%rax, -32(%rbp)
 2813 00af 7212     		jb	.L137
1762:/usr/include/c++/11/bits/stl_vector.h ****       }
 2814              		.loc 5 1762 44 discriminator 2
 2815 00b1 488B45C8 		movq	-56(%rbp), %rax
 2816 00b5 4889C7   		movq	%rax, %rdi
 2817 00b8 E8000000 		call	_ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE8max_size
 2817      00
1762:/usr/include/c++/11/bits/stl_vector.h ****       }
 2818              		.loc 5 1762 25 discriminator 2
 2819 00bd 483945E0 		cmpq	%rax, -32(%rbp)
 2820 00c1 760E     		jbe	.L138
 2821              	.L137:
1762:/usr/include/c++/11/bits/stl_vector.h ****       }
 2822              		.loc 5 1762 58 discriminator 3
 2823 00c3 488B45C8 		movq	-56(%rbp), %rax
 2824 00c7 4889C7   		movq	%rax, %rdi
 2825 00ca E8000000 		call	_ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE8max_size
 2825      00
1762:/usr/include/c++/11/bits/stl_vector.h ****       }
 2826              		.loc 5 1762 48 discriminator 3
 2827 00cf EB04     		jmp	.L139
 2828              	.L138:
1762:/usr/include/c++/11/bits/stl_vector.h ****       }
 2829              		.loc 5 1762 48 is_stmt 0 discriminator 4
 2830 00d1 488B45E0 		movq	-32(%rbp), %rax
 2831              	.L139:
 2832              		.loc 5 1763 7 is_stmt 1 discriminator 6
 2833 00d5 488B55E8 		movq	-24(%rbp), %rdx
 2834 00d9 64482B14 		subq	%fs:40, %rdx
 2834      25280000 
 2834      00
 2835 00e2 7405     		je	.L141
 2836              		.loc 5 1763 7 is_stmt 0
 2837 00e4 E8000000 		call	__stack_chk_fail@PLT
 2837      00
 2838              	.L141:
 2839 00e9 488B5DF8 		movq	-8(%rbp), %rbx
 2840 00ed C9       		leave
 2841              		.cfi_def_cfa 7, 8
 2842 00ee C3       		ret
 2843              		.cfi_endproc
 2844              	.LFE1037:
 2846              		.section	.text._ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE
 2847              		.align 2
 2848              		.weak	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE5beginEv
 2850              	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE5beginEv:
 2851              	.LFB1038:
 811:/usr/include/c++/11/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_start); }
 2852              		.loc 5 811 7 is_stmt 1
 2853              		.cfi_startproc
 2854 0000 F30F1EFA 		endbr64
 2855 0004 55       		pushq	%rbp
 2856              		.cfi_def_cfa_offset 16
 2857              		.cfi_offset 6, -16
 2858 0005 4889E5   		movq	%rsp, %rbp
 2859              		.cfi_def_cfa_register 6
 2860 0008 4883EC20 		subq	$32, %rsp
 2861 000c 48897DE8 		movq	%rdi, -24(%rbp)
 811:/usr/include/c++/11/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_start); }
 2862              		.loc 5 811 7
 2863 0010 64488B04 		movq	%fs:40, %rax
 2863      25280000 
 2863      00
 2864 0019 488945F8 		movq	%rax, -8(%rbp)
 2865 001d 31C0     		xorl	%eax, %eax
 812:/usr/include/c++/11/bits/stl_vector.h **** 
 2866              		.loc 5 812 39
 2867 001f 488B55E8 		movq	-24(%rbp), %rdx
 812:/usr/include/c++/11/bits/stl_vector.h **** 
 2868              		.loc 5 812 16
 2869 0023 488D45F0 		leaq	-16(%rbp), %rax
 2870 0027 4889D6   		movq	%rdx, %rsi
 2871 002a 4889C7   		movq	%rax, %rdi
 2872 002d E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcE
 2872      00
 812:/usr/include/c++/11/bits/stl_vector.h **** 
 2873              		.loc 5 812 47
 2874 0032 488B45F0 		movq	-16(%rbp), %rax
 812:/usr/include/c++/11/bits/stl_vector.h **** 
 2875              		.loc 5 812 50
 2876 0036 488B55F8 		movq	-8(%rbp), %rdx
 2877 003a 64482B14 		subq	%fs:40, %rdx
 2877      25280000 
 2877      00
 2878 0043 7405     		je	.L144
 2879 0045 E8000000 		call	__stack_chk_fail@PLT
 2879      00
 2880              	.L144:
 2881 004a C9       		leave
 2882              		.cfi_def_cfa 7, 8
 2883 004b C3       		ret
 2884              		.cfi_endproc
 2885              	.LFE1038:
 2887              		.section	.text._ZN9__gnu_cxxmiIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6v
 2888              		.weak	_ZN9__gnu_cxxmiIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_
 2890              	_ZN9__gnu_cxxmiIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_E
 2891              	.LFB1039:
1234:/usr/include/c++/11/bits/stl_iterator.h **** 	      const __normal_iterator<_Iterator, _Container>& __rhs)
 2892              		.loc 9 1234 5
 2893              		.cfi_startproc
 2894 0000 F30F1EFA 		endbr64
 2895 0004 55       		pushq	%rbp
 2896              		.cfi_def_cfa_offset 16
 2897              		.cfi_offset 6, -16
 2898 0005 4889E5   		movq	%rsp, %rbp
 2899              		.cfi_def_cfa_register 6
 2900 0008 53       		pushq	%rbx
 2901 0009 4883EC18 		subq	$24, %rsp
 2902              		.cfi_offset 3, -24
 2903 000d 48897DE8 		movq	%rdi, -24(%rbp)
 2904 0011 488975E0 		movq	%rsi, -32(%rbp)
 2905              		.loc 9 1237 24
 2906 0015 488B45E8 		movq	-24(%rbp), %rax
 2907 0019 4889C7   		movq	%rax, %rdi
 2908 001c E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIc
 2908      00
 2909              		.loc 9 1237 27
 2910 0021 488B18   		movq	(%rax), %rbx
 2911              		.loc 9 1237 39
 2912 0024 488B45E0 		movq	-32(%rbp), %rax
 2913 0028 4889C7   		movq	%rax, %rdi
 2914 002b E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIc
 2914      00
 2915              		.loc 9 1237 27
 2916 0030 488B10   		movq	(%rax), %rdx
 2917 0033 4889D8   		movq	%rbx, %rax
 2918 0036 4829D0   		subq	%rdx, %rax
 2919              		.loc 9 1237 40
 2920 0039 48C1F803 		sarq	$3, %rax
 2921 003d 4889C2   		movq	%rax, %rdx
 2922 0040 48B8CDCC 		movabsq	$-3689348814741910323, %rax
 2922      CCCCCCCC 
 2922      CCCC
 2923 004a 480FAFC2 		imulq	%rdx, %rax
 2924              		.loc 9 1237 43
 2925 004e 488B5DF8 		movq	-8(%rbp), %rbx
 2926 0052 C9       		leave
 2927              		.cfi_def_cfa 7, 8
 2928 0053 C3       		ret
 2929              		.cfi_endproc
 2930              	.LFE1039:
 2932              		.section	.text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES
 2933              		.align 2
 2934              		.weak	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE11
 2936              	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE11_M_allo
 2937              	.LFB1040:
 343:/usr/include/c++/11/bits/stl_vector.h ****       {
 2938              		.loc 5 343 7
 2939              		.cfi_startproc
 2940 0000 F30F1EFA 		endbr64
 2941 0004 55       		pushq	%rbp
 2942              		.cfi_def_cfa_offset 16
 2943              		.cfi_offset 6, -16
 2944 0005 4889E5   		movq	%rsp, %rbp
 2945              		.cfi_def_cfa_register 6
 2946 0008 4883EC10 		subq	$16, %rsp
 2947 000c 48897DF8 		movq	%rdi, -8(%rbp)
 2948 0010 488975F0 		movq	%rsi, -16(%rbp)
 346:/usr/include/c++/11/bits/stl_vector.h ****       }
 2949              		.loc 5 346 18
 2950 0014 48837DF0 		cmpq	$0, -16(%rbp)
 2950      00
 2951 0019 7415     		je	.L148
 346:/usr/include/c++/11/bits/stl_vector.h ****       }
 2952              		.loc 5 346 34 discriminator 1
 2953 001b 488B45F8 		movq	-8(%rbp), %rax
 346:/usr/include/c++/11/bits/stl_vector.h ****       }
 2954              		.loc 5 346 33 discriminator 1
 2955 001f 488B55F0 		movq	-16(%rbp), %rdx
 2956 0023 4889D6   		movq	%rdx, %rsi
 2957 0026 4889C7   		movq	%rax, %rdi
 2958 0029 E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE
 2958      00
 346:/usr/include/c++/11/bits/stl_vector.h ****       }
 2959              		.loc 5 346 58 discriminator 1
 2960 002e EB05     		jmp	.L150
 2961              	.L148:
 346:/usr/include/c++/11/bits/stl_vector.h ****       }
 2962              		.loc 5 346 18 discriminator 2
 2963 0030 B8000000 		movl	$0, %eax
 2963      00
 2964              	.L150:
 347:/usr/include/c++/11/bits/stl_vector.h **** 
 2965              		.loc 5 347 7 discriminator 5
 2966 0035 C9       		leave
 2967              		.cfi_def_cfa 7, 8
 2968 0036 C3       		ret
 2969              		.cfi_endproc
 2970              	.LFE1040:
 2972              		.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_tra
 2973              		.align 2
 2974              		.weak	_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaI
 2976              	_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt
 2977              	.LFB1041:
1088:/usr/include/c++/11/bits/stl_iterator.h ****       { return _M_current; }
 2978              		.loc 9 1088 7
 2979              		.cfi_startproc
 2980 0000 F30F1EFA 		endbr64
 2981 0004 55       		pushq	%rbp
 2982              		.cfi_def_cfa_offset 16
 2983              		.cfi_offset 6, -16
 2984 0005 4889E5   		movq	%rsp, %rbp
 2985              		.cfi_def_cfa_register 6
 2986 0008 48897DF8 		movq	%rdi, -8(%rbp)
1089:/usr/include/c++/11/bits/stl_iterator.h ****     };
 2987              		.loc 9 1089 16
 2988 000c 488B45F8 		movq	-8(%rbp), %rax
1089:/usr/include/c++/11/bits/stl_iterator.h ****     };
 2989              		.loc 9 1089 28
 2990 0010 5D       		popq	%rbp
 2991              		.cfi_def_cfa 7, 8
 2992 0011 C3       		ret
 2993              		.cfi_endproc
 2994              	.LFE1041:
 2996              		.section	.text._ZSt34__uninitialized_move_if_noexcept_aIPSt4pairIiNSt7__cxx1112basic_stringIcSt11c
 2997              		.weak	_ZSt34__uninitialized_move_if_noexcept_aIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_trait
 2999              	_ZSt34__uninitialized_move_if_noexcept_aIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaI
 3000              	.LFB1042:
 349:/usr/include/c++/11/bits/stl_uninitialized.h **** 				       _InputIterator __last,
 3001              		.loc 13 349 5
 3002              		.cfi_startproc
 3003 0000 F30F1EFA 		endbr64
 3004 0004 55       		pushq	%rbp
 3005              		.cfi_def_cfa_offset 16
 3006              		.cfi_offset 6, -16
 3007 0005 4889E5   		movq	%rsp, %rbp
 3008              		.cfi_def_cfa_register 6
 3009 0008 4883EC20 		subq	$32, %rsp
 3010 000c 48897DF8 		movq	%rdi, -8(%rbp)
 3011 0010 488975F0 		movq	%rsi, -16(%rbp)
 3012 0014 488955E8 		movq	%rdx, -24(%rbp)
 3013 0018 48894DE0 		movq	%rcx, -32(%rbp)
 355:/usr/include/c++/11/bits/stl_uninitialized.h **** 	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 3014              		.loc 13 355 2
 3015 001c 488B4DE0 		movq	-32(%rbp), %rcx
 3016 0020 488B55E8 		movq	-24(%rbp), %rdx
 3017 0024 488B75F0 		movq	-16(%rbp), %rsi
 3018 0028 488B45F8 		movq	-8(%rbp), %rax
 3019 002c 4889C7   		movq	%rax, %rdi
 3020 002f E8000000 		call	_ZSt22__uninitialized_copy_aIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES
 3020      00
 3021              		.loc 13 357 5
 3022 0034 C9       		leave
 3023              		.cfi_def_cfa 7, 8
 3024 0035 C3       		ret
 3025              		.cfi_endproc
 3026              	.LFE1042:
 3028              		.section	.text._ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_trait
 3029              		.weak	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcE
 3031              	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEES8_
 3032              	.LFB1043:
 147:/usr/include/c++/11/ext/alloc_traits.h ****     { __a.destroy(__p); }
 3033              		.loc 7 147 17
 3034              		.cfi_startproc
 3035 0000 F30F1EFA 		endbr64
 3036 0004 55       		pushq	%rbp
 3037              		.cfi_def_cfa_offset 16
 3038              		.cfi_offset 6, -16
 3039 0005 4889E5   		movq	%rsp, %rbp
 3040              		.cfi_def_cfa_register 6
 3041 0008 4883EC10 		subq	$16, %rsp
 3042 000c 48897DF8 		movq	%rdi, -8(%rbp)
 3043 0010 488975F0 		movq	%rsi, -16(%rbp)
 3044              		.loc 7 148 18
 3045 0014 488B55F0 		movq	-16(%rbp), %rdx
 3046 0018 488B45F8 		movq	-8(%rbp), %rax
 3047 001c 4889D6   		movq	%rdx, %rsi
 3048 001f 4889C7   		movq	%rax, %rdi
 3049 0022 E8000000 		call	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7
 3049      00
 3050              		.loc 7 148 25
 3051 0027 90       		nop
 3052 0028 C9       		leave
 3053              		.cfi_def_cfa 7, 8
 3054 0029 C3       		ret
 3055              		.cfi_endproc
 3056              	.LFE1043:
 3058              		.section	.text._ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_trai
 3059              		.align 2
 3060              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIc
 3062              	_ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6
 3063              	.LFB1045:
1010:/usr/include/c++/11/bits/stl_iterator.h ****       : _M_current(__i) { }
 3064              		.loc 9 1010 7
 3065              		.cfi_startproc
 3066 0000 F30F1EFA 		endbr64
 3067 0004 55       		pushq	%rbp
 3068              		.cfi_def_cfa_offset 16
 3069              		.cfi_offset 6, -16
 3070 0005 4889E5   		movq	%rsp, %rbp
 3071              		.cfi_def_cfa_register 6
 3072 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3073 000c 488975F0 		movq	%rsi, -16(%rbp)
 3074              	.LBB16:
1011:/usr/include/c++/11/bits/stl_iterator.h **** 
 3075              		.loc 9 1011 9
 3076 0010 488B45F0 		movq	-16(%rbp), %rax
 3077 0014 488B10   		movq	(%rax), %rdx
 3078 0017 488B45F8 		movq	-8(%rbp), %rax
 3079 001b 488910   		movq	%rdx, (%rax)
 3080              	.LBE16:
1011:/usr/include/c++/11/bits/stl_iterator.h **** 
 3081              		.loc 9 1011 27
 3082 001e 90       		nop
 3083 001f 5D       		popq	%rbp
 3084              		.cfi_def_cfa 7, 8
 3085 0020 C3       		ret
 3086              		.cfi_endproc
 3087              	.LFE1045:
 3089              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIc
 3090              		.set	_ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcE
 3091              		.section	.text._ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcE
 3092              		.align 2
 3093              		.weak	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE
 3095              	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev:
 3096              	.LFB1052:
  89:/usr/include/c++/11/ext/new_allocator.h **** 
 3097              		.loc 12 89 7
 3098              		.cfi_startproc
 3099 0000 F30F1EFA 		endbr64
 3100 0004 55       		pushq	%rbp
 3101              		.cfi_def_cfa_offset 16
 3102              		.cfi_offset 6, -16
 3103 0005 4889E5   		movq	%rsp, %rbp
 3104              		.cfi_def_cfa_register 6
 3105 0008 48897DF8 		movq	%rdi, -8(%rbp)
  89:/usr/include/c++/11/ext/new_allocator.h **** 
 3106              		.loc 12 89 48
 3107 000c 90       		nop
 3108 000d 5D       		popq	%rbp
 3109              		.cfi_def_cfa 7, 8
 3110 000e C3       		ret
 3111              		.cfi_endproc
 3112              	.LFE1052:
 3114              		.weak	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE
 3115              		.set	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED
 3116              		.section	.text._ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_trait
 3117              		.weak	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcE
 3119              	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEES8_
 3120              	.LFB1054:
 140:/usr/include/c++/11/ext/alloc_traits.h ****     { __a.deallocate(__p, __n); }
 3121              		.loc 7 140 17
 3122              		.cfi_startproc
 3123 0000 F30F1EFA 		endbr64
 3124 0004 55       		pushq	%rbp
 3125              		.cfi_def_cfa_offset 16
 3126              		.cfi_offset 6, -16
 3127 0005 4889E5   		movq	%rsp, %rbp
 3128              		.cfi_def_cfa_register 6
 3129 0008 4883EC20 		subq	$32, %rsp
 3130 000c 48897DF8 		movq	%rdi, -8(%rbp)
 3131 0010 488975F0 		movq	%rsi, -16(%rbp)
 3132 0014 488955E8 		movq	%rdx, -24(%rbp)
 141:/usr/include/c++/11/ext/alloc_traits.h **** 
 3133              		.loc 7 141 21
 3134 0018 488B55E8 		movq	-24(%rbp), %rdx
 3135 001c 488B4DF0 		movq	-16(%rbp), %rcx
 3136 0020 488B45F8 		movq	-8(%rbp), %rax
 3137 0024 4889CE   		movq	%rcx, %rsi
 3138 0027 4889C7   		movq	%rax, %rdi
 3139 002a E8000000 		call	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE1
 3139      00
 141:/usr/include/c++/11/ext/alloc_traits.h **** 
 3140              		.loc 7 141 33
 3141 002f 90       		nop
 3142 0030 C9       		leave
 3143              		.cfi_def_cfa 7, 8
 3144 0031 C3       		ret
 3145              		.cfi_endproc
 3146              	.LFE1054:
 3148              		.section	.text._ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_t
 3149              		.weak	_ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcES
 3151              	_ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE
 3152              	.LFB1055:
 160:/usr/include/c++/11/bits/stl_construct.h **** 	{
 3153              		.loc 11 160 2
 3154              		.cfi_startproc
 3155 0000 F30F1EFA 		endbr64
 3156 0004 55       		pushq	%rbp
 3157              		.cfi_def_cfa_offset 16
 3158              		.cfi_offset 6, -16
 3159 0005 4889E5   		movq	%rsp, %rbp
 3160              		.cfi_def_cfa_register 6
 3161 0008 4883EC10 		subq	$16, %rsp
 3162 000c 48897DF8 		movq	%rdi, -8(%rbp)
 3163 0010 488975F0 		movq	%rsi, -16(%rbp)
 162:/usr/include/c++/11/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 3164              		.loc 11 162 4
 3165 0014 EB19     		jmp	.L160
 3166              	.L161:
 163:/usr/include/c++/11/bits/stl_construct.h **** 	}
 3167              		.loc 11 163 19 discriminator 2
 3168 0016 488B45F8 		movq	-8(%rbp), %rax
 3169 001a 4889C7   		movq	%rax, %rdi
 3170 001d E8000000 		call	_ZSt11__addressofISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT_RS8_@PLT
 3170      00
 3171 0022 4889C7   		movq	%rax, %rdi
 3172 0025 E8000000 		call	_ZSt8_DestroyISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvPT_@PLT
 3172      00
 162:/usr/include/c++/11/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 3173              		.loc 11 162 4 discriminator 2
 3174 002a 488345F8 		addq	$40, -8(%rbp)
 3174      28
 3175              	.L160:
 162:/usr/include/c++/11/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 3176              		.loc 11 162 19 discriminator 1
 3177 002f 488B45F8 		movq	-8(%rbp), %rax
 3178 0033 483B45F0 		cmpq	-16(%rbp), %rax
 3179 0037 75DD     		jne	.L161
 164:/usr/include/c++/11/bits/stl_construct.h ****     };
 3180              		.loc 11 164 2
 3181 0039 90       		nop
 3182 003a 90       		nop
 3183 003b C9       		leave
 3184              		.cfi_def_cfa 7, 8
 3185 003c C3       		ret
 3186              		.cfi_endproc
 3187              	.LFE1055:
 3189              		.section	.text._ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE
 3190              		.align 2
 3191              		.weak	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EEC2ERKS9_
 3193              	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EEC2ERKS9_:
 3194              	.LFB1057:
 553:/usr/include/c++/11/bits/stl_vector.h ****       : _Base(__x.size(),
 3195              		.loc 5 553 7
 3196              		.cfi_startproc
 3197              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 3198              		.cfi_lsda 0x1b,.LLSDA1057
 3199 0000 F30F1EFA 		endbr64
 3200 0004 55       		pushq	%rbp
 3201              		.cfi_def_cfa_offset 16
 3202              		.cfi_offset 6, -16
 3203 0005 4889E5   		movq	%rsp, %rbp
 3204              		.cfi_def_cfa_register 6
 3205 0008 4155     		pushq	%r13
 3206 000a 4154     		pushq	%r12
 3207 000c 53       		pushq	%rbx
 3208 000d 4883EC18 		subq	$24, %rsp
 3209              		.cfi_offset 13, -24
 3210              		.cfi_offset 12, -32
 3211              		.cfi_offset 3, -40
 3212 0011 48897DD8 		movq	%rdi, -40(%rbp)
 3213 0015 488975D0 		movq	%rsi, -48(%rbp)
 3214              	.LBB17:
 555:/usr/include/c++/11/bits/stl_vector.h ****       {
 3215              		.loc 5 555 61
 3216 0019 488B5DD8 		movq	-40(%rbp), %rbx
 555:/usr/include/c++/11/bits/stl_vector.h ****       {
 3217              		.loc 5 555 58
 3218 001d 488B45D0 		movq	-48(%rbp), %rax
 3219 0021 4889C7   		movq	%rax, %rdi
 3220 0024 E8000000 		call	_ZNKSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE19
 3220      00
 555:/usr/include/c++/11/bits/stl_vector.h ****       {
 3221              		.loc 5 555 34
 3222 0029 4889C7   		movq	%rax, %rdi
 3223 002c E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE
 3223      00
 3224 0031 4989C4   		movq	%rax, %r12
 555:/usr/include/c++/11/bits/stl_vector.h ****       {
 3225              		.loc 5 555 61
 3226 0034 488B45D0 		movq	-48(%rbp), %rax
 3227 0038 4889C7   		movq	%rax, %rdi
 3228 003b E8000000 		call	_ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE4sizeEv@P
 3228      00
 3229 0040 4C89E2   		movq	%r12, %rdx
 3230 0043 4889C6   		movq	%rax, %rsi
 3231 0046 4889DF   		movq	%rbx, %rdi
 3232              	.LEHB41:
 3233 0049 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EEC2E
 3233      00
 3234              	.LEHE41:
 560:/usr/include/c++/11/bits/stl_vector.h ****       }
 3235              		.loc 5 560 30
 3236 004e 488B45D8 		movq	-40(%rbp), %rax
 3237 0052 4889C7   		movq	%rax, %rdi
 3238 0055 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE19_
 3238      00
 3239 005a 4989C5   		movq	%rax, %r13
 558:/usr/include/c++/11/bits/stl_vector.h **** 				      this->_M_impl._M_start,
 3240              		.loc 5 558 31
 3241 005d 488B45D8 		movq	-40(%rbp), %rax
 3242 0061 488B18   		movq	(%rax), %rbx
 3243 0064 488B45D0 		movq	-48(%rbp), %rax
 3244 0068 4889C7   		movq	%rax, %rdi
 3245              	.LEHB42:
 3246 006b E8000000 		call	_ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE3endEv@PL
 3246      00
 3247 0070 4989C4   		movq	%rax, %r12
 3248 0073 488B45D0 		movq	-48(%rbp), %rax
 3249 0077 4889C7   		movq	%rax, %rdi
 3250 007a E8000000 		call	_ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE5beginEv@
 3250      00
 558:/usr/include/c++/11/bits/stl_vector.h **** 				      this->_M_impl._M_start,
 3251              		.loc 5 558 31 is_stmt 0 discriminator 1
 3252 007f 4C89E9   		movq	%r13, %rcx
 3253 0082 4889DA   		movq	%rbx, %rdx
 3254 0085 4C89E6   		movq	%r12, %rsi
 3255 0088 4889C7   		movq	%rax, %rdi
 3256 008b E8000000 		call	_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_str
 3256      00
 3257              	.LEHE42:
 557:/usr/include/c++/11/bits/stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 3258              		.loc 5 557 26 is_stmt 1 discriminator 2
 3259 0090 488B55D8 		movq	-40(%rbp), %rdx
 3260 0094 48894208 		movq	%rax, 8(%rdx)
 3261              	.LBE17:
 561:/usr/include/c++/11/bits/stl_vector.h **** 
 3262              		.loc 5 561 7 discriminator 2
 3263 0098 EB1E     		jmp	.L165
 3264              	.L164:
 3265 009a F30F1EFA 		endbr64
 3266              	.LBB18:
 561:/usr/include/c++/11/bits/stl_vector.h **** 
 3267              		.loc 5 561 7 is_stmt 0
 3268 009e 4889C3   		movq	%rax, %rbx
 3269 00a1 488B45D8 		movq	-40(%rbp), %rax
 3270 00a5 4889C7   		movq	%rax, %rdi
 3271 00a8 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2E
 3271      00
 3272 00ad 4889D8   		movq	%rbx, %rax
 3273 00b0 4889C7   		movq	%rax, %rdi
 3274              	.LEHB43:
 3275 00b3 E8000000 		call	_Unwind_Resume@PLT
 3275      00
 3276              	.LEHE43:
 3277              	.L165:
 3278              	.LBE18:
 3279 00b8 4883C418 		addq	$24, %rsp
 3280 00bc 5B       		popq	%rbx
 3281 00bd 415C     		popq	%r12
 3282 00bf 415D     		popq	%r13
 3283 00c1 5D       		popq	%rbp
 3284              		.cfi_def_cfa 7, 8
 3285 00c2 C3       		ret
 3286              		.cfi_endproc
 3287              	.LFE1057:
 3288              		.section	.gcc_except_table
 3289              	.LLSDA1057:
 3290 00e8 FF       		.byte	0xff
 3291 00e9 FF       		.byte	0xff
 3292 00ea 01       		.byte	0x1
 3293 00eb 0E       		.uleb128 .LLSDACSE1057-.LLSDACSB1057
 3294              	.LLSDACSB1057:
 3295 00ec 49       		.uleb128 .LEHB41-.LFB1057
 3296 00ed 05       		.uleb128 .LEHE41-.LEHB41
 3297 00ee 00       		.uleb128 0
 3298 00ef 00       		.uleb128 0
 3299 00f0 6B       		.uleb128 .LEHB42-.LFB1057
 3300 00f1 25       		.uleb128 .LEHE42-.LEHB42
 3301 00f2 9A01     		.uleb128 .L164-.LFB1057
 3302 00f4 00       		.uleb128 0
 3303 00f5 B301     		.uleb128 .LEHB43-.LFB1057
 3304 00f7 05       		.uleb128 .LEHE43-.LEHB43
 3305 00f8 00       		.uleb128 0
 3306 00f9 00       		.uleb128 0
 3307              	.LLSDACSE1057:
 3308              		.section	.text._ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE
 3310              		.weak	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EEC1ERKS9_
 3311              		.set	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EEC1ERKS9_,_
 3312              		.section	.text._ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE8max_sizeEv,"axG",@progbits,_Z
 3313              		.align 2
 3314              		.weak	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE8max_sizeEv
 3316              	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE8max_sizeEv:
 3317              	.LFB1059:
 923:/usr/include/c++/11/bits/stl_vector.h ****       { return _S_max_size(_M_get_Tp_allocator()); }
 3318              		.loc 5 923 7 is_stmt 1
 3319              		.cfi_startproc
 3320 0000 F30F1EFA 		endbr64
 3321 0004 55       		pushq	%rbp
 3322              		.cfi_def_cfa_offset 16
 3323              		.cfi_offset 6, -16
 3324 0005 4889E5   		movq	%rsp, %rbp
 3325              		.cfi_def_cfa_register 6
 3326 0008 4883EC10 		subq	$16, %rsp
 3327 000c 48897DF8 		movq	%rdi, -8(%rbp)
 924:/usr/include/c++/11/bits/stl_vector.h **** 
 3328              		.loc 5 924 47
 3329 0010 488B45F8 		movq	-8(%rbp), %rax
 3330 0014 4889C7   		movq	%rax, %rdi
 3331 0017 E8000000 		call	_ZNKSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv@PLT
 3331      00
 924:/usr/include/c++/11/bits/stl_vector.h **** 
 3332              		.loc 5 924 27
 3333 001c 4889C7   		movq	%rax, %rdi
 3334 001f E8000000 		call	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE11_S_max_sizeERKS2_@PLT
 3334      00
 924:/usr/include/c++/11/bits/stl_vector.h **** 
 3335              		.loc 5 924 52
 3336 0024 C9       		leave
 3337              		.cfi_def_cfa 7, 8
 3338 0025 C3       		ret
 3339              		.cfi_endproc
 3340              	.LFE1059:
 3342              		.section	.text._ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4sizeEv,"axG",@progbits,_ZNKSt
 3343              		.align 2
 3344              		.weak	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4sizeEv
 3346              	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4sizeEv:
 3347              	.LFB1060:
 918:/usr/include/c++/11/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 3348              		.loc 5 918 7
 3349              		.cfi_startproc
 3350 0000 F30F1EFA 		endbr64
 3351 0004 55       		pushq	%rbp
 3352              		.cfi_def_cfa_offset 16
 3353              		.cfi_offset 6, -16
 3354 0005 4889E5   		movq	%rsp, %rbp
 3355              		.cfi_def_cfa_register 6
 3356 0008 48897DF8 		movq	%rdi, -8(%rbp)
 919:/usr/include/c++/11/bits/stl_vector.h **** 
 3357              		.loc 5 919 40
 3358 000c 488B45F8 		movq	-8(%rbp), %rax
 3359 0010 488B5008 		movq	8(%rax), %rdx
 919:/usr/include/c++/11/bits/stl_vector.h **** 
 3360              		.loc 5 919 66
 3361 0014 488B45F8 		movq	-8(%rbp), %rax
 3362 0018 488B08   		movq	(%rax), %rcx
 919:/usr/include/c++/11/bits/stl_vector.h **** 
 3363              		.loc 5 919 50
 3364 001b 4889D0   		movq	%rdx, %rax
 3365 001e 4829C8   		subq	%rcx, %rax
 3366 0021 48C1F807 		sarq	$7, %rax
 919:/usr/include/c++/11/bits/stl_vector.h **** 
 3367              		.loc 5 919 77
 3368 0025 5D       		popq	%rbp
 3369              		.cfi_def_cfa 7, 8
 3370 0026 C3       		ret
 3371              		.cfi_endproc
 3372              	.LFE1060:
 3374              		.section	.text._ZSt3maxImERKT_S2_S2_,"axG",@progbits,_ZSt3maxImERKT_S2_S2_,comdat
 3375              		.weak	_ZSt3maxImERKT_S2_S2_
 3377              	_ZSt3maxImERKT_S2_S2_:
 3378              	.LFB1061:
 3379              		.file 14 "/usr/include/c++/11/bits/stl_algobase.h"
   1:/usr/include/c++/11/bits/stl_algobase.h **** // Core algorithmic facilities -*- C++ -*-
   2:/usr/include/c++/11/bits/stl_algobase.h **** 
   3:/usr/include/c++/11/bits/stl_algobase.h **** // Copyright (C) 2001-2021 Free Software Foundation, Inc.
   4:/usr/include/c++/11/bits/stl_algobase.h **** //
   5:/usr/include/c++/11/bits/stl_algobase.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/11/bits/stl_algobase.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/11/bits/stl_algobase.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/11/bits/stl_algobase.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/11/bits/stl_algobase.h **** // any later version.
  10:/usr/include/c++/11/bits/stl_algobase.h **** 
  11:/usr/include/c++/11/bits/stl_algobase.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/11/bits/stl_algobase.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/11/bits/stl_algobase.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/11/bits/stl_algobase.h **** // GNU General Public License for more details.
  15:/usr/include/c++/11/bits/stl_algobase.h **** 
  16:/usr/include/c++/11/bits/stl_algobase.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/11/bits/stl_algobase.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/11/bits/stl_algobase.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/11/bits/stl_algobase.h **** 
  20:/usr/include/c++/11/bits/stl_algobase.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/11/bits/stl_algobase.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/11/bits/stl_algobase.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/11/bits/stl_algobase.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/11/bits/stl_algobase.h **** 
  25:/usr/include/c++/11/bits/stl_algobase.h **** /*
  26:/usr/include/c++/11/bits/stl_algobase.h ****  *
  27:/usr/include/c++/11/bits/stl_algobase.h ****  * Copyright (c) 1994
  28:/usr/include/c++/11/bits/stl_algobase.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/11/bits/stl_algobase.h ****  *
  30:/usr/include/c++/11/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/11/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/11/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/11/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/11/bits/stl_algobase.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/11/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/11/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/11/bits/stl_algobase.h ****  *
  38:/usr/include/c++/11/bits/stl_algobase.h ****  *
  39:/usr/include/c++/11/bits/stl_algobase.h ****  * Copyright (c) 1996-1998
  40:/usr/include/c++/11/bits/stl_algobase.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/11/bits/stl_algobase.h ****  *
  42:/usr/include/c++/11/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/11/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/11/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/11/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/11/bits/stl_algobase.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/11/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/11/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/11/bits/stl_algobase.h ****  */
  50:/usr/include/c++/11/bits/stl_algobase.h **** 
  51:/usr/include/c++/11/bits/stl_algobase.h **** /** @file bits/stl_algobase.h
  52:/usr/include/c++/11/bits/stl_algobase.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/11/bits/stl_algobase.h ****  *  Do not attempt to use it directly. @headername{algorithm}
  54:/usr/include/c++/11/bits/stl_algobase.h ****  */
  55:/usr/include/c++/11/bits/stl_algobase.h **** 
  56:/usr/include/c++/11/bits/stl_algobase.h **** #ifndef _STL_ALGOBASE_H
  57:/usr/include/c++/11/bits/stl_algobase.h **** #define _STL_ALGOBASE_H 1
  58:/usr/include/c++/11/bits/stl_algobase.h **** 
  59:/usr/include/c++/11/bits/stl_algobase.h **** #include <bits/c++config.h>
  60:/usr/include/c++/11/bits/stl_algobase.h **** #include <bits/functexcept.h>
  61:/usr/include/c++/11/bits/stl_algobase.h **** #include <bits/cpp_type_traits.h>
  62:/usr/include/c++/11/bits/stl_algobase.h **** #include <ext/type_traits.h>
  63:/usr/include/c++/11/bits/stl_algobase.h **** #include <ext/numeric_traits.h>
  64:/usr/include/c++/11/bits/stl_algobase.h **** #include <bits/stl_pair.h>
  65:/usr/include/c++/11/bits/stl_algobase.h **** #include <bits/stl_iterator_base_types.h>
  66:/usr/include/c++/11/bits/stl_algobase.h **** #include <bits/stl_iterator_base_funcs.h>
  67:/usr/include/c++/11/bits/stl_algobase.h **** #include <bits/stl_iterator.h>
  68:/usr/include/c++/11/bits/stl_algobase.h **** #include <bits/concept_check.h>
  69:/usr/include/c++/11/bits/stl_algobase.h **** #include <debug/debug.h>
  70:/usr/include/c++/11/bits/stl_algobase.h **** #include <bits/move.h> // For std::swap
  71:/usr/include/c++/11/bits/stl_algobase.h **** #include <bits/predefined_ops.h>
  72:/usr/include/c++/11/bits/stl_algobase.h **** #if __cplusplus >= 201103L
  73:/usr/include/c++/11/bits/stl_algobase.h **** # include <type_traits>
  74:/usr/include/c++/11/bits/stl_algobase.h **** #endif
  75:/usr/include/c++/11/bits/stl_algobase.h **** #if __cplusplus > 201703L
  76:/usr/include/c++/11/bits/stl_algobase.h **** # include <compare>
  77:/usr/include/c++/11/bits/stl_algobase.h **** #endif
  78:/usr/include/c++/11/bits/stl_algobase.h **** 
  79:/usr/include/c++/11/bits/stl_algobase.h **** namespace std _GLIBCXX_VISIBILITY(default)
  80:/usr/include/c++/11/bits/stl_algobase.h **** {
  81:/usr/include/c++/11/bits/stl_algobase.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  82:/usr/include/c++/11/bits/stl_algobase.h **** 
  83:/usr/include/c++/11/bits/stl_algobase.h ****   /*
  84:/usr/include/c++/11/bits/stl_algobase.h ****    * A constexpr wrapper for __builtin_memcmp.
  85:/usr/include/c++/11/bits/stl_algobase.h ****    * @param __num The number of elements of type _Tp (not bytes).
  86:/usr/include/c++/11/bits/stl_algobase.h ****    */
  87:/usr/include/c++/11/bits/stl_algobase.h ****   template<typename _Tp, typename _Up>
  88:/usr/include/c++/11/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
  89:/usr/include/c++/11/bits/stl_algobase.h ****     inline int
  90:/usr/include/c++/11/bits/stl_algobase.h ****     __memcmp(const _Tp* __first1, const _Up* __first2, size_t __num)
  91:/usr/include/c++/11/bits/stl_algobase.h ****     {
  92:/usr/include/c++/11/bits/stl_algobase.h **** #if __cplusplus >= 201103L
  93:/usr/include/c++/11/bits/stl_algobase.h ****       static_assert(sizeof(_Tp) == sizeof(_Up), "can be compared with memcmp");
  94:/usr/include/c++/11/bits/stl_algobase.h **** #endif
  95:/usr/include/c++/11/bits/stl_algobase.h **** #ifdef __cpp_lib_is_constant_evaluated
  96:/usr/include/c++/11/bits/stl_algobase.h ****       if (std::is_constant_evaluated())
  97:/usr/include/c++/11/bits/stl_algobase.h **** 	{
  98:/usr/include/c++/11/bits/stl_algobase.h **** 	  for(; __num > 0; ++__first1, ++__first2, --__num)
  99:/usr/include/c++/11/bits/stl_algobase.h **** 	    if (*__first1 != *__first2)
 100:/usr/include/c++/11/bits/stl_algobase.h **** 	      return *__first1 < *__first2 ? -1 : 1;
 101:/usr/include/c++/11/bits/stl_algobase.h **** 	  return 0;
 102:/usr/include/c++/11/bits/stl_algobase.h **** 	}
 103:/usr/include/c++/11/bits/stl_algobase.h ****       else
 104:/usr/include/c++/11/bits/stl_algobase.h **** #endif
 105:/usr/include/c++/11/bits/stl_algobase.h **** 	return __builtin_memcmp(__first1, __first2, sizeof(_Tp) * __num);
 106:/usr/include/c++/11/bits/stl_algobase.h ****     }
 107:/usr/include/c++/11/bits/stl_algobase.h **** 
 108:/usr/include/c++/11/bits/stl_algobase.h **** #if __cplusplus < 201103L
 109:/usr/include/c++/11/bits/stl_algobase.h ****   // See http://gcc.gnu.org/ml/libstdc++/2004-08/msg00167.html: in a
 110:/usr/include/c++/11/bits/stl_algobase.h ****   // nutshell, we are partially implementing the resolution of DR 187,
 111:/usr/include/c++/11/bits/stl_algobase.h ****   // when it's safe, i.e., the value_types are equal.
 112:/usr/include/c++/11/bits/stl_algobase.h ****   template<bool _BoolType>
 113:/usr/include/c++/11/bits/stl_algobase.h ****     struct __iter_swap
 114:/usr/include/c++/11/bits/stl_algobase.h ****     {
 115:/usr/include/c++/11/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 116:/usr/include/c++/11/bits/stl_algobase.h **** 	static void
 117:/usr/include/c++/11/bits/stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 118:/usr/include/c++/11/bits/stl_algobase.h **** 	{
 119:/usr/include/c++/11/bits/stl_algobase.h **** 	  typedef typename iterator_traits<_ForwardIterator1>::value_type
 120:/usr/include/c++/11/bits/stl_algobase.h **** 	    _ValueType1;
 121:/usr/include/c++/11/bits/stl_algobase.h **** 	  _ValueType1 __tmp = *__a;
 122:/usr/include/c++/11/bits/stl_algobase.h **** 	  *__a = *__b;
 123:/usr/include/c++/11/bits/stl_algobase.h **** 	  *__b = __tmp;
 124:/usr/include/c++/11/bits/stl_algobase.h **** 	}
 125:/usr/include/c++/11/bits/stl_algobase.h ****     };
 126:/usr/include/c++/11/bits/stl_algobase.h **** 
 127:/usr/include/c++/11/bits/stl_algobase.h ****   template<>
 128:/usr/include/c++/11/bits/stl_algobase.h ****     struct __iter_swap<true>
 129:/usr/include/c++/11/bits/stl_algobase.h ****     {
 130:/usr/include/c++/11/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 131:/usr/include/c++/11/bits/stl_algobase.h **** 	static void
 132:/usr/include/c++/11/bits/stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 133:/usr/include/c++/11/bits/stl_algobase.h **** 	{
 134:/usr/include/c++/11/bits/stl_algobase.h **** 	  swap(*__a, *__b);
 135:/usr/include/c++/11/bits/stl_algobase.h **** 	}
 136:/usr/include/c++/11/bits/stl_algobase.h ****     };
 137:/usr/include/c++/11/bits/stl_algobase.h **** #endif // C++03
 138:/usr/include/c++/11/bits/stl_algobase.h **** 
 139:/usr/include/c++/11/bits/stl_algobase.h ****   /**
 140:/usr/include/c++/11/bits/stl_algobase.h ****    *  @brief Swaps the contents of two iterators.
 141:/usr/include/c++/11/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 142:/usr/include/c++/11/bits/stl_algobase.h ****    *  @param  __a  An iterator.
 143:/usr/include/c++/11/bits/stl_algobase.h ****    *  @param  __b  Another iterator.
 144:/usr/include/c++/11/bits/stl_algobase.h ****    *  @return   Nothing.
 145:/usr/include/c++/11/bits/stl_algobase.h ****    *
 146:/usr/include/c++/11/bits/stl_algobase.h ****    *  This function swaps the values pointed to by two iterators, not the
 147:/usr/include/c++/11/bits/stl_algobase.h ****    *  iterators themselves.
 148:/usr/include/c++/11/bits/stl_algobase.h ****   */
 149:/usr/include/c++/11/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 150:/usr/include/c++/11/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 151:/usr/include/c++/11/bits/stl_algobase.h ****     inline void
 152:/usr/include/c++/11/bits/stl_algobase.h ****     iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 153:/usr/include/c++/11/bits/stl_algobase.h ****     {
 154:/usr/include/c++/11/bits/stl_algobase.h ****       // concept requirements
 155:/usr/include/c++/11/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 156:/usr/include/c++/11/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 157:/usr/include/c++/11/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 158:/usr/include/c++/11/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 159:/usr/include/c++/11/bits/stl_algobase.h **** 
 160:/usr/include/c++/11/bits/stl_algobase.h **** #if __cplusplus < 201103L
 161:/usr/include/c++/11/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::value_type
 162:/usr/include/c++/11/bits/stl_algobase.h **** 	_ValueType1;
 163:/usr/include/c++/11/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::value_type
 164:/usr/include/c++/11/bits/stl_algobase.h **** 	_ValueType2;
 165:/usr/include/c++/11/bits/stl_algobase.h **** 
 166:/usr/include/c++/11/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType1,
 167:/usr/include/c++/11/bits/stl_algobase.h **** 				  _ValueType2>)
 168:/usr/include/c++/11/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType2,
 169:/usr/include/c++/11/bits/stl_algobase.h **** 				  _ValueType1>)
 170:/usr/include/c++/11/bits/stl_algobase.h **** 
 171:/usr/include/c++/11/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::reference
 172:/usr/include/c++/11/bits/stl_algobase.h **** 	_ReferenceType1;
 173:/usr/include/c++/11/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::reference
 174:/usr/include/c++/11/bits/stl_algobase.h **** 	_ReferenceType2;
 175:/usr/include/c++/11/bits/stl_algobase.h ****       std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
 176:/usr/include/c++/11/bits/stl_algobase.h **** 	&& __are_same<_ValueType1&, _ReferenceType1>::__value
 177:/usr/include/c++/11/bits/stl_algobase.h **** 	&& __are_same<_ValueType2&, _ReferenceType2>::__value>::
 178:/usr/include/c++/11/bits/stl_algobase.h **** 	iter_swap(__a, __b);
 179:/usr/include/c++/11/bits/stl_algobase.h **** #else
 180:/usr/include/c++/11/bits/stl_algobase.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 181:/usr/include/c++/11/bits/stl_algobase.h ****       // 187. iter_swap underspecified
 182:/usr/include/c++/11/bits/stl_algobase.h ****       swap(*__a, *__b);
 183:/usr/include/c++/11/bits/stl_algobase.h **** #endif
 184:/usr/include/c++/11/bits/stl_algobase.h ****     }
 185:/usr/include/c++/11/bits/stl_algobase.h **** 
 186:/usr/include/c++/11/bits/stl_algobase.h ****   /**
 187:/usr/include/c++/11/bits/stl_algobase.h ****    *  @brief Swap the elements of two sequences.
 188:/usr/include/c++/11/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 189:/usr/include/c++/11/bits/stl_algobase.h ****    *  @param  __first1  A forward iterator.
 190:/usr/include/c++/11/bits/stl_algobase.h ****    *  @param  __last1   A forward iterator.
 191:/usr/include/c++/11/bits/stl_algobase.h ****    *  @param  __first2  A forward iterator.
 192:/usr/include/c++/11/bits/stl_algobase.h ****    *  @return   An iterator equal to @p first2+(last1-first1).
 193:/usr/include/c++/11/bits/stl_algobase.h ****    *
 194:/usr/include/c++/11/bits/stl_algobase.h ****    *  Swaps each element in the range @p [first1,last1) with the
 195:/usr/include/c++/11/bits/stl_algobase.h ****    *  corresponding element in the range @p [first2,(last1-first1)).
 196:/usr/include/c++/11/bits/stl_algobase.h ****    *  The ranges must not overlap.
 197:/usr/include/c++/11/bits/stl_algobase.h ****   */
 198:/usr/include/c++/11/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 199:/usr/include/c++/11/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 200:/usr/include/c++/11/bits/stl_algobase.h ****     _ForwardIterator2
 201:/usr/include/c++/11/bits/stl_algobase.h ****     swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 202:/usr/include/c++/11/bits/stl_algobase.h **** 		_ForwardIterator2 __first2)
 203:/usr/include/c++/11/bits/stl_algobase.h ****     {
 204:/usr/include/c++/11/bits/stl_algobase.h ****       // concept requirements
 205:/usr/include/c++/11/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 206:/usr/include/c++/11/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 207:/usr/include/c++/11/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 208:/usr/include/c++/11/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 209:/usr/include/c++/11/bits/stl_algobase.h ****       __glibcxx_requires_valid_range(__first1, __last1);
 210:/usr/include/c++/11/bits/stl_algobase.h **** 
 211:/usr/include/c++/11/bits/stl_algobase.h ****       for (; __first1 != __last1; ++__first1, (void)++__first2)
 212:/usr/include/c++/11/bits/stl_algobase.h **** 	std::iter_swap(__first1, __first2);
 213:/usr/include/c++/11/bits/stl_algobase.h ****       return __first2;
 214:/usr/include/c++/11/bits/stl_algobase.h ****     }
 215:/usr/include/c++/11/bits/stl_algobase.h **** 
 216:/usr/include/c++/11/bits/stl_algobase.h ****   /**
 217:/usr/include/c++/11/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 218:/usr/include/c++/11/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 219:/usr/include/c++/11/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 220:/usr/include/c++/11/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 221:/usr/include/c++/11/bits/stl_algobase.h ****    *  @return   The lesser of the parameters.
 222:/usr/include/c++/11/bits/stl_algobase.h ****    *
 223:/usr/include/c++/11/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 224:/usr/include/c++/11/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 225:/usr/include/c++/11/bits/stl_algobase.h ****    *  preprocessor macro.
 226:/usr/include/c++/11/bits/stl_algobase.h ****   */
 227:/usr/include/c++/11/bits/stl_algobase.h ****   template<typename _Tp>
 228:/usr/include/c++/11/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 229:/usr/include/c++/11/bits/stl_algobase.h ****     inline const _Tp&
 230:/usr/include/c++/11/bits/stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b)
 231:/usr/include/c++/11/bits/stl_algobase.h ****     {
 232:/usr/include/c++/11/bits/stl_algobase.h ****       // concept requirements
 233:/usr/include/c++/11/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 234:/usr/include/c++/11/bits/stl_algobase.h ****       //return __b < __a ? __b : __a;
 235:/usr/include/c++/11/bits/stl_algobase.h ****       if (__b < __a)
 236:/usr/include/c++/11/bits/stl_algobase.h **** 	return __b;
 237:/usr/include/c++/11/bits/stl_algobase.h ****       return __a;
 238:/usr/include/c++/11/bits/stl_algobase.h ****     }
 239:/usr/include/c++/11/bits/stl_algobase.h **** 
 240:/usr/include/c++/11/bits/stl_algobase.h ****   /**
 241:/usr/include/c++/11/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 242:/usr/include/c++/11/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 243:/usr/include/c++/11/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 244:/usr/include/c++/11/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 245:/usr/include/c++/11/bits/stl_algobase.h ****    *  @return   The greater of the parameters.
 246:/usr/include/c++/11/bits/stl_algobase.h ****    *
 247:/usr/include/c++/11/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 248:/usr/include/c++/11/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 249:/usr/include/c++/11/bits/stl_algobase.h ****    *  preprocessor macro.
 250:/usr/include/c++/11/bits/stl_algobase.h ****   */
 251:/usr/include/c++/11/bits/stl_algobase.h ****   template<typename _Tp>
 252:/usr/include/c++/11/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 253:/usr/include/c++/11/bits/stl_algobase.h ****     inline const _Tp&
 254:/usr/include/c++/11/bits/stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b)
 3380              		.loc 14 254 5
 3381              		.cfi_startproc
 3382 0000 F30F1EFA 		endbr64
 3383 0004 55       		pushq	%rbp
 3384              		.cfi_def_cfa_offset 16
 3385              		.cfi_offset 6, -16
 3386 0005 4889E5   		movq	%rsp, %rbp
 3387              		.cfi_def_cfa_register 6
 3388 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3389 000c 488975F0 		movq	%rsi, -16(%rbp)
 255:/usr/include/c++/11/bits/stl_algobase.h ****     {
 256:/usr/include/c++/11/bits/stl_algobase.h ****       // concept requirements
 257:/usr/include/c++/11/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 258:/usr/include/c++/11/bits/stl_algobase.h ****       //return  __a < __b ? __b : __a;
 259:/usr/include/c++/11/bits/stl_algobase.h ****       if (__a < __b)
 3390              		.loc 14 259 15
 3391 0010 488B45F8 		movq	-8(%rbp), %rax
 3392 0014 488B10   		movq	(%rax), %rdx
 3393 0017 488B45F0 		movq	-16(%rbp), %rax
 3394 001b 488B00   		movq	(%rax), %rax
 3395              		.loc 14 259 7
 3396 001e 4839C2   		cmpq	%rax, %rdx
 3397 0021 7306     		jnb	.L171
 260:/usr/include/c++/11/bits/stl_algobase.h **** 	return __b;
 3398              		.loc 14 260 9
 3399 0023 488B45F0 		movq	-16(%rbp), %rax
 3400 0027 EB04     		jmp	.L172
 3401              	.L171:
 261:/usr/include/c++/11/bits/stl_algobase.h ****       return __a;
 3402              		.loc 14 261 14
 3403 0029 488B45F8 		movq	-8(%rbp), %rax
 3404              	.L172:
 262:/usr/include/c++/11/bits/stl_algobase.h ****     }
 3405              		.loc 14 262 5
 3406 002d 5D       		popq	%rbp
 3407              		.cfi_def_cfa 7, 8
 3408 002e C3       		ret
 3409              		.cfi_endproc
 3410              	.LFE1061:
 3412              		.section	.text._ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEES2_E8allocateERS3_
 3413              		.weak	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEES2_E8allocateERS3_m
 3415              	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEES2_E8allocateERS3_m:
 3416              	.LFB1062:
 132:/usr/include/c++/11/ext/alloc_traits.h ****     { return __a.allocate(__n); }
 3417              		.loc 7 132 5
 3418              		.cfi_startproc
 3419 0000 F30F1EFA 		endbr64
 3420 0004 55       		pushq	%rbp
 3421              		.cfi_def_cfa_offset 16
 3422              		.cfi_offset 6, -16
 3423 0005 4889E5   		movq	%rsp, %rbp
 3424              		.cfi_def_cfa_register 6
 3425 0008 4883EC10 		subq	$16, %rsp
 3426 000c 48897DF8 		movq	%rdi, -8(%rbp)
 3427 0010 488975F0 		movq	%rsi, -16(%rbp)
 133:/usr/include/c++/11/ext/alloc_traits.h **** 
 3428              		.loc 7 133 26
 3429 0014 488B4DF0 		movq	-16(%rbp), %rcx
 3430 0018 488B45F8 		movq	-8(%rbp), %rax
 3431 001c BA000000 		movl	$0, %edx
 3431      00
 3432 0021 4889CE   		movq	%rcx, %rsi
 3433 0024 4889C7   		movq	%rax, %rdi
 3434 0027 E8000000 		call	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE8allocateEmPKv@PLT
 3434      00
 133:/usr/include/c++/11/ext/alloc_traits.h **** 
 3435              		.loc 7 133 33
 3436 002c C9       		leave
 3437              		.cfi_def_cfa 7, 8
 3438 002d C3       		ret
 3439              		.cfi_endproc
 3440              	.LFE1062:
 3442              		.section	.text._ZSt22__uninitialized_copy_aIPN8UnitTest18DeferredTestResultES2_S1_ET0_T_S4_S3_RSaI
 3443              		.weak	_ZSt22__uninitialized_copy_aIPN8UnitTest18DeferredTestResultES2_S1_ET0_T_S4_S3_RSaIT1_E
 3445              	_ZSt22__uninitialized_copy_aIPN8UnitTest18DeferredTestResultES2_S1_ET0_T_S4_S3_RSaIT1_E:
 3446              	.LFB1063:
 331:/usr/include/c++/11/bits/stl_uninitialized.h **** 			   _ForwardIterator __result, allocator<_Tp>&)
 3447              		.loc 13 331 5
 3448              		.cfi_startproc
 3449 0000 F30F1EFA 		endbr64
 3450 0004 55       		pushq	%rbp
 3451              		.cfi_def_cfa_offset 16
 3452              		.cfi_offset 6, -16
 3453 0005 4889E5   		movq	%rsp, %rbp
 3454              		.cfi_def_cfa_register 6
 3455 0008 4883EC20 		subq	$32, %rsp
 3456 000c 48897DF8 		movq	%rdi, -8(%rbp)
 3457 0010 488975F0 		movq	%rsi, -16(%rbp)
 3458 0014 488955E8 		movq	%rdx, -24(%rbp)
 3459 0018 48894DE0 		movq	%rcx, -32(%rbp)
 333:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 3460              		.loc 13 333 37
 3461 001c 488B55E8 		movq	-24(%rbp), %rdx
 3462 0020 488B4DF0 		movq	-16(%rbp), %rcx
 3463 0024 488B45F8 		movq	-8(%rbp), %rax
 3464 0028 4889CE   		movq	%rcx, %rsi
 3465 002b 4889C7   		movq	%rax, %rdi
 3466 002e E8000000 		call	_ZSt18uninitialized_copyIPN8UnitTest18DeferredTestResultES2_ET0_T_S4_S3_@PLT
 3466      00
 333:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 3467              		.loc 13 333 66
 3468 0033 C9       		leave
 3469              		.cfi_def_cfa 7, 8
 3470 0034 C3       		ret
 3471              		.cfi_endproc
 3472              	.LFE1063:
 3474              		.section	.text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE7destroyEPS2_,"axG",@p
 3475              		.align 2
 3476              		.weak	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE7destroyEPS2_
 3478              	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE7destroyEPS2_:
 3479              	.LFB1064:
 175:/usr/include/c++/11/ext/new_allocator.h **** 
 176:/usr/include/c++/11/ext/new_allocator.h ****       void
 177:/usr/include/c++/11/ext/new_allocator.h ****       destroy(pointer __p) { __p->~_Tp(); }
 3480              		.loc 12 177 7
 3481              		.cfi_startproc
 3482 0000 F30F1EFA 		endbr64
 3483 0004 55       		pushq	%rbp
 3484              		.cfi_def_cfa_offset 16
 3485              		.cfi_offset 6, -16
 3486 0005 4889E5   		movq	%rsp, %rbp
 3487              		.cfi_def_cfa_register 6
 3488 0008 4883EC10 		subq	$16, %rsp
 3489 000c 48897DF8 		movq	%rdi, -8(%rbp)
 3490 0010 488975F0 		movq	%rsi, -16(%rbp)
 3491              		.loc 12 177 39
 3492 0014 488B45F0 		movq	-16(%rbp), %rax
 3493 0018 4889C7   		movq	%rax, %rdi
 3494 001b E8000000 		call	_ZN8UnitTest18DeferredTestResultD1Ev@PLT
 3494      00
 3495              		.loc 12 177 43
 3496 0020 90       		nop
 3497 0021 C9       		leave
 3498              		.cfi_def_cfa 7, 8
 3499 0022 C3       		ret
 3500              		.cfi_endproc
 3501              	.LFE1064:
 3503              		.section	.text._ZSt8_DestroyIPN8UnitTest18DeferredTestResultEEvT_S3_,"axG",@progbits,_ZSt8_Destroy
 3504              		.weak	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultEEvT_S3_
 3506              	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultEEvT_S3_:
 3507              	.LFB1065:
 182:/usr/include/c++/11/bits/stl_construct.h ****     {
 3508              		.loc 11 182 5
 3509              		.cfi_startproc
 3510 0000 F30F1EFA 		endbr64
 3511 0004 55       		pushq	%rbp
 3512              		.cfi_def_cfa_offset 16
 3513              		.cfi_offset 6, -16
 3514 0005 4889E5   		movq	%rsp, %rbp
 3515              		.cfi_def_cfa_register 6
 3516 0008 4883EC10 		subq	$16, %rsp
 3517 000c 48897DF8 		movq	%rdi, -8(%rbp)
 3518 0010 488975F0 		movq	%rsi, -16(%rbp)
 196:/usr/include/c++/11/bits/stl_construct.h ****     }
 3519              		.loc 11 196 11
 3520 0014 488B55F0 		movq	-16(%rbp), %rdx
 3521 0018 488B45F8 		movq	-8(%rbp), %rax
 3522 001c 4889D6   		movq	%rdx, %rsi
 3523 001f 4889C7   		movq	%rax, %rdi
 3524 0022 E8000000 		call	_ZNSt12_Destroy_auxILb0EE9__destroyIPN8UnitTest18DeferredTestResultEEEvT_S5_@PLT
 3524      00
 3525              		.loc 11 197 5
 3526 0027 90       		nop
 3527 0028 C9       		leave
 3528              		.cfi_def_cfa 7, 8
 3529 0029 C3       		ret
 3530              		.cfi_endproc
 3531              	.LFE1065:
 3533              		.section	.text._ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEES2_E10deallocateER
 3534              		.weak	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEES2_E10deallocateERS3_PS2_m
 3536              	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEES2_E10deallocateERS3_PS2_m:
 3537              	.LFB1066:
 140:/usr/include/c++/11/ext/alloc_traits.h ****     { __a.deallocate(__p, __n); }
 3538              		.loc 7 140 17
 3539              		.cfi_startproc
 3540 0000 F30F1EFA 		endbr64
 3541 0004 55       		pushq	%rbp
 3542              		.cfi_def_cfa_offset 16
 3543              		.cfi_offset 6, -16
 3544 0005 4889E5   		movq	%rsp, %rbp
 3545              		.cfi_def_cfa_register 6
 3546 0008 4883EC20 		subq	$32, %rsp
 3547 000c 48897DF8 		movq	%rdi, -8(%rbp)
 3548 0010 488975F0 		movq	%rsi, -16(%rbp)
 3549 0014 488955E8 		movq	%rdx, -24(%rbp)
 141:/usr/include/c++/11/ext/alloc_traits.h **** 
 3550              		.loc 7 141 21
 3551 0018 488B55E8 		movq	-24(%rbp), %rdx
 3552 001c 488B4DF0 		movq	-16(%rbp), %rcx
 3553 0020 488B45F8 		movq	-8(%rbp), %rax
 3554 0024 4889CE   		movq	%rcx, %rsi
 3555 0027 4889C7   		movq	%rax, %rdi
 3556 002a E8000000 		call	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE10deallocateEPS2_m@PLT
 3556      00
 141:/usr/include/c++/11/ext/alloc_traits.h **** 
 3557              		.loc 7 141 33
 3558 002f 90       		nop
 3559 0030 C9       		leave
 3560              		.cfi_def_cfa 7, 8
 3561 0031 C3       		ret
 3562              		.cfi_endproc
 3563              	.LFE1066:
 3565              		.section	.text._ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_E
 3566              		.align 2
 3567              		.weak	_ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE8max_siz
 3569              	_ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE8max_sizeEv:
 3570              	.LFB1075:
 923:/usr/include/c++/11/bits/stl_vector.h ****       { return _S_max_size(_M_get_Tp_allocator()); }
 3571              		.loc 5 923 7
 3572              		.cfi_startproc
 3573 0000 F30F1EFA 		endbr64
 3574 0004 55       		pushq	%rbp
 3575              		.cfi_def_cfa_offset 16
 3576              		.cfi_offset 6, -16
 3577 0005 4889E5   		movq	%rsp, %rbp
 3578              		.cfi_def_cfa_register 6
 3579 0008 4883EC10 		subq	$16, %rsp
 3580 000c 48897DF8 		movq	%rdi, -8(%rbp)
 924:/usr/include/c++/11/bits/stl_vector.h **** 
 3581              		.loc 5 924 47
 3582 0010 488B45F8 		movq	-8(%rbp), %rax
 3583 0014 4889C7   		movq	%rax, %rdi
 3584 0017 E8000000 		call	_ZNKSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE19
 3584      00
 924:/usr/include/c++/11/bits/stl_vector.h **** 
 3585              		.loc 5 924 27
 3586 001c 4889C7   		movq	%rax, %rdi
 3587 001f E8000000 		call	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE11_S_max_s
 3587      00
 924:/usr/include/c++/11/bits/stl_vector.h **** 
 3588              		.loc 5 924 52
 3589 0024 C9       		leave
 3590              		.cfi_def_cfa 7, 8
 3591 0025 C3       		ret
 3592              		.cfi_endproc
 3593              	.LFE1075:
 3595              		.section	.text._ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_E
 3596              		.align 2
 3597              		.weak	_ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE4sizeEv
 3599              	_ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE4sizeEv:
 3600              	.LFB1076:
 918:/usr/include/c++/11/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 3601              		.loc 5 918 7
 3602              		.cfi_startproc
 3603 0000 F30F1EFA 		endbr64
 3604 0004 55       		pushq	%rbp
 3605              		.cfi_def_cfa_offset 16
 3606              		.cfi_offset 6, -16
 3607 0005 4889E5   		movq	%rsp, %rbp
 3608              		.cfi_def_cfa_register 6
 3609 0008 48897DF8 		movq	%rdi, -8(%rbp)
 919:/usr/include/c++/11/bits/stl_vector.h **** 
 3610              		.loc 5 919 40
 3611 000c 488B45F8 		movq	-8(%rbp), %rax
 3612 0010 488B5008 		movq	8(%rax), %rdx
 919:/usr/include/c++/11/bits/stl_vector.h **** 
 3613              		.loc 5 919 66
 3614 0014 488B45F8 		movq	-8(%rbp), %rax
 3615 0018 488B08   		movq	(%rax), %rcx
 919:/usr/include/c++/11/bits/stl_vector.h **** 
 3616              		.loc 5 919 50
 3617 001b 4889D0   		movq	%rdx, %rax
 3618 001e 4829C8   		subq	%rcx, %rax
 3619 0021 48C1F803 		sarq	$3, %rax
 3620 0025 4889C2   		movq	%rax, %rdx
 3621 0028 48B8CDCC 		movabsq	$-3689348814741910323, %rax
 3621      CCCCCCCC 
 3621      CCCC
 3622 0032 480FAFC2 		imulq	%rdx, %rax
 919:/usr/include/c++/11/bits/stl_vector.h **** 
 3623              		.loc 5 919 77
 3624 0036 5D       		popq	%rbp
 3625              		.cfi_def_cfa 7, 8
 3626 0037 C3       		ret
 3627              		.cfi_endproc
 3628              	.LFE1076:
 3630              		.section	.text._ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_trait
 3631              		.weak	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcE
 3633              	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEES8_
 3634              	.LFB1077:
 132:/usr/include/c++/11/ext/alloc_traits.h ****     { return __a.allocate(__n); }
 3635              		.loc 7 132 5
 3636              		.cfi_startproc
 3637 0000 F30F1EFA 		endbr64
 3638 0004 55       		pushq	%rbp
 3639              		.cfi_def_cfa_offset 16
 3640              		.cfi_offset 6, -16
 3641 0005 4889E5   		movq	%rsp, %rbp
 3642              		.cfi_def_cfa_register 6
 3643 0008 4883EC10 		subq	$16, %rsp
 3644 000c 48897DF8 		movq	%rdi, -8(%rbp)
 3645 0010 488975F0 		movq	%rsi, -16(%rbp)
 133:/usr/include/c++/11/ext/alloc_traits.h **** 
 3646              		.loc 7 133 26
 3647 0014 488B4DF0 		movq	-16(%rbp), %rcx
 3648 0018 488B45F8 		movq	-8(%rbp), %rax
 3649 001c BA000000 		movl	$0, %edx
 3649      00
 3650 0021 4889CE   		movq	%rcx, %rsi
 3651 0024 4889C7   		movq	%rax, %rdi
 3652 0027 E8000000 		call	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8
 3652      00
 133:/usr/include/c++/11/ext/alloc_traits.h **** 
 3653              		.loc 7 133 33
 3654 002c C9       		leave
 3655              		.cfi_def_cfa 7, 8
 3656 002d C3       		ret
 3657              		.cfi_endproc
 3658              	.LFE1077:
 3660              		.section	.text._ZSt22__uninitialized_copy_aIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIc
 3661              		.weak	_ZSt22__uninitialized_copy_aIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE
 3663              	_ZSt22__uninitialized_copy_aIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES8_S7_E
 3664              	.LFB1078:
 331:/usr/include/c++/11/bits/stl_uninitialized.h **** 			   _ForwardIterator __result, allocator<_Tp>&)
 3665              		.loc 13 331 5
 3666              		.cfi_startproc
 3667 0000 F30F1EFA 		endbr64
 3668 0004 55       		pushq	%rbp
 3669              		.cfi_def_cfa_offset 16
 3670              		.cfi_offset 6, -16
 3671 0005 4889E5   		movq	%rsp, %rbp
 3672              		.cfi_def_cfa_register 6
 3673 0008 4883EC20 		subq	$32, %rsp
 3674 000c 48897DF8 		movq	%rdi, -8(%rbp)
 3675 0010 488975F0 		movq	%rsi, -16(%rbp)
 3676 0014 488955E8 		movq	%rdx, -24(%rbp)
 3677 0018 48894DE0 		movq	%rcx, -32(%rbp)
 333:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 3678              		.loc 13 333 37
 3679 001c 488B55E8 		movq	-24(%rbp), %rdx
 3680 0020 488B4DF0 		movq	-16(%rbp), %rcx
 3681 0024 488B45F8 		movq	-8(%rbp), %rax
 3682 0028 4889CE   		movq	%rcx, %rsi
 3683 002b 4889C7   		movq	%rax, %rdi
 3684 002e E8000000 		call	_ZSt18uninitialized_copyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES8_ET
 3684      00
 333:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 3685              		.loc 13 333 66
 3686 0033 C9       		leave
 3687              		.cfi_def_cfa 7, 8
 3688 0034 C3       		ret
 3689              		.cfi_endproc
 3690              	.LFE1078:
 3692              		.section	.text._ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcE
 3693              		.align 2
 3694              		.weak	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE
 3696              	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7destro
 3697              	.LFB1079:
 3698              		.loc 12 177 7
 3699              		.cfi_startproc
 3700 0000 F30F1EFA 		endbr64
 3701 0004 55       		pushq	%rbp
 3702              		.cfi_def_cfa_offset 16
 3703              		.cfi_offset 6, -16
 3704 0005 4889E5   		movq	%rsp, %rbp
 3705              		.cfi_def_cfa_register 6
 3706 0008 4883EC10 		subq	$16, %rsp
 3707 000c 48897DF8 		movq	%rdi, -8(%rbp)
 3708 0010 488975F0 		movq	%rsi, -16(%rbp)
 3709              		.loc 12 177 39
 3710 0014 488B45F0 		movq	-16(%rbp), %rax
 3711 0018 4889C7   		movq	%rax, %rdi
 3712 001b E8000000 		call	_ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev@PLT
 3712      00
 3713              		.loc 12 177 43
 3714 0020 90       		nop
 3715 0021 C9       		leave
 3716              		.cfi_def_cfa 7, 8
 3717 0022 C3       		ret
 3718              		.cfi_endproc
 3719              	.LFE1079:
 3721              		.section	.text._ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcE
 3722              		.align 2
 3723              		.weak	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE
 3725              	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deall
 3726              	.LFB1081:
 132:/usr/include/c++/11/ext/new_allocator.h ****       {
 3727              		.loc 12 132 7
 3728              		.cfi_startproc
 3729 0000 F30F1EFA 		endbr64
 3730 0004 55       		pushq	%rbp
 3731              		.cfi_def_cfa_offset 16
 3732              		.cfi_offset 6, -16
 3733 0005 4889E5   		movq	%rsp, %rbp
 3734              		.cfi_def_cfa_register 6
 3735 0008 4883EC20 		subq	$32, %rsp
 3736 000c 48897DF8 		movq	%rdi, -8(%rbp)
 3737 0010 488975F0 		movq	%rsi, -16(%rbp)
 3738 0014 488955E8 		movq	%rdx, -24(%rbp)
 145:/usr/include/c++/11/ext/new_allocator.h **** #if __cpp_sized_deallocation
 3739              		.loc 12 145 19
 3740 0018 488B45F0 		movq	-16(%rbp), %rax
 3741 001c 4889C7   		movq	%rax, %rdi
 3742 001f E8000000 		call	_ZdlPv@PLT
 3742      00
 150:/usr/include/c++/11/ext/new_allocator.h **** 
 3743              		.loc 12 150 7
 3744 0024 90       		nop
 3745 0025 C9       		leave
 3746              		.cfi_def_cfa 7, 8
 3747 0026 C3       		ret
 3748              		.cfi_endproc
 3749              	.LFE1081:
 3751              		.section	.text._ZSt11__addressofISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT
 3752              		.weak	_ZSt11__addressofISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT_RS8_
 3754              	_ZSt11__addressofISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT_RS8_:
 3755              	.LFB1082:
 3756              		.file 15 "/usr/include/c++/11/bits/move.h"
   1:/usr/include/c++/11/bits/move.h **** // Move, forward and identity for C++11 + swap -*- C++ -*-
   2:/usr/include/c++/11/bits/move.h **** 
   3:/usr/include/c++/11/bits/move.h **** // Copyright (C) 2007-2021 Free Software Foundation, Inc.
   4:/usr/include/c++/11/bits/move.h **** //
   5:/usr/include/c++/11/bits/move.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/11/bits/move.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/11/bits/move.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/11/bits/move.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/11/bits/move.h **** // any later version.
  10:/usr/include/c++/11/bits/move.h **** 
  11:/usr/include/c++/11/bits/move.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/11/bits/move.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/11/bits/move.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/11/bits/move.h **** // GNU General Public License for more details.
  15:/usr/include/c++/11/bits/move.h **** 
  16:/usr/include/c++/11/bits/move.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/11/bits/move.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/11/bits/move.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/11/bits/move.h **** 
  20:/usr/include/c++/11/bits/move.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/11/bits/move.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/11/bits/move.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/11/bits/move.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/11/bits/move.h **** 
  25:/usr/include/c++/11/bits/move.h **** /** @file bits/move.h
  26:/usr/include/c++/11/bits/move.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/c++/11/bits/move.h ****  *  Do not attempt to use it directly. @headername{utility}
  28:/usr/include/c++/11/bits/move.h ****  */
  29:/usr/include/c++/11/bits/move.h **** 
  30:/usr/include/c++/11/bits/move.h **** #ifndef _MOVE_H
  31:/usr/include/c++/11/bits/move.h **** #define _MOVE_H 1
  32:/usr/include/c++/11/bits/move.h **** 
  33:/usr/include/c++/11/bits/move.h **** #include <bits/c++config.h>
  34:/usr/include/c++/11/bits/move.h **** #if __cplusplus < 201103L
  35:/usr/include/c++/11/bits/move.h **** # include <bits/concept_check.h>
  36:/usr/include/c++/11/bits/move.h **** #endif
  37:/usr/include/c++/11/bits/move.h **** 
  38:/usr/include/c++/11/bits/move.h **** namespace std _GLIBCXX_VISIBILITY(default)
  39:/usr/include/c++/11/bits/move.h **** {
  40:/usr/include/c++/11/bits/move.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  41:/usr/include/c++/11/bits/move.h **** 
  42:/usr/include/c++/11/bits/move.h ****   // Used, in C++03 mode too, by allocators, etc.
  43:/usr/include/c++/11/bits/move.h ****   /**
  44:/usr/include/c++/11/bits/move.h ****    *  @brief Same as C++11 std::addressof
  45:/usr/include/c++/11/bits/move.h ****    *  @ingroup utilities
  46:/usr/include/c++/11/bits/move.h ****    */
  47:/usr/include/c++/11/bits/move.h ****   template<typename _Tp>
  48:/usr/include/c++/11/bits/move.h ****     inline _GLIBCXX_CONSTEXPR _Tp*
  49:/usr/include/c++/11/bits/move.h ****     __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 3757              		.loc 15 49 5
 3758              		.cfi_startproc
 3759 0000 F30F1EFA 		endbr64
 3760 0004 55       		pushq	%rbp
 3761              		.cfi_def_cfa_offset 16
 3762              		.cfi_offset 6, -16
 3763 0005 4889E5   		movq	%rsp, %rbp
 3764              		.cfi_def_cfa_register 6
 3765 0008 48897DF8 		movq	%rdi, -8(%rbp)
  50:/usr/include/c++/11/bits/move.h ****     { return __builtin_addressof(__r); }
 3766              		.loc 15 50 37
 3767 000c 488B45F8 		movq	-8(%rbp), %rax
 3768              		.loc 15 50 40
 3769 0010 5D       		popq	%rbp
 3770              		.cfi_def_cfa 7, 8
 3771 0011 C3       		ret
 3772              		.cfi_endproc
 3773              	.LFE1082:
 3775              		.section	.text._ZSt8_DestroyISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvPT_,"
 3776              		.weak	_ZSt8_DestroyISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvPT_
 3778              	_ZSt8_DestroyISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvPT_:
 3779              	.LFB1083:
 146:/usr/include/c++/11/bits/stl_construct.h ****     {
 3780              		.loc 11 146 5
 3781              		.cfi_startproc
 3782 0000 F30F1EFA 		endbr64
 3783 0004 55       		pushq	%rbp
 3784              		.cfi_def_cfa_offset 16
 3785              		.cfi_offset 6, -16
 3786 0005 4889E5   		movq	%rsp, %rbp
 3787              		.cfi_def_cfa_register 6
 3788 0008 4883EC10 		subq	$16, %rsp
 3789 000c 48897DF8 		movq	%rdi, -8(%rbp)
 151:/usr/include/c++/11/bits/stl_construct.h **** #endif
 3790              		.loc 11 151 22
 3791 0010 488B45F8 		movq	-8(%rbp), %rax
 3792 0014 4889C7   		movq	%rax, %rdi
 3793 0017 E8000000 		call	_ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev@PLT
 3793      00
 153:/usr/include/c++/11/bits/stl_construct.h **** 
 3794              		.loc 11 153 5
 3795 001c 90       		nop
 3796 001d C9       		leave
 3797              		.cfi_def_cfa 7, 8
 3798 001e C3       		ret
 3799              		.cfi_endproc
 3800              	.LFE1083:
 3802              		.section	.text._ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_trait
 3803              		.weak	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcE
 3805              	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEES8_
 3806              	.LFB1084:
 149:/usr/include/c++/11/ext/alloc_traits.h **** 
 150:/usr/include/c++/11/ext/alloc_traits.h ****     static size_type max_size(const _Alloc& __a)
 151:/usr/include/c++/11/ext/alloc_traits.h ****     { return __a.max_size(); }
 152:/usr/include/c++/11/ext/alloc_traits.h **** 
 153:/usr/include/c++/11/ext/alloc_traits.h ****     static const _Alloc& _S_select_on_copy(const _Alloc& __a) { return __a; }
 3807              		.loc 7 153 26
 3808              		.cfi_startproc
 3809 0000 F30F1EFA 		endbr64
 3810 0004 55       		pushq	%rbp
 3811              		.cfi_def_cfa_offset 16
 3812              		.cfi_offset 6, -16
 3813 0005 4889E5   		movq	%rsp, %rbp
 3814              		.cfi_def_cfa_register 6
 3815 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3816              		.loc 7 153 72
 3817 000c 488B45F8 		movq	-8(%rbp), %rax
 3818              		.loc 7 153 77
 3819 0010 5D       		popq	%rbp
 3820              		.cfi_def_cfa 7, 8
 3821 0011 C3       		ret
 3822              		.cfi_endproc
 3823              	.LFE1084:
 3825              		.section	.text._ZNKSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE
 3826              		.align 2
 3827              		.weak	_ZNKSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE1
 3829              	_ZNKSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE19_M_get
 3830              	.LFB1085:
 280:/usr/include/c++/11/bits/stl_vector.h ****       { return this->_M_impl; }
 3831              		.loc 5 280 7
 3832              		.cfi_startproc
 3833 0000 F30F1EFA 		endbr64
 3834 0004 55       		pushq	%rbp
 3835              		.cfi_def_cfa_offset 16
 3836              		.cfi_offset 6, -16
 3837 0005 4889E5   		movq	%rsp, %rbp
 3838              		.cfi_def_cfa_register 6
 3839 0008 48897DF8 		movq	%rdi, -8(%rbp)
 281:/usr/include/c++/11/bits/stl_vector.h **** 
 3840              		.loc 5 281 22
 3841 000c 488B45F8 		movq	-8(%rbp), %rax
 281:/usr/include/c++/11/bits/stl_vector.h **** 
 3842              		.loc 5 281 31
 3843 0010 5D       		popq	%rbp
 3844              		.cfi_def_cfa 7, 8
 3845 0011 C3       		ret
 3846              		.cfi_endproc
 3847              	.LFE1085:
 3849              		.section	.text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES
 3850              		.align 2
 3851              		.weak	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EEC2
 3853              	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EEC2EmRKS8_
 3854              	.LFB1087:
 303:/usr/include/c++/11/bits/stl_vector.h ****       : _M_impl(__a)
 3855              		.loc 5 303 7
 3856              		.cfi_startproc
 3857              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 3858              		.cfi_lsda 0x1b,.LLSDA1087
 3859 0000 F30F1EFA 		endbr64
 3860 0004 55       		pushq	%rbp
 3861              		.cfi_def_cfa_offset 16
 3862              		.cfi_offset 6, -16
 3863 0005 4889E5   		movq	%rsp, %rbp
 3864              		.cfi_def_cfa_register 6
 3865 0008 53       		pushq	%rbx
 3866 0009 4883EC28 		subq	$40, %rsp
 3867              		.cfi_offset 3, -24
 3868 000d 48897DE8 		movq	%rdi, -24(%rbp)
 3869 0011 488975E0 		movq	%rsi, -32(%rbp)
 3870 0015 488955D8 		movq	%rdx, -40(%rbp)
 3871              	.LBB19:
 304:/usr/include/c++/11/bits/stl_vector.h ****       { _M_create_storage(__n); }
 3872              		.loc 5 304 9
 3873 0019 488B45E8 		movq	-24(%rbp), %rax
 3874 001d 488B55D8 		movq	-40(%rbp), %rdx
 3875 0021 4889D6   		movq	%rdx, %rsi
 3876 0024 4889C7   		movq	%rax, %rdi
 3877              	.LEHB44:
 3878 0027 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_
 3878      00
 3879              	.LEHE44:
 305:/usr/include/c++/11/bits/stl_vector.h **** 
 3880              		.loc 5 305 26
 3881 002c 488B55E0 		movq	-32(%rbp), %rdx
 3882 0030 488B45E8 		movq	-24(%rbp), %rax
 3883 0034 4889D6   		movq	%rdx, %rsi
 3884 0037 4889C7   		movq	%rax, %rdi
 3885              	.LEHB45:
 3886 003a E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE17_
 3886      00
 3887              	.LEHE45:
 3888              	.LBE19:
 305:/usr/include/c++/11/bits/stl_vector.h **** 
 3889              		.loc 5 305 33
 3890 003f EB1E     		jmp	.L200
 3891              	.L199:
 3892 0041 F30F1EFA 		endbr64
 3893              	.LBB20:
 3894 0045 4889C3   		movq	%rax, %rbx
 3895 0048 488B45E8 		movq	-24(%rbp), %rax
 3896 004c 4889C7   		movq	%rax, %rdi
 3897 004f E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_
 3897      00
 3898 0054 4889D8   		movq	%rbx, %rax
 3899 0057 4889C7   		movq	%rax, %rdi
 3900              	.LEHB46:
 3901 005a E8000000 		call	_Unwind_Resume@PLT
 3901      00
 3902              	.LEHE46:
 3903              	.L200:
 3904              	.LBE20:
 3905 005f 488B5DF8 		movq	-8(%rbp), %rbx
 3906 0063 C9       		leave
 3907              		.cfi_def_cfa 7, 8
 3908 0064 C3       		ret
 3909              		.cfi_endproc
 3910              	.LFE1087:
 3911              		.section	.gcc_except_table
 3912              	.LLSDA1087:
 3913 00fa FF       		.byte	0xff
 3914 00fb FF       		.byte	0xff
 3915 00fc 01       		.byte	0x1
 3916 00fd 0C       		.uleb128 .LLSDACSE1087-.LLSDACSB1087
 3917              	.LLSDACSB1087:
 3918 00fe 27       		.uleb128 .LEHB44-.LFB1087
 3919 00ff 05       		.uleb128 .LEHE44-.LEHB44
 3920 0100 00       		.uleb128 0
 3921 0101 00       		.uleb128 0
 3922 0102 3A       		.uleb128 .LEHB45-.LFB1087
 3923 0103 05       		.uleb128 .LEHE45-.LEHB45
 3924 0104 41       		.uleb128 .L199-.LFB1087
 3925 0105 00       		.uleb128 0
 3926 0106 5A       		.uleb128 .LEHB46-.LFB1087
 3927 0107 05       		.uleb128 .LEHE46-.LEHB46
 3928 0108 00       		.uleb128 0
 3929 0109 00       		.uleb128 0
 3930              	.LLSDACSE1087:
 3931              		.section	.text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES
 3933              		.weak	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EEC1
 3934              		.set	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EEC1E
 3935              		.section	.text._ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_E
 3936              		.align 2
 3937              		.weak	_ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE5beginEv
 3939              	_ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE5beginEv:
 3940              	.LFB1089:
 820:/usr/include/c++/11/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 3941              		.loc 5 820 7
 3942              		.cfi_startproc
 3943 0000 F30F1EFA 		endbr64
 3944 0004 55       		pushq	%rbp
 3945              		.cfi_def_cfa_offset 16
 3946              		.cfi_offset 6, -16
 3947 0005 4889E5   		movq	%rsp, %rbp
 3948              		.cfi_def_cfa_register 6
 3949 0008 4883EC20 		subq	$32, %rsp
 3950 000c 48897DE8 		movq	%rdi, -24(%rbp)
 820:/usr/include/c++/11/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 3951              		.loc 5 820 7
 3952 0010 64488B04 		movq	%fs:40, %rax
 3952      25280000 
 3952      00
 3953 0019 488945F8 		movq	%rax, -8(%rbp)
 3954 001d 31C0     		xorl	%eax, %eax
 821:/usr/include/c++/11/bits/stl_vector.h **** 
 3955              		.loc 5 821 45
 3956 001f 488B55E8 		movq	-24(%rbp), %rdx
 821:/usr/include/c++/11/bits/stl_vector.h **** 
 3957              		.loc 5 821 16
 3958 0023 488D45F0 		leaq	-16(%rbp), %rax
 3959 0027 4889D6   		movq	%rdx, %rsi
 3960 002a 4889C7   		movq	%rax, %rdi
 3961 002d E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIc
 3961      00
 821:/usr/include/c++/11/bits/stl_vector.h **** 
 3962              		.loc 5 821 53
 3963 0032 488B45F0 		movq	-16(%rbp), %rax
 821:/usr/include/c++/11/bits/stl_vector.h **** 
 3964              		.loc 5 821 56
 3965 0036 488B55F8 		movq	-8(%rbp), %rdx
 3966 003a 64482B14 		subq	%fs:40, %rdx
 3966      25280000 
 3966      00
 3967 0043 7405     		je	.L203
 3968 0045 E8000000 		call	__stack_chk_fail@PLT
 3968      00
 3969              	.L203:
 3970 004a C9       		leave
 3971              		.cfi_def_cfa 7, 8
 3972 004b C3       		ret
 3973              		.cfi_endproc
 3974              	.LFE1089:
 3976              		.section	.text._ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_E
 3977              		.align 2
 3978              		.weak	_ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE3endEv
 3980              	_ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE3endEv:
 3981              	.LFB1090:
 838:/usr/include/c++/11/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 3982              		.loc 5 838 7
 3983              		.cfi_startproc
 3984 0000 F30F1EFA 		endbr64
 3985 0004 55       		pushq	%rbp
 3986              		.cfi_def_cfa_offset 16
 3987              		.cfi_offset 6, -16
 3988 0005 4889E5   		movq	%rsp, %rbp
 3989              		.cfi_def_cfa_register 6
 3990 0008 4883EC20 		subq	$32, %rsp
 3991 000c 48897DE8 		movq	%rdi, -24(%rbp)
 838:/usr/include/c++/11/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 3992              		.loc 5 838 7
 3993 0010 64488B04 		movq	%fs:40, %rax
 3993      25280000 
 3993      00
 3994 0019 488945F8 		movq	%rax, -8(%rbp)
 3995 001d 31C0     		xorl	%eax, %eax
 839:/usr/include/c++/11/bits/stl_vector.h **** 
 3996              		.loc 5 839 45
 3997 001f 488B45E8 		movq	-24(%rbp), %rax
 3998 0023 488D5008 		leaq	8(%rax), %rdx
 839:/usr/include/c++/11/bits/stl_vector.h **** 
 3999              		.loc 5 839 16
 4000 0027 488D45F0 		leaq	-16(%rbp), %rax
 4001 002b 4889D6   		movq	%rdx, %rsi
 4002 002e 4889C7   		movq	%rax, %rdi
 4003 0031 E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIc
 4003      00
 839:/usr/include/c++/11/bits/stl_vector.h **** 
 4004              		.loc 5 839 54
 4005 0036 488B45F0 		movq	-16(%rbp), %rax
 839:/usr/include/c++/11/bits/stl_vector.h **** 
 4006              		.loc 5 839 57
 4007 003a 488B55F8 		movq	-8(%rbp), %rdx
 4008 003e 64482B14 		subq	%fs:40, %rdx
 4008      25280000 
 4008      00
 4009 0047 7405     		je	.L206
 4010 0049 E8000000 		call	__stack_chk_fail@PLT
 4010      00
 4011              	.L206:
 4012 004e C9       		leave
 4013              		.cfi_def_cfa 7, 8
 4014 004f C3       		ret
 4015              		.cfi_endproc
 4016              	.LFE1090:
 4018              		.section	.text._ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx111
 4019              		.weak	_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_st
 4021              	_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcS
 4022              	.LFB1091:
 331:/usr/include/c++/11/bits/stl_uninitialized.h **** 			   _ForwardIterator __result, allocator<_Tp>&)
 4023              		.loc 13 331 5
 4024              		.cfi_startproc
 4025 0000 F30F1EFA 		endbr64
 4026 0004 55       		pushq	%rbp
 4027              		.cfi_def_cfa_offset 16
 4028              		.cfi_offset 6, -16
 4029 0005 4889E5   		movq	%rsp, %rbp
 4030              		.cfi_def_cfa_register 6
 4031 0008 4883EC20 		subq	$32, %rsp
 4032 000c 48897DF8 		movq	%rdi, -8(%rbp)
 4033 0010 488975F0 		movq	%rsi, -16(%rbp)
 4034 0014 488955E8 		movq	%rdx, -24(%rbp)
 4035 0018 48894DE0 		movq	%rcx, -32(%rbp)
 333:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 4036              		.loc 13 333 37
 4037 001c 488B55E8 		movq	-24(%rbp), %rdx
 4038 0020 488B4DF0 		movq	-16(%rbp), %rcx
 4039 0024 488B45F8 		movq	-8(%rbp), %rax
 4040 0028 4889CE   		movq	%rcx, %rsi
 4041 002b 4889C7   		movq	%rax, %rdi
 4042 002e E8000000 		call	_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringI
 4042      00
 333:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 4043              		.loc 13 333 66
 4044 0033 C9       		leave
 4045              		.cfi_def_cfa 7, 8
 4046 0034 C3       		ret
 4047              		.cfi_endproc
 4048              	.LFE1091:
 4050              		.section	.text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE11_S_max_sizeERKS2_,"axG",@prog
 4051              		.weak	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE11_S_max_sizeERKS2_
 4053              	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE11_S_max_sizeERKS2_:
 4054              	.LFB1092:
1764:/usr/include/c++/11/bits/stl_vector.h **** 
1765:/usr/include/c++/11/bits/stl_vector.h ****       // Called by constructors to check initial size.
1766:/usr/include/c++/11/bits/stl_vector.h ****       static size_type
1767:/usr/include/c++/11/bits/stl_vector.h ****       _S_check_init_len(size_type __n, const allocator_type& __a)
1768:/usr/include/c++/11/bits/stl_vector.h ****       {
1769:/usr/include/c++/11/bits/stl_vector.h **** 	if (__n > _S_max_size(_Tp_alloc_type(__a)))
1770:/usr/include/c++/11/bits/stl_vector.h **** 	  __throw_length_error(
1771:/usr/include/c++/11/bits/stl_vector.h **** 	      __N("cannot create std::vector larger than max_size()"));
1772:/usr/include/c++/11/bits/stl_vector.h **** 	return __n;
1773:/usr/include/c++/11/bits/stl_vector.h ****       }
1774:/usr/include/c++/11/bits/stl_vector.h **** 
1775:/usr/include/c++/11/bits/stl_vector.h ****       static size_type
1776:/usr/include/c++/11/bits/stl_vector.h ****       _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 4055              		.loc 5 1776 7
 4056              		.cfi_startproc
 4057 0000 F30F1EFA 		endbr64
 4058 0004 55       		pushq	%rbp
 4059              		.cfi_def_cfa_offset 16
 4060              		.cfi_offset 6, -16
 4061 0005 4889E5   		movq	%rsp, %rbp
 4062              		.cfi_def_cfa_register 6
 4063 0008 4883EC30 		subq	$48, %rsp
 4064 000c 48897DD8 		movq	%rdi, -40(%rbp)
 4065              		.loc 5 1776 7
 4066 0010 64488B04 		movq	%fs:40, %rax
 4066      25280000 
 4066      00
 4067 0019 488945F8 		movq	%rax, -8(%rbp)
 4068 001d 31C0     		xorl	%eax, %eax
1777:/usr/include/c++/11/bits/stl_vector.h ****       {
1778:/usr/include/c++/11/bits/stl_vector.h **** 	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
1779:/usr/include/c++/11/bits/stl_vector.h **** 	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
1780:/usr/include/c++/11/bits/stl_vector.h **** 	// (even if std::allocator_traits::max_size says we can).
1781:/usr/include/c++/11/bits/stl_vector.h **** 	const size_t __diffmax
 4069              		.loc 5 1781 15
 4070 001f 48B8FFFF 		movabsq	$72057594037927935, %rax
 4070      FFFFFFFF 
 4070      FF00
 4071 0029 488945E8 		movq	%rax, -24(%rbp)
1782:/usr/include/c++/11/bits/stl_vector.h **** 	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
1783:/usr/include/c++/11/bits/stl_vector.h **** 	const size_t __allocmax = _Alloc_traits::max_size(__a);
 4072              		.loc 5 1783 51
 4073 002d 488B45D8 		movq	-40(%rbp), %rax
 4074 0031 4889C7   		movq	%rax, %rdi
 4075 0034 E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEES2_E8max_sizeERKS3_@PLT
 4075      00
 4076              		.loc 5 1783 15
 4077 0039 488945F0 		movq	%rax, -16(%rbp)
1784:/usr/include/c++/11/bits/stl_vector.h **** 	return (std::min)(__diffmax, __allocmax);
 4078              		.loc 5 1784 19
 4079 003d 488D55F0 		leaq	-16(%rbp), %rdx
 4080 0041 488D45E8 		leaq	-24(%rbp), %rax
 4081 0045 4889D6   		movq	%rdx, %rsi
 4082 0048 4889C7   		movq	%rax, %rdi
 4083 004b E8000000 		call	_ZSt3minImERKT_S2_S2_@PLT
 4083      00
 4084              		.loc 5 1784 41
 4085 0050 488B00   		movq	(%rax), %rax
1785:/usr/include/c++/11/bits/stl_vector.h ****       }
 4086              		.loc 5 1785 7
 4087 0053 488B55F8 		movq	-8(%rbp), %rdx
 4088 0057 64482B14 		subq	%fs:40, %rdx
 4088      25280000 
 4088      00
 4089 0060 7405     		je	.L211
 4090 0062 E8000000 		call	__stack_chk_fail@PLT
 4090      00
 4091              	.L211:
 4092 0067 C9       		leave
 4093              		.cfi_def_cfa 7, 8
 4094 0068 C3       		ret
 4095              		.cfi_endproc
 4096              	.LFE1092:
 4098              		.section	.text._ZNKSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv
 4099              		.align 2
 4100              		.weak	_ZNKSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv
 4102              	_ZNKSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv:
 4103              	.LFB1093:
 280:/usr/include/c++/11/bits/stl_vector.h ****       { return this->_M_impl; }
 4104              		.loc 5 280 7
 4105              		.cfi_startproc
 4106 0000 F30F1EFA 		endbr64
 4107 0004 55       		pushq	%rbp
 4108              		.cfi_def_cfa_offset 16
 4109              		.cfi_offset 6, -16
 4110 0005 4889E5   		movq	%rsp, %rbp
 4111              		.cfi_def_cfa_register 6
 4112 0008 48897DF8 		movq	%rdi, -8(%rbp)
 281:/usr/include/c++/11/bits/stl_vector.h **** 
 4113              		.loc 5 281 22
 4114 000c 488B45F8 		movq	-8(%rbp), %rax
 281:/usr/include/c++/11/bits/stl_vector.h **** 
 4115              		.loc 5 281 31
 4116 0010 5D       		popq	%rbp
 4117              		.cfi_def_cfa 7, 8
 4118 0011 C3       		ret
 4119              		.cfi_endproc
 4120              	.LFE1093:
 4122              		.section	.text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE8allocateEmPKv,"axG",@
 4123              		.align 2
 4124              		.weak	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE8allocateEmPKv
 4126              	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE8allocateEmPKv:
 4127              	.LFB1094:
 103:/usr/include/c++/11/ext/new_allocator.h ****       {
 4128              		.loc 12 103 7
 4129              		.cfi_startproc
 4130 0000 F30F1EFA 		endbr64
 4131 0004 55       		pushq	%rbp
 4132              		.cfi_def_cfa_offset 16
 4133              		.cfi_offset 6, -16
 4134 0005 4889E5   		movq	%rsp, %rbp
 4135              		.cfi_def_cfa_register 6
 4136 0008 4883EC20 		subq	$32, %rsp
 4137 000c 48897DF8 		movq	%rdi, -8(%rbp)
 4138 0010 488975F0 		movq	%rsi, -16(%rbp)
 4139 0014 488955E8 		movq	%rdx, -24(%rbp)
 111:/usr/include/c++/11/ext/new_allocator.h **** 	  {
 4140              		.loc 12 111 46
 4141 0018 488B45F8 		movq	-8(%rbp), %rax
 4142 001c 4889C7   		movq	%rax, %rdi
 4143 001f E8000000 		call	_ZNK9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE11_M_max_sizeEv@PLT
 4143      00
 111:/usr/include/c++/11/ext/new_allocator.h **** 	  {
 4144              		.loc 12 111 27
 4145 0024 483945F0 		cmpq	%rax, -16(%rbp)
 4146 0028 0F97C0   		seta	%al
 111:/usr/include/c++/11/ext/new_allocator.h **** 	  {
 4147              		.loc 12 111 22
 4148 002b 0FB6C0   		movzbl	%al, %eax
 4149 002e 4885C0   		testq	%rax, %rax
 4150 0031 0F95C0   		setne	%al
 111:/usr/include/c++/11/ext/new_allocator.h **** 	  {
 4151              		.loc 12 111 2
 4152 0034 84C0     		testb	%al, %al
 4153 0036 741A     		je	.L215
 115:/usr/include/c++/11/ext/new_allocator.h **** 	      std::__throw_bad_array_new_length();
 4154              		.loc 12 115 6
 4155 0038 48B8FFFF 		movabsq	$144115188075855871, %rax
 4155      FFFFFFFF 
 4155      FF01
 4156 0042 483945F0 		cmpq	%rax, -16(%rbp)
 4157 0046 7605     		jbe	.L216
 116:/usr/include/c++/11/ext/new_allocator.h **** 	    std::__throw_bad_alloc();
 4158              		.loc 12 116 41
 4159 0048 E8000000 		call	_ZSt28__throw_bad_array_new_lengthv@PLT
 4159      00
 4160              	.L216:
 117:/usr/include/c++/11/ext/new_allocator.h **** 	  }
 4161              		.loc 12 117 28
 4162 004d E8000000 		call	_ZSt17__throw_bad_allocv@PLT
 4162      00
 4163              	.L215:
 127:/usr/include/c++/11/ext/new_allocator.h ****       }
 4164              		.loc 12 127 41
 4165 0052 488B45F0 		movq	-16(%rbp), %rax
 4166 0056 48C1E007 		salq	$7, %rax
 4167 005a 4889C7   		movq	%rax, %rdi
 4168 005d E8000000 		call	_Znwm@PLT
 4168      00
 128:/usr/include/c++/11/ext/new_allocator.h **** 
 4169              		.loc 12 128 7
 4170 0062 C9       		leave
 4171              		.cfi_def_cfa 7, 8
 4172 0063 C3       		ret
 4173              		.cfi_endproc
 4174              	.LFE1094:
 4176              		.section	.text._ZSt18uninitialized_copyIPN8UnitTest18DeferredTestResultES2_ET0_T_S4_S3_,"axG",@pro
 4177              		.weak	_ZSt18uninitialized_copyIPN8UnitTest18DeferredTestResultES2_ET0_T_S4_S3_
 4179              	_ZSt18uninitialized_copyIPN8UnitTest18DeferredTestResultES2_ET0_T_S4_S3_:
 4180              	.LFB1095:
 126:/usr/include/c++/11/bits/stl_uninitialized.h **** 		       _ForwardIterator __result)
 4181              		.loc 13 126 5
 4182              		.cfi_startproc
 4183 0000 F30F1EFA 		endbr64
 4184 0004 55       		pushq	%rbp
 4185              		.cfi_def_cfa_offset 16
 4186              		.cfi_offset 6, -16
 4187 0005 4889E5   		movq	%rsp, %rbp
 4188              		.cfi_def_cfa_register 6
 4189 0008 4883EC30 		subq	$48, %rsp
 4190 000c 48897DE8 		movq	%rdi, -24(%rbp)
 4191 0010 488975E0 		movq	%rsi, -32(%rbp)
 4192 0014 488955D8 		movq	%rdx, -40(%rbp)
 134:/usr/include/c++/11/bits/stl_uninitialized.h **** #else
 4193              		.loc 13 134 18
 4194 0018 C645FF01 		movb	$1, -1(%rbp)
 151:/usr/include/c++/11/bits/stl_uninitialized.h ****     }
 4195              		.loc 13 151 15
 4196 001c 488B55D8 		movq	-40(%rbp), %rdx
 4197 0020 488B4DE0 		movq	-32(%rbp), %rcx
 4198 0024 488B45E8 		movq	-24(%rbp), %rax
 4199 0028 4889CE   		movq	%rcx, %rsi
 4200 002b 4889C7   		movq	%rax, %rdi
 4201 002e E8000000 		call	_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPN8UnitTest18DeferredTestResultES4_EET0_T_S6
 4201      00
 152:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 4202              		.loc 13 152 5
 4203 0033 C9       		leave
 4204              		.cfi_def_cfa 7, 8
 4205 0034 C3       		ret
 4206              		.cfi_endproc
 4207              	.LFE1095:
 4209              		.section	.text._ZNSt12_Destroy_auxILb0EE9__destroyIPN8UnitTest18DeferredTestResultEEEvT_S5_,"axG",
 4210              		.weak	_ZNSt12_Destroy_auxILb0EE9__destroyIPN8UnitTest18DeferredTestResultEEEvT_S5_
 4212              	_ZNSt12_Destroy_auxILb0EE9__destroyIPN8UnitTest18DeferredTestResultEEEvT_S5_:
 4213              	.LFB1096:
 160:/usr/include/c++/11/bits/stl_construct.h **** 	{
 4214              		.loc 11 160 2
 4215              		.cfi_startproc
 4216 0000 F30F1EFA 		endbr64
 4217 0004 55       		pushq	%rbp
 4218              		.cfi_def_cfa_offset 16
 4219              		.cfi_offset 6, -16
 4220 0005 4889E5   		movq	%rsp, %rbp
 4221              		.cfi_def_cfa_register 6
 4222 0008 4883EC10 		subq	$16, %rsp
 4223 000c 48897DF8 		movq	%rdi, -8(%rbp)
 4224 0010 488975F0 		movq	%rsi, -16(%rbp)
 162:/usr/include/c++/11/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 4225              		.loc 11 162 4
 4226 0014 EB19     		jmp	.L221
 4227              	.L222:
 163:/usr/include/c++/11/bits/stl_construct.h **** 	}
 4228              		.loc 11 163 19 discriminator 2
 4229 0016 488B45F8 		movq	-8(%rbp), %rax
 4230 001a 4889C7   		movq	%rax, %rdi
 4231 001d E8000000 		call	_ZSt11__addressofIN8UnitTest18DeferredTestResultEEPT_RS2_@PLT
 4231      00
 4232 0022 4889C7   		movq	%rax, %rdi
 4233 0025 E8000000 		call	_ZSt8_DestroyIN8UnitTest18DeferredTestResultEEvPT_@PLT
 4233      00
 162:/usr/include/c++/11/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 4234              		.loc 11 162 4 discriminator 2
 4235 002a 48836DF8 		subq	$-128, -8(%rbp)
 4235      80
 4236              	.L221:
 162:/usr/include/c++/11/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 4237              		.loc 11 162 19 discriminator 1
 4238 002f 488B45F8 		movq	-8(%rbp), %rax
 4239 0033 483B45F0 		cmpq	-16(%rbp), %rax
 4240 0037 75DD     		jne	.L222
 164:/usr/include/c++/11/bits/stl_construct.h ****     };
 4241              		.loc 11 164 2
 4242 0039 90       		nop
 4243 003a 90       		nop
 4244 003b C9       		leave
 4245              		.cfi_def_cfa 7, 8
 4246 003c C3       		ret
 4247              		.cfi_endproc
 4248              	.LFE1096:
 4250              		.section	.text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE10deallocateEPS2_m,"ax
 4251              		.align 2
 4252              		.weak	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE10deallocateEPS2_m
 4254              	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE10deallocateEPS2_m:
 4255              	.LFB1097:
 132:/usr/include/c++/11/ext/new_allocator.h ****       {
 4256              		.loc 12 132 7
 4257              		.cfi_startproc
 4258 0000 F30F1EFA 		endbr64
 4259 0004 55       		pushq	%rbp
 4260              		.cfi_def_cfa_offset 16
 4261              		.cfi_offset 6, -16
 4262 0005 4889E5   		movq	%rsp, %rbp
 4263              		.cfi_def_cfa_register 6
 4264 0008 4883EC20 		subq	$32, %rsp
 4265 000c 48897DF8 		movq	%rdi, -8(%rbp)
 4266 0010 488975F0 		movq	%rsi, -16(%rbp)
 4267 0014 488955E8 		movq	%rdx, -24(%rbp)
 145:/usr/include/c++/11/ext/new_allocator.h **** #if __cpp_sized_deallocation
 4268              		.loc 12 145 19
 4269 0018 488B45F0 		movq	-16(%rbp), %rax
 4270 001c 4889C7   		movq	%rax, %rdi
 4271 001f E8000000 		call	_ZdlPv@PLT
 4271      00
 150:/usr/include/c++/11/ext/new_allocator.h **** 
 4272              		.loc 12 150 7
 4273 0024 90       		nop
 4274 0025 C9       		leave
 4275              		.cfi_def_cfa 7, 8
 4276 0026 C3       		ret
 4277              		.cfi_endproc
 4278              	.LFE1097:
 4280              		.section	.text._ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE
 4281              		.weak	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE11_S_max_
 4283              	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE11_S_max_sizeERK
 4284              	.LFB1099:
1776:/usr/include/c++/11/bits/stl_vector.h ****       {
 4285              		.loc 5 1776 7
 4286              		.cfi_startproc
 4287 0000 F30F1EFA 		endbr64
 4288 0004 55       		pushq	%rbp
 4289              		.cfi_def_cfa_offset 16
 4290              		.cfi_offset 6, -16
 4291 0005 4889E5   		movq	%rsp, %rbp
 4292              		.cfi_def_cfa_register 6
 4293 0008 4883EC30 		subq	$48, %rsp
 4294 000c 48897DD8 		movq	%rdi, -40(%rbp)
1776:/usr/include/c++/11/bits/stl_vector.h ****       {
 4295              		.loc 5 1776 7
 4296 0010 64488B04 		movq	%fs:40, %rax
 4296      25280000 
 4296      00
 4297 0019 488945F8 		movq	%rax, -8(%rbp)
 4298 001d 31C0     		xorl	%eax, %eax
1781:/usr/include/c++/11/bits/stl_vector.h **** 	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
 4299              		.loc 5 1781 15
 4300 001f 48B83333 		movabsq	$230584300921369395, %rax
 4300      33333333 
 4300      3303
 4301 0029 488945E8 		movq	%rax, -24(%rbp)
1783:/usr/include/c++/11/bits/stl_vector.h **** 	return (std::min)(__diffmax, __allocmax);
 4302              		.loc 5 1783 51
 4303 002d 488B45D8 		movq	-40(%rbp), %rax
 4304 0031 4889C7   		movq	%rax, %rdi
 4305 0034 E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE
 4305      00
1783:/usr/include/c++/11/bits/stl_vector.h **** 	return (std::min)(__diffmax, __allocmax);
 4306              		.loc 5 1783 15
 4307 0039 488945F0 		movq	%rax, -16(%rbp)
1784:/usr/include/c++/11/bits/stl_vector.h ****       }
 4308              		.loc 5 1784 19
 4309 003d 488D55F0 		leaq	-16(%rbp), %rdx
 4310 0041 488D45E8 		leaq	-24(%rbp), %rax
 4311 0045 4889D6   		movq	%rdx, %rsi
 4312 0048 4889C7   		movq	%rax, %rdi
 4313 004b E8000000 		call	_ZSt3minImERKT_S2_S2_@PLT
 4313      00
1784:/usr/include/c++/11/bits/stl_vector.h ****       }
 4314              		.loc 5 1784 41
 4315 0050 488B00   		movq	(%rax), %rax
 4316              		.loc 5 1785 7
 4317 0053 488B55F8 		movq	-8(%rbp), %rdx
 4318 0057 64482B14 		subq	%fs:40, %rdx
 4318      25280000 
 4318      00
 4319 0060 7405     		je	.L226
 4320 0062 E8000000 		call	__stack_chk_fail@PLT
 4320      00
 4321              	.L226:
 4322 0067 C9       		leave
 4323              		.cfi_def_cfa 7, 8
 4324 0068 C3       		ret
 4325              		.cfi_endproc
 4326              	.LFE1099:
 4328              		.section	.text._ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcE
 4329              		.align 2
 4330              		.weak	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE
 4332              	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8alloca
 4333              	.LFB1100:
 103:/usr/include/c++/11/ext/new_allocator.h ****       {
 4334              		.loc 12 103 7
 4335              		.cfi_startproc
 4336 0000 F30F1EFA 		endbr64
 4337 0004 55       		pushq	%rbp
 4338              		.cfi_def_cfa_offset 16
 4339              		.cfi_offset 6, -16
 4340 0005 4889E5   		movq	%rsp, %rbp
 4341              		.cfi_def_cfa_register 6
 4342 0008 4883EC20 		subq	$32, %rsp
 4343 000c 48897DF8 		movq	%rdi, -8(%rbp)
 4344 0010 488975F0 		movq	%rsi, -16(%rbp)
 4345 0014 488955E8 		movq	%rdx, -24(%rbp)
 111:/usr/include/c++/11/ext/new_allocator.h **** 	  {
 4346              		.loc 12 111 46
 4347 0018 488B45F8 		movq	-8(%rbp), %rax
 4348 001c 4889C7   		movq	%rax, %rdi
 4349 001f E8000000 		call	_ZNK9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE
 4349      00
 111:/usr/include/c++/11/ext/new_allocator.h **** 	  {
 4350              		.loc 12 111 27
 4351 0024 483945F0 		cmpq	%rax, -16(%rbp)
 4352 0028 0F97C0   		seta	%al
 111:/usr/include/c++/11/ext/new_allocator.h **** 	  {
 4353              		.loc 12 111 22
 4354 002b 0FB6C0   		movzbl	%al, %eax
 4355 002e 4885C0   		testq	%rax, %rax
 4356 0031 0F95C0   		setne	%al
 111:/usr/include/c++/11/ext/new_allocator.h **** 	  {
 4357              		.loc 12 111 2
 4358 0034 84C0     		testb	%al, %al
 4359 0036 741A     		je	.L228
 115:/usr/include/c++/11/ext/new_allocator.h **** 	      std::__throw_bad_array_new_length();
 4360              		.loc 12 115 6
 4361 0038 48B86666 		movabsq	$461168601842738790, %rax
 4361      66666666 
 4361      6606
 4362 0042 483945F0 		cmpq	%rax, -16(%rbp)
 4363 0046 7605     		jbe	.L229
 116:/usr/include/c++/11/ext/new_allocator.h **** 	    std::__throw_bad_alloc();
 4364              		.loc 12 116 41
 4365 0048 E8000000 		call	_ZSt28__throw_bad_array_new_lengthv@PLT
 4365      00
 4366              	.L229:
 117:/usr/include/c++/11/ext/new_allocator.h **** 	  }
 4367              		.loc 12 117 28
 4368 004d E8000000 		call	_ZSt17__throw_bad_allocv@PLT
 4368      00
 4369              	.L228:
 127:/usr/include/c++/11/ext/new_allocator.h ****       }
 4370              		.loc 12 127 41
 4371 0052 488B55F0 		movq	-16(%rbp), %rdx
 4372 0056 4889D0   		movq	%rdx, %rax
 4373 0059 48C1E002 		salq	$2, %rax
 4374 005d 4801D0   		addq	%rdx, %rax
 4375 0060 48C1E003 		salq	$3, %rax
 4376 0064 4889C7   		movq	%rax, %rdi
 4377 0067 E8000000 		call	_Znwm@PLT
 4377      00
 128:/usr/include/c++/11/ext/new_allocator.h **** 
 4378              		.loc 12 128 7
 4379 006c C9       		leave
 4380              		.cfi_def_cfa 7, 8
 4381 006d C3       		ret
 4382              		.cfi_endproc
 4383              	.LFE1100:
 4385              		.section	.text._ZSt18uninitialized_copyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaI
 4386              		.weak	_ZSt18uninitialized_copyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES8_E
 4388              	_ZSt18uninitialized_copyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES8_ET0_T_SA
 4389              	.LFB1101:
 126:/usr/include/c++/11/bits/stl_uninitialized.h **** 		       _ForwardIterator __result)
 4390              		.loc 13 126 5
 4391              		.cfi_startproc
 4392 0000 F30F1EFA 		endbr64
 4393 0004 55       		pushq	%rbp
 4394              		.cfi_def_cfa_offset 16
 4395              		.cfi_offset 6, -16
 4396 0005 4889E5   		movq	%rsp, %rbp
 4397              		.cfi_def_cfa_register 6
 4398 0008 4883EC30 		subq	$48, %rsp
 4399 000c 48897DE8 		movq	%rdi, -24(%rbp)
 4400 0010 488975E0 		movq	%rsi, -32(%rbp)
 4401 0014 488955D8 		movq	%rdx, -40(%rbp)
 134:/usr/include/c++/11/bits/stl_uninitialized.h **** #else
 4402              		.loc 13 134 18
 4403 0018 C645FF01 		movb	$1, -1(%rbp)
 151:/usr/include/c++/11/bits/stl_uninitialized.h ****     }
 4404              		.loc 13 151 15
 4405 001c 488B55D8 		movq	-40(%rbp), %rdx
 4406 0020 488B4DE0 		movq	-32(%rbp), %rcx
 4407 0024 488B45E8 		movq	-24(%rbp), %rax
 4408 0028 4889CE   		movq	%rcx, %rsi
 4409 002b 4889C7   		movq	%rax, %rdi
 4410 002e E8000000 		call	_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11cha
 4410      00
 152:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 4411              		.loc 13 152 5
 4412 0033 C9       		leave
 4413              		.cfi_def_cfa 7, 8
 4414 0034 C3       		ret
 4415              		.cfi_endproc
 4416              	.LFE1101:
 4418              		.section	.text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES
 4419              		.align 2
 4420              		.weak	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12
 4422              	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_Vector
 4423              	.LFB1103:
 136:/usr/include/c++/11/bits/stl_vector.h **** 	: _Tp_alloc_type(__a)
 4424              		.loc 5 136 2
 4425              		.cfi_startproc
 4426 0000 F30F1EFA 		endbr64
 4427 0004 55       		pushq	%rbp
 4428              		.cfi_def_cfa_offset 16
 4429              		.cfi_offset 6, -16
 4430 0005 4889E5   		movq	%rsp, %rbp
 4431              		.cfi_def_cfa_register 6
 4432 0008 4883EC10 		subq	$16, %rsp
 4433 000c 48897DF8 		movq	%rdi, -8(%rbp)
 4434 0010 488975F0 		movq	%rsi, -16(%rbp)
 4435              	.LBB21:
 137:/usr/include/c++/11/bits/stl_vector.h **** 	{ }
 4436              		.loc 5 137 22
 4437 0014 488B55F0 		movq	-16(%rbp), %rdx
 4438 0018 488B45F8 		movq	-8(%rbp), %rax
 4439 001c 4889D6   		movq	%rdx, %rsi
 4440 001f 4889C7   		movq	%rax, %rdi
 4441 0022 E8000000 		call	_ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2ERKS7_@PLT
 4441      00
 4442 0027 488B45F8 		movq	-8(%rbp), %rax
 4443 002b 4889C7   		movq	%rax, %rdi
 4444 002e E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE17_
 4444      00
 4445              	.LBE21:
 138:/usr/include/c++/11/bits/stl_vector.h **** 
 4446              		.loc 5 138 4
 4447 0033 90       		nop
 4448 0034 C9       		leave
 4449              		.cfi_def_cfa 7, 8
 4450 0035 C3       		ret
 4451              		.cfi_endproc
 4452              	.LFE1103:
 4454              		.weak	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12
 4455              		.set	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_
 4456              		.section	.text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES
 4457              		.align 2
 4458              		.weak	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE17
 4460              	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE17_M_crea
 4461              	.LFB1105:
 359:/usr/include/c++/11/bits/stl_vector.h ****       {
 4462              		.loc 5 359 7
 4463              		.cfi_startproc
 4464 0000 F30F1EFA 		endbr64
 4465 0004 55       		pushq	%rbp
 4466              		.cfi_def_cfa_offset 16
 4467              		.cfi_offset 6, -16
 4468 0005 4889E5   		movq	%rsp, %rbp
 4469              		.cfi_def_cfa_register 6
 4470 0008 4883EC10 		subq	$16, %rsp
 4471 000c 48897DF8 		movq	%rdi, -8(%rbp)
 4472 0010 488975F0 		movq	%rsi, -16(%rbp)
 361:/usr/include/c++/11/bits/stl_vector.h **** 	this->_M_impl._M_finish = this->_M_impl._M_start;
 4473              		.loc 5 361 44
 4474 0014 488B55F0 		movq	-16(%rbp), %rdx
 4475 0018 488B45F8 		movq	-8(%rbp), %rax
 4476 001c 4889D6   		movq	%rdx, %rsi
 4477 001f 4889C7   		movq	%rax, %rdi
 4478 0022 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE11_
 4478      00
 361:/usr/include/c++/11/bits/stl_vector.h **** 	this->_M_impl._M_finish = this->_M_impl._M_start;
 4479              		.loc 5 361 25
 4480 0027 488B55F8 		movq	-8(%rbp), %rdx
 4481 002b 488902   		movq	%rax, (%rdx)
 362:/usr/include/c++/11/bits/stl_vector.h **** 	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 4482              		.loc 5 362 42
 4483 002e 488B45F8 		movq	-8(%rbp), %rax
 4484 0032 488B10   		movq	(%rax), %rdx
 362:/usr/include/c++/11/bits/stl_vector.h **** 	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 4485              		.loc 5 362 26
 4486 0035 488B45F8 		movq	-8(%rbp), %rax
 4487 0039 48895008 		movq	%rdx, 8(%rax)
 363:/usr/include/c++/11/bits/stl_vector.h ****       }
 4488              		.loc 5 363 50
 4489 003d 488B45F8 		movq	-8(%rbp), %rax
 4490 0041 488B08   		movq	(%rax), %rcx
 363:/usr/include/c++/11/bits/stl_vector.h ****       }
 4491              		.loc 5 363 59
 4492 0044 488B55F0 		movq	-16(%rbp), %rdx
 4493 0048 4889D0   		movq	%rdx, %rax
 4494 004b 48C1E002 		salq	$2, %rax
 4495 004f 4801D0   		addq	%rdx, %rax
 4496 0052 48C1E003 		salq	$3, %rax
 4497 0056 488D1401 		leaq	(%rcx,%rax), %rdx
 363:/usr/include/c++/11/bits/stl_vector.h ****       }
 4498              		.loc 5 363 34
 4499 005a 488B45F8 		movq	-8(%rbp), %rax
 4500 005e 48895010 		movq	%rdx, 16(%rax)
 364:/usr/include/c++/11/bits/stl_vector.h ****     };
 4501              		.loc 5 364 7
 4502 0062 90       		nop
 4503 0063 C9       		leave
 4504              		.cfi_def_cfa 7, 8
 4505 0064 C3       		ret
 4506              		.cfi_endproc
 4507              	.LFE1105:
 4509              		.section	.text._ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_tra
 4510              		.align 2
 4511              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaI
 4513              	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt
 4514              	.LFB1107:
1010:/usr/include/c++/11/bits/stl_iterator.h ****       : _M_current(__i) { }
 4515              		.loc 9 1010 7
 4516              		.cfi_startproc
 4517 0000 F30F1EFA 		endbr64
 4518 0004 55       		pushq	%rbp
 4519              		.cfi_def_cfa_offset 16
 4520              		.cfi_offset 6, -16
 4521 0005 4889E5   		movq	%rsp, %rbp
 4522              		.cfi_def_cfa_register 6
 4523 0008 48897DF8 		movq	%rdi, -8(%rbp)
 4524 000c 488975F0 		movq	%rsi, -16(%rbp)
 4525              	.LBB22:
1011:/usr/include/c++/11/bits/stl_iterator.h **** 
 4526              		.loc 9 1011 9
 4527 0010 488B45F0 		movq	-16(%rbp), %rax
 4528 0014 488B10   		movq	(%rax), %rdx
 4529 0017 488B45F8 		movq	-8(%rbp), %rax
 4530 001b 488910   		movq	%rdx, (%rax)
 4531              	.LBE22:
1011:/usr/include/c++/11/bits/stl_iterator.h **** 
 4532              		.loc 9 1011 27
 4533 001e 90       		nop
 4534 001f 5D       		popq	%rbp
 4535              		.cfi_def_cfa 7, 8
 4536 0020 C3       		ret
 4537              		.cfi_endproc
 4538              	.LFE1107:
 4540              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaI
 4541              		.set	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIc
 4542              		.section	.text._ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112bas
 4543              		.weak	_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_string
 4545              	_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11c
 4546              	.LFB1109:
 126:/usr/include/c++/11/bits/stl_uninitialized.h **** 		       _ForwardIterator __result)
 4547              		.loc 13 126 5
 4548              		.cfi_startproc
 4549 0000 F30F1EFA 		endbr64
 4550 0004 55       		pushq	%rbp
 4551              		.cfi_def_cfa_offset 16
 4552              		.cfi_offset 6, -16
 4553 0005 4889E5   		movq	%rsp, %rbp
 4554              		.cfi_def_cfa_register 6
 4555 0008 4883EC30 		subq	$48, %rsp
 4556 000c 48897DE8 		movq	%rdi, -24(%rbp)
 4557 0010 488975E0 		movq	%rsi, -32(%rbp)
 4558 0014 488955D8 		movq	%rdx, -40(%rbp)
 134:/usr/include/c++/11/bits/stl_uninitialized.h **** #else
 4559              		.loc 13 134 18
 4560 0018 C645FF01 		movb	$1, -1(%rbp)
 151:/usr/include/c++/11/bits/stl_uninitialized.h ****     }
 4561              		.loc 13 151 15
 4562 001c 488B55D8 		movq	-40(%rbp), %rdx
 4563 0020 488B4DE0 		movq	-32(%rbp), %rcx
 4564 0024 488B45E8 		movq	-24(%rbp), %rax
 4565 0028 4889CE   		movq	%rcx, %rsi
 4566 002b 4889C7   		movq	%rax, %rdi
 4567 002e E8000000 		call	_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNS
 4567      00
 152:/usr/include/c++/11/bits/stl_uninitialized.h **** 
 4568              		.loc 13 152 5
 4569 0033 C9       		leave
 4570              		.cfi_def_cfa 7, 8
 4571 0034 C3       		ret
 4572              		.cfi_endproc
 4573              	.LFE1109:
 4575              		.section	.text._ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEES2_E8max_sizeERKS3
 4576              		.weak	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEES2_E8max_sizeERKS3_
 4578              	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEES2_E8max_sizeERKS3_:
 4579              	.LFB1110:
 150:/usr/include/c++/11/ext/alloc_traits.h ****     { return __a.max_size(); }
 4580              		.loc 7 150 22
 4581              		.cfi_startproc
 4582 0000 F30F1EFA 		endbr64
 4583 0004 55       		pushq	%rbp
 4584              		.cfi_def_cfa_offset 16
 4585              		.cfi_offset 6, -16
 4586 0005 4889E5   		movq	%rsp, %rbp
 4587              		.cfi_def_cfa_register 6
 4588 0008 4883EC10 		subq	$16, %rsp
 4589 000c 48897DF8 		movq	%rdi, -8(%rbp)
 151:/usr/include/c++/11/ext/alloc_traits.h **** 
 4590              		.loc 7 151 26
 4591 0010 488B45F8 		movq	-8(%rbp), %rax
 4592 0014 4889C7   		movq	%rax, %rdi
 4593 0017 E8000000 		call	_ZNK9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE8max_sizeEv@PLT
 4593      00
 151:/usr/include/c++/11/ext/alloc_traits.h **** 
 4594              		.loc 7 151 30
 4595 001c C9       		leave
 4596              		.cfi_def_cfa 7, 8
 4597 001d C3       		ret
 4598              		.cfi_endproc
 4599              	.LFE1110:
 4601              		.section	.text._ZSt3minImERKT_S2_S2_,"axG",@progbits,_ZSt3minImERKT_S2_S2_,comdat
 4602              		.weak	_ZSt3minImERKT_S2_S2_
 4604              	_ZSt3minImERKT_S2_S2_:
 4605              	.LFB1111:
 230:/usr/include/c++/11/bits/stl_algobase.h ****     {
 4606              		.loc 14 230 5
 4607              		.cfi_startproc
 4608 0000 F30F1EFA 		endbr64
 4609 0004 55       		pushq	%rbp
 4610              		.cfi_def_cfa_offset 16
 4611              		.cfi_offset 6, -16
 4612 0005 4889E5   		movq	%rsp, %rbp
 4613              		.cfi_def_cfa_register 6
 4614 0008 48897DF8 		movq	%rdi, -8(%rbp)
 4615 000c 488975F0 		movq	%rsi, -16(%rbp)
 235:/usr/include/c++/11/bits/stl_algobase.h **** 	return __b;
 4616              		.loc 14 235 15
 4617 0010 488B45F0 		movq	-16(%rbp), %rax
 4618 0014 488B10   		movq	(%rax), %rdx
 4619 0017 488B45F8 		movq	-8(%rbp), %rax
 4620 001b 488B00   		movq	(%rax), %rax
 235:/usr/include/c++/11/bits/stl_algobase.h **** 	return __b;
 4621              		.loc 14 235 7
 4622 001e 4839C2   		cmpq	%rax, %rdx
 4623 0021 7306     		jnb	.L241
 236:/usr/include/c++/11/bits/stl_algobase.h ****       return __a;
 4624              		.loc 14 236 9
 4625 0023 488B45F0 		movq	-16(%rbp), %rax
 4626 0027 EB04     		jmp	.L242
 4627              	.L241:
 237:/usr/include/c++/11/bits/stl_algobase.h ****     }
 4628              		.loc 14 237 14
 4629 0029 488B45F8 		movq	-8(%rbp), %rax
 4630              	.L242:
 238:/usr/include/c++/11/bits/stl_algobase.h **** 
 4631              		.loc 14 238 5
 4632 002d 5D       		popq	%rbp
 4633              		.cfi_def_cfa 7, 8
 4634 002e C3       		ret
 4635              		.cfi_endproc
 4636              	.LFE1111:
 4638              		.section	.text._ZNK9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE11_M_max_sizeEv,"axG"
 4639              		.align 2
 4640              		.weak	_ZNK9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE11_M_max_sizeEv
 4642              	_ZNK9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE11_M_max_sizeEv:
 4643              	.LFB1112:
 178:/usr/include/c++/11/ext/new_allocator.h **** #endif
 179:/usr/include/c++/11/ext/new_allocator.h **** #endif // ! C++20
 180:/usr/include/c++/11/ext/new_allocator.h **** 
 181:/usr/include/c++/11/ext/new_allocator.h ****       template<typename _Up>
 182:/usr/include/c++/11/ext/new_allocator.h **** 	friend _GLIBCXX20_CONSTEXPR bool
 183:/usr/include/c++/11/ext/new_allocator.h **** 	operator==(const new_allocator&, const new_allocator<_Up>&)
 184:/usr/include/c++/11/ext/new_allocator.h **** 	_GLIBCXX_NOTHROW
 185:/usr/include/c++/11/ext/new_allocator.h **** 	{ return true; }
 186:/usr/include/c++/11/ext/new_allocator.h **** 
 187:/usr/include/c++/11/ext/new_allocator.h **** #if __cpp_impl_three_way_comparison < 201907L
 188:/usr/include/c++/11/ext/new_allocator.h ****       template<typename _Up>
 189:/usr/include/c++/11/ext/new_allocator.h **** 	friend _GLIBCXX20_CONSTEXPR bool
 190:/usr/include/c++/11/ext/new_allocator.h **** 	operator!=(const new_allocator&, const new_allocator<_Up>&)
 191:/usr/include/c++/11/ext/new_allocator.h **** 	_GLIBCXX_NOTHROW
 192:/usr/include/c++/11/ext/new_allocator.h **** 	{ return false; }
 193:/usr/include/c++/11/ext/new_allocator.h **** #endif
 194:/usr/include/c++/11/ext/new_allocator.h **** 
 195:/usr/include/c++/11/ext/new_allocator.h ****     private:
 196:/usr/include/c++/11/ext/new_allocator.h ****       _GLIBCXX_CONSTEXPR size_type
 197:/usr/include/c++/11/ext/new_allocator.h ****       _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 4644              		.loc 12 197 7
 4645              		.cfi_startproc
 4646 0000 F30F1EFA 		endbr64
 4647 0004 55       		pushq	%rbp
 4648              		.cfi_def_cfa_offset 16
 4649              		.cfi_offset 6, -16
 4650 0005 4889E5   		movq	%rsp, %rbp
 4651              		.cfi_def_cfa_register 6
 4652 0008 48897DF8 		movq	%rdi, -8(%rbp)
 198:/usr/include/c++/11/ext/new_allocator.h ****       {
 199:/usr/include/c++/11/ext/new_allocator.h **** #if __PTRDIFF_MAX__ < __SIZE_MAX__
 200:/usr/include/c++/11/ext/new_allocator.h **** 	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 4653              		.loc 12 200 50
 4654 000c 48B8FFFF 		movabsq	$72057594037927935, %rax
 4654      FFFFFFFF 
 4654      FF00
 201:/usr/include/c++/11/ext/new_allocator.h **** #else
 202:/usr/include/c++/11/ext/new_allocator.h **** 	return std::size_t(-1) / sizeof(_Tp);
 203:/usr/include/c++/11/ext/new_allocator.h **** #endif
 204:/usr/include/c++/11/ext/new_allocator.h ****       }
 4655              		.loc 12 204 7
 4656 0016 5D       		popq	%rbp
 4657              		.cfi_def_cfa 7, 8
 4658 0017 C3       		ret
 4659              		.cfi_endproc
 4660              	.LFE1112:
 4662              		.section	.text._ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPN8UnitTest18DeferredTestResultES4
 4663              		.weak	_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPN8UnitTest18DeferredTestResultES4_EET0_T_S
 4665              	_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPN8UnitTest18DeferredTestResultES4_EET0_T_S6_S5_:
 4666              	.LFB1113:
  85:/usr/include/c++/11/bits/stl_uninitialized.h **** 		      _ForwardIterator __result)
 4667              		.loc 13 85 9
 4668              		.cfi_startproc
 4669              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 4670              		.cfi_lsda 0x1b,.LLSDA1113
 4671 0000 F30F1EFA 		endbr64
 4672 0004 55       		pushq	%rbp
 4673              		.cfi_def_cfa_offset 16
 4674              		.cfi_offset 6, -16
 4675 0005 4889E5   		movq	%rsp, %rbp
 4676              		.cfi_def_cfa_register 6
 4677 0008 53       		pushq	%rbx
 4678 0009 4883EC38 		subq	$56, %rsp
 4679              		.cfi_offset 3, -24
 4680 000d 48897DD8 		movq	%rdi, -40(%rbp)
 4681 0011 488975D0 		movq	%rsi, -48(%rbp)
 4682 0015 488955C8 		movq	%rdx, -56(%rbp)
  88:/usr/include/c++/11/bits/stl_uninitialized.h **** 	  __try
 4683              		.loc 13 88 21
 4684 0019 488B45C8 		movq	-56(%rbp), %rax
 4685 001d 488945E8 		movq	%rax, -24(%rbp)
  91:/usr/include/c++/11/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
 4686              		.loc 13 91 8
 4687 0021 EB28     		jmp	.L246
 4688              	.L247:
  92:/usr/include/c++/11/bits/stl_uninitialized.h **** 	      return __cur;
 4689              		.loc 13 92 18
 4690 0023 488B45E8 		movq	-24(%rbp), %rax
 4691 0027 4889C7   		movq	%rax, %rdi
 4692 002a E8000000 		call	_ZSt11__addressofIN8UnitTest18DeferredTestResultEEPT_RS2_@PLT
 4692      00
 4693 002f 4889C2   		movq	%rax, %rdx
 4694 0032 488B45D8 		movq	-40(%rbp), %rax
 4695 0036 4889C6   		movq	%rax, %rsi
 4696 0039 4889D7   		movq	%rdx, %rdi
 4697              	.LEHB47:
 4698 003c E8000000 		call	_ZSt10_ConstructIN8UnitTest18DeferredTestResultES1_EvPT_RKT0_@PLT
 4698      00
 4699              	.LEHE47:
  91:/usr/include/c++/11/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
 4700              		.loc 13 91 8
 4701 0041 48836DD8 		subq	$-128, -40(%rbp)
 4701      80
  91:/usr/include/c++/11/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
 4702              		.loc 13 91 45
 4703 0046 48836DE8 		subq	$-128, -24(%rbp)
 4703      80
 4704              	.L246:
  91:/usr/include/c++/11/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
 4705              		.loc 13 91 23 discriminator 1
 4706 004b 488B45D8 		movq	-40(%rbp), %rax
 4707 004f 483B45D0 		cmpq	-48(%rbp), %rax
 4708 0053 75CE     		jne	.L247
  93:/usr/include/c++/11/bits/stl_uninitialized.h **** 	    }
 4709              		.loc 13 93 15
 4710 0055 488B45E8 		movq	-24(%rbp), %rax
 4711 0059 EB3B     		jmp	.L253
 4712              	.L251:
 4713 005b F30F1EFA 		endbr64
  95:/usr/include/c++/11/bits/stl_uninitialized.h **** 	    {
 4714              		.loc 13 95 4
 4715 005f 4889C7   		movq	%rax, %rdi
 4716 0062 E8000000 		call	__cxa_begin_catch@PLT
 4716      00
  97:/usr/include/c++/11/bits/stl_uninitialized.h **** 	      __throw_exception_again;
 4717              		.loc 13 97 21
 4718 0067 488B55E8 		movq	-24(%rbp), %rdx
 4719 006b 488B45C8 		movq	-56(%rbp), %rax
 4720 006f 4889D6   		movq	%rdx, %rsi
 4721 0072 4889C7   		movq	%rax, %rdi
 4722              	.LEHB48:
 4723 0075 E8000000 		call	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultEEvT_S3_@PLT
 4723      00
  98:/usr/include/c++/11/bits/stl_uninitialized.h **** 	    }
 4724              		.loc 13 98 8
 4725 007a E8000000 		call	__cxa_rethrow@PLT
 4725      00
 4726              	.LEHE48:
 4727              	.L252:
 4728 007f F30F1EFA 		endbr64
  95:/usr/include/c++/11/bits/stl_uninitialized.h **** 	    {
 4729              		.loc 13 95 4
 4730 0083 4889C3   		movq	%rax, %rbx
 4731 0086 E8000000 		call	__cxa_end_catch@PLT
 4731      00
 4732 008b 4889D8   		movq	%rbx, %rax
 4733 008e 4889C7   		movq	%rax, %rdi
 4734              	.LEHB49:
 4735 0091 E8000000 		call	_Unwind_Resume@PLT
 4735      00
 4736              	.LEHE49:
 4737              	.L253:
 100:/usr/include/c++/11/bits/stl_uninitialized.h ****     };
 4738              		.loc 13 100 2
 4739 0096 488B5DF8 		movq	-8(%rbp), %rbx
 4740 009a C9       		leave
 4741              		.cfi_def_cfa 7, 8
 4742 009b C3       		ret
 4743              		.cfi_endproc
 4744              	.LFE1113:
 4745              		.section	.gcc_except_table
 4746 010a 0000     		.align 4
 4747              	.LLSDA1113:
 4748 010c FF       		.byte	0xff
 4749 010d 9B       		.byte	0x9b
 4750 010e 15       		.uleb128 .LLSDATT1113-.LLSDATTD1113
 4751              	.LLSDATTD1113:
 4752 010f 01       		.byte	0x1
 4753 0110 0D       		.uleb128 .LLSDACSE1113-.LLSDACSB1113
 4754              	.LLSDACSB1113:
 4755 0111 3C       		.uleb128 .LEHB47-.LFB1113
 4756 0112 05       		.uleb128 .LEHE47-.LEHB47
 4757 0113 5B       		.uleb128 .L251-.LFB1113
 4758 0114 01       		.uleb128 0x1
 4759 0115 75       		.uleb128 .LEHB48-.LFB1113
 4760 0116 0A       		.uleb128 .LEHE48-.LEHB48
 4761 0117 7F       		.uleb128 .L252-.LFB1113
 4762 0118 00       		.uleb128 0
 4763 0119 9101     		.uleb128 .LEHB49-.LFB1113
 4764 011b 05       		.uleb128 .LEHE49-.LEHB49
 4765 011c 00       		.uleb128 0
 4766 011d 00       		.uleb128 0
 4767              	.LLSDACSE1113:
 4768 011e 01       		.byte	0x1
 4769 011f 00       		.byte	0
 4770              		.align 4
 4771 0120 00000000 		.long	0
 4772              	
 4773              	.LLSDATT1113:
 4774              		.section	.text._ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPN8UnitTest18DeferredTestResultES4
 4776              		.section	.text._ZSt11__addressofIN8UnitTest18DeferredTestResultEEPT_RS2_,"axG",@progbits,_ZSt11__a
 4777              		.weak	_ZSt11__addressofIN8UnitTest18DeferredTestResultEEPT_RS2_
 4779              	_ZSt11__addressofIN8UnitTest18DeferredTestResultEEPT_RS2_:
 4780              	.LFB1114:
  49:/usr/include/c++/11/bits/move.h ****     { return __builtin_addressof(__r); }
 4781              		.loc 15 49 5
 4782              		.cfi_startproc
 4783 0000 F30F1EFA 		endbr64
 4784 0004 55       		pushq	%rbp
 4785              		.cfi_def_cfa_offset 16
 4786              		.cfi_offset 6, -16
 4787 0005 4889E5   		movq	%rsp, %rbp
 4788              		.cfi_def_cfa_register 6
 4789 0008 48897DF8 		movq	%rdi, -8(%rbp)
 4790              		.loc 15 50 37
 4791 000c 488B45F8 		movq	-8(%rbp), %rax
 4792              		.loc 15 50 40
 4793 0010 5D       		popq	%rbp
 4794              		.cfi_def_cfa 7, 8
 4795 0011 C3       		ret
 4796              		.cfi_endproc
 4797              	.LFE1114:
 4799              		.section	.text._ZSt8_DestroyIN8UnitTest18DeferredTestResultEEvPT_,"axG",@progbits,_ZSt8_DestroyIN8
 4800              		.weak	_ZSt8_DestroyIN8UnitTest18DeferredTestResultEEvPT_
 4802              	_ZSt8_DestroyIN8UnitTest18DeferredTestResultEEvPT_:
 4803              	.LFB1115:
 146:/usr/include/c++/11/bits/stl_construct.h ****     {
 4804              		.loc 11 146 5
 4805              		.cfi_startproc
 4806 0000 F30F1EFA 		endbr64
 4807 0004 55       		pushq	%rbp
 4808              		.cfi_def_cfa_offset 16
 4809              		.cfi_offset 6, -16
 4810 0005 4889E5   		movq	%rsp, %rbp
 4811              		.cfi_def_cfa_register 6
 4812 0008 4883EC10 		subq	$16, %rsp
 4813 000c 48897DF8 		movq	%rdi, -8(%rbp)
 151:/usr/include/c++/11/bits/stl_construct.h **** #endif
 4814              		.loc 11 151 22
 4815 0010 488B45F8 		movq	-8(%rbp), %rax
 4816 0014 4889C7   		movq	%rax, %rdi
 4817 0017 E8000000 		call	_ZN8UnitTest18DeferredTestResultD1Ev@PLT
 4817      00
 153:/usr/include/c++/11/bits/stl_construct.h **** 
 4818              		.loc 11 153 5
 4819 001c 90       		nop
 4820 001d C9       		leave
 4821              		.cfi_def_cfa 7, 8
 4822 001e C3       		ret
 4823              		.cfi_endproc
 4824              	.LFE1115:
 4826              		.section	.text._ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_trait
 4827              		.weak	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcE
 4829              	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEES8_
 4830              	.LFB1119:
 150:/usr/include/c++/11/ext/alloc_traits.h ****     { return __a.max_size(); }
 4831              		.loc 7 150 22
 4832              		.cfi_startproc
 4833 0000 F30F1EFA 		endbr64
 4834 0004 55       		pushq	%rbp
 4835              		.cfi_def_cfa_offset 16
 4836              		.cfi_offset 6, -16
 4837 0005 4889E5   		movq	%rsp, %rbp
 4838              		.cfi_def_cfa_register 6
 4839 0008 4883EC10 		subq	$16, %rsp
 4840 000c 48897DF8 		movq	%rdi, -8(%rbp)
 151:/usr/include/c++/11/ext/alloc_traits.h **** 
 4841              		.loc 7 151 26
 4842 0010 488B45F8 		movq	-8(%rbp), %rax
 4843 0014 4889C7   		movq	%rax, %rdi
 4844 0017 E8000000 		call	_ZNK9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE
 4844      00
 151:/usr/include/c++/11/ext/alloc_traits.h **** 
 4845              		.loc 7 151 30
 4846 001c C9       		leave
 4847              		.cfi_def_cfa 7, 8
 4848 001d C3       		ret
 4849              		.cfi_endproc
 4850              	.LFE1119:
 4852              		.section	.text._ZNK9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIc
 4853              		.align 2
 4854              		.weak	_ZNK9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE
 4856              	_ZNK9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE11_M_m
 4857              	.LFB1120:
 197:/usr/include/c++/11/ext/new_allocator.h ****       {
 4858              		.loc 12 197 7
 4859              		.cfi_startproc
 4860 0000 F30F1EFA 		endbr64
 4861 0004 55       		pushq	%rbp
 4862              		.cfi_def_cfa_offset 16
 4863              		.cfi_offset 6, -16
 4864 0005 4889E5   		movq	%rsp, %rbp
 4865              		.cfi_def_cfa_register 6
 4866 0008 48897DF8 		movq	%rdi, -8(%rbp)
 200:/usr/include/c++/11/ext/new_allocator.h **** #else
 4867              		.loc 12 200 50
 4868 000c 48B83333 		movabsq	$230584300921369395, %rax
 4868      33333333 
 4868      3303
 4869              		.loc 12 204 7
 4870 0016 5D       		popq	%rbp
 4871              		.cfi_def_cfa 7, 8
 4872 0017 C3       		ret
 4873              		.cfi_endproc
 4874              	.LFE1120:
 4876              		.section	.text._ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPSt4pairIiNSt7__cxx1112basic_strin
 4877              		.weak	_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11ch
 4879              	_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_trai
 4880              	.LFB1121:
  85:/usr/include/c++/11/bits/stl_uninitialized.h **** 		      _ForwardIterator __result)
 4881              		.loc 13 85 9
 4882              		.cfi_startproc
 4883              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 4884              		.cfi_lsda 0x1b,.LLSDA1121
 4885 0000 F30F1EFA 		endbr64
 4886 0004 55       		pushq	%rbp
 4887              		.cfi_def_cfa_offset 16
 4888              		.cfi_offset 6, -16
 4889 0005 4889E5   		movq	%rsp, %rbp
 4890              		.cfi_def_cfa_register 6
 4891 0008 53       		pushq	%rbx
 4892 0009 4883EC38 		subq	$56, %rsp
 4893              		.cfi_offset 3, -24
 4894 000d 48897DD8 		movq	%rdi, -40(%rbp)
 4895 0011 488975D0 		movq	%rsi, -48(%rbp)
 4896 0015 488955C8 		movq	%rdx, -56(%rbp)
  88:/usr/include/c++/11/bits/stl_uninitialized.h **** 	  __try
 4897              		.loc 13 88 21
 4898 0019 488B45C8 		movq	-56(%rbp), %rax
 4899 001d 488945E8 		movq	%rax, -24(%rbp)
  91:/usr/include/c++/11/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
 4900              		.loc 13 91 8
 4901 0021 EB28     		jmp	.L262
 4902              	.L263:
  92:/usr/include/c++/11/bits/stl_uninitialized.h **** 	      return __cur;
 4903              		.loc 13 92 18
 4904 0023 488B45E8 		movq	-24(%rbp), %rax
 4905 0027 4889C7   		movq	%rax, %rdi
 4906 002a E8000000 		call	_ZSt11__addressofISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT_RS8_@PLT
 4906      00
 4907 002f 4889C2   		movq	%rax, %rdx
 4908 0032 488B45D8 		movq	-40(%rbp), %rax
 4909 0036 4889C6   		movq	%rax, %rsi
 4910 0039 4889D7   		movq	%rdx, %rdi
 4911              	.LEHB50:
 4912 003c E8000000 		call	_ZSt10_ConstructISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_EvPT_RKT0_@
 4912      00
 4913              	.LEHE50:
  91:/usr/include/c++/11/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
 4914              		.loc 13 91 8
 4915 0041 488345D8 		addq	$40, -40(%rbp)
 4915      28
  91:/usr/include/c++/11/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
 4916              		.loc 13 91 45
 4917 0046 488345E8 		addq	$40, -24(%rbp)
 4917      28
 4918              	.L262:
  91:/usr/include/c++/11/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
 4919              		.loc 13 91 23 discriminator 1
 4920 004b 488B45D8 		movq	-40(%rbp), %rax
 4921 004f 483B45D0 		cmpq	-48(%rbp), %rax
 4922 0053 75CE     		jne	.L263
  93:/usr/include/c++/11/bits/stl_uninitialized.h **** 	    }
 4923              		.loc 13 93 15
 4924 0055 488B45E8 		movq	-24(%rbp), %rax
 4925 0059 EB3B     		jmp	.L269
 4926              	.L267:
 4927 005b F30F1EFA 		endbr64
  95:/usr/include/c++/11/bits/stl_uninitialized.h **** 	    {
 4928              		.loc 13 95 4
 4929 005f 4889C7   		movq	%rax, %rdi
 4930 0062 E8000000 		call	__cxa_begin_catch@PLT
 4930      00
  97:/usr/include/c++/11/bits/stl_uninitialized.h **** 	      __throw_exception_again;
 4931              		.loc 13 97 21
 4932 0067 488B55E8 		movq	-24(%rbp), %rdx
 4933 006b 488B45C8 		movq	-56(%rbp), %rax
 4934 006f 4889D6   		movq	%rdx, %rsi
 4935 0072 4889C7   		movq	%rax, %rdi
 4936              	.LEHB51:
 4937 0075 E8000000 		call	_ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_@PLT
 4937      00
  98:/usr/include/c++/11/bits/stl_uninitialized.h **** 	    }
 4938              		.loc 13 98 8
 4939 007a E8000000 		call	__cxa_rethrow@PLT
 4939      00
 4940              	.LEHE51:
 4941              	.L268:
 4942 007f F30F1EFA 		endbr64
  95:/usr/include/c++/11/bits/stl_uninitialized.h **** 	    {
 4943              		.loc 13 95 4
 4944 0083 4889C3   		movq	%rax, %rbx
 4945 0086 E8000000 		call	__cxa_end_catch@PLT
 4945      00
 4946 008b 4889D8   		movq	%rbx, %rax
 4947 008e 4889C7   		movq	%rax, %rdi
 4948              	.LEHB52:
 4949 0091 E8000000 		call	_Unwind_Resume@PLT
 4949      00
 4950              	.LEHE52:
 4951              	.L269:
 100:/usr/include/c++/11/bits/stl_uninitialized.h ****     };
 4952              		.loc 13 100 2
 4953 0096 488B5DF8 		movq	-8(%rbp), %rbx
 4954 009a C9       		leave
 4955              		.cfi_def_cfa 7, 8
 4956 009b C3       		ret
 4957              		.cfi_endproc
 4958              	.LFE1121:
 4959              		.section	.gcc_except_table
 4960              		.align 4
 4961              	.LLSDA1121:
 4962 0124 FF       		.byte	0xff
 4963 0125 9B       		.byte	0x9b
 4964 0126 15       		.uleb128 .LLSDATT1121-.LLSDATTD1121
 4965              	.LLSDATTD1121:
 4966 0127 01       		.byte	0x1
 4967 0128 0D       		.uleb128 .LLSDACSE1121-.LLSDACSB1121
 4968              	.LLSDACSB1121:
 4969 0129 3C       		.uleb128 .LEHB50-.LFB1121
 4970 012a 05       		.uleb128 .LEHE50-.LEHB50
 4971 012b 5B       		.uleb128 .L267-.LFB1121
 4972 012c 01       		.uleb128 0x1
 4973 012d 75       		.uleb128 .LEHB51-.LFB1121
 4974 012e 0A       		.uleb128 .LEHE51-.LEHB51
 4975 012f 7F       		.uleb128 .L268-.LFB1121
 4976 0130 00       		.uleb128 0
 4977 0131 9101     		.uleb128 .LEHB52-.LFB1121
 4978 0133 05       		.uleb128 .LEHE52-.LEHB52
 4979 0134 00       		.uleb128 0
 4980 0135 00       		.uleb128 0
 4981              	.LLSDACSE1121:
 4982 0136 01       		.byte	0x1
 4983 0137 00       		.byte	0
 4984              		.align 4
 4985 0138 00000000 		.long	0
 4986              	
 4987              	.LLSDATT1121:
 4988              		.section	.text._ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPSt4pairIiNSt7__cxx1112basic_strin
 4990              		.section	.text._ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2ERKS7_,"axG"
 4991              		.align 2
 4992              		.weak	_ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2ERKS7_
 4994              	_ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2ERKS7_:
 4995              	.LFB1123:
 159:/usr/include/c++/11/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 4996              		.loc 10 159 7
 4997              		.cfi_startproc
 4998 0000 F30F1EFA 		endbr64
 4999 0004 55       		pushq	%rbp
 5000              		.cfi_def_cfa_offset 16
 5001              		.cfi_offset 6, -16
 5002 0005 4889E5   		movq	%rsp, %rbp
 5003              		.cfi_def_cfa_register 6
 5004 0008 4883EC10 		subq	$16, %rsp
 5005 000c 48897DF8 		movq	%rdi, -8(%rbp)
 5006 0010 488975F0 		movq	%rsi, -16(%rbp)
 5007              	.LBB23:
 160:/usr/include/c++/11/bits/allocator.h **** 
 5008              		.loc 10 160 34
 5009 0014 488B55F0 		movq	-16(%rbp), %rdx
 5010 0018 488B45F8 		movq	-8(%rbp), %rax
 5011 001c 4889D6   		movq	%rdx, %rsi
 5012 001f 4889C7   		movq	%rax, %rdi
 5013 0022 E8000000 		call	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC
 5013      00
 5014              	.LBE23:
 160:/usr/include/c++/11/bits/allocator.h **** 
 5015              		.loc 10 160 38
 5016 0027 90       		nop
 5017 0028 C9       		leave
 5018              		.cfi_def_cfa 7, 8
 5019 0029 C3       		ret
 5020              		.cfi_endproc
 5021              	.LFE1123:
 5023              		.weak	_ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1ERKS7_
 5024              		.set	_ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1ERKS7_,_ZNSaISt4pairIi
 5025              		.section	.text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES
 5026              		.align 2
 5027              		.weak	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE17
 5029              	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE17_Vector
 5030              	.LFB1126:
  97:/usr/include/c++/11/bits/stl_vector.h **** 	: _M_start(), _M_finish(), _M_end_of_storage()
 5031              		.loc 5 97 2
 5032              		.cfi_startproc
 5033 0000 F30F1EFA 		endbr64
 5034 0004 55       		pushq	%rbp
 5035              		.cfi_def_cfa_offset 16
 5036              		.cfi_offset 6, -16
 5037 0005 4889E5   		movq	%rsp, %rbp
 5038              		.cfi_def_cfa_register 6
 5039 0008 48897DF8 		movq	%rdi, -8(%rbp)
 5040              	.LBB24:
  98:/usr/include/c++/11/bits/stl_vector.h **** 	{ }
 5041              		.loc 5 98 4
 5042 000c 488B45F8 		movq	-8(%rbp), %rax
 5043 0010 48C70000 		movq	$0, (%rax)
 5043      000000
  98:/usr/include/c++/11/bits/stl_vector.h **** 	{ }
 5044              		.loc 5 98 16
 5045 0017 488B45F8 		movq	-8(%rbp), %rax
 5046 001b 48C74008 		movq	$0, 8(%rax)
 5046      00000000 
  98:/usr/include/c++/11/bits/stl_vector.h **** 	{ }
 5047              		.loc 5 98 29
 5048 0023 488B45F8 		movq	-8(%rbp), %rax
 5049 0027 48C74010 		movq	$0, 16(%rax)
 5049      00000000 
 5050              	.LBE24:
  99:/usr/include/c++/11/bits/stl_vector.h **** 
 5051              		.loc 5 99 4
 5052 002f 90       		nop
 5053 0030 5D       		popq	%rbp
 5054              		.cfi_def_cfa 7, 8
 5055 0031 C3       		ret
 5056              		.cfi_endproc
 5057              	.LFE1126:
 5059              		.weak	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE17
 5060              		.set	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE17_
 5061              		.section	.text._ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKS
 5062              		.weak	_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiN
 5064              	_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cx
 5065              	.LFB1128:
  85:/usr/include/c++/11/bits/stl_uninitialized.h **** 		      _ForwardIterator __result)
 5066              		.loc 13 85 9
 5067              		.cfi_startproc
 5068              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 5069              		.cfi_lsda 0x1b,.LLSDA1128
 5070 0000 F30F1EFA 		endbr64
 5071 0004 55       		pushq	%rbp
 5072              		.cfi_def_cfa_offset 16
 5073              		.cfi_offset 6, -16
 5074 0005 4889E5   		movq	%rsp, %rbp
 5075              		.cfi_def_cfa_register 6
 5076 0008 53       		pushq	%rbx
 5077 0009 4883EC38 		subq	$56, %rsp
 5078              		.cfi_offset 3, -24
 5079 000d 48897DD8 		movq	%rdi, -40(%rbp)
 5080 0011 488975D0 		movq	%rsi, -48(%rbp)
 5081 0015 488955C8 		movq	%rdx, -56(%rbp)
  88:/usr/include/c++/11/bits/stl_uninitialized.h **** 	  __try
 5082              		.loc 13 88 21
 5083 0019 488B45C8 		movq	-56(%rbp), %rax
 5084 001d 488945E8 		movq	%rax, -24(%rbp)
  91:/usr/include/c++/11/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
 5085              		.loc 13 91 8
 5086 0021 EB37     		jmp	.L273
 5087              	.L274:
  92:/usr/include/c++/11/bits/stl_uninitialized.h **** 	      return __cur;
 5088              		.loc 13 92 45
 5089 0023 488D45D8 		leaq	-40(%rbp), %rax
 5090 0027 4889C7   		movq	%rax, %rdi
 5091 002a E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaI
 5091      00
 5092 002f 4889C3   		movq	%rax, %rbx
  92:/usr/include/c++/11/bits/stl_uninitialized.h **** 	      return __cur;
 5093              		.loc 13 92 18
 5094 0032 488B45E8 		movq	-24(%rbp), %rax
 5095 0036 4889C7   		movq	%rax, %rdi
 5096 0039 E8000000 		call	_ZSt11__addressofISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT_RS8_@PLT
 5096      00
 5097 003e 4889DE   		movq	%rbx, %rsi
 5098 0041 4889C7   		movq	%rax, %rdi
 5099              	.LEHB53:
 5100 0044 E8000000 		call	_ZSt10_ConstructISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_EvPT_RKT0_@
 5100      00
  91:/usr/include/c++/11/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
 5101              		.loc 13 91 34
 5102 0049 488D45D8 		leaq	-40(%rbp), %rax
 5103 004d 4889C7   		movq	%rax, %rdi
 5104 0050 E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIc
 5104      00
  91:/usr/include/c++/11/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
 5105              		.loc 13 91 45
 5106 0055 488345E8 		addq	$40, -24(%rbp)
 5106      28
 5107              	.L273:
  91:/usr/include/c++/11/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
 5108              		.loc 13 91 23 discriminator 1
 5109 005a 488D55D0 		leaq	-48(%rbp), %rdx
 5110 005e 488D45D8 		leaq	-40(%rbp), %rax
 5111 0062 4889D6   		movq	%rdx, %rsi
 5112 0065 4889C7   		movq	%rax, %rdi
 5113 0068 E8000000 		call	_ZN9__gnu_cxxneIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_
 5113      00
 5114              	.LEHE53:
 5115 006d 84C0     		testb	%al, %al
 5116 006f 75B2     		jne	.L274
  93:/usr/include/c++/11/bits/stl_uninitialized.h **** 	    }
 5117              		.loc 13 93 15
 5118 0071 488B45E8 		movq	-24(%rbp), %rax
 5119 0075 EB3B     		jmp	.L280
 5120              	.L278:
 5121 0077 F30F1EFA 		endbr64
  95:/usr/include/c++/11/bits/stl_uninitialized.h **** 	    {
 5122              		.loc 13 95 4
 5123 007b 4889C7   		movq	%rax, %rdi
 5124 007e E8000000 		call	__cxa_begin_catch@PLT
 5124      00
  97:/usr/include/c++/11/bits/stl_uninitialized.h **** 	      __throw_exception_again;
 5125              		.loc 13 97 21
 5126 0083 488B55E8 		movq	-24(%rbp), %rdx
 5127 0087 488B45C8 		movq	-56(%rbp), %rax
 5128 008b 4889D6   		movq	%rdx, %rsi
 5129 008e 4889C7   		movq	%rax, %rdi
 5130              	.LEHB54:
 5131 0091 E8000000 		call	_ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_@PLT
 5131      00
  98:/usr/include/c++/11/bits/stl_uninitialized.h **** 	    }
 5132              		.loc 13 98 8
 5133 0096 E8000000 		call	__cxa_rethrow@PLT
 5133      00
 5134              	.LEHE54:
 5135              	.L279:
 5136 009b F30F1EFA 		endbr64
  95:/usr/include/c++/11/bits/stl_uninitialized.h **** 	    {
 5137              		.loc 13 95 4
 5138 009f 4889C3   		movq	%rax, %rbx
 5139 00a2 E8000000 		call	__cxa_end_catch@PLT
 5139      00
 5140 00a7 4889D8   		movq	%rbx, %rax
 5141 00aa 4889C7   		movq	%rax, %rdi
 5142              	.LEHB55:
 5143 00ad E8000000 		call	_Unwind_Resume@PLT
 5143      00
 5144              	.LEHE55:
 5145              	.L280:
 100:/usr/include/c++/11/bits/stl_uninitialized.h ****     };
 5146              		.loc 13 100 2
 5147 00b2 488B5DF8 		movq	-8(%rbp), %rbx
 5148 00b6 C9       		leave
 5149              		.cfi_def_cfa 7, 8
 5150 00b7 C3       		ret
 5151              		.cfi_endproc
 5152              	.LFE1128:
 5153              		.section	.gcc_except_table
 5154              		.align 4
 5155              	.LLSDA1128:
 5156 013c FF       		.byte	0xff
 5157 013d 9B       		.byte	0x9b
 5158 013e 19       		.uleb128 .LLSDATT1128-.LLSDATTD1128
 5159              	.LLSDATTD1128:
 5160 013f 01       		.byte	0x1
 5161 0140 0F       		.uleb128 .LLSDACSE1128-.LLSDACSB1128
 5162              	.LLSDACSB1128:
 5163 0141 44       		.uleb128 .LEHB53-.LFB1128
 5164 0142 29       		.uleb128 .LEHE53-.LEHB53
 5165 0143 77       		.uleb128 .L278-.LFB1128
 5166 0144 01       		.uleb128 0x1
 5167 0145 9101     		.uleb128 .LEHB54-.LFB1128
 5168 0147 0A       		.uleb128 .LEHE54-.LEHB54
 5169 0148 9B01     		.uleb128 .L279-.LFB1128
 5170 014a 00       		.uleb128 0
 5171 014b AD01     		.uleb128 .LEHB55-.LFB1128
 5172 014d 05       		.uleb128 .LEHE55-.LEHB55
 5173 014e 00       		.uleb128 0
 5174 014f 00       		.uleb128 0
 5175              	.LLSDACSE1128:
 5176 0150 01       		.byte	0x1
 5177 0151 00       		.byte	0
 5178 0152 0000     		.align 4
 5179 0154 00000000 		.long	0
 5180              	
 5181              	.LLSDATT1128:
 5182              		.section	.text._ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKS
 5184              		.section	.text._ZNK9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE8max_sizeEv,"axG",@pr
 5185              		.align 2
 5186              		.weak	_ZNK9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE8max_sizeEv
 5188              	_ZNK9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE8max_sizeEv:
 5189              	.LFB1129:
 154:/usr/include/c++/11/ext/new_allocator.h ****       { return _M_max_size(); }
 5190              		.loc 12 154 7
 5191              		.cfi_startproc
 5192 0000 F30F1EFA 		endbr64
 5193 0004 55       		pushq	%rbp
 5194              		.cfi_def_cfa_offset 16
 5195              		.cfi_offset 6, -16
 5196 0005 4889E5   		movq	%rsp, %rbp
 5197              		.cfi_def_cfa_register 6
 5198 0008 4883EC10 		subq	$16, %rsp
 5199 000c 48897DF8 		movq	%rdi, -8(%rbp)
 155:/usr/include/c++/11/ext/new_allocator.h **** 
 5200              		.loc 12 155 27
 5201 0010 488B45F8 		movq	-8(%rbp), %rax
 5202 0014 4889C7   		movq	%rax, %rdi
 5203 0017 E8000000 		call	_ZNK9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE11_M_max_sizeEv@PLT
 5203      00
 155:/usr/include/c++/11/ext/new_allocator.h **** 
 5204              		.loc 12 155 31
 5205 001c C9       		leave
 5206              		.cfi_def_cfa 7, 8
 5207 001d C3       		ret
 5208              		.cfi_endproc
 5209              	.LFE1129:
 5211              		.section	.text._ZSt10_ConstructIN8UnitTest18DeferredTestResultES1_EvPT_RKT0_,"axG",@progbits,_ZSt1
 5212              		.weak	_ZSt10_ConstructIN8UnitTest18DeferredTestResultES1_EvPT_RKT0_
 5214              	_ZSt10_ConstructIN8UnitTest18DeferredTestResultES1_EvPT_RKT0_:
 5215              	.LFB1130:
 124:/usr/include/c++/11/bits/stl_construct.h ****     {
 5216              		.loc 11 124 5
 5217              		.cfi_startproc
 5218              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 5219              		.cfi_lsda 0x1b,.LLSDA1130
 5220 0000 F30F1EFA 		endbr64
 5221 0004 55       		pushq	%rbp
 5222              		.cfi_def_cfa_offset 16
 5223              		.cfi_offset 6, -16
 5224 0005 4889E5   		movq	%rsp, %rbp
 5225              		.cfi_def_cfa_register 6
 5226 0008 4155     		pushq	%r13
 5227 000a 4154     		pushq	%r12
 5228 000c 53       		pushq	%rbx
 5229 000d 4883EC18 		subq	$24, %rsp
 5230              		.cfi_offset 13, -24
 5231              		.cfi_offset 12, -32
 5232              		.cfi_offset 3, -40
 5233 0011 48897DD8 		movq	%rdi, -40(%rbp)
 5234 0015 488975D0 		movq	%rsi, -48(%rbp)
 128:/usr/include/c++/11/bits/stl_construct.h ****     }
 5235              		.loc 11 128 13
 5236 0019 488B5DD8 		movq	-40(%rbp), %rbx
 128:/usr/include/c++/11/bits/stl_construct.h ****     }
 5237              		.loc 11 128 7
 5238 001d 4889DE   		movq	%rbx, %rsi
 5239 0020 BF800000 		movl	$128, %edi
 5239      00
 5240 0025 E8000000 		call	_ZnwmPv@PLT
 5240      00
 5241 002a 4989C4   		movq	%rax, %r12
 5242 002d 488B45D0 		movq	-48(%rbp), %rax
 5243 0031 4889C6   		movq	%rax, %rsi
 5244 0034 4C89E7   		movq	%r12, %rdi
 5245              	.LEHB56:
 5246 0037 E8000000 		call	_ZN8UnitTest18DeferredTestResultC1ERKS0_@PLT
 5246      00
 5247              	.LEHE56:
 129:/usr/include/c++/11/bits/stl_construct.h **** #endif
 5248              		.loc 11 129 5
 5249 003c EB1D     		jmp	.L286
 5250              	.L285:
 5251 003e F30F1EFA 		endbr64
 128:/usr/include/c++/11/bits/stl_construct.h ****     }
 5252              		.loc 11 128 7
 5253 0042 4989C5   		movq	%rax, %r13
 5254 0045 4889DE   		movq	%rbx, %rsi
 5255 0048 4C89E7   		movq	%r12, %rdi
 5256 004b E8000000 		call	_ZdlPvS_@PLT
 5256      00
 5257 0050 4C89E8   		movq	%r13, %rax
 5258 0053 4889C7   		movq	%rax, %rdi
 5259              	.LEHB57:
 5260 0056 E8000000 		call	_Unwind_Resume@PLT
 5260      00
 5261              	.LEHE57:
 5262              	.L286:
 129:/usr/include/c++/11/bits/stl_construct.h **** #endif
 5263              		.loc 11 129 5
 5264 005b 4883C418 		addq	$24, %rsp
 5265 005f 5B       		popq	%rbx
 5266 0060 415C     		popq	%r12
 5267 0062 415D     		popq	%r13
 5268 0064 5D       		popq	%rbp
 5269              		.cfi_def_cfa 7, 8
 5270 0065 C3       		ret
 5271              		.cfi_endproc
 5272              	.LFE1130:
 5273              		.section	.gcc_except_table
 5274              	.LLSDA1130:
 5275 0158 FF       		.byte	0xff
 5276 0159 FF       		.byte	0xff
 5277 015a 01       		.byte	0x1
 5278 015b 08       		.uleb128 .LLSDACSE1130-.LLSDACSB1130
 5279              	.LLSDACSB1130:
 5280 015c 37       		.uleb128 .LEHB56-.LFB1130
 5281 015d 05       		.uleb128 .LEHE56-.LEHB56
 5282 015e 3E       		.uleb128 .L285-.LFB1130
 5283 015f 00       		.uleb128 0
 5284 0160 56       		.uleb128 .LEHB57-.LFB1130
 5285 0161 05       		.uleb128 .LEHE57-.LEHB57
 5286 0162 00       		.uleb128 0
 5287 0163 00       		.uleb128 0
 5288              	.LLSDACSE1130:
 5289              		.section	.text._ZSt10_ConstructIN8UnitTest18DeferredTestResultES1_EvPT_RKT0_,"axG",@progbits,_ZSt1
 5291              		.section	.text._ZNK9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIc
 5292              		.align 2
 5293              		.weak	_ZNK9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE
 5295              	_ZNK9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_s
 5296              	.LFB1133:
 154:/usr/include/c++/11/ext/new_allocator.h ****       { return _M_max_size(); }
 5297              		.loc 12 154 7
 5298              		.cfi_startproc
 5299 0000 F30F1EFA 		endbr64
 5300 0004 55       		pushq	%rbp
 5301              		.cfi_def_cfa_offset 16
 5302              		.cfi_offset 6, -16
 5303 0005 4889E5   		movq	%rsp, %rbp
 5304              		.cfi_def_cfa_register 6
 5305 0008 4883EC10 		subq	$16, %rsp
 5306 000c 48897DF8 		movq	%rdi, -8(%rbp)
 155:/usr/include/c++/11/ext/new_allocator.h **** 
 5307              		.loc 12 155 27
 5308 0010 488B45F8 		movq	-8(%rbp), %rax
 5309 0014 4889C7   		movq	%rax, %rdi
 5310 0017 E8000000 		call	_ZNK9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE
 5310      00
 155:/usr/include/c++/11/ext/new_allocator.h **** 
 5311              		.loc 12 155 31
 5312 001c C9       		leave
 5313              		.cfi_def_cfa 7, 8
 5314 001d C3       		ret
 5315              		.cfi_endproc
 5316              	.LFE1133:
 5318              		.section	.text._ZSt10_ConstructISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_E
 5319              		.weak	_ZSt10_ConstructISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_EvPT_RKT0_
 5321              	_ZSt10_ConstructISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_EvPT_RKT0_:
 5322              	.LFB1134:
 124:/usr/include/c++/11/bits/stl_construct.h ****     {
 5323              		.loc 11 124 5
 5324              		.cfi_startproc
 5325              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 5326              		.cfi_lsda 0x1b,.LLSDA1134
 5327 0000 F30F1EFA 		endbr64
 5328 0004 55       		pushq	%rbp
 5329              		.cfi_def_cfa_offset 16
 5330              		.cfi_offset 6, -16
 5331 0005 4889E5   		movq	%rsp, %rbp
 5332              		.cfi_def_cfa_register 6
 5333 0008 4155     		pushq	%r13
 5334 000a 4154     		pushq	%r12
 5335 000c 53       		pushq	%rbx
 5336 000d 4883EC18 		subq	$24, %rsp
 5337              		.cfi_offset 13, -24
 5338              		.cfi_offset 12, -32
 5339              		.cfi_offset 3, -40
 5340 0011 48897DD8 		movq	%rdi, -40(%rbp)
 5341 0015 488975D0 		movq	%rsi, -48(%rbp)
 128:/usr/include/c++/11/bits/stl_construct.h ****     }
 5342              		.loc 11 128 13
 5343 0019 488B5DD8 		movq	-40(%rbp), %rbx
 128:/usr/include/c++/11/bits/stl_construct.h ****     }
 5344              		.loc 11 128 7
 5345 001d 4889DE   		movq	%rbx, %rsi
 5346 0020 BF280000 		movl	$40, %edi
 5346      00
 5347 0025 E8000000 		call	_ZnwmPv@PLT
 5347      00
 5348 002a 4989C4   		movq	%rax, %r12
 5349 002d 488B45D0 		movq	-48(%rbp), %rax
 5350 0031 4889C6   		movq	%rax, %rsi
 5351 0034 4C89E7   		movq	%r12, %rdi
 5352              	.LEHB58:
 5353 0037 E8000000 		call	_ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKS6_@PLT
 5353      00
 5354              	.LEHE58:
 129:/usr/include/c++/11/bits/stl_construct.h **** #endif
 5355              		.loc 11 129 5
 5356 003c EB1D     		jmp	.L292
 5357              	.L291:
 5358 003e F30F1EFA 		endbr64
 128:/usr/include/c++/11/bits/stl_construct.h ****     }
 5359              		.loc 11 128 7
 5360 0042 4989C5   		movq	%rax, %r13
 5361 0045 4889DE   		movq	%rbx, %rsi
 5362 0048 4C89E7   		movq	%r12, %rdi
 5363 004b E8000000 		call	_ZdlPvS_@PLT
 5363      00
 5364 0050 4C89E8   		movq	%r13, %rax
 5365 0053 4889C7   		movq	%rax, %rdi
 5366              	.LEHB59:
 5367 0056 E8000000 		call	_Unwind_Resume@PLT
 5367      00
 5368              	.LEHE59:
 5369              	.L292:
 129:/usr/include/c++/11/bits/stl_construct.h **** #endif
 5370              		.loc 11 129 5
 5371 005b 4883C418 		addq	$24, %rsp
 5372 005f 5B       		popq	%rbx
 5373 0060 415C     		popq	%r12
 5374 0062 415D     		popq	%r13
 5375 0064 5D       		popq	%rbp
 5376              		.cfi_def_cfa 7, 8
 5377 0065 C3       		ret
 5378              		.cfi_endproc
 5379              	.LFE1134:
 5380              		.section	.gcc_except_table
 5381              	.LLSDA1134:
 5382 0164 FF       		.byte	0xff
 5383 0165 FF       		.byte	0xff
 5384 0166 01       		.byte	0x1
 5385 0167 08       		.uleb128 .LLSDACSE1134-.LLSDACSB1134
 5386              	.LLSDACSB1134:
 5387 0168 37       		.uleb128 .LEHB58-.LFB1134
 5388 0169 05       		.uleb128 .LEHE58-.LEHB58
 5389 016a 3E       		.uleb128 .L291-.LFB1134
 5390 016b 00       		.uleb128 0
 5391 016c 56       		.uleb128 .LEHB59-.LFB1134
 5392 016d 05       		.uleb128 .LEHE59-.LEHB59
 5393 016e 00       		.uleb128 0
 5394 016f 00       		.uleb128 0
 5395              	.LLSDACSE1134:
 5396              		.section	.text._ZSt10_ConstructISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_E
 5398              		.section	.text._ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcE
 5399              		.align 2
 5400              		.weak	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE
 5402              	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2ERKS9
 5403              	.LFB1136:
  82:/usr/include/c++/11/ext/new_allocator.h **** 
 5404              		.loc 12 82 7
 5405              		.cfi_startproc
 5406 0000 F30F1EFA 		endbr64
 5407 0004 55       		pushq	%rbp
 5408              		.cfi_def_cfa_offset 16
 5409              		.cfi_offset 6, -16
 5410 0005 4889E5   		movq	%rsp, %rbp
 5411              		.cfi_def_cfa_register 6
 5412 0008 48897DF8 		movq	%rdi, -8(%rbp)
 5413 000c 488975F0 		movq	%rsi, -16(%rbp)
  82:/usr/include/c++/11/ext/new_allocator.h **** 
 5414              		.loc 12 82 67
 5415 0010 90       		nop
 5416 0011 5D       		popq	%rbp
 5417              		.cfi_def_cfa 7, 8
 5418 0012 C3       		ret
 5419              		.cfi_endproc
 5420              	.LFE1136:
 5422              		.weak	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE
 5423              		.set	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC
 5424              		.section	.text._ZN9__gnu_cxxneIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6
 5425              		.weak	_ZN9__gnu_cxxneIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8
 5427              	_ZN9__gnu_cxxneIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_
 5428              	.LFB1138:
1145:/usr/include/c++/11/bits/stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
 5429              		.loc 9 1145 5
 5430              		.cfi_startproc
 5431 0000 F30F1EFA 		endbr64
 5432 0004 55       		pushq	%rbp
 5433              		.cfi_def_cfa_offset 16
 5434              		.cfi_offset 6, -16
 5435 0005 4889E5   		movq	%rsp, %rbp
 5436              		.cfi_def_cfa_register 6
 5437 0008 53       		pushq	%rbx
 5438 0009 4883EC18 		subq	$24, %rsp
 5439              		.cfi_offset 3, -24
 5440 000d 48897DE8 		movq	%rdi, -24(%rbp)
 5441 0011 488975E0 		movq	%rsi, -32(%rbp)
1148:/usr/include/c++/11/bits/stl_iterator.h **** 
 5442              		.loc 9 1148 24
 5443 0015 488B45E8 		movq	-24(%rbp), %rax
 5444 0019 4889C7   		movq	%rax, %rdi
 5445 001c E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaI
 5445      00
1148:/usr/include/c++/11/bits/stl_iterator.h **** 
 5446              		.loc 9 1148 27
 5447 0021 488B18   		movq	(%rax), %rbx
1148:/usr/include/c++/11/bits/stl_iterator.h **** 
 5448              		.loc 9 1148 40
 5449 0024 488B45E0 		movq	-32(%rbp), %rax
 5450 0028 4889C7   		movq	%rax, %rdi
 5451 002b E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaI
 5451      00
1148:/usr/include/c++/11/bits/stl_iterator.h **** 
 5452              		.loc 9 1148 27
 5453 0030 488B00   		movq	(%rax), %rax
1148:/usr/include/c++/11/bits/stl_iterator.h **** 
 5454              		.loc 9 1148 41
 5455 0033 4839C3   		cmpq	%rax, %rbx
 5456 0036 0F95C0   		setne	%al
1148:/usr/include/c++/11/bits/stl_iterator.h **** 
 5457              		.loc 9 1148 44
 5458 0039 488B5DF8 		movq	-8(%rbp), %rbx
 5459 003d C9       		leave
 5460              		.cfi_def_cfa 7, 8
 5461 003e C3       		ret
 5462              		.cfi_endproc
 5463              	.LFE1138:
 5465              		.section	.text._ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_tra
 5466              		.align 2
 5467              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaI
 5469              	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt
 5470              	.LFB1139:
1035:/usr/include/c++/11/bits/stl_iterator.h ****       {
 5471              		.loc 9 1035 7
 5472              		.cfi_startproc
 5473 0000 F30F1EFA 		endbr64
 5474 0004 55       		pushq	%rbp
 5475              		.cfi_def_cfa_offset 16
 5476              		.cfi_offset 6, -16
 5477 0005 4889E5   		movq	%rsp, %rbp
 5478              		.cfi_def_cfa_register 6
 5479 0008 48897DF8 		movq	%rdi, -8(%rbp)
1037:/usr/include/c++/11/bits/stl_iterator.h **** 	return *this;
 5480              		.loc 9 1037 4
 5481 000c 488B45F8 		movq	-8(%rbp), %rax
 5482 0010 488B00   		movq	(%rax), %rax
1037:/usr/include/c++/11/bits/stl_iterator.h **** 	return *this;
 5483              		.loc 9 1037 2
 5484 0013 488D5028 		leaq	40(%rax), %rdx
 5485 0017 488B45F8 		movq	-8(%rbp), %rax
 5486 001b 488910   		movq	%rdx, (%rax)
1038:/usr/include/c++/11/bits/stl_iterator.h ****       }
 5487              		.loc 9 1038 10
 5488 001e 488B45F8 		movq	-8(%rbp), %rax
1039:/usr/include/c++/11/bits/stl_iterator.h **** 
 5489              		.loc 9 1039 7
 5490 0022 5D       		popq	%rbp
 5491              		.cfi_def_cfa 7, 8
 5492 0023 C3       		ret
 5493              		.cfi_endproc
 5494              	.LFE1139:
 5496              		.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_tr
 5497              		.align 2
 5498              		.weak	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESa
 5500              	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES
 5501              	.LFB1140:
1025:/usr/include/c++/11/bits/stl_iterator.h ****       { return *_M_current; }
 5502              		.loc 9 1025 7
 5503              		.cfi_startproc
 5504 0000 F30F1EFA 		endbr64
 5505 0004 55       		pushq	%rbp
 5506              		.cfi_def_cfa_offset 16
 5507              		.cfi_offset 6, -16
 5508 0005 4889E5   		movq	%rsp, %rbp
 5509              		.cfi_def_cfa_register 6
 5510 0008 48897DF8 		movq	%rdi, -8(%rbp)
1026:/usr/include/c++/11/bits/stl_iterator.h **** 
 5511              		.loc 9 1026 17
 5512 000c 488B45F8 		movq	-8(%rbp), %rax
 5513 0010 488B00   		movq	(%rax), %rax
1026:/usr/include/c++/11/bits/stl_iterator.h **** 
 5514              		.loc 9 1026 29
 5515 0013 5D       		popq	%rbp
 5516              		.cfi_def_cfa 7, 8
 5517 0014 C3       		ret
 5518              		.cfi_endproc
 5519              	.LFE1140:
 5521              		.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_tr
 5522              		.align 2
 5523              		.weak	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESa
 5525              	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES
 5526              	.LFB1141:
1088:/usr/include/c++/11/bits/stl_iterator.h ****       { return _M_current; }
 5527              		.loc 9 1088 7
 5528              		.cfi_startproc
 5529 0000 F30F1EFA 		endbr64
 5530 0004 55       		pushq	%rbp
 5531              		.cfi_def_cfa_offset 16
 5532              		.cfi_offset 6, -16
 5533 0005 4889E5   		movq	%rsp, %rbp
 5534              		.cfi_def_cfa_register 6
 5535 0008 48897DF8 		movq	%rdi, -8(%rbp)
1089:/usr/include/c++/11/bits/stl_iterator.h ****     };
 5536              		.loc 9 1089 16
 5537 000c 488B45F8 		movq	-8(%rbp), %rax
1089:/usr/include/c++/11/bits/stl_iterator.h ****     };
 5538              		.loc 9 1089 28
 5539 0010 5D       		popq	%rbp
 5540              		.cfi_def_cfa 7, 8
 5541 0011 C3       		ret
 5542              		.cfi_endproc
 5543              	.LFE1141:
 5545              		.weak	_ZTVN8UnitTest20DeferredTestReporterE
 5546              		.section	.data.rel.ro._ZTVN8UnitTest20DeferredTestReporterE,"awG",@progbits,_ZTVN8UnitTest20Deferr
 5547              		.align 8
 5550              	_ZTVN8UnitTest20DeferredTestReporterE:
 5551 0000 00000000 		.quad	0
 5551      00000000 
 5552 0008 00000000 		.quad	_ZTIN8UnitTest20DeferredTestReporterE
 5552      00000000 
 5553 0010 00000000 		.quad	0
 5553      00000000 
 5554 0018 00000000 		.quad	0
 5554      00000000 
 5555 0020 00000000 		.quad	_ZN8UnitTest20DeferredTestReporter15ReportTestStartERKNS_11TestDetailsE
 5555      00000000 
 5556 0028 00000000 		.quad	_ZN8UnitTest20DeferredTestReporter13ReportFailureERKNS_11TestDetailsEPKc
 5556      00000000 
 5557 0030 00000000 		.quad	_ZN8UnitTest20DeferredTestReporter16ReportTestFinishERKNS_11TestDetailsEf
 5557      00000000 
 5558 0038 00000000 		.quad	__cxa_pure_virtual
 5558      00000000 
 5559              		.weak	_ZTIN8UnitTest20DeferredTestReporterE
 5560              		.section	.data.rel.ro._ZTIN8UnitTest20DeferredTestReporterE,"awG",@progbits,_ZTIN8UnitTest20Deferr
 5561              		.align 8
 5564              	_ZTIN8UnitTest20DeferredTestReporterE:
 5565 0000 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 5565      00000000 
 5566 0008 00000000 		.quad	_ZTSN8UnitTest20DeferredTestReporterE
 5566      00000000 
 5567 0010 00000000 		.quad	_ZTIN8UnitTest12TestReporterE
 5567      00000000 
 5568              		.weak	_ZTSN8UnitTest20DeferredTestReporterE
 5569              		.section	.rodata._ZTSN8UnitTest20DeferredTestReporterE,"aG",@progbits,_ZTSN8UnitTest20DeferredTest
 5570              		.align 32
 5573              	_ZTSN8UnitTest20DeferredTestReporterE:
 5574 0000 4E38556E 		.string	"N8UnitTest20DeferredTestReporterE"
 5574      69745465 
 5574      73743230 
 5574      44656665 
 5574      72726564 
 5575              		.weak	__cxa_pure_virtual
 5576              		.text
 5577              	.Letext0:
 5578              		.file 16 "/usr/include/c++/11/bits/cpp_type_traits.h"
 5579              		.file 17 "/usr/include/c++/11/bits/stl_iterator_base_types.h"
 5580              		.file 18 "/usr/include/c++/11/cwchar"
 5581              		.file 19 "/usr/include/c++/11/bits/char_traits.h"
 5582              		.file 20 "/usr/include/x86_64-linux-gnu/c++/11/bits/c++config.h"
 5583              		.file 21 "/usr/include/c++/11/clocale"
 5584              		.file 22 "/usr/include/c++/11/bits/basic_string.h"
 5585              		.file 23 "/usr/include/c++/11/bits/basic_string.tcc"
 5586              		.file 24 "/usr/include/c++/11/bits/stringfwd.h"
 5587              		.file 25 "/usr/include/c++/11/bits/functexcept.h"
 5588              		.file 26 "/usr/include/c++/11/bits/stl_iterator_base_funcs.h"
 5589              		.file 27 "/usr/include/c++/11/debug/debug.h"
 5590              		.file 28 "/usr/include/c++/11/bits/predefined_ops.h"
 5591              		.file 29 "/usr/include/c++/11/ext/type_traits.h"
 5592              		.file 30 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h"
 5593              		.file 31 "<built-in>"
 5594              		.file 32 "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h"
 5595              		.file 33 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h"
 5596              		.file 34 "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h"
 5597              		.file 35 "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h"
 5598              		.file 36 "/usr/include/wchar.h"
 5599              		.file 37 "/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h"
 5600              		.file 38 "/usr/include/locale.h"
 5601              		.file 39 "TestReporter.h"
 5602              		.file 40 "TestDetails.h"
 5603              		.file 41 "DeferredTestReporter.h"
 24852              		.align 8
 24855              	DW.ref.__gxx_personality_v0:
 24856 0000 00000000 		.quad	__gxx_personality_v0
 24856      00000000 
 24857              		.ident	"GCC: (Ubuntu 11.3.0-1ubuntu1~22.04) 11.3.0"
 24858              		.section	.note.GNU-stack,"",@progbits
 24859              		.section	.note.gnu.property,"a"
 24860              		.align 8
 24861 0000 04000000 		.long	1f - 0f
 24862 0004 10000000 		.long	4f - 1f
 24863 0008 05000000 		.long	5
 24864              	0:
 24865 000c 474E5500 		.string	"GNU"
 24866              	1:
 24867              		.align 8
 24868 0010 020000C0 		.long	0xc0000002
 24869 0014 04000000 		.long	3f - 2f
 24870              	2:
 24871 0018 03000000 		.long	0x3
 24872              	3:
 24873 001c 00000000 		.align 8
 24874              	4:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 DeferredTestReporter.cpp
     /tmp/ccgj7onF.s:8      .text._ZnwmPv:0000000000000000 _ZnwmPv
     /tmp/ccgj7onF.s:33     .text._ZdlPvS_:0000000000000000 _ZdlPvS_
     /tmp/ccgj7onF.s:57     .text._ZN8UnitTest18DeferredTestResultD2Ev:0000000000000000 _ZN8UnitTest18DeferredTestResultD2Ev
     /tmp/ccgj7onF.s:24855  .data.rel.local.DW.ref.__gxx_personality_v0:0000000000000000 DW.ref.__gxx_personality_v0
     /tmp/ccgj7onF.s:570    .text._ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2Ev:0000000000000000 _ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED1Ev
     /tmp/ccgj7onF.s:57     .text._ZN8UnitTest18DeferredTestResultD2Ev:0000000000000000 _ZN8UnitTest18DeferredTestResultD1Ev
     /tmp/ccgj7onF.s:184    .text:0000000000000000 _ZN8UnitTest20DeferredTestReporter15ReportTestStartERKNS_11TestDetailsE
     /tmp/ccgj7onF.s:659    .text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE9push_backERKS1_:0000000000000000 _ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE9push_backERKS1_
     /tmp/ccgj7onF.s:293    .text._ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev:0000000000000000 _ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev
     /tmp/ccgj7onF.s:293    .text._ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev:0000000000000000 _ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev
     /tmp/ccgj7onF.s:326    .text:00000000000000be _ZN8UnitTest20DeferredTestReporter13ReportFailureERKNS_11TestDetailsEPKc
     /tmp/ccgj7onF.s:724    .text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4backEv:0000000000000000 _ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4backEv
     /tmp/ccgj7onF.s:771    .text._ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2ERKiRKS5_:0000000000000000 _ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKiRKS5_
     /tmp/ccgj7onF.s:813    .text._ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE9push_backERKS7_:0000000000000000 _ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE9push_backERKS7_
     /tmp/ccgj7onF.s:510    .text:0000000000000204 _ZN8UnitTest20DeferredTestReporter16ReportTestFinishERKNS_11TestDetailsEf
     /tmp/ccgj7onF.s:545    .text:0000000000000242 _ZN8UnitTest20DeferredTestReporter10GetResultsEv
     /tmp/ccgj7onF.s:570    .text._ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2Ev:0000000000000000 _ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2Ev
     /tmp/ccgj7onF.s:999    .text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE19_M_get_Tp_allocatorEv:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE19_M_get_Tp_allocatorEv
     /tmp/ccgj7onF.s:1022   .text._ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_EvT_S9_RSaIT0_E:0000000000000000 _ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_EvT_S9_RSaIT0_E
     /tmp/ccgj7onF.s:909    .text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2Ev:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2Ev
     /tmp/ccgj7onF.s:1054   .text._ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEES2_E9constructIS2_EEvRS3_PS2_RKT_:0000000000000000 _ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEES2_E9constructIS2_EEvRS3_PS2_RKT_
     /tmp/ccgj7onF.s:1367   .text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE3endEv:0000000000000000 _ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE3endEv
     /tmp/ccgj7onF.s:1091   .text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE17_M_realloc_insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_:0000000000000000 _ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE17_M_realloc_insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_
     /tmp/ccgj7onF.s:1409   .text._ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEmiEl:0000000000000000 _ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEmiEl
     /tmp/ccgj7onF.s:1461   .text._ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEdeEv:0000000000000000 _ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEdeEv
     /tmp/ccgj7onF.s:771    .text._ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2ERKiRKS5_:0000000000000000 _ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2ERKiRKS5_
     /tmp/ccgj7onF.s:1485   .text._ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEES8_E9constructIS8_EEvRS9_PS8_RKT_:0000000000000000 _ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEES8_E9constructIS8_EEvRS9_PS8_RKT_
     /tmp/ccgj7onF.s:1805   .text._ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE3endEv:0000000000000000 _ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE3endEv
     /tmp/ccgj7onF.s:1518   .text._ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE17_M_realloc_insertEN9__gnu_cxx17__normal_iteratorIPS7_S9_EERKS7_:0000000000000000 _ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE17_M_realloc_insertEN9__gnu_cxx17__normal_iteratorIPS7_S9_EERKS7_
     /tmp/ccgj7onF.s:878    .text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_Vector_implD2Ev:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_Vector_implD2Ev
     /tmp/ccgj7onF.s:1847   .text._ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev:0000000000000000 _ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev
     /tmp/ccgj7onF.s:878    .text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_Vector_implD2Ev:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_Vector_implD1Ev
     /tmp/ccgj7onF.s:1879   .text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE13_M_deallocateEPS7_m:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE13_M_deallocateEPS7_m
     /tmp/ccgj7onF.s:909    .text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2Ev:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED1Ev
     /tmp/ccgj7onF.s:1916   .text._ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_:0000000000000000 _ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_
     /tmp/ccgj7onF.s:2093   .text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE9constructEPS2_RKS2_:0000000000000000 _ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE9constructEPS2_RKS2_
     /tmp/ccgj7onF.s:2176   .text._ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE12_M_check_lenEmPKc:0000000000000000 _ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE12_M_check_lenEmPKc
     /tmp/ccgj7onF.s:2284   .text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE5beginEv:0000000000000000 _ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE5beginEv
     /tmp/ccgj7onF.s:2324   .text._ZN9__gnu_cxxmiIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_:0000000000000000 _ZN9__gnu_cxxmiIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_
     /tmp/ccgj7onF.s:2367   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE11_M_allocateEm:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE11_M_allocateEm
     /tmp/ccgj7onF.s:2431   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv
     /tmp/ccgj7onF.s:2407   .text._ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4baseEv:0000000000000000 _ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4baseEv
     /tmp/ccgj7onF.s:2454   .text._ZSt34__uninitialized_move_if_noexcept_aIPN8UnitTest18DeferredTestResultES2_SaIS1_EET0_T_S5_S4_RT1_:0000000000000000 _ZSt34__uninitialized_move_if_noexcept_aIPN8UnitTest18DeferredTestResultES2_SaIS1_EET0_T_S5_S4_RT1_
     /tmp/ccgj7onF.s:2517   .text._ZSt8_DestroyIPN8UnitTest18DeferredTestResultES1_EvT_S3_RSaIT0_E:0000000000000000 _ZSt8_DestroyIPN8UnitTest18DeferredTestResultES1_EvT_S3_RSaIT0_E
     /tmp/ccgj7onF.s:2549   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE13_M_deallocateEPS1_m:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE13_M_deallocateEPS1_m
     /tmp/ccgj7onF.s:2487   .text._ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEES2_E7destroyERS3_PS2_:0000000000000000 _ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEES2_E7destroyERS3_PS2_
     /tmp/ccgj7onF.s:2587   .text._ZN9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC2ERKS3_:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC1ERKS3_
     /tmp/ccgj7onF.s:2660   .text._ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructEPS8_RKS8_:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructEPS8_RKS8_
     /tmp/ccgj7onF.s:2742   .text._ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_M_check_lenEmPKc:0000000000000000 _ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_M_check_lenEmPKc
     /tmp/ccgj7onF.s:2850   .text._ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE5beginEv:0000000000000000 _ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE5beginEv
     /tmp/ccgj7onF.s:2890   .text._ZN9__gnu_cxxmiIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSG_SJ_:0000000000000000 _ZN9__gnu_cxxmiIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSG_SJ_
     /tmp/ccgj7onF.s:2936   .text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE11_M_allocateEm:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE11_M_allocateEm
     /tmp/ccgj7onF.s:2976   .text._ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEE4baseEv:0000000000000000 _ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEE4baseEv
     /tmp/ccgj7onF.s:2999   .text._ZSt34__uninitialized_move_if_noexcept_aIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES8_SaIS7_EET0_T_SB_SA_RT1_:0000000000000000 _ZSt34__uninitialized_move_if_noexcept_aIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES8_SaIS7_EET0_T_SB_SA_RT1_
     /tmp/ccgj7onF.s:3031   .text._ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEES8_E7destroyERS9_PS8_:0000000000000000 _ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEES8_E7destroyERS9_PS8_
     /tmp/ccgj7onF.s:3062   .text._ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEC2ERKS9_:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEC1ERKS9_
     /tmp/ccgj7onF.s:3095   .text._ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev
     /tmp/ccgj7onF.s:1847   .text._ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev:0000000000000000 _ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED1Ev
     /tmp/ccgj7onF.s:3119   .text._ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEES8_E10deallocateERS9_PS8_m:0000000000000000 _ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEES8_E10deallocateERS9_PS8_m
     /tmp/ccgj7onF.s:3151   .text._ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEvT_SB_:0000000000000000 _ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEvT_SB_
     /tmp/ccgj7onF.s:1948   .text._ZN8UnitTest18DeferredTestResultC2ERKS0_:0000000000000000 _ZN8UnitTest18DeferredTestResultC2ERKS0_
     /tmp/ccgj7onF.s:3193   .text._ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EEC2ERKS9_:0000000000000000 _ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EEC1ERKS9_
     /tmp/ccgj7onF.s:1948   .text._ZN8UnitTest18DeferredTestResultC2ERKS0_:0000000000000000 _ZN8UnitTest18DeferredTestResultC1ERKS0_
     /tmp/ccgj7onF.s:3316   .text._ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE8max_sizeEv:0000000000000000 _ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE8max_sizeEv
     /tmp/ccgj7onF.s:3346   .text._ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4sizeEv:0000000000000000 _ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4sizeEv
     /tmp/ccgj7onF.s:3377   .text._ZSt3maxImERKT_S2_S2_:0000000000000000 _ZSt3maxImERKT_S2_S2_
     /tmp/ccgj7onF.s:3415   .text._ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEES2_E8allocateERS3_m:0000000000000000 _ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEES2_E8allocateERS3_m
     /tmp/ccgj7onF.s:3445   .text._ZSt22__uninitialized_copy_aIPN8UnitTest18DeferredTestResultES2_S1_ET0_T_S4_S3_RSaIT1_E:0000000000000000 _ZSt22__uninitialized_copy_aIPN8UnitTest18DeferredTestResultES2_S1_ET0_T_S4_S3_RSaIT1_E
     /tmp/ccgj7onF.s:3478   .text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE7destroyEPS2_:0000000000000000 _ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE7destroyEPS2_
     /tmp/ccgj7onF.s:3506   .text._ZSt8_DestroyIPN8UnitTest18DeferredTestResultEEvT_S3_:0000000000000000 _ZSt8_DestroyIPN8UnitTest18DeferredTestResultEEvT_S3_
     /tmp/ccgj7onF.s:3536   .text._ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEES2_E10deallocateERS3_PS2_m:0000000000000000 _ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEES2_E10deallocateERS3_PS2_m
     /tmp/ccgj7onF.s:2587   .text._ZN9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC2ERKS3_:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC2ERKS3_
     /tmp/ccgj7onF.s:2620   .text._ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2ERKS6_:0000000000000000 _ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2ERKS6_
     /tmp/ccgj7onF.s:2620   .text._ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2ERKS6_:0000000000000000 _ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKS6_
     /tmp/ccgj7onF.s:3569   .text._ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE8max_sizeEv:0000000000000000 _ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE8max_sizeEv
     /tmp/ccgj7onF.s:3599   .text._ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE4sizeEv:0000000000000000 _ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE4sizeEv
     /tmp/ccgj7onF.s:3633   .text._ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEES8_E8allocateERS9_m:0000000000000000 _ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEES8_E8allocateERS9_m
     /tmp/ccgj7onF.s:3663   .text._ZSt22__uninitialized_copy_aIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES8_S7_ET0_T_SA_S9_RSaIT1_E:0000000000000000 _ZSt22__uninitialized_copy_aIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES8_S7_ET0_T_SA_S9_RSaIT1_E
     /tmp/ccgj7onF.s:3696   .text._ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7destroyEPS8_:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7destroyEPS8_
     /tmp/ccgj7onF.s:3062   .text._ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEC2ERKS9_:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEC2ERKS9_
     /tmp/ccgj7onF.s:3095   .text._ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED1Ev
     /tmp/ccgj7onF.s:3725   .text._ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateEPS8_m:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateEPS8_m
     /tmp/ccgj7onF.s:3754   .text._ZSt11__addressofISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT_RS8_:0000000000000000 _ZSt11__addressofISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT_RS8_
     /tmp/ccgj7onF.s:3778   .text._ZSt8_DestroyISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvPT_:0000000000000000 _ZSt8_DestroyISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvPT_
     /tmp/ccgj7onF.s:3193   .text._ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EEC2ERKS9_:0000000000000000 _ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EEC2ERKS9_
     /tmp/ccgj7onF.s:3829   .text._ZNKSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE19_M_get_Tp_allocatorEv:0000000000000000 _ZNKSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE19_M_get_Tp_allocatorEv
     /tmp/ccgj7onF.s:3805   .text._ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEES8_E17_S_select_on_copyERKS9_:0000000000000000 _ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEES8_E17_S_select_on_copyERKS9_
     /tmp/ccgj7onF.s:3853   .text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EEC2EmRKS8_:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EEC2EmRKS8_
     /tmp/ccgj7onF.s:3980   .text._ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE3endEv:0000000000000000 _ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE3endEv
     /tmp/ccgj7onF.s:3939   .text._ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE5beginEv:0000000000000000 _ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE5beginEv
     /tmp/ccgj7onF.s:4021   .text._ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS9_SaIS9_EEEEPS9_S9_ET0_T_SI_SH_RSaIT1_E:0000000000000000 _ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS9_SaIS9_EEEEPS9_S9_ET0_T_SI_SH_RSaIT1_E
     /tmp/ccgj7onF.s:4102   .text._ZNKSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv:0000000000000000 _ZNKSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv
     /tmp/ccgj7onF.s:4053   .text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE11_S_max_sizeERKS2_:0000000000000000 _ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE11_S_max_sizeERKS2_
     /tmp/ccgj7onF.s:4126   .text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE8allocateEmPKv:0000000000000000 _ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE8allocateEmPKv
     /tmp/ccgj7onF.s:4179   .text._ZSt18uninitialized_copyIPN8UnitTest18DeferredTestResultES2_ET0_T_S4_S3_:0000000000000000 _ZSt18uninitialized_copyIPN8UnitTest18DeferredTestResultES2_ET0_T_S4_S3_
     /tmp/ccgj7onF.s:4212   .text._ZNSt12_Destroy_auxILb0EE9__destroyIPN8UnitTest18DeferredTestResultEEEvT_S5_:0000000000000000 _ZNSt12_Destroy_auxILb0EE9__destroyIPN8UnitTest18DeferredTestResultEEEvT_S5_
     /tmp/ccgj7onF.s:4254   .text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE10deallocateEPS2_m:0000000000000000 _ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE10deallocateEPS2_m
     /tmp/ccgj7onF.s:4283   .text._ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE11_S_max_sizeERKS8_:0000000000000000 _ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE11_S_max_sizeERKS8_
     /tmp/ccgj7onF.s:4332   .text._ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateEmPKv:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateEmPKv
     /tmp/ccgj7onF.s:4388   .text._ZSt18uninitialized_copyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES8_ET0_T_SA_S9_:0000000000000000 _ZSt18uninitialized_copyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES8_ET0_T_SA_S9_
     /tmp/ccgj7onF.s:4422   .text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_Vector_implC2ERKS8_:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_Vector_implC1ERKS8_
     /tmp/ccgj7onF.s:4460   .text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE17_M_create_storageEm:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE17_M_create_storageEm
     /tmp/ccgj7onF.s:3853   .text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EEC2EmRKS8_:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EEC1EmRKS8_
     /tmp/ccgj7onF.s:4513   .text._ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEC2ERKSA_:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEC1ERKSA_
     /tmp/ccgj7onF.s:4545   .text._ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS9_SaIS9_EEEEPS9_ET0_T_SI_SH_:0000000000000000 _ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS9_SaIS9_EEEEPS9_ET0_T_SI_SH_
     /tmp/ccgj7onF.s:4578   .text._ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEES2_E8max_sizeERKS3_:0000000000000000 _ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEES2_E8max_sizeERKS3_
     /tmp/ccgj7onF.s:4604   .text._ZSt3minImERKT_S2_S2_:0000000000000000 _ZSt3minImERKT_S2_S2_
     /tmp/ccgj7onF.s:4642   .text._ZNK9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE11_M_max_sizeEv:0000000000000000 _ZNK9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE11_M_max_sizeEv
     /tmp/ccgj7onF.s:4665   .text._ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPN8UnitTest18DeferredTestResultES4_EET0_T_S6_S5_:0000000000000000 _ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPN8UnitTest18DeferredTestResultES4_EET0_T_S6_S5_
     /tmp/ccgj7onF.s:4779   .text._ZSt11__addressofIN8UnitTest18DeferredTestResultEEPT_RS2_:0000000000000000 _ZSt11__addressofIN8UnitTest18DeferredTestResultEEPT_RS2_
     /tmp/ccgj7onF.s:4802   .text._ZSt8_DestroyIN8UnitTest18DeferredTestResultEEvPT_:0000000000000000 _ZSt8_DestroyIN8UnitTest18DeferredTestResultEEvPT_
     /tmp/ccgj7onF.s:4829   .text._ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEES8_E8max_sizeERKS9_:0000000000000000 _ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEES8_E8max_sizeERKS9_
     /tmp/ccgj7onF.s:4856   .text._ZNK9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE11_M_max_sizeEv:0000000000000000 _ZNK9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE11_M_max_sizeEv
     /tmp/ccgj7onF.s:4879   .text._ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESA_EET0_T_SC_SB_:0000000000000000 _ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESA_EET0_T_SC_SB_
     /tmp/ccgj7onF.s:4422   .text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_Vector_implC2ERKS8_:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_Vector_implC2ERKS8_
     /tmp/ccgj7onF.s:4994   .text._ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2ERKS7_:0000000000000000 _ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2ERKS7_
     /tmp/ccgj7onF.s:5029   .text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE17_Vector_impl_dataC2Ev:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE17_Vector_impl_dataC2Ev
     /tmp/ccgj7onF.s:4513   .text._ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEC2ERKSA_:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEC2ERKSA_
     /tmp/ccgj7onF.s:5064   .text._ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorISB_SaISB_EEEEPSB_EET0_T_SK_SJ_:0000000000000000 _ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorISB_SaISB_EEEEPSB_EET0_T_SK_SJ_
     /tmp/ccgj7onF.s:5188   .text._ZNK9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE8max_sizeEv:0000000000000000 _ZNK9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE8max_sizeEv
     /tmp/ccgj7onF.s:5214   .text._ZSt10_ConstructIN8UnitTest18DeferredTestResultES1_EvPT_RKT0_:0000000000000000 _ZSt10_ConstructIN8UnitTest18DeferredTestResultES1_EvPT_RKT0_
     /tmp/ccgj7onF.s:5295   .text._ZNK9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeEv:0000000000000000 _ZNK9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeEv
     /tmp/ccgj7onF.s:5321   .text._ZSt10_ConstructISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_EvPT_RKT0_:0000000000000000 _ZSt10_ConstructISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_EvPT_RKT0_
     /tmp/ccgj7onF.s:5402   .text._ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2ERKS9_:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2ERKS9_
     /tmp/ccgj7onF.s:4994   .text._ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2ERKS7_:0000000000000000 _ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1ERKS7_
     /tmp/ccgj7onF.s:5029   .text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE17_Vector_impl_dataC2Ev:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE17_Vector_impl_dataC1Ev
     /tmp/ccgj7onF.s:5500   .text._ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEdeEv:0000000000000000 _ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEdeEv
     /tmp/ccgj7onF.s:5469   .text._ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEppEv:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEppEv
     /tmp/ccgj7onF.s:5427   .text._ZN9__gnu_cxxneIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEEbRKNS_17__normal_iteratorIT_T0_EESJ_:0000000000000000 _ZN9__gnu_cxxneIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEEbRKNS_17__normal_iteratorIT_T0_EESJ_
     /tmp/ccgj7onF.s:5402   .text._ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2ERKS9_:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1ERKS9_
     /tmp/ccgj7onF.s:5525   .text._ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEE4baseEv:0000000000000000 _ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEE4baseEv
     /tmp/ccgj7onF.s:5550   .data.rel.ro._ZTVN8UnitTest20DeferredTestReporterE:0000000000000000 _ZTVN8UnitTest20DeferredTestReporterE
     /tmp/ccgj7onF.s:5564   .data.rel.ro._ZTIN8UnitTest20DeferredTestReporterE:0000000000000000 _ZTIN8UnitTest20DeferredTestReporterE
     /tmp/ccgj7onF.s:5573   .rodata._ZTSN8UnitTest20DeferredTestReporterE:0000000000000000 _ZTSN8UnitTest20DeferredTestReporterE
                           .group:0000000000000000 _ZN8UnitTest18DeferredTestResultD5Ev
                           .group:0000000000000000 _ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED5Ev
                           .group:0000000000000000 _ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED5Ev
                           .group:0000000000000000 _ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC5ERKiRKS5_
                           .group:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_Vector_implD5Ev
                           .group:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED5Ev
                           .group:0000000000000000 _ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED5Ev
                           .group:0000000000000000 _ZN8UnitTest18DeferredTestResultC5ERKS0_
                           .group:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC5ERKS3_
                           .group:0000000000000000 _ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC5ERKS6_
                           .group:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEC5ERKS9_
                           .group:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED5Ev
                           .group:0000000000000000 _ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EEC5ERKS9_
                           .group:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EEC5EmRKS8_
                           .group:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_Vector_implC5ERKS8_
                           .group:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEC5ERKSA_
                           .group:0000000000000000 _ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC5ERKS7_
                           .group:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE17_Vector_impl_dataC5Ev
                           .group:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC5ERKS9_

UNDEFINED SYMBOLS
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev
_Unwind_Resume
__gxx_personality_v0
_ZN8UnitTest18DeferredTestResultC1EPKcS2_
__stack_chk_fail
_ZNSaIcEC1Ev
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_
_ZNSaIcED1Ev
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_
__cxa_begin_catch
__cxa_rethrow
__cxa_end_catch
_ZSt20__throw_length_errorPKc
_ZdlPv
_ZSt28__throw_bad_array_new_lengthv
_ZSt17__throw_bad_allocv
_Znwm
__cxa_pure_virtual
_ZTVN10__cxxabiv120__si_class_type_infoE
_ZTIN8UnitTest12TestReporterE
