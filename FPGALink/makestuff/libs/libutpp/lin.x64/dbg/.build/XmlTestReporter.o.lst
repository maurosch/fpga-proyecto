   1              		.file	"XmlTestReporter.cpp"
   2              		.text
   3              	.Ltext0:
   4              		.file 0 "/home/pong/FPGALink/makestuff/libs/libutpp" "XmlTestReporter.cpp"
   5              		.local	_ZStL8__ioinit
   6              		.comm	_ZStL8__ioinit,1,1
   8              	_ZN12_GLOBAL__N_111ReplaceCharERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcRKS5_:
   9              	.LFB1390:
  10              		.file 1 "XmlTestReporter.cpp"
   1:XmlTestReporter.cpp **** #include "XmlTestReporter.h"
   2:XmlTestReporter.cpp **** #include "Config.h"
   3:XmlTestReporter.cpp **** 
   4:XmlTestReporter.cpp **** #include <iostream>
   5:XmlTestReporter.cpp **** #include <sstream>
   6:XmlTestReporter.cpp **** #include <string>
   7:XmlTestReporter.cpp **** 
   8:XmlTestReporter.cpp **** using std::string;
   9:XmlTestReporter.cpp **** using std::ostringstream;
  10:XmlTestReporter.cpp **** using std::ostream;
  11:XmlTestReporter.cpp **** 
  12:XmlTestReporter.cpp **** namespace {
  13:XmlTestReporter.cpp **** 
  14:XmlTestReporter.cpp **** void ReplaceChar(string& str, char c, string const& replacement)
  15:XmlTestReporter.cpp **** {
  11              		.loc 1 15 1
  12              		.cfi_startproc
  13 0000 F30F1EFA 		endbr64
  14 0004 55       		pushq	%rbp
  15              		.cfi_def_cfa_offset 16
  16              		.cfi_offset 6, -16
  17 0005 4889E5   		movq	%rsp, %rbp
  18              		.cfi_def_cfa_register 6
  19 0008 4883EC30 		subq	$48, %rsp
  20 000c 48897DE8 		movq	%rdi, -24(%rbp)
  21 0010 89F0     		movl	%esi, %eax
  22 0012 488955D8 		movq	%rdx, -40(%rbp)
  23 0016 8845E4   		movb	%al, -28(%rbp)
  24              	.LBB2:
  16:XmlTestReporter.cpp ****     for (size_t pos = str.find(c); pos != string::npos; pos = str.find(c, pos + 1))
  25              		.loc 1 16 31
  26 0019 0FBE4DE4 		movsbl	-28(%rbp), %ecx
  27 001d 488B45E8 		movq	-24(%rbp), %rax
  28 0021 BA000000 		movl	$0, %edx
  28      00
  29 0026 89CE     		movl	%ecx, %esi
  30 0028 4889C7   		movq	%rax, %rdi
  31 002b E8000000 		call	_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcm@PLT
  31      00
  32 0030 488945F8 		movq	%rax, -8(%rbp)
  33              		.loc 1 16 5
  34 0034 EB3A     		jmp	.L2
  35              	.L3:
  17:XmlTestReporter.cpp ****         str.replace(pos, 1, replacement);
  36              		.loc 1 17 20 discriminator 3
  37 0036 488B55D8 		movq	-40(%rbp), %rdx
  38 003a 488B75F8 		movq	-8(%rbp), %rsi
  39 003e 488B45E8 		movq	-24(%rbp), %rax
  40 0042 4889D1   		movq	%rdx, %rcx
  41 0045 BA010000 		movl	$1, %edx
  41      00
  42 004a 4889C7   		movq	%rax, %rdi
  43 004d E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEmmRKS4_@PLT
  43      00
  16:XmlTestReporter.cpp ****     for (size_t pos = str.find(c); pos != string::npos; pos = str.find(c, pos + 1))
  44              		.loc 1 16 71 discriminator 3
  45 0052 488B45F8 		movq	-8(%rbp), %rax
  46 0056 488D5001 		leaq	1(%rax), %rdx
  47 005a 0FBE4DE4 		movsbl	-28(%rbp), %ecx
  48 005e 488B45E8 		movq	-24(%rbp), %rax
  49 0062 89CE     		movl	%ecx, %esi
  50 0064 4889C7   		movq	%rax, %rdi
  51 0067 E8000000 		call	_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcm@PLT
  51      00
  52 006c 488945F8 		movq	%rax, -8(%rbp)
  53              	.L2:
  16:XmlTestReporter.cpp ****     for (size_t pos = str.find(c); pos != string::npos; pos = str.find(c, pos + 1))
  54              		.loc 1 16 40 discriminator 1
  55 0070 48837DF8 		cmpq	$-1, -8(%rbp)
  55      FF
  56 0075 75BF     		jne	.L3
  57              	.LBE2:
  18:XmlTestReporter.cpp **** }
  58              		.loc 1 18 1
  59 0077 90       		nop
  60 0078 90       		nop
  61 0079 C9       		leave
  62              		.cfi_def_cfa 7, 8
  63 007a C3       		ret
  64              		.cfi_endproc
  65              	.LFE1390:
  67              		.section	.rodata
  68              	.LC0:
  69 0000 26616D70 		.string	"&amp;"
  69      3B00
  70              	.LC1:
  71 0006 266C743B 		.string	"&lt;"
  71      00
  72              	.LC2:
  73 000b 2667743B 		.string	"&gt;"
  73      00
  74              	.LC3:
  75 0010 2661706F 		.string	"&apos;"
  75      733B00
  76              	.LC4:
  77 0017 2671756F 		.string	"&quot;"
  77      743B00
  78              		.text
  80              	_ZN12_GLOBAL__N_19XmlEscapeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
  81              	.LFB1391:
  19:XmlTestReporter.cpp **** 
  20:XmlTestReporter.cpp **** string XmlEscape(string const& value)
  21:XmlTestReporter.cpp **** {
  82              		.loc 1 21 1
  83              		.cfi_startproc
  84              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
  85              		.cfi_lsda 0x1b,.LLSDA1391
  86 007b F30F1EFA 		endbr64
  87 007f 55       		pushq	%rbp
  88              		.cfi_def_cfa_offset 16
  89              		.cfi_offset 6, -16
  90 0080 4889E5   		movq	%rsp, %rbp
  91              		.cfi_def_cfa_register 6
  92 0083 4154     		pushq	%r12
  93 0085 53       		pushq	%rbx
  94 0086 4883EC50 		subq	$80, %rsp
  95              		.cfi_offset 12, -24
  96              		.cfi_offset 3, -32
  97 008a 48897DA8 		movq	%rdi, -88(%rbp)
  98 008e 488975A0 		movq	%rsi, -96(%rbp)
  99              		.loc 1 21 1
 100 0092 64488B04 		movq	%fs:40, %rax
 100      25280000 
 100      00
 101 009b 488945E8 		movq	%rax, -24(%rbp)
 102 009f 31C0     		xorl	%eax, %eax
  20:XmlTestReporter.cpp **** {
 103              		.loc 1 20 8
 104 00a1 41BC0000 		movl	$0, %r12d
 104      0000
  22:XmlTestReporter.cpp ****     string escaped = value;
 105              		.loc 1 22 22
 106 00a7 488B55A0 		movq	-96(%rbp), %rdx
 107 00ab 488B45A8 		movq	-88(%rbp), %rax
 108 00af 4889D6   		movq	%rdx, %rsi
 109 00b2 4889C7   		movq	%rax, %rdi
 110              	.LEHB0:
 111 00b5 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_@PLT
 111      00
 112              	.LEHE0:
  23:XmlTestReporter.cpp **** 
  24:XmlTestReporter.cpp ****     ReplaceChar(escaped, '&', "&amp;");
 113              		.loc 1 24 16
 114 00ba 488D45BF 		leaq	-65(%rbp), %rax
 115 00be 4889C7   		movq	%rax, %rdi
 116 00c1 E8000000 		call	_ZNSaIcEC1Ev@PLT
 116      00
 117 00c6 488D55BF 		leaq	-65(%rbp), %rdx
 118 00ca 488D45C0 		leaq	-64(%rbp), %rax
 119 00ce 488D0D00 		leaq	.LC0(%rip), %rcx
 119      000000
 120 00d5 4889CE   		movq	%rcx, %rsi
 121 00d8 4889C7   		movq	%rax, %rdi
 122              	.LEHB1:
 123 00db E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_@PLT
 123      00
 124              	.LEHE1:
 125              		.loc 1 24 16 is_stmt 0 discriminator 2
 126 00e0 488D55C0 		leaq	-64(%rbp), %rdx
 127 00e4 488B45A8 		movq	-88(%rbp), %rax
 128 00e8 BE260000 		movl	$38, %esi
 128      00
 129 00ed 4889C7   		movq	%rax, %rdi
 130              	.LEHB2:
 131 00f0 E80BFFFF 		call	_ZN12_GLOBAL__N_111ReplaceCharERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcRKS5_
 131      FF
 132              	.LEHE2:
 133              		.loc 1 24 16 discriminator 4
 134 00f5 488D45C0 		leaq	-64(%rbp), %rax
 135 00f9 4889C7   		movq	%rax, %rdi
 136              	.LEHB3:
 137 00fc E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 137      00
 138              	.LEHE3:
 139              		.loc 1 24 16 discriminator 6
 140 0101 488D45BF 		leaq	-65(%rbp), %rax
 141 0105 4889C7   		movq	%rax, %rdi
 142 0108 E8000000 		call	_ZNSaIcED1Ev@PLT
 142      00
  25:XmlTestReporter.cpp ****     ReplaceChar(escaped, '<', "&lt;");
 143              		.loc 1 25 16 is_stmt 1 discriminator 6
 144 010d 488D45BF 		leaq	-65(%rbp), %rax
 145 0111 4889C7   		movq	%rax, %rdi
 146 0114 E8000000 		call	_ZNSaIcEC1Ev@PLT
 146      00
 147 0119 488D55BF 		leaq	-65(%rbp), %rdx
 148 011d 488D45C0 		leaq	-64(%rbp), %rax
 149 0121 488D0D00 		leaq	.LC1(%rip), %rcx
 149      000000
 150 0128 4889CE   		movq	%rcx, %rsi
 151 012b 4889C7   		movq	%rax, %rdi
 152              	.LEHB4:
 153 012e E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_@PLT
 153      00
 154              	.LEHE4:
 155              		.loc 1 25 16 is_stmt 0 discriminator 2
 156 0133 488D55C0 		leaq	-64(%rbp), %rdx
 157 0137 488B45A8 		movq	-88(%rbp), %rax
 158 013b BE3C0000 		movl	$60, %esi
 158      00
 159 0140 4889C7   		movq	%rax, %rdi
 160              	.LEHB5:
 161 0143 E8B8FEFF 		call	_ZN12_GLOBAL__N_111ReplaceCharERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcRKS5_
 161      FF
 162              	.LEHE5:
 163              		.loc 1 25 16 discriminator 4
 164 0148 488D45C0 		leaq	-64(%rbp), %rax
 165 014c 4889C7   		movq	%rax, %rdi
 166              	.LEHB6:
 167 014f E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 167      00
 168              	.LEHE6:
 169              		.loc 1 25 16 discriminator 6
 170 0154 488D45BF 		leaq	-65(%rbp), %rax
 171 0158 4889C7   		movq	%rax, %rdi
 172 015b E8000000 		call	_ZNSaIcED1Ev@PLT
 172      00
  26:XmlTestReporter.cpp ****     ReplaceChar(escaped, '>', "&gt;");
 173              		.loc 1 26 16 is_stmt 1 discriminator 6
 174 0160 488D45BF 		leaq	-65(%rbp), %rax
 175 0164 4889C7   		movq	%rax, %rdi
 176 0167 E8000000 		call	_ZNSaIcEC1Ev@PLT
 176      00
 177 016c 488D55BF 		leaq	-65(%rbp), %rdx
 178 0170 488D45C0 		leaq	-64(%rbp), %rax
 179 0174 488D0D00 		leaq	.LC2(%rip), %rcx
 179      000000
 180 017b 4889CE   		movq	%rcx, %rsi
 181 017e 4889C7   		movq	%rax, %rdi
 182              	.LEHB7:
 183 0181 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_@PLT
 183      00
 184              	.LEHE7:
 185              		.loc 1 26 16 is_stmt 0 discriminator 2
 186 0186 488D55C0 		leaq	-64(%rbp), %rdx
 187 018a 488B45A8 		movq	-88(%rbp), %rax
 188 018e BE3E0000 		movl	$62, %esi
 188      00
 189 0193 4889C7   		movq	%rax, %rdi
 190              	.LEHB8:
 191 0196 E865FEFF 		call	_ZN12_GLOBAL__N_111ReplaceCharERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcRKS5_
 191      FF
 192              	.LEHE8:
 193              		.loc 1 26 16 discriminator 4
 194 019b 488D45C0 		leaq	-64(%rbp), %rax
 195 019f 4889C7   		movq	%rax, %rdi
 196              	.LEHB9:
 197 01a2 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 197      00
 198              	.LEHE9:
 199              		.loc 1 26 16 discriminator 6
 200 01a7 488D45BF 		leaq	-65(%rbp), %rax
 201 01ab 4889C7   		movq	%rax, %rdi
 202 01ae E8000000 		call	_ZNSaIcED1Ev@PLT
 202      00
  27:XmlTestReporter.cpp ****     ReplaceChar(escaped, '\'', "&apos;");
 203              		.loc 1 27 16 is_stmt 1 discriminator 6
 204 01b3 488D45BF 		leaq	-65(%rbp), %rax
 205 01b7 4889C7   		movq	%rax, %rdi
 206 01ba E8000000 		call	_ZNSaIcEC1Ev@PLT
 206      00
 207 01bf 488D55BF 		leaq	-65(%rbp), %rdx
 208 01c3 488D45C0 		leaq	-64(%rbp), %rax
 209 01c7 488D0D00 		leaq	.LC3(%rip), %rcx
 209      000000
 210 01ce 4889CE   		movq	%rcx, %rsi
 211 01d1 4889C7   		movq	%rax, %rdi
 212              	.LEHB10:
 213 01d4 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_@PLT
 213      00
 214              	.LEHE10:
 215              		.loc 1 27 16 is_stmt 0 discriminator 2
 216 01d9 488D55C0 		leaq	-64(%rbp), %rdx
 217 01dd 488B45A8 		movq	-88(%rbp), %rax
 218 01e1 BE270000 		movl	$39, %esi
 218      00
 219 01e6 4889C7   		movq	%rax, %rdi
 220              	.LEHB11:
 221 01e9 E812FEFF 		call	_ZN12_GLOBAL__N_111ReplaceCharERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcRKS5_
 221      FF
 222              	.LEHE11:
 223              		.loc 1 27 16 discriminator 4
 224 01ee 488D45C0 		leaq	-64(%rbp), %rax
 225 01f2 4889C7   		movq	%rax, %rdi
 226              	.LEHB12:
 227 01f5 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 227      00
 228              	.LEHE12:
 229              		.loc 1 27 16 discriminator 6
 230 01fa 488D45BF 		leaq	-65(%rbp), %rax
 231 01fe 4889C7   		movq	%rax, %rdi
 232 0201 E8000000 		call	_ZNSaIcED1Ev@PLT
 232      00
  28:XmlTestReporter.cpp ****     ReplaceChar(escaped, '\"', "&quot;");
 233              		.loc 1 28 16 is_stmt 1 discriminator 6
 234 0206 488D45BF 		leaq	-65(%rbp), %rax
 235 020a 4889C7   		movq	%rax, %rdi
 236 020d E8000000 		call	_ZNSaIcEC1Ev@PLT
 236      00
 237 0212 488D55BF 		leaq	-65(%rbp), %rdx
 238 0216 488D45C0 		leaq	-64(%rbp), %rax
 239 021a 488D0D00 		leaq	.LC4(%rip), %rcx
 239      000000
 240 0221 4889CE   		movq	%rcx, %rsi
 241 0224 4889C7   		movq	%rax, %rdi
 242              	.LEHB13:
 243 0227 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_@PLT
 243      00
 244              	.LEHE13:
 245              		.loc 1 28 16 is_stmt 0 discriminator 2
 246 022c 488D55C0 		leaq	-64(%rbp), %rdx
 247 0230 488B45A8 		movq	-88(%rbp), %rax
 248 0234 BE220000 		movl	$34, %esi
 248      00
 249 0239 4889C7   		movq	%rax, %rdi
 250              	.LEHB14:
 251 023c E8BFFDFF 		call	_ZN12_GLOBAL__N_111ReplaceCharERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcRKS5_
 251      FF
 252              	.LEHE14:
 253              		.loc 1 28 16 discriminator 4
 254 0241 488D45C0 		leaq	-64(%rbp), %rax
 255 0245 4889C7   		movq	%rax, %rdi
 256              	.LEHB15:
 257 0248 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 257      00
 258              	.LEHE15:
 259              		.loc 1 28 16 discriminator 6
 260 024d 488D45BF 		leaq	-65(%rbp), %rax
 261 0251 4889C7   		movq	%rax, %rdi
 262 0254 E8000000 		call	_ZNSaIcED1Ev@PLT
 262      00
  29:XmlTestReporter.cpp ****  
  30:XmlTestReporter.cpp ****     return escaped;
 263              		.loc 1 30 12 is_stmt 1 discriminator 6
 264 0259 90       		nop
  31:XmlTestReporter.cpp **** }
 265              		.loc 1 31 1 discriminator 6
 266 025a 488B45E8 		movq	-24(%rbp), %rax
 267 025e 64482B04 		subq	%fs:40, %rax
 267      25280000 
 267      00
 268 0267 0F840E01 		je	.L19
 268      0000
 269 026d E9040100 		jmp	.L31
 269      00
 270              	.L22:
 271 0272 F30F1EFA 		endbr64
  24:XmlTestReporter.cpp ****     ReplaceChar(escaped, '<', "&lt;");
 272              		.loc 1 24 16
 273 0276 4889C3   		movq	%rax, %rbx
 274 0279 488D45C0 		leaq	-64(%rbp), %rax
 275 027d 4889C7   		movq	%rax, %rdi
 276 0280 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 276      00
 277 0285 EB07     		jmp	.L7
 278              	.L21:
 279 0287 F30F1EFA 		endbr64
 280 028b 4889C3   		movq	%rax, %rbx
 281              	.L7:
  24:XmlTestReporter.cpp ****     ReplaceChar(escaped, '<', "&lt;");
 282              		.loc 1 24 16 is_stmt 0 discriminator 1
 283 028e 488D45BF 		leaq	-65(%rbp), %rax
 284 0292 4889C7   		movq	%rax, %rdi
 285 0295 E8000000 		call	_ZNSaIcED1Ev@PLT
 285      00
 286 029a E9A60000 		jmp	.L8
 286      00
 287              	.L24:
 288 029f F30F1EFA 		endbr64
  25:XmlTestReporter.cpp ****     ReplaceChar(escaped, '>', "&gt;");
 289              		.loc 1 25 16 is_stmt 1
 290 02a3 4889C3   		movq	%rax, %rbx
 291 02a6 488D45C0 		leaq	-64(%rbp), %rax
 292 02aa 4889C7   		movq	%rax, %rdi
 293 02ad E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 293      00
 294 02b2 EB07     		jmp	.L10
 295              	.L23:
 296 02b4 F30F1EFA 		endbr64
 297 02b8 4889C3   		movq	%rax, %rbx
 298              	.L10:
  25:XmlTestReporter.cpp ****     ReplaceChar(escaped, '>', "&gt;");
 299              		.loc 1 25 16 is_stmt 0 discriminator 1
 300 02bb 488D45BF 		leaq	-65(%rbp), %rax
 301 02bf 4889C7   		movq	%rax, %rdi
 302 02c2 E8000000 		call	_ZNSaIcED1Ev@PLT
 302      00
 303 02c7 EB7C     		jmp	.L8
 304              	.L26:
 305 02c9 F30F1EFA 		endbr64
  26:XmlTestReporter.cpp ****     ReplaceChar(escaped, '\'', "&apos;");
 306              		.loc 1 26 16 is_stmt 1
 307 02cd 4889C3   		movq	%rax, %rbx
 308 02d0 488D45C0 		leaq	-64(%rbp), %rax
 309 02d4 4889C7   		movq	%rax, %rdi
 310 02d7 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 310      00
 311 02dc EB07     		jmp	.L12
 312              	.L25:
 313 02de F30F1EFA 		endbr64
 314 02e2 4889C3   		movq	%rax, %rbx
 315              	.L12:
  26:XmlTestReporter.cpp ****     ReplaceChar(escaped, '\'', "&apos;");
 316              		.loc 1 26 16 is_stmt 0 discriminator 1
 317 02e5 488D45BF 		leaq	-65(%rbp), %rax
 318 02e9 4889C7   		movq	%rax, %rdi
 319 02ec E8000000 		call	_ZNSaIcED1Ev@PLT
 319      00
 320 02f1 EB52     		jmp	.L8
 321              	.L28:
 322 02f3 F30F1EFA 		endbr64
  27:XmlTestReporter.cpp ****     ReplaceChar(escaped, '\"', "&quot;");
 323              		.loc 1 27 16 is_stmt 1
 324 02f7 4889C3   		movq	%rax, %rbx
 325 02fa 488D45C0 		leaq	-64(%rbp), %rax
 326 02fe 4889C7   		movq	%rax, %rdi
 327 0301 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 327      00
 328 0306 EB07     		jmp	.L14
 329              	.L27:
 330 0308 F30F1EFA 		endbr64
 331 030c 4889C3   		movq	%rax, %rbx
 332              	.L14:
  27:XmlTestReporter.cpp ****     ReplaceChar(escaped, '\"', "&quot;");
 333              		.loc 1 27 16 is_stmt 0 discriminator 1
 334 030f 488D45BF 		leaq	-65(%rbp), %rax
 335 0313 4889C7   		movq	%rax, %rdi
 336 0316 E8000000 		call	_ZNSaIcED1Ev@PLT
 336      00
 337 031b EB28     		jmp	.L8
 338              	.L30:
 339 031d F30F1EFA 		endbr64
  28:XmlTestReporter.cpp ****  
 340              		.loc 1 28 16 is_stmt 1
 341 0321 4889C3   		movq	%rax, %rbx
 342 0324 488D45C0 		leaq	-64(%rbp), %rax
 343 0328 4889C7   		movq	%rax, %rdi
 344 032b E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 344      00
 345 0330 EB07     		jmp	.L16
 346              	.L29:
 347 0332 F30F1EFA 		endbr64
 348 0336 4889C3   		movq	%rax, %rbx
 349              	.L16:
  28:XmlTestReporter.cpp ****  
 350              		.loc 1 28 16 is_stmt 0 discriminator 1
 351 0339 488D45BF 		leaq	-65(%rbp), %rax
 352 033d 4889C7   		movq	%rax, %rdi
 353 0340 E8000000 		call	_ZNSaIcED1Ev@PLT
 353      00
 354              	.L8:
 355              		.loc 1 31 1 is_stmt 1
 356 0345 488B45A8 		movq	-88(%rbp), %rax
 357 0349 4889C7   		movq	%rax, %rdi
 358 034c E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 358      00
 359 0351 EB07     		jmp	.L17
 360              	.L20:
 361 0353 F30F1EFA 		endbr64
 362 0357 4889C3   		movq	%rax, %rbx
 363              	.L17:
 364 035a 4584E4   		testb	%r12b, %r12b
 365 035d 740C     		je	.L18
 366              		.loc 1 31 1 is_stmt 0 discriminator 1
 367 035f 488B45A8 		movq	-88(%rbp), %rax
 368 0363 4889C7   		movq	%rax, %rdi
 369 0366 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 369      00
 370              	.L18:
 371 036b 4889D8   		movq	%rbx, %rax
 372 036e 4889C7   		movq	%rax, %rdi
 373              	.LEHB16:
 374 0371 E8000000 		call	_Unwind_Resume@PLT
 374      00
 375              	.LEHE16:
 376              	.L31:
 377              		.loc 1 31 1
 378 0376 E8000000 		call	__stack_chk_fail@PLT
 378      00
 379              	.L19:
 380 037b 488B45A8 		movq	-88(%rbp), %rax
 381 037f 4883C450 		addq	$80, %rsp
 382 0383 5B       		popq	%rbx
 383 0384 415C     		popq	%r12
 384 0386 5D       		popq	%rbp
 385              		.cfi_def_cfa 7, 8
 386 0387 C3       		ret
 387              		.cfi_endproc
 388              	.LFE1391:
 389              		.globl	__gxx_personality_v0
 390              		.section	.gcc_except_table,"a",@progbits
 391              	.LLSDA1391:
 392 0000 FF       		.byte	0xff
 393 0001 FF       		.byte	0xff
 394 0002 01       		.byte	0x1
 395 0003 62       		.uleb128 .LLSDACSE1391-.LLSDACSB1391
 396              	.LLSDACSB1391:
 397 0004 3A       		.uleb128 .LEHB0-.LFB1391
 398 0005 05       		.uleb128 .LEHE0-.LEHB0
 399 0006 D805     		.uleb128 .L20-.LFB1391
 400 0008 00       		.uleb128 0
 401 0009 60       		.uleb128 .LEHB1-.LFB1391
 402 000a 05       		.uleb128 .LEHE1-.LEHB1
 403 000b 8C04     		.uleb128 .L21-.LFB1391
 404 000d 00       		.uleb128 0
 405 000e 75       		.uleb128 .LEHB2-.LFB1391
 406 000f 05       		.uleb128 .LEHE2-.LEHB2
 407 0010 F703     		.uleb128 .L22-.LFB1391
 408 0012 00       		.uleb128 0
 409 0013 8101     		.uleb128 .LEHB3-.LFB1391
 410 0015 05       		.uleb128 .LEHE3-.LEHB3
 411 0016 8C04     		.uleb128 .L21-.LFB1391
 412 0018 00       		.uleb128 0
 413 0019 B301     		.uleb128 .LEHB4-.LFB1391
 414 001b 05       		.uleb128 .LEHE4-.LEHB4
 415 001c B904     		.uleb128 .L23-.LFB1391
 416 001e 00       		.uleb128 0
 417 001f C801     		.uleb128 .LEHB5-.LFB1391
 418 0021 05       		.uleb128 .LEHE5-.LEHB5
 419 0022 A404     		.uleb128 .L24-.LFB1391
 420 0024 00       		.uleb128 0
 421 0025 D401     		.uleb128 .LEHB6-.LFB1391
 422 0027 05       		.uleb128 .LEHE6-.LEHB6
 423 0028 B904     		.uleb128 .L23-.LFB1391
 424 002a 00       		.uleb128 0
 425 002b 8602     		.uleb128 .LEHB7-.LFB1391
 426 002d 05       		.uleb128 .LEHE7-.LEHB7
 427 002e E304     		.uleb128 .L25-.LFB1391
 428 0030 00       		.uleb128 0
 429 0031 9B02     		.uleb128 .LEHB8-.LFB1391
 430 0033 05       		.uleb128 .LEHE8-.LEHB8
 431 0034 CE04     		.uleb128 .L26-.LFB1391
 432 0036 00       		.uleb128 0
 433 0037 A702     		.uleb128 .LEHB9-.LFB1391
 434 0039 05       		.uleb128 .LEHE9-.LEHB9
 435 003a E304     		.uleb128 .L25-.LFB1391
 436 003c 00       		.uleb128 0
 437 003d D902     		.uleb128 .LEHB10-.LFB1391
 438 003f 05       		.uleb128 .LEHE10-.LEHB10
 439 0040 8D05     		.uleb128 .L27-.LFB1391
 440 0042 00       		.uleb128 0
 441 0043 EE02     		.uleb128 .LEHB11-.LFB1391
 442 0045 05       		.uleb128 .LEHE11-.LEHB11
 443 0046 F804     		.uleb128 .L28-.LFB1391
 444 0048 00       		.uleb128 0
 445 0049 FA02     		.uleb128 .LEHB12-.LFB1391
 446 004b 05       		.uleb128 .LEHE12-.LEHB12
 447 004c 8D05     		.uleb128 .L27-.LFB1391
 448 004e 00       		.uleb128 0
 449 004f AC03     		.uleb128 .LEHB13-.LFB1391
 450 0051 05       		.uleb128 .LEHE13-.LEHB13
 451 0052 B705     		.uleb128 .L29-.LFB1391
 452 0054 00       		.uleb128 0
 453 0055 C103     		.uleb128 .LEHB14-.LFB1391
 454 0057 05       		.uleb128 .LEHE14-.LEHB14
 455 0058 A205     		.uleb128 .L30-.LFB1391
 456 005a 00       		.uleb128 0
 457 005b CD03     		.uleb128 .LEHB15-.LFB1391
 458 005d 05       		.uleb128 .LEHE15-.LEHB15
 459 005e B705     		.uleb128 .L29-.LFB1391
 460 0060 00       		.uleb128 0
 461 0061 F605     		.uleb128 .LEHB16-.LFB1391
 462 0063 05       		.uleb128 .LEHE16-.LEHB16
 463 0064 00       		.uleb128 0
 464 0065 00       		.uleb128 0
 465              	.LLSDACSE1391:
 466              		.text
 468              		.section	.rodata
 469              	.LC5:
 470 001e 2800     		.string	"("
 471              	.LC6:
 472 0020 29203A20 		.string	") : "
 472      00
 473              		.text
 475              	_ZN12_GLOBAL__N_119BuildFailureMessageERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiS7_:
 476              	.LFB1392:
  32:XmlTestReporter.cpp **** 
  33:XmlTestReporter.cpp **** string BuildFailureMessage(string const& file, int line, string const& message)
  34:XmlTestReporter.cpp **** {
 477              		.loc 1 34 1 is_stmt 1
 478              		.cfi_startproc
 479              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 480              		.cfi_lsda 0x1b,.LLSDA1392
 481 0388 F30F1EFA 		endbr64
 482 038c 55       		pushq	%rbp
 483              		.cfi_def_cfa_offset 16
 484              		.cfi_offset 6, -16
 485 038d 4889E5   		movq	%rsp, %rbp
 486              		.cfi_def_cfa_register 6
 487 0390 4154     		pushq	%r12
 488 0392 53       		pushq	%rbx
 489 0393 4881ECA0 		subq	$416, %rsp
 489      010000
 490              		.cfi_offset 12, -24
 491              		.cfi_offset 3, -32
 492 039a 4889BD68 		movq	%rdi, -408(%rbp)
 492      FEFFFF
 493 03a1 4889B560 		movq	%rsi, -416(%rbp)
 493      FEFFFF
 494 03a8 89955CFE 		movl	%edx, -420(%rbp)
 494      FFFF
 495 03ae 48898D50 		movq	%rcx, -432(%rbp)
 495      FEFFFF
 496              		.loc 1 34 1
 497 03b5 64488B04 		movq	%fs:40, %rax
 497      25280000 
 497      00
 498 03be 488945E8 		movq	%rax, -24(%rbp)
 499 03c2 31C0     		xorl	%eax, %eax
  33:XmlTestReporter.cpp **** {
 500              		.loc 1 33 8
 501 03c4 41BC0000 		movl	$0, %r12d
 501      0000
  35:XmlTestReporter.cpp ****     ostringstream failureMessage;
 502              		.loc 1 35 19
 503 03ca 488D8570 		leaq	-400(%rbp), %rax
 503      FEFFFF
 504 03d1 4889C7   		movq	%rax, %rdi
 505              	.LEHB17:
 506 03d4 E8000000 		call	_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEC1Ev@PLT
 506      00
 507              	.LEHE17:
  36:XmlTestReporter.cpp ****     failureMessage << file << "(" << line << ") : " << message;
 508              		.loc 1 36 31
 509 03d9 488B9560 		movq	-416(%rbp), %rdx
 509      FEFFFF
 510 03e0 488D8570 		leaq	-400(%rbp), %rax
 510      FEFFFF
 511 03e7 4889D6   		movq	%rdx, %rsi
 512 03ea 4889C7   		movq	%rax, %rdi
 513              	.LEHB18:
 514 03ed E8000000 		call	_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKNSt7__cxx1112basic_stringIS4_S5
 514      00
 515 03f2 4889C2   		movq	%rax, %rdx
 516 03f5 488D0500 		leaq	.LC5(%rip), %rax
 516      000000
 517 03fc 4889C6   		movq	%rax, %rsi
 518 03ff 4889D7   		movq	%rdx, %rdi
 519 0402 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 519      00
 520              		.loc 1 36 31 is_stmt 0 discriminator 1
 521 0407 4889C2   		movq	%rax, %rdx
 522              		.loc 1 36 56 is_stmt 1 discriminator 1
 523 040a 8B855CFE 		movl	-420(%rbp), %eax
 523      FFFF
 524 0410 89C6     		movl	%eax, %esi
 525 0412 4889D7   		movq	%rdx, %rdi
 526 0415 E8000000 		call	_ZNSolsEi@PLT
 526      00
 527              		.loc 1 36 56 is_stmt 0 discriminator 2
 528 041a 4889C2   		movq	%rax, %rdx
 529 041d 488D0500 		leaq	.LC6(%rip), %rax
 529      000000
 530 0424 4889C6   		movq	%rax, %rsi
 531 0427 4889D7   		movq	%rdx, %rdi
 532 042a E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 532      00
 533              		.loc 1 36 56 discriminator 3
 534 042f 4889C2   		movq	%rax, %rdx
 535 0432 488B8550 		movq	-432(%rbp), %rax
 535      FEFFFF
 536 0439 4889C6   		movq	%rax, %rsi
 537 043c 4889D7   		movq	%rdx, %rdi
 538 043f E8000000 		call	_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKNSt7__cxx1112basic_stringIS4_S5
 538      00
  37:XmlTestReporter.cpp ****     return failureMessage.str();
 539              		.loc 1 37 31 is_stmt 1
 540 0444 488B8568 		movq	-408(%rbp), %rax
 540      FEFFFF
 541 044b 488D9570 		leaq	-400(%rbp), %rdx
 541      FEFFFF
 542 0452 4889D6   		movq	%rdx, %rsi
 543 0455 4889C7   		movq	%rax, %rdi
 544 0458 E8000000 		call	_ZNKSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEE3strEv@PLT
 544      00
 545              	.LEHE18:
 546              		.loc 1 37 31 is_stmt 0 discriminator 1
 547 045d 41BC0100 		movl	$1, %r12d
 547      0000
  38:XmlTestReporter.cpp **** }
 548              		.loc 1 38 1 is_stmt 1 discriminator 1
 549 0463 488D8570 		leaq	-400(%rbp), %rax
 549      FEFFFF
 550 046a 4889C7   		movq	%rax, %rdi
 551              	.LEHB19:
 552 046d E8000000 		call	_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev@PLT
 552      00
 553              	.LEHE19:
  37:XmlTestReporter.cpp ****     return failureMessage.str();
 554              		.loc 1 37 31
 555 0472 EB3E     		jmp	.L40
 556              	.L39:
 557 0474 F30F1EFA 		endbr64
 558              		.loc 1 38 1
 559 0478 4889C3   		movq	%rax, %rbx
 560 047b 488D8570 		leaq	-400(%rbp), %rax
 560      FEFFFF
 561 0482 4889C7   		movq	%rax, %rdi
 562 0485 E8000000 		call	_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev@PLT
 562      00
 563 048a EB07     		jmp	.L35
 564              	.L38:
 565 048c F30F1EFA 		endbr64
 566 0490 4889C3   		movq	%rax, %rbx
 567              	.L35:
 568              		.loc 1 38 1 is_stmt 0 discriminator 1
 569 0493 4584E4   		testb	%r12b, %r12b
 570 0496 740F     		je	.L36
 571              		.loc 1 38 1 discriminator 2
 572 0498 488B8568 		movq	-408(%rbp), %rax
 572      FEFFFF
 573 049f 4889C7   		movq	%rax, %rdi
 574 04a2 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 574      00
 575              	.L36:
 576 04a7 4889D8   		movq	%rbx, %rax
 577 04aa 4889C7   		movq	%rax, %rdi
 578              	.LEHB20:
 579 04ad E8000000 		call	_Unwind_Resume@PLT
 579      00
 580              	.LEHE20:
 581              	.L40:
 582              		.loc 1 38 1
 583 04b2 488B45E8 		movq	-24(%rbp), %rax
 584 04b6 64482B04 		subq	%fs:40, %rax
 584      25280000 
 584      00
 585 04bf 7405     		je	.L37
 586 04c1 E8000000 		call	__stack_chk_fail@PLT
 586      00
 587              	.L37:
 588 04c6 488B8568 		movq	-408(%rbp), %rax
 588      FEFFFF
 589 04cd 4881C4A0 		addq	$416, %rsp
 589      010000
 590 04d4 5B       		popq	%rbx
 591 04d5 415C     		popq	%r12
 592 04d7 5D       		popq	%rbp
 593              		.cfi_def_cfa 7, 8
 594 04d8 C3       		ret
 595              		.cfi_endproc
 596              	.LFE1392:
 597              		.section	.gcc_except_table
 598              	.LLSDA1392:
 599 0066 FF       		.byte	0xff
 600 0067 FF       		.byte	0xff
 601 0068 01       		.byte	0x1
 602 0069 15       		.uleb128 .LLSDACSE1392-.LLSDACSB1392
 603              	.LLSDACSB1392:
 604 006a 4C       		.uleb128 .LEHB17-.LFB1392
 605 006b 05       		.uleb128 .LEHE17-.LEHB17
 606 006c 8402     		.uleb128 .L38-.LFB1392
 607 006e 00       		.uleb128 0
 608 006f 65       		.uleb128 .LEHB18-.LFB1392
 609 0070 70       		.uleb128 .LEHE18-.LEHB18
 610 0071 EC01     		.uleb128 .L39-.LFB1392
 611 0073 00       		.uleb128 0
 612 0074 E501     		.uleb128 .LEHB19-.LFB1392
 613 0076 05       		.uleb128 .LEHE19-.LEHB19
 614 0077 8402     		.uleb128 .L38-.LFB1392
 615 0079 00       		.uleb128 0
 616 007a A502     		.uleb128 .LEHB20-.LFB1392
 617 007c 05       		.uleb128 .LEHE20-.LEHB20
 618 007d 00       		.uleb128 0
 619 007e 00       		.uleb128 0
 620              	.LLSDACSE1392:
 621              		.text
 623              		.section	.text._ZN8UnitTest12TestReporterC2Ev,"axG",@progbits,_ZN8UnitTest12TestReporterC5Ev,comda
 624              		.align 2
 625              		.weak	_ZN8UnitTest12TestReporterC2Ev
 627              	_ZN8UnitTest12TestReporterC2Ev:
 628              	.LFB1396:
 629              		.file 2 "TestReporter.h"
   1:TestReporter.h **** #ifndef UNITTEST_TESTREPORTER_H
   2:TestReporter.h **** #define UNITTEST_TESTREPORTER_H
   3:TestReporter.h **** 
   4:TestReporter.h **** namespace UnitTest {
   5:TestReporter.h **** 
   6:TestReporter.h **** class TestDetails;
   7:TestReporter.h **** 
   8:TestReporter.h **** class TestReporter
 630              		.loc 2 8 7 is_stmt 1
 631              		.cfi_startproc
 632 0000 F30F1EFA 		endbr64
 633 0004 55       		pushq	%rbp
 634              		.cfi_def_cfa_offset 16
 635              		.cfi_offset 6, -16
 636 0005 4889E5   		movq	%rsp, %rbp
 637              		.cfi_def_cfa_register 6
 638 0008 48897DF8 		movq	%rdi, -8(%rbp)
 639              	.LBB3:
 640              		.loc 2 8 7
 641 000c 488B0500 		movq	_ZTVN8UnitTest12TestReporterE@GOTPCREL(%rip), %rax
 641      000000
 642 0013 488D5010 		leaq	16(%rax), %rdx
 643 0017 488B45F8 		movq	-8(%rbp), %rax
 644 001b 488910   		movq	%rdx, (%rax)
 645              	.LBE3:
 646 001e 90       		nop
 647 001f 5D       		popq	%rbp
 648              		.cfi_def_cfa 7, 8
 649 0020 C3       		ret
 650              		.cfi_endproc
 651              	.LFE1396:
 653              		.weak	_ZN8UnitTest12TestReporterC1Ev
 654              		.set	_ZN8UnitTest12TestReporterC1Ev,_ZN8UnitTest12TestReporterC2Ev
 655              		.section	.text._ZN8UnitTest20DeferredTestReporterC2Ev,"axG",@progbits,_ZN8UnitTest20DeferredTestRe
 656              		.align 2
 657              		.weak	_ZN8UnitTest20DeferredTestReporterC2Ev
 659              	_ZN8UnitTest20DeferredTestReporterC2Ev:
 660              	.LFB1398:
 661              		.file 3 "DeferredTestReporter.h"
   1:DeferredTestReporter.h **** #ifndef UNITTEST_DEFERREDTESTREPORTER_H
   2:DeferredTestReporter.h **** #define UNITTEST_DEFERREDTESTREPORTER_H
   3:DeferredTestReporter.h **** 
   4:DeferredTestReporter.h **** #include "TestReporter.h"
   5:DeferredTestReporter.h **** #include "DeferredTestResult.h"
   6:DeferredTestReporter.h **** 
   7:DeferredTestReporter.h **** #include <vector>
   8:DeferredTestReporter.h **** 
   9:DeferredTestReporter.h **** namespace UnitTest
  10:DeferredTestReporter.h **** {
  11:DeferredTestReporter.h **** 
  12:DeferredTestReporter.h **** class DeferredTestReporter : public TestReporter
 662              		.loc 3 12 7
 663              		.cfi_startproc
 664              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 665              		.cfi_lsda 0x1b,.LLSDA1398
 666 0000 F30F1EFA 		endbr64
 667 0004 55       		pushq	%rbp
 668              		.cfi_def_cfa_offset 16
 669              		.cfi_offset 6, -16
 670 0005 4889E5   		movq	%rsp, %rbp
 671              		.cfi_def_cfa_register 6
 672 0008 53       		pushq	%rbx
 673 0009 4883EC18 		subq	$24, %rsp
 674              		.cfi_offset 3, -24
 675 000d 48897DE8 		movq	%rdi, -24(%rbp)
 676              	.LBB4:
 677              		.loc 3 12 7
 678 0011 488B45E8 		movq	-24(%rbp), %rax
 679 0015 4889C7   		movq	%rax, %rdi
 680 0018 E8000000 		call	_ZN8UnitTest12TestReporterC2Ev@PLT
 680      00
 681 001d 488B0500 		movq	_ZTVN8UnitTest20DeferredTestReporterE@GOTPCREL(%rip), %rax
 681      000000
 682 0024 488D5010 		leaq	16(%rax), %rdx
 683 0028 488B45E8 		movq	-24(%rbp), %rax
 684 002c 488910   		movq	%rdx, (%rax)
 685 002f 488B45E8 		movq	-24(%rbp), %rax
 686 0033 4883C008 		addq	$8, %rax
 687 0037 4889C7   		movq	%rax, %rdi
 688              	.LEHB21:
 689 003a E8000000 		call	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EEC1Ev@PLT
 689      00
 690              	.LEHE21:
 691              	.LBE4:
 692 003f EB1E     		jmp	.L45
 693              	.L44:
 694 0041 F30F1EFA 		endbr64
 695              	.LBB5:
 696 0045 4889C3   		movq	%rax, %rbx
 697 0048 488B45E8 		movq	-24(%rbp), %rax
 698 004c 4889C7   		movq	%rax, %rdi
 699 004f E8000000 		call	_ZN8UnitTest12TestReporterD2Ev@PLT
 699      00
 700 0054 4889D8   		movq	%rbx, %rax
 701 0057 4889C7   		movq	%rax, %rdi
 702              	.LEHB22:
 703 005a E8000000 		call	_Unwind_Resume@PLT
 703      00
 704              	.LEHE22:
 705              	.L45:
 706              	.LBE5:
 707 005f 488B5DF8 		movq	-8(%rbp), %rbx
 708 0063 C9       		leave
 709              		.cfi_def_cfa 7, 8
 710 0064 C3       		ret
 711              		.cfi_endproc
 712              	.LFE1398:
 713              		.section	.gcc_except_table
 714              	.LLSDA1398:
 715 007f FF       		.byte	0xff
 716 0080 FF       		.byte	0xff
 717 0081 01       		.byte	0x1
 718 0082 08       		.uleb128 .LLSDACSE1398-.LLSDACSB1398
 719              	.LLSDACSB1398:
 720 0083 3A       		.uleb128 .LEHB21-.LFB1398
 721 0084 05       		.uleb128 .LEHE21-.LEHB21
 722 0085 41       		.uleb128 .L44-.LFB1398
 723 0086 00       		.uleb128 0
 724 0087 5A       		.uleb128 .LEHB22-.LFB1398
 725 0088 05       		.uleb128 .LEHE22-.LEHB22
 726 0089 00       		.uleb128 0
 727 008a 00       		.uleb128 0
 728              	.LLSDACSE1398:
 729              		.section	.text._ZN8UnitTest20DeferredTestReporterC2Ev,"axG",@progbits,_ZN8UnitTest20DeferredTestRe
 731              		.weak	_ZN8UnitTest20DeferredTestReporterC1Ev
 732              		.set	_ZN8UnitTest20DeferredTestReporterC1Ev,_ZN8UnitTest20DeferredTestReporterC2Ev
 733              		.section	.text._ZN8UnitTest20DeferredTestReporterD2Ev,"axG",@progbits,_ZN8UnitTest20DeferredTestRe
 734              		.align 2
 735              		.weak	_ZN8UnitTest20DeferredTestReporterD2Ev
 737              	_ZN8UnitTest20DeferredTestReporterD2Ev:
 738              	.LFB1401:
 739              		.loc 3 12 7
 740              		.cfi_startproc
 741              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 742              		.cfi_lsda 0x1b,.LLSDA1401
 743 0000 F30F1EFA 		endbr64
 744 0004 55       		pushq	%rbp
 745              		.cfi_def_cfa_offset 16
 746              		.cfi_offset 6, -16
 747 0005 4889E5   		movq	%rsp, %rbp
 748              		.cfi_def_cfa_register 6
 749 0008 53       		pushq	%rbx
 750 0009 4883EC18 		subq	$24, %rsp
 751              		.cfi_offset 3, -24
 752 000d 48897DE8 		movq	%rdi, -24(%rbp)
 753              	.LBB6:
 754              		.loc 3 12 7
 755 0011 488B0500 		movq	_ZTVN8UnitTest20DeferredTestReporterE@GOTPCREL(%rip), %rax
 755      000000
 756 0018 488D5010 		leaq	16(%rax), %rdx
 757 001c 488B45E8 		movq	-24(%rbp), %rax
 758 0020 488910   		movq	%rdx, (%rax)
 759 0023 488B45E8 		movq	-24(%rbp), %rax
 760 0027 4883C008 		addq	$8, %rax
 761 002b 4889C7   		movq	%rax, %rdi
 762              	.LEHB23:
 763 002e E8000000 		call	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED1Ev@PLT
 763      00
 764              	.LEHE23:
 765              		.loc 3 12 7 is_stmt 0 discriminator 2
 766 0033 488B45E8 		movq	-24(%rbp), %rax
 767 0037 4889C7   		movq	%rax, %rdi
 768              	.LEHB24:
 769 003a E8000000 		call	_ZN8UnitTest12TestReporterD2Ev@PLT
 769      00
 770              	.LEHE24:
 771              	.LBE6:
 772 003f EB1E     		jmp	.L49
 773              	.L48:
 774 0041 F30F1EFA 		endbr64
 775              	.LBB7:
 776              		.loc 3 12 7
 777 0045 4889C3   		movq	%rax, %rbx
 778 0048 488B45E8 		movq	-24(%rbp), %rax
 779 004c 4889C7   		movq	%rax, %rdi
 780 004f E8000000 		call	_ZN8UnitTest12TestReporterD2Ev@PLT
 780      00
 781 0054 4889D8   		movq	%rbx, %rax
 782 0057 4889C7   		movq	%rax, %rdi
 783              	.LEHB25:
 784 005a E8000000 		call	_Unwind_Resume@PLT
 784      00
 785              	.LEHE25:
 786              	.L49:
 787              	.LBE7:
 788 005f 488B5DF8 		movq	-8(%rbp), %rbx
 789 0063 C9       		leave
 790              		.cfi_def_cfa 7, 8
 791 0064 C3       		ret
 792              		.cfi_endproc
 793              	.LFE1401:
 794              		.section	.gcc_except_table
 795              	.LLSDA1401:
 796 008b FF       		.byte	0xff
 797 008c FF       		.byte	0xff
 798 008d 01       		.byte	0x1
 799 008e 0C       		.uleb128 .LLSDACSE1401-.LLSDACSB1401
 800              	.LLSDACSB1401:
 801 008f 2E       		.uleb128 .LEHB23-.LFB1401
 802 0090 05       		.uleb128 .LEHE23-.LEHB23
 803 0091 41       		.uleb128 .L48-.LFB1401
 804 0092 00       		.uleb128 0
 805 0093 3A       		.uleb128 .LEHB24-.LFB1401
 806 0094 05       		.uleb128 .LEHE24-.LEHB24
 807 0095 00       		.uleb128 0
 808 0096 00       		.uleb128 0
 809 0097 5A       		.uleb128 .LEHB25-.LFB1401
 810 0098 05       		.uleb128 .LEHE25-.LEHB25
 811 0099 00       		.uleb128 0
 812 009a 00       		.uleb128 0
 813              	.LLSDACSE1401:
 814              		.section	.text._ZN8UnitTest20DeferredTestReporterD2Ev,"axG",@progbits,_ZN8UnitTest20DeferredTestRe
 816              		.weak	_ZN8UnitTest20DeferredTestReporterD1Ev
 817              		.set	_ZN8UnitTest20DeferredTestReporterD1Ev,_ZN8UnitTest20DeferredTestReporterD2Ev
 818              		.section	.text._ZN8UnitTest20DeferredTestReporterD0Ev,"axG",@progbits,_ZN8UnitTest20DeferredTestRe
 819              		.align 2
 820              		.weak	_ZN8UnitTest20DeferredTestReporterD0Ev
 822              	_ZN8UnitTest20DeferredTestReporterD0Ev:
 823              	.LFB1403:
 824              		.loc 3 12 7 is_stmt 1
 825              		.cfi_startproc
 826              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 827              		.cfi_lsda 0x1b,.LLSDA1403
 828 0000 F30F1EFA 		endbr64
 829 0004 55       		pushq	%rbp
 830              		.cfi_def_cfa_offset 16
 831              		.cfi_offset 6, -16
 832 0005 4889E5   		movq	%rsp, %rbp
 833              		.cfi_def_cfa_register 6
 834 0008 53       		pushq	%rbx
 835 0009 4883EC18 		subq	$24, %rsp
 836              		.cfi_offset 3, -24
 837 000d 48897DE8 		movq	%rdi, -24(%rbp)
 838              		.loc 3 12 7
 839 0011 488B45E8 		movq	-24(%rbp), %rax
 840 0015 4889C7   		movq	%rax, %rdi
 841              	.LEHB26:
 842 0018 E8000000 		call	_ZN8UnitTest20DeferredTestReporterD1Ev@PLT
 842      00
 843              	.LEHE26:
 844              		.loc 3 12 7 is_stmt 0 discriminator 2
 845 001d 488B45E8 		movq	-24(%rbp), %rax
 846 0021 4889C7   		movq	%rax, %rdi
 847 0024 E8000000 		call	_ZdlPv@PLT
 847      00
 848 0029 EB1E     		jmp	.L53
 849              	.L52:
 850 002b F30F1EFA 		endbr64
 851              		.loc 3 12 7
 852 002f 4889C3   		movq	%rax, %rbx
 853 0032 488B45E8 		movq	-24(%rbp), %rax
 854 0036 4889C7   		movq	%rax, %rdi
 855 0039 E8000000 		call	_ZdlPv@PLT
 855      00
 856 003e 4889D8   		movq	%rbx, %rax
 857 0041 4889C7   		movq	%rax, %rdi
 858              	.LEHB27:
 859 0044 E8000000 		call	_Unwind_Resume@PLT
 859      00
 860              	.LEHE27:
 861              	.L53:
 862 0049 488B5DF8 		movq	-8(%rbp), %rbx
 863 004d C9       		leave
 864              		.cfi_def_cfa 7, 8
 865 004e C3       		ret
 866              		.cfi_endproc
 867              	.LFE1403:
 868              		.section	.gcc_except_table
 869              	.LLSDA1403:
 870 009b FF       		.byte	0xff
 871 009c FF       		.byte	0xff
 872 009d 01       		.byte	0x1
 873 009e 08       		.uleb128 .LLSDACSE1403-.LLSDACSB1403
 874              	.LLSDACSB1403:
 875 009f 18       		.uleb128 .LEHB26-.LFB1403
 876 00a0 05       		.uleb128 .LEHE26-.LEHB26
 877 00a1 2B       		.uleb128 .L52-.LFB1403
 878 00a2 00       		.uleb128 0
 879 00a3 44       		.uleb128 .LEHB27-.LFB1403
 880 00a4 05       		.uleb128 .LEHE27-.LEHB27
 881 00a5 00       		.uleb128 0
 882 00a6 00       		.uleb128 0
 883              	.LLSDACSE1403:
 884              		.section	.text._ZN8UnitTest20DeferredTestReporterD0Ev,"axG",@progbits,_ZN8UnitTest20DeferredTestRe
 886              		.text
 887 04d9 90       		.align 2
 888              		.globl	_ZN8UnitTest15XmlTestReporterC2ERSo
 890              	_ZN8UnitTest15XmlTestReporterC2ERSo:
 891              	.LFB1404:
  39:XmlTestReporter.cpp **** 
  40:XmlTestReporter.cpp **** }
  41:XmlTestReporter.cpp **** 
  42:XmlTestReporter.cpp **** namespace UnitTest {
  43:XmlTestReporter.cpp **** 
  44:XmlTestReporter.cpp **** XmlTestReporter::XmlTestReporter(ostream& ostream)
 892              		.loc 1 44 1 is_stmt 1
 893              		.cfi_startproc
 894 04da F30F1EFA 		endbr64
 895 04de 55       		pushq	%rbp
 896              		.cfi_def_cfa_offset 16
 897              		.cfi_offset 6, -16
 898 04df 4889E5   		movq	%rsp, %rbp
 899              		.cfi_def_cfa_register 6
 900 04e2 4883EC10 		subq	$16, %rsp
 901 04e6 48897DF8 		movq	%rdi, -8(%rbp)
 902 04ea 488975F0 		movq	%rsi, -16(%rbp)
 903              	.LBB8:
  45:XmlTestReporter.cpp ****     : m_ostream(ostream)
 904              		.loc 1 45 24
 905 04ee 488B45F8 		movq	-8(%rbp), %rax
 906 04f2 4889C7   		movq	%rax, %rdi
 907 04f5 E8000000 		call	_ZN8UnitTest20DeferredTestReporterC2Ev@PLT
 907      00
 908 04fa 488B0500 		movq	_ZTVN8UnitTest15XmlTestReporterE@GOTPCREL(%rip), %rax
 908      000000
 909 0501 488D5010 		leaq	16(%rax), %rdx
 910 0505 488B45F8 		movq	-8(%rbp), %rax
 911 0509 488910   		movq	%rdx, (%rax)
 912              		.loc 1 45 7
 913 050c 488B45F8 		movq	-8(%rbp), %rax
 914 0510 488B55F0 		movq	-16(%rbp), %rdx
 915 0514 48895020 		movq	%rdx, 32(%rax)
 916              	.LBE8:
  46:XmlTestReporter.cpp **** {
  47:XmlTestReporter.cpp **** }
 917              		.loc 1 47 1
 918 0518 90       		nop
 919 0519 C9       		leave
 920              		.cfi_def_cfa 7, 8
 921 051a C3       		ret
 922              		.cfi_endproc
 923              	.LFE1404:
 925              		.globl	_ZN8UnitTest15XmlTestReporterC1ERSo
 926              		.set	_ZN8UnitTest15XmlTestReporterC1ERSo,_ZN8UnitTest15XmlTestReporterC2ERSo
 927 051b 90       		.align 2
 928              		.globl	_ZN8UnitTest15XmlTestReporter13ReportSummaryEiiif
 930              	_ZN8UnitTest15XmlTestReporter13ReportSummaryEiiif:
 931              	.LFB1406:
  48:XmlTestReporter.cpp **** 
  49:XmlTestReporter.cpp **** void XmlTestReporter::ReportSummary(int totalTestCount, int failedTestCount,
  50:XmlTestReporter.cpp ****                                     int failureCount, float secondsElapsed)
  51:XmlTestReporter.cpp **** {
 932              		.loc 1 51 1
 933              		.cfi_startproc
 934 051c F30F1EFA 		endbr64
 935 0520 55       		pushq	%rbp
 936              		.cfi_def_cfa_offset 16
 937              		.cfi_offset 6, -16
 938 0521 4889E5   		movq	%rsp, %rbp
 939              		.cfi_def_cfa_register 6
 940 0524 4883EC40 		subq	$64, %rsp
 941 0528 48897DD8 		movq	%rdi, -40(%rbp)
 942 052c 8975D4   		movl	%esi, -44(%rbp)
 943 052f 8955D0   		movl	%edx, -48(%rbp)
 944 0532 894DCC   		movl	%ecx, -52(%rbp)
 945 0535 F30F1145 		movss	%xmm0, -56(%rbp)
 945      C8
 946              		.loc 1 51 1
 947 053a 64488B04 		movq	%fs:40, %rax
 947      25280000 
 947      00
 948 0543 488945F8 		movq	%rax, -8(%rbp)
 949 0547 31C0     		xorl	%eax, %eax
  52:XmlTestReporter.cpp ****     AddXmlElement(m_ostream, NULL);
 950              		.loc 1 52 18
 951 0549 488B45D8 		movq	-40(%rbp), %rax
 952 054d 488B4820 		movq	32(%rax), %rcx
 953 0551 488B45D8 		movq	-40(%rbp), %rax
 954 0555 BA000000 		movl	$0, %edx
 954      00
 955 055a 4889CE   		movq	%rcx, %rsi
 956 055d 4889C7   		movq	%rax, %rdi
 957 0560 E8000000 		call	_ZN8UnitTest15XmlTestReporter13AddXmlElementERSoPKc@PLT
 957      00
  53:XmlTestReporter.cpp **** 
  54:XmlTestReporter.cpp ****     BeginResults(m_ostream, totalTestCount, failedTestCount, failureCount, secondsElapsed);
 958              		.loc 1 54 17
 959 0565 488B45D8 		movq	-40(%rbp), %rax
 960 0569 488B7020 		movq	32(%rax), %rsi
 961 056d 8B7DC8   		movl	-56(%rbp), %edi
 962 0570 448B45CC 		movl	-52(%rbp), %r8d
 963 0574 8B4DD0   		movl	-48(%rbp), %ecx
 964 0577 8B55D4   		movl	-44(%rbp), %edx
 965 057a 488B45D8 		movq	-40(%rbp), %rax
 966 057e 660F6EC7 		movd	%edi, %xmm0
 967 0582 4889C7   		movq	%rax, %rdi
 968 0585 E8000000 		call	_ZN8UnitTest15XmlTestReporter12BeginResultsERSoiiif@PLT
 968      00
  55:XmlTestReporter.cpp **** 
  56:XmlTestReporter.cpp ****     DeferredTestResultList const& results = GetResults();
 969              		.loc 1 56 55
 970 058a 488B45D8 		movq	-40(%rbp), %rax
 971 058e 4889C7   		movq	%rax, %rdi
 972 0591 E8000000 		call	_ZN8UnitTest20DeferredTestReporter10GetResultsEv@PLT
 972      00
 973 0596 488945F0 		movq	%rax, -16(%rbp)
 974              	.LBB9:
  57:XmlTestReporter.cpp ****     for (DeferredTestResultList::const_iterator i = results.begin(); i != results.end(); ++i)
 975              		.loc 1 57 66
 976 059a 488B45F0 		movq	-16(%rbp), %rax
 977 059e 4889C7   		movq	%rax, %rdi
 978 05a1 E8000000 		call	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE5beginEv@PLT
 978      00
 979 05a6 488945E0 		movq	%rax, -32(%rbp)
 980              		.loc 1 57 5
 981 05aa E9920000 		jmp	.L56
 981      00
 982              	.L58:
  58:XmlTestReporter.cpp ****     {
  59:XmlTestReporter.cpp ****         BeginTest(m_ostream, *i);
 983              		.loc 1 59 31
 984 05af 488D45E0 		leaq	-32(%rbp), %rax
 985 05b3 4889C7   		movq	%rax, %rdi
 986 05b6 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEdeEv
 986      00
 987 05bb 4889C2   		movq	%rax, %rdx
 988              		.loc 1 59 18
 989 05be 488B45D8 		movq	-40(%rbp), %rax
 990 05c2 488B4820 		movq	32(%rax), %rcx
 991 05c6 488B45D8 		movq	-40(%rbp), %rax
 992 05ca 4889CE   		movq	%rcx, %rsi
 993 05cd 4889C7   		movq	%rax, %rdi
 994 05d0 E8000000 		call	_ZN8UnitTest15XmlTestReporter9BeginTestERSoRKNS_18DeferredTestResultE@PLT
 994      00
  60:XmlTestReporter.cpp **** 
  61:XmlTestReporter.cpp ****         if (i->failed)
 995              		.loc 1 61 14
 996 05d5 488D45E0 		leaq	-32(%rbp), %rax
 997 05d9 4889C7   		movq	%rax, %rdi
 998 05dc E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEptEv
 998      00
 999              		.loc 1 61 16
 1000 05e1 0FB6407C 		movzbl	124(%rax), %eax
 1001              		.loc 1 61 9
 1002 05e5 84C0     		testb	%al, %al
 1003 05e7 7426     		je	.L57
  62:XmlTestReporter.cpp ****             AddFailure(m_ostream, *i);
 1004              		.loc 1 62 36
 1005 05e9 488D45E0 		leaq	-32(%rbp), %rax
 1006 05ed 4889C7   		movq	%rax, %rdi
 1007 05f0 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEdeEv
 1007      00
 1008 05f5 4889C2   		movq	%rax, %rdx
 1009              		.loc 1 62 23
 1010 05f8 488B45D8 		movq	-40(%rbp), %rax
 1011 05fc 488B4820 		movq	32(%rax), %rcx
 1012 0600 488B45D8 		movq	-40(%rbp), %rax
 1013 0604 4889CE   		movq	%rcx, %rsi
 1014 0607 4889C7   		movq	%rax, %rdi
 1015 060a E8000000 		call	_ZN8UnitTest15XmlTestReporter10AddFailureERSoRKNS_18DeferredTestResultE@PLT
 1015      00
 1016              	.L57:
  63:XmlTestReporter.cpp **** 
  64:XmlTestReporter.cpp ****         EndTest(m_ostream, *i);
 1017              		.loc 1 64 29
 1018 060f 488D45E0 		leaq	-32(%rbp), %rax
 1019 0613 4889C7   		movq	%rax, %rdi
 1020 0616 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEdeEv
 1020      00
 1021 061b 4889C2   		movq	%rax, %rdx
 1022              		.loc 1 64 16
 1023 061e 488B45D8 		movq	-40(%rbp), %rax
 1024 0622 488B4820 		movq	32(%rax), %rcx
 1025 0626 488B45D8 		movq	-40(%rbp), %rax
 1026 062a 4889CE   		movq	%rcx, %rsi
 1027 062d 4889C7   		movq	%rax, %rdi
 1028 0630 E8000000 		call	_ZN8UnitTest15XmlTestReporter7EndTestERSoRKNS_18DeferredTestResultE@PLT
 1028      00
  57:XmlTestReporter.cpp ****     {
 1029              		.loc 1 57 92
 1030 0635 488D45E0 		leaq	-32(%rbp), %rax
 1031 0639 4889C7   		movq	%rax, %rdi
 1032 063c E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEppEv@
 1032      00
 1033              	.L56:
  57:XmlTestReporter.cpp ****     {
 1034              		.loc 1 57 86 discriminator 1
 1035 0641 488B45F0 		movq	-16(%rbp), %rax
 1036 0645 4889C7   		movq	%rax, %rdi
 1037 0648 E8000000 		call	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE3endEv@PLT
 1037      00
 1038 064d 488945E8 		movq	%rax, -24(%rbp)
  57:XmlTestReporter.cpp ****     {
 1039              		.loc 1 57 72 discriminator 1
 1040 0651 488D55E8 		leaq	-24(%rbp), %rdx
 1041 0655 488D45E0 		leaq	-32(%rbp), %rax
 1042 0659 4889D6   		movq	%rdx, %rsi
 1043 065c 4889C7   		movq	%rax, %rdi
 1044 065f E8000000 		call	_ZN9__gnu_cxxneIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iter
 1044      00
 1045 0664 84C0     		testb	%al, %al
 1046 0666 0F8543FF 		jne	.L58
 1046      FFFF
 1047              	.LBE9:
  65:XmlTestReporter.cpp ****     }
  66:XmlTestReporter.cpp **** 
  67:XmlTestReporter.cpp ****     EndResults(m_ostream);
 1048              		.loc 1 67 15
 1049 066c 488B45D8 		movq	-40(%rbp), %rax
 1050 0670 488B5020 		movq	32(%rax), %rdx
 1051 0674 488B45D8 		movq	-40(%rbp), %rax
 1052 0678 4889D6   		movq	%rdx, %rsi
 1053 067b 4889C7   		movq	%rax, %rdi
 1054 067e E8000000 		call	_ZN8UnitTest15XmlTestReporter10EndResultsERSo@PLT
 1054      00
  68:XmlTestReporter.cpp **** }
 1055              		.loc 1 68 1
 1056 0683 90       		nop
 1057 0684 488B45F8 		movq	-8(%rbp), %rax
 1058 0688 64482B04 		subq	%fs:40, %rax
 1058      25280000 
 1058      00
 1059 0691 7405     		je	.L59
 1060 0693 E8000000 		call	__stack_chk_fail@PLT
 1060      00
 1061              	.L59:
 1062 0698 C9       		leave
 1063              		.cfi_def_cfa 7, 8
 1064 0699 C3       		ret
 1065              		.cfi_endproc
 1066              	.LFE1406:
 1068              		.section	.rodata
 1069              	.LC7:
 1070 0025 3C3F786D 		.string	"<?xml version=\"1.0\""
 1070      6C207665 
 1070      7273696F 
 1070      6E3D2231 
 1070      2E302200 
 1071              	.LC8:
 1072 0039 20656E63 		.string	" encoding=\""
 1072      6F64696E 
 1072      673D2200 
 1073              	.LC9:
 1074 0045 2200     		.string	"\""
 1075              	.LC10:
 1076 0047 3F3E00   		.string	"?>"
 1077              		.text
 1078              		.align 2
 1079              		.globl	_ZN8UnitTest15XmlTestReporter13AddXmlElementERSoPKc
 1081              	_ZN8UnitTest15XmlTestReporter13AddXmlElementERSoPKc:
 1082              	.LFB1407:
  69:XmlTestReporter.cpp **** 
  70:XmlTestReporter.cpp **** void XmlTestReporter::AddXmlElement(ostream& os, char const* encoding)
  71:XmlTestReporter.cpp **** {
 1083              		.loc 1 71 1
 1084              		.cfi_startproc
 1085 069a F30F1EFA 		endbr64
 1086 069e 55       		pushq	%rbp
 1087              		.cfi_def_cfa_offset 16
 1088              		.cfi_offset 6, -16
 1089 069f 4889E5   		movq	%rsp, %rbp
 1090              		.cfi_def_cfa_register 6
 1091 06a2 4883EC20 		subq	$32, %rsp
 1092 06a6 48897DF8 		movq	%rdi, -8(%rbp)
 1093 06aa 488975F0 		movq	%rsi, -16(%rbp)
 1094 06ae 488955E8 		movq	%rdx, -24(%rbp)
  72:XmlTestReporter.cpp ****     os << "<?xml version=\"1.0\"";
 1095              		.loc 1 72 11
 1096 06b2 488B45F0 		movq	-16(%rbp), %rax
 1097 06b6 488D1500 		leaq	.LC7(%rip), %rdx
 1097      000000
 1098 06bd 4889D6   		movq	%rdx, %rsi
 1099 06c0 4889C7   		movq	%rax, %rdi
 1100 06c3 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1100      00
  73:XmlTestReporter.cpp **** 
  74:XmlTestReporter.cpp ****     if (encoding != NULL)
 1101              		.loc 1 74 5
 1102 06c8 48837DE8 		cmpq	$0, -24(%rbp)
 1102      00
 1103 06cd 743D     		je	.L61
  75:XmlTestReporter.cpp ****         os << " encoding=\"" << encoding << "\"";
 1104              		.loc 1 75 45
 1105 06cf 488B45F0 		movq	-16(%rbp), %rax
 1106 06d3 488D1500 		leaq	.LC8(%rip), %rdx
 1106      000000
 1107 06da 4889D6   		movq	%rdx, %rsi
 1108 06dd 4889C7   		movq	%rax, %rdi
 1109 06e0 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1109      00
 1110 06e5 4889C2   		movq	%rax, %rdx
 1111 06e8 488B45E8 		movq	-24(%rbp), %rax
 1112 06ec 4889C6   		movq	%rax, %rsi
 1113 06ef 4889D7   		movq	%rdx, %rdi
 1114 06f2 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1114      00
 1115 06f7 4889C2   		movq	%rax, %rdx
 1116 06fa 488D0500 		leaq	.LC9(%rip), %rax
 1116      000000
 1117 0701 4889C6   		movq	%rax, %rsi
 1118 0704 4889D7   		movq	%rdx, %rdi
 1119 0707 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1119      00
 1120              	.L61:
  76:XmlTestReporter.cpp **** 
  77:XmlTestReporter.cpp ****     os << "?>";
 1121              		.loc 1 77 11
 1122 070c 488B45F0 		movq	-16(%rbp), %rax
 1123 0710 488D1500 		leaq	.LC10(%rip), %rdx
 1123      000000
 1124 0717 4889D6   		movq	%rdx, %rsi
 1125 071a 4889C7   		movq	%rax, %rdi
 1126 071d E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1126      00
  78:XmlTestReporter.cpp **** }
 1127              		.loc 1 78 1
 1128 0722 90       		nop
 1129 0723 C9       		leave
 1130              		.cfi_def_cfa 7, 8
 1131 0724 C3       		ret
 1132              		.cfi_endproc
 1133              	.LFE1407:
 1135              		.section	.rodata
 1136              	.LC11:
 1137 004a 3C756E69 		.string	"<unittest-results"
 1137      74746573 
 1137      742D7265 
 1137      73756C74 
 1137      7300
 1138              	.LC12:
 1139 005c 20746573 		.string	" tests=\""
 1139      74733D22 
 1139      00
 1140              	.LC13:
 1141 0065 20666169 		.string	" failedtests=\""
 1141      6C656474 
 1141      65737473 
 1141      3D2200
 1142              	.LC14:
 1143 0074 20666169 		.string	" failures=\""
 1143      6C757265 
 1143      733D2200 
 1144              	.LC15:
 1145 0080 2074696D 		.string	" time=\""
 1145      653D2200 
 1146              	.LC16:
 1147 0088 3E00     		.string	">"
 1148              		.text
 1149 0725 90       		.align 2
 1150              		.globl	_ZN8UnitTest15XmlTestReporter12BeginResultsERSoiiif
 1152              	_ZN8UnitTest15XmlTestReporter12BeginResultsERSoiiif:
 1153              	.LFB1408:
  79:XmlTestReporter.cpp **** 
  80:XmlTestReporter.cpp **** void XmlTestReporter::BeginResults(std::ostream& os, int totalTestCount, int failedTestCount, 
  81:XmlTestReporter.cpp ****                                    int failureCount, float secondsElapsed)
  82:XmlTestReporter.cpp **** {
 1154              		.loc 1 82 1
 1155              		.cfi_startproc
 1156 0726 F30F1EFA 		endbr64
 1157 072a 55       		pushq	%rbp
 1158              		.cfi_def_cfa_offset 16
 1159              		.cfi_offset 6, -16
 1160 072b 4889E5   		movq	%rsp, %rbp
 1161              		.cfi_def_cfa_register 6
 1162 072e 4883EC20 		subq	$32, %rsp
 1163 0732 48897DF8 		movq	%rdi, -8(%rbp)
 1164 0736 488975F0 		movq	%rsi, -16(%rbp)
 1165 073a 8955EC   		movl	%edx, -20(%rbp)
 1166 073d 894DE8   		movl	%ecx, -24(%rbp)
 1167 0740 448945E4 		movl	%r8d, -28(%rbp)
 1168 0744 F30F1145 		movss	%xmm0, -32(%rbp)
 1168      E0
  83:XmlTestReporter.cpp ****    os << "<unittest-results"
  84:XmlTestReporter.cpp ****        << " tests=\"" << totalTestCount << "\"" 
 1169              		.loc 1 84 11
 1170 0749 488B45F0 		movq	-16(%rbp), %rax
 1171 074d 488D1500 		leaq	.LC11(%rip), %rdx
 1171      000000
 1172 0754 4889D6   		movq	%rdx, %rsi
 1173 0757 4889C7   		movq	%rax, %rdi
 1174 075a E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1174      00
 1175 075f 4889C2   		movq	%rax, %rdx
 1176 0762 488D0500 		leaq	.LC12(%rip), %rax
 1176      000000
 1177 0769 4889C6   		movq	%rax, %rsi
 1178 076c 4889D7   		movq	%rdx, %rdi
 1179 076f E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1179      00
 1180 0774 4889C2   		movq	%rax, %rdx
  85:XmlTestReporter.cpp ****        << " failedtests=\"" << failedTestCount << "\"" 
 1181              		.loc 1 85 11
 1182 0777 8B45EC   		movl	-20(%rbp), %eax
 1183 077a 89C6     		movl	%eax, %esi
 1184 077c 4889D7   		movq	%rdx, %rdi
 1185 077f E8000000 		call	_ZNSolsEi@PLT
 1185      00
 1186 0784 4889C2   		movq	%rax, %rdx
 1187 0787 488D0500 		leaq	.LC9(%rip), %rax
 1187      000000
 1188 078e 4889C6   		movq	%rax, %rsi
 1189 0791 4889D7   		movq	%rdx, %rdi
 1190 0794 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1190      00
 1191 0799 4889C2   		movq	%rax, %rdx
 1192 079c 488D0500 		leaq	.LC13(%rip), %rax
 1192      000000
 1193 07a3 4889C6   		movq	%rax, %rsi
 1194 07a6 4889D7   		movq	%rdx, %rdi
 1195 07a9 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1195      00
 1196 07ae 4889C2   		movq	%rax, %rdx
  86:XmlTestReporter.cpp ****        << " failures=\"" << failureCount << "\"" 
 1197              		.loc 1 86 11
 1198 07b1 8B45E8   		movl	-24(%rbp), %eax
 1199 07b4 89C6     		movl	%eax, %esi
 1200 07b6 4889D7   		movq	%rdx, %rdi
 1201 07b9 E8000000 		call	_ZNSolsEi@PLT
 1201      00
 1202 07be 4889C2   		movq	%rax, %rdx
 1203 07c1 488D0500 		leaq	.LC9(%rip), %rax
 1203      000000
 1204 07c8 4889C6   		movq	%rax, %rsi
 1205 07cb 4889D7   		movq	%rdx, %rdi
 1206 07ce E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1206      00
 1207 07d3 4889C2   		movq	%rax, %rdx
 1208 07d6 488D0500 		leaq	.LC14(%rip), %rax
 1208      000000
 1209 07dd 4889C6   		movq	%rax, %rsi
 1210 07e0 4889D7   		movq	%rdx, %rdi
 1211 07e3 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1211      00
 1212 07e8 4889C2   		movq	%rax, %rdx
  87:XmlTestReporter.cpp ****        << " time=\"" << secondsElapsed << "\""
 1213              		.loc 1 87 11
 1214 07eb 8B45E4   		movl	-28(%rbp), %eax
 1215 07ee 89C6     		movl	%eax, %esi
 1216 07f0 4889D7   		movq	%rdx, %rdi
 1217 07f3 E8000000 		call	_ZNSolsEi@PLT
 1217      00
 1218 07f8 4889C2   		movq	%rax, %rdx
 1219 07fb 488D0500 		leaq	.LC9(%rip), %rax
 1219      000000
 1220 0802 4889C6   		movq	%rax, %rsi
 1221 0805 4889D7   		movq	%rdx, %rdi
 1222 0808 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1222      00
 1223 080d 4889C2   		movq	%rax, %rdx
 1224 0810 488D0500 		leaq	.LC15(%rip), %rax
 1224      000000
 1225 0817 4889C6   		movq	%rax, %rsi
 1226 081a 4889D7   		movq	%rdx, %rdi
 1227 081d E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1227      00
 1228 0822 4889C2   		movq	%rax, %rdx
 1229              		.loc 1 87 25
 1230 0825 8B45E0   		movl	-32(%rbp), %eax
 1231 0828 660F6EC0 		movd	%eax, %xmm0
 1232 082c 4889D7   		movq	%rdx, %rdi
 1233 082f E8000000 		call	_ZNSolsEf@PLT
 1233      00
 1234 0834 4889C2   		movq	%rax, %rdx
  88:XmlTestReporter.cpp ****        << ">";
 1235              		.loc 1 88 11
 1236 0837 488D0500 		leaq	.LC9(%rip), %rax
 1236      000000
 1237 083e 4889C6   		movq	%rax, %rsi
 1238 0841 4889D7   		movq	%rdx, %rdi
 1239 0844 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1239      00
 1240 0849 4889C2   		movq	%rax, %rdx
 1241 084c 488D0500 		leaq	.LC16(%rip), %rax
 1241      000000
 1242 0853 4889C6   		movq	%rax, %rsi
 1243 0856 4889D7   		movq	%rdx, %rdi
 1244 0859 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1244      00
  89:XmlTestReporter.cpp **** }
 1245              		.loc 1 89 1
 1246 085e 90       		nop
 1247 085f C9       		leave
 1248              		.cfi_def_cfa 7, 8
 1249 0860 C3       		ret
 1250              		.cfi_endproc
 1251              	.LFE1408:
 1253              		.section	.rodata
 1254              	.LC17:
 1255 008a 3C2F756E 		.string	"</unittest-results>"
 1255      69747465 
 1255      73742D72 
 1255      6573756C 
 1255      74733E00 
 1256              		.text
 1257 0861 90       		.align 2
 1258              		.globl	_ZN8UnitTest15XmlTestReporter10EndResultsERSo
 1260              	_ZN8UnitTest15XmlTestReporter10EndResultsERSo:
 1261              	.LFB1409:
  90:XmlTestReporter.cpp **** 
  91:XmlTestReporter.cpp **** void XmlTestReporter::EndResults(std::ostream& os)
  92:XmlTestReporter.cpp **** {
 1262              		.loc 1 92 1
 1263              		.cfi_startproc
 1264 0862 F30F1EFA 		endbr64
 1265 0866 55       		pushq	%rbp
 1266              		.cfi_def_cfa_offset 16
 1267              		.cfi_offset 6, -16
 1268 0867 4889E5   		movq	%rsp, %rbp
 1269              		.cfi_def_cfa_register 6
 1270 086a 4883EC10 		subq	$16, %rsp
 1271 086e 48897DF8 		movq	%rdi, -8(%rbp)
 1272 0872 488975F0 		movq	%rsi, -16(%rbp)
  93:XmlTestReporter.cpp ****     os << "</unittest-results>";
 1273              		.loc 1 93 11
 1274 0876 488B45F0 		movq	-16(%rbp), %rax
 1275 087a 488D1500 		leaq	.LC17(%rip), %rdx
 1275      000000
 1276 0881 4889D6   		movq	%rdx, %rsi
 1277 0884 4889C7   		movq	%rax, %rdi
 1278 0887 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1278      00
  94:XmlTestReporter.cpp **** }
 1279              		.loc 1 94 1
 1280 088c 90       		nop
 1281 088d C9       		leave
 1282              		.cfi_def_cfa 7, 8
 1283 088e C3       		ret
 1284              		.cfi_endproc
 1285              	.LFE1409:
 1287              		.section	.rodata
 1288              	.LC18:
 1289 009e 3C746573 		.string	"<test"
 1289      7400
 1290              	.LC19:
 1291 00a4 20737569 		.string	" suite=\""
 1291      74653D22 
 1291      00
 1292              	.LC20:
 1293 00ad 206E616D 		.string	" name=\""
 1293      653D2200 
 1294              		.text
 1295 088f 90       		.align 2
 1296              		.globl	_ZN8UnitTest15XmlTestReporter9BeginTestERSoRKNS_18DeferredTestResultE
 1298              	_ZN8UnitTest15XmlTestReporter9BeginTestERSoRKNS_18DeferredTestResultE:
 1299              	.LFB1410:
  95:XmlTestReporter.cpp **** 
  96:XmlTestReporter.cpp **** void XmlTestReporter::BeginTest(std::ostream& os, DeferredTestResult const& result)
  97:XmlTestReporter.cpp **** {
 1300              		.loc 1 97 1
 1301              		.cfi_startproc
 1302 0890 F30F1EFA 		endbr64
 1303 0894 55       		pushq	%rbp
 1304              		.cfi_def_cfa_offset 16
 1305              		.cfi_offset 6, -16
 1306 0895 4889E5   		movq	%rsp, %rbp
 1307              		.cfi_def_cfa_register 6
 1308 0898 4883EC20 		subq	$32, %rsp
 1309 089c 48897DF8 		movq	%rdi, -8(%rbp)
 1310 08a0 488975F0 		movq	%rsi, -16(%rbp)
 1311 08a4 488955E8 		movq	%rdx, -24(%rbp)
  98:XmlTestReporter.cpp ****     os << "<test"
  99:XmlTestReporter.cpp ****         << " suite=\"" << result.suiteName << "\"" 
 100:XmlTestReporter.cpp ****         << " name=\"" << result.testName << "\""
 101:XmlTestReporter.cpp ****         << " time=\"" << result.timeElapsed << "\"";
 1312              		.loc 1 101 12
 1313 08a8 488B45F0 		movq	-16(%rbp), %rax
 1314 08ac 488D1500 		leaq	.LC18(%rip), %rdx
 1314      000000
 1315 08b3 4889D6   		movq	%rdx, %rsi
 1316 08b6 4889C7   		movq	%rax, %rdi
 1317 08b9 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1317      00
 1318 08be 4889C2   		movq	%rax, %rdx
 1319 08c1 488D0500 		leaq	.LC19(%rip), %rax
 1319      000000
 1320 08c8 4889C6   		movq	%rax, %rsi
 1321 08cb 4889D7   		movq	%rdx, %rdi
 1322 08ce E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1322      00
 1323 08d3 4889C2   		movq	%rax, %rdx
  99:XmlTestReporter.cpp ****         << " name=\"" << result.testName << "\""
 1324              		.loc 1 99 34
 1325 08d6 488B45E8 		movq	-24(%rbp), %rax
 1326              		.loc 1 101 12
 1327 08da 4889C6   		movq	%rax, %rsi
 1328 08dd 4889D7   		movq	%rdx, %rdi
 1329 08e0 E8000000 		call	_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKNSt7__cxx1112basic_stringIS4_S5
 1329      00
 1330 08e5 4889C2   		movq	%rax, %rdx
 1331 08e8 488D0500 		leaq	.LC9(%rip), %rax
 1331      000000
 1332 08ef 4889C6   		movq	%rax, %rsi
 1333 08f2 4889D7   		movq	%rdx, %rdi
 1334 08f5 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1334      00
 1335 08fa 4889C2   		movq	%rax, %rdx
 1336 08fd 488D0500 		leaq	.LC20(%rip), %rax
 1336      000000
 1337 0904 4889C6   		movq	%rax, %rsi
 1338 0907 4889D7   		movq	%rdx, %rdi
 1339 090a E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1339      00
 1340 090f 4889C2   		movq	%rax, %rdx
 100:XmlTestReporter.cpp ****         << " time=\"" << result.timeElapsed << "\"";
 1341              		.loc 1 100 33
 1342 0912 488B45E8 		movq	-24(%rbp), %rax
 1343 0916 4883C020 		addq	$32, %rax
 1344              		.loc 1 101 12
 1345 091a 4889C6   		movq	%rax, %rsi
 1346 091d 4889D7   		movq	%rdx, %rdi
 1347 0920 E8000000 		call	_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKNSt7__cxx1112basic_stringIS4_S5
 1347      00
 1348 0925 4889C2   		movq	%rax, %rdx
 1349 0928 488D0500 		leaq	.LC9(%rip), %rax
 1349      000000
 1350 092f 4889C6   		movq	%rax, %rsi
 1351 0932 4889D7   		movq	%rdx, %rdi
 1352 0935 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1352      00
 1353 093a 4889C2   		movq	%rax, %rdx
 1354 093d 488D0500 		leaq	.LC15(%rip), %rax
 1354      000000
 1355 0944 4889C6   		movq	%rax, %rsi
 1356 0947 4889D7   		movq	%rdx, %rdi
 1357 094a E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1357      00
 1358 094f 4889C2   		movq	%rax, %rdx
 1359              		.loc 1 101 33
 1360 0952 488B45E8 		movq	-24(%rbp), %rax
 1361 0956 8B4078   		movl	120(%rax), %eax
 1362 0959 660F6EC0 		movd	%eax, %xmm0
 1363 095d 4889D7   		movq	%rdx, %rdi
 1364 0960 E8000000 		call	_ZNSolsEf@PLT
 1364      00
 1365 0965 4889C2   		movq	%rax, %rdx
 1366              		.loc 1 101 48
 1367 0968 488D0500 		leaq	.LC9(%rip), %rax
 1367      000000
 1368 096f 4889C6   		movq	%rax, %rsi
 1369 0972 4889D7   		movq	%rdx, %rdi
 1370 0975 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1370      00
 102:XmlTestReporter.cpp **** }
 1371              		.loc 1 102 1
 1372 097a 90       		nop
 1373 097b C9       		leave
 1374              		.cfi_def_cfa 7, 8
 1375 097c C3       		ret
 1376              		.cfi_endproc
 1377              	.LFE1410:
 1379              		.section	.rodata
 1380              	.LC21:
 1381 00b5 3C2F7465 		.string	"</test>"
 1381      73743E00 
 1382              	.LC22:
 1383 00bd 2F3E00   		.string	"/>"
 1384              		.text
 1385 097d 90       		.align 2
 1386              		.globl	_ZN8UnitTest15XmlTestReporter7EndTestERSoRKNS_18DeferredTestResultE
 1388              	_ZN8UnitTest15XmlTestReporter7EndTestERSoRKNS_18DeferredTestResultE:
 1389              	.LFB1411:
 103:XmlTestReporter.cpp **** 
 104:XmlTestReporter.cpp **** void XmlTestReporter::EndTest(std::ostream& os, DeferredTestResult const& result)
 105:XmlTestReporter.cpp **** {
 1390              		.loc 1 105 1
 1391              		.cfi_startproc
 1392 097e F30F1EFA 		endbr64
 1393 0982 55       		pushq	%rbp
 1394              		.cfi_def_cfa_offset 16
 1395              		.cfi_offset 6, -16
 1396 0983 4889E5   		movq	%rsp, %rbp
 1397              		.cfi_def_cfa_register 6
 1398 0986 4883EC20 		subq	$32, %rsp
 1399 098a 48897DF8 		movq	%rdi, -8(%rbp)
 1400 098e 488975F0 		movq	%rsi, -16(%rbp)
 1401 0992 488955E8 		movq	%rdx, -24(%rbp)
 106:XmlTestReporter.cpp ****     if (result.failed)
 1402              		.loc 1 106 16
 1403 0996 488B45E8 		movq	-24(%rbp), %rax
 1404 099a 0FB6407C 		movzbl	124(%rax), %eax
 1405              		.loc 1 106 5
 1406 099e 84C0     		testb	%al, %al
 1407 09a0 7418     		je	.L66
 107:XmlTestReporter.cpp ****         os << "</test>";
 1408              		.loc 1 107 15
 1409 09a2 488B45F0 		movq	-16(%rbp), %rax
 1410 09a6 488D1500 		leaq	.LC21(%rip), %rdx
 1410      000000
 1411 09ad 4889D6   		movq	%rdx, %rsi
 1412 09b0 4889C7   		movq	%rax, %rdi
 1413 09b3 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1413      00
 108:XmlTestReporter.cpp ****     else
 109:XmlTestReporter.cpp ****         os << "/>";
 110:XmlTestReporter.cpp **** }
 1414              		.loc 1 110 1
 1415 09b8 EB16     		jmp	.L68
 1416              	.L66:
 109:XmlTestReporter.cpp **** }
 1417              		.loc 1 109 15
 1418 09ba 488B45F0 		movq	-16(%rbp), %rax
 1419 09be 488D1500 		leaq	.LC22(%rip), %rdx
 1419      000000
 1420 09c5 4889D6   		movq	%rdx, %rsi
 1421 09c8 4889C7   		movq	%rax, %rdi
 1422 09cb E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1422      00
 1423              	.L68:
 1424              		.loc 1 110 1
 1425 09d0 90       		nop
 1426 09d1 C9       		leave
 1427              		.cfi_def_cfa 7, 8
 1428 09d2 C3       		ret
 1429              		.cfi_endproc
 1430              	.LFE1411:
 1432              		.section	.rodata
 1433              	.LC23:
 1434 00c0 3C666169 		.string	"<failure"
 1434      6C757265 
 1434      00
 1435              	.LC24:
 1436 00c9 206D6573 		.string	" message=\""
 1436      73616765 
 1436      3D2200
 1437              		.text
 1438 09d3 90       		.align 2
 1439              		.globl	_ZN8UnitTest15XmlTestReporter10AddFailureERSoRKNS_18DeferredTestResultE
 1441              	_ZN8UnitTest15XmlTestReporter10AddFailureERSoRKNS_18DeferredTestResultE:
 1442              	.LFB1412:
 111:XmlTestReporter.cpp **** 
 112:XmlTestReporter.cpp **** void XmlTestReporter::AddFailure(std::ostream& os, DeferredTestResult const& result)
 113:XmlTestReporter.cpp **** {
 1443              		.loc 1 113 1
 1444              		.cfi_startproc
 1445              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 1446              		.cfi_lsda 0x1b,.LLSDA1412
 1447 09d4 F30F1EFA 		endbr64
 1448 09d8 55       		pushq	%rbp
 1449              		.cfi_def_cfa_offset 16
 1450              		.cfi_offset 6, -16
 1451 09d9 4889E5   		movq	%rsp, %rbp
 1452              		.cfi_def_cfa_register 6
 1453 09dc 53       		pushq	%rbx
 1454 09dd 4881EC88 		subq	$136, %rsp
 1454      000000
 1455              		.cfi_offset 3, -24
 1456 09e4 48897D88 		movq	%rdi, -120(%rbp)
 1457 09e8 48897580 		movq	%rsi, -128(%rbp)
 1458 09ec 48899578 		movq	%rdx, -136(%rbp)
 1458      FFFFFF
 1459              		.loc 1 113 1
 1460 09f3 64488B04 		movq	%fs:40, %rax
 1460      25280000 
 1460      00
 1461 09fc 488945E8 		movq	%rax, -24(%rbp)
 1462 0a00 31C0     		xorl	%eax, %eax
 114:XmlTestReporter.cpp ****     os << ">"; // close <test> element
 1463              		.loc 1 114 11
 1464 0a02 488B4580 		movq	-128(%rbp), %rax
 1465 0a06 488D1500 		leaq	.LC16(%rip), %rdx
 1465      000000
 1466 0a0d 4889D6   		movq	%rdx, %rsi
 1467 0a10 4889C7   		movq	%rax, %rdi
 1468              	.LEHB28:
 1469 0a13 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1469      00
 1470              	.LBB10:
 115:XmlTestReporter.cpp **** 
 116:XmlTestReporter.cpp ****     for (DeferredTestResult::FailureVec::const_iterator it = result.failures.begin(); 
 1471              		.loc 1 116 83
 1472 0a18 488B8578 		movq	-136(%rbp), %rax
 1472      FFFFFF
 1473 0a1f 4883C060 		addq	$96, %rax
 1474 0a23 4889C7   		movq	%rax, %rdi
 1475 0a26 E8000000 		call	_ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE5beginEv@
 1475      00
 1476 0a2b 48894590 		movq	%rax, -112(%rbp)
 1477              		.loc 1 116 5
 1478 0a2f E9D30000 		jmp	.L70
 1478      00
 1479              	.L71:
 1480              	.LBB11:
 117:XmlTestReporter.cpp ****          it != result.failures.end(); 
 118:XmlTestReporter.cpp ****          ++it)
 119:XmlTestReporter.cpp ****     {
 120:XmlTestReporter.cpp ****         string const escapedMessage = XmlEscape(it->second);
 1481              		.loc 1 120 51
 1482 0a34 488D4590 		leaq	-112(%rbp), %rax
 1483 0a38 4889C7   		movq	%rax, %rdi
 1484 0a3b E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaI
 1484      00
 1485              		.loc 1 120 53
 1486 0a40 488D5008 		leaq	8(%rax), %rdx
 1487              		.loc 1 120 59
 1488 0a44 488D45A0 		leaq	-96(%rbp), %rax
 1489 0a48 4889D6   		movq	%rdx, %rsi
 1490 0a4b 4889C7   		movq	%rax, %rdi
 1491 0a4e E828F6FF 		call	_ZN12_GLOBAL__N_19XmlEscapeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
 1491      FF
 1492              	.LEHE28:
 121:XmlTestReporter.cpp ****         string const message = BuildFailureMessage(result.failureFile, it->first, escapedMessage);
 1493              		.loc 1 121 74
 1494 0a53 488D4590 		leaq	-112(%rbp), %rax
 1495 0a57 4889C7   		movq	%rax, %rdi
 1496 0a5a E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaI
 1496      00
 1497              		.loc 1 121 76
 1498 0a5f 8B10     		movl	(%rax), %edx
 1499              		.loc 1 121 59
 1500 0a61 488B8578 		movq	-136(%rbp), %rax
 1500      FFFFFF
 1501 0a68 488D7040 		leaq	64(%rax), %rsi
 1502              		.loc 1 121 97
 1503 0a6c 488D45C0 		leaq	-64(%rbp), %rax
 1504 0a70 488D4DA0 		leaq	-96(%rbp), %rcx
 1505 0a74 4889C7   		movq	%rax, %rdi
 1506              	.LEHB29:
 1507 0a77 E80CF9FF 		call	_ZN12_GLOBAL__N_119BuildFailureMessageERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
 1507      FF
 1508              	.LEHE29:
 122:XmlTestReporter.cpp **** 
 123:XmlTestReporter.cpp ****         os << "<failure" << " message=\"" << message << "\"" << "/>";
 1509              		.loc 1 123 65
 1510 0a7c 488B4580 		movq	-128(%rbp), %rax
 1511 0a80 488D1500 		leaq	.LC23(%rip), %rdx
 1511      000000
 1512 0a87 4889D6   		movq	%rdx, %rsi
 1513 0a8a 4889C7   		movq	%rax, %rdi
 1514              	.LEHB30:
 1515 0a8d E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1515      00
 1516 0a92 4889C2   		movq	%rax, %rdx
 1517 0a95 488D0500 		leaq	.LC24(%rip), %rax
 1517      000000
 1518 0a9c 4889C6   		movq	%rax, %rsi
 1519 0a9f 4889D7   		movq	%rdx, %rdi
 1520 0aa2 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1520      00
 1521              		.loc 1 123 65 is_stmt 0 discriminator 1
 1522 0aa7 4889C2   		movq	%rax, %rdx
 1523 0aaa 488D45C0 		leaq	-64(%rbp), %rax
 1524 0aae 4889C6   		movq	%rax, %rsi
 1525 0ab1 4889D7   		movq	%rdx, %rdi
 1526 0ab4 E8000000 		call	_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKNSt7__cxx1112basic_stringIS4_S5
 1526      00
 1527              		.loc 1 123 65 discriminator 2
 1528 0ab9 4889C2   		movq	%rax, %rdx
 1529 0abc 488D0500 		leaq	.LC9(%rip), %rax
 1529      000000
 1530 0ac3 4889C6   		movq	%rax, %rsi
 1531 0ac6 4889D7   		movq	%rdx, %rdi
 1532 0ac9 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1532      00
 1533              		.loc 1 123 65 discriminator 3
 1534 0ace 4889C2   		movq	%rax, %rdx
 1535 0ad1 488D0500 		leaq	.LC22(%rip), %rax
 1535      000000
 1536 0ad8 4889C6   		movq	%rax, %rsi
 1537 0adb 4889D7   		movq	%rdx, %rdi
 1538 0ade E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1538      00
 1539              	.LEHE30:
 124:XmlTestReporter.cpp ****     }
 1540              		.loc 1 124 5 is_stmt 1
 1541 0ae3 488D45C0 		leaq	-64(%rbp), %rax
 1542 0ae7 4889C7   		movq	%rax, %rdi
 1543              	.LEHB31:
 1544 0aea E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 1544      00
 1545              	.LEHE31:
 1546              		.loc 1 124 5 is_stmt 0 discriminator 2
 1547 0aef 488D45A0 		leaq	-96(%rbp), %rax
 1548 0af3 4889C7   		movq	%rax, %rdi
 1549              	.LEHB32:
 1550 0af6 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 1550      00
 1551              	.LBE11:
 118:XmlTestReporter.cpp ****     {
 1552              		.loc 1 118 12 is_stmt 1 discriminator 2
 1553 0afb 488D4590 		leaq	-112(%rbp), %rax
 1554 0aff 4889C7   		movq	%rax, %rdi
 1555 0b02 E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIc
 1555      00
 1556              	.L70:
 117:XmlTestReporter.cpp ****          ++it)
 1557              		.loc 1 117 35
 1558 0b07 488B8578 		movq	-136(%rbp), %rax
 1558      FFFFFF
 1559 0b0e 4883C060 		addq	$96, %rax
 1560 0b12 4889C7   		movq	%rax, %rdi
 1561 0b15 E8000000 		call	_ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE3endEv@PL
 1561      00
 1562 0b1a 48894598 		movq	%rax, -104(%rbp)
 117:XmlTestReporter.cpp ****          ++it)
 1563              		.loc 1 117 13
 1564 0b1e 488D5598 		leaq	-104(%rbp), %rdx
 1565 0b22 488D4590 		leaq	-112(%rbp), %rax
 1566 0b26 4889D6   		movq	%rdx, %rsi
 1567 0b29 4889C7   		movq	%rax, %rdi
 1568 0b2c E8000000 		call	_ZN9__gnu_cxxneIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_
 1568      00
 1569              	.LEHE32:
 1570 0b31 84C0     		testb	%al, %al
 1571 0b33 0F85FBFE 		jne	.L71
 1571      FFFF
 1572              	.LBE10:
 125:XmlTestReporter.cpp **** }
 1573              		.loc 1 125 1
 1574 0b39 EB33     		jmp	.L77
 1575              	.L76:
 1576 0b3b F30F1EFA 		endbr64
 1577              	.LBB13:
 1578              	.LBB12:
 124:XmlTestReporter.cpp **** }
 1579              		.loc 1 124 5
 1580 0b3f 4889C3   		movq	%rax, %rbx
 1581 0b42 488D45C0 		leaq	-64(%rbp), %rax
 1582 0b46 4889C7   		movq	%rax, %rdi
 1583 0b49 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 1583      00
 1584 0b4e EB07     		jmp	.L73
 1585              	.L75:
 1586 0b50 F30F1EFA 		endbr64
 1587 0b54 4889C3   		movq	%rax, %rbx
 1588              	.L73:
 124:XmlTestReporter.cpp **** }
 1589              		.loc 1 124 5 is_stmt 0 discriminator 1
 1590 0b57 488D45A0 		leaq	-96(%rbp), %rax
 1591 0b5b 4889C7   		movq	%rax, %rdi
 1592 0b5e E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 1592      00
 1593 0b63 4889D8   		movq	%rbx, %rax
 1594 0b66 4889C7   		movq	%rax, %rdi
 1595              	.LEHB33:
 1596 0b69 E8000000 		call	_Unwind_Resume@PLT
 1596      00
 1597              	.LEHE33:
 1598              	.L77:
 1599              	.LBE12:
 1600              	.LBE13:
 1601              		.loc 1 125 1 is_stmt 1
 1602 0b6e 488B45E8 		movq	-24(%rbp), %rax
 1603 0b72 64482B04 		subq	%fs:40, %rax
 1603      25280000 
 1603      00
 1604 0b7b 7405     		je	.L74
 1605 0b7d E8000000 		call	__stack_chk_fail@PLT
 1605      00
 1606              	.L74:
 1607 0b82 488B5DF8 		movq	-8(%rbp), %rbx
 1608 0b86 C9       		leave
 1609              		.cfi_def_cfa 7, 8
 1610 0b87 C3       		ret
 1611              		.cfi_endproc
 1612              	.LFE1412:
 1613              		.section	.gcc_except_table
 1614              	.LLSDA1412:
 1615 00a7 FF       		.byte	0xff
 1616 00a8 FF       		.byte	0xff
 1617 00a9 01       		.byte	0x1
 1618 00aa 20       		.uleb128 .LLSDACSE1412-.LLSDACSB1412
 1619              	.LLSDACSB1412:
 1620 00ab 3F       		.uleb128 .LEHB28-.LFB1412
 1621 00ac 40       		.uleb128 .LEHE28-.LEHB28
 1622 00ad 00       		.uleb128 0
 1623 00ae 00       		.uleb128 0
 1624 00af A301     		.uleb128 .LEHB29-.LFB1412
 1625 00b1 05       		.uleb128 .LEHE29-.LEHB29
 1626 00b2 FC02     		.uleb128 .L75-.LFB1412
 1627 00b4 00       		.uleb128 0
 1628 00b5 B901     		.uleb128 .LEHB30-.LFB1412
 1629 00b7 56       		.uleb128 .LEHE30-.LEHB30
 1630 00b8 E702     		.uleb128 .L76-.LFB1412
 1631 00ba 00       		.uleb128 0
 1632 00bb 9602     		.uleb128 .LEHB31-.LFB1412
 1633 00bd 05       		.uleb128 .LEHE31-.LEHB31
 1634 00be FC02     		.uleb128 .L75-.LFB1412
 1635 00c0 00       		.uleb128 0
 1636 00c1 A202     		.uleb128 .LEHB32-.LFB1412
 1637 00c3 3B       		.uleb128 .LEHE32-.LEHB32
 1638 00c4 00       		.uleb128 0
 1639 00c5 00       		.uleb128 0
 1640 00c6 9503     		.uleb128 .LEHB33-.LFB1412
 1641 00c8 05       		.uleb128 .LEHE33-.LEHB33
 1642 00c9 00       		.uleb128 0
 1643 00ca 00       		.uleb128 0
 1644              	.LLSDACSE1412:
 1645              		.text
 1647              		.section	.text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev,"axG",@progbits,_ZNSt6vect
 1648              		.align 2
 1649              		.weak	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev
 1651              	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev:
 1652              	.LFB1447:
 1653              		.file 4 "/usr/include/c++/11/bits/stl_vector.h"
   1:/usr/include/c++/11/bits/stl_vector.h **** // Vector implementation -*- C++ -*-
   2:/usr/include/c++/11/bits/stl_vector.h **** 
   3:/usr/include/c++/11/bits/stl_vector.h **** // Copyright (C) 2001-2021 Free Software Foundation, Inc.
   4:/usr/include/c++/11/bits/stl_vector.h **** //
   5:/usr/include/c++/11/bits/stl_vector.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/11/bits/stl_vector.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/11/bits/stl_vector.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/11/bits/stl_vector.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/11/bits/stl_vector.h **** // any later version.
  10:/usr/include/c++/11/bits/stl_vector.h **** 
  11:/usr/include/c++/11/bits/stl_vector.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/11/bits/stl_vector.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/11/bits/stl_vector.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/11/bits/stl_vector.h **** // GNU General Public License for more details.
  15:/usr/include/c++/11/bits/stl_vector.h **** 
  16:/usr/include/c++/11/bits/stl_vector.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/11/bits/stl_vector.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/11/bits/stl_vector.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/11/bits/stl_vector.h **** 
  20:/usr/include/c++/11/bits/stl_vector.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/11/bits/stl_vector.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/11/bits/stl_vector.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/11/bits/stl_vector.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/11/bits/stl_vector.h **** 
  25:/usr/include/c++/11/bits/stl_vector.h **** /*
  26:/usr/include/c++/11/bits/stl_vector.h ****  *
  27:/usr/include/c++/11/bits/stl_vector.h ****  * Copyright (c) 1994
  28:/usr/include/c++/11/bits/stl_vector.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/11/bits/stl_vector.h ****  *
  30:/usr/include/c++/11/bits/stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/11/bits/stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/11/bits/stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/11/bits/stl_vector.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/11/bits/stl_vector.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/11/bits/stl_vector.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/11/bits/stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/11/bits/stl_vector.h ****  *
  38:/usr/include/c++/11/bits/stl_vector.h ****  *
  39:/usr/include/c++/11/bits/stl_vector.h ****  * Copyright (c) 1996
  40:/usr/include/c++/11/bits/stl_vector.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/11/bits/stl_vector.h ****  *
  42:/usr/include/c++/11/bits/stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/11/bits/stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/11/bits/stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/11/bits/stl_vector.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/11/bits/stl_vector.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/11/bits/stl_vector.h ****  * representations about the suitability of this  software for any
  48:/usr/include/c++/11/bits/stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/11/bits/stl_vector.h ****  */
  50:/usr/include/c++/11/bits/stl_vector.h **** 
  51:/usr/include/c++/11/bits/stl_vector.h **** /** @file bits/stl_vector.h
  52:/usr/include/c++/11/bits/stl_vector.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/11/bits/stl_vector.h ****  *  Do not attempt to use it directly. @headername{vector}
  54:/usr/include/c++/11/bits/stl_vector.h ****  */
  55:/usr/include/c++/11/bits/stl_vector.h **** 
  56:/usr/include/c++/11/bits/stl_vector.h **** #ifndef _STL_VECTOR_H
  57:/usr/include/c++/11/bits/stl_vector.h **** #define _STL_VECTOR_H 1
  58:/usr/include/c++/11/bits/stl_vector.h **** 
  59:/usr/include/c++/11/bits/stl_vector.h **** #include <bits/stl_iterator_base_funcs.h>
  60:/usr/include/c++/11/bits/stl_vector.h **** #include <bits/functexcept.h>
  61:/usr/include/c++/11/bits/stl_vector.h **** #include <bits/concept_check.h>
  62:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
  63:/usr/include/c++/11/bits/stl_vector.h **** #include <initializer_list>
  64:/usr/include/c++/11/bits/stl_vector.h **** #endif
  65:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus > 201703L
  66:/usr/include/c++/11/bits/stl_vector.h **** # include <compare>
  67:/usr/include/c++/11/bits/stl_vector.h **** #endif
  68:/usr/include/c++/11/bits/stl_vector.h **** 
  69:/usr/include/c++/11/bits/stl_vector.h **** #include <debug/assertions.h>
  70:/usr/include/c++/11/bits/stl_vector.h **** 
  71:/usr/include/c++/11/bits/stl_vector.h **** #if _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
  72:/usr/include/c++/11/bits/stl_vector.h **** extern "C" void
  73:/usr/include/c++/11/bits/stl_vector.h **** __sanitizer_annotate_contiguous_container(const void*, const void*,
  74:/usr/include/c++/11/bits/stl_vector.h **** 					  const void*, const void*);
  75:/usr/include/c++/11/bits/stl_vector.h **** #endif
  76:/usr/include/c++/11/bits/stl_vector.h **** 
  77:/usr/include/c++/11/bits/stl_vector.h **** namespace std _GLIBCXX_VISIBILITY(default)
  78:/usr/include/c++/11/bits/stl_vector.h **** {
  79:/usr/include/c++/11/bits/stl_vector.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  80:/usr/include/c++/11/bits/stl_vector.h **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  81:/usr/include/c++/11/bits/stl_vector.h **** 
  82:/usr/include/c++/11/bits/stl_vector.h ****   /// See bits/stl_deque.h's _Deque_base for an explanation.
  83:/usr/include/c++/11/bits/stl_vector.h ****   template<typename _Tp, typename _Alloc>
  84:/usr/include/c++/11/bits/stl_vector.h ****     struct _Vector_base
  85:/usr/include/c++/11/bits/stl_vector.h ****     {
  86:/usr/include/c++/11/bits/stl_vector.h ****       typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
  87:/usr/include/c++/11/bits/stl_vector.h **** 	rebind<_Tp>::other _Tp_alloc_type;
  88:/usr/include/c++/11/bits/stl_vector.h ****       typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer
  89:/usr/include/c++/11/bits/stl_vector.h ****        	pointer;
  90:/usr/include/c++/11/bits/stl_vector.h **** 
  91:/usr/include/c++/11/bits/stl_vector.h ****       struct _Vector_impl_data
  92:/usr/include/c++/11/bits/stl_vector.h ****       {
  93:/usr/include/c++/11/bits/stl_vector.h **** 	pointer _M_start;
  94:/usr/include/c++/11/bits/stl_vector.h **** 	pointer _M_finish;
  95:/usr/include/c++/11/bits/stl_vector.h **** 	pointer _M_end_of_storage;
  96:/usr/include/c++/11/bits/stl_vector.h **** 
  97:/usr/include/c++/11/bits/stl_vector.h **** 	_Vector_impl_data() _GLIBCXX_NOEXCEPT
  98:/usr/include/c++/11/bits/stl_vector.h **** 	: _M_start(), _M_finish(), _M_end_of_storage()
  99:/usr/include/c++/11/bits/stl_vector.h **** 	{ }
 100:/usr/include/c++/11/bits/stl_vector.h **** 
 101:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
 102:/usr/include/c++/11/bits/stl_vector.h **** 	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
 103:/usr/include/c++/11/bits/stl_vector.h **** 	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 104:/usr/include/c++/11/bits/stl_vector.h **** 	  _M_end_of_storage(__x._M_end_of_storage)
 105:/usr/include/c++/11/bits/stl_vector.h **** 	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 106:/usr/include/c++/11/bits/stl_vector.h **** #endif
 107:/usr/include/c++/11/bits/stl_vector.h **** 
 108:/usr/include/c++/11/bits/stl_vector.h **** 	void
 109:/usr/include/c++/11/bits/stl_vector.h **** 	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
 110:/usr/include/c++/11/bits/stl_vector.h **** 	{
 111:/usr/include/c++/11/bits/stl_vector.h **** 	  _M_start = __x._M_start;
 112:/usr/include/c++/11/bits/stl_vector.h **** 	  _M_finish = __x._M_finish;
 113:/usr/include/c++/11/bits/stl_vector.h **** 	  _M_end_of_storage = __x._M_end_of_storage;
 114:/usr/include/c++/11/bits/stl_vector.h **** 	}
 115:/usr/include/c++/11/bits/stl_vector.h **** 
 116:/usr/include/c++/11/bits/stl_vector.h **** 	void
 117:/usr/include/c++/11/bits/stl_vector.h **** 	_M_swap_data(_Vector_impl_data& __x) _GLIBCXX_NOEXCEPT
 118:/usr/include/c++/11/bits/stl_vector.h **** 	{
 119:/usr/include/c++/11/bits/stl_vector.h **** 	  // Do not use std::swap(_M_start, __x._M_start), etc as it loses
 120:/usr/include/c++/11/bits/stl_vector.h **** 	  // information used by TBAA.
 121:/usr/include/c++/11/bits/stl_vector.h **** 	  _Vector_impl_data __tmp;
 122:/usr/include/c++/11/bits/stl_vector.h **** 	  __tmp._M_copy_data(*this);
 123:/usr/include/c++/11/bits/stl_vector.h **** 	  _M_copy_data(__x);
 124:/usr/include/c++/11/bits/stl_vector.h **** 	  __x._M_copy_data(__tmp);
 125:/usr/include/c++/11/bits/stl_vector.h **** 	}
 126:/usr/include/c++/11/bits/stl_vector.h ****       };
 127:/usr/include/c++/11/bits/stl_vector.h **** 
 128:/usr/include/c++/11/bits/stl_vector.h ****       struct _Vector_impl
 129:/usr/include/c++/11/bits/stl_vector.h **** 	: public _Tp_alloc_type, public _Vector_impl_data
 130:/usr/include/c++/11/bits/stl_vector.h ****       {
 131:/usr/include/c++/11/bits/stl_vector.h **** 	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 132:/usr/include/c++/11/bits/stl_vector.h **** 	    is_nothrow_default_constructible<_Tp_alloc_type>::value)
 133:/usr/include/c++/11/bits/stl_vector.h **** 	: _Tp_alloc_type()
 134:/usr/include/c++/11/bits/stl_vector.h **** 	{ }
 135:/usr/include/c++/11/bits/stl_vector.h **** 
 136:/usr/include/c++/11/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 137:/usr/include/c++/11/bits/stl_vector.h **** 	: _Tp_alloc_type(__a)
 138:/usr/include/c++/11/bits/stl_vector.h **** 	{ }
 139:/usr/include/c++/11/bits/stl_vector.h **** 
 140:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
 141:/usr/include/c++/11/bits/stl_vector.h **** 	// Not defaulted, to enforce noexcept(true) even when
 142:/usr/include/c++/11/bits/stl_vector.h **** 	// !is_nothrow_move_constructible<_Tp_alloc_type>.
 143:/usr/include/c++/11/bits/stl_vector.h **** 	_Vector_impl(_Vector_impl&& __x) noexcept
 144:/usr/include/c++/11/bits/stl_vector.h **** 	: _Tp_alloc_type(std::move(__x)), _Vector_impl_data(std::move(__x))
 145:/usr/include/c++/11/bits/stl_vector.h **** 	{ }
 146:/usr/include/c++/11/bits/stl_vector.h **** 
 147:/usr/include/c++/11/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type&& __a) noexcept
 148:/usr/include/c++/11/bits/stl_vector.h **** 	: _Tp_alloc_type(std::move(__a))
 149:/usr/include/c++/11/bits/stl_vector.h **** 	{ }
 150:/usr/include/c++/11/bits/stl_vector.h **** 
 151:/usr/include/c++/11/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type&& __a, _Vector_impl&& __rv) noexcept
 152:/usr/include/c++/11/bits/stl_vector.h **** 	: _Tp_alloc_type(std::move(__a)), _Vector_impl_data(std::move(__rv))
 153:/usr/include/c++/11/bits/stl_vector.h **** 	{ }
 154:/usr/include/c++/11/bits/stl_vector.h **** #endif
 155:/usr/include/c++/11/bits/stl_vector.h **** 
 156:/usr/include/c++/11/bits/stl_vector.h **** #if _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
 157:/usr/include/c++/11/bits/stl_vector.h **** 	template<typename = _Tp_alloc_type>
 158:/usr/include/c++/11/bits/stl_vector.h **** 	  struct _Asan
 159:/usr/include/c++/11/bits/stl_vector.h **** 	  {
 160:/usr/include/c++/11/bits/stl_vector.h **** 	    typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>
 161:/usr/include/c++/11/bits/stl_vector.h **** 	      ::size_type size_type;
 162:/usr/include/c++/11/bits/stl_vector.h **** 
 163:/usr/include/c++/11/bits/stl_vector.h **** 	    static void _S_shrink(_Vector_impl&, size_type) { }
 164:/usr/include/c++/11/bits/stl_vector.h **** 	    static void _S_on_dealloc(_Vector_impl&) { }
 165:/usr/include/c++/11/bits/stl_vector.h **** 
 166:/usr/include/c++/11/bits/stl_vector.h **** 	    typedef _Vector_impl& _Reinit;
 167:/usr/include/c++/11/bits/stl_vector.h **** 
 168:/usr/include/c++/11/bits/stl_vector.h **** 	    struct _Grow
 169:/usr/include/c++/11/bits/stl_vector.h **** 	    {
 170:/usr/include/c++/11/bits/stl_vector.h **** 	      _Grow(_Vector_impl&, size_type) { }
 171:/usr/include/c++/11/bits/stl_vector.h **** 	      void _M_grew(size_type) { }
 172:/usr/include/c++/11/bits/stl_vector.h **** 	    };
 173:/usr/include/c++/11/bits/stl_vector.h **** 	  };
 174:/usr/include/c++/11/bits/stl_vector.h **** 
 175:/usr/include/c++/11/bits/stl_vector.h **** 	// Enable ASan annotations for memory obtained from std::allocator.
 176:/usr/include/c++/11/bits/stl_vector.h **** 	template<typename _Up>
 177:/usr/include/c++/11/bits/stl_vector.h **** 	  struct _Asan<allocator<_Up> >
 178:/usr/include/c++/11/bits/stl_vector.h **** 	  {
 179:/usr/include/c++/11/bits/stl_vector.h **** 	    typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>
 180:/usr/include/c++/11/bits/stl_vector.h **** 	      ::size_type size_type;
 181:/usr/include/c++/11/bits/stl_vector.h **** 
 182:/usr/include/c++/11/bits/stl_vector.h **** 	    // Adjust ASan annotation for [_M_start, _M_end_of_storage) to
 183:/usr/include/c++/11/bits/stl_vector.h **** 	    // mark end of valid region as __curr instead of __prev.
 184:/usr/include/c++/11/bits/stl_vector.h **** 	    static void
 185:/usr/include/c++/11/bits/stl_vector.h **** 	    _S_adjust(_Vector_impl& __impl, pointer __prev, pointer __curr)
 186:/usr/include/c++/11/bits/stl_vector.h **** 	    {
 187:/usr/include/c++/11/bits/stl_vector.h **** 	      __sanitizer_annotate_contiguous_container(__impl._M_start,
 188:/usr/include/c++/11/bits/stl_vector.h **** 		  __impl._M_end_of_storage, __prev, __curr);
 189:/usr/include/c++/11/bits/stl_vector.h **** 	    }
 190:/usr/include/c++/11/bits/stl_vector.h **** 
 191:/usr/include/c++/11/bits/stl_vector.h **** 	    static void
 192:/usr/include/c++/11/bits/stl_vector.h **** 	    _S_grow(_Vector_impl& __impl, size_type __n)
 193:/usr/include/c++/11/bits/stl_vector.h **** 	    { _S_adjust(__impl, __impl._M_finish, __impl._M_finish + __n); }
 194:/usr/include/c++/11/bits/stl_vector.h **** 
 195:/usr/include/c++/11/bits/stl_vector.h **** 	    static void
 196:/usr/include/c++/11/bits/stl_vector.h **** 	    _S_shrink(_Vector_impl& __impl, size_type __n)
 197:/usr/include/c++/11/bits/stl_vector.h **** 	    { _S_adjust(__impl, __impl._M_finish + __n, __impl._M_finish); }
 198:/usr/include/c++/11/bits/stl_vector.h **** 
 199:/usr/include/c++/11/bits/stl_vector.h **** 	    static void
 200:/usr/include/c++/11/bits/stl_vector.h **** 	    _S_on_dealloc(_Vector_impl& __impl)
 201:/usr/include/c++/11/bits/stl_vector.h **** 	    {
 202:/usr/include/c++/11/bits/stl_vector.h **** 	      if (__impl._M_start)
 203:/usr/include/c++/11/bits/stl_vector.h **** 		_S_adjust(__impl, __impl._M_finish, __impl._M_end_of_storage);
 204:/usr/include/c++/11/bits/stl_vector.h **** 	    }
 205:/usr/include/c++/11/bits/stl_vector.h **** 
 206:/usr/include/c++/11/bits/stl_vector.h **** 	    // Used on reallocation to tell ASan unused capacity is invalid.
 207:/usr/include/c++/11/bits/stl_vector.h **** 	    struct _Reinit
 208:/usr/include/c++/11/bits/stl_vector.h **** 	    {
 209:/usr/include/c++/11/bits/stl_vector.h **** 	      explicit _Reinit(_Vector_impl& __impl) : _M_impl(__impl)
 210:/usr/include/c++/11/bits/stl_vector.h **** 	      {
 211:/usr/include/c++/11/bits/stl_vector.h **** 		// Mark unused capacity as valid again before deallocating it.
 212:/usr/include/c++/11/bits/stl_vector.h **** 		_S_on_dealloc(_M_impl);
 213:/usr/include/c++/11/bits/stl_vector.h **** 	      }
 214:/usr/include/c++/11/bits/stl_vector.h **** 
 215:/usr/include/c++/11/bits/stl_vector.h **** 	      ~_Reinit()
 216:/usr/include/c++/11/bits/stl_vector.h **** 	      {
 217:/usr/include/c++/11/bits/stl_vector.h **** 		// Mark unused capacity as invalid after reallocation.
 218:/usr/include/c++/11/bits/stl_vector.h **** 		if (_M_impl._M_start)
 219:/usr/include/c++/11/bits/stl_vector.h **** 		  _S_adjust(_M_impl, _M_impl._M_end_of_storage,
 220:/usr/include/c++/11/bits/stl_vector.h **** 			    _M_impl._M_finish);
 221:/usr/include/c++/11/bits/stl_vector.h **** 	      }
 222:/usr/include/c++/11/bits/stl_vector.h **** 
 223:/usr/include/c++/11/bits/stl_vector.h **** 	      _Vector_impl& _M_impl;
 224:/usr/include/c++/11/bits/stl_vector.h **** 
 225:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
 226:/usr/include/c++/11/bits/stl_vector.h **** 	      _Reinit(const _Reinit&) = delete;
 227:/usr/include/c++/11/bits/stl_vector.h **** 	      _Reinit& operator=(const _Reinit&) = delete;
 228:/usr/include/c++/11/bits/stl_vector.h **** #endif
 229:/usr/include/c++/11/bits/stl_vector.h **** 	    };
 230:/usr/include/c++/11/bits/stl_vector.h **** 
 231:/usr/include/c++/11/bits/stl_vector.h **** 	    // Tell ASan when unused capacity is initialized to be valid.
 232:/usr/include/c++/11/bits/stl_vector.h **** 	    struct _Grow
 233:/usr/include/c++/11/bits/stl_vector.h **** 	    {
 234:/usr/include/c++/11/bits/stl_vector.h **** 	      _Grow(_Vector_impl& __impl, size_type __n)
 235:/usr/include/c++/11/bits/stl_vector.h **** 	      : _M_impl(__impl), _M_n(__n)
 236:/usr/include/c++/11/bits/stl_vector.h **** 	      { _S_grow(_M_impl, __n); }
 237:/usr/include/c++/11/bits/stl_vector.h **** 
 238:/usr/include/c++/11/bits/stl_vector.h **** 	      ~_Grow() { if (_M_n) _S_shrink(_M_impl, _M_n); }
 239:/usr/include/c++/11/bits/stl_vector.h **** 
 240:/usr/include/c++/11/bits/stl_vector.h **** 	      void _M_grew(size_type __n) { _M_n -= __n; }
 241:/usr/include/c++/11/bits/stl_vector.h **** 
 242:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
 243:/usr/include/c++/11/bits/stl_vector.h **** 	      _Grow(const _Grow&) = delete;
 244:/usr/include/c++/11/bits/stl_vector.h **** 	      _Grow& operator=(const _Grow&) = delete;
 245:/usr/include/c++/11/bits/stl_vector.h **** #endif
 246:/usr/include/c++/11/bits/stl_vector.h **** 	    private:
 247:/usr/include/c++/11/bits/stl_vector.h **** 	      _Vector_impl& _M_impl;
 248:/usr/include/c++/11/bits/stl_vector.h **** 	      size_type _M_n;
 249:/usr/include/c++/11/bits/stl_vector.h **** 	    };
 250:/usr/include/c++/11/bits/stl_vector.h **** 	  };
 251:/usr/include/c++/11/bits/stl_vector.h **** 
 252:/usr/include/c++/11/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_REINIT \
 253:/usr/include/c++/11/bits/stl_vector.h ****   typename _Base::_Vector_impl::template _Asan<>::_Reinit const \
 254:/usr/include/c++/11/bits/stl_vector.h **** 	__attribute__((__unused__)) __reinit_guard(this->_M_impl)
 255:/usr/include/c++/11/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GROW(n) \
 256:/usr/include/c++/11/bits/stl_vector.h ****   typename _Base::_Vector_impl::template _Asan<>::_Grow \
 257:/usr/include/c++/11/bits/stl_vector.h **** 	__attribute__((__unused__)) __grow_guard(this->_M_impl, (n))
 258:/usr/include/c++/11/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GREW(n) __grow_guard._M_grew(n)
 259:/usr/include/c++/11/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_SHRINK(n) \
 260:/usr/include/c++/11/bits/stl_vector.h ****   _Base::_Vector_impl::template _Asan<>::_S_shrink(this->_M_impl, n)
 261:/usr/include/c++/11/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC \
 262:/usr/include/c++/11/bits/stl_vector.h ****   _Base::_Vector_impl::template _Asan<>::_S_on_dealloc(this->_M_impl)
 263:/usr/include/c++/11/bits/stl_vector.h **** #else // ! (_GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR)
 264:/usr/include/c++/11/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_REINIT
 265:/usr/include/c++/11/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GROW(n)
 266:/usr/include/c++/11/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GREW(n)
 267:/usr/include/c++/11/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_SHRINK(n)
 268:/usr/include/c++/11/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC
 269:/usr/include/c++/11/bits/stl_vector.h **** #endif // _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
 270:/usr/include/c++/11/bits/stl_vector.h ****       };
 271:/usr/include/c++/11/bits/stl_vector.h **** 
 272:/usr/include/c++/11/bits/stl_vector.h ****     public:
 273:/usr/include/c++/11/bits/stl_vector.h ****       typedef _Alloc allocator_type;
 274:/usr/include/c++/11/bits/stl_vector.h **** 
 275:/usr/include/c++/11/bits/stl_vector.h ****       _Tp_alloc_type&
 276:/usr/include/c++/11/bits/stl_vector.h ****       _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 277:/usr/include/c++/11/bits/stl_vector.h ****       { return this->_M_impl; }
 278:/usr/include/c++/11/bits/stl_vector.h **** 
 279:/usr/include/c++/11/bits/stl_vector.h ****       const _Tp_alloc_type&
 280:/usr/include/c++/11/bits/stl_vector.h ****       _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 281:/usr/include/c++/11/bits/stl_vector.h ****       { return this->_M_impl; }
 282:/usr/include/c++/11/bits/stl_vector.h **** 
 283:/usr/include/c++/11/bits/stl_vector.h ****       allocator_type
 284:/usr/include/c++/11/bits/stl_vector.h ****       get_allocator() const _GLIBCXX_NOEXCEPT
 285:/usr/include/c++/11/bits/stl_vector.h ****       { return allocator_type(_M_get_Tp_allocator()); }
 286:/usr/include/c++/11/bits/stl_vector.h **** 
 287:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
 288:/usr/include/c++/11/bits/stl_vector.h ****       _Vector_base() = default;
 289:/usr/include/c++/11/bits/stl_vector.h **** #else
 290:/usr/include/c++/11/bits/stl_vector.h ****       _Vector_base() { }
 291:/usr/include/c++/11/bits/stl_vector.h **** #endif
 292:/usr/include/c++/11/bits/stl_vector.h **** 
 293:/usr/include/c++/11/bits/stl_vector.h ****       _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 294:/usr/include/c++/11/bits/stl_vector.h ****       : _M_impl(__a) { }
 295:/usr/include/c++/11/bits/stl_vector.h **** 
 296:/usr/include/c++/11/bits/stl_vector.h ****       // Kept for ABI compatibility.
 297:/usr/include/c++/11/bits/stl_vector.h **** #if !_GLIBCXX_INLINE_VERSION
 298:/usr/include/c++/11/bits/stl_vector.h ****       _Vector_base(size_t __n)
 299:/usr/include/c++/11/bits/stl_vector.h ****       : _M_impl()
 300:/usr/include/c++/11/bits/stl_vector.h ****       { _M_create_storage(__n); }
 301:/usr/include/c++/11/bits/stl_vector.h **** #endif
 302:/usr/include/c++/11/bits/stl_vector.h **** 
 303:/usr/include/c++/11/bits/stl_vector.h ****       _Vector_base(size_t __n, const allocator_type& __a)
 304:/usr/include/c++/11/bits/stl_vector.h ****       : _M_impl(__a)
 305:/usr/include/c++/11/bits/stl_vector.h ****       { _M_create_storage(__n); }
 306:/usr/include/c++/11/bits/stl_vector.h **** 
 307:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
 308:/usr/include/c++/11/bits/stl_vector.h ****       _Vector_base(_Vector_base&&) = default;
 309:/usr/include/c++/11/bits/stl_vector.h **** 
 310:/usr/include/c++/11/bits/stl_vector.h ****       // Kept for ABI compatibility.
 311:/usr/include/c++/11/bits/stl_vector.h **** # if !_GLIBCXX_INLINE_VERSION
 312:/usr/include/c++/11/bits/stl_vector.h ****       _Vector_base(_Tp_alloc_type&& __a) noexcept
 313:/usr/include/c++/11/bits/stl_vector.h ****       : _M_impl(std::move(__a)) { }
 314:/usr/include/c++/11/bits/stl_vector.h **** 
 315:/usr/include/c++/11/bits/stl_vector.h ****       _Vector_base(_Vector_base&& __x, const allocator_type& __a)
 316:/usr/include/c++/11/bits/stl_vector.h ****       : _M_impl(__a)
 317:/usr/include/c++/11/bits/stl_vector.h ****       {
 318:/usr/include/c++/11/bits/stl_vector.h **** 	if (__x.get_allocator() == __a)
 319:/usr/include/c++/11/bits/stl_vector.h **** 	  this->_M_impl._M_swap_data(__x._M_impl);
 320:/usr/include/c++/11/bits/stl_vector.h **** 	else
 321:/usr/include/c++/11/bits/stl_vector.h **** 	  {
 322:/usr/include/c++/11/bits/stl_vector.h **** 	    size_t __n = __x._M_impl._M_finish - __x._M_impl._M_start;
 323:/usr/include/c++/11/bits/stl_vector.h **** 	    _M_create_storage(__n);
 324:/usr/include/c++/11/bits/stl_vector.h **** 	  }
 325:/usr/include/c++/11/bits/stl_vector.h ****       }
 326:/usr/include/c++/11/bits/stl_vector.h **** # endif
 327:/usr/include/c++/11/bits/stl_vector.h **** 
 328:/usr/include/c++/11/bits/stl_vector.h ****       _Vector_base(const allocator_type& __a, _Vector_base&& __x)
 329:/usr/include/c++/11/bits/stl_vector.h ****       : _M_impl(_Tp_alloc_type(__a), std::move(__x._M_impl))
 330:/usr/include/c++/11/bits/stl_vector.h ****       { }
 331:/usr/include/c++/11/bits/stl_vector.h **** #endif
 332:/usr/include/c++/11/bits/stl_vector.h **** 
 333:/usr/include/c++/11/bits/stl_vector.h ****       ~_Vector_base() _GLIBCXX_NOEXCEPT
 334:/usr/include/c++/11/bits/stl_vector.h ****       {
 335:/usr/include/c++/11/bits/stl_vector.h **** 	_M_deallocate(_M_impl._M_start,
 336:/usr/include/c++/11/bits/stl_vector.h **** 		      _M_impl._M_end_of_storage - _M_impl._M_start);
 337:/usr/include/c++/11/bits/stl_vector.h ****       }
 338:/usr/include/c++/11/bits/stl_vector.h **** 
 339:/usr/include/c++/11/bits/stl_vector.h ****     public:
 340:/usr/include/c++/11/bits/stl_vector.h ****       _Vector_impl _M_impl;
 341:/usr/include/c++/11/bits/stl_vector.h **** 
 342:/usr/include/c++/11/bits/stl_vector.h ****       pointer
 343:/usr/include/c++/11/bits/stl_vector.h ****       _M_allocate(size_t __n)
 344:/usr/include/c++/11/bits/stl_vector.h ****       {
 345:/usr/include/c++/11/bits/stl_vector.h **** 	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 346:/usr/include/c++/11/bits/stl_vector.h **** 	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 347:/usr/include/c++/11/bits/stl_vector.h ****       }
 348:/usr/include/c++/11/bits/stl_vector.h **** 
 349:/usr/include/c++/11/bits/stl_vector.h ****       void
 350:/usr/include/c++/11/bits/stl_vector.h ****       _M_deallocate(pointer __p, size_t __n)
 351:/usr/include/c++/11/bits/stl_vector.h ****       {
 352:/usr/include/c++/11/bits/stl_vector.h **** 	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 353:/usr/include/c++/11/bits/stl_vector.h **** 	if (__p)
 354:/usr/include/c++/11/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 355:/usr/include/c++/11/bits/stl_vector.h ****       }
 356:/usr/include/c++/11/bits/stl_vector.h **** 
 357:/usr/include/c++/11/bits/stl_vector.h ****     protected:
 358:/usr/include/c++/11/bits/stl_vector.h ****       void
 359:/usr/include/c++/11/bits/stl_vector.h ****       _M_create_storage(size_t __n)
 360:/usr/include/c++/11/bits/stl_vector.h ****       {
 361:/usr/include/c++/11/bits/stl_vector.h **** 	this->_M_impl._M_start = this->_M_allocate(__n);
 362:/usr/include/c++/11/bits/stl_vector.h **** 	this->_M_impl._M_finish = this->_M_impl._M_start;
 363:/usr/include/c++/11/bits/stl_vector.h **** 	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 364:/usr/include/c++/11/bits/stl_vector.h ****       }
 365:/usr/include/c++/11/bits/stl_vector.h ****     };
 366:/usr/include/c++/11/bits/stl_vector.h **** 
 367:/usr/include/c++/11/bits/stl_vector.h ****   /**
 368:/usr/include/c++/11/bits/stl_vector.h ****    *  @brief A standard container which offers fixed time access to
 369:/usr/include/c++/11/bits/stl_vector.h ****    *  individual elements in any order.
 370:/usr/include/c++/11/bits/stl_vector.h ****    *
 371:/usr/include/c++/11/bits/stl_vector.h ****    *  @ingroup sequences
 372:/usr/include/c++/11/bits/stl_vector.h ****    *
 373:/usr/include/c++/11/bits/stl_vector.h ****    *  @tparam _Tp  Type of element.
 374:/usr/include/c++/11/bits/stl_vector.h ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_Tp>.
 375:/usr/include/c++/11/bits/stl_vector.h ****    *
 376:/usr/include/c++/11/bits/stl_vector.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
 377:/usr/include/c++/11/bits/stl_vector.h ****    *  <a href="tables.html#66">reversible container</a>, and a
 378:/usr/include/c++/11/bits/stl_vector.h ****    *  <a href="tables.html#67">sequence</a>, including the
 379:/usr/include/c++/11/bits/stl_vector.h ****    *  <a href="tables.html#68">optional sequence requirements</a> with the
 380:/usr/include/c++/11/bits/stl_vector.h ****    *  %exception of @c push_front and @c pop_front.
 381:/usr/include/c++/11/bits/stl_vector.h ****    *
 382:/usr/include/c++/11/bits/stl_vector.h ****    *  In some terminology a %vector can be described as a dynamic
 383:/usr/include/c++/11/bits/stl_vector.h ****    *  C-style array, it offers fast and efficient access to individual
 384:/usr/include/c++/11/bits/stl_vector.h ****    *  elements in any order and saves the user from worrying about
 385:/usr/include/c++/11/bits/stl_vector.h ****    *  memory and size allocation.  Subscripting ( @c [] ) access is
 386:/usr/include/c++/11/bits/stl_vector.h ****    *  also provided as with C-style arrays.
 387:/usr/include/c++/11/bits/stl_vector.h ****   */
 388:/usr/include/c++/11/bits/stl_vector.h ****   template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
 389:/usr/include/c++/11/bits/stl_vector.h ****     class vector : protected _Vector_base<_Tp, _Alloc>
 390:/usr/include/c++/11/bits/stl_vector.h ****     {
 391:/usr/include/c++/11/bits/stl_vector.h **** #ifdef _GLIBCXX_CONCEPT_CHECKS
 392:/usr/include/c++/11/bits/stl_vector.h ****       // Concept requirements.
 393:/usr/include/c++/11/bits/stl_vector.h ****       typedef typename _Alloc::value_type		_Alloc_value_type;
 394:/usr/include/c++/11/bits/stl_vector.h **** # if __cplusplus < 201103L
 395:/usr/include/c++/11/bits/stl_vector.h ****       __glibcxx_class_requires(_Tp, _SGIAssignableConcept)
 396:/usr/include/c++/11/bits/stl_vector.h **** # endif
 397:/usr/include/c++/11/bits/stl_vector.h ****       __glibcxx_class_requires2(_Tp, _Alloc_value_type, _SameTypeConcept)
 398:/usr/include/c++/11/bits/stl_vector.h **** #endif
 399:/usr/include/c++/11/bits/stl_vector.h **** 
 400:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
 401:/usr/include/c++/11/bits/stl_vector.h ****       static_assert(is_same<typename remove_cv<_Tp>::type, _Tp>::value,
 402:/usr/include/c++/11/bits/stl_vector.h **** 	  "std::vector must have a non-const, non-volatile value_type");
 403:/usr/include/c++/11/bits/stl_vector.h **** # if __cplusplus > 201703L || defined __STRICT_ANSI__
 404:/usr/include/c++/11/bits/stl_vector.h ****       static_assert(is_same<typename _Alloc::value_type, _Tp>::value,
 405:/usr/include/c++/11/bits/stl_vector.h **** 	  "std::vector must have the same value_type as its allocator");
 406:/usr/include/c++/11/bits/stl_vector.h **** # endif
 407:/usr/include/c++/11/bits/stl_vector.h **** #endif
 408:/usr/include/c++/11/bits/stl_vector.h **** 
 409:/usr/include/c++/11/bits/stl_vector.h ****       typedef _Vector_base<_Tp, _Alloc>			_Base;
 410:/usr/include/c++/11/bits/stl_vector.h ****       typedef typename _Base::_Tp_alloc_type		_Tp_alloc_type;
 411:/usr/include/c++/11/bits/stl_vector.h ****       typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type>	_Alloc_traits;
 412:/usr/include/c++/11/bits/stl_vector.h **** 
 413:/usr/include/c++/11/bits/stl_vector.h ****     public:
 414:/usr/include/c++/11/bits/stl_vector.h ****       typedef _Tp					value_type;
 415:/usr/include/c++/11/bits/stl_vector.h ****       typedef typename _Base::pointer			pointer;
 416:/usr/include/c++/11/bits/stl_vector.h ****       typedef typename _Alloc_traits::const_pointer	const_pointer;
 417:/usr/include/c++/11/bits/stl_vector.h ****       typedef typename _Alloc_traits::reference		reference;
 418:/usr/include/c++/11/bits/stl_vector.h ****       typedef typename _Alloc_traits::const_reference	const_reference;
 419:/usr/include/c++/11/bits/stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<pointer, vector> iterator;
 420:/usr/include/c++/11/bits/stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<const_pointer, vector>
 421:/usr/include/c++/11/bits/stl_vector.h ****       const_iterator;
 422:/usr/include/c++/11/bits/stl_vector.h ****       typedef std::reverse_iterator<const_iterator>	const_reverse_iterator;
 423:/usr/include/c++/11/bits/stl_vector.h ****       typedef std::reverse_iterator<iterator>		reverse_iterator;
 424:/usr/include/c++/11/bits/stl_vector.h ****       typedef size_t					size_type;
 425:/usr/include/c++/11/bits/stl_vector.h ****       typedef ptrdiff_t					difference_type;
 426:/usr/include/c++/11/bits/stl_vector.h ****       typedef _Alloc					allocator_type;
 427:/usr/include/c++/11/bits/stl_vector.h **** 
 428:/usr/include/c++/11/bits/stl_vector.h ****     private:
 429:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
 430:/usr/include/c++/11/bits/stl_vector.h ****       static constexpr bool
 431:/usr/include/c++/11/bits/stl_vector.h ****       _S_nothrow_relocate(true_type)
 432:/usr/include/c++/11/bits/stl_vector.h ****       {
 433:/usr/include/c++/11/bits/stl_vector.h **** 	return noexcept(std::__relocate_a(std::declval<pointer>(),
 434:/usr/include/c++/11/bits/stl_vector.h **** 					  std::declval<pointer>(),
 435:/usr/include/c++/11/bits/stl_vector.h **** 					  std::declval<pointer>(),
 436:/usr/include/c++/11/bits/stl_vector.h **** 					  std::declval<_Tp_alloc_type&>()));
 437:/usr/include/c++/11/bits/stl_vector.h ****       }
 438:/usr/include/c++/11/bits/stl_vector.h **** 
 439:/usr/include/c++/11/bits/stl_vector.h ****       static constexpr bool
 440:/usr/include/c++/11/bits/stl_vector.h ****       _S_nothrow_relocate(false_type)
 441:/usr/include/c++/11/bits/stl_vector.h ****       { return false; }
 442:/usr/include/c++/11/bits/stl_vector.h **** 
 443:/usr/include/c++/11/bits/stl_vector.h ****       static constexpr bool
 444:/usr/include/c++/11/bits/stl_vector.h ****       _S_use_relocate()
 445:/usr/include/c++/11/bits/stl_vector.h ****       {
 446:/usr/include/c++/11/bits/stl_vector.h **** 	// Instantiating std::__relocate_a might cause an error outside the
 447:/usr/include/c++/11/bits/stl_vector.h **** 	// immediate context (in __relocate_object_a's noexcept-specifier),
 448:/usr/include/c++/11/bits/stl_vector.h **** 	// so only do it if we know the type can be move-inserted into *this.
 449:/usr/include/c++/11/bits/stl_vector.h **** 	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 450:/usr/include/c++/11/bits/stl_vector.h ****       }
 451:/usr/include/c++/11/bits/stl_vector.h **** 
 452:/usr/include/c++/11/bits/stl_vector.h ****       static pointer
 453:/usr/include/c++/11/bits/stl_vector.h ****       _S_do_relocate(pointer __first, pointer __last, pointer __result,
 454:/usr/include/c++/11/bits/stl_vector.h **** 		     _Tp_alloc_type& __alloc, true_type) noexcept
 455:/usr/include/c++/11/bits/stl_vector.h ****       {
 456:/usr/include/c++/11/bits/stl_vector.h **** 	return std::__relocate_a(__first, __last, __result, __alloc);
 457:/usr/include/c++/11/bits/stl_vector.h ****       }
 458:/usr/include/c++/11/bits/stl_vector.h **** 
 459:/usr/include/c++/11/bits/stl_vector.h ****       static pointer
 460:/usr/include/c++/11/bits/stl_vector.h ****       _S_do_relocate(pointer, pointer, pointer __result,
 461:/usr/include/c++/11/bits/stl_vector.h **** 		     _Tp_alloc_type&, false_type) noexcept
 462:/usr/include/c++/11/bits/stl_vector.h ****       { return __result; }
 463:/usr/include/c++/11/bits/stl_vector.h **** 
 464:/usr/include/c++/11/bits/stl_vector.h ****       static pointer
 465:/usr/include/c++/11/bits/stl_vector.h ****       _S_relocate(pointer __first, pointer __last, pointer __result,
 466:/usr/include/c++/11/bits/stl_vector.h **** 		  _Tp_alloc_type& __alloc) noexcept
 467:/usr/include/c++/11/bits/stl_vector.h ****       {
 468:/usr/include/c++/11/bits/stl_vector.h **** 	using __do_it = __bool_constant<_S_use_relocate()>;
 469:/usr/include/c++/11/bits/stl_vector.h **** 	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 470:/usr/include/c++/11/bits/stl_vector.h ****       }
 471:/usr/include/c++/11/bits/stl_vector.h **** #endif // C++11
 472:/usr/include/c++/11/bits/stl_vector.h **** 
 473:/usr/include/c++/11/bits/stl_vector.h ****     protected:
 474:/usr/include/c++/11/bits/stl_vector.h ****       using _Base::_M_allocate;
 475:/usr/include/c++/11/bits/stl_vector.h ****       using _Base::_M_deallocate;
 476:/usr/include/c++/11/bits/stl_vector.h ****       using _Base::_M_impl;
 477:/usr/include/c++/11/bits/stl_vector.h ****       using _Base::_M_get_Tp_allocator;
 478:/usr/include/c++/11/bits/stl_vector.h **** 
 479:/usr/include/c++/11/bits/stl_vector.h ****     public:
 480:/usr/include/c++/11/bits/stl_vector.h ****       // [23.2.4.1] construct/copy/destroy
 481:/usr/include/c++/11/bits/stl_vector.h ****       // (assign() and get_allocator() are also listed in this section)
 482:/usr/include/c++/11/bits/stl_vector.h **** 
 483:/usr/include/c++/11/bits/stl_vector.h ****       /**
 484:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Creates a %vector with no elements.
 485:/usr/include/c++/11/bits/stl_vector.h ****        */
 486:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
 487:/usr/include/c++/11/bits/stl_vector.h ****       vector() = default;
 488:/usr/include/c++/11/bits/stl_vector.h **** #else
 489:/usr/include/c++/11/bits/stl_vector.h ****       vector() { }
 1654              		.loc 4 489 7
 1655              		.cfi_startproc
 1656 0000 F30F1EFA 		endbr64
 1657 0004 55       		pushq	%rbp
 1658              		.cfi_def_cfa_offset 16
 1659              		.cfi_offset 6, -16
 1660 0005 4889E5   		movq	%rsp, %rbp
 1661              		.cfi_def_cfa_register 6
 1662 0008 4883EC10 		subq	$16, %rsp
 1663 000c 48897DF8 		movq	%rdi, -8(%rbp)
 1664              	.LBB14:
 1665              		.loc 4 489 16
 1666 0010 488B45F8 		movq	-8(%rbp), %rax
 1667 0014 4889C7   		movq	%rax, %rdi
 1668 0017 E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev@PLT
 1668      00
 1669              	.LBE14:
 1670              		.loc 4 489 18
 1671 001c 90       		nop
 1672 001d C9       		leave
 1673              		.cfi_def_cfa 7, 8
 1674 001e C3       		ret
 1675              		.cfi_endproc
 1676              	.LFE1447:
 1678              		.weak	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EEC1Ev
 1679              		.set	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EEC1Ev,_ZNSt6vectorIN8UnitTest18DeferredTes
 1680              		.section	.text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED2Ev,"axG",@progbits,_ZNSt6vect
 1681              		.align 2
 1682              		.weak	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED2Ev
 1684              	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED2Ev:
 1685              	.LFB1450:
 490:/usr/include/c++/11/bits/stl_vector.h **** #endif
 491:/usr/include/c++/11/bits/stl_vector.h **** 
 492:/usr/include/c++/11/bits/stl_vector.h ****       /**
 493:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Creates a %vector with no elements.
 494:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __a  An allocator object.
 495:/usr/include/c++/11/bits/stl_vector.h ****        */
 496:/usr/include/c++/11/bits/stl_vector.h ****       explicit
 497:/usr/include/c++/11/bits/stl_vector.h ****       vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 498:/usr/include/c++/11/bits/stl_vector.h ****       : _Base(__a) { }
 499:/usr/include/c++/11/bits/stl_vector.h **** 
 500:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
 501:/usr/include/c++/11/bits/stl_vector.h ****       /**
 502:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Creates a %vector with default constructed elements.
 503:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 504:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __a  An allocator.
 505:/usr/include/c++/11/bits/stl_vector.h ****        *
 506:/usr/include/c++/11/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n default
 507:/usr/include/c++/11/bits/stl_vector.h ****        *  constructed elements.
 508:/usr/include/c++/11/bits/stl_vector.h ****        */
 509:/usr/include/c++/11/bits/stl_vector.h ****       explicit
 510:/usr/include/c++/11/bits/stl_vector.h ****       vector(size_type __n, const allocator_type& __a = allocator_type())
 511:/usr/include/c++/11/bits/stl_vector.h ****       : _Base(_S_check_init_len(__n, __a), __a)
 512:/usr/include/c++/11/bits/stl_vector.h ****       { _M_default_initialize(__n); }
 513:/usr/include/c++/11/bits/stl_vector.h **** 
 514:/usr/include/c++/11/bits/stl_vector.h ****       /**
 515:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 516:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 517:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __value  An element to copy.
 518:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __a  An allocator.
 519:/usr/include/c++/11/bits/stl_vector.h ****        *
 520:/usr/include/c++/11/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n copies of @a __value.
 521:/usr/include/c++/11/bits/stl_vector.h ****        */
 522:/usr/include/c++/11/bits/stl_vector.h ****       vector(size_type __n, const value_type& __value,
 523:/usr/include/c++/11/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 524:/usr/include/c++/11/bits/stl_vector.h ****       : _Base(_S_check_init_len(__n, __a), __a)
 525:/usr/include/c++/11/bits/stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 526:/usr/include/c++/11/bits/stl_vector.h **** #else
 527:/usr/include/c++/11/bits/stl_vector.h ****       /**
 528:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 529:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 530:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __value  An element to copy.
 531:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __a  An allocator.
 532:/usr/include/c++/11/bits/stl_vector.h ****        *
 533:/usr/include/c++/11/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n copies of @a __value.
 534:/usr/include/c++/11/bits/stl_vector.h ****        */
 535:/usr/include/c++/11/bits/stl_vector.h ****       explicit
 536:/usr/include/c++/11/bits/stl_vector.h ****       vector(size_type __n, const value_type& __value = value_type(),
 537:/usr/include/c++/11/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 538:/usr/include/c++/11/bits/stl_vector.h ****       : _Base(_S_check_init_len(__n, __a), __a)
 539:/usr/include/c++/11/bits/stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 540:/usr/include/c++/11/bits/stl_vector.h **** #endif
 541:/usr/include/c++/11/bits/stl_vector.h **** 
 542:/usr/include/c++/11/bits/stl_vector.h ****       /**
 543:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  %Vector copy constructor.
 544:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 545:/usr/include/c++/11/bits/stl_vector.h ****        *
 546:/usr/include/c++/11/bits/stl_vector.h ****        *  All the elements of @a __x are copied, but any unused capacity in
 547:/usr/include/c++/11/bits/stl_vector.h ****        *  @a __x  will not be copied
 548:/usr/include/c++/11/bits/stl_vector.h ****        *  (i.e. capacity() == size() in the new %vector).
 549:/usr/include/c++/11/bits/stl_vector.h ****        *
 550:/usr/include/c++/11/bits/stl_vector.h ****        *  The newly-created %vector uses a copy of the allocator object used
 551:/usr/include/c++/11/bits/stl_vector.h ****        *  by @a __x (unless the allocator traits dictate a different object).
 552:/usr/include/c++/11/bits/stl_vector.h ****        */
 553:/usr/include/c++/11/bits/stl_vector.h ****       vector(const vector& __x)
 554:/usr/include/c++/11/bits/stl_vector.h ****       : _Base(__x.size(),
 555:/usr/include/c++/11/bits/stl_vector.h **** 	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 556:/usr/include/c++/11/bits/stl_vector.h ****       {
 557:/usr/include/c++/11/bits/stl_vector.h **** 	this->_M_impl._M_finish =
 558:/usr/include/c++/11/bits/stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 559:/usr/include/c++/11/bits/stl_vector.h **** 				      this->_M_impl._M_start,
 560:/usr/include/c++/11/bits/stl_vector.h **** 				      _M_get_Tp_allocator());
 561:/usr/include/c++/11/bits/stl_vector.h ****       }
 562:/usr/include/c++/11/bits/stl_vector.h **** 
 563:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
 564:/usr/include/c++/11/bits/stl_vector.h ****       /**
 565:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  %Vector move constructor.
 566:/usr/include/c++/11/bits/stl_vector.h ****        *
 567:/usr/include/c++/11/bits/stl_vector.h ****        *  The newly-created %vector contains the exact contents of the
 568:/usr/include/c++/11/bits/stl_vector.h ****        *  moved instance.
 569:/usr/include/c++/11/bits/stl_vector.h ****        *  The contents of the moved instance are a valid, but unspecified
 570:/usr/include/c++/11/bits/stl_vector.h ****        *  %vector.
 571:/usr/include/c++/11/bits/stl_vector.h ****        */
 572:/usr/include/c++/11/bits/stl_vector.h ****       vector(vector&&) noexcept = default;
 573:/usr/include/c++/11/bits/stl_vector.h **** 
 574:/usr/include/c++/11/bits/stl_vector.h ****       /// Copy constructor with alternative allocator
 575:/usr/include/c++/11/bits/stl_vector.h ****       vector(const vector& __x, const allocator_type& __a)
 576:/usr/include/c++/11/bits/stl_vector.h ****       : _Base(__x.size(), __a)
 577:/usr/include/c++/11/bits/stl_vector.h ****       {
 578:/usr/include/c++/11/bits/stl_vector.h **** 	this->_M_impl._M_finish =
 579:/usr/include/c++/11/bits/stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 580:/usr/include/c++/11/bits/stl_vector.h **** 				      this->_M_impl._M_start,
 581:/usr/include/c++/11/bits/stl_vector.h **** 				      _M_get_Tp_allocator());
 582:/usr/include/c++/11/bits/stl_vector.h ****       }
 583:/usr/include/c++/11/bits/stl_vector.h **** 
 584:/usr/include/c++/11/bits/stl_vector.h ****     private:
 585:/usr/include/c++/11/bits/stl_vector.h ****       vector(vector&& __rv, const allocator_type& __m, true_type) noexcept
 586:/usr/include/c++/11/bits/stl_vector.h ****       : _Base(__m, std::move(__rv))
 587:/usr/include/c++/11/bits/stl_vector.h ****       { }
 588:/usr/include/c++/11/bits/stl_vector.h **** 
 589:/usr/include/c++/11/bits/stl_vector.h ****       vector(vector&& __rv, const allocator_type& __m, false_type)
 590:/usr/include/c++/11/bits/stl_vector.h ****       : _Base(__m)
 591:/usr/include/c++/11/bits/stl_vector.h ****       {
 592:/usr/include/c++/11/bits/stl_vector.h **** 	if (__rv.get_allocator() == __m)
 593:/usr/include/c++/11/bits/stl_vector.h **** 	  this->_M_impl._M_swap_data(__rv._M_impl);
 594:/usr/include/c++/11/bits/stl_vector.h **** 	else if (!__rv.empty())
 595:/usr/include/c++/11/bits/stl_vector.h **** 	  {
 596:/usr/include/c++/11/bits/stl_vector.h **** 	    this->_M_create_storage(__rv.size());
 597:/usr/include/c++/11/bits/stl_vector.h **** 	    this->_M_impl._M_finish =
 598:/usr/include/c++/11/bits/stl_vector.h **** 	      std::__uninitialized_move_a(__rv.begin(), __rv.end(),
 599:/usr/include/c++/11/bits/stl_vector.h **** 					  this->_M_impl._M_start,
 600:/usr/include/c++/11/bits/stl_vector.h **** 					  _M_get_Tp_allocator());
 601:/usr/include/c++/11/bits/stl_vector.h **** 	    __rv.clear();
 602:/usr/include/c++/11/bits/stl_vector.h **** 	  }
 603:/usr/include/c++/11/bits/stl_vector.h ****       }
 604:/usr/include/c++/11/bits/stl_vector.h **** 
 605:/usr/include/c++/11/bits/stl_vector.h ****     public:
 606:/usr/include/c++/11/bits/stl_vector.h ****       /// Move constructor with alternative allocator
 607:/usr/include/c++/11/bits/stl_vector.h ****       vector(vector&& __rv, const allocator_type& __m)
 608:/usr/include/c++/11/bits/stl_vector.h ****       noexcept( noexcept(
 609:/usr/include/c++/11/bits/stl_vector.h **** 	vector(std::declval<vector&&>(), std::declval<const allocator_type&>(),
 610:/usr/include/c++/11/bits/stl_vector.h **** 	       std::declval<typename _Alloc_traits::is_always_equal>())) )
 611:/usr/include/c++/11/bits/stl_vector.h ****       : vector(std::move(__rv), __m, typename _Alloc_traits::is_always_equal{})
 612:/usr/include/c++/11/bits/stl_vector.h ****       { }
 613:/usr/include/c++/11/bits/stl_vector.h **** 
 614:/usr/include/c++/11/bits/stl_vector.h ****       /**
 615:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Builds a %vector from an initializer list.
 616:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 617:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __a  An allocator.
 618:/usr/include/c++/11/bits/stl_vector.h ****        *
 619:/usr/include/c++/11/bits/stl_vector.h ****        *  Create a %vector consisting of copies of the elements in the
 620:/usr/include/c++/11/bits/stl_vector.h ****        *  initializer_list @a __l.
 621:/usr/include/c++/11/bits/stl_vector.h ****        *
 622:/usr/include/c++/11/bits/stl_vector.h ****        *  This will call the element type's copy constructor N times
 623:/usr/include/c++/11/bits/stl_vector.h ****        *  (where N is @a __l.size()) and do no memory reallocation.
 624:/usr/include/c++/11/bits/stl_vector.h ****        */
 625:/usr/include/c++/11/bits/stl_vector.h ****       vector(initializer_list<value_type> __l,
 626:/usr/include/c++/11/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 627:/usr/include/c++/11/bits/stl_vector.h ****       : _Base(__a)
 628:/usr/include/c++/11/bits/stl_vector.h ****       {
 629:/usr/include/c++/11/bits/stl_vector.h **** 	_M_range_initialize(__l.begin(), __l.end(),
 630:/usr/include/c++/11/bits/stl_vector.h **** 			    random_access_iterator_tag());
 631:/usr/include/c++/11/bits/stl_vector.h ****       }
 632:/usr/include/c++/11/bits/stl_vector.h **** #endif
 633:/usr/include/c++/11/bits/stl_vector.h **** 
 634:/usr/include/c++/11/bits/stl_vector.h ****       /**
 635:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Builds a %vector from a range.
 636:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __first  An input iterator.
 637:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __last  An input iterator.
 638:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __a  An allocator.
 639:/usr/include/c++/11/bits/stl_vector.h ****        *
 640:/usr/include/c++/11/bits/stl_vector.h ****        *  Create a %vector consisting of copies of the elements from
 641:/usr/include/c++/11/bits/stl_vector.h ****        *  [first,last).
 642:/usr/include/c++/11/bits/stl_vector.h ****        *
 643:/usr/include/c++/11/bits/stl_vector.h ****        *  If the iterators are forward, bidirectional, or
 644:/usr/include/c++/11/bits/stl_vector.h ****        *  random-access, then this will call the elements' copy
 645:/usr/include/c++/11/bits/stl_vector.h ****        *  constructor N times (where N is distance(first,last)) and do
 646:/usr/include/c++/11/bits/stl_vector.h ****        *  no memory reallocation.  But if only input iterators are
 647:/usr/include/c++/11/bits/stl_vector.h ****        *  used, then this will do at most 2N calls to the copy
 648:/usr/include/c++/11/bits/stl_vector.h ****        *  constructor, and logN memory reallocations.
 649:/usr/include/c++/11/bits/stl_vector.h ****        */
 650:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
 651:/usr/include/c++/11/bits/stl_vector.h ****       template<typename _InputIterator,
 652:/usr/include/c++/11/bits/stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 653:/usr/include/c++/11/bits/stl_vector.h **** 	vector(_InputIterator __first, _InputIterator __last,
 654:/usr/include/c++/11/bits/stl_vector.h **** 	       const allocator_type& __a = allocator_type())
 655:/usr/include/c++/11/bits/stl_vector.h **** 	: _Base(__a)
 656:/usr/include/c++/11/bits/stl_vector.h **** 	{
 657:/usr/include/c++/11/bits/stl_vector.h **** 	  _M_range_initialize(__first, __last,
 658:/usr/include/c++/11/bits/stl_vector.h **** 			      std::__iterator_category(__first));
 659:/usr/include/c++/11/bits/stl_vector.h **** 	}
 660:/usr/include/c++/11/bits/stl_vector.h **** #else
 661:/usr/include/c++/11/bits/stl_vector.h ****       template<typename _InputIterator>
 662:/usr/include/c++/11/bits/stl_vector.h **** 	vector(_InputIterator __first, _InputIterator __last,
 663:/usr/include/c++/11/bits/stl_vector.h **** 	       const allocator_type& __a = allocator_type())
 664:/usr/include/c++/11/bits/stl_vector.h **** 	: _Base(__a)
 665:/usr/include/c++/11/bits/stl_vector.h **** 	{
 666:/usr/include/c++/11/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 667:/usr/include/c++/11/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 668:/usr/include/c++/11/bits/stl_vector.h **** 	  _M_initialize_dispatch(__first, __last, _Integral());
 669:/usr/include/c++/11/bits/stl_vector.h **** 	}
 670:/usr/include/c++/11/bits/stl_vector.h **** #endif
 671:/usr/include/c++/11/bits/stl_vector.h **** 
 672:/usr/include/c++/11/bits/stl_vector.h ****       /**
 673:/usr/include/c++/11/bits/stl_vector.h ****        *  The dtor only erases the elements, and note that if the
 674:/usr/include/c++/11/bits/stl_vector.h ****        *  elements themselves are pointers, the pointed-to memory is
 675:/usr/include/c++/11/bits/stl_vector.h ****        *  not touched in any way.  Managing the pointer is the user's
 676:/usr/include/c++/11/bits/stl_vector.h ****        *  responsibility.
 677:/usr/include/c++/11/bits/stl_vector.h ****        */
 678:/usr/include/c++/11/bits/stl_vector.h ****       ~vector() _GLIBCXX_NOEXCEPT
 1686              		.loc 4 678 7
 1687              		.cfi_startproc
 1688              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 1689              		.cfi_lsda 0x1b,.LLSDA1450
 1690 0000 F30F1EFA 		endbr64
 1691 0004 55       		pushq	%rbp
 1692              		.cfi_def_cfa_offset 16
 1693              		.cfi_offset 6, -16
 1694 0005 4889E5   		movq	%rsp, %rbp
 1695              		.cfi_def_cfa_register 6
 1696 0008 53       		pushq	%rbx
 1697 0009 4883EC18 		subq	$24, %rsp
 1698              		.cfi_offset 3, -24
 1699 000d 48897DE8 		movq	%rdi, -24(%rbp)
 1700              	.LBB15:
 679:/usr/include/c++/11/bits/stl_vector.h ****       {
 680:/usr/include/c++/11/bits/stl_vector.h **** 	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 681:/usr/include/c++/11/bits/stl_vector.h **** 		      _M_get_Tp_allocator());
 1701              		.loc 4 681 28
 1702 0011 488B45E8 		movq	-24(%rbp), %rax
 1703 0015 4889C7   		movq	%rax, %rdi
 1704 0018 E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv@PLT
 1704      00
 1705 001d 4889C2   		movq	%rax, %rdx
 680:/usr/include/c++/11/bits/stl_vector.h **** 		      _M_get_Tp_allocator());
 1706              		.loc 4 680 15
 1707 0020 488B45E8 		movq	-24(%rbp), %rax
 1708 0024 488B4808 		movq	8(%rax), %rcx
 1709 0028 488B45E8 		movq	-24(%rbp), %rax
 1710 002c 488B00   		movq	(%rax), %rax
 1711 002f 4889CE   		movq	%rcx, %rsi
 1712 0032 4889C7   		movq	%rax, %rdi
 1713              	.LEHB34:
 1714 0035 E8000000 		call	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultES1_EvT_S3_RSaIT0_E@PLT
 1714      00
 1715              	.LEHE34:
 682:/usr/include/c++/11/bits/stl_vector.h **** 	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
 683:/usr/include/c++/11/bits/stl_vector.h ****       }
 1716              		.loc 4 683 7
 1717 003a 488B45E8 		movq	-24(%rbp), %rax
 1718 003e 4889C7   		movq	%rax, %rdi
 1719              	.LEHB35:
 1720 0041 E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED2Ev@PLT
 1720      00
 1721              	.LEHE35:
 1722              	.LBE15:
 1723 0046 EB1E     		jmp	.L82
 1724              	.L81:
 1725 0048 F30F1EFA 		endbr64
 1726              	.LBB16:
 1727 004c 4889C3   		movq	%rax, %rbx
 1728 004f 488B45E8 		movq	-24(%rbp), %rax
 1729 0053 4889C7   		movq	%rax, %rdi
 1730 0056 E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED2Ev@PLT
 1730      00
 1731 005b 4889D8   		movq	%rbx, %rax
 1732 005e 4889C7   		movq	%rax, %rdi
 1733              	.LEHB36:
 1734 0061 E8000000 		call	_Unwind_Resume@PLT
 1734      00
 1735              	.LEHE36:
 1736              	.L82:
 1737              	.LBE16:
 1738 0066 488B5DF8 		movq	-8(%rbp), %rbx
 1739 006a C9       		leave
 1740              		.cfi_def_cfa 7, 8
 1741 006b C3       		ret
 1742              		.cfi_endproc
 1743              	.LFE1450:
 1744              		.section	.gcc_except_table
 1745              	.LLSDA1450:
 1746 00cb FF       		.byte	0xff
 1747 00cc FF       		.byte	0xff
 1748 00cd 01       		.byte	0x1
 1749 00ce 0C       		.uleb128 .LLSDACSE1450-.LLSDACSB1450
 1750              	.LLSDACSB1450:
 1751 00cf 35       		.uleb128 .LEHB34-.LFB1450
 1752 00d0 05       		.uleb128 .LEHE34-.LEHB34
 1753 00d1 48       		.uleb128 .L81-.LFB1450
 1754 00d2 00       		.uleb128 0
 1755 00d3 41       		.uleb128 .LEHB35-.LFB1450
 1756 00d4 05       		.uleb128 .LEHE35-.LEHB35
 1757 00d5 00       		.uleb128 0
 1758 00d6 00       		.uleb128 0
 1759 00d7 61       		.uleb128 .LEHB36-.LFB1450
 1760 00d8 05       		.uleb128 .LEHE36-.LEHB36
 1761 00d9 00       		.uleb128 0
 1762 00da 00       		.uleb128 0
 1763              	.LLSDACSE1450:
 1764              		.section	.text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED2Ev,"axG",@progbits,_ZNSt6vect
 1766              		.weak	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED1Ev
 1767              		.set	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED1Ev,_ZNSt6vectorIN8UnitTest18DeferredTes
 1768              		.section	.text._ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE5beginEv,"axG",@progbits,_ZNKS
 1769              		.align 2
 1770              		.weak	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE5beginEv
 1772              	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE5beginEv:
 1773              	.LFB1452:
 684:/usr/include/c++/11/bits/stl_vector.h **** 
 685:/usr/include/c++/11/bits/stl_vector.h ****       /**
 686:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  %Vector assignment operator.
 687:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 688:/usr/include/c++/11/bits/stl_vector.h ****        *
 689:/usr/include/c++/11/bits/stl_vector.h ****        *  All the elements of @a __x are copied, but any unused capacity in
 690:/usr/include/c++/11/bits/stl_vector.h ****        *  @a __x will not be copied.
 691:/usr/include/c++/11/bits/stl_vector.h ****        *
 692:/usr/include/c++/11/bits/stl_vector.h ****        *  Whether the allocator is copied depends on the allocator traits.
 693:/usr/include/c++/11/bits/stl_vector.h ****        */
 694:/usr/include/c++/11/bits/stl_vector.h ****       vector&
 695:/usr/include/c++/11/bits/stl_vector.h ****       operator=(const vector& __x);
 696:/usr/include/c++/11/bits/stl_vector.h **** 
 697:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
 698:/usr/include/c++/11/bits/stl_vector.h ****       /**
 699:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  %Vector move assignment operator.
 700:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 701:/usr/include/c++/11/bits/stl_vector.h ****        *
 702:/usr/include/c++/11/bits/stl_vector.h ****        *  The contents of @a __x are moved into this %vector (without copying,
 703:/usr/include/c++/11/bits/stl_vector.h ****        *  if the allocators permit it).
 704:/usr/include/c++/11/bits/stl_vector.h ****        *  Afterwards @a __x is a valid, but unspecified %vector.
 705:/usr/include/c++/11/bits/stl_vector.h ****        *
 706:/usr/include/c++/11/bits/stl_vector.h ****        *  Whether the allocator is moved depends on the allocator traits.
 707:/usr/include/c++/11/bits/stl_vector.h ****        */
 708:/usr/include/c++/11/bits/stl_vector.h ****       vector&
 709:/usr/include/c++/11/bits/stl_vector.h ****       operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 710:/usr/include/c++/11/bits/stl_vector.h ****       {
 711:/usr/include/c++/11/bits/stl_vector.h **** 	constexpr bool __move_storage =
 712:/usr/include/c++/11/bits/stl_vector.h **** 	  _Alloc_traits::_S_propagate_on_move_assign()
 713:/usr/include/c++/11/bits/stl_vector.h **** 	  || _Alloc_traits::_S_always_equal();
 714:/usr/include/c++/11/bits/stl_vector.h **** 	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 715:/usr/include/c++/11/bits/stl_vector.h **** 	return *this;
 716:/usr/include/c++/11/bits/stl_vector.h ****       }
 717:/usr/include/c++/11/bits/stl_vector.h **** 
 718:/usr/include/c++/11/bits/stl_vector.h ****       /**
 719:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  %Vector list assignment operator.
 720:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 721:/usr/include/c++/11/bits/stl_vector.h ****        *
 722:/usr/include/c++/11/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 723:/usr/include/c++/11/bits/stl_vector.h ****        *  initializer list @a __l.
 724:/usr/include/c++/11/bits/stl_vector.h ****        *
 725:/usr/include/c++/11/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 726:/usr/include/c++/11/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 727:/usr/include/c++/11/bits/stl_vector.h ****        *  of elements assigned.
 728:/usr/include/c++/11/bits/stl_vector.h ****        */
 729:/usr/include/c++/11/bits/stl_vector.h ****       vector&
 730:/usr/include/c++/11/bits/stl_vector.h ****       operator=(initializer_list<value_type> __l)
 731:/usr/include/c++/11/bits/stl_vector.h ****       {
 732:/usr/include/c++/11/bits/stl_vector.h **** 	this->_M_assign_aux(__l.begin(), __l.end(),
 733:/usr/include/c++/11/bits/stl_vector.h **** 			    random_access_iterator_tag());
 734:/usr/include/c++/11/bits/stl_vector.h **** 	return *this;
 735:/usr/include/c++/11/bits/stl_vector.h ****       }
 736:/usr/include/c++/11/bits/stl_vector.h **** #endif
 737:/usr/include/c++/11/bits/stl_vector.h **** 
 738:/usr/include/c++/11/bits/stl_vector.h ****       /**
 739:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Assigns a given value to a %vector.
 740:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __n  Number of elements to be assigned.
 741:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __val  Value to be assigned.
 742:/usr/include/c++/11/bits/stl_vector.h ****        *
 743:/usr/include/c++/11/bits/stl_vector.h ****        *  This function fills a %vector with @a __n copies of the given
 744:/usr/include/c++/11/bits/stl_vector.h ****        *  value.  Note that the assignment completely changes the
 745:/usr/include/c++/11/bits/stl_vector.h ****        *  %vector and that the resulting %vector's size is the same as
 746:/usr/include/c++/11/bits/stl_vector.h ****        *  the number of elements assigned.
 747:/usr/include/c++/11/bits/stl_vector.h ****        */
 748:/usr/include/c++/11/bits/stl_vector.h ****       void
 749:/usr/include/c++/11/bits/stl_vector.h ****       assign(size_type __n, const value_type& __val)
 750:/usr/include/c++/11/bits/stl_vector.h ****       { _M_fill_assign(__n, __val); }
 751:/usr/include/c++/11/bits/stl_vector.h **** 
 752:/usr/include/c++/11/bits/stl_vector.h ****       /**
 753:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Assigns a range to a %vector.
 754:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __first  An input iterator.
 755:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __last   An input iterator.
 756:/usr/include/c++/11/bits/stl_vector.h ****        *
 757:/usr/include/c++/11/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 758:/usr/include/c++/11/bits/stl_vector.h ****        *  range [__first,__last).
 759:/usr/include/c++/11/bits/stl_vector.h ****        *
 760:/usr/include/c++/11/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 761:/usr/include/c++/11/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 762:/usr/include/c++/11/bits/stl_vector.h ****        *  of elements assigned.
 763:/usr/include/c++/11/bits/stl_vector.h ****        */
 764:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
 765:/usr/include/c++/11/bits/stl_vector.h ****       template<typename _InputIterator,
 766:/usr/include/c++/11/bits/stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 767:/usr/include/c++/11/bits/stl_vector.h **** 	void
 768:/usr/include/c++/11/bits/stl_vector.h **** 	assign(_InputIterator __first, _InputIterator __last)
 769:/usr/include/c++/11/bits/stl_vector.h **** 	{ _M_assign_dispatch(__first, __last, __false_type()); }
 770:/usr/include/c++/11/bits/stl_vector.h **** #else
 771:/usr/include/c++/11/bits/stl_vector.h ****       template<typename _InputIterator>
 772:/usr/include/c++/11/bits/stl_vector.h **** 	void
 773:/usr/include/c++/11/bits/stl_vector.h **** 	assign(_InputIterator __first, _InputIterator __last)
 774:/usr/include/c++/11/bits/stl_vector.h **** 	{
 775:/usr/include/c++/11/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 776:/usr/include/c++/11/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 777:/usr/include/c++/11/bits/stl_vector.h **** 	  _M_assign_dispatch(__first, __last, _Integral());
 778:/usr/include/c++/11/bits/stl_vector.h **** 	}
 779:/usr/include/c++/11/bits/stl_vector.h **** #endif
 780:/usr/include/c++/11/bits/stl_vector.h **** 
 781:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
 782:/usr/include/c++/11/bits/stl_vector.h ****       /**
 783:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Assigns an initializer list to a %vector.
 784:/usr/include/c++/11/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 785:/usr/include/c++/11/bits/stl_vector.h ****        *
 786:/usr/include/c++/11/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 787:/usr/include/c++/11/bits/stl_vector.h ****        *  initializer list @a __l.
 788:/usr/include/c++/11/bits/stl_vector.h ****        *
 789:/usr/include/c++/11/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 790:/usr/include/c++/11/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 791:/usr/include/c++/11/bits/stl_vector.h ****        *  of elements assigned.
 792:/usr/include/c++/11/bits/stl_vector.h ****        */
 793:/usr/include/c++/11/bits/stl_vector.h ****       void
 794:/usr/include/c++/11/bits/stl_vector.h ****       assign(initializer_list<value_type> __l)
 795:/usr/include/c++/11/bits/stl_vector.h ****       {
 796:/usr/include/c++/11/bits/stl_vector.h **** 	this->_M_assign_aux(__l.begin(), __l.end(),
 797:/usr/include/c++/11/bits/stl_vector.h **** 			    random_access_iterator_tag());
 798:/usr/include/c++/11/bits/stl_vector.h ****       }
 799:/usr/include/c++/11/bits/stl_vector.h **** #endif
 800:/usr/include/c++/11/bits/stl_vector.h **** 
 801:/usr/include/c++/11/bits/stl_vector.h ****       /// Get a copy of the memory allocation object.
 802:/usr/include/c++/11/bits/stl_vector.h ****       using _Base::get_allocator;
 803:/usr/include/c++/11/bits/stl_vector.h **** 
 804:/usr/include/c++/11/bits/stl_vector.h ****       // iterators
 805:/usr/include/c++/11/bits/stl_vector.h ****       /**
 806:/usr/include/c++/11/bits/stl_vector.h ****        *  Returns a read/write iterator that points to the first
 807:/usr/include/c++/11/bits/stl_vector.h ****        *  element in the %vector.  Iteration is done in ordinary
 808:/usr/include/c++/11/bits/stl_vector.h ****        *  element order.
 809:/usr/include/c++/11/bits/stl_vector.h ****        */
 810:/usr/include/c++/11/bits/stl_vector.h ****       iterator
 811:/usr/include/c++/11/bits/stl_vector.h ****       begin() _GLIBCXX_NOEXCEPT
 812:/usr/include/c++/11/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_start); }
 813:/usr/include/c++/11/bits/stl_vector.h **** 
 814:/usr/include/c++/11/bits/stl_vector.h ****       /**
 815:/usr/include/c++/11/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points to the
 816:/usr/include/c++/11/bits/stl_vector.h ****        *  first element in the %vector.  Iteration is done in ordinary
 817:/usr/include/c++/11/bits/stl_vector.h ****        *  element order.
 818:/usr/include/c++/11/bits/stl_vector.h ****        */
 819:/usr/include/c++/11/bits/stl_vector.h ****       const_iterator
 820:/usr/include/c++/11/bits/stl_vector.h ****       begin() const _GLIBCXX_NOEXCEPT
 1774              		.loc 4 820 7
 1775              		.cfi_startproc
 1776 0000 F30F1EFA 		endbr64
 1777 0004 55       		pushq	%rbp
 1778              		.cfi_def_cfa_offset 16
 1779              		.cfi_offset 6, -16
 1780 0005 4889E5   		movq	%rsp, %rbp
 1781              		.cfi_def_cfa_register 6
 1782 0008 4883EC20 		subq	$32, %rsp
 1783 000c 48897DE8 		movq	%rdi, -24(%rbp)
 1784              		.loc 4 820 7
 1785 0010 64488B04 		movq	%fs:40, %rax
 1785      25280000 
 1785      00
 1786 0019 488945F8 		movq	%rax, -8(%rbp)
 1787 001d 31C0     		xorl	%eax, %eax
 821:/usr/include/c++/11/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 1788              		.loc 4 821 45
 1789 001f 488B55E8 		movq	-24(%rbp), %rdx
 1790              		.loc 4 821 16
 1791 0023 488D45F0 		leaq	-16(%rbp), %rax
 1792 0027 4889D6   		movq	%rdx, %rsi
 1793 002a 4889C7   		movq	%rax, %rdi
 1794 002d E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC1ERK
 1794      00
 1795              		.loc 4 821 53
 1796 0032 488B45F0 		movq	-16(%rbp), %rax
 1797              		.loc 4 821 56
 1798 0036 488B55F8 		movq	-8(%rbp), %rdx
 1799 003a 64482B14 		subq	%fs:40, %rdx
 1799      25280000 
 1799      00
 1800 0043 7405     		je	.L85
 1801 0045 E8000000 		call	__stack_chk_fail@PLT
 1801      00
 1802              	.L85:
 1803 004a C9       		leave
 1804              		.cfi_def_cfa 7, 8
 1805 004b C3       		ret
 1806              		.cfi_endproc
 1807              	.LFE1452:
 1809              		.section	.text._ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE3endEv,"axG",@progbits,_ZNKSt6
 1810              		.align 2
 1811              		.weak	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE3endEv
 1813              	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE3endEv:
 1814              	.LFB1453:
 822:/usr/include/c++/11/bits/stl_vector.h **** 
 823:/usr/include/c++/11/bits/stl_vector.h ****       /**
 824:/usr/include/c++/11/bits/stl_vector.h ****        *  Returns a read/write iterator that points one past the last
 825:/usr/include/c++/11/bits/stl_vector.h ****        *  element in the %vector.  Iteration is done in ordinary
 826:/usr/include/c++/11/bits/stl_vector.h ****        *  element order.
 827:/usr/include/c++/11/bits/stl_vector.h ****        */
 828:/usr/include/c++/11/bits/stl_vector.h ****       iterator
 829:/usr/include/c++/11/bits/stl_vector.h ****       end() _GLIBCXX_NOEXCEPT
 830:/usr/include/c++/11/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 831:/usr/include/c++/11/bits/stl_vector.h **** 
 832:/usr/include/c++/11/bits/stl_vector.h ****       /**
 833:/usr/include/c++/11/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points one past
 834:/usr/include/c++/11/bits/stl_vector.h ****        *  the last element in the %vector.  Iteration is done in
 835:/usr/include/c++/11/bits/stl_vector.h ****        *  ordinary element order.
 836:/usr/include/c++/11/bits/stl_vector.h ****        */
 837:/usr/include/c++/11/bits/stl_vector.h ****       const_iterator
 838:/usr/include/c++/11/bits/stl_vector.h ****       end() const _GLIBCXX_NOEXCEPT
 1815              		.loc 4 838 7
 1816              		.cfi_startproc
 1817 0000 F30F1EFA 		endbr64
 1818 0004 55       		pushq	%rbp
 1819              		.cfi_def_cfa_offset 16
 1820              		.cfi_offset 6, -16
 1821 0005 4889E5   		movq	%rsp, %rbp
 1822              		.cfi_def_cfa_register 6
 1823 0008 4883EC20 		subq	$32, %rsp
 1824 000c 48897DE8 		movq	%rdi, -24(%rbp)
 1825              		.loc 4 838 7
 1826 0010 64488B04 		movq	%fs:40, %rax
 1826      25280000 
 1826      00
 1827 0019 488945F8 		movq	%rax, -8(%rbp)
 1828 001d 31C0     		xorl	%eax, %eax
 839:/usr/include/c++/11/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 1829              		.loc 4 839 45
 1830 001f 488B45E8 		movq	-24(%rbp), %rax
 1831 0023 488D5008 		leaq	8(%rax), %rdx
 1832              		.loc 4 839 16
 1833 0027 488D45F0 		leaq	-16(%rbp), %rax
 1834 002b 4889D6   		movq	%rdx, %rsi
 1835 002e 4889C7   		movq	%rax, %rdi
 1836 0031 E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC1ERK
 1836      00
 1837              		.loc 4 839 54
 1838 0036 488B45F0 		movq	-16(%rbp), %rax
 1839              		.loc 4 839 57
 1840 003a 488B55F8 		movq	-8(%rbp), %rdx
 1841 003e 64482B14 		subq	%fs:40, %rdx
 1841      25280000 
 1841      00
 1842 0047 7405     		je	.L88
 1843 0049 E8000000 		call	__stack_chk_fail@PLT
 1843      00
 1844              	.L88:
 1845 004e C9       		leave
 1846              		.cfi_def_cfa 7, 8
 1847 004f C3       		ret
 1848              		.cfi_endproc
 1849              	.LFE1453:
 1851              		.section	.text._ZN9__gnu_cxxneIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEEbRKNS_17__n
 1852              		.weak	_ZN9__gnu_cxxneIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_ite
 1854              	_ZN9__gnu_cxxneIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT
 1855              	.LFB1454:
 1856              		.file 5 "/usr/include/c++/11/bits/stl_iterator.h"
   1:/usr/include/c++/11/bits/stl_iterator.h **** // Iterators -*- C++ -*-
   2:/usr/include/c++/11/bits/stl_iterator.h **** 
   3:/usr/include/c++/11/bits/stl_iterator.h **** // Copyright (C) 2001-2021 Free Software Foundation, Inc.
   4:/usr/include/c++/11/bits/stl_iterator.h **** //
   5:/usr/include/c++/11/bits/stl_iterator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/11/bits/stl_iterator.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/11/bits/stl_iterator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/11/bits/stl_iterator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/11/bits/stl_iterator.h **** // any later version.
  10:/usr/include/c++/11/bits/stl_iterator.h **** 
  11:/usr/include/c++/11/bits/stl_iterator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/11/bits/stl_iterator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/11/bits/stl_iterator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/11/bits/stl_iterator.h **** // GNU General Public License for more details.
  15:/usr/include/c++/11/bits/stl_iterator.h **** 
  16:/usr/include/c++/11/bits/stl_iterator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/11/bits/stl_iterator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/11/bits/stl_iterator.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/11/bits/stl_iterator.h **** 
  20:/usr/include/c++/11/bits/stl_iterator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/11/bits/stl_iterator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/11/bits/stl_iterator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/11/bits/stl_iterator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/11/bits/stl_iterator.h **** 
  25:/usr/include/c++/11/bits/stl_iterator.h **** /*
  26:/usr/include/c++/11/bits/stl_iterator.h ****  *
  27:/usr/include/c++/11/bits/stl_iterator.h ****  * Copyright (c) 1994
  28:/usr/include/c++/11/bits/stl_iterator.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/11/bits/stl_iterator.h ****  *
  30:/usr/include/c++/11/bits/stl_iterator.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/11/bits/stl_iterator.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/11/bits/stl_iterator.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/11/bits/stl_iterator.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/11/bits/stl_iterator.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/11/bits/stl_iterator.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/11/bits/stl_iterator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/11/bits/stl_iterator.h ****  *
  38:/usr/include/c++/11/bits/stl_iterator.h ****  *
  39:/usr/include/c++/11/bits/stl_iterator.h ****  * Copyright (c) 1996-1998
  40:/usr/include/c++/11/bits/stl_iterator.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/11/bits/stl_iterator.h ****  *
  42:/usr/include/c++/11/bits/stl_iterator.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/11/bits/stl_iterator.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/11/bits/stl_iterator.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/11/bits/stl_iterator.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/11/bits/stl_iterator.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/11/bits/stl_iterator.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/11/bits/stl_iterator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/11/bits/stl_iterator.h ****  */
  50:/usr/include/c++/11/bits/stl_iterator.h **** 
  51:/usr/include/c++/11/bits/stl_iterator.h **** /** @file bits/stl_iterator.h
  52:/usr/include/c++/11/bits/stl_iterator.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/11/bits/stl_iterator.h ****  *  Do not attempt to use it directly. @headername{iterator}
  54:/usr/include/c++/11/bits/stl_iterator.h ****  *
  55:/usr/include/c++/11/bits/stl_iterator.h ****  *  This file implements reverse_iterator, back_insert_iterator,
  56:/usr/include/c++/11/bits/stl_iterator.h ****  *  front_insert_iterator, insert_iterator, __normal_iterator, and their
  57:/usr/include/c++/11/bits/stl_iterator.h ****  *  supporting functions and overloaded operators.
  58:/usr/include/c++/11/bits/stl_iterator.h ****  */
  59:/usr/include/c++/11/bits/stl_iterator.h **** 
  60:/usr/include/c++/11/bits/stl_iterator.h **** #ifndef _STL_ITERATOR_H
  61:/usr/include/c++/11/bits/stl_iterator.h **** #define _STL_ITERATOR_H 1
  62:/usr/include/c++/11/bits/stl_iterator.h **** 
  63:/usr/include/c++/11/bits/stl_iterator.h **** #include <bits/cpp_type_traits.h>
  64:/usr/include/c++/11/bits/stl_iterator.h **** #include <bits/stl_iterator_base_types.h>
  65:/usr/include/c++/11/bits/stl_iterator.h **** #include <ext/type_traits.h>
  66:/usr/include/c++/11/bits/stl_iterator.h **** #include <bits/move.h>
  67:/usr/include/c++/11/bits/stl_iterator.h **** #include <bits/ptr_traits.h>
  68:/usr/include/c++/11/bits/stl_iterator.h **** 
  69:/usr/include/c++/11/bits/stl_iterator.h **** #if __cplusplus >= 201103L
  70:/usr/include/c++/11/bits/stl_iterator.h **** # include <type_traits>
  71:/usr/include/c++/11/bits/stl_iterator.h **** #endif
  72:/usr/include/c++/11/bits/stl_iterator.h **** 
  73:/usr/include/c++/11/bits/stl_iterator.h **** #if __cplusplus > 201703L
  74:/usr/include/c++/11/bits/stl_iterator.h **** # define __cpp_lib_array_constexpr 201811L
  75:/usr/include/c++/11/bits/stl_iterator.h **** # define __cpp_lib_constexpr_iterator 201811L
  76:/usr/include/c++/11/bits/stl_iterator.h **** #elif __cplusplus == 201703L
  77:/usr/include/c++/11/bits/stl_iterator.h **** # define __cpp_lib_array_constexpr 201803L
  78:/usr/include/c++/11/bits/stl_iterator.h **** #endif
  79:/usr/include/c++/11/bits/stl_iterator.h **** 
  80:/usr/include/c++/11/bits/stl_iterator.h **** #if __cplusplus > 201703L
  81:/usr/include/c++/11/bits/stl_iterator.h **** # include <compare>
  82:/usr/include/c++/11/bits/stl_iterator.h **** # include <new>
  83:/usr/include/c++/11/bits/stl_iterator.h **** # include <bits/exception_defines.h>
  84:/usr/include/c++/11/bits/stl_iterator.h **** # include <bits/iterator_concepts.h>
  85:/usr/include/c++/11/bits/stl_iterator.h **** #endif
  86:/usr/include/c++/11/bits/stl_iterator.h **** 
  87:/usr/include/c++/11/bits/stl_iterator.h **** namespace std _GLIBCXX_VISIBILITY(default)
  88:/usr/include/c++/11/bits/stl_iterator.h **** {
  89:/usr/include/c++/11/bits/stl_iterator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  90:/usr/include/c++/11/bits/stl_iterator.h **** 
  91:/usr/include/c++/11/bits/stl_iterator.h ****   /**
  92:/usr/include/c++/11/bits/stl_iterator.h ****    * @addtogroup iterators
  93:/usr/include/c++/11/bits/stl_iterator.h ****    * @{
  94:/usr/include/c++/11/bits/stl_iterator.h ****    */
  95:/usr/include/c++/11/bits/stl_iterator.h **** 
  96:/usr/include/c++/11/bits/stl_iterator.h **** #if __cpp_lib_concepts
  97:/usr/include/c++/11/bits/stl_iterator.h ****   namespace __detail
  98:/usr/include/c++/11/bits/stl_iterator.h ****   {
  99:/usr/include/c++/11/bits/stl_iterator.h ****     // Weaken iterator_category _Cat to _Limit if it is derived from that,
 100:/usr/include/c++/11/bits/stl_iterator.h ****     // otherwise use _Otherwise.
 101:/usr/include/c++/11/bits/stl_iterator.h ****     template<typename _Cat, typename _Limit, typename _Otherwise = _Cat>
 102:/usr/include/c++/11/bits/stl_iterator.h ****       using __clamp_iter_cat
 103:/usr/include/c++/11/bits/stl_iterator.h **** 	= conditional_t<derived_from<_Cat, _Limit>, _Limit, _Otherwise>;
 104:/usr/include/c++/11/bits/stl_iterator.h ****   }
 105:/usr/include/c++/11/bits/stl_iterator.h **** #endif
 106:/usr/include/c++/11/bits/stl_iterator.h **** 
 107:/usr/include/c++/11/bits/stl_iterator.h ****   // 24.4.1 Reverse iterators
 108:/usr/include/c++/11/bits/stl_iterator.h ****   /**
 109:/usr/include/c++/11/bits/stl_iterator.h ****    *  Bidirectional and random access iterators have corresponding reverse
 110:/usr/include/c++/11/bits/stl_iterator.h ****    *  %iterator adaptors that iterate through the data structure in the
 111:/usr/include/c++/11/bits/stl_iterator.h ****    *  opposite direction.  They have the same signatures as the corresponding
 112:/usr/include/c++/11/bits/stl_iterator.h ****    *  iterators.  The fundamental relation between a reverse %iterator and its
 113:/usr/include/c++/11/bits/stl_iterator.h ****    *  corresponding %iterator @c i is established by the identity:
 114:/usr/include/c++/11/bits/stl_iterator.h ****    *  @code
 115:/usr/include/c++/11/bits/stl_iterator.h ****    *      &*(reverse_iterator(i)) == &*(i - 1)
 116:/usr/include/c++/11/bits/stl_iterator.h ****    *  @endcode
 117:/usr/include/c++/11/bits/stl_iterator.h ****    *
 118:/usr/include/c++/11/bits/stl_iterator.h ****    *  <em>This mapping is dictated by the fact that while there is always a
 119:/usr/include/c++/11/bits/stl_iterator.h ****    *  pointer past the end of an array, there might not be a valid pointer
 120:/usr/include/c++/11/bits/stl_iterator.h ****    *  before the beginning of an array.</em> [24.4.1]/1,2
 121:/usr/include/c++/11/bits/stl_iterator.h ****    *
 122:/usr/include/c++/11/bits/stl_iterator.h ****    *  Reverse iterators can be tricky and surprising at first.  Their
 123:/usr/include/c++/11/bits/stl_iterator.h ****    *  semantics make sense, however, and the trickiness is a side effect of
 124:/usr/include/c++/11/bits/stl_iterator.h ****    *  the requirement that the iterators must be safe.
 125:/usr/include/c++/11/bits/stl_iterator.h ****   */
 126:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _Iterator>
 127:/usr/include/c++/11/bits/stl_iterator.h ****     class reverse_iterator
 128:/usr/include/c++/11/bits/stl_iterator.h ****     : public iterator<typename iterator_traits<_Iterator>::iterator_category,
 129:/usr/include/c++/11/bits/stl_iterator.h **** 		      typename iterator_traits<_Iterator>::value_type,
 130:/usr/include/c++/11/bits/stl_iterator.h **** 		      typename iterator_traits<_Iterator>::difference_type,
 131:/usr/include/c++/11/bits/stl_iterator.h **** 		      typename iterator_traits<_Iterator>::pointer,
 132:/usr/include/c++/11/bits/stl_iterator.h ****                       typename iterator_traits<_Iterator>::reference>
 133:/usr/include/c++/11/bits/stl_iterator.h ****     {
 134:/usr/include/c++/11/bits/stl_iterator.h ****       template<typename _Iter>
 135:/usr/include/c++/11/bits/stl_iterator.h **** 	friend class reverse_iterator;
 136:/usr/include/c++/11/bits/stl_iterator.h **** 
 137:/usr/include/c++/11/bits/stl_iterator.h **** #if __cpp_lib_concepts
 138:/usr/include/c++/11/bits/stl_iterator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 139:/usr/include/c++/11/bits/stl_iterator.h ****       // 3435. three_way_comparable_with<reverse_iterator<int*>, [...]>
 140:/usr/include/c++/11/bits/stl_iterator.h ****       template<typename _Iter>
 141:/usr/include/c++/11/bits/stl_iterator.h **** 	static constexpr bool __convertible = !is_same_v<_Iter, _Iterator>
 142:/usr/include/c++/11/bits/stl_iterator.h **** 	    && convertible_to<const _Iter&, _Iterator>;
 143:/usr/include/c++/11/bits/stl_iterator.h **** #endif
 144:/usr/include/c++/11/bits/stl_iterator.h **** 
 145:/usr/include/c++/11/bits/stl_iterator.h ****     protected:
 146:/usr/include/c++/11/bits/stl_iterator.h ****       _Iterator current;
 147:/usr/include/c++/11/bits/stl_iterator.h **** 
 148:/usr/include/c++/11/bits/stl_iterator.h ****       typedef iterator_traits<_Iterator>		__traits_type;
 149:/usr/include/c++/11/bits/stl_iterator.h **** 
 150:/usr/include/c++/11/bits/stl_iterator.h ****     public:
 151:/usr/include/c++/11/bits/stl_iterator.h ****       typedef _Iterator					iterator_type;
 152:/usr/include/c++/11/bits/stl_iterator.h ****       typedef typename __traits_type::pointer		pointer;
 153:/usr/include/c++/11/bits/stl_iterator.h **** #if ! __cpp_lib_concepts
 154:/usr/include/c++/11/bits/stl_iterator.h ****       typedef typename __traits_type::difference_type	difference_type;
 155:/usr/include/c++/11/bits/stl_iterator.h ****       typedef typename __traits_type::reference		reference;
 156:/usr/include/c++/11/bits/stl_iterator.h **** #else
 157:/usr/include/c++/11/bits/stl_iterator.h ****       using iterator_concept
 158:/usr/include/c++/11/bits/stl_iterator.h **** 	= conditional_t<random_access_iterator<_Iterator>,
 159:/usr/include/c++/11/bits/stl_iterator.h **** 			random_access_iterator_tag,
 160:/usr/include/c++/11/bits/stl_iterator.h **** 			bidirectional_iterator_tag>;
 161:/usr/include/c++/11/bits/stl_iterator.h ****       using iterator_category
 162:/usr/include/c++/11/bits/stl_iterator.h **** 	= __detail::__clamp_iter_cat<typename __traits_type::iterator_category,
 163:/usr/include/c++/11/bits/stl_iterator.h **** 				     random_access_iterator_tag>;
 164:/usr/include/c++/11/bits/stl_iterator.h ****       using value_type = iter_value_t<_Iterator>;
 165:/usr/include/c++/11/bits/stl_iterator.h ****       using difference_type = iter_difference_t<_Iterator>;
 166:/usr/include/c++/11/bits/stl_iterator.h ****       using reference = iter_reference_t<_Iterator>;
 167:/usr/include/c++/11/bits/stl_iterator.h **** #endif
 168:/usr/include/c++/11/bits/stl_iterator.h **** 
 169:/usr/include/c++/11/bits/stl_iterator.h ****       /**
 170:/usr/include/c++/11/bits/stl_iterator.h ****        *  The default constructor value-initializes member @p current.
 171:/usr/include/c++/11/bits/stl_iterator.h ****        *  If it is a pointer, that means it is zero-initialized.
 172:/usr/include/c++/11/bits/stl_iterator.h ****       */
 173:/usr/include/c++/11/bits/stl_iterator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 174:/usr/include/c++/11/bits/stl_iterator.h ****       // 235 No specification of default ctor for reverse_iterator
 175:/usr/include/c++/11/bits/stl_iterator.h ****       // 1012. reverse_iterator default ctor should value initialize
 176:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR
 177:/usr/include/c++/11/bits/stl_iterator.h ****       reverse_iterator() : current() { }
 178:/usr/include/c++/11/bits/stl_iterator.h **** 
 179:/usr/include/c++/11/bits/stl_iterator.h ****       /**
 180:/usr/include/c++/11/bits/stl_iterator.h ****        *  This %iterator will move in the opposite direction that @p x does.
 181:/usr/include/c++/11/bits/stl_iterator.h ****       */
 182:/usr/include/c++/11/bits/stl_iterator.h ****       explicit _GLIBCXX17_CONSTEXPR
 183:/usr/include/c++/11/bits/stl_iterator.h ****       reverse_iterator(iterator_type __x) : current(__x) { }
 184:/usr/include/c++/11/bits/stl_iterator.h **** 
 185:/usr/include/c++/11/bits/stl_iterator.h ****       /**
 186:/usr/include/c++/11/bits/stl_iterator.h ****        *  The copy constructor is normal.
 187:/usr/include/c++/11/bits/stl_iterator.h ****       */
 188:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR
 189:/usr/include/c++/11/bits/stl_iterator.h ****       reverse_iterator(const reverse_iterator& __x)
 190:/usr/include/c++/11/bits/stl_iterator.h ****       : current(__x.current) { }
 191:/usr/include/c++/11/bits/stl_iterator.h **** 
 192:/usr/include/c++/11/bits/stl_iterator.h **** #if __cplusplus >= 201103L
 193:/usr/include/c++/11/bits/stl_iterator.h ****       reverse_iterator& operator=(const reverse_iterator&) = default;
 194:/usr/include/c++/11/bits/stl_iterator.h **** #endif
 195:/usr/include/c++/11/bits/stl_iterator.h **** 
 196:/usr/include/c++/11/bits/stl_iterator.h ****       /**
 197:/usr/include/c++/11/bits/stl_iterator.h ****        *  A %reverse_iterator across other types can be copied if the
 198:/usr/include/c++/11/bits/stl_iterator.h ****        *  underlying %iterator can be converted to the type of @c current.
 199:/usr/include/c++/11/bits/stl_iterator.h ****       */
 200:/usr/include/c++/11/bits/stl_iterator.h ****       template<typename _Iter>
 201:/usr/include/c++/11/bits/stl_iterator.h **** #if __cpp_lib_concepts
 202:/usr/include/c++/11/bits/stl_iterator.h **** 	requires __convertible<_Iter>
 203:/usr/include/c++/11/bits/stl_iterator.h **** #endif
 204:/usr/include/c++/11/bits/stl_iterator.h **** 	_GLIBCXX17_CONSTEXPR
 205:/usr/include/c++/11/bits/stl_iterator.h ****         reverse_iterator(const reverse_iterator<_Iter>& __x)
 206:/usr/include/c++/11/bits/stl_iterator.h **** 	: current(__x.current) { }
 207:/usr/include/c++/11/bits/stl_iterator.h **** 
 208:/usr/include/c++/11/bits/stl_iterator.h **** #if __cplusplus >= 201103L
 209:/usr/include/c++/11/bits/stl_iterator.h ****       template<typename _Iter>
 210:/usr/include/c++/11/bits/stl_iterator.h **** #if __cpp_lib_concepts
 211:/usr/include/c++/11/bits/stl_iterator.h **** 	requires __convertible<_Iter>
 212:/usr/include/c++/11/bits/stl_iterator.h **** 	  && assignable_from<_Iterator&, const _Iter&>
 213:/usr/include/c++/11/bits/stl_iterator.h **** #endif
 214:/usr/include/c++/11/bits/stl_iterator.h **** 	_GLIBCXX17_CONSTEXPR
 215:/usr/include/c++/11/bits/stl_iterator.h **** 	reverse_iterator&
 216:/usr/include/c++/11/bits/stl_iterator.h **** 	operator=(const reverse_iterator<_Iter>& __x)
 217:/usr/include/c++/11/bits/stl_iterator.h **** 	{
 218:/usr/include/c++/11/bits/stl_iterator.h **** 	  current = __x.current;
 219:/usr/include/c++/11/bits/stl_iterator.h **** 	  return *this;
 220:/usr/include/c++/11/bits/stl_iterator.h **** 	}
 221:/usr/include/c++/11/bits/stl_iterator.h **** #endif
 222:/usr/include/c++/11/bits/stl_iterator.h **** 
 223:/usr/include/c++/11/bits/stl_iterator.h ****       /**
 224:/usr/include/c++/11/bits/stl_iterator.h ****        *  @return  @c current, the %iterator used for underlying work.
 225:/usr/include/c++/11/bits/stl_iterator.h ****       */
 226:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR iterator_type
 227:/usr/include/c++/11/bits/stl_iterator.h ****       base() const
 228:/usr/include/c++/11/bits/stl_iterator.h ****       { return current; }
 229:/usr/include/c++/11/bits/stl_iterator.h **** 
 230:/usr/include/c++/11/bits/stl_iterator.h ****       /**
 231:/usr/include/c++/11/bits/stl_iterator.h ****        *  @return  A reference to the value at @c --current
 232:/usr/include/c++/11/bits/stl_iterator.h ****        *
 233:/usr/include/c++/11/bits/stl_iterator.h ****        *  This requires that @c --current is dereferenceable.
 234:/usr/include/c++/11/bits/stl_iterator.h ****        *
 235:/usr/include/c++/11/bits/stl_iterator.h ****        *  @warning This implementation requires that for an iterator of the
 236:/usr/include/c++/11/bits/stl_iterator.h ****        *           underlying iterator type, @c x, a reference obtained by
 237:/usr/include/c++/11/bits/stl_iterator.h ****        *           @c *x remains valid after @c x has been modified or
 238:/usr/include/c++/11/bits/stl_iterator.h ****        *           destroyed. This is a bug: http://gcc.gnu.org/PR51823
 239:/usr/include/c++/11/bits/stl_iterator.h ****       */
 240:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reference
 241:/usr/include/c++/11/bits/stl_iterator.h ****       operator*() const
 242:/usr/include/c++/11/bits/stl_iterator.h ****       {
 243:/usr/include/c++/11/bits/stl_iterator.h **** 	_Iterator __tmp = current;
 244:/usr/include/c++/11/bits/stl_iterator.h **** 	return *--__tmp;
 245:/usr/include/c++/11/bits/stl_iterator.h ****       }
 246:/usr/include/c++/11/bits/stl_iterator.h **** 
 247:/usr/include/c++/11/bits/stl_iterator.h ****       /**
 248:/usr/include/c++/11/bits/stl_iterator.h ****        *  @return  A pointer to the value at @c --current
 249:/usr/include/c++/11/bits/stl_iterator.h ****        *
 250:/usr/include/c++/11/bits/stl_iterator.h ****        *  This requires that @c --current is dereferenceable.
 251:/usr/include/c++/11/bits/stl_iterator.h ****       */
 252:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR pointer
 253:/usr/include/c++/11/bits/stl_iterator.h ****       operator->() const
 254:/usr/include/c++/11/bits/stl_iterator.h **** #if __cplusplus > 201703L && __cpp_concepts >= 201907L
 255:/usr/include/c++/11/bits/stl_iterator.h ****       requires is_pointer_v<_Iterator>
 256:/usr/include/c++/11/bits/stl_iterator.h **** 	|| requires(const _Iterator __i) { __i.operator->(); }
 257:/usr/include/c++/11/bits/stl_iterator.h **** #endif
 258:/usr/include/c++/11/bits/stl_iterator.h ****       {
 259:/usr/include/c++/11/bits/stl_iterator.h **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
 260:/usr/include/c++/11/bits/stl_iterator.h **** 	// 1052. operator-> should also support smart pointers
 261:/usr/include/c++/11/bits/stl_iterator.h **** 	_Iterator __tmp = current;
 262:/usr/include/c++/11/bits/stl_iterator.h **** 	--__tmp;
 263:/usr/include/c++/11/bits/stl_iterator.h **** 	return _S_to_pointer(__tmp);
 264:/usr/include/c++/11/bits/stl_iterator.h ****       }
 265:/usr/include/c++/11/bits/stl_iterator.h **** 
 266:/usr/include/c++/11/bits/stl_iterator.h ****       /**
 267:/usr/include/c++/11/bits/stl_iterator.h ****        *  @return  @c *this
 268:/usr/include/c++/11/bits/stl_iterator.h ****        *
 269:/usr/include/c++/11/bits/stl_iterator.h ****        *  Decrements the underlying iterator.
 270:/usr/include/c++/11/bits/stl_iterator.h ****       */
 271:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator&
 272:/usr/include/c++/11/bits/stl_iterator.h ****       operator++()
 273:/usr/include/c++/11/bits/stl_iterator.h ****       {
 274:/usr/include/c++/11/bits/stl_iterator.h **** 	--current;
 275:/usr/include/c++/11/bits/stl_iterator.h **** 	return *this;
 276:/usr/include/c++/11/bits/stl_iterator.h ****       }
 277:/usr/include/c++/11/bits/stl_iterator.h **** 
 278:/usr/include/c++/11/bits/stl_iterator.h ****       /**
 279:/usr/include/c++/11/bits/stl_iterator.h ****        *  @return  The original value of @c *this
 280:/usr/include/c++/11/bits/stl_iterator.h ****        *
 281:/usr/include/c++/11/bits/stl_iterator.h ****        *  Decrements the underlying iterator.
 282:/usr/include/c++/11/bits/stl_iterator.h ****       */
 283:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 284:/usr/include/c++/11/bits/stl_iterator.h ****       operator++(int)
 285:/usr/include/c++/11/bits/stl_iterator.h ****       {
 286:/usr/include/c++/11/bits/stl_iterator.h **** 	reverse_iterator __tmp = *this;
 287:/usr/include/c++/11/bits/stl_iterator.h **** 	--current;
 288:/usr/include/c++/11/bits/stl_iterator.h **** 	return __tmp;
 289:/usr/include/c++/11/bits/stl_iterator.h ****       }
 290:/usr/include/c++/11/bits/stl_iterator.h **** 
 291:/usr/include/c++/11/bits/stl_iterator.h ****       /**
 292:/usr/include/c++/11/bits/stl_iterator.h ****        *  @return  @c *this
 293:/usr/include/c++/11/bits/stl_iterator.h ****        *
 294:/usr/include/c++/11/bits/stl_iterator.h ****        *  Increments the underlying iterator.
 295:/usr/include/c++/11/bits/stl_iterator.h ****       */
 296:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator&
 297:/usr/include/c++/11/bits/stl_iterator.h ****       operator--()
 298:/usr/include/c++/11/bits/stl_iterator.h ****       {
 299:/usr/include/c++/11/bits/stl_iterator.h **** 	++current;
 300:/usr/include/c++/11/bits/stl_iterator.h **** 	return *this;
 301:/usr/include/c++/11/bits/stl_iterator.h ****       }
 302:/usr/include/c++/11/bits/stl_iterator.h **** 
 303:/usr/include/c++/11/bits/stl_iterator.h ****       /**
 304:/usr/include/c++/11/bits/stl_iterator.h ****        *  @return  A reverse_iterator with the previous value of @c *this
 305:/usr/include/c++/11/bits/stl_iterator.h ****        *
 306:/usr/include/c++/11/bits/stl_iterator.h ****        *  Increments the underlying iterator.
 307:/usr/include/c++/11/bits/stl_iterator.h ****       */
 308:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 309:/usr/include/c++/11/bits/stl_iterator.h ****       operator--(int)
 310:/usr/include/c++/11/bits/stl_iterator.h ****       {
 311:/usr/include/c++/11/bits/stl_iterator.h **** 	reverse_iterator __tmp = *this;
 312:/usr/include/c++/11/bits/stl_iterator.h **** 	++current;
 313:/usr/include/c++/11/bits/stl_iterator.h **** 	return __tmp;
 314:/usr/include/c++/11/bits/stl_iterator.h ****       }
 315:/usr/include/c++/11/bits/stl_iterator.h **** 
 316:/usr/include/c++/11/bits/stl_iterator.h ****       /**
 317:/usr/include/c++/11/bits/stl_iterator.h ****        *  @return  A reverse_iterator that refers to @c current - @a __n
 318:/usr/include/c++/11/bits/stl_iterator.h ****        *
 319:/usr/include/c++/11/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 320:/usr/include/c++/11/bits/stl_iterator.h ****       */
 321:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 322:/usr/include/c++/11/bits/stl_iterator.h ****       operator+(difference_type __n) const
 323:/usr/include/c++/11/bits/stl_iterator.h ****       { return reverse_iterator(current - __n); }
 324:/usr/include/c++/11/bits/stl_iterator.h **** 
 325:/usr/include/c++/11/bits/stl_iterator.h ****       /**
 326:/usr/include/c++/11/bits/stl_iterator.h ****        *  @return  *this
 327:/usr/include/c++/11/bits/stl_iterator.h ****        *
 328:/usr/include/c++/11/bits/stl_iterator.h ****        *  Moves the underlying iterator backwards @a __n steps.
 329:/usr/include/c++/11/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 330:/usr/include/c++/11/bits/stl_iterator.h ****       */
 331:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator&
 332:/usr/include/c++/11/bits/stl_iterator.h ****       operator+=(difference_type __n)
 333:/usr/include/c++/11/bits/stl_iterator.h ****       {
 334:/usr/include/c++/11/bits/stl_iterator.h **** 	current -= __n;
 335:/usr/include/c++/11/bits/stl_iterator.h **** 	return *this;
 336:/usr/include/c++/11/bits/stl_iterator.h ****       }
 337:/usr/include/c++/11/bits/stl_iterator.h **** 
 338:/usr/include/c++/11/bits/stl_iterator.h ****       /**
 339:/usr/include/c++/11/bits/stl_iterator.h ****        *  @return  A reverse_iterator that refers to @c current - @a __n
 340:/usr/include/c++/11/bits/stl_iterator.h ****        *
 341:/usr/include/c++/11/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 342:/usr/include/c++/11/bits/stl_iterator.h ****       */
 343:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 344:/usr/include/c++/11/bits/stl_iterator.h ****       operator-(difference_type __n) const
 345:/usr/include/c++/11/bits/stl_iterator.h ****       { return reverse_iterator(current + __n); }
 346:/usr/include/c++/11/bits/stl_iterator.h **** 
 347:/usr/include/c++/11/bits/stl_iterator.h ****       /**
 348:/usr/include/c++/11/bits/stl_iterator.h ****        *  @return  *this
 349:/usr/include/c++/11/bits/stl_iterator.h ****        *
 350:/usr/include/c++/11/bits/stl_iterator.h ****        *  Moves the underlying iterator forwards @a __n steps.
 351:/usr/include/c++/11/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 352:/usr/include/c++/11/bits/stl_iterator.h ****       */
 353:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator&
 354:/usr/include/c++/11/bits/stl_iterator.h ****       operator-=(difference_type __n)
 355:/usr/include/c++/11/bits/stl_iterator.h ****       {
 356:/usr/include/c++/11/bits/stl_iterator.h **** 	current += __n;
 357:/usr/include/c++/11/bits/stl_iterator.h **** 	return *this;
 358:/usr/include/c++/11/bits/stl_iterator.h ****       }
 359:/usr/include/c++/11/bits/stl_iterator.h **** 
 360:/usr/include/c++/11/bits/stl_iterator.h ****       /**
 361:/usr/include/c++/11/bits/stl_iterator.h ****        *  @return  The value at @c current - @a __n - 1
 362:/usr/include/c++/11/bits/stl_iterator.h ****        *
 363:/usr/include/c++/11/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 364:/usr/include/c++/11/bits/stl_iterator.h ****       */
 365:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reference
 366:/usr/include/c++/11/bits/stl_iterator.h ****       operator[](difference_type __n) const
 367:/usr/include/c++/11/bits/stl_iterator.h ****       { return *(*this + __n); }
 368:/usr/include/c++/11/bits/stl_iterator.h **** 
 369:/usr/include/c++/11/bits/stl_iterator.h **** #if __cplusplus > 201703L && __cpp_lib_concepts
 370:/usr/include/c++/11/bits/stl_iterator.h ****       friend constexpr iter_rvalue_reference_t<_Iterator>
 371:/usr/include/c++/11/bits/stl_iterator.h ****       iter_move(const reverse_iterator& __i)
 372:/usr/include/c++/11/bits/stl_iterator.h ****       noexcept(is_nothrow_copy_constructible_v<_Iterator>
 373:/usr/include/c++/11/bits/stl_iterator.h **** 	       && noexcept(ranges::iter_move(--std::declval<_Iterator&>())))
 374:/usr/include/c++/11/bits/stl_iterator.h ****       {
 375:/usr/include/c++/11/bits/stl_iterator.h **** 	auto __tmp = __i.base();
 376:/usr/include/c++/11/bits/stl_iterator.h **** 	return ranges::iter_move(--__tmp);
 377:/usr/include/c++/11/bits/stl_iterator.h ****       }
 378:/usr/include/c++/11/bits/stl_iterator.h **** 
 379:/usr/include/c++/11/bits/stl_iterator.h ****       template<indirectly_swappable<_Iterator> _Iter2>
 380:/usr/include/c++/11/bits/stl_iterator.h **** 	friend constexpr void
 381:/usr/include/c++/11/bits/stl_iterator.h **** 	iter_swap(const reverse_iterator& __x,
 382:/usr/include/c++/11/bits/stl_iterator.h **** 		  const reverse_iterator<_Iter2>& __y)
 383:/usr/include/c++/11/bits/stl_iterator.h **** 	noexcept(is_nothrow_copy_constructible_v<_Iterator>
 384:/usr/include/c++/11/bits/stl_iterator.h **** 		 && is_nothrow_copy_constructible_v<_Iter2>
 385:/usr/include/c++/11/bits/stl_iterator.h **** 		 && noexcept(ranges::iter_swap(--std::declval<_Iterator&>(),
 386:/usr/include/c++/11/bits/stl_iterator.h **** 					       --std::declval<_Iter2&>())))
 387:/usr/include/c++/11/bits/stl_iterator.h **** 	{
 388:/usr/include/c++/11/bits/stl_iterator.h **** 	  auto __xtmp = __x.base();
 389:/usr/include/c++/11/bits/stl_iterator.h **** 	  auto __ytmp = __y.base();
 390:/usr/include/c++/11/bits/stl_iterator.h **** 	  ranges::iter_swap(--__xtmp, --__ytmp);
 391:/usr/include/c++/11/bits/stl_iterator.h **** 	}
 392:/usr/include/c++/11/bits/stl_iterator.h **** #endif
 393:/usr/include/c++/11/bits/stl_iterator.h **** 
 394:/usr/include/c++/11/bits/stl_iterator.h ****     private:
 395:/usr/include/c++/11/bits/stl_iterator.h ****       template<typename _Tp>
 396:/usr/include/c++/11/bits/stl_iterator.h **** 	static _GLIBCXX17_CONSTEXPR _Tp*
 397:/usr/include/c++/11/bits/stl_iterator.h **** 	_S_to_pointer(_Tp* __p)
 398:/usr/include/c++/11/bits/stl_iterator.h ****         { return __p; }
 399:/usr/include/c++/11/bits/stl_iterator.h **** 
 400:/usr/include/c++/11/bits/stl_iterator.h ****       template<typename _Tp>
 401:/usr/include/c++/11/bits/stl_iterator.h **** 	static _GLIBCXX17_CONSTEXPR pointer
 402:/usr/include/c++/11/bits/stl_iterator.h **** 	_S_to_pointer(_Tp __t)
 403:/usr/include/c++/11/bits/stl_iterator.h ****         { return __t.operator->(); }
 404:/usr/include/c++/11/bits/stl_iterator.h ****     };
 405:/usr/include/c++/11/bits/stl_iterator.h **** 
 406:/usr/include/c++/11/bits/stl_iterator.h ****   ///@{
 407:/usr/include/c++/11/bits/stl_iterator.h ****   /**
 408:/usr/include/c++/11/bits/stl_iterator.h ****    *  @param  __x  A %reverse_iterator.
 409:/usr/include/c++/11/bits/stl_iterator.h ****    *  @param  __y  A %reverse_iterator.
 410:/usr/include/c++/11/bits/stl_iterator.h ****    *  @return  A simple bool.
 411:/usr/include/c++/11/bits/stl_iterator.h ****    *
 412:/usr/include/c++/11/bits/stl_iterator.h ****    *  Reverse iterators forward comparisons to their underlying base()
 413:/usr/include/c++/11/bits/stl_iterator.h ****    *  iterators.
 414:/usr/include/c++/11/bits/stl_iterator.h ****    *
 415:/usr/include/c++/11/bits/stl_iterator.h ****   */
 416:/usr/include/c++/11/bits/stl_iterator.h **** #if __cplusplus <= 201703L || ! defined __cpp_lib_concepts
 417:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _Iterator>
 418:/usr/include/c++/11/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 419:/usr/include/c++/11/bits/stl_iterator.h ****     operator==(const reverse_iterator<_Iterator>& __x,
 420:/usr/include/c++/11/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 421:/usr/include/c++/11/bits/stl_iterator.h ****     { return __x.base() == __y.base(); }
 422:/usr/include/c++/11/bits/stl_iterator.h **** 
 423:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _Iterator>
 424:/usr/include/c++/11/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 425:/usr/include/c++/11/bits/stl_iterator.h ****     operator<(const reverse_iterator<_Iterator>& __x,
 426:/usr/include/c++/11/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 427:/usr/include/c++/11/bits/stl_iterator.h ****     { return __y.base() < __x.base(); }
 428:/usr/include/c++/11/bits/stl_iterator.h **** 
 429:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _Iterator>
 430:/usr/include/c++/11/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 431:/usr/include/c++/11/bits/stl_iterator.h ****     operator!=(const reverse_iterator<_Iterator>& __x,
 432:/usr/include/c++/11/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 433:/usr/include/c++/11/bits/stl_iterator.h ****     { return !(__x == __y); }
 434:/usr/include/c++/11/bits/stl_iterator.h **** 
 435:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _Iterator>
 436:/usr/include/c++/11/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 437:/usr/include/c++/11/bits/stl_iterator.h ****     operator>(const reverse_iterator<_Iterator>& __x,
 438:/usr/include/c++/11/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 439:/usr/include/c++/11/bits/stl_iterator.h ****     { return __y < __x; }
 440:/usr/include/c++/11/bits/stl_iterator.h **** 
 441:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _Iterator>
 442:/usr/include/c++/11/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 443:/usr/include/c++/11/bits/stl_iterator.h ****     operator<=(const reverse_iterator<_Iterator>& __x,
 444:/usr/include/c++/11/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 445:/usr/include/c++/11/bits/stl_iterator.h ****     { return !(__y < __x); }
 446:/usr/include/c++/11/bits/stl_iterator.h **** 
 447:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _Iterator>
 448:/usr/include/c++/11/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 449:/usr/include/c++/11/bits/stl_iterator.h ****     operator>=(const reverse_iterator<_Iterator>& __x,
 450:/usr/include/c++/11/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 451:/usr/include/c++/11/bits/stl_iterator.h ****     { return !(__x < __y); }
 452:/usr/include/c++/11/bits/stl_iterator.h **** 
 453:/usr/include/c++/11/bits/stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 454:/usr/include/c++/11/bits/stl_iterator.h ****   // DR 280. Comparison of reverse_iterator to const reverse_iterator.
 455:/usr/include/c++/11/bits/stl_iterator.h **** 
 456:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 457:/usr/include/c++/11/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 458:/usr/include/c++/11/bits/stl_iterator.h ****     operator==(const reverse_iterator<_IteratorL>& __x,
 459:/usr/include/c++/11/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 460:/usr/include/c++/11/bits/stl_iterator.h ****     { return __x.base() == __y.base(); }
 461:/usr/include/c++/11/bits/stl_iterator.h **** 
 462:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 463:/usr/include/c++/11/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 464:/usr/include/c++/11/bits/stl_iterator.h ****     operator<(const reverse_iterator<_IteratorL>& __x,
 465:/usr/include/c++/11/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 466:/usr/include/c++/11/bits/stl_iterator.h ****     { return __x.base() > __y.base(); }
 467:/usr/include/c++/11/bits/stl_iterator.h **** 
 468:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 469:/usr/include/c++/11/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 470:/usr/include/c++/11/bits/stl_iterator.h ****     operator!=(const reverse_iterator<_IteratorL>& __x,
 471:/usr/include/c++/11/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 472:/usr/include/c++/11/bits/stl_iterator.h ****     { return __x.base() != __y.base(); }
 473:/usr/include/c++/11/bits/stl_iterator.h **** 
 474:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 475:/usr/include/c++/11/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 476:/usr/include/c++/11/bits/stl_iterator.h ****     operator>(const reverse_iterator<_IteratorL>& __x,
 477:/usr/include/c++/11/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 478:/usr/include/c++/11/bits/stl_iterator.h ****     { return __x.base() < __y.base(); }
 479:/usr/include/c++/11/bits/stl_iterator.h **** 
 480:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 481:/usr/include/c++/11/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 482:/usr/include/c++/11/bits/stl_iterator.h ****     operator<=(const reverse_iterator<_IteratorL>& __x,
 483:/usr/include/c++/11/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 484:/usr/include/c++/11/bits/stl_iterator.h ****     { return __x.base() >= __y.base(); }
 485:/usr/include/c++/11/bits/stl_iterator.h **** 
 486:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 487:/usr/include/c++/11/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 488:/usr/include/c++/11/bits/stl_iterator.h ****     operator>=(const reverse_iterator<_IteratorL>& __x,
 489:/usr/include/c++/11/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 490:/usr/include/c++/11/bits/stl_iterator.h ****     { return __x.base() <= __y.base(); }
 491:/usr/include/c++/11/bits/stl_iterator.h **** #else // C++20
 492:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 493:/usr/include/c++/11/bits/stl_iterator.h ****     constexpr bool
 494:/usr/include/c++/11/bits/stl_iterator.h ****     operator==(const reverse_iterator<_IteratorL>& __x,
 495:/usr/include/c++/11/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 496:/usr/include/c++/11/bits/stl_iterator.h ****     requires requires { { __x.base() == __y.base() } -> convertible_to<bool>; }
 497:/usr/include/c++/11/bits/stl_iterator.h ****     { return __x.base() == __y.base(); }
 498:/usr/include/c++/11/bits/stl_iterator.h **** 
 499:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 500:/usr/include/c++/11/bits/stl_iterator.h ****     constexpr bool
 501:/usr/include/c++/11/bits/stl_iterator.h ****     operator!=(const reverse_iterator<_IteratorL>& __x,
 502:/usr/include/c++/11/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 503:/usr/include/c++/11/bits/stl_iterator.h ****     requires requires { { __x.base() != __y.base() } -> convertible_to<bool>; }
 504:/usr/include/c++/11/bits/stl_iterator.h ****     { return __x.base() != __y.base(); }
 505:/usr/include/c++/11/bits/stl_iterator.h **** 
 506:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 507:/usr/include/c++/11/bits/stl_iterator.h ****     constexpr bool
 508:/usr/include/c++/11/bits/stl_iterator.h ****     operator<(const reverse_iterator<_IteratorL>& __x,
 509:/usr/include/c++/11/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 510:/usr/include/c++/11/bits/stl_iterator.h ****     requires requires { { __x.base() > __y.base() } -> convertible_to<bool>; }
 511:/usr/include/c++/11/bits/stl_iterator.h ****     { return __x.base() > __y.base(); }
 512:/usr/include/c++/11/bits/stl_iterator.h **** 
 513:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 514:/usr/include/c++/11/bits/stl_iterator.h ****     constexpr bool
 515:/usr/include/c++/11/bits/stl_iterator.h ****     operator>(const reverse_iterator<_IteratorL>& __x,
 516:/usr/include/c++/11/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 517:/usr/include/c++/11/bits/stl_iterator.h ****     requires requires { { __x.base() < __y.base() } -> convertible_to<bool>; }
 518:/usr/include/c++/11/bits/stl_iterator.h ****     { return __x.base() < __y.base(); }
 519:/usr/include/c++/11/bits/stl_iterator.h **** 
 520:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 521:/usr/include/c++/11/bits/stl_iterator.h ****     constexpr bool
 522:/usr/include/c++/11/bits/stl_iterator.h ****     operator<=(const reverse_iterator<_IteratorL>& __x,
 523:/usr/include/c++/11/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 524:/usr/include/c++/11/bits/stl_iterator.h ****     requires requires { { __x.base() >= __y.base() } -> convertible_to<bool>; }
 525:/usr/include/c++/11/bits/stl_iterator.h ****     { return __x.base() >= __y.base(); }
 526:/usr/include/c++/11/bits/stl_iterator.h **** 
 527:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 528:/usr/include/c++/11/bits/stl_iterator.h ****     constexpr bool
 529:/usr/include/c++/11/bits/stl_iterator.h ****     operator>=(const reverse_iterator<_IteratorL>& __x,
 530:/usr/include/c++/11/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 531:/usr/include/c++/11/bits/stl_iterator.h ****     requires requires { { __x.base() <= __y.base() } -> convertible_to<bool>; }
 532:/usr/include/c++/11/bits/stl_iterator.h ****     { return __x.base() <= __y.base(); }
 533:/usr/include/c++/11/bits/stl_iterator.h **** 
 534:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _IteratorL,
 535:/usr/include/c++/11/bits/stl_iterator.h **** 	   three_way_comparable_with<_IteratorL> _IteratorR>
 536:/usr/include/c++/11/bits/stl_iterator.h ****     constexpr compare_three_way_result_t<_IteratorL, _IteratorR>
 537:/usr/include/c++/11/bits/stl_iterator.h ****     operator<=>(const reverse_iterator<_IteratorL>& __x,
 538:/usr/include/c++/11/bits/stl_iterator.h **** 		const reverse_iterator<_IteratorR>& __y)
 539:/usr/include/c++/11/bits/stl_iterator.h ****     { return __y.base() <=> __x.base(); }
 540:/usr/include/c++/11/bits/stl_iterator.h **** #endif // C++20
 541:/usr/include/c++/11/bits/stl_iterator.h ****   ///@}
 542:/usr/include/c++/11/bits/stl_iterator.h **** 
 543:/usr/include/c++/11/bits/stl_iterator.h **** #if __cplusplus < 201103L
 544:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _Iterator>
 545:/usr/include/c++/11/bits/stl_iterator.h ****     inline typename reverse_iterator<_Iterator>::difference_type
 546:/usr/include/c++/11/bits/stl_iterator.h ****     operator-(const reverse_iterator<_Iterator>& __x,
 547:/usr/include/c++/11/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 548:/usr/include/c++/11/bits/stl_iterator.h ****     { return __y.base() - __x.base(); }
 549:/usr/include/c++/11/bits/stl_iterator.h **** 
 550:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 551:/usr/include/c++/11/bits/stl_iterator.h ****     inline typename reverse_iterator<_IteratorL>::difference_type
 552:/usr/include/c++/11/bits/stl_iterator.h ****     operator-(const reverse_iterator<_IteratorL>& __x,
 553:/usr/include/c++/11/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 554:/usr/include/c++/11/bits/stl_iterator.h ****     { return __y.base() - __x.base(); }
 555:/usr/include/c++/11/bits/stl_iterator.h **** #else
 556:/usr/include/c++/11/bits/stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 557:/usr/include/c++/11/bits/stl_iterator.h ****   // DR 685. reverse_iterator/move_iterator difference has invalid signatures
 558:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 559:/usr/include/c++/11/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR auto
 560:/usr/include/c++/11/bits/stl_iterator.h ****     operator-(const reverse_iterator<_IteratorL>& __x,
 561:/usr/include/c++/11/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 562:/usr/include/c++/11/bits/stl_iterator.h ****     -> decltype(__y.base() - __x.base())
 563:/usr/include/c++/11/bits/stl_iterator.h ****     { return __y.base() - __x.base(); }
 564:/usr/include/c++/11/bits/stl_iterator.h **** #endif
 565:/usr/include/c++/11/bits/stl_iterator.h **** 
 566:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _Iterator>
 567:/usr/include/c++/11/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>
 568:/usr/include/c++/11/bits/stl_iterator.h ****     operator+(typename reverse_iterator<_Iterator>::difference_type __n,
 569:/usr/include/c++/11/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __x)
 570:/usr/include/c++/11/bits/stl_iterator.h ****     { return reverse_iterator<_Iterator>(__x.base() - __n); }
 571:/usr/include/c++/11/bits/stl_iterator.h **** 
 572:/usr/include/c++/11/bits/stl_iterator.h **** #if __cplusplus >= 201103L
 573:/usr/include/c++/11/bits/stl_iterator.h ****   // Same as C++14 make_reverse_iterator but used in C++11 mode too.
 574:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _Iterator>
 575:/usr/include/c++/11/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>
 576:/usr/include/c++/11/bits/stl_iterator.h ****     __make_reverse_iterator(_Iterator __i)
 577:/usr/include/c++/11/bits/stl_iterator.h ****     { return reverse_iterator<_Iterator>(__i); }
 578:/usr/include/c++/11/bits/stl_iterator.h **** 
 579:/usr/include/c++/11/bits/stl_iterator.h **** # if __cplusplus >= 201402L
 580:/usr/include/c++/11/bits/stl_iterator.h **** #  define __cpp_lib_make_reverse_iterator 201402
 581:/usr/include/c++/11/bits/stl_iterator.h **** 
 582:/usr/include/c++/11/bits/stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 583:/usr/include/c++/11/bits/stl_iterator.h ****   // DR 2285. make_reverse_iterator
 584:/usr/include/c++/11/bits/stl_iterator.h ****   /// Generator function for reverse_iterator.
 585:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _Iterator>
 586:/usr/include/c++/11/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>
 587:/usr/include/c++/11/bits/stl_iterator.h ****     make_reverse_iterator(_Iterator __i)
 588:/usr/include/c++/11/bits/stl_iterator.h ****     { return reverse_iterator<_Iterator>(__i); }
 589:/usr/include/c++/11/bits/stl_iterator.h **** 
 590:/usr/include/c++/11/bits/stl_iterator.h **** #  if __cplusplus > 201703L && defined __cpp_lib_concepts
 591:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _Iterator1, typename _Iterator2>
 592:/usr/include/c++/11/bits/stl_iterator.h ****     requires (!sized_sentinel_for<_Iterator1, _Iterator2>)
 593:/usr/include/c++/11/bits/stl_iterator.h ****     inline constexpr bool
 594:/usr/include/c++/11/bits/stl_iterator.h ****     disable_sized_sentinel_for<reverse_iterator<_Iterator1>,
 595:/usr/include/c++/11/bits/stl_iterator.h **** 			       reverse_iterator<_Iterator2>> = true;
 596:/usr/include/c++/11/bits/stl_iterator.h **** #  endif // C++20
 597:/usr/include/c++/11/bits/stl_iterator.h **** # endif // C++14
 598:/usr/include/c++/11/bits/stl_iterator.h **** 
 599:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _Iterator>
 600:/usr/include/c++/11/bits/stl_iterator.h ****     _GLIBCXX20_CONSTEXPR
 601:/usr/include/c++/11/bits/stl_iterator.h ****     auto
 602:/usr/include/c++/11/bits/stl_iterator.h ****     __niter_base(reverse_iterator<_Iterator> __it)
 603:/usr/include/c++/11/bits/stl_iterator.h ****     -> decltype(__make_reverse_iterator(__niter_base(__it.base())))
 604:/usr/include/c++/11/bits/stl_iterator.h ****     { return __make_reverse_iterator(__niter_base(__it.base())); }
 605:/usr/include/c++/11/bits/stl_iterator.h **** 
 606:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _Iterator>
 607:/usr/include/c++/11/bits/stl_iterator.h ****     struct __is_move_iterator<reverse_iterator<_Iterator> >
 608:/usr/include/c++/11/bits/stl_iterator.h ****       : __is_move_iterator<_Iterator>
 609:/usr/include/c++/11/bits/stl_iterator.h ****     { };
 610:/usr/include/c++/11/bits/stl_iterator.h **** 
 611:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _Iterator>
 612:/usr/include/c++/11/bits/stl_iterator.h ****     _GLIBCXX20_CONSTEXPR
 613:/usr/include/c++/11/bits/stl_iterator.h ****     auto
 614:/usr/include/c++/11/bits/stl_iterator.h ****     __miter_base(reverse_iterator<_Iterator> __it)
 615:/usr/include/c++/11/bits/stl_iterator.h ****     -> decltype(__make_reverse_iterator(__miter_base(__it.base())))
 616:/usr/include/c++/11/bits/stl_iterator.h ****     { return __make_reverse_iterator(__miter_base(__it.base())); }
 617:/usr/include/c++/11/bits/stl_iterator.h **** #endif // C++11
 618:/usr/include/c++/11/bits/stl_iterator.h **** 
 619:/usr/include/c++/11/bits/stl_iterator.h ****   // 24.4.2.2.1 back_insert_iterator
 620:/usr/include/c++/11/bits/stl_iterator.h ****   /**
 621:/usr/include/c++/11/bits/stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 622:/usr/include/c++/11/bits/stl_iterator.h ****    *
 623:/usr/include/c++/11/bits/stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 624:/usr/include/c++/11/bits/stl_iterator.h ****    *  Assigning a T to the iterator appends it to the container using
 625:/usr/include/c++/11/bits/stl_iterator.h ****    *  push_back.
 626:/usr/include/c++/11/bits/stl_iterator.h ****    *
 627:/usr/include/c++/11/bits/stl_iterator.h ****    *  Tip:  Using the back_inserter function to create these iterators can
 628:/usr/include/c++/11/bits/stl_iterator.h ****    *  save typing.
 629:/usr/include/c++/11/bits/stl_iterator.h ****   */
 630:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _Container>
 631:/usr/include/c++/11/bits/stl_iterator.h ****     class back_insert_iterator
 632:/usr/include/c++/11/bits/stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 633:/usr/include/c++/11/bits/stl_iterator.h ****     {
 634:/usr/include/c++/11/bits/stl_iterator.h ****     protected:
 635:/usr/include/c++/11/bits/stl_iterator.h ****       _Container* container;
 636:/usr/include/c++/11/bits/stl_iterator.h **** 
 637:/usr/include/c++/11/bits/stl_iterator.h ****     public:
 638:/usr/include/c++/11/bits/stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 639:/usr/include/c++/11/bits/stl_iterator.h ****       typedef _Container          container_type;
 640:/usr/include/c++/11/bits/stl_iterator.h **** #if __cplusplus > 201703L
 641:/usr/include/c++/11/bits/stl_iterator.h ****       using difference_type = ptrdiff_t;
 642:/usr/include/c++/11/bits/stl_iterator.h **** 
 643:/usr/include/c++/11/bits/stl_iterator.h ****       constexpr back_insert_iterator() noexcept : container(nullptr) { }
 644:/usr/include/c++/11/bits/stl_iterator.h **** #endif
 645:/usr/include/c++/11/bits/stl_iterator.h **** 
 646:/usr/include/c++/11/bits/stl_iterator.h ****       /// The only way to create this %iterator is with a container.
 647:/usr/include/c++/11/bits/stl_iterator.h ****       explicit _GLIBCXX20_CONSTEXPR
 648:/usr/include/c++/11/bits/stl_iterator.h ****       back_insert_iterator(_Container& __x)
 649:/usr/include/c++/11/bits/stl_iterator.h ****       : container(std::__addressof(__x)) { }
 650:/usr/include/c++/11/bits/stl_iterator.h **** 
 651:/usr/include/c++/11/bits/stl_iterator.h ****       /**
 652:/usr/include/c++/11/bits/stl_iterator.h ****        *  @param  __value  An instance of whatever type
 653:/usr/include/c++/11/bits/stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 654:/usr/include/c++/11/bits/stl_iterator.h ****        *                 reference-to-const T for container<T>.
 655:/usr/include/c++/11/bits/stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 656:/usr/include/c++/11/bits/stl_iterator.h ****        *
 657:/usr/include/c++/11/bits/stl_iterator.h ****        *  This kind of %iterator doesn't really have a @a position in the
 658:/usr/include/c++/11/bits/stl_iterator.h ****        *  container (you can think of the position as being permanently at
 659:/usr/include/c++/11/bits/stl_iterator.h ****        *  the end, if you like).  Assigning a value to the %iterator will
 660:/usr/include/c++/11/bits/stl_iterator.h ****        *  always append the value to the end of the container.
 661:/usr/include/c++/11/bits/stl_iterator.h ****       */
 662:/usr/include/c++/11/bits/stl_iterator.h **** #if __cplusplus < 201103L
 663:/usr/include/c++/11/bits/stl_iterator.h ****       back_insert_iterator&
 664:/usr/include/c++/11/bits/stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 665:/usr/include/c++/11/bits/stl_iterator.h ****       {
 666:/usr/include/c++/11/bits/stl_iterator.h **** 	container->push_back(__value);
 667:/usr/include/c++/11/bits/stl_iterator.h **** 	return *this;
 668:/usr/include/c++/11/bits/stl_iterator.h ****       }
 669:/usr/include/c++/11/bits/stl_iterator.h **** #else
 670:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 671:/usr/include/c++/11/bits/stl_iterator.h ****       back_insert_iterator&
 672:/usr/include/c++/11/bits/stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 673:/usr/include/c++/11/bits/stl_iterator.h ****       {
 674:/usr/include/c++/11/bits/stl_iterator.h **** 	container->push_back(__value);
 675:/usr/include/c++/11/bits/stl_iterator.h **** 	return *this;
 676:/usr/include/c++/11/bits/stl_iterator.h ****       }
 677:/usr/include/c++/11/bits/stl_iterator.h **** 
 678:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 679:/usr/include/c++/11/bits/stl_iterator.h ****       back_insert_iterator&
 680:/usr/include/c++/11/bits/stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 681:/usr/include/c++/11/bits/stl_iterator.h ****       {
 682:/usr/include/c++/11/bits/stl_iterator.h **** 	container->push_back(std::move(__value));
 683:/usr/include/c++/11/bits/stl_iterator.h **** 	return *this;
 684:/usr/include/c++/11/bits/stl_iterator.h ****       }
 685:/usr/include/c++/11/bits/stl_iterator.h **** #endif
 686:/usr/include/c++/11/bits/stl_iterator.h **** 
 687:/usr/include/c++/11/bits/stl_iterator.h ****       /// Simply returns *this.
 688:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 689:/usr/include/c++/11/bits/stl_iterator.h ****       back_insert_iterator&
 690:/usr/include/c++/11/bits/stl_iterator.h ****       operator*()
 691:/usr/include/c++/11/bits/stl_iterator.h ****       { return *this; }
 692:/usr/include/c++/11/bits/stl_iterator.h **** 
 693:/usr/include/c++/11/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 694:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 695:/usr/include/c++/11/bits/stl_iterator.h ****       back_insert_iterator&
 696:/usr/include/c++/11/bits/stl_iterator.h ****       operator++()
 697:/usr/include/c++/11/bits/stl_iterator.h ****       { return *this; }
 698:/usr/include/c++/11/bits/stl_iterator.h **** 
 699:/usr/include/c++/11/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 700:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 701:/usr/include/c++/11/bits/stl_iterator.h ****       back_insert_iterator
 702:/usr/include/c++/11/bits/stl_iterator.h ****       operator++(int)
 703:/usr/include/c++/11/bits/stl_iterator.h ****       { return *this; }
 704:/usr/include/c++/11/bits/stl_iterator.h ****     };
 705:/usr/include/c++/11/bits/stl_iterator.h **** 
 706:/usr/include/c++/11/bits/stl_iterator.h ****   /**
 707:/usr/include/c++/11/bits/stl_iterator.h ****    *  @param  __x  A container of arbitrary type.
 708:/usr/include/c++/11/bits/stl_iterator.h ****    *  @return  An instance of back_insert_iterator working on @p __x.
 709:/usr/include/c++/11/bits/stl_iterator.h ****    *
 710:/usr/include/c++/11/bits/stl_iterator.h ****    *  This wrapper function helps in creating back_insert_iterator instances.
 711:/usr/include/c++/11/bits/stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 712:/usr/include/c++/11/bits/stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 713:/usr/include/c++/11/bits/stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 714:/usr/include/c++/11/bits/stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 715:/usr/include/c++/11/bits/stl_iterator.h ****    *  types for you.
 716:/usr/include/c++/11/bits/stl_iterator.h ****   */
 717:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _Container>
 718:/usr/include/c++/11/bits/stl_iterator.h ****     _GLIBCXX20_CONSTEXPR
 719:/usr/include/c++/11/bits/stl_iterator.h ****     inline back_insert_iterator<_Container>
 720:/usr/include/c++/11/bits/stl_iterator.h ****     back_inserter(_Container& __x)
 721:/usr/include/c++/11/bits/stl_iterator.h ****     { return back_insert_iterator<_Container>(__x); }
 722:/usr/include/c++/11/bits/stl_iterator.h **** 
 723:/usr/include/c++/11/bits/stl_iterator.h ****   /**
 724:/usr/include/c++/11/bits/stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 725:/usr/include/c++/11/bits/stl_iterator.h ****    *
 726:/usr/include/c++/11/bits/stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 727:/usr/include/c++/11/bits/stl_iterator.h ****    *  Assigning a T to the iterator prepends it to the container using
 728:/usr/include/c++/11/bits/stl_iterator.h ****    *  push_front.
 729:/usr/include/c++/11/bits/stl_iterator.h ****    *
 730:/usr/include/c++/11/bits/stl_iterator.h ****    *  Tip:  Using the front_inserter function to create these iterators can
 731:/usr/include/c++/11/bits/stl_iterator.h ****    *  save typing.
 732:/usr/include/c++/11/bits/stl_iterator.h ****   */
 733:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _Container>
 734:/usr/include/c++/11/bits/stl_iterator.h ****     class front_insert_iterator
 735:/usr/include/c++/11/bits/stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 736:/usr/include/c++/11/bits/stl_iterator.h ****     {
 737:/usr/include/c++/11/bits/stl_iterator.h ****     protected:
 738:/usr/include/c++/11/bits/stl_iterator.h ****       _Container* container;
 739:/usr/include/c++/11/bits/stl_iterator.h **** 
 740:/usr/include/c++/11/bits/stl_iterator.h ****     public:
 741:/usr/include/c++/11/bits/stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 742:/usr/include/c++/11/bits/stl_iterator.h ****       typedef _Container          container_type;
 743:/usr/include/c++/11/bits/stl_iterator.h **** #if __cplusplus > 201703L
 744:/usr/include/c++/11/bits/stl_iterator.h ****       using difference_type = ptrdiff_t;
 745:/usr/include/c++/11/bits/stl_iterator.h **** 
 746:/usr/include/c++/11/bits/stl_iterator.h ****       constexpr front_insert_iterator() noexcept : container(nullptr) { }
 747:/usr/include/c++/11/bits/stl_iterator.h **** #endif
 748:/usr/include/c++/11/bits/stl_iterator.h **** 
 749:/usr/include/c++/11/bits/stl_iterator.h ****       /// The only way to create this %iterator is with a container.
 750:/usr/include/c++/11/bits/stl_iterator.h ****       explicit _GLIBCXX20_CONSTEXPR
 751:/usr/include/c++/11/bits/stl_iterator.h ****       front_insert_iterator(_Container& __x)
 752:/usr/include/c++/11/bits/stl_iterator.h ****       : container(std::__addressof(__x)) { }
 753:/usr/include/c++/11/bits/stl_iterator.h **** 
 754:/usr/include/c++/11/bits/stl_iterator.h ****       /**
 755:/usr/include/c++/11/bits/stl_iterator.h ****        *  @param  __value  An instance of whatever type
 756:/usr/include/c++/11/bits/stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 757:/usr/include/c++/11/bits/stl_iterator.h ****        *                 reference-to-const T for container<T>.
 758:/usr/include/c++/11/bits/stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 759:/usr/include/c++/11/bits/stl_iterator.h ****        *
 760:/usr/include/c++/11/bits/stl_iterator.h ****        *  This kind of %iterator doesn't really have a @a position in the
 761:/usr/include/c++/11/bits/stl_iterator.h ****        *  container (you can think of the position as being permanently at
 762:/usr/include/c++/11/bits/stl_iterator.h ****        *  the front, if you like).  Assigning a value to the %iterator will
 763:/usr/include/c++/11/bits/stl_iterator.h ****        *  always prepend the value to the front of the container.
 764:/usr/include/c++/11/bits/stl_iterator.h ****       */
 765:/usr/include/c++/11/bits/stl_iterator.h **** #if __cplusplus < 201103L
 766:/usr/include/c++/11/bits/stl_iterator.h ****       front_insert_iterator&
 767:/usr/include/c++/11/bits/stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 768:/usr/include/c++/11/bits/stl_iterator.h ****       {
 769:/usr/include/c++/11/bits/stl_iterator.h **** 	container->push_front(__value);
 770:/usr/include/c++/11/bits/stl_iterator.h **** 	return *this;
 771:/usr/include/c++/11/bits/stl_iterator.h ****       }
 772:/usr/include/c++/11/bits/stl_iterator.h **** #else
 773:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 774:/usr/include/c++/11/bits/stl_iterator.h ****       front_insert_iterator&
 775:/usr/include/c++/11/bits/stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 776:/usr/include/c++/11/bits/stl_iterator.h ****       {
 777:/usr/include/c++/11/bits/stl_iterator.h **** 	container->push_front(__value);
 778:/usr/include/c++/11/bits/stl_iterator.h **** 	return *this;
 779:/usr/include/c++/11/bits/stl_iterator.h ****       }
 780:/usr/include/c++/11/bits/stl_iterator.h **** 
 781:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 782:/usr/include/c++/11/bits/stl_iterator.h ****       front_insert_iterator&
 783:/usr/include/c++/11/bits/stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 784:/usr/include/c++/11/bits/stl_iterator.h ****       {
 785:/usr/include/c++/11/bits/stl_iterator.h **** 	container->push_front(std::move(__value));
 786:/usr/include/c++/11/bits/stl_iterator.h **** 	return *this;
 787:/usr/include/c++/11/bits/stl_iterator.h ****       }
 788:/usr/include/c++/11/bits/stl_iterator.h **** #endif
 789:/usr/include/c++/11/bits/stl_iterator.h **** 
 790:/usr/include/c++/11/bits/stl_iterator.h ****       /// Simply returns *this.
 791:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 792:/usr/include/c++/11/bits/stl_iterator.h ****       front_insert_iterator&
 793:/usr/include/c++/11/bits/stl_iterator.h ****       operator*()
 794:/usr/include/c++/11/bits/stl_iterator.h ****       { return *this; }
 795:/usr/include/c++/11/bits/stl_iterator.h **** 
 796:/usr/include/c++/11/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 797:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 798:/usr/include/c++/11/bits/stl_iterator.h ****       front_insert_iterator&
 799:/usr/include/c++/11/bits/stl_iterator.h ****       operator++()
 800:/usr/include/c++/11/bits/stl_iterator.h ****       { return *this; }
 801:/usr/include/c++/11/bits/stl_iterator.h **** 
 802:/usr/include/c++/11/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 803:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 804:/usr/include/c++/11/bits/stl_iterator.h ****       front_insert_iterator
 805:/usr/include/c++/11/bits/stl_iterator.h ****       operator++(int)
 806:/usr/include/c++/11/bits/stl_iterator.h ****       { return *this; }
 807:/usr/include/c++/11/bits/stl_iterator.h ****     };
 808:/usr/include/c++/11/bits/stl_iterator.h **** 
 809:/usr/include/c++/11/bits/stl_iterator.h ****   /**
 810:/usr/include/c++/11/bits/stl_iterator.h ****    *  @param  __x  A container of arbitrary type.
 811:/usr/include/c++/11/bits/stl_iterator.h ****    *  @return  An instance of front_insert_iterator working on @p x.
 812:/usr/include/c++/11/bits/stl_iterator.h ****    *
 813:/usr/include/c++/11/bits/stl_iterator.h ****    *  This wrapper function helps in creating front_insert_iterator instances.
 814:/usr/include/c++/11/bits/stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 815:/usr/include/c++/11/bits/stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 816:/usr/include/c++/11/bits/stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 817:/usr/include/c++/11/bits/stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 818:/usr/include/c++/11/bits/stl_iterator.h ****    *  types for you.
 819:/usr/include/c++/11/bits/stl_iterator.h ****   */
 820:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _Container>
 821:/usr/include/c++/11/bits/stl_iterator.h ****     _GLIBCXX20_CONSTEXPR
 822:/usr/include/c++/11/bits/stl_iterator.h ****     inline front_insert_iterator<_Container>
 823:/usr/include/c++/11/bits/stl_iterator.h ****     front_inserter(_Container& __x)
 824:/usr/include/c++/11/bits/stl_iterator.h ****     { return front_insert_iterator<_Container>(__x); }
 825:/usr/include/c++/11/bits/stl_iterator.h **** 
 826:/usr/include/c++/11/bits/stl_iterator.h ****   /**
 827:/usr/include/c++/11/bits/stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 828:/usr/include/c++/11/bits/stl_iterator.h ****    *
 829:/usr/include/c++/11/bits/stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 830:/usr/include/c++/11/bits/stl_iterator.h ****    *  Assigning a T to the iterator inserts it in the container at the
 831:/usr/include/c++/11/bits/stl_iterator.h ****    *  %iterator's position, rather than overwriting the value at that
 832:/usr/include/c++/11/bits/stl_iterator.h ****    *  position.
 833:/usr/include/c++/11/bits/stl_iterator.h ****    *
 834:/usr/include/c++/11/bits/stl_iterator.h ****    *  (Sequences will actually insert a @e copy of the value before the
 835:/usr/include/c++/11/bits/stl_iterator.h ****    *  %iterator's position.)
 836:/usr/include/c++/11/bits/stl_iterator.h ****    *
 837:/usr/include/c++/11/bits/stl_iterator.h ****    *  Tip:  Using the inserter function to create these iterators can
 838:/usr/include/c++/11/bits/stl_iterator.h ****    *  save typing.
 839:/usr/include/c++/11/bits/stl_iterator.h ****   */
 840:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _Container>
 841:/usr/include/c++/11/bits/stl_iterator.h ****     class insert_iterator
 842:/usr/include/c++/11/bits/stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 843:/usr/include/c++/11/bits/stl_iterator.h ****     {
 844:/usr/include/c++/11/bits/stl_iterator.h **** #if __cplusplus > 201703L && defined __cpp_lib_concepts
 845:/usr/include/c++/11/bits/stl_iterator.h ****       using _Iter = std::__detail::__range_iter_t<_Container>;
 846:/usr/include/c++/11/bits/stl_iterator.h **** 
 847:/usr/include/c++/11/bits/stl_iterator.h ****     protected:
 848:/usr/include/c++/11/bits/stl_iterator.h ****       _Container* container = nullptr;
 849:/usr/include/c++/11/bits/stl_iterator.h ****       _Iter iter = _Iter();
 850:/usr/include/c++/11/bits/stl_iterator.h **** #else
 851:/usr/include/c++/11/bits/stl_iterator.h ****       typedef typename _Container::iterator		_Iter;
 852:/usr/include/c++/11/bits/stl_iterator.h **** 
 853:/usr/include/c++/11/bits/stl_iterator.h ****     protected:
 854:/usr/include/c++/11/bits/stl_iterator.h ****       _Container* container;
 855:/usr/include/c++/11/bits/stl_iterator.h ****       _Iter iter;
 856:/usr/include/c++/11/bits/stl_iterator.h **** #endif
 857:/usr/include/c++/11/bits/stl_iterator.h **** 
 858:/usr/include/c++/11/bits/stl_iterator.h ****     public:
 859:/usr/include/c++/11/bits/stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 860:/usr/include/c++/11/bits/stl_iterator.h ****       typedef _Container          container_type;
 861:/usr/include/c++/11/bits/stl_iterator.h **** 
 862:/usr/include/c++/11/bits/stl_iterator.h **** #if __cplusplus > 201703L && defined __cpp_lib_concepts
 863:/usr/include/c++/11/bits/stl_iterator.h ****       using difference_type = ptrdiff_t;
 864:/usr/include/c++/11/bits/stl_iterator.h **** 
 865:/usr/include/c++/11/bits/stl_iterator.h ****       insert_iterator() = default;
 866:/usr/include/c++/11/bits/stl_iterator.h **** #endif
 867:/usr/include/c++/11/bits/stl_iterator.h **** 
 868:/usr/include/c++/11/bits/stl_iterator.h ****       /**
 869:/usr/include/c++/11/bits/stl_iterator.h ****        *  The only way to create this %iterator is with a container and an
 870:/usr/include/c++/11/bits/stl_iterator.h ****        *  initial position (a normal %iterator into the container).
 871:/usr/include/c++/11/bits/stl_iterator.h ****       */
 872:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 873:/usr/include/c++/11/bits/stl_iterator.h ****       insert_iterator(_Container& __x, _Iter __i)
 874:/usr/include/c++/11/bits/stl_iterator.h ****       : container(std::__addressof(__x)), iter(__i) {}
 875:/usr/include/c++/11/bits/stl_iterator.h **** 
 876:/usr/include/c++/11/bits/stl_iterator.h ****       /**
 877:/usr/include/c++/11/bits/stl_iterator.h ****        *  @param  __value  An instance of whatever type
 878:/usr/include/c++/11/bits/stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 879:/usr/include/c++/11/bits/stl_iterator.h ****        *                 reference-to-const T for container<T>.
 880:/usr/include/c++/11/bits/stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 881:/usr/include/c++/11/bits/stl_iterator.h ****        *
 882:/usr/include/c++/11/bits/stl_iterator.h ****        *  This kind of %iterator maintains its own position in the
 883:/usr/include/c++/11/bits/stl_iterator.h ****        *  container.  Assigning a value to the %iterator will insert the
 884:/usr/include/c++/11/bits/stl_iterator.h ****        *  value into the container at the place before the %iterator.
 885:/usr/include/c++/11/bits/stl_iterator.h ****        *
 886:/usr/include/c++/11/bits/stl_iterator.h ****        *  The position is maintained such that subsequent assignments will
 887:/usr/include/c++/11/bits/stl_iterator.h ****        *  insert values immediately after one another.  For example,
 888:/usr/include/c++/11/bits/stl_iterator.h ****        *  @code
 889:/usr/include/c++/11/bits/stl_iterator.h ****        *     // vector v contains A and Z
 890:/usr/include/c++/11/bits/stl_iterator.h ****        *
 891:/usr/include/c++/11/bits/stl_iterator.h ****        *     insert_iterator i (v, ++v.begin());
 892:/usr/include/c++/11/bits/stl_iterator.h ****        *     i = 1;
 893:/usr/include/c++/11/bits/stl_iterator.h ****        *     i = 2;
 894:/usr/include/c++/11/bits/stl_iterator.h ****        *     i = 3;
 895:/usr/include/c++/11/bits/stl_iterator.h ****        *
 896:/usr/include/c++/11/bits/stl_iterator.h ****        *     // vector v contains A, 1, 2, 3, and Z
 897:/usr/include/c++/11/bits/stl_iterator.h ****        *  @endcode
 898:/usr/include/c++/11/bits/stl_iterator.h ****       */
 899:/usr/include/c++/11/bits/stl_iterator.h **** #if __cplusplus < 201103L
 900:/usr/include/c++/11/bits/stl_iterator.h ****       insert_iterator&
 901:/usr/include/c++/11/bits/stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 902:/usr/include/c++/11/bits/stl_iterator.h ****       {
 903:/usr/include/c++/11/bits/stl_iterator.h **** 	iter = container->insert(iter, __value);
 904:/usr/include/c++/11/bits/stl_iterator.h **** 	++iter;
 905:/usr/include/c++/11/bits/stl_iterator.h **** 	return *this;
 906:/usr/include/c++/11/bits/stl_iterator.h ****       }
 907:/usr/include/c++/11/bits/stl_iterator.h **** #else
 908:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 909:/usr/include/c++/11/bits/stl_iterator.h ****       insert_iterator&
 910:/usr/include/c++/11/bits/stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 911:/usr/include/c++/11/bits/stl_iterator.h ****       {
 912:/usr/include/c++/11/bits/stl_iterator.h **** 	iter = container->insert(iter, __value);
 913:/usr/include/c++/11/bits/stl_iterator.h **** 	++iter;
 914:/usr/include/c++/11/bits/stl_iterator.h **** 	return *this;
 915:/usr/include/c++/11/bits/stl_iterator.h ****       }
 916:/usr/include/c++/11/bits/stl_iterator.h **** 
 917:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 918:/usr/include/c++/11/bits/stl_iterator.h ****       insert_iterator&
 919:/usr/include/c++/11/bits/stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 920:/usr/include/c++/11/bits/stl_iterator.h ****       {
 921:/usr/include/c++/11/bits/stl_iterator.h **** 	iter = container->insert(iter, std::move(__value));
 922:/usr/include/c++/11/bits/stl_iterator.h **** 	++iter;
 923:/usr/include/c++/11/bits/stl_iterator.h **** 	return *this;
 924:/usr/include/c++/11/bits/stl_iterator.h ****       }
 925:/usr/include/c++/11/bits/stl_iterator.h **** #endif
 926:/usr/include/c++/11/bits/stl_iterator.h **** 
 927:/usr/include/c++/11/bits/stl_iterator.h ****       /// Simply returns *this.
 928:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 929:/usr/include/c++/11/bits/stl_iterator.h ****       insert_iterator&
 930:/usr/include/c++/11/bits/stl_iterator.h ****       operator*()
 931:/usr/include/c++/11/bits/stl_iterator.h ****       { return *this; }
 932:/usr/include/c++/11/bits/stl_iterator.h **** 
 933:/usr/include/c++/11/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 934:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 935:/usr/include/c++/11/bits/stl_iterator.h ****       insert_iterator&
 936:/usr/include/c++/11/bits/stl_iterator.h ****       operator++()
 937:/usr/include/c++/11/bits/stl_iterator.h ****       { return *this; }
 938:/usr/include/c++/11/bits/stl_iterator.h **** 
 939:/usr/include/c++/11/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 940:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 941:/usr/include/c++/11/bits/stl_iterator.h ****       insert_iterator&
 942:/usr/include/c++/11/bits/stl_iterator.h ****       operator++(int)
 943:/usr/include/c++/11/bits/stl_iterator.h ****       { return *this; }
 944:/usr/include/c++/11/bits/stl_iterator.h ****     };
 945:/usr/include/c++/11/bits/stl_iterator.h **** 
 946:/usr/include/c++/11/bits/stl_iterator.h ****   /**
 947:/usr/include/c++/11/bits/stl_iterator.h ****    *  @param __x  A container of arbitrary type.
 948:/usr/include/c++/11/bits/stl_iterator.h ****    *  @param __i  An iterator into the container.
 949:/usr/include/c++/11/bits/stl_iterator.h ****    *  @return  An instance of insert_iterator working on @p __x.
 950:/usr/include/c++/11/bits/stl_iterator.h ****    *
 951:/usr/include/c++/11/bits/stl_iterator.h ****    *  This wrapper function helps in creating insert_iterator instances.
 952:/usr/include/c++/11/bits/stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 953:/usr/include/c++/11/bits/stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 954:/usr/include/c++/11/bits/stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 955:/usr/include/c++/11/bits/stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 956:/usr/include/c++/11/bits/stl_iterator.h ****    *  types for you.
 957:/usr/include/c++/11/bits/stl_iterator.h ****   */
 958:/usr/include/c++/11/bits/stl_iterator.h **** #if __cplusplus > 201703L && defined __cpp_lib_concepts
 959:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _Container>
 960:/usr/include/c++/11/bits/stl_iterator.h ****     constexpr insert_iterator<_Container>
 961:/usr/include/c++/11/bits/stl_iterator.h ****     inserter(_Container& __x, std::__detail::__range_iter_t<_Container> __i)
 962:/usr/include/c++/11/bits/stl_iterator.h ****     { return insert_iterator<_Container>(__x, __i); }
 963:/usr/include/c++/11/bits/stl_iterator.h **** #else
 964:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _Container>
 965:/usr/include/c++/11/bits/stl_iterator.h ****     inline insert_iterator<_Container>
 966:/usr/include/c++/11/bits/stl_iterator.h ****     inserter(_Container& __x, typename _Container::iterator __i)
 967:/usr/include/c++/11/bits/stl_iterator.h ****     { return insert_iterator<_Container>(__x, __i); }
 968:/usr/include/c++/11/bits/stl_iterator.h **** #endif
 969:/usr/include/c++/11/bits/stl_iterator.h **** 
 970:/usr/include/c++/11/bits/stl_iterator.h ****   /// @} group iterators
 971:/usr/include/c++/11/bits/stl_iterator.h **** 
 972:/usr/include/c++/11/bits/stl_iterator.h **** _GLIBCXX_END_NAMESPACE_VERSION
 973:/usr/include/c++/11/bits/stl_iterator.h **** } // namespace
 974:/usr/include/c++/11/bits/stl_iterator.h **** 
 975:/usr/include/c++/11/bits/stl_iterator.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
 976:/usr/include/c++/11/bits/stl_iterator.h **** {
 977:/usr/include/c++/11/bits/stl_iterator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
 978:/usr/include/c++/11/bits/stl_iterator.h **** 
 979:/usr/include/c++/11/bits/stl_iterator.h ****   // This iterator adapter is @a normal in the sense that it does not
 980:/usr/include/c++/11/bits/stl_iterator.h ****   // change the semantics of any of the operators of its iterator
 981:/usr/include/c++/11/bits/stl_iterator.h ****   // parameter.  Its primary purpose is to convert an iterator that is
 982:/usr/include/c++/11/bits/stl_iterator.h ****   // not a class, e.g. a pointer, into an iterator that is a class.
 983:/usr/include/c++/11/bits/stl_iterator.h ****   // The _Container parameter exists solely so that different containers
 984:/usr/include/c++/11/bits/stl_iterator.h ****   // using this template can instantiate different types, even if the
 985:/usr/include/c++/11/bits/stl_iterator.h ****   // _Iterator parameter is the same.
 986:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 987:/usr/include/c++/11/bits/stl_iterator.h ****     class __normal_iterator
 988:/usr/include/c++/11/bits/stl_iterator.h ****     {
 989:/usr/include/c++/11/bits/stl_iterator.h ****     protected:
 990:/usr/include/c++/11/bits/stl_iterator.h ****       _Iterator _M_current;
 991:/usr/include/c++/11/bits/stl_iterator.h **** 
 992:/usr/include/c++/11/bits/stl_iterator.h ****       typedef std::iterator_traits<_Iterator>		__traits_type;
 993:/usr/include/c++/11/bits/stl_iterator.h **** 
 994:/usr/include/c++/11/bits/stl_iterator.h ****     public:
 995:/usr/include/c++/11/bits/stl_iterator.h ****       typedef _Iterator					iterator_type;
 996:/usr/include/c++/11/bits/stl_iterator.h ****       typedef typename __traits_type::iterator_category iterator_category;
 997:/usr/include/c++/11/bits/stl_iterator.h ****       typedef typename __traits_type::value_type  	value_type;
 998:/usr/include/c++/11/bits/stl_iterator.h ****       typedef typename __traits_type::difference_type 	difference_type;
 999:/usr/include/c++/11/bits/stl_iterator.h ****       typedef typename __traits_type::reference 	reference;
1000:/usr/include/c++/11/bits/stl_iterator.h ****       typedef typename __traits_type::pointer   	pointer;
1001:/usr/include/c++/11/bits/stl_iterator.h **** 
1002:/usr/include/c++/11/bits/stl_iterator.h **** #if __cplusplus > 201703L && __cpp_lib_concepts
1003:/usr/include/c++/11/bits/stl_iterator.h ****       using iterator_concept = std::__detail::__iter_concept<_Iterator>;
1004:/usr/include/c++/11/bits/stl_iterator.h **** #endif
1005:/usr/include/c++/11/bits/stl_iterator.h **** 
1006:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
1007:/usr/include/c++/11/bits/stl_iterator.h ****       : _M_current(_Iterator()) { }
1008:/usr/include/c++/11/bits/stl_iterator.h **** 
1009:/usr/include/c++/11/bits/stl_iterator.h ****       explicit _GLIBCXX20_CONSTEXPR
1010:/usr/include/c++/11/bits/stl_iterator.h ****       __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
1011:/usr/include/c++/11/bits/stl_iterator.h ****       : _M_current(__i) { }
1012:/usr/include/c++/11/bits/stl_iterator.h **** 
1013:/usr/include/c++/11/bits/stl_iterator.h ****       // Allow iterator to const_iterator conversion
1014:/usr/include/c++/11/bits/stl_iterator.h ****       template<typename _Iter>
1015:/usr/include/c++/11/bits/stl_iterator.h ****         _GLIBCXX20_CONSTEXPR
1016:/usr/include/c++/11/bits/stl_iterator.h ****         __normal_iterator(const __normal_iterator<_Iter,
1017:/usr/include/c++/11/bits/stl_iterator.h **** 			  typename __enable_if<
1018:/usr/include/c++/11/bits/stl_iterator.h ****       	       (std::__are_same<_Iter, typename _Container::pointer>::__value),
1019:/usr/include/c++/11/bits/stl_iterator.h **** 		      _Container>::__type>& __i) _GLIBCXX_NOEXCEPT
1020:/usr/include/c++/11/bits/stl_iterator.h ****         : _M_current(__i.base()) { }
1021:/usr/include/c++/11/bits/stl_iterator.h **** 
1022:/usr/include/c++/11/bits/stl_iterator.h ****       // Forward iterator requirements
1023:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1024:/usr/include/c++/11/bits/stl_iterator.h ****       reference
1025:/usr/include/c++/11/bits/stl_iterator.h ****       operator*() const _GLIBCXX_NOEXCEPT
1026:/usr/include/c++/11/bits/stl_iterator.h ****       { return *_M_current; }
1027:/usr/include/c++/11/bits/stl_iterator.h **** 
1028:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1029:/usr/include/c++/11/bits/stl_iterator.h ****       pointer
1030:/usr/include/c++/11/bits/stl_iterator.h ****       operator->() const _GLIBCXX_NOEXCEPT
1031:/usr/include/c++/11/bits/stl_iterator.h ****       { return _M_current; }
1032:/usr/include/c++/11/bits/stl_iterator.h **** 
1033:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1034:/usr/include/c++/11/bits/stl_iterator.h ****       __normal_iterator&
1035:/usr/include/c++/11/bits/stl_iterator.h ****       operator++() _GLIBCXX_NOEXCEPT
1036:/usr/include/c++/11/bits/stl_iterator.h ****       {
1037:/usr/include/c++/11/bits/stl_iterator.h **** 	++_M_current;
1038:/usr/include/c++/11/bits/stl_iterator.h **** 	return *this;
1039:/usr/include/c++/11/bits/stl_iterator.h ****       }
1040:/usr/include/c++/11/bits/stl_iterator.h **** 
1041:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1042:/usr/include/c++/11/bits/stl_iterator.h ****       __normal_iterator
1043:/usr/include/c++/11/bits/stl_iterator.h ****       operator++(int) _GLIBCXX_NOEXCEPT
1044:/usr/include/c++/11/bits/stl_iterator.h ****       { return __normal_iterator(_M_current++); }
1045:/usr/include/c++/11/bits/stl_iterator.h **** 
1046:/usr/include/c++/11/bits/stl_iterator.h ****       // Bidirectional iterator requirements
1047:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1048:/usr/include/c++/11/bits/stl_iterator.h ****       __normal_iterator&
1049:/usr/include/c++/11/bits/stl_iterator.h ****       operator--() _GLIBCXX_NOEXCEPT
1050:/usr/include/c++/11/bits/stl_iterator.h ****       {
1051:/usr/include/c++/11/bits/stl_iterator.h **** 	--_M_current;
1052:/usr/include/c++/11/bits/stl_iterator.h **** 	return *this;
1053:/usr/include/c++/11/bits/stl_iterator.h ****       }
1054:/usr/include/c++/11/bits/stl_iterator.h **** 
1055:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1056:/usr/include/c++/11/bits/stl_iterator.h ****       __normal_iterator
1057:/usr/include/c++/11/bits/stl_iterator.h ****       operator--(int) _GLIBCXX_NOEXCEPT
1058:/usr/include/c++/11/bits/stl_iterator.h ****       { return __normal_iterator(_M_current--); }
1059:/usr/include/c++/11/bits/stl_iterator.h **** 
1060:/usr/include/c++/11/bits/stl_iterator.h ****       // Random access iterator requirements
1061:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1062:/usr/include/c++/11/bits/stl_iterator.h ****       reference
1063:/usr/include/c++/11/bits/stl_iterator.h ****       operator[](difference_type __n) const _GLIBCXX_NOEXCEPT
1064:/usr/include/c++/11/bits/stl_iterator.h ****       { return _M_current[__n]; }
1065:/usr/include/c++/11/bits/stl_iterator.h **** 
1066:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1067:/usr/include/c++/11/bits/stl_iterator.h ****       __normal_iterator&
1068:/usr/include/c++/11/bits/stl_iterator.h ****       operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
1069:/usr/include/c++/11/bits/stl_iterator.h ****       { _M_current += __n; return *this; }
1070:/usr/include/c++/11/bits/stl_iterator.h **** 
1071:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1072:/usr/include/c++/11/bits/stl_iterator.h ****       __normal_iterator
1073:/usr/include/c++/11/bits/stl_iterator.h ****       operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
1074:/usr/include/c++/11/bits/stl_iterator.h ****       { return __normal_iterator(_M_current + __n); }
1075:/usr/include/c++/11/bits/stl_iterator.h **** 
1076:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1077:/usr/include/c++/11/bits/stl_iterator.h ****       __normal_iterator&
1078:/usr/include/c++/11/bits/stl_iterator.h ****       operator-=(difference_type __n) _GLIBCXX_NOEXCEPT
1079:/usr/include/c++/11/bits/stl_iterator.h ****       { _M_current -= __n; return *this; }
1080:/usr/include/c++/11/bits/stl_iterator.h **** 
1081:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1082:/usr/include/c++/11/bits/stl_iterator.h ****       __normal_iterator
1083:/usr/include/c++/11/bits/stl_iterator.h ****       operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
1084:/usr/include/c++/11/bits/stl_iterator.h ****       { return __normal_iterator(_M_current - __n); }
1085:/usr/include/c++/11/bits/stl_iterator.h **** 
1086:/usr/include/c++/11/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1087:/usr/include/c++/11/bits/stl_iterator.h ****       const _Iterator&
1088:/usr/include/c++/11/bits/stl_iterator.h ****       base() const _GLIBCXX_NOEXCEPT
1089:/usr/include/c++/11/bits/stl_iterator.h ****       { return _M_current; }
1090:/usr/include/c++/11/bits/stl_iterator.h ****     };
1091:/usr/include/c++/11/bits/stl_iterator.h **** 
1092:/usr/include/c++/11/bits/stl_iterator.h ****   // Note: In what follows, the left- and right-hand-side iterators are
1093:/usr/include/c++/11/bits/stl_iterator.h ****   // allowed to vary in types (conceptually in cv-qualification) so that
1094:/usr/include/c++/11/bits/stl_iterator.h ****   // comparison between cv-qualified and non-cv-qualified iterators be
1095:/usr/include/c++/11/bits/stl_iterator.h ****   // valid.  However, the greedy and unfriendly operators in std::rel_ops
1096:/usr/include/c++/11/bits/stl_iterator.h ****   // will make overload resolution ambiguous (when in scope) if we don't
1097:/usr/include/c++/11/bits/stl_iterator.h ****   // provide overloads whose operands are of the same type.  Can someone
1098:/usr/include/c++/11/bits/stl_iterator.h ****   // remind me what generic programming is about? -- Gaby
1099:/usr/include/c++/11/bits/stl_iterator.h **** 
1100:/usr/include/c++/11/bits/stl_iterator.h **** #if __cpp_lib_three_way_comparison
1101:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
1102:/usr/include/c++/11/bits/stl_iterator.h ****     requires requires (_IteratorL __lhs, _IteratorR __rhs)
1103:/usr/include/c++/11/bits/stl_iterator.h ****     { { __lhs == __rhs } -> std::convertible_to<bool>; }
1104:/usr/include/c++/11/bits/stl_iterator.h ****     constexpr bool
1105:/usr/include/c++/11/bits/stl_iterator.h ****     operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
1106:/usr/include/c++/11/bits/stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
1107:/usr/include/c++/11/bits/stl_iterator.h ****     noexcept(noexcept(__lhs.base() == __rhs.base()))
1108:/usr/include/c++/11/bits/stl_iterator.h ****     { return __lhs.base() == __rhs.base(); }
1109:/usr/include/c++/11/bits/stl_iterator.h **** 
1110:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
1111:/usr/include/c++/11/bits/stl_iterator.h ****     constexpr std::__detail::__synth3way_t<_IteratorR, _IteratorL>
1112:/usr/include/c++/11/bits/stl_iterator.h ****     operator<=>(const __normal_iterator<_IteratorL, _Container>& __lhs,
1113:/usr/include/c++/11/bits/stl_iterator.h **** 		const __normal_iterator<_IteratorR, _Container>& __rhs)
1114:/usr/include/c++/11/bits/stl_iterator.h ****     noexcept(noexcept(std::__detail::__synth3way(__lhs.base(), __rhs.base())))
1115:/usr/include/c++/11/bits/stl_iterator.h ****     { return std::__detail::__synth3way(__lhs.base(), __rhs.base()); }
1116:/usr/include/c++/11/bits/stl_iterator.h **** #else
1117:/usr/include/c++/11/bits/stl_iterator.h ****    // Forward iterator requirements
1118:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
1119:/usr/include/c++/11/bits/stl_iterator.h ****     _GLIBCXX20_CONSTEXPR
1120:/usr/include/c++/11/bits/stl_iterator.h ****     inline bool
1121:/usr/include/c++/11/bits/stl_iterator.h ****     operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
1122:/usr/include/c++/11/bits/stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
1123:/usr/include/c++/11/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1124:/usr/include/c++/11/bits/stl_iterator.h ****     { return __lhs.base() == __rhs.base(); }
1125:/usr/include/c++/11/bits/stl_iterator.h **** 
1126:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
1127:/usr/include/c++/11/bits/stl_iterator.h ****     _GLIBCXX20_CONSTEXPR
1128:/usr/include/c++/11/bits/stl_iterator.h ****     inline bool
1129:/usr/include/c++/11/bits/stl_iterator.h ****     operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
1130:/usr/include/c++/11/bits/stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
1131:/usr/include/c++/11/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1132:/usr/include/c++/11/bits/stl_iterator.h ****     { return __lhs.base() == __rhs.base(); }
1133:/usr/include/c++/11/bits/stl_iterator.h **** 
1134:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
1135:/usr/include/c++/11/bits/stl_iterator.h ****     _GLIBCXX20_CONSTEXPR
1136:/usr/include/c++/11/bits/stl_iterator.h ****     inline bool
1137:/usr/include/c++/11/bits/stl_iterator.h ****     operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
1138:/usr/include/c++/11/bits/stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
1139:/usr/include/c++/11/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1140:/usr/include/c++/11/bits/stl_iterator.h ****     { return __lhs.base() != __rhs.base(); }
1141:/usr/include/c++/11/bits/stl_iterator.h **** 
1142:/usr/include/c++/11/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
1143:/usr/include/c++/11/bits/stl_iterator.h ****     _GLIBCXX20_CONSTEXPR
1144:/usr/include/c++/11/bits/stl_iterator.h ****     inline bool
1145:/usr/include/c++/11/bits/stl_iterator.h ****     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 1857              		.loc 5 1145 5
 1858              		.cfi_startproc
 1859 0000 F30F1EFA 		endbr64
 1860 0004 55       		pushq	%rbp
 1861              		.cfi_def_cfa_offset 16
 1862              		.cfi_offset 6, -16
 1863 0005 4889E5   		movq	%rsp, %rbp
 1864              		.cfi_def_cfa_register 6
 1865 0008 53       		pushq	%rbx
 1866 0009 4883EC18 		subq	$24, %rsp
 1867              		.cfi_offset 3, -24
 1868 000d 48897DE8 		movq	%rdi, -24(%rbp)
 1869 0011 488975E0 		movq	%rsi, -32(%rbp)
1146:/usr/include/c++/11/bits/stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
1147:/usr/include/c++/11/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1148:/usr/include/c++/11/bits/stl_iterator.h ****     { return __lhs.base() != __rhs.base(); }
 1870              		.loc 5 1148 24
 1871 0015 488B45E8 		movq	-24(%rbp), %rax
 1872 0019 4889C7   		movq	%rax, %rdi
 1873 001c E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4bas
 1873      00
 1874              		.loc 5 1148 27
 1875 0021 488B18   		movq	(%rax), %rbx
 1876              		.loc 5 1148 40
 1877 0024 488B45E0 		movq	-32(%rbp), %rax
 1878 0028 4889C7   		movq	%rax, %rdi
 1879 002b E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4bas
 1879      00
 1880              		.loc 5 1148 27
 1881 0030 488B00   		movq	(%rax), %rax
 1882              		.loc 5 1148 41
 1883 0033 4839C3   		cmpq	%rax, %rbx
 1884 0036 0F95C0   		setne	%al
 1885              		.loc 5 1148 44
 1886 0039 488B5DF8 		movq	-8(%rbp), %rbx
 1887 003d C9       		leave
 1888              		.cfi_def_cfa 7, 8
 1889 003e C3       		ret
 1890              		.cfi_endproc
 1891              	.LFE1454:
 1893              		.section	.text._ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS
 1894              		.align 2
 1895              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEppEv
 1897              	_ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEppEv:
 1898              	.LFB1455:
1035:/usr/include/c++/11/bits/stl_iterator.h ****       {
 1899              		.loc 5 1035 7
 1900              		.cfi_startproc
 1901 0000 F30F1EFA 		endbr64
 1902 0004 55       		pushq	%rbp
 1903              		.cfi_def_cfa_offset 16
 1904              		.cfi_offset 6, -16
 1905 0005 4889E5   		movq	%rsp, %rbp
 1906              		.cfi_def_cfa_register 6
 1907 0008 48897DF8 		movq	%rdi, -8(%rbp)
1037:/usr/include/c++/11/bits/stl_iterator.h **** 	return *this;
 1908              		.loc 5 1037 4
 1909 000c 488B45F8 		movq	-8(%rbp), %rax
 1910 0010 488B00   		movq	(%rax), %rax
1037:/usr/include/c++/11/bits/stl_iterator.h **** 	return *this;
 1911              		.loc 5 1037 2
 1912 0013 488D9080 		leaq	128(%rax), %rdx
 1912      000000
 1913 001a 488B45F8 		movq	-8(%rbp), %rax
 1914 001e 488910   		movq	%rdx, (%rax)
1038:/usr/include/c++/11/bits/stl_iterator.h ****       }
 1915              		.loc 5 1038 10
 1916 0021 488B45F8 		movq	-8(%rbp), %rax
1039:/usr/include/c++/11/bits/stl_iterator.h **** 
 1917              		.loc 5 1039 7
 1918 0025 5D       		popq	%rbp
 1919              		.cfi_def_cfa 7, 8
 1920 0026 C3       		ret
 1921              		.cfi_endproc
 1922              	.LFE1455:
 1924              		.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaI
 1925              		.align 2
 1926              		.weak	_ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEdeE
 1928              	_ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEdeEv:
 1929              	.LFB1456:
1025:/usr/include/c++/11/bits/stl_iterator.h ****       { return *_M_current; }
 1930              		.loc 5 1025 7
 1931              		.cfi_startproc
 1932 0000 F30F1EFA 		endbr64
 1933 0004 55       		pushq	%rbp
 1934              		.cfi_def_cfa_offset 16
 1935              		.cfi_offset 6, -16
 1936 0005 4889E5   		movq	%rsp, %rbp
 1937              		.cfi_def_cfa_register 6
 1938 0008 48897DF8 		movq	%rdi, -8(%rbp)
1026:/usr/include/c++/11/bits/stl_iterator.h **** 
 1939              		.loc 5 1026 17
 1940 000c 488B45F8 		movq	-8(%rbp), %rax
 1941 0010 488B00   		movq	(%rax), %rax
1026:/usr/include/c++/11/bits/stl_iterator.h **** 
 1942              		.loc 5 1026 29
 1943 0013 5D       		popq	%rbp
 1944              		.cfi_def_cfa 7, 8
 1945 0014 C3       		ret
 1946              		.cfi_endproc
 1947              	.LFE1456:
 1949              		.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaI
 1950              		.align 2
 1951              		.weak	_ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEptE
 1953              	_ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEptEv:
 1954              	.LFB1457:
1030:/usr/include/c++/11/bits/stl_iterator.h ****       { return _M_current; }
 1955              		.loc 5 1030 7
 1956              		.cfi_startproc
 1957 0000 F30F1EFA 		endbr64
 1958 0004 55       		pushq	%rbp
 1959              		.cfi_def_cfa_offset 16
 1960              		.cfi_offset 6, -16
 1961 0005 4889E5   		movq	%rsp, %rbp
 1962              		.cfi_def_cfa_register 6
 1963 0008 48897DF8 		movq	%rdi, -8(%rbp)
1031:/usr/include/c++/11/bits/stl_iterator.h **** 
 1964              		.loc 5 1031 16
 1965 000c 488B45F8 		movq	-8(%rbp), %rax
 1966 0010 488B00   		movq	(%rax), %rax
1031:/usr/include/c++/11/bits/stl_iterator.h **** 
 1967              		.loc 5 1031 28
 1968 0013 5D       		popq	%rbp
 1969              		.cfi_def_cfa 7, 8
 1970 0014 C3       		ret
 1971              		.cfi_endproc
 1972              	.LFE1457:
 1974              		.section	.text._ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_E
 1975              		.align 2
 1976              		.weak	_ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE5beginEv
 1978              	_ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE5beginEv:
 1979              	.LFB1459:
 820:/usr/include/c++/11/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 1980              		.loc 4 820 7
 1981              		.cfi_startproc
 1982 0000 F30F1EFA 		endbr64
 1983 0004 55       		pushq	%rbp
 1984              		.cfi_def_cfa_offset 16
 1985              		.cfi_offset 6, -16
 1986 0005 4889E5   		movq	%rsp, %rbp
 1987              		.cfi_def_cfa_register 6
 1988 0008 4883EC20 		subq	$32, %rsp
 1989 000c 48897DE8 		movq	%rdi, -24(%rbp)
 820:/usr/include/c++/11/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 1990              		.loc 4 820 7
 1991 0010 64488B04 		movq	%fs:40, %rax
 1991      25280000 
 1991      00
 1992 0019 488945F8 		movq	%rax, -8(%rbp)
 1993 001d 31C0     		xorl	%eax, %eax
 821:/usr/include/c++/11/bits/stl_vector.h **** 
 1994              		.loc 4 821 45
 1995 001f 488B55E8 		movq	-24(%rbp), %rdx
 821:/usr/include/c++/11/bits/stl_vector.h **** 
 1996              		.loc 4 821 16
 1997 0023 488D45F0 		leaq	-16(%rbp), %rax
 1998 0027 4889D6   		movq	%rdx, %rsi
 1999 002a 4889C7   		movq	%rax, %rdi
 2000 002d E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIc
 2000      00
 821:/usr/include/c++/11/bits/stl_vector.h **** 
 2001              		.loc 4 821 53
 2002 0032 488B45F0 		movq	-16(%rbp), %rax
 821:/usr/include/c++/11/bits/stl_vector.h **** 
 2003              		.loc 4 821 56
 2004 0036 488B55F8 		movq	-8(%rbp), %rdx
 2005 003a 64482B14 		subq	%fs:40, %rdx
 2005      25280000 
 2005      00
 2006 0043 7405     		je	.L99
 2007 0045 E8000000 		call	__stack_chk_fail@PLT
 2007      00
 2008              	.L99:
 2009 004a C9       		leave
 2010              		.cfi_def_cfa 7, 8
 2011 004b C3       		ret
 2012              		.cfi_endproc
 2013              	.LFE1459:
 2015              		.section	.text._ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_E
 2016              		.align 2
 2017              		.weak	_ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE3endEv
 2019              	_ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE3endEv:
 2020              	.LFB1460:
 838:/usr/include/c++/11/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 2021              		.loc 4 838 7
 2022              		.cfi_startproc
 2023 0000 F30F1EFA 		endbr64
 2024 0004 55       		pushq	%rbp
 2025              		.cfi_def_cfa_offset 16
 2026              		.cfi_offset 6, -16
 2027 0005 4889E5   		movq	%rsp, %rbp
 2028              		.cfi_def_cfa_register 6
 2029 0008 4883EC20 		subq	$32, %rsp
 2030 000c 48897DE8 		movq	%rdi, -24(%rbp)
 838:/usr/include/c++/11/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 2031              		.loc 4 838 7
 2032 0010 64488B04 		movq	%fs:40, %rax
 2032      25280000 
 2032      00
 2033 0019 488945F8 		movq	%rax, -8(%rbp)
 2034 001d 31C0     		xorl	%eax, %eax
 2035              		.loc 4 839 45
 2036 001f 488B45E8 		movq	-24(%rbp), %rax
 2037 0023 488D5008 		leaq	8(%rax), %rdx
 2038              		.loc 4 839 16
 2039 0027 488D45F0 		leaq	-16(%rbp), %rax
 2040 002b 4889D6   		movq	%rdx, %rsi
 2041 002e 4889C7   		movq	%rax, %rdi
 2042 0031 E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIc
 2042      00
 2043              		.loc 4 839 54
 2044 0036 488B45F0 		movq	-16(%rbp), %rax
 2045              		.loc 4 839 57
 2046 003a 488B55F8 		movq	-8(%rbp), %rdx
 2047 003e 64482B14 		subq	%fs:40, %rdx
 2047      25280000 
 2047      00
 2048 0047 7405     		je	.L102
 2049 0049 E8000000 		call	__stack_chk_fail@PLT
 2049      00
 2050              	.L102:
 2051 004e C9       		leave
 2052              		.cfi_def_cfa 7, 8
 2053 004f C3       		ret
 2054              		.cfi_endproc
 2055              	.LFE1460:
 2057              		.section	.text._ZN9__gnu_cxxneIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6
 2058              		.weak	_ZN9__gnu_cxxneIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8
 2060              	_ZN9__gnu_cxxneIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_
 2061              	.LFB1461:
1145:/usr/include/c++/11/bits/stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
 2062              		.loc 5 1145 5
 2063              		.cfi_startproc
 2064 0000 F30F1EFA 		endbr64
 2065 0004 55       		pushq	%rbp
 2066              		.cfi_def_cfa_offset 16
 2067              		.cfi_offset 6, -16
 2068 0005 4889E5   		movq	%rsp, %rbp
 2069              		.cfi_def_cfa_register 6
 2070 0008 53       		pushq	%rbx
 2071 0009 4883EC18 		subq	$24, %rsp
 2072              		.cfi_offset 3, -24
 2073 000d 48897DE8 		movq	%rdi, -24(%rbp)
 2074 0011 488975E0 		movq	%rsi, -32(%rbp)
 2075              		.loc 5 1148 24
 2076 0015 488B45E8 		movq	-24(%rbp), %rax
 2077 0019 4889C7   		movq	%rax, %rdi
 2078 001c E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaI
 2078      00
 2079              		.loc 5 1148 27
 2080 0021 488B18   		movq	(%rax), %rbx
 2081              		.loc 5 1148 40
 2082 0024 488B45E0 		movq	-32(%rbp), %rax
 2083 0028 4889C7   		movq	%rax, %rdi
 2084 002b E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaI
 2084      00
 2085              		.loc 5 1148 27
 2086 0030 488B00   		movq	(%rax), %rax
 2087              		.loc 5 1148 41
 2088 0033 4839C3   		cmpq	%rax, %rbx
 2089 0036 0F95C0   		setne	%al
 2090              		.loc 5 1148 44
 2091 0039 488B5DF8 		movq	-8(%rbp), %rbx
 2092 003d C9       		leave
 2093              		.cfi_def_cfa 7, 8
 2094 003e C3       		ret
 2095              		.cfi_endproc
 2096              	.LFE1461:
 2098              		.section	.text._ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_tra
 2099              		.align 2
 2100              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaI
 2102              	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt
 2103              	.LFB1462:
1035:/usr/include/c++/11/bits/stl_iterator.h ****       {
 2104              		.loc 5 1035 7
 2105              		.cfi_startproc
 2106 0000 F30F1EFA 		endbr64
 2107 0004 55       		pushq	%rbp
 2108              		.cfi_def_cfa_offset 16
 2109              		.cfi_offset 6, -16
 2110 0005 4889E5   		movq	%rsp, %rbp
 2111              		.cfi_def_cfa_register 6
 2112 0008 48897DF8 		movq	%rdi, -8(%rbp)
1037:/usr/include/c++/11/bits/stl_iterator.h **** 	return *this;
 2113              		.loc 5 1037 4
 2114 000c 488B45F8 		movq	-8(%rbp), %rax
 2115 0010 488B00   		movq	(%rax), %rax
1037:/usr/include/c++/11/bits/stl_iterator.h **** 	return *this;
 2116              		.loc 5 1037 2
 2117 0013 488D5028 		leaq	40(%rax), %rdx
 2118 0017 488B45F8 		movq	-8(%rbp), %rax
 2119 001b 488910   		movq	%rdx, (%rax)
1038:/usr/include/c++/11/bits/stl_iterator.h ****       }
 2120              		.loc 5 1038 10
 2121 001e 488B45F8 		movq	-8(%rbp), %rax
1039:/usr/include/c++/11/bits/stl_iterator.h **** 
 2122              		.loc 5 1039 7
 2123 0022 5D       		popq	%rbp
 2124              		.cfi_def_cfa 7, 8
 2125 0023 C3       		ret
 2126              		.cfi_endproc
 2127              	.LFE1462:
 2129              		.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_tr
 2130              		.align 2
 2131              		.weak	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESa
 2133              	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES
 2134              	.LFB1463:
1030:/usr/include/c++/11/bits/stl_iterator.h ****       { return _M_current; }
 2135              		.loc 5 1030 7
 2136              		.cfi_startproc
 2137 0000 F30F1EFA 		endbr64
 2138 0004 55       		pushq	%rbp
 2139              		.cfi_def_cfa_offset 16
 2140              		.cfi_offset 6, -16
 2141 0005 4889E5   		movq	%rsp, %rbp
 2142              		.cfi_def_cfa_register 6
 2143 0008 48897DF8 		movq	%rdi, -8(%rbp)
1031:/usr/include/c++/11/bits/stl_iterator.h **** 
 2144              		.loc 5 1031 16
 2145 000c 488B45F8 		movq	-8(%rbp), %rax
 2146 0010 488B00   		movq	(%rax), %rax
1031:/usr/include/c++/11/bits/stl_iterator.h **** 
 2147              		.loc 5 1031 28
 2148 0013 5D       		popq	%rbp
 2149              		.cfi_def_cfa 7, 8
 2150 0014 C3       		ret
 2151              		.cfi_endproc
 2152              	.LFE1463:
 2154              		.section	.text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD2Ev,"axG"
 2155              		.align 2
 2156              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD2Ev
 2158              	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD2Ev:
 2159              	.LFB1509:
 128:/usr/include/c++/11/bits/stl_vector.h **** 	: public _Tp_alloc_type, public _Vector_impl_data
 2160              		.loc 4 128 14
 2161              		.cfi_startproc
 2162 0000 F30F1EFA 		endbr64
 2163 0004 55       		pushq	%rbp
 2164              		.cfi_def_cfa_offset 16
 2165              		.cfi_offset 6, -16
 2166 0005 4889E5   		movq	%rsp, %rbp
 2167              		.cfi_def_cfa_register 6
 2168 0008 4883EC10 		subq	$16, %rsp
 2169 000c 48897DF8 		movq	%rdi, -8(%rbp)
 2170              	.LBB17:
 128:/usr/include/c++/11/bits/stl_vector.h **** 	: public _Tp_alloc_type, public _Vector_impl_data
 2171              		.loc 4 128 14
 2172 0010 488B45F8 		movq	-8(%rbp), %rax
 2173 0014 4889C7   		movq	%rax, %rdi
 2174 0017 E8000000 		call	_ZNSaIN8UnitTest18DeferredTestResultEED2Ev@PLT
 2174      00
 2175              	.LBE17:
 2176 001c 90       		nop
 2177 001d C9       		leave
 2178              		.cfi_def_cfa 7, 8
 2179 001e C3       		ret
 2180              		.cfi_endproc
 2181              	.LFE1509:
 2183              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD1Ev
 2184              		.set	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD1Ev,_ZNSt12_Vector_
 2185              		.section	.text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev,"axG",@progbits,_ZN
 2186              		.align 2
 2187              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev
 2189              	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev:
 2190              	.LFB1511:
 290:/usr/include/c++/11/bits/stl_vector.h **** #endif
 2191              		.loc 4 290 7
 2192              		.cfi_startproc
 2193 0000 F30F1EFA 		endbr64
 2194 0004 55       		pushq	%rbp
 2195              		.cfi_def_cfa_offset 16
 2196              		.cfi_offset 6, -16
 2197 0005 4889E5   		movq	%rsp, %rbp
 2198              		.cfi_def_cfa_register 6
 2199 0008 4883EC10 		subq	$16, %rsp
 2200 000c 48897DF8 		movq	%rdi, -8(%rbp)
 2201              	.LBB18:
 290:/usr/include/c++/11/bits/stl_vector.h **** #endif
 2202              		.loc 4 290 22
 2203 0010 488B45F8 		movq	-8(%rbp), %rax
 2204 0014 4889C7   		movq	%rax, %rdi
 2205 0017 E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implC1Ev@PLT
 2205      00
 2206              	.LBE18:
 290:/usr/include/c++/11/bits/stl_vector.h **** #endif
 2207              		.loc 4 290 24
 2208 001c 90       		nop
 2209 001d C9       		leave
 2210              		.cfi_def_cfa 7, 8
 2211 001e C3       		ret
 2212              		.cfi_endproc
 2213              	.LFE1511:
 2215              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EEC1Ev
 2216              		.set	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EEC1Ev,_ZNSt12_Vector_baseIN8UnitTes
 2217              		.section	.text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED2Ev,"axG",@progbits,_ZN
 2218              		.align 2
 2219              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED2Ev
 2221              	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED2Ev:
 2222              	.LFB1514:
 333:/usr/include/c++/11/bits/stl_vector.h ****       {
 2223              		.loc 4 333 7
 2224              		.cfi_startproc
 2225              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 2226              		.cfi_lsda 0x1b,.LLSDA1514
 2227 0000 F30F1EFA 		endbr64
 2228 0004 55       		pushq	%rbp
 2229              		.cfi_def_cfa_offset 16
 2230              		.cfi_offset 6, -16
 2231 0005 4889E5   		movq	%rsp, %rbp
 2232              		.cfi_def_cfa_register 6
 2233 0008 53       		pushq	%rbx
 2234 0009 4883EC18 		subq	$24, %rsp
 2235              		.cfi_offset 3, -24
 2236 000d 48897DE8 		movq	%rdi, -24(%rbp)
 2237              	.LBB19:
 336:/usr/include/c++/11/bits/stl_vector.h ****       }
 2238              		.loc 4 336 17
 2239 0011 488B45E8 		movq	-24(%rbp), %rax
 2240 0015 488B5010 		movq	16(%rax), %rdx
 336:/usr/include/c++/11/bits/stl_vector.h ****       }
 2241              		.loc 4 336 45
 2242 0019 488B45E8 		movq	-24(%rbp), %rax
 2243 001d 488B08   		movq	(%rax), %rcx
 336:/usr/include/c++/11/bits/stl_vector.h ****       }
 2244              		.loc 4 336 35
 2245 0020 4889D0   		movq	%rdx, %rax
 2246 0023 4829C8   		subq	%rcx, %rax
 2247 0026 48C1F807 		sarq	$7, %rax
 335:/usr/include/c++/11/bits/stl_vector.h **** 		      _M_impl._M_end_of_storage - _M_impl._M_start);
 2248              		.loc 4 335 15
 2249 002a 4889C2   		movq	%rax, %rdx
 2250 002d 488B45E8 		movq	-24(%rbp), %rax
 2251 0031 488B08   		movq	(%rax), %rcx
 2252 0034 488B45E8 		movq	-24(%rbp), %rax
 2253 0038 4889CE   		movq	%rcx, %rsi
 2254 003b 4889C7   		movq	%rax, %rdi
 2255              	.LEHB37:
 2256 003e E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE13_M_deallocateEPS1_m@PLT
 2256      00
 2257              	.LEHE37:
 337:/usr/include/c++/11/bits/stl_vector.h **** 
 2258              		.loc 4 337 7
 2259 0043 488B45E8 		movq	-24(%rbp), %rax
 2260 0047 4889C7   		movq	%rax, %rdi
 2261 004a E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD1Ev@PLT
 2261      00
 2262              	.LBE19:
 2263 004f EB1E     		jmp	.L114
 2264              	.L113:
 2265 0051 F30F1EFA 		endbr64
 2266              	.LBB20:
 2267 0055 4889C3   		movq	%rax, %rbx
 2268 0058 488B45E8 		movq	-24(%rbp), %rax
 2269 005c 4889C7   		movq	%rax, %rdi
 2270 005f E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD1Ev@PLT
 2270      00
 2271 0064 4889D8   		movq	%rbx, %rax
 2272 0067 4889C7   		movq	%rax, %rdi
 2273              	.LEHB38:
 2274 006a E8000000 		call	_Unwind_Resume@PLT
 2274      00
 2275              	.LEHE38:
 2276              	.L114:
 2277              	.LBE20:
 2278 006f 488B5DF8 		movq	-8(%rbp), %rbx
 2279 0073 C9       		leave
 2280              		.cfi_def_cfa 7, 8
 2281 0074 C3       		ret
 2282              		.cfi_endproc
 2283              	.LFE1514:
 2284              		.section	.gcc_except_table
 2285              	.LLSDA1514:
 2286 00db FF       		.byte	0xff
 2287 00dc FF       		.byte	0xff
 2288 00dd 01       		.byte	0x1
 2289 00de 08       		.uleb128 .LLSDACSE1514-.LLSDACSB1514
 2290              	.LLSDACSB1514:
 2291 00df 3E       		.uleb128 .LEHB37-.LFB1514
 2292 00e0 05       		.uleb128 .LEHE37-.LEHB37
 2293 00e1 51       		.uleb128 .L113-.LFB1514
 2294 00e2 00       		.uleb128 0
 2295 00e3 6A       		.uleb128 .LEHB38-.LFB1514
 2296 00e4 05       		.uleb128 .LEHE38-.LEHB38
 2297 00e5 00       		.uleb128 0
 2298 00e6 00       		.uleb128 0
 2299              	.LLSDACSE1514:
 2300              		.section	.text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED2Ev,"axG",@progbits,_ZN
 2302              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED1Ev
 2303              		.set	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED1Ev,_ZNSt12_Vector_baseIN8UnitTes
 2304              		.section	.text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv,
 2305              		.align 2
 2306              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv
 2308              	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv:
 2309              	.LFB1516:
 276:/usr/include/c++/11/bits/stl_vector.h ****       { return this->_M_impl; }
 2310              		.loc 4 276 7
 2311              		.cfi_startproc
 2312 0000 F30F1EFA 		endbr64
 2313 0004 55       		pushq	%rbp
 2314              		.cfi_def_cfa_offset 16
 2315              		.cfi_offset 6, -16
 2316 0005 4889E5   		movq	%rsp, %rbp
 2317              		.cfi_def_cfa_register 6
 2318 0008 48897DF8 		movq	%rdi, -8(%rbp)
 277:/usr/include/c++/11/bits/stl_vector.h **** 
 2319              		.loc 4 277 22
 2320 000c 488B45F8 		movq	-8(%rbp), %rax
 277:/usr/include/c++/11/bits/stl_vector.h **** 
 2321              		.loc 4 277 31
 2322 0010 5D       		popq	%rbp
 2323              		.cfi_def_cfa 7, 8
 2324 0011 C3       		ret
 2325              		.cfi_endproc
 2326              	.LFE1516:
 2328              		.section	.text._ZSt8_DestroyIPN8UnitTest18DeferredTestResultES1_EvT_S3_RSaIT0_E,"axG",@progbits,_Z
 2329              		.weak	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultES1_EvT_S3_RSaIT0_E
 2331              	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultES1_EvT_S3_RSaIT0_E:
 2332              	.LFB1517:
 2333              		.file 6 "/usr/include/c++/11/bits/alloc_traits.h"
   1:/usr/include/c++/11/bits/alloc_traits.h **** // Allocator traits -*- C++ -*-
   2:/usr/include/c++/11/bits/alloc_traits.h **** 
   3:/usr/include/c++/11/bits/alloc_traits.h **** // Copyright (C) 2011-2021 Free Software Foundation, Inc.
   4:/usr/include/c++/11/bits/alloc_traits.h **** //
   5:/usr/include/c++/11/bits/alloc_traits.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/11/bits/alloc_traits.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/11/bits/alloc_traits.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/11/bits/alloc_traits.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/11/bits/alloc_traits.h **** // any later version.
  10:/usr/include/c++/11/bits/alloc_traits.h **** 
  11:/usr/include/c++/11/bits/alloc_traits.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/11/bits/alloc_traits.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/11/bits/alloc_traits.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/11/bits/alloc_traits.h **** // GNU General Public License for more details.
  15:/usr/include/c++/11/bits/alloc_traits.h **** 
  16:/usr/include/c++/11/bits/alloc_traits.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/11/bits/alloc_traits.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/11/bits/alloc_traits.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/11/bits/alloc_traits.h **** 
  20:/usr/include/c++/11/bits/alloc_traits.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/11/bits/alloc_traits.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/11/bits/alloc_traits.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/11/bits/alloc_traits.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/11/bits/alloc_traits.h **** 
  25:/usr/include/c++/11/bits/alloc_traits.h **** /** @file bits/alloc_traits.h
  26:/usr/include/c++/11/bits/alloc_traits.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/c++/11/bits/alloc_traits.h ****  *  Do not attempt to use it directly. @headername{memory}
  28:/usr/include/c++/11/bits/alloc_traits.h ****  */
  29:/usr/include/c++/11/bits/alloc_traits.h **** 
  30:/usr/include/c++/11/bits/alloc_traits.h **** #ifndef _ALLOC_TRAITS_H
  31:/usr/include/c++/11/bits/alloc_traits.h **** #define _ALLOC_TRAITS_H 1
  32:/usr/include/c++/11/bits/alloc_traits.h **** 
  33:/usr/include/c++/11/bits/alloc_traits.h **** #include <bits/stl_construct.h>
  34:/usr/include/c++/11/bits/alloc_traits.h **** #include <bits/memoryfwd.h>
  35:/usr/include/c++/11/bits/alloc_traits.h **** #if __cplusplus >= 201103L
  36:/usr/include/c++/11/bits/alloc_traits.h **** # include <bits/allocator.h>
  37:/usr/include/c++/11/bits/alloc_traits.h **** # include <bits/ptr_traits.h>
  38:/usr/include/c++/11/bits/alloc_traits.h **** # include <ext/numeric_traits.h>
  39:/usr/include/c++/11/bits/alloc_traits.h **** #endif
  40:/usr/include/c++/11/bits/alloc_traits.h **** 
  41:/usr/include/c++/11/bits/alloc_traits.h **** namespace std _GLIBCXX_VISIBILITY(default)
  42:/usr/include/c++/11/bits/alloc_traits.h **** {
  43:/usr/include/c++/11/bits/alloc_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  44:/usr/include/c++/11/bits/alloc_traits.h **** 
  45:/usr/include/c++/11/bits/alloc_traits.h **** #if __cplusplus >= 201103L
  46:/usr/include/c++/11/bits/alloc_traits.h **** #define __cpp_lib_allocator_traits_is_always_equal 201411
  47:/usr/include/c++/11/bits/alloc_traits.h **** 
  48:/usr/include/c++/11/bits/alloc_traits.h ****   /// @cond undocumented
  49:/usr/include/c++/11/bits/alloc_traits.h ****   struct __allocator_traits_base
  50:/usr/include/c++/11/bits/alloc_traits.h ****   {
  51:/usr/include/c++/11/bits/alloc_traits.h ****     template<typename _Tp, typename _Up, typename = void>
  52:/usr/include/c++/11/bits/alloc_traits.h ****       struct __rebind : __replace_first_arg<_Tp, _Up> { };
  53:/usr/include/c++/11/bits/alloc_traits.h **** 
  54:/usr/include/c++/11/bits/alloc_traits.h ****     template<typename _Tp, typename _Up>
  55:/usr/include/c++/11/bits/alloc_traits.h ****       struct __rebind<_Tp, _Up,
  56:/usr/include/c++/11/bits/alloc_traits.h **** 		      __void_t<typename _Tp::template rebind<_Up>::other>>
  57:/usr/include/c++/11/bits/alloc_traits.h ****       { using type = typename _Tp::template rebind<_Up>::other; };
  58:/usr/include/c++/11/bits/alloc_traits.h **** 
  59:/usr/include/c++/11/bits/alloc_traits.h ****   protected:
  60:/usr/include/c++/11/bits/alloc_traits.h ****     template<typename _Tp>
  61:/usr/include/c++/11/bits/alloc_traits.h ****       using __pointer = typename _Tp::pointer;
  62:/usr/include/c++/11/bits/alloc_traits.h ****     template<typename _Tp>
  63:/usr/include/c++/11/bits/alloc_traits.h ****       using __c_pointer = typename _Tp::const_pointer;
  64:/usr/include/c++/11/bits/alloc_traits.h ****     template<typename _Tp>
  65:/usr/include/c++/11/bits/alloc_traits.h ****       using __v_pointer = typename _Tp::void_pointer;
  66:/usr/include/c++/11/bits/alloc_traits.h ****     template<typename _Tp>
  67:/usr/include/c++/11/bits/alloc_traits.h ****       using __cv_pointer = typename _Tp::const_void_pointer;
  68:/usr/include/c++/11/bits/alloc_traits.h ****     template<typename _Tp>
  69:/usr/include/c++/11/bits/alloc_traits.h ****       using __pocca = typename _Tp::propagate_on_container_copy_assignment;
  70:/usr/include/c++/11/bits/alloc_traits.h ****     template<typename _Tp>
  71:/usr/include/c++/11/bits/alloc_traits.h ****       using __pocma = typename _Tp::propagate_on_container_move_assignment;
  72:/usr/include/c++/11/bits/alloc_traits.h ****     template<typename _Tp>
  73:/usr/include/c++/11/bits/alloc_traits.h ****       using __pocs = typename _Tp::propagate_on_container_swap;
  74:/usr/include/c++/11/bits/alloc_traits.h ****     template<typename _Tp>
  75:/usr/include/c++/11/bits/alloc_traits.h ****       using __equal = typename _Tp::is_always_equal;
  76:/usr/include/c++/11/bits/alloc_traits.h ****   };
  77:/usr/include/c++/11/bits/alloc_traits.h **** 
  78:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc, typename _Up>
  79:/usr/include/c++/11/bits/alloc_traits.h ****     using __alloc_rebind
  80:/usr/include/c++/11/bits/alloc_traits.h ****       = typename __allocator_traits_base::template __rebind<_Alloc, _Up>::type;
  81:/usr/include/c++/11/bits/alloc_traits.h ****   /// @endcond
  82:/usr/include/c++/11/bits/alloc_traits.h **** 
  83:/usr/include/c++/11/bits/alloc_traits.h ****   /**
  84:/usr/include/c++/11/bits/alloc_traits.h ****    * @brief  Uniform interface to all allocator types.
  85:/usr/include/c++/11/bits/alloc_traits.h ****    * @headerfile memory
  86:/usr/include/c++/11/bits/alloc_traits.h ****    * @ingroup allocators
  87:/usr/include/c++/11/bits/alloc_traits.h ****    * @since C++11
  88:/usr/include/c++/11/bits/alloc_traits.h ****   */
  89:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc>
  90:/usr/include/c++/11/bits/alloc_traits.h ****     struct allocator_traits : __allocator_traits_base
  91:/usr/include/c++/11/bits/alloc_traits.h ****     {
  92:/usr/include/c++/11/bits/alloc_traits.h ****       /// The allocator type
  93:/usr/include/c++/11/bits/alloc_traits.h ****       typedef _Alloc allocator_type;
  94:/usr/include/c++/11/bits/alloc_traits.h ****       /// The allocated type
  95:/usr/include/c++/11/bits/alloc_traits.h ****       typedef typename _Alloc::value_type value_type;
  96:/usr/include/c++/11/bits/alloc_traits.h **** 
  97:/usr/include/c++/11/bits/alloc_traits.h ****       /**
  98:/usr/include/c++/11/bits/alloc_traits.h ****        * @brief   The allocator's pointer type.
  99:/usr/include/c++/11/bits/alloc_traits.h ****        *
 100:/usr/include/c++/11/bits/alloc_traits.h ****        * @c Alloc::pointer if that type exists, otherwise @c value_type*
 101:/usr/include/c++/11/bits/alloc_traits.h ****       */
 102:/usr/include/c++/11/bits/alloc_traits.h ****       using pointer = __detected_or_t<value_type*, __pointer, _Alloc>;
 103:/usr/include/c++/11/bits/alloc_traits.h **** 
 104:/usr/include/c++/11/bits/alloc_traits.h ****     private:
 105:/usr/include/c++/11/bits/alloc_traits.h ****       // Select _Func<_Alloc> or pointer_traits<pointer>::rebind<_Tp>
 106:/usr/include/c++/11/bits/alloc_traits.h ****       template<template<typename> class _Func, typename _Tp, typename = void>
 107:/usr/include/c++/11/bits/alloc_traits.h **** 	struct _Ptr
 108:/usr/include/c++/11/bits/alloc_traits.h **** 	{
 109:/usr/include/c++/11/bits/alloc_traits.h **** 	  using type = typename pointer_traits<pointer>::template rebind<_Tp>;
 110:/usr/include/c++/11/bits/alloc_traits.h **** 	};
 111:/usr/include/c++/11/bits/alloc_traits.h **** 
 112:/usr/include/c++/11/bits/alloc_traits.h ****       template<template<typename> class _Func, typename _Tp>
 113:/usr/include/c++/11/bits/alloc_traits.h **** 	struct _Ptr<_Func, _Tp, __void_t<_Func<_Alloc>>>
 114:/usr/include/c++/11/bits/alloc_traits.h **** 	{
 115:/usr/include/c++/11/bits/alloc_traits.h **** 	  using type = _Func<_Alloc>;
 116:/usr/include/c++/11/bits/alloc_traits.h **** 	};
 117:/usr/include/c++/11/bits/alloc_traits.h **** 
 118:/usr/include/c++/11/bits/alloc_traits.h ****       // Select _A2::difference_type or pointer_traits<_Ptr>::difference_type
 119:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _A2, typename _PtrT, typename = void>
 120:/usr/include/c++/11/bits/alloc_traits.h **** 	struct _Diff
 121:/usr/include/c++/11/bits/alloc_traits.h **** 	{ using type = typename pointer_traits<_PtrT>::difference_type; };
 122:/usr/include/c++/11/bits/alloc_traits.h **** 
 123:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _A2, typename _PtrT>
 124:/usr/include/c++/11/bits/alloc_traits.h **** 	struct _Diff<_A2, _PtrT, __void_t<typename _A2::difference_type>>
 125:/usr/include/c++/11/bits/alloc_traits.h **** 	{ using type = typename _A2::difference_type; };
 126:/usr/include/c++/11/bits/alloc_traits.h **** 
 127:/usr/include/c++/11/bits/alloc_traits.h ****       // Select _A2::size_type or make_unsigned<_DiffT>::type
 128:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _A2, typename _DiffT, typename = void>
 129:/usr/include/c++/11/bits/alloc_traits.h **** 	struct _Size : make_unsigned<_DiffT> { };
 130:/usr/include/c++/11/bits/alloc_traits.h **** 
 131:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _A2, typename _DiffT>
 132:/usr/include/c++/11/bits/alloc_traits.h **** 	struct _Size<_A2, _DiffT, __void_t<typename _A2::size_type>>
 133:/usr/include/c++/11/bits/alloc_traits.h **** 	{ using type = typename _A2::size_type; };
 134:/usr/include/c++/11/bits/alloc_traits.h **** 
 135:/usr/include/c++/11/bits/alloc_traits.h ****     public:
 136:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 137:/usr/include/c++/11/bits/alloc_traits.h ****        * @brief   The allocator's const pointer type.
 138:/usr/include/c++/11/bits/alloc_traits.h ****        *
 139:/usr/include/c++/11/bits/alloc_traits.h ****        * @c Alloc::const_pointer if that type exists, otherwise
 140:/usr/include/c++/11/bits/alloc_traits.h ****        * <tt> pointer_traits<pointer>::rebind<const value_type> </tt>
 141:/usr/include/c++/11/bits/alloc_traits.h ****       */
 142:/usr/include/c++/11/bits/alloc_traits.h ****       using const_pointer = typename _Ptr<__c_pointer, const value_type>::type;
 143:/usr/include/c++/11/bits/alloc_traits.h **** 
 144:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 145:/usr/include/c++/11/bits/alloc_traits.h ****        * @brief   The allocator's void pointer type.
 146:/usr/include/c++/11/bits/alloc_traits.h ****        *
 147:/usr/include/c++/11/bits/alloc_traits.h ****        * @c Alloc::void_pointer if that type exists, otherwise
 148:/usr/include/c++/11/bits/alloc_traits.h ****        * <tt> pointer_traits<pointer>::rebind<void> </tt>
 149:/usr/include/c++/11/bits/alloc_traits.h ****       */
 150:/usr/include/c++/11/bits/alloc_traits.h ****       using void_pointer = typename _Ptr<__v_pointer, void>::type;
 151:/usr/include/c++/11/bits/alloc_traits.h **** 
 152:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 153:/usr/include/c++/11/bits/alloc_traits.h ****        * @brief   The allocator's const void pointer type.
 154:/usr/include/c++/11/bits/alloc_traits.h ****        *
 155:/usr/include/c++/11/bits/alloc_traits.h ****        * @c Alloc::const_void_pointer if that type exists, otherwise
 156:/usr/include/c++/11/bits/alloc_traits.h ****        * <tt> pointer_traits<pointer>::rebind<const void> </tt>
 157:/usr/include/c++/11/bits/alloc_traits.h ****       */
 158:/usr/include/c++/11/bits/alloc_traits.h ****       using const_void_pointer = typename _Ptr<__cv_pointer, const void>::type;
 159:/usr/include/c++/11/bits/alloc_traits.h **** 
 160:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 161:/usr/include/c++/11/bits/alloc_traits.h ****        * @brief   The allocator's difference type
 162:/usr/include/c++/11/bits/alloc_traits.h ****        *
 163:/usr/include/c++/11/bits/alloc_traits.h ****        * @c Alloc::difference_type if that type exists, otherwise
 164:/usr/include/c++/11/bits/alloc_traits.h ****        * <tt> pointer_traits<pointer>::difference_type </tt>
 165:/usr/include/c++/11/bits/alloc_traits.h ****       */
 166:/usr/include/c++/11/bits/alloc_traits.h ****       using difference_type = typename _Diff<_Alloc, pointer>::type;
 167:/usr/include/c++/11/bits/alloc_traits.h **** 
 168:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 169:/usr/include/c++/11/bits/alloc_traits.h ****        * @brief   The allocator's size type
 170:/usr/include/c++/11/bits/alloc_traits.h ****        *
 171:/usr/include/c++/11/bits/alloc_traits.h ****        * @c Alloc::size_type if that type exists, otherwise
 172:/usr/include/c++/11/bits/alloc_traits.h ****        * <tt> make_unsigned<difference_type>::type </tt>
 173:/usr/include/c++/11/bits/alloc_traits.h ****       */
 174:/usr/include/c++/11/bits/alloc_traits.h ****       using size_type = typename _Size<_Alloc, difference_type>::type;
 175:/usr/include/c++/11/bits/alloc_traits.h **** 
 176:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 177:/usr/include/c++/11/bits/alloc_traits.h ****        * @brief   How the allocator is propagated on copy assignment
 178:/usr/include/c++/11/bits/alloc_traits.h ****        *
 179:/usr/include/c++/11/bits/alloc_traits.h ****        * @c Alloc::propagate_on_container_copy_assignment if that type exists,
 180:/usr/include/c++/11/bits/alloc_traits.h ****        * otherwise @c false_type
 181:/usr/include/c++/11/bits/alloc_traits.h ****       */
 182:/usr/include/c++/11/bits/alloc_traits.h ****       using propagate_on_container_copy_assignment
 183:/usr/include/c++/11/bits/alloc_traits.h **** 	= __detected_or_t<false_type, __pocca, _Alloc>;
 184:/usr/include/c++/11/bits/alloc_traits.h **** 
 185:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 186:/usr/include/c++/11/bits/alloc_traits.h ****        * @brief   How the allocator is propagated on move assignment
 187:/usr/include/c++/11/bits/alloc_traits.h ****        *
 188:/usr/include/c++/11/bits/alloc_traits.h ****        * @c Alloc::propagate_on_container_move_assignment if that type exists,
 189:/usr/include/c++/11/bits/alloc_traits.h ****        * otherwise @c false_type
 190:/usr/include/c++/11/bits/alloc_traits.h ****       */
 191:/usr/include/c++/11/bits/alloc_traits.h ****       using propagate_on_container_move_assignment
 192:/usr/include/c++/11/bits/alloc_traits.h **** 	= __detected_or_t<false_type, __pocma, _Alloc>;
 193:/usr/include/c++/11/bits/alloc_traits.h **** 
 194:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 195:/usr/include/c++/11/bits/alloc_traits.h ****        * @brief   How the allocator is propagated on swap
 196:/usr/include/c++/11/bits/alloc_traits.h ****        *
 197:/usr/include/c++/11/bits/alloc_traits.h ****        * @c Alloc::propagate_on_container_swap if that type exists,
 198:/usr/include/c++/11/bits/alloc_traits.h ****        * otherwise @c false_type
 199:/usr/include/c++/11/bits/alloc_traits.h ****       */
 200:/usr/include/c++/11/bits/alloc_traits.h ****       using propagate_on_container_swap
 201:/usr/include/c++/11/bits/alloc_traits.h **** 	= __detected_or_t<false_type, __pocs, _Alloc>;
 202:/usr/include/c++/11/bits/alloc_traits.h **** 
 203:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 204:/usr/include/c++/11/bits/alloc_traits.h ****        * @brief   Whether all instances of the allocator type compare equal.
 205:/usr/include/c++/11/bits/alloc_traits.h ****        *
 206:/usr/include/c++/11/bits/alloc_traits.h ****        * @c Alloc::is_always_equal if that type exists,
 207:/usr/include/c++/11/bits/alloc_traits.h ****        * otherwise @c is_empty<Alloc>::type
 208:/usr/include/c++/11/bits/alloc_traits.h ****       */
 209:/usr/include/c++/11/bits/alloc_traits.h ****       using is_always_equal
 210:/usr/include/c++/11/bits/alloc_traits.h **** 	= __detected_or_t<typename is_empty<_Alloc>::type, __equal, _Alloc>;
 211:/usr/include/c++/11/bits/alloc_traits.h **** 
 212:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Tp>
 213:/usr/include/c++/11/bits/alloc_traits.h **** 	using rebind_alloc = __alloc_rebind<_Alloc, _Tp>;
 214:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Tp>
 215:/usr/include/c++/11/bits/alloc_traits.h **** 	using rebind_traits = allocator_traits<rebind_alloc<_Tp>>;
 216:/usr/include/c++/11/bits/alloc_traits.h **** 
 217:/usr/include/c++/11/bits/alloc_traits.h ****     private:
 218:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Alloc2>
 219:/usr/include/c++/11/bits/alloc_traits.h **** 	static constexpr auto
 220:/usr/include/c++/11/bits/alloc_traits.h **** 	_S_allocate(_Alloc2& __a, size_type __n, const_void_pointer __hint, int)
 221:/usr/include/c++/11/bits/alloc_traits.h **** 	-> decltype(__a.allocate(__n, __hint))
 222:/usr/include/c++/11/bits/alloc_traits.h **** 	{ return __a.allocate(__n, __hint); }
 223:/usr/include/c++/11/bits/alloc_traits.h **** 
 224:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Alloc2>
 225:/usr/include/c++/11/bits/alloc_traits.h **** 	static constexpr pointer
 226:/usr/include/c++/11/bits/alloc_traits.h **** 	_S_allocate(_Alloc2& __a, size_type __n, const_void_pointer, ...)
 227:/usr/include/c++/11/bits/alloc_traits.h **** 	{ return __a.allocate(__n); }
 228:/usr/include/c++/11/bits/alloc_traits.h **** 
 229:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 230:/usr/include/c++/11/bits/alloc_traits.h **** 	struct __construct_helper
 231:/usr/include/c++/11/bits/alloc_traits.h **** 	{
 232:/usr/include/c++/11/bits/alloc_traits.h **** 	  template<typename _Alloc2,
 233:/usr/include/c++/11/bits/alloc_traits.h **** 	    typename = decltype(std::declval<_Alloc2*>()->construct(
 234:/usr/include/c++/11/bits/alloc_traits.h **** 		  std::declval<_Tp*>(), std::declval<_Args>()...))>
 235:/usr/include/c++/11/bits/alloc_traits.h **** 	    static true_type __test(int);
 236:/usr/include/c++/11/bits/alloc_traits.h **** 
 237:/usr/include/c++/11/bits/alloc_traits.h **** 	  template<typename>
 238:/usr/include/c++/11/bits/alloc_traits.h **** 	    static false_type __test(...);
 239:/usr/include/c++/11/bits/alloc_traits.h **** 
 240:/usr/include/c++/11/bits/alloc_traits.h **** 	  using type = decltype(__test<_Alloc>(0));
 241:/usr/include/c++/11/bits/alloc_traits.h **** 	};
 242:/usr/include/c++/11/bits/alloc_traits.h **** 
 243:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 244:/usr/include/c++/11/bits/alloc_traits.h **** 	using __has_construct
 245:/usr/include/c++/11/bits/alloc_traits.h **** 	  = typename __construct_helper<_Tp, _Args...>::type;
 246:/usr/include/c++/11/bits/alloc_traits.h **** 
 247:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 248:/usr/include/c++/11/bits/alloc_traits.h **** 	static _GLIBCXX14_CONSTEXPR _Require<__has_construct<_Tp, _Args...>>
 249:/usr/include/c++/11/bits/alloc_traits.h **** 	_S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 250:/usr/include/c++/11/bits/alloc_traits.h **** 	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
 251:/usr/include/c++/11/bits/alloc_traits.h **** 	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 252:/usr/include/c++/11/bits/alloc_traits.h **** 
 253:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 254:/usr/include/c++/11/bits/alloc_traits.h **** 	static _GLIBCXX14_CONSTEXPR
 255:/usr/include/c++/11/bits/alloc_traits.h **** 	_Require<__and_<__not_<__has_construct<_Tp, _Args...>>,
 256:/usr/include/c++/11/bits/alloc_traits.h **** 			       is_constructible<_Tp, _Args...>>>
 257:/usr/include/c++/11/bits/alloc_traits.h **** 	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 258:/usr/include/c++/11/bits/alloc_traits.h **** 	noexcept(std::is_nothrow_constructible<_Tp, _Args...>::value)
 259:/usr/include/c++/11/bits/alloc_traits.h **** 	{
 260:/usr/include/c++/11/bits/alloc_traits.h **** #if __cplusplus <= 201703L
 261:/usr/include/c++/11/bits/alloc_traits.h **** 	  ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 262:/usr/include/c++/11/bits/alloc_traits.h **** #else
 263:/usr/include/c++/11/bits/alloc_traits.h **** 	  std::construct_at(__p, std::forward<_Args>(__args)...);
 264:/usr/include/c++/11/bits/alloc_traits.h **** #endif
 265:/usr/include/c++/11/bits/alloc_traits.h **** 	}
 266:/usr/include/c++/11/bits/alloc_traits.h **** 
 267:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Alloc2, typename _Tp>
 268:/usr/include/c++/11/bits/alloc_traits.h **** 	static _GLIBCXX14_CONSTEXPR auto
 269:/usr/include/c++/11/bits/alloc_traits.h **** 	_S_destroy(_Alloc2& __a, _Tp* __p, int)
 270:/usr/include/c++/11/bits/alloc_traits.h **** 	noexcept(noexcept(__a.destroy(__p)))
 271:/usr/include/c++/11/bits/alloc_traits.h **** 	-> decltype(__a.destroy(__p))
 272:/usr/include/c++/11/bits/alloc_traits.h **** 	{ __a.destroy(__p); }
 273:/usr/include/c++/11/bits/alloc_traits.h **** 
 274:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Alloc2, typename _Tp>
 275:/usr/include/c++/11/bits/alloc_traits.h **** 	static _GLIBCXX14_CONSTEXPR void
 276:/usr/include/c++/11/bits/alloc_traits.h **** 	_S_destroy(_Alloc2&, _Tp* __p, ...)
 277:/usr/include/c++/11/bits/alloc_traits.h **** 	noexcept(std::is_nothrow_destructible<_Tp>::value)
 278:/usr/include/c++/11/bits/alloc_traits.h **** 	{ std::_Destroy(__p); }
 279:/usr/include/c++/11/bits/alloc_traits.h **** 
 280:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Alloc2>
 281:/usr/include/c++/11/bits/alloc_traits.h **** 	static constexpr auto
 282:/usr/include/c++/11/bits/alloc_traits.h **** 	_S_max_size(_Alloc2& __a, int)
 283:/usr/include/c++/11/bits/alloc_traits.h **** 	-> decltype(__a.max_size())
 284:/usr/include/c++/11/bits/alloc_traits.h **** 	{ return __a.max_size(); }
 285:/usr/include/c++/11/bits/alloc_traits.h **** 
 286:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Alloc2>
 287:/usr/include/c++/11/bits/alloc_traits.h **** 	static constexpr size_type
 288:/usr/include/c++/11/bits/alloc_traits.h **** 	_S_max_size(_Alloc2&, ...)
 289:/usr/include/c++/11/bits/alloc_traits.h **** 	{
 290:/usr/include/c++/11/bits/alloc_traits.h **** 	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
 291:/usr/include/c++/11/bits/alloc_traits.h **** 	  // 2466. allocator_traits::max_size() default behavior is incorrect
 292:/usr/include/c++/11/bits/alloc_traits.h **** 	  return __gnu_cxx::__numeric_traits<size_type>::__max
 293:/usr/include/c++/11/bits/alloc_traits.h **** 	    / sizeof(value_type);
 294:/usr/include/c++/11/bits/alloc_traits.h **** 	}
 295:/usr/include/c++/11/bits/alloc_traits.h **** 
 296:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Alloc2>
 297:/usr/include/c++/11/bits/alloc_traits.h **** 	static constexpr auto
 298:/usr/include/c++/11/bits/alloc_traits.h **** 	_S_select(_Alloc2& __a, int)
 299:/usr/include/c++/11/bits/alloc_traits.h **** 	-> decltype(__a.select_on_container_copy_construction())
 300:/usr/include/c++/11/bits/alloc_traits.h **** 	{ return __a.select_on_container_copy_construction(); }
 301:/usr/include/c++/11/bits/alloc_traits.h **** 
 302:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Alloc2>
 303:/usr/include/c++/11/bits/alloc_traits.h **** 	static constexpr _Alloc2
 304:/usr/include/c++/11/bits/alloc_traits.h **** 	_S_select(_Alloc2& __a, ...)
 305:/usr/include/c++/11/bits/alloc_traits.h **** 	{ return __a; }
 306:/usr/include/c++/11/bits/alloc_traits.h **** 
 307:/usr/include/c++/11/bits/alloc_traits.h ****     public:
 308:/usr/include/c++/11/bits/alloc_traits.h **** 
 309:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 310:/usr/include/c++/11/bits/alloc_traits.h ****        *  @brief  Allocate memory.
 311:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 312:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 313:/usr/include/c++/11/bits/alloc_traits.h ****        *
 314:/usr/include/c++/11/bits/alloc_traits.h ****        *  Calls @c a.allocate(n)
 315:/usr/include/c++/11/bits/alloc_traits.h ****       */
 316:/usr/include/c++/11/bits/alloc_traits.h ****       _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
 317:/usr/include/c++/11/bits/alloc_traits.h ****       allocate(_Alloc& __a, size_type __n)
 318:/usr/include/c++/11/bits/alloc_traits.h ****       { return __a.allocate(__n); }
 319:/usr/include/c++/11/bits/alloc_traits.h **** 
 320:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 321:/usr/include/c++/11/bits/alloc_traits.h ****        *  @brief  Allocate memory.
 322:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 323:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 324:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __hint Aid to locality.
 325:/usr/include/c++/11/bits/alloc_traits.h ****        *  @return Memory of suitable size and alignment for @a n objects
 326:/usr/include/c++/11/bits/alloc_traits.h ****        *          of type @c value_type
 327:/usr/include/c++/11/bits/alloc_traits.h ****        *
 328:/usr/include/c++/11/bits/alloc_traits.h ****        *  Returns <tt> a.allocate(n, hint) </tt> if that expression is
 329:/usr/include/c++/11/bits/alloc_traits.h ****        *  well-formed, otherwise returns @c a.allocate(n)
 330:/usr/include/c++/11/bits/alloc_traits.h ****       */
 331:/usr/include/c++/11/bits/alloc_traits.h ****       _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
 332:/usr/include/c++/11/bits/alloc_traits.h ****       allocate(_Alloc& __a, size_type __n, const_void_pointer __hint)
 333:/usr/include/c++/11/bits/alloc_traits.h ****       { return _S_allocate(__a, __n, __hint, 0); }
 334:/usr/include/c++/11/bits/alloc_traits.h **** 
 335:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 336:/usr/include/c++/11/bits/alloc_traits.h ****        *  @brief  Deallocate memory.
 337:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 338:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __p  Pointer to the memory to deallocate.
 339:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __n  The number of objects space was allocated for.
 340:/usr/include/c++/11/bits/alloc_traits.h ****        *
 341:/usr/include/c++/11/bits/alloc_traits.h ****        *  Calls <tt> a.deallocate(p, n) </tt>
 342:/usr/include/c++/11/bits/alloc_traits.h ****       */
 343:/usr/include/c++/11/bits/alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR void
 344:/usr/include/c++/11/bits/alloc_traits.h ****       deallocate(_Alloc& __a, pointer __p, size_type __n)
 345:/usr/include/c++/11/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 346:/usr/include/c++/11/bits/alloc_traits.h **** 
 347:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 348:/usr/include/c++/11/bits/alloc_traits.h ****        *  @brief  Construct an object of type `_Tp`
 349:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 350:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __p  Pointer to memory of suitable size and alignment for Tp
 351:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __args Constructor arguments.
 352:/usr/include/c++/11/bits/alloc_traits.h ****        *
 353:/usr/include/c++/11/bits/alloc_traits.h ****        *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
 354:/usr/include/c++/11/bits/alloc_traits.h ****        *  if that expression is well-formed, otherwise uses placement-new
 355:/usr/include/c++/11/bits/alloc_traits.h ****        *  to construct an object of type @a _Tp at location @a __p from the
 356:/usr/include/c++/11/bits/alloc_traits.h ****        *  arguments @a __args...
 357:/usr/include/c++/11/bits/alloc_traits.h ****       */
 358:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 359:/usr/include/c++/11/bits/alloc_traits.h **** 	static _GLIBCXX20_CONSTEXPR auto
 360:/usr/include/c++/11/bits/alloc_traits.h **** 	construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 361:/usr/include/c++/11/bits/alloc_traits.h **** 	noexcept(noexcept(_S_construct(__a, __p,
 362:/usr/include/c++/11/bits/alloc_traits.h **** 				       std::forward<_Args>(__args)...)))
 363:/usr/include/c++/11/bits/alloc_traits.h **** 	-> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))
 364:/usr/include/c++/11/bits/alloc_traits.h **** 	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 365:/usr/include/c++/11/bits/alloc_traits.h **** 
 366:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 367:/usr/include/c++/11/bits/alloc_traits.h ****        *  @brief  Destroy an object of type @a _Tp
 368:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 369:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __p  Pointer to the object to destroy
 370:/usr/include/c++/11/bits/alloc_traits.h ****        *
 371:/usr/include/c++/11/bits/alloc_traits.h ****        *  Calls @c __a.destroy(__p) if that expression is well-formed,
 372:/usr/include/c++/11/bits/alloc_traits.h ****        *  otherwise calls @c __p->~_Tp()
 373:/usr/include/c++/11/bits/alloc_traits.h ****       */
 374:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Tp>
 375:/usr/include/c++/11/bits/alloc_traits.h **** 	static _GLIBCXX20_CONSTEXPR void
 376:/usr/include/c++/11/bits/alloc_traits.h **** 	destroy(_Alloc& __a, _Tp* __p)
 377:/usr/include/c++/11/bits/alloc_traits.h **** 	noexcept(noexcept(_S_destroy(__a, __p, 0)))
 378:/usr/include/c++/11/bits/alloc_traits.h **** 	{ _S_destroy(__a, __p, 0); }
 379:/usr/include/c++/11/bits/alloc_traits.h **** 
 380:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 381:/usr/include/c++/11/bits/alloc_traits.h ****        *  @brief  The maximum supported allocation size
 382:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 383:/usr/include/c++/11/bits/alloc_traits.h ****        *  @return @c __a.max_size() or @c numeric_limits<size_type>::max()
 384:/usr/include/c++/11/bits/alloc_traits.h ****        *
 385:/usr/include/c++/11/bits/alloc_traits.h ****        *  Returns @c __a.max_size() if that expression is well-formed,
 386:/usr/include/c++/11/bits/alloc_traits.h ****        *  otherwise returns @c numeric_limits<size_type>::max()
 387:/usr/include/c++/11/bits/alloc_traits.h ****       */
 388:/usr/include/c++/11/bits/alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR size_type
 389:/usr/include/c++/11/bits/alloc_traits.h ****       max_size(const _Alloc& __a) noexcept
 390:/usr/include/c++/11/bits/alloc_traits.h ****       { return _S_max_size(__a, 0); }
 391:/usr/include/c++/11/bits/alloc_traits.h **** 
 392:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 393:/usr/include/c++/11/bits/alloc_traits.h ****        *  @brief  Obtain an allocator to use when copying a container.
 394:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __rhs  An allocator.
 395:/usr/include/c++/11/bits/alloc_traits.h ****        *  @return @c __rhs.select_on_container_copy_construction() or @a __rhs
 396:/usr/include/c++/11/bits/alloc_traits.h ****        *
 397:/usr/include/c++/11/bits/alloc_traits.h ****        *  Returns @c __rhs.select_on_container_copy_construction() if that
 398:/usr/include/c++/11/bits/alloc_traits.h ****        *  expression is well-formed, otherwise returns @a __rhs
 399:/usr/include/c++/11/bits/alloc_traits.h ****       */
 400:/usr/include/c++/11/bits/alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR _Alloc
 401:/usr/include/c++/11/bits/alloc_traits.h ****       select_on_container_copy_construction(const _Alloc& __rhs)
 402:/usr/include/c++/11/bits/alloc_traits.h ****       { return _S_select(__rhs, 0); }
 403:/usr/include/c++/11/bits/alloc_traits.h ****     };
 404:/usr/include/c++/11/bits/alloc_traits.h **** 
 405:/usr/include/c++/11/bits/alloc_traits.h **** #if __cplusplus > 201703L
 406:/usr/include/c++/11/bits/alloc_traits.h **** # define __cpp_lib_constexpr_dynamic_alloc 201907L
 407:/usr/include/c++/11/bits/alloc_traits.h **** #endif
 408:/usr/include/c++/11/bits/alloc_traits.h **** 
 409:/usr/include/c++/11/bits/alloc_traits.h ****   /// Partial specialization for std::allocator.
 410:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Tp>
 411:/usr/include/c++/11/bits/alloc_traits.h ****     struct allocator_traits<allocator<_Tp>>
 412:/usr/include/c++/11/bits/alloc_traits.h ****     {
 413:/usr/include/c++/11/bits/alloc_traits.h ****       /// The allocator type
 414:/usr/include/c++/11/bits/alloc_traits.h ****       using allocator_type = allocator<_Tp>;
 415:/usr/include/c++/11/bits/alloc_traits.h **** 
 416:/usr/include/c++/11/bits/alloc_traits.h ****       /// The allocated type
 417:/usr/include/c++/11/bits/alloc_traits.h ****       using value_type = _Tp;
 418:/usr/include/c++/11/bits/alloc_traits.h **** 
 419:/usr/include/c++/11/bits/alloc_traits.h ****       /// The allocator's pointer type.
 420:/usr/include/c++/11/bits/alloc_traits.h ****       using pointer = _Tp*;
 421:/usr/include/c++/11/bits/alloc_traits.h **** 
 422:/usr/include/c++/11/bits/alloc_traits.h ****       /// The allocator's const pointer type.
 423:/usr/include/c++/11/bits/alloc_traits.h ****       using const_pointer = const _Tp*;
 424:/usr/include/c++/11/bits/alloc_traits.h **** 
 425:/usr/include/c++/11/bits/alloc_traits.h ****       /// The allocator's void pointer type.
 426:/usr/include/c++/11/bits/alloc_traits.h ****       using void_pointer = void*;
 427:/usr/include/c++/11/bits/alloc_traits.h **** 
 428:/usr/include/c++/11/bits/alloc_traits.h ****       /// The allocator's const void pointer type.
 429:/usr/include/c++/11/bits/alloc_traits.h ****       using const_void_pointer = const void*;
 430:/usr/include/c++/11/bits/alloc_traits.h **** 
 431:/usr/include/c++/11/bits/alloc_traits.h ****       /// The allocator's difference type
 432:/usr/include/c++/11/bits/alloc_traits.h ****       using difference_type = std::ptrdiff_t;
 433:/usr/include/c++/11/bits/alloc_traits.h **** 
 434:/usr/include/c++/11/bits/alloc_traits.h ****       /// The allocator's size type
 435:/usr/include/c++/11/bits/alloc_traits.h ****       using size_type = std::size_t;
 436:/usr/include/c++/11/bits/alloc_traits.h **** 
 437:/usr/include/c++/11/bits/alloc_traits.h ****       /// How the allocator is propagated on copy assignment
 438:/usr/include/c++/11/bits/alloc_traits.h ****       using propagate_on_container_copy_assignment = false_type;
 439:/usr/include/c++/11/bits/alloc_traits.h **** 
 440:/usr/include/c++/11/bits/alloc_traits.h ****       /// How the allocator is propagated on move assignment
 441:/usr/include/c++/11/bits/alloc_traits.h ****       using propagate_on_container_move_assignment = true_type;
 442:/usr/include/c++/11/bits/alloc_traits.h **** 
 443:/usr/include/c++/11/bits/alloc_traits.h ****       /// How the allocator is propagated on swap
 444:/usr/include/c++/11/bits/alloc_traits.h ****       using propagate_on_container_swap = false_type;
 445:/usr/include/c++/11/bits/alloc_traits.h **** 
 446:/usr/include/c++/11/bits/alloc_traits.h ****       /// Whether all instances of the allocator type compare equal.
 447:/usr/include/c++/11/bits/alloc_traits.h ****       using is_always_equal = true_type;
 448:/usr/include/c++/11/bits/alloc_traits.h **** 
 449:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Up>
 450:/usr/include/c++/11/bits/alloc_traits.h **** 	using rebind_alloc = allocator<_Up>;
 451:/usr/include/c++/11/bits/alloc_traits.h **** 
 452:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Up>
 453:/usr/include/c++/11/bits/alloc_traits.h **** 	using rebind_traits = allocator_traits<allocator<_Up>>;
 454:/usr/include/c++/11/bits/alloc_traits.h **** 
 455:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 456:/usr/include/c++/11/bits/alloc_traits.h ****        *  @brief  Allocate memory.
 457:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 458:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 459:/usr/include/c++/11/bits/alloc_traits.h ****        *
 460:/usr/include/c++/11/bits/alloc_traits.h ****        *  Calls @c a.allocate(n)
 461:/usr/include/c++/11/bits/alloc_traits.h ****       */
 462:/usr/include/c++/11/bits/alloc_traits.h ****       _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
 463:/usr/include/c++/11/bits/alloc_traits.h ****       allocate(allocator_type& __a, size_type __n)
 464:/usr/include/c++/11/bits/alloc_traits.h ****       { return __a.allocate(__n); }
 465:/usr/include/c++/11/bits/alloc_traits.h **** 
 466:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 467:/usr/include/c++/11/bits/alloc_traits.h ****        *  @brief  Allocate memory.
 468:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 469:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 470:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __hint Aid to locality.
 471:/usr/include/c++/11/bits/alloc_traits.h ****        *  @return Memory of suitable size and alignment for @a n objects
 472:/usr/include/c++/11/bits/alloc_traits.h ****        *          of type @c value_type
 473:/usr/include/c++/11/bits/alloc_traits.h ****        *
 474:/usr/include/c++/11/bits/alloc_traits.h ****        *  Returns <tt> a.allocate(n, hint) </tt>
 475:/usr/include/c++/11/bits/alloc_traits.h ****       */
 476:/usr/include/c++/11/bits/alloc_traits.h ****       _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
 477:/usr/include/c++/11/bits/alloc_traits.h ****       allocate(allocator_type& __a, size_type __n, const_void_pointer __hint)
 478:/usr/include/c++/11/bits/alloc_traits.h ****       {
 479:/usr/include/c++/11/bits/alloc_traits.h **** #if __cplusplus <= 201703L
 480:/usr/include/c++/11/bits/alloc_traits.h **** 	return __a.allocate(__n, __hint);
 481:/usr/include/c++/11/bits/alloc_traits.h **** #else
 482:/usr/include/c++/11/bits/alloc_traits.h **** 	return __a.allocate(__n);
 483:/usr/include/c++/11/bits/alloc_traits.h **** #endif
 484:/usr/include/c++/11/bits/alloc_traits.h ****       }
 485:/usr/include/c++/11/bits/alloc_traits.h **** 
 486:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 487:/usr/include/c++/11/bits/alloc_traits.h ****        *  @brief  Deallocate memory.
 488:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 489:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __p  Pointer to the memory to deallocate.
 490:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __n  The number of objects space was allocated for.
 491:/usr/include/c++/11/bits/alloc_traits.h ****        *
 492:/usr/include/c++/11/bits/alloc_traits.h ****        *  Calls <tt> a.deallocate(p, n) </tt>
 493:/usr/include/c++/11/bits/alloc_traits.h ****       */
 494:/usr/include/c++/11/bits/alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR void
 495:/usr/include/c++/11/bits/alloc_traits.h ****       deallocate(allocator_type& __a, pointer __p, size_type __n)
 496:/usr/include/c++/11/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 497:/usr/include/c++/11/bits/alloc_traits.h **** 
 498:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 499:/usr/include/c++/11/bits/alloc_traits.h ****        *  @brief  Construct an object of type `_Up`
 500:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 501:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __p  Pointer to memory of suitable size and alignment for
 502:/usr/include/c++/11/bits/alloc_traits.h ****        *	       an object of type `_Up`.
 503:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __args Constructor arguments.
 504:/usr/include/c++/11/bits/alloc_traits.h ****        *
 505:/usr/include/c++/11/bits/alloc_traits.h ****        *  Calls `__a.construct(__p, std::forward<_Args>(__args)...)`
 506:/usr/include/c++/11/bits/alloc_traits.h ****        *  in C++11, C++14 and C++17. Changed in C++20 to call
 507:/usr/include/c++/11/bits/alloc_traits.h ****        *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
 508:/usr/include/c++/11/bits/alloc_traits.h ****       */
 509:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Up, typename... _Args>
 510:/usr/include/c++/11/bits/alloc_traits.h **** 	static _GLIBCXX20_CONSTEXPR void
 511:/usr/include/c++/11/bits/alloc_traits.h **** 	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 512:/usr/include/c++/11/bits/alloc_traits.h **** 		  _Args&&... __args)
 513:/usr/include/c++/11/bits/alloc_traits.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 514:/usr/include/c++/11/bits/alloc_traits.h **** 	{
 515:/usr/include/c++/11/bits/alloc_traits.h **** #if __cplusplus <= 201703L
 516:/usr/include/c++/11/bits/alloc_traits.h **** 	  __a.construct(__p, std::forward<_Args>(__args)...);
 517:/usr/include/c++/11/bits/alloc_traits.h **** #else
 518:/usr/include/c++/11/bits/alloc_traits.h **** 	  std::construct_at(__p, std::forward<_Args>(__args)...);
 519:/usr/include/c++/11/bits/alloc_traits.h **** #endif
 520:/usr/include/c++/11/bits/alloc_traits.h **** 	}
 521:/usr/include/c++/11/bits/alloc_traits.h **** 
 522:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 523:/usr/include/c++/11/bits/alloc_traits.h ****        *  @brief  Destroy an object of type @a _Up
 524:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 525:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __p  Pointer to the object to destroy
 526:/usr/include/c++/11/bits/alloc_traits.h ****        *
 527:/usr/include/c++/11/bits/alloc_traits.h ****        *  Calls @c __a.destroy(__p).
 528:/usr/include/c++/11/bits/alloc_traits.h ****       */
 529:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Up>
 530:/usr/include/c++/11/bits/alloc_traits.h **** 	static _GLIBCXX20_CONSTEXPR void
 531:/usr/include/c++/11/bits/alloc_traits.h **** 	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 532:/usr/include/c++/11/bits/alloc_traits.h **** 	noexcept(is_nothrow_destructible<_Up>::value)
 533:/usr/include/c++/11/bits/alloc_traits.h **** 	{
 534:/usr/include/c++/11/bits/alloc_traits.h **** #if __cplusplus <= 201703L
 535:/usr/include/c++/11/bits/alloc_traits.h **** 	  __a.destroy(__p);
 536:/usr/include/c++/11/bits/alloc_traits.h **** #else
 537:/usr/include/c++/11/bits/alloc_traits.h **** 	  std::destroy_at(__p);
 538:/usr/include/c++/11/bits/alloc_traits.h **** #endif
 539:/usr/include/c++/11/bits/alloc_traits.h **** 	}
 540:/usr/include/c++/11/bits/alloc_traits.h **** 
 541:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 542:/usr/include/c++/11/bits/alloc_traits.h ****        *  @brief  The maximum supported allocation size
 543:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 544:/usr/include/c++/11/bits/alloc_traits.h ****        *  @return @c __a.max_size()
 545:/usr/include/c++/11/bits/alloc_traits.h ****       */
 546:/usr/include/c++/11/bits/alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR size_type
 547:/usr/include/c++/11/bits/alloc_traits.h ****       max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 548:/usr/include/c++/11/bits/alloc_traits.h ****       {
 549:/usr/include/c++/11/bits/alloc_traits.h **** #if __cplusplus <= 201703L
 550:/usr/include/c++/11/bits/alloc_traits.h **** 	return __a.max_size();
 551:/usr/include/c++/11/bits/alloc_traits.h **** #else
 552:/usr/include/c++/11/bits/alloc_traits.h **** 	return size_t(-1) / sizeof(value_type);
 553:/usr/include/c++/11/bits/alloc_traits.h **** #endif
 554:/usr/include/c++/11/bits/alloc_traits.h ****       }
 555:/usr/include/c++/11/bits/alloc_traits.h **** 
 556:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 557:/usr/include/c++/11/bits/alloc_traits.h ****        *  @brief  Obtain an allocator to use when copying a container.
 558:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __rhs  An allocator.
 559:/usr/include/c++/11/bits/alloc_traits.h ****        *  @return @c __rhs
 560:/usr/include/c++/11/bits/alloc_traits.h ****       */
 561:/usr/include/c++/11/bits/alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR allocator_type
 562:/usr/include/c++/11/bits/alloc_traits.h ****       select_on_container_copy_construction(const allocator_type& __rhs)
 563:/usr/include/c++/11/bits/alloc_traits.h ****       { return __rhs; }
 564:/usr/include/c++/11/bits/alloc_traits.h ****     };
 565:/usr/include/c++/11/bits/alloc_traits.h **** 
 566:/usr/include/c++/11/bits/alloc_traits.h ****   /// Explicit specialization for std::allocator<void>.
 567:/usr/include/c++/11/bits/alloc_traits.h ****   template<>
 568:/usr/include/c++/11/bits/alloc_traits.h ****     struct allocator_traits<allocator<void>>
 569:/usr/include/c++/11/bits/alloc_traits.h ****     {
 570:/usr/include/c++/11/bits/alloc_traits.h ****       /// The allocator type
 571:/usr/include/c++/11/bits/alloc_traits.h ****       using allocator_type = allocator<void>;
 572:/usr/include/c++/11/bits/alloc_traits.h **** 
 573:/usr/include/c++/11/bits/alloc_traits.h ****       /// The allocated type
 574:/usr/include/c++/11/bits/alloc_traits.h ****       using value_type = void;
 575:/usr/include/c++/11/bits/alloc_traits.h **** 
 576:/usr/include/c++/11/bits/alloc_traits.h ****       /// The allocator's pointer type.
 577:/usr/include/c++/11/bits/alloc_traits.h ****       using pointer = void*;
 578:/usr/include/c++/11/bits/alloc_traits.h **** 
 579:/usr/include/c++/11/bits/alloc_traits.h ****       /// The allocator's const pointer type.
 580:/usr/include/c++/11/bits/alloc_traits.h ****       using const_pointer = const void*;
 581:/usr/include/c++/11/bits/alloc_traits.h **** 
 582:/usr/include/c++/11/bits/alloc_traits.h ****       /// The allocator's void pointer type.
 583:/usr/include/c++/11/bits/alloc_traits.h ****       using void_pointer = void*;
 584:/usr/include/c++/11/bits/alloc_traits.h **** 
 585:/usr/include/c++/11/bits/alloc_traits.h ****       /// The allocator's const void pointer type.
 586:/usr/include/c++/11/bits/alloc_traits.h ****       using const_void_pointer = const void*;
 587:/usr/include/c++/11/bits/alloc_traits.h **** 
 588:/usr/include/c++/11/bits/alloc_traits.h ****       /// The allocator's difference type
 589:/usr/include/c++/11/bits/alloc_traits.h ****       using difference_type = std::ptrdiff_t;
 590:/usr/include/c++/11/bits/alloc_traits.h **** 
 591:/usr/include/c++/11/bits/alloc_traits.h ****       /// The allocator's size type
 592:/usr/include/c++/11/bits/alloc_traits.h ****       using size_type = std::size_t;
 593:/usr/include/c++/11/bits/alloc_traits.h **** 
 594:/usr/include/c++/11/bits/alloc_traits.h ****       /// How the allocator is propagated on copy assignment
 595:/usr/include/c++/11/bits/alloc_traits.h ****       using propagate_on_container_copy_assignment = false_type;
 596:/usr/include/c++/11/bits/alloc_traits.h **** 
 597:/usr/include/c++/11/bits/alloc_traits.h ****       /// How the allocator is propagated on move assignment
 598:/usr/include/c++/11/bits/alloc_traits.h ****       using propagate_on_container_move_assignment = true_type;
 599:/usr/include/c++/11/bits/alloc_traits.h **** 
 600:/usr/include/c++/11/bits/alloc_traits.h ****       /// How the allocator is propagated on swap
 601:/usr/include/c++/11/bits/alloc_traits.h ****       using propagate_on_container_swap = false_type;
 602:/usr/include/c++/11/bits/alloc_traits.h **** 
 603:/usr/include/c++/11/bits/alloc_traits.h ****       /// Whether all instances of the allocator type compare equal.
 604:/usr/include/c++/11/bits/alloc_traits.h ****       using is_always_equal = true_type;
 605:/usr/include/c++/11/bits/alloc_traits.h **** 
 606:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Up>
 607:/usr/include/c++/11/bits/alloc_traits.h **** 	using rebind_alloc = allocator<_Up>;
 608:/usr/include/c++/11/bits/alloc_traits.h **** 
 609:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Up>
 610:/usr/include/c++/11/bits/alloc_traits.h **** 	using rebind_traits = allocator_traits<allocator<_Up>>;
 611:/usr/include/c++/11/bits/alloc_traits.h **** 
 612:/usr/include/c++/11/bits/alloc_traits.h ****       /// allocate is ill-formed for allocator<void>
 613:/usr/include/c++/11/bits/alloc_traits.h ****       static void*
 614:/usr/include/c++/11/bits/alloc_traits.h ****       allocate(allocator_type&, size_type, const void* = nullptr) = delete;
 615:/usr/include/c++/11/bits/alloc_traits.h **** 
 616:/usr/include/c++/11/bits/alloc_traits.h ****       /// deallocate is ill-formed for allocator<void>
 617:/usr/include/c++/11/bits/alloc_traits.h ****       static void
 618:/usr/include/c++/11/bits/alloc_traits.h ****       deallocate(allocator_type&, void*, size_type) = delete;
 619:/usr/include/c++/11/bits/alloc_traits.h **** 
 620:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 621:/usr/include/c++/11/bits/alloc_traits.h ****        *  @brief  Construct an object of type `_Up`
 622:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 623:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __p  Pointer to memory of suitable size and alignment for
 624:/usr/include/c++/11/bits/alloc_traits.h ****        *	       an object of type `_Up`.
 625:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __args Constructor arguments.
 626:/usr/include/c++/11/bits/alloc_traits.h ****        *
 627:/usr/include/c++/11/bits/alloc_traits.h ****        *  Calls `__a.construct(__p, std::forward<_Args>(__args)...)`
 628:/usr/include/c++/11/bits/alloc_traits.h ****        *  in C++11, C++14 and C++17. Changed in C++20 to call
 629:/usr/include/c++/11/bits/alloc_traits.h ****        *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
 630:/usr/include/c++/11/bits/alloc_traits.h ****       */
 631:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Up, typename... _Args>
 632:/usr/include/c++/11/bits/alloc_traits.h **** 	static _GLIBCXX20_CONSTEXPR void
 633:/usr/include/c++/11/bits/alloc_traits.h **** 	construct(allocator_type&, _Up* __p, _Args&&... __args)
 634:/usr/include/c++/11/bits/alloc_traits.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 635:/usr/include/c++/11/bits/alloc_traits.h **** 	{ std::_Construct(__p, std::forward<_Args>(__args)...); }
 636:/usr/include/c++/11/bits/alloc_traits.h **** 
 637:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 638:/usr/include/c++/11/bits/alloc_traits.h ****        *  @brief  Destroy an object of type `_Up`
 639:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 640:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __p  Pointer to the object to destroy
 641:/usr/include/c++/11/bits/alloc_traits.h ****        *
 642:/usr/include/c++/11/bits/alloc_traits.h ****        *  Invokes the destructor for `*__p`.
 643:/usr/include/c++/11/bits/alloc_traits.h ****       */
 644:/usr/include/c++/11/bits/alloc_traits.h ****       template<typename _Up>
 645:/usr/include/c++/11/bits/alloc_traits.h **** 	static _GLIBCXX20_CONSTEXPR void
 646:/usr/include/c++/11/bits/alloc_traits.h **** 	destroy(allocator_type&, _Up* __p)
 647:/usr/include/c++/11/bits/alloc_traits.h **** 	noexcept(is_nothrow_destructible<_Up>::value)
 648:/usr/include/c++/11/bits/alloc_traits.h **** 	{ std::_Destroy(__p); }
 649:/usr/include/c++/11/bits/alloc_traits.h **** 
 650:/usr/include/c++/11/bits/alloc_traits.h ****       /// max_size is ill-formed for allocator<void>
 651:/usr/include/c++/11/bits/alloc_traits.h ****       static size_type
 652:/usr/include/c++/11/bits/alloc_traits.h ****       max_size(const allocator_type&) = delete;
 653:/usr/include/c++/11/bits/alloc_traits.h **** 
 654:/usr/include/c++/11/bits/alloc_traits.h ****       /**
 655:/usr/include/c++/11/bits/alloc_traits.h ****        *  @brief  Obtain an allocator to use when copying a container.
 656:/usr/include/c++/11/bits/alloc_traits.h ****        *  @param  __rhs  An allocator.
 657:/usr/include/c++/11/bits/alloc_traits.h ****        *  @return `__rhs`
 658:/usr/include/c++/11/bits/alloc_traits.h ****       */
 659:/usr/include/c++/11/bits/alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR allocator_type
 660:/usr/include/c++/11/bits/alloc_traits.h ****       select_on_container_copy_construction(const allocator_type& __rhs)
 661:/usr/include/c++/11/bits/alloc_traits.h ****       { return __rhs; }
 662:/usr/include/c++/11/bits/alloc_traits.h ****     };
 663:/usr/include/c++/11/bits/alloc_traits.h **** 
 664:/usr/include/c++/11/bits/alloc_traits.h **** #if __cplusplus < 201703L
 665:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc>
 666:/usr/include/c++/11/bits/alloc_traits.h ****     inline void
 667:/usr/include/c++/11/bits/alloc_traits.h ****     __do_alloc_on_copy(_Alloc& __one, const _Alloc& __two, true_type)
 668:/usr/include/c++/11/bits/alloc_traits.h ****     { __one = __two; }
 669:/usr/include/c++/11/bits/alloc_traits.h **** 
 670:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc>
 671:/usr/include/c++/11/bits/alloc_traits.h ****     inline void
 672:/usr/include/c++/11/bits/alloc_traits.h ****     __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
 673:/usr/include/c++/11/bits/alloc_traits.h ****     { }
 674:/usr/include/c++/11/bits/alloc_traits.h **** #endif
 675:/usr/include/c++/11/bits/alloc_traits.h **** 
 676:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc>
 677:/usr/include/c++/11/bits/alloc_traits.h ****     _GLIBCXX14_CONSTEXPR inline void
 678:/usr/include/c++/11/bits/alloc_traits.h ****     __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
 679:/usr/include/c++/11/bits/alloc_traits.h ****     {
 680:/usr/include/c++/11/bits/alloc_traits.h ****       typedef allocator_traits<_Alloc> __traits;
 681:/usr/include/c++/11/bits/alloc_traits.h ****       typedef typename __traits::propagate_on_container_copy_assignment __pocca;
 682:/usr/include/c++/11/bits/alloc_traits.h **** #if __cplusplus >= 201703L
 683:/usr/include/c++/11/bits/alloc_traits.h ****       if constexpr (__pocca::value)
 684:/usr/include/c++/11/bits/alloc_traits.h **** 	__one = __two;
 685:/usr/include/c++/11/bits/alloc_traits.h **** #else
 686:/usr/include/c++/11/bits/alloc_traits.h ****       __do_alloc_on_copy(__one, __two, __pocca());
 687:/usr/include/c++/11/bits/alloc_traits.h **** #endif
 688:/usr/include/c++/11/bits/alloc_traits.h ****     }
 689:/usr/include/c++/11/bits/alloc_traits.h **** 
 690:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc>
 691:/usr/include/c++/11/bits/alloc_traits.h ****     constexpr _Alloc
 692:/usr/include/c++/11/bits/alloc_traits.h ****     __alloc_on_copy(const _Alloc& __a)
 693:/usr/include/c++/11/bits/alloc_traits.h ****     {
 694:/usr/include/c++/11/bits/alloc_traits.h ****       typedef allocator_traits<_Alloc> __traits;
 695:/usr/include/c++/11/bits/alloc_traits.h ****       return __traits::select_on_container_copy_construction(__a);
 696:/usr/include/c++/11/bits/alloc_traits.h ****     }
 697:/usr/include/c++/11/bits/alloc_traits.h **** 
 698:/usr/include/c++/11/bits/alloc_traits.h **** #if __cplusplus < 201703L
 699:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc>
 700:/usr/include/c++/11/bits/alloc_traits.h ****     inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 701:/usr/include/c++/11/bits/alloc_traits.h ****     { __one = std::move(__two); }
 702:/usr/include/c++/11/bits/alloc_traits.h **** 
 703:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc>
 704:/usr/include/c++/11/bits/alloc_traits.h ****     inline void __do_alloc_on_move(_Alloc&, _Alloc&, false_type)
 705:/usr/include/c++/11/bits/alloc_traits.h ****     { }
 706:/usr/include/c++/11/bits/alloc_traits.h **** #endif
 707:/usr/include/c++/11/bits/alloc_traits.h **** 
 708:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc>
 709:/usr/include/c++/11/bits/alloc_traits.h ****     _GLIBCXX14_CONSTEXPR inline void
 710:/usr/include/c++/11/bits/alloc_traits.h ****     __alloc_on_move(_Alloc& __one, _Alloc& __two)
 711:/usr/include/c++/11/bits/alloc_traits.h ****     {
 712:/usr/include/c++/11/bits/alloc_traits.h ****       typedef allocator_traits<_Alloc> __traits;
 713:/usr/include/c++/11/bits/alloc_traits.h ****       typedef typename __traits::propagate_on_container_move_assignment __pocma;
 714:/usr/include/c++/11/bits/alloc_traits.h **** #if __cplusplus >= 201703L
 715:/usr/include/c++/11/bits/alloc_traits.h ****       if constexpr (__pocma::value)
 716:/usr/include/c++/11/bits/alloc_traits.h **** 	__one = std::move(__two);
 717:/usr/include/c++/11/bits/alloc_traits.h **** #else
 718:/usr/include/c++/11/bits/alloc_traits.h ****       __do_alloc_on_move(__one, __two, __pocma());
 719:/usr/include/c++/11/bits/alloc_traits.h **** #endif
 720:/usr/include/c++/11/bits/alloc_traits.h ****     }
 721:/usr/include/c++/11/bits/alloc_traits.h **** 
 722:/usr/include/c++/11/bits/alloc_traits.h **** #if __cplusplus < 201703L
 723:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc>
 724:/usr/include/c++/11/bits/alloc_traits.h ****     inline void __do_alloc_on_swap(_Alloc& __one, _Alloc& __two, true_type)
 725:/usr/include/c++/11/bits/alloc_traits.h ****     {
 726:/usr/include/c++/11/bits/alloc_traits.h ****       using std::swap;
 727:/usr/include/c++/11/bits/alloc_traits.h ****       swap(__one, __two);
 728:/usr/include/c++/11/bits/alloc_traits.h ****     }
 729:/usr/include/c++/11/bits/alloc_traits.h **** 
 730:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc>
 731:/usr/include/c++/11/bits/alloc_traits.h ****     inline void __do_alloc_on_swap(_Alloc&, _Alloc&, false_type)
 732:/usr/include/c++/11/bits/alloc_traits.h ****     { }
 733:/usr/include/c++/11/bits/alloc_traits.h **** #endif
 734:/usr/include/c++/11/bits/alloc_traits.h **** 
 735:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc>
 736:/usr/include/c++/11/bits/alloc_traits.h ****     _GLIBCXX14_CONSTEXPR inline void
 737:/usr/include/c++/11/bits/alloc_traits.h ****     __alloc_on_swap(_Alloc& __one, _Alloc& __two)
 738:/usr/include/c++/11/bits/alloc_traits.h ****     {
 739:/usr/include/c++/11/bits/alloc_traits.h ****       typedef allocator_traits<_Alloc> __traits;
 740:/usr/include/c++/11/bits/alloc_traits.h ****       typedef typename __traits::propagate_on_container_swap __pocs;
 741:/usr/include/c++/11/bits/alloc_traits.h **** #if __cplusplus >= 201703L
 742:/usr/include/c++/11/bits/alloc_traits.h ****       if constexpr (__pocs::value)
 743:/usr/include/c++/11/bits/alloc_traits.h **** 	{
 744:/usr/include/c++/11/bits/alloc_traits.h **** 	  using std::swap;
 745:/usr/include/c++/11/bits/alloc_traits.h **** 	  swap(__one, __two);
 746:/usr/include/c++/11/bits/alloc_traits.h **** 	}
 747:/usr/include/c++/11/bits/alloc_traits.h **** #else
 748:/usr/include/c++/11/bits/alloc_traits.h ****       __do_alloc_on_swap(__one, __two, __pocs());
 749:/usr/include/c++/11/bits/alloc_traits.h **** #endif
 750:/usr/include/c++/11/bits/alloc_traits.h ****     }
 751:/usr/include/c++/11/bits/alloc_traits.h **** 
 752:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc, typename _Tp,
 753:/usr/include/c++/11/bits/alloc_traits.h **** 	   typename _ValueT = __remove_cvref_t<typename _Alloc::value_type>,
 754:/usr/include/c++/11/bits/alloc_traits.h **** 	   typename = void>
 755:/usr/include/c++/11/bits/alloc_traits.h ****     struct __is_alloc_insertable_impl
 756:/usr/include/c++/11/bits/alloc_traits.h ****     : false_type
 757:/usr/include/c++/11/bits/alloc_traits.h ****     { };
 758:/usr/include/c++/11/bits/alloc_traits.h **** 
 759:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc, typename _Tp, typename _ValueT>
 760:/usr/include/c++/11/bits/alloc_traits.h ****     struct __is_alloc_insertable_impl<_Alloc, _Tp, _ValueT,
 761:/usr/include/c++/11/bits/alloc_traits.h ****       __void_t<decltype(allocator_traits<_Alloc>::construct(
 762:/usr/include/c++/11/bits/alloc_traits.h **** 		   std::declval<_Alloc&>(), std::declval<_ValueT*>(),
 763:/usr/include/c++/11/bits/alloc_traits.h **** 		   std::declval<_Tp>()))>>
 764:/usr/include/c++/11/bits/alloc_traits.h ****     : true_type
 765:/usr/include/c++/11/bits/alloc_traits.h ****     { };
 766:/usr/include/c++/11/bits/alloc_traits.h **** 
 767:/usr/include/c++/11/bits/alloc_traits.h ****   // true if _Alloc::value_type is CopyInsertable into containers using _Alloc
 768:/usr/include/c++/11/bits/alloc_traits.h ****   // (might be wrong if _Alloc::construct exists but is not constrained,
 769:/usr/include/c++/11/bits/alloc_traits.h ****   // i.e. actually trying to use it would still be invalid. Use with caution.)
 770:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc>
 771:/usr/include/c++/11/bits/alloc_traits.h ****     struct __is_copy_insertable
 772:/usr/include/c++/11/bits/alloc_traits.h ****     : __is_alloc_insertable_impl<_Alloc,
 773:/usr/include/c++/11/bits/alloc_traits.h **** 				 typename _Alloc::value_type const&>::type
 774:/usr/include/c++/11/bits/alloc_traits.h ****     { };
 775:/usr/include/c++/11/bits/alloc_traits.h **** 
 776:/usr/include/c++/11/bits/alloc_traits.h ****   // std::allocator<_Tp> just requires CopyConstructible
 777:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Tp>
 778:/usr/include/c++/11/bits/alloc_traits.h ****     struct __is_copy_insertable<allocator<_Tp>>
 779:/usr/include/c++/11/bits/alloc_traits.h ****     : is_copy_constructible<_Tp>
 780:/usr/include/c++/11/bits/alloc_traits.h ****     { };
 781:/usr/include/c++/11/bits/alloc_traits.h **** 
 782:/usr/include/c++/11/bits/alloc_traits.h ****   // true if _Alloc::value_type is MoveInsertable into containers using _Alloc
 783:/usr/include/c++/11/bits/alloc_traits.h ****   // (might be wrong if _Alloc::construct exists but is not constrained,
 784:/usr/include/c++/11/bits/alloc_traits.h ****   // i.e. actually trying to use it would still be invalid. Use with caution.)
 785:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc>
 786:/usr/include/c++/11/bits/alloc_traits.h ****     struct __is_move_insertable
 787:/usr/include/c++/11/bits/alloc_traits.h ****     : __is_alloc_insertable_impl<_Alloc, typename _Alloc::value_type>::type
 788:/usr/include/c++/11/bits/alloc_traits.h ****     { };
 789:/usr/include/c++/11/bits/alloc_traits.h **** 
 790:/usr/include/c++/11/bits/alloc_traits.h ****   // std::allocator<_Tp> just requires MoveConstructible
 791:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Tp>
 792:/usr/include/c++/11/bits/alloc_traits.h ****     struct __is_move_insertable<allocator<_Tp>>
 793:/usr/include/c++/11/bits/alloc_traits.h ****     : is_move_constructible<_Tp>
 794:/usr/include/c++/11/bits/alloc_traits.h ****     { };
 795:/usr/include/c++/11/bits/alloc_traits.h **** 
 796:/usr/include/c++/11/bits/alloc_traits.h ****   // Trait to detect Allocator-like types.
 797:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc, typename = void>
 798:/usr/include/c++/11/bits/alloc_traits.h ****     struct __is_allocator : false_type { };
 799:/usr/include/c++/11/bits/alloc_traits.h **** 
 800:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc>
 801:/usr/include/c++/11/bits/alloc_traits.h ****     struct __is_allocator<_Alloc,
 802:/usr/include/c++/11/bits/alloc_traits.h ****       __void_t<typename _Alloc::value_type,
 803:/usr/include/c++/11/bits/alloc_traits.h **** 	       decltype(std::declval<_Alloc&>().allocate(size_t{}))>>
 804:/usr/include/c++/11/bits/alloc_traits.h ****     : true_type { };
 805:/usr/include/c++/11/bits/alloc_traits.h **** 
 806:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc>
 807:/usr/include/c++/11/bits/alloc_traits.h ****     using _RequireAllocator
 808:/usr/include/c++/11/bits/alloc_traits.h ****       = typename enable_if<__is_allocator<_Alloc>::value, _Alloc>::type;
 809:/usr/include/c++/11/bits/alloc_traits.h **** 
 810:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc>
 811:/usr/include/c++/11/bits/alloc_traits.h ****     using _RequireNotAllocator
 812:/usr/include/c++/11/bits/alloc_traits.h ****       = typename enable_if<!__is_allocator<_Alloc>::value, _Alloc>::type;
 813:/usr/include/c++/11/bits/alloc_traits.h **** 
 814:/usr/include/c++/11/bits/alloc_traits.h **** #if __cpp_concepts >= 201907L
 815:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _Alloc>
 816:/usr/include/c++/11/bits/alloc_traits.h ****     concept __allocator_like = requires (_Alloc& __a) {
 817:/usr/include/c++/11/bits/alloc_traits.h ****       typename _Alloc::value_type;
 818:/usr/include/c++/11/bits/alloc_traits.h ****       __a.deallocate(__a.allocate(1u), 1u);
 819:/usr/include/c++/11/bits/alloc_traits.h ****     };
 820:/usr/include/c++/11/bits/alloc_traits.h **** #endif
 821:/usr/include/c++/11/bits/alloc_traits.h **** #endif // C++11
 822:/usr/include/c++/11/bits/alloc_traits.h **** 
 823:/usr/include/c++/11/bits/alloc_traits.h ****   /**
 824:/usr/include/c++/11/bits/alloc_traits.h ****    * Destroy a range of objects using the supplied allocator.  For
 825:/usr/include/c++/11/bits/alloc_traits.h ****    * non-default allocators we do not optimize away invocation of
 826:/usr/include/c++/11/bits/alloc_traits.h ****    * destroy() even if _Tp has a trivial destructor.
 827:/usr/include/c++/11/bits/alloc_traits.h ****    */
 828:/usr/include/c++/11/bits/alloc_traits.h **** 
 829:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _ForwardIterator, typename _Allocator>
 830:/usr/include/c++/11/bits/alloc_traits.h ****     void
 831:/usr/include/c++/11/bits/alloc_traits.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 832:/usr/include/c++/11/bits/alloc_traits.h **** 	     _Allocator& __alloc)
 833:/usr/include/c++/11/bits/alloc_traits.h ****     {
 834:/usr/include/c++/11/bits/alloc_traits.h ****       for (; __first != __last; ++__first)
 835:/usr/include/c++/11/bits/alloc_traits.h **** #if __cplusplus < 201103L
 836:/usr/include/c++/11/bits/alloc_traits.h **** 	__alloc.destroy(std::__addressof(*__first));
 837:/usr/include/c++/11/bits/alloc_traits.h **** #else
 838:/usr/include/c++/11/bits/alloc_traits.h **** 	allocator_traits<_Allocator>::destroy(__alloc,
 839:/usr/include/c++/11/bits/alloc_traits.h **** 					      std::__addressof(*__first));
 840:/usr/include/c++/11/bits/alloc_traits.h **** #endif
 841:/usr/include/c++/11/bits/alloc_traits.h ****     }
 842:/usr/include/c++/11/bits/alloc_traits.h **** 
 843:/usr/include/c++/11/bits/alloc_traits.h ****   template<typename _ForwardIterator, typename _Tp>
 844:/usr/include/c++/11/bits/alloc_traits.h ****     inline void
 845:/usr/include/c++/11/bits/alloc_traits.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 2334              		.loc 6 845 5
 2335              		.cfi_startproc
 2336 0000 F30F1EFA 		endbr64
 2337 0004 55       		pushq	%rbp
 2338              		.cfi_def_cfa_offset 16
 2339              		.cfi_offset 6, -16
 2340 0005 4889E5   		movq	%rsp, %rbp
 2341              		.cfi_def_cfa_register 6
 2342 0008 4883EC20 		subq	$32, %rsp
 2343 000c 48897DF8 		movq	%rdi, -8(%rbp)
 2344 0010 488975F0 		movq	%rsi, -16(%rbp)
 2345 0014 488955E8 		movq	%rdx, -24(%rbp)
 846:/usr/include/c++/11/bits/alloc_traits.h **** 	     allocator<_Tp>&)
 847:/usr/include/c++/11/bits/alloc_traits.h ****     {
 848:/usr/include/c++/11/bits/alloc_traits.h ****       _Destroy(__first, __last);
 2346              		.loc 6 848 15
 2347 0018 488B55F0 		movq	-16(%rbp), %rdx
 2348 001c 488B45F8 		movq	-8(%rbp), %rax
 2349 0020 4889D6   		movq	%rdx, %rsi
 2350 0023 4889C7   		movq	%rax, %rdi
 2351 0026 E8000000 		call	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultEEvT_S3_@PLT
 2351      00
 849:/usr/include/c++/11/bits/alloc_traits.h ****     }
 2352              		.loc 6 849 5
 2353 002b 90       		nop
 2354 002c C9       		leave
 2355              		.cfi_def_cfa 7, 8
 2356 002d C3       		ret
 2357              		.cfi_endproc
 2358              	.LFE1517:
 2360              		.section	.text._ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS
 2361              		.align 2
 2362              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC2ER
 2364              	_ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC2ERKS4_:
 2365              	.LFB1519:
1010:/usr/include/c++/11/bits/stl_iterator.h ****       : _M_current(__i) { }
 2366              		.loc 5 1010 7
 2367              		.cfi_startproc
 2368 0000 F30F1EFA 		endbr64
 2369 0004 55       		pushq	%rbp
 2370              		.cfi_def_cfa_offset 16
 2371              		.cfi_offset 6, -16
 2372 0005 4889E5   		movq	%rsp, %rbp
 2373              		.cfi_def_cfa_register 6
 2374 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2375 000c 488975F0 		movq	%rsi, -16(%rbp)
 2376              	.LBB21:
1011:/usr/include/c++/11/bits/stl_iterator.h **** 
 2377              		.loc 5 1011 9
 2378 0010 488B45F0 		movq	-16(%rbp), %rax
 2379 0014 488B10   		movq	(%rax), %rdx
 2380 0017 488B45F8 		movq	-8(%rbp), %rax
 2381 001b 488910   		movq	%rdx, (%rax)
 2382              	.LBE21:
1011:/usr/include/c++/11/bits/stl_iterator.h **** 
 2383              		.loc 5 1011 27
 2384 001e 90       		nop
 2385 001f 5D       		popq	%rbp
 2386              		.cfi_def_cfa 7, 8
 2387 0020 C3       		ret
 2388              		.cfi_endproc
 2389              	.LFE1519:
 2391              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC1ER
 2392              		.set	_ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC1ERK
 2393              		.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaI
 2394              		.align 2
 2395              		.weak	_ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4ba
 2397              	_ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4baseEv:
 2398              	.LFB1521:
1088:/usr/include/c++/11/bits/stl_iterator.h ****       { return _M_current; }
 2399              		.loc 5 1088 7
 2400              		.cfi_startproc
 2401 0000 F30F1EFA 		endbr64
 2402 0004 55       		pushq	%rbp
 2403              		.cfi_def_cfa_offset 16
 2404              		.cfi_offset 6, -16
 2405 0005 4889E5   		movq	%rsp, %rbp
 2406              		.cfi_def_cfa_register 6
 2407 0008 48897DF8 		movq	%rdi, -8(%rbp)
1089:/usr/include/c++/11/bits/stl_iterator.h ****     };
 2408              		.loc 5 1089 16
 2409 000c 488B45F8 		movq	-8(%rbp), %rax
1089:/usr/include/c++/11/bits/stl_iterator.h ****     };
 2410              		.loc 5 1089 28
 2411 0010 5D       		popq	%rbp
 2412              		.cfi_def_cfa 7, 8
 2413 0011 C3       		ret
 2414              		.cfi_endproc
 2415              	.LFE1521:
 2417              		.section	.text._ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_tra
 2418              		.align 2
 2419              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaI
 2421              	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt
 2422              	.LFB1523:
1010:/usr/include/c++/11/bits/stl_iterator.h ****       : _M_current(__i) { }
 2423              		.loc 5 1010 7
 2424              		.cfi_startproc
 2425 0000 F30F1EFA 		endbr64
 2426 0004 55       		pushq	%rbp
 2427              		.cfi_def_cfa_offset 16
 2428              		.cfi_offset 6, -16
 2429 0005 4889E5   		movq	%rsp, %rbp
 2430              		.cfi_def_cfa_register 6
 2431 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2432 000c 488975F0 		movq	%rsi, -16(%rbp)
 2433              	.LBB22:
1011:/usr/include/c++/11/bits/stl_iterator.h **** 
 2434              		.loc 5 1011 9
 2435 0010 488B45F0 		movq	-16(%rbp), %rax
 2436 0014 488B10   		movq	(%rax), %rdx
 2437 0017 488B45F8 		movq	-8(%rbp), %rax
 2438 001b 488910   		movq	%rdx, (%rax)
 2439              	.LBE22:
1011:/usr/include/c++/11/bits/stl_iterator.h **** 
 2440              		.loc 5 1011 27
 2441 001e 90       		nop
 2442 001f 5D       		popq	%rbp
 2443              		.cfi_def_cfa 7, 8
 2444 0020 C3       		ret
 2445              		.cfi_endproc
 2446              	.LFE1523:
 2448              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaI
 2449              		.set	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIc
 2450              		.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_tr
 2451              		.align 2
 2452              		.weak	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESa
 2454              	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES
 2455              	.LFB1525:
1088:/usr/include/c++/11/bits/stl_iterator.h ****       { return _M_current; }
 2456              		.loc 5 1088 7
 2457              		.cfi_startproc
 2458 0000 F30F1EFA 		endbr64
 2459 0004 55       		pushq	%rbp
 2460              		.cfi_def_cfa_offset 16
 2461              		.cfi_offset 6, -16
 2462 0005 4889E5   		movq	%rsp, %rbp
 2463              		.cfi_def_cfa_register 6
 2464 0008 48897DF8 		movq	%rdi, -8(%rbp)
1089:/usr/include/c++/11/bits/stl_iterator.h ****     };
 2465              		.loc 5 1089 16
 2466 000c 488B45F8 		movq	-8(%rbp), %rax
1089:/usr/include/c++/11/bits/stl_iterator.h ****     };
 2467              		.loc 5 1089 28
 2468 0010 5D       		popq	%rbp
 2469              		.cfi_def_cfa 7, 8
 2470 0011 C3       		ret
 2471              		.cfi_endproc
 2472              	.LFE1525:
 2474              		.section	.text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implC2Ev,"axG"
 2475              		.align 2
 2476              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implC2Ev
 2478              	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implC2Ev:
 2479              	.LFB1556:
 131:/usr/include/c++/11/bits/stl_vector.h **** 	    is_nothrow_default_constructible<_Tp_alloc_type>::value)
 2480              		.loc 4 131 2
 2481              		.cfi_startproc
 2482 0000 F30F1EFA 		endbr64
 2483 0004 55       		pushq	%rbp
 2484              		.cfi_def_cfa_offset 16
 2485              		.cfi_offset 6, -16
 2486 0005 4889E5   		movq	%rsp, %rbp
 2487              		.cfi_def_cfa_register 6
 2488 0008 4883EC10 		subq	$16, %rsp
 2489 000c 48897DF8 		movq	%rdi, -8(%rbp)
 2490              	.LBB23:
 133:/usr/include/c++/11/bits/stl_vector.h **** 	{ }
 2491              		.loc 4 133 19
 2492 0010 488B45F8 		movq	-8(%rbp), %rax
 2493 0014 4889C7   		movq	%rax, %rdi
 2494 0017 E8000000 		call	_ZNSaIN8UnitTest18DeferredTestResultEEC2Ev@PLT
 2494      00
 2495 001c 488B45F8 		movq	-8(%rbp), %rax
 2496 0020 4889C7   		movq	%rax, %rdi
 2497 0023 E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE17_Vector_impl_dataC2Ev@PLT
 2497      00
 2498              	.LBE23:
 134:/usr/include/c++/11/bits/stl_vector.h **** 
 2499              		.loc 4 134 4
 2500 0028 90       		nop
 2501 0029 C9       		leave
 2502              		.cfi_def_cfa 7, 8
 2503 002a C3       		ret
 2504              		.cfi_endproc
 2505              	.LFE1556:
 2507              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implC1Ev
 2508              		.set	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implC1Ev,_ZNSt12_Vector_
 2509              		.section	.text._ZNSaIN8UnitTest18DeferredTestResultEED2Ev,"axG",@progbits,_ZNSaIN8UnitTest18Deferr
 2510              		.align 2
 2511              		.weak	_ZNSaIN8UnitTest18DeferredTestResultEED2Ev
 2513              	_ZNSaIN8UnitTest18DeferredTestResultEED2Ev:
 2514              	.LFB1559:
 2515              		.file 7 "/usr/include/c++/11/bits/allocator.h"
   1:/usr/include/c++/11/bits/allocator.h **** // Allocators -*- C++ -*-
   2:/usr/include/c++/11/bits/allocator.h **** 
   3:/usr/include/c++/11/bits/allocator.h **** // Copyright (C) 2001-2021 Free Software Foundation, Inc.
   4:/usr/include/c++/11/bits/allocator.h **** //
   5:/usr/include/c++/11/bits/allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/11/bits/allocator.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/11/bits/allocator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/11/bits/allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/11/bits/allocator.h **** // any later version.
  10:/usr/include/c++/11/bits/allocator.h **** 
  11:/usr/include/c++/11/bits/allocator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/11/bits/allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/11/bits/allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/11/bits/allocator.h **** // GNU General Public License for more details.
  15:/usr/include/c++/11/bits/allocator.h **** 
  16:/usr/include/c++/11/bits/allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/11/bits/allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/11/bits/allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/11/bits/allocator.h **** 
  20:/usr/include/c++/11/bits/allocator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/11/bits/allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/11/bits/allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/11/bits/allocator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/11/bits/allocator.h **** 
  25:/usr/include/c++/11/bits/allocator.h **** /*
  26:/usr/include/c++/11/bits/allocator.h ****  * Copyright (c) 1996-1997
  27:/usr/include/c++/11/bits/allocator.h ****  * Silicon Graphics Computer Systems, Inc.
  28:/usr/include/c++/11/bits/allocator.h ****  *
  29:/usr/include/c++/11/bits/allocator.h ****  * Permission to use, copy, modify, distribute and sell this software
  30:/usr/include/c++/11/bits/allocator.h ****  * and its documentation for any purpose is hereby granted without fee,
  31:/usr/include/c++/11/bits/allocator.h ****  * provided that the above copyright notice appear in all copies and
  32:/usr/include/c++/11/bits/allocator.h ****  * that both that copyright notice and this permission notice appear
  33:/usr/include/c++/11/bits/allocator.h ****  * in supporting documentation.  Silicon Graphics makes no
  34:/usr/include/c++/11/bits/allocator.h ****  * representations about the suitability of this software for any
  35:/usr/include/c++/11/bits/allocator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  36:/usr/include/c++/11/bits/allocator.h ****  */
  37:/usr/include/c++/11/bits/allocator.h **** 
  38:/usr/include/c++/11/bits/allocator.h **** /** @file bits/allocator.h
  39:/usr/include/c++/11/bits/allocator.h ****  *  This is an internal header file, included by other library headers.
  40:/usr/include/c++/11/bits/allocator.h ****  *  Do not attempt to use it directly. @headername{memory}
  41:/usr/include/c++/11/bits/allocator.h ****  */
  42:/usr/include/c++/11/bits/allocator.h **** 
  43:/usr/include/c++/11/bits/allocator.h **** #ifndef _ALLOCATOR_H
  44:/usr/include/c++/11/bits/allocator.h **** #define _ALLOCATOR_H 1
  45:/usr/include/c++/11/bits/allocator.h **** 
  46:/usr/include/c++/11/bits/allocator.h **** #include <bits/c++allocator.h> // Define the base class to std::allocator.
  47:/usr/include/c++/11/bits/allocator.h **** #include <bits/memoryfwd.h>
  48:/usr/include/c++/11/bits/allocator.h **** #if __cplusplus >= 201103L
  49:/usr/include/c++/11/bits/allocator.h **** #include <type_traits>
  50:/usr/include/c++/11/bits/allocator.h **** #endif
  51:/usr/include/c++/11/bits/allocator.h **** 
  52:/usr/include/c++/11/bits/allocator.h **** #define __cpp_lib_incomplete_container_elements 201505
  53:/usr/include/c++/11/bits/allocator.h **** 
  54:/usr/include/c++/11/bits/allocator.h **** namespace std _GLIBCXX_VISIBILITY(default)
  55:/usr/include/c++/11/bits/allocator.h **** {
  56:/usr/include/c++/11/bits/allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  57:/usr/include/c++/11/bits/allocator.h **** 
  58:/usr/include/c++/11/bits/allocator.h ****   /**
  59:/usr/include/c++/11/bits/allocator.h ****    *  @addtogroup allocators
  60:/usr/include/c++/11/bits/allocator.h ****    *  @{
  61:/usr/include/c++/11/bits/allocator.h ****    */
  62:/usr/include/c++/11/bits/allocator.h **** 
  63:/usr/include/c++/11/bits/allocator.h ****   // Since C++20 the primary template should be used for allocator<void>,
  64:/usr/include/c++/11/bits/allocator.h ****   // but then it would have a non-trivial default ctor and dtor for C++20,
  65:/usr/include/c++/11/bits/allocator.h ****   // but trivial for C++98-17, which would be an ABI incompatibiliy between
  66:/usr/include/c++/11/bits/allocator.h ****   // different standard dialects. So C++20 still uses the allocator<void>
  67:/usr/include/c++/11/bits/allocator.h ****   // explicit specialization, with the historical ABI properties, but with
  68:/usr/include/c++/11/bits/allocator.h ****   // the same members that are present in the primary template.
  69:/usr/include/c++/11/bits/allocator.h **** 
  70:/usr/include/c++/11/bits/allocator.h ****   /// allocator<void> specialization.
  71:/usr/include/c++/11/bits/allocator.h ****   template<>
  72:/usr/include/c++/11/bits/allocator.h ****     class allocator<void>
  73:/usr/include/c++/11/bits/allocator.h ****     {
  74:/usr/include/c++/11/bits/allocator.h ****     public:
  75:/usr/include/c++/11/bits/allocator.h ****       typedef void        value_type;
  76:/usr/include/c++/11/bits/allocator.h ****       typedef size_t      size_type;
  77:/usr/include/c++/11/bits/allocator.h ****       typedef ptrdiff_t   difference_type;
  78:/usr/include/c++/11/bits/allocator.h **** 
  79:/usr/include/c++/11/bits/allocator.h **** #if __cplusplus <= 201703L
  80:/usr/include/c++/11/bits/allocator.h ****       // These were removed for C++20, allocator_traits does the right thing.
  81:/usr/include/c++/11/bits/allocator.h ****       typedef void*       pointer;
  82:/usr/include/c++/11/bits/allocator.h ****       typedef const void* const_pointer;
  83:/usr/include/c++/11/bits/allocator.h **** 
  84:/usr/include/c++/11/bits/allocator.h ****       template<typename _Tp1>
  85:/usr/include/c++/11/bits/allocator.h **** 	struct rebind
  86:/usr/include/c++/11/bits/allocator.h **** 	{ typedef allocator<_Tp1> other; };
  87:/usr/include/c++/11/bits/allocator.h **** #endif
  88:/usr/include/c++/11/bits/allocator.h **** 
  89:/usr/include/c++/11/bits/allocator.h **** #if __cplusplus >= 201103L
  90:/usr/include/c++/11/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  91:/usr/include/c++/11/bits/allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
  92:/usr/include/c++/11/bits/allocator.h ****       using propagate_on_container_move_assignment = true_type;
  93:/usr/include/c++/11/bits/allocator.h **** 
  94:/usr/include/c++/11/bits/allocator.h ****       using is_always_equal
  95:/usr/include/c++/11/bits/allocator.h **** 	_GLIBCXX20_DEPRECATED_SUGGEST("std::allocator_traits::is_always_equal")
  96:/usr/include/c++/11/bits/allocator.h **** 	= true_type;
  97:/usr/include/c++/11/bits/allocator.h **** 
  98:/usr/include/c++/11/bits/allocator.h **** #if __cplusplus >= 202002L
  99:/usr/include/c++/11/bits/allocator.h ****       // As noted above, these members are present for C++20 to provide the
 100:/usr/include/c++/11/bits/allocator.h ****       // same API as the primary template, but still trivial as in pre-C++20.
 101:/usr/include/c++/11/bits/allocator.h ****       allocator() = default;
 102:/usr/include/c++/11/bits/allocator.h ****       ~allocator() = default;
 103:/usr/include/c++/11/bits/allocator.h **** 
 104:/usr/include/c++/11/bits/allocator.h ****       template<typename _Up>
 105:/usr/include/c++/11/bits/allocator.h **** 	constexpr
 106:/usr/include/c++/11/bits/allocator.h **** 	allocator(const allocator<_Up>&) noexcept { }
 107:/usr/include/c++/11/bits/allocator.h **** 
 108:/usr/include/c++/11/bits/allocator.h ****       // No allocate member because it's ill-formed by LWG 3307.
 109:/usr/include/c++/11/bits/allocator.h ****       // No deallocate member because it would be undefined to call it
 110:/usr/include/c++/11/bits/allocator.h ****       // with any pointer which wasn't obtained from allocate.
 111:/usr/include/c++/11/bits/allocator.h **** #endif // C++20
 112:/usr/include/c++/11/bits/allocator.h **** #endif // C++11
 113:/usr/include/c++/11/bits/allocator.h ****     };
 114:/usr/include/c++/11/bits/allocator.h **** 
 115:/usr/include/c++/11/bits/allocator.h ****   /**
 116:/usr/include/c++/11/bits/allocator.h ****    * @brief  The @a standard allocator, as per C++03 [20.4.1].
 117:/usr/include/c++/11/bits/allocator.h ****    *
 118:/usr/include/c++/11/bits/allocator.h ****    *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/memory.html#std.util.memory.allocator
 119:/usr/include/c++/11/bits/allocator.h ****    *  for further details.
 120:/usr/include/c++/11/bits/allocator.h ****    *
 121:/usr/include/c++/11/bits/allocator.h ****    *  @tparam  _Tp  Type of allocated object.
 122:/usr/include/c++/11/bits/allocator.h ****    */
 123:/usr/include/c++/11/bits/allocator.h ****   template<typename _Tp>
 124:/usr/include/c++/11/bits/allocator.h ****     class allocator : public __allocator_base<_Tp>
 125:/usr/include/c++/11/bits/allocator.h ****     {
 126:/usr/include/c++/11/bits/allocator.h ****     public:
 127:/usr/include/c++/11/bits/allocator.h ****       typedef _Tp        value_type;
 128:/usr/include/c++/11/bits/allocator.h ****       typedef size_t     size_type;
 129:/usr/include/c++/11/bits/allocator.h ****       typedef ptrdiff_t  difference_type;
 130:/usr/include/c++/11/bits/allocator.h **** 
 131:/usr/include/c++/11/bits/allocator.h **** #if __cplusplus <= 201703L
 132:/usr/include/c++/11/bits/allocator.h ****       // These were removed for C++20.
 133:/usr/include/c++/11/bits/allocator.h ****       typedef _Tp*       pointer;
 134:/usr/include/c++/11/bits/allocator.h ****       typedef const _Tp* const_pointer;
 135:/usr/include/c++/11/bits/allocator.h ****       typedef _Tp&       reference;
 136:/usr/include/c++/11/bits/allocator.h ****       typedef const _Tp& const_reference;
 137:/usr/include/c++/11/bits/allocator.h **** 
 138:/usr/include/c++/11/bits/allocator.h ****       template<typename _Tp1>
 139:/usr/include/c++/11/bits/allocator.h **** 	struct rebind
 140:/usr/include/c++/11/bits/allocator.h **** 	{ typedef allocator<_Tp1> other; };
 141:/usr/include/c++/11/bits/allocator.h **** #endif
 142:/usr/include/c++/11/bits/allocator.h **** 
 143:/usr/include/c++/11/bits/allocator.h **** #if __cplusplus >= 201103L
 144:/usr/include/c++/11/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 145:/usr/include/c++/11/bits/allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
 146:/usr/include/c++/11/bits/allocator.h ****       using propagate_on_container_move_assignment = true_type;
 147:/usr/include/c++/11/bits/allocator.h **** 
 148:/usr/include/c++/11/bits/allocator.h ****       using is_always_equal
 149:/usr/include/c++/11/bits/allocator.h **** 	_GLIBCXX20_DEPRECATED_SUGGEST("std::allocator_traits::is_always_equal")
 150:/usr/include/c++/11/bits/allocator.h **** 	= true_type;
 151:/usr/include/c++/11/bits/allocator.h **** #endif
 152:/usr/include/c++/11/bits/allocator.h **** 
 153:/usr/include/c++/11/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 154:/usr/include/c++/11/bits/allocator.h ****       // 3035. std::allocator's constructors should be constexpr
 155:/usr/include/c++/11/bits/allocator.h ****       _GLIBCXX20_CONSTEXPR
 156:/usr/include/c++/11/bits/allocator.h ****       allocator() _GLIBCXX_NOTHROW { }
 157:/usr/include/c++/11/bits/allocator.h **** 
 158:/usr/include/c++/11/bits/allocator.h ****       _GLIBCXX20_CONSTEXPR
 159:/usr/include/c++/11/bits/allocator.h ****       allocator(const allocator& __a) _GLIBCXX_NOTHROW
 160:/usr/include/c++/11/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 161:/usr/include/c++/11/bits/allocator.h **** 
 162:/usr/include/c++/11/bits/allocator.h **** #if __cplusplus >= 201103L
 163:/usr/include/c++/11/bits/allocator.h ****       // Avoid implicit deprecation.
 164:/usr/include/c++/11/bits/allocator.h ****       allocator& operator=(const allocator&) = default;
 165:/usr/include/c++/11/bits/allocator.h **** #endif
 166:/usr/include/c++/11/bits/allocator.h **** 
 167:/usr/include/c++/11/bits/allocator.h ****       template<typename _Tp1>
 168:/usr/include/c++/11/bits/allocator.h **** 	_GLIBCXX20_CONSTEXPR
 169:/usr/include/c++/11/bits/allocator.h **** 	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 170:/usr/include/c++/11/bits/allocator.h **** 
 171:/usr/include/c++/11/bits/allocator.h **** #if __cpp_constexpr_dynamic_alloc
 172:/usr/include/c++/11/bits/allocator.h ****       constexpr
 173:/usr/include/c++/11/bits/allocator.h **** #endif
 174:/usr/include/c++/11/bits/allocator.h ****       ~allocator() _GLIBCXX_NOTHROW { }
 2516              		.loc 7 174 7
 2517              		.cfi_startproc
 2518 0000 F30F1EFA 		endbr64
 2519 0004 55       		pushq	%rbp
 2520              		.cfi_def_cfa_offset 16
 2521              		.cfi_offset 6, -16
 2522 0005 4889E5   		movq	%rsp, %rbp
 2523              		.cfi_def_cfa_register 6
 2524 0008 4883EC10 		subq	$16, %rsp
 2525 000c 48897DF8 		movq	%rdi, -8(%rbp)
 2526              	.LBB24:
 2527              		.loc 7 174 39
 2528 0010 488B45F8 		movq	-8(%rbp), %rax
 2529 0014 4889C7   		movq	%rax, %rdi
 2530 0017 E8000000 		call	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED2Ev@PLT
 2530      00
 2531              	.LBE24:
 2532 001c 90       		nop
 2533 001d C9       		leave
 2534              		.cfi_def_cfa 7, 8
 2535 001e C3       		ret
 2536              		.cfi_endproc
 2537              	.LFE1559:
 2539              		.weak	_ZNSaIN8UnitTest18DeferredTestResultEED1Ev
 2540              		.set	_ZNSaIN8UnitTest18DeferredTestResultEED1Ev,_ZNSaIN8UnitTest18DeferredTestResultEED2Ev
 2541              		.section	.text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE13_M_deallocateEPS1_m,"a
 2542              		.align 2
 2543              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE13_M_deallocateEPS1_m
 2545              	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE13_M_deallocateEPS1_m:
 2546              	.LFB1561:
 350:/usr/include/c++/11/bits/stl_vector.h ****       {
 2547              		.loc 4 350 7
 2548              		.cfi_startproc
 2549 0000 F30F1EFA 		endbr64
 2550 0004 55       		pushq	%rbp
 2551              		.cfi_def_cfa_offset 16
 2552              		.cfi_offset 6, -16
 2553 0005 4889E5   		movq	%rsp, %rbp
 2554              		.cfi_def_cfa_register 6
 2555 0008 4883EC20 		subq	$32, %rsp
 2556 000c 48897DF8 		movq	%rdi, -8(%rbp)
 2557 0010 488975F0 		movq	%rsi, -16(%rbp)
 2558 0014 488955E8 		movq	%rdx, -24(%rbp)
 353:/usr/include/c++/11/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 2559              		.loc 4 353 2
 2560 0018 48837DF0 		cmpq	$0, -16(%rbp)
 2560      00
 2561 001d 7417     		je	.L128
 354:/usr/include/c++/11/bits/stl_vector.h ****       }
 2562              		.loc 4 354 20
 2563 001f 488B45F8 		movq	-8(%rbp), %rax
 354:/usr/include/c++/11/bits/stl_vector.h ****       }
 2564              		.loc 4 354 19
 2565 0023 488B55E8 		movq	-24(%rbp), %rdx
 2566 0027 488B4DF0 		movq	-16(%rbp), %rcx
 2567 002b 4889CE   		movq	%rcx, %rsi
 2568 002e 4889C7   		movq	%rax, %rdi
 2569 0031 E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEES2_E10deallocateERS3_PS2_m@P
 2569      00
 2570              	.L128:
 355:/usr/include/c++/11/bits/stl_vector.h **** 
 2571              		.loc 4 355 7
 2572 0036 90       		nop
 2573 0037 C9       		leave
 2574              		.cfi_def_cfa 7, 8
 2575 0038 C3       		ret
 2576              		.cfi_endproc
 2577              	.LFE1561:
 2579              		.section	.text._ZSt8_DestroyIPN8UnitTest18DeferredTestResultEEvT_S3_,"axG",@progbits,_ZSt8_Destroy
 2580              		.weak	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultEEvT_S3_
 2582              	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultEEvT_S3_:
 2583              	.LFB1562:
 2584              		.file 8 "/usr/include/c++/11/bits/stl_construct.h"
   1:/usr/include/c++/11/bits/stl_construct.h **** // nonstandard construct and destroy functions -*- C++ -*-
   2:/usr/include/c++/11/bits/stl_construct.h **** 
   3:/usr/include/c++/11/bits/stl_construct.h **** // Copyright (C) 2001-2021 Free Software Foundation, Inc.
   4:/usr/include/c++/11/bits/stl_construct.h **** //
   5:/usr/include/c++/11/bits/stl_construct.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/11/bits/stl_construct.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/11/bits/stl_construct.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/11/bits/stl_construct.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/11/bits/stl_construct.h **** // any later version.
  10:/usr/include/c++/11/bits/stl_construct.h **** 
  11:/usr/include/c++/11/bits/stl_construct.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/11/bits/stl_construct.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/11/bits/stl_construct.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/11/bits/stl_construct.h **** // GNU General Public License for more details.
  15:/usr/include/c++/11/bits/stl_construct.h **** 
  16:/usr/include/c++/11/bits/stl_construct.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/11/bits/stl_construct.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/11/bits/stl_construct.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/11/bits/stl_construct.h **** 
  20:/usr/include/c++/11/bits/stl_construct.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/11/bits/stl_construct.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/11/bits/stl_construct.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/11/bits/stl_construct.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/11/bits/stl_construct.h **** 
  25:/usr/include/c++/11/bits/stl_construct.h **** /*
  26:/usr/include/c++/11/bits/stl_construct.h ****  *
  27:/usr/include/c++/11/bits/stl_construct.h ****  * Copyright (c) 1994
  28:/usr/include/c++/11/bits/stl_construct.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/11/bits/stl_construct.h ****  *
  30:/usr/include/c++/11/bits/stl_construct.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/11/bits/stl_construct.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/11/bits/stl_construct.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/11/bits/stl_construct.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/11/bits/stl_construct.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/11/bits/stl_construct.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/11/bits/stl_construct.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/11/bits/stl_construct.h ****  *
  38:/usr/include/c++/11/bits/stl_construct.h ****  *
  39:/usr/include/c++/11/bits/stl_construct.h ****  * Copyright (c) 1996,1997
  40:/usr/include/c++/11/bits/stl_construct.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/11/bits/stl_construct.h ****  *
  42:/usr/include/c++/11/bits/stl_construct.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/11/bits/stl_construct.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/11/bits/stl_construct.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/11/bits/stl_construct.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/11/bits/stl_construct.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/11/bits/stl_construct.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/11/bits/stl_construct.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/11/bits/stl_construct.h ****  */
  50:/usr/include/c++/11/bits/stl_construct.h **** 
  51:/usr/include/c++/11/bits/stl_construct.h **** /** @file bits/stl_construct.h
  52:/usr/include/c++/11/bits/stl_construct.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/11/bits/stl_construct.h ****  *  Do not attempt to use it directly. @headername{memory}
  54:/usr/include/c++/11/bits/stl_construct.h ****  */
  55:/usr/include/c++/11/bits/stl_construct.h **** 
  56:/usr/include/c++/11/bits/stl_construct.h **** #ifndef _STL_CONSTRUCT_H
  57:/usr/include/c++/11/bits/stl_construct.h **** #define _STL_CONSTRUCT_H 1
  58:/usr/include/c++/11/bits/stl_construct.h **** 
  59:/usr/include/c++/11/bits/stl_construct.h **** #include <new>
  60:/usr/include/c++/11/bits/stl_construct.h **** #include <bits/move.h>
  61:/usr/include/c++/11/bits/stl_construct.h **** #include <bits/stl_iterator_base_types.h> // for iterator_traits
  62:/usr/include/c++/11/bits/stl_construct.h **** #include <bits/stl_iterator_base_funcs.h> // for advance
  63:/usr/include/c++/11/bits/stl_construct.h **** 
  64:/usr/include/c++/11/bits/stl_construct.h **** /* This file provides the C++17 functions std::destroy_at, std::destroy, and
  65:/usr/include/c++/11/bits/stl_construct.h ****  * std::destroy_n, and the C++20 function std::construct_at.
  66:/usr/include/c++/11/bits/stl_construct.h ****  * It also provides std::_Construct, std::_Destroy,and std::_Destroy_n functions
  67:/usr/include/c++/11/bits/stl_construct.h ****  * which are defined in all standard modes and so can be used in C++98-14 code.
  68:/usr/include/c++/11/bits/stl_construct.h ****  * The _Destroy functions will dispatch to destroy_at during constant
  69:/usr/include/c++/11/bits/stl_construct.h ****  * evaluation, because calls to that function are intercepted by the compiler
  70:/usr/include/c++/11/bits/stl_construct.h ****  * to allow use in constant expressions.
  71:/usr/include/c++/11/bits/stl_construct.h ****  */
  72:/usr/include/c++/11/bits/stl_construct.h **** 
  73:/usr/include/c++/11/bits/stl_construct.h **** namespace std _GLIBCXX_VISIBILITY(default)
  74:/usr/include/c++/11/bits/stl_construct.h **** {
  75:/usr/include/c++/11/bits/stl_construct.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  76:/usr/include/c++/11/bits/stl_construct.h **** 
  77:/usr/include/c++/11/bits/stl_construct.h **** #if __cplusplus >= 201703L
  78:/usr/include/c++/11/bits/stl_construct.h ****   template <typename _Tp>
  79:/usr/include/c++/11/bits/stl_construct.h ****     _GLIBCXX20_CONSTEXPR inline void
  80:/usr/include/c++/11/bits/stl_construct.h ****     destroy_at(_Tp* __location)
  81:/usr/include/c++/11/bits/stl_construct.h ****     {
  82:/usr/include/c++/11/bits/stl_construct.h ****       if constexpr (__cplusplus > 201703L && is_array_v<_Tp>)
  83:/usr/include/c++/11/bits/stl_construct.h **** 	{
  84:/usr/include/c++/11/bits/stl_construct.h **** 	  for (auto& __x : *__location)
  85:/usr/include/c++/11/bits/stl_construct.h **** 	    std::destroy_at(std::__addressof(__x));
  86:/usr/include/c++/11/bits/stl_construct.h **** 	}
  87:/usr/include/c++/11/bits/stl_construct.h ****       else
  88:/usr/include/c++/11/bits/stl_construct.h **** 	__location->~_Tp();
  89:/usr/include/c++/11/bits/stl_construct.h ****     }
  90:/usr/include/c++/11/bits/stl_construct.h **** 
  91:/usr/include/c++/11/bits/stl_construct.h **** #if __cplusplus >= 202002L
  92:/usr/include/c++/11/bits/stl_construct.h ****   template<typename _Tp, typename... _Args>
  93:/usr/include/c++/11/bits/stl_construct.h ****     constexpr auto
  94:/usr/include/c++/11/bits/stl_construct.h ****     construct_at(_Tp* __location, _Args&&... __args)
  95:/usr/include/c++/11/bits/stl_construct.h ****     noexcept(noexcept(::new((void*)0) _Tp(std::declval<_Args>()...)))
  96:/usr/include/c++/11/bits/stl_construct.h ****     -> decltype(::new((void*)0) _Tp(std::declval<_Args>()...))
  97:/usr/include/c++/11/bits/stl_construct.h ****     { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
  98:/usr/include/c++/11/bits/stl_construct.h **** #endif // C++20
  99:/usr/include/c++/11/bits/stl_construct.h **** #endif// C++17
 100:/usr/include/c++/11/bits/stl_construct.h **** 
 101:/usr/include/c++/11/bits/stl_construct.h ****   /**
 102:/usr/include/c++/11/bits/stl_construct.h ****    * Constructs an object in existing memory by invoking an allocated
 103:/usr/include/c++/11/bits/stl_construct.h ****    * object's constructor with an initializer.
 104:/usr/include/c++/11/bits/stl_construct.h ****    */
 105:/usr/include/c++/11/bits/stl_construct.h **** #if __cplusplus >= 201103L
 106:/usr/include/c++/11/bits/stl_construct.h ****   template<typename _Tp, typename... _Args>
 107:/usr/include/c++/11/bits/stl_construct.h ****     _GLIBCXX20_CONSTEXPR
 108:/usr/include/c++/11/bits/stl_construct.h ****     inline void
 109:/usr/include/c++/11/bits/stl_construct.h ****     _Construct(_Tp* __p, _Args&&... __args)
 110:/usr/include/c++/11/bits/stl_construct.h ****     {
 111:/usr/include/c++/11/bits/stl_construct.h **** #if __cplusplus >= 202002L && __has_builtin(__builtin_is_constant_evaluated)
 112:/usr/include/c++/11/bits/stl_construct.h ****       if (__builtin_is_constant_evaluated())
 113:/usr/include/c++/11/bits/stl_construct.h **** 	{
 114:/usr/include/c++/11/bits/stl_construct.h **** 	  // Allow std::_Construct to be used in constant expressions.
 115:/usr/include/c++/11/bits/stl_construct.h **** 	  std::construct_at(__p, std::forward<_Args>(__args)...);
 116:/usr/include/c++/11/bits/stl_construct.h **** 	  return;
 117:/usr/include/c++/11/bits/stl_construct.h **** 	}
 118:/usr/include/c++/11/bits/stl_construct.h **** #endif
 119:/usr/include/c++/11/bits/stl_construct.h ****       ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...);
 120:/usr/include/c++/11/bits/stl_construct.h ****     }
 121:/usr/include/c++/11/bits/stl_construct.h **** #else
 122:/usr/include/c++/11/bits/stl_construct.h ****   template<typename _T1, typename _T2>
 123:/usr/include/c++/11/bits/stl_construct.h ****     inline void
 124:/usr/include/c++/11/bits/stl_construct.h ****     _Construct(_T1* __p, const _T2& __value)
 125:/usr/include/c++/11/bits/stl_construct.h ****     {
 126:/usr/include/c++/11/bits/stl_construct.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 127:/usr/include/c++/11/bits/stl_construct.h ****       // 402. wrong new expression in [some_]allocator::construct
 128:/usr/include/c++/11/bits/stl_construct.h ****       ::new(static_cast<void*>(__p)) _T1(__value);
 129:/usr/include/c++/11/bits/stl_construct.h ****     }
 130:/usr/include/c++/11/bits/stl_construct.h **** #endif
 131:/usr/include/c++/11/bits/stl_construct.h **** 
 132:/usr/include/c++/11/bits/stl_construct.h ****   template<typename _T1>
 133:/usr/include/c++/11/bits/stl_construct.h ****     inline void
 134:/usr/include/c++/11/bits/stl_construct.h ****     _Construct_novalue(_T1* __p)
 135:/usr/include/c++/11/bits/stl_construct.h ****     { ::new(static_cast<void*>(__p)) _T1; }
 136:/usr/include/c++/11/bits/stl_construct.h **** 
 137:/usr/include/c++/11/bits/stl_construct.h ****   template<typename _ForwardIterator>
 138:/usr/include/c++/11/bits/stl_construct.h ****     _GLIBCXX20_CONSTEXPR void
 139:/usr/include/c++/11/bits/stl_construct.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last);
 140:/usr/include/c++/11/bits/stl_construct.h **** 
 141:/usr/include/c++/11/bits/stl_construct.h ****   /**
 142:/usr/include/c++/11/bits/stl_construct.h ****    * Destroy the object pointed to by a pointer type.
 143:/usr/include/c++/11/bits/stl_construct.h ****    */
 144:/usr/include/c++/11/bits/stl_construct.h ****   template<typename _Tp>
 145:/usr/include/c++/11/bits/stl_construct.h ****     _GLIBCXX14_CONSTEXPR inline void
 146:/usr/include/c++/11/bits/stl_construct.h ****     _Destroy(_Tp* __pointer)
 147:/usr/include/c++/11/bits/stl_construct.h ****     {
 148:/usr/include/c++/11/bits/stl_construct.h **** #if __cplusplus > 201703L
 149:/usr/include/c++/11/bits/stl_construct.h ****       std::destroy_at(__pointer);
 150:/usr/include/c++/11/bits/stl_construct.h **** #else
 151:/usr/include/c++/11/bits/stl_construct.h ****       __pointer->~_Tp();
 152:/usr/include/c++/11/bits/stl_construct.h **** #endif
 153:/usr/include/c++/11/bits/stl_construct.h ****     }
 154:/usr/include/c++/11/bits/stl_construct.h **** 
 155:/usr/include/c++/11/bits/stl_construct.h ****   template<bool>
 156:/usr/include/c++/11/bits/stl_construct.h ****     struct _Destroy_aux
 157:/usr/include/c++/11/bits/stl_construct.h ****     {
 158:/usr/include/c++/11/bits/stl_construct.h ****       template<typename _ForwardIterator>
 159:/usr/include/c++/11/bits/stl_construct.h **** 	static _GLIBCXX20_CONSTEXPR void
 160:/usr/include/c++/11/bits/stl_construct.h **** 	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 161:/usr/include/c++/11/bits/stl_construct.h **** 	{
 162:/usr/include/c++/11/bits/stl_construct.h **** 	  for (; __first != __last; ++__first)
 163:/usr/include/c++/11/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 164:/usr/include/c++/11/bits/stl_construct.h **** 	}
 165:/usr/include/c++/11/bits/stl_construct.h ****     };
 166:/usr/include/c++/11/bits/stl_construct.h **** 
 167:/usr/include/c++/11/bits/stl_construct.h ****   template<>
 168:/usr/include/c++/11/bits/stl_construct.h ****     struct _Destroy_aux<true>
 169:/usr/include/c++/11/bits/stl_construct.h ****     {
 170:/usr/include/c++/11/bits/stl_construct.h ****       template<typename _ForwardIterator>
 171:/usr/include/c++/11/bits/stl_construct.h ****         static void
 172:/usr/include/c++/11/bits/stl_construct.h ****         __destroy(_ForwardIterator, _ForwardIterator) { }
 173:/usr/include/c++/11/bits/stl_construct.h ****     };
 174:/usr/include/c++/11/bits/stl_construct.h **** 
 175:/usr/include/c++/11/bits/stl_construct.h ****   /**
 176:/usr/include/c++/11/bits/stl_construct.h ****    * Destroy a range of objects.  If the value_type of the object has
 177:/usr/include/c++/11/bits/stl_construct.h ****    * a trivial destructor, the compiler should optimize all of this
 178:/usr/include/c++/11/bits/stl_construct.h ****    * away, otherwise the objects' destructors must be invoked.
 179:/usr/include/c++/11/bits/stl_construct.h ****    */
 180:/usr/include/c++/11/bits/stl_construct.h ****   template<typename _ForwardIterator>
 181:/usr/include/c++/11/bits/stl_construct.h ****     _GLIBCXX20_CONSTEXPR inline void
 182:/usr/include/c++/11/bits/stl_construct.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 2585              		.loc 8 182 5
 2586              		.cfi_startproc
 2587 0000 F30F1EFA 		endbr64
 2588 0004 55       		pushq	%rbp
 2589              		.cfi_def_cfa_offset 16
 2590              		.cfi_offset 6, -16
 2591 0005 4889E5   		movq	%rsp, %rbp
 2592              		.cfi_def_cfa_register 6
 2593 0008 4883EC10 		subq	$16, %rsp
 2594 000c 48897DF8 		movq	%rdi, -8(%rbp)
 2595 0010 488975F0 		movq	%rsi, -16(%rbp)
 183:/usr/include/c++/11/bits/stl_construct.h ****     {
 184:/usr/include/c++/11/bits/stl_construct.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 185:/usr/include/c++/11/bits/stl_construct.h ****                        _Value_type;
 186:/usr/include/c++/11/bits/stl_construct.h **** #if __cplusplus >= 201103L
 187:/usr/include/c++/11/bits/stl_construct.h ****       // A deleted destructor is trivial, this ensures we reject such types:
 188:/usr/include/c++/11/bits/stl_construct.h ****       static_assert(is_destructible<_Value_type>::value,
 189:/usr/include/c++/11/bits/stl_construct.h **** 		    "value type is destructible");
 190:/usr/include/c++/11/bits/stl_construct.h **** #endif
 191:/usr/include/c++/11/bits/stl_construct.h **** #if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
 192:/usr/include/c++/11/bits/stl_construct.h ****       if (std::is_constant_evaluated())
 193:/usr/include/c++/11/bits/stl_construct.h **** 	return _Destroy_aux<false>::__destroy(__first, __last);
 194:/usr/include/c++/11/bits/stl_construct.h **** #endif
 195:/usr/include/c++/11/bits/stl_construct.h ****       std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
 196:/usr/include/c++/11/bits/stl_construct.h **** 	__destroy(__first, __last);
 2596              		.loc 8 196 11
 2597 0014 488B55F0 		movq	-16(%rbp), %rdx
 2598 0018 488B45F8 		movq	-8(%rbp), %rax
 2599 001c 4889D6   		movq	%rdx, %rsi
 2600 001f 4889C7   		movq	%rax, %rdi
 2601 0022 E8000000 		call	_ZNSt12_Destroy_auxILb0EE9__destroyIPN8UnitTest18DeferredTestResultEEEvT_S5_@PLT
 2601      00
 197:/usr/include/c++/11/bits/stl_construct.h ****     }
 2602              		.loc 8 197 5
 2603 0027 90       		nop
 2604 0028 C9       		leave
 2605              		.cfi_def_cfa 7, 8
 2606 0029 C3       		ret
 2607              		.cfi_endproc
 2608              	.LFE1562:
 2610              		.section	.text._ZNSaIN8UnitTest18DeferredTestResultEEC2Ev,"axG",@progbits,_ZNSaIN8UnitTest18Deferr
 2611              		.align 2
 2612              		.weak	_ZNSaIN8UnitTest18DeferredTestResultEEC2Ev
 2614              	_ZNSaIN8UnitTest18DeferredTestResultEEC2Ev:
 2615              	.LFB1581:
 156:/usr/include/c++/11/bits/allocator.h **** 
 2616              		.loc 7 156 7
 2617              		.cfi_startproc
 2618 0000 F30F1EFA 		endbr64
 2619 0004 55       		pushq	%rbp
 2620              		.cfi_def_cfa_offset 16
 2621              		.cfi_offset 6, -16
 2622 0005 4889E5   		movq	%rsp, %rbp
 2623              		.cfi_def_cfa_register 6
 2624 0008 4883EC10 		subq	$16, %rsp
 2625 000c 48897DF8 		movq	%rdi, -8(%rbp)
 2626              	.LBB25:
 156:/usr/include/c++/11/bits/allocator.h **** 
 2627              		.loc 7 156 36
 2628 0010 488B45F8 		movq	-8(%rbp), %rax
 2629 0014 4889C7   		movq	%rax, %rdi
 2630 0017 E8000000 		call	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEEC2Ev@PLT
 2630      00
 2631              	.LBE25:
 156:/usr/include/c++/11/bits/allocator.h **** 
 2632              		.loc 7 156 38
 2633 001c 90       		nop
 2634 001d C9       		leave
 2635              		.cfi_def_cfa 7, 8
 2636 001e C3       		ret
 2637              		.cfi_endproc
 2638              	.LFE1581:
 2640              		.weak	_ZNSaIN8UnitTest18DeferredTestResultEEC1Ev
 2641              		.set	_ZNSaIN8UnitTest18DeferredTestResultEEC1Ev,_ZNSaIN8UnitTest18DeferredTestResultEEC2Ev
 2642              		.section	.text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE17_Vector_impl_dataC2Ev,
 2643              		.align 2
 2644              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE17_Vector_impl_dataC2Ev
 2646              	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE17_Vector_impl_dataC2Ev:
 2647              	.LFB1584:
  97:/usr/include/c++/11/bits/stl_vector.h **** 	: _M_start(), _M_finish(), _M_end_of_storage()
 2648              		.loc 4 97 2
 2649              		.cfi_startproc
 2650 0000 F30F1EFA 		endbr64
 2651 0004 55       		pushq	%rbp
 2652              		.cfi_def_cfa_offset 16
 2653              		.cfi_offset 6, -16
 2654 0005 4889E5   		movq	%rsp, %rbp
 2655              		.cfi_def_cfa_register 6
 2656 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2657              	.LBB26:
  98:/usr/include/c++/11/bits/stl_vector.h **** 	{ }
 2658              		.loc 4 98 4
 2659 000c 488B45F8 		movq	-8(%rbp), %rax
 2660 0010 48C70000 		movq	$0, (%rax)
 2660      000000
  98:/usr/include/c++/11/bits/stl_vector.h **** 	{ }
 2661              		.loc 4 98 16
 2662 0017 488B45F8 		movq	-8(%rbp), %rax
 2663 001b 48C74008 		movq	$0, 8(%rax)
 2663      00000000 
  98:/usr/include/c++/11/bits/stl_vector.h **** 	{ }
 2664              		.loc 4 98 29
 2665 0023 488B45F8 		movq	-8(%rbp), %rax
 2666 0027 48C74010 		movq	$0, 16(%rax)
 2666      00000000 
 2667              	.LBE26:
  99:/usr/include/c++/11/bits/stl_vector.h **** 
 2668              		.loc 4 99 4
 2669 002f 90       		nop
 2670 0030 5D       		popq	%rbp
 2671              		.cfi_def_cfa 7, 8
 2672 0031 C3       		ret
 2673              		.cfi_endproc
 2674              	.LFE1584:
 2676              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE17_Vector_impl_dataC1Ev
 2677              		.set	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE17_Vector_impl_dataC1Ev,_ZNSt12_Ve
 2678              		.section	.text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED2Ev,"axG",@progbits,_
 2679              		.align 2
 2680              		.weak	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED2Ev
 2682              	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED2Ev:
 2683              	.LFB1587:
 2684              		.file 9 "/usr/include/c++/11/ext/new_allocator.h"
   1:/usr/include/c++/11/ext/new_allocator.h **** // Allocator that wraps operator new -*- C++ -*-
   2:/usr/include/c++/11/ext/new_allocator.h **** 
   3:/usr/include/c++/11/ext/new_allocator.h **** // Copyright (C) 2001-2021 Free Software Foundation, Inc.
   4:/usr/include/c++/11/ext/new_allocator.h **** //
   5:/usr/include/c++/11/ext/new_allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/11/ext/new_allocator.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/11/ext/new_allocator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/11/ext/new_allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/11/ext/new_allocator.h **** // any later version.
  10:/usr/include/c++/11/ext/new_allocator.h **** 
  11:/usr/include/c++/11/ext/new_allocator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/11/ext/new_allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/11/ext/new_allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/11/ext/new_allocator.h **** // GNU General Public License for more details.
  15:/usr/include/c++/11/ext/new_allocator.h **** 
  16:/usr/include/c++/11/ext/new_allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/11/ext/new_allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/11/ext/new_allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/11/ext/new_allocator.h **** 
  20:/usr/include/c++/11/ext/new_allocator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/11/ext/new_allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/11/ext/new_allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/11/ext/new_allocator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/11/ext/new_allocator.h **** 
  25:/usr/include/c++/11/ext/new_allocator.h **** /** @file ext/new_allocator.h
  26:/usr/include/c++/11/ext/new_allocator.h ****  *  This file is a GNU extension to the Standard C++ Library.
  27:/usr/include/c++/11/ext/new_allocator.h ****  */
  28:/usr/include/c++/11/ext/new_allocator.h **** 
  29:/usr/include/c++/11/ext/new_allocator.h **** #ifndef _NEW_ALLOCATOR_H
  30:/usr/include/c++/11/ext/new_allocator.h **** #define _NEW_ALLOCATOR_H 1
  31:/usr/include/c++/11/ext/new_allocator.h **** 
  32:/usr/include/c++/11/ext/new_allocator.h **** #include <bits/c++config.h>
  33:/usr/include/c++/11/ext/new_allocator.h **** #include <new>
  34:/usr/include/c++/11/ext/new_allocator.h **** #include <bits/functexcept.h>
  35:/usr/include/c++/11/ext/new_allocator.h **** #include <bits/move.h>
  36:/usr/include/c++/11/ext/new_allocator.h **** #if __cplusplus >= 201103L
  37:/usr/include/c++/11/ext/new_allocator.h **** #include <type_traits>
  38:/usr/include/c++/11/ext/new_allocator.h **** #endif
  39:/usr/include/c++/11/ext/new_allocator.h **** 
  40:/usr/include/c++/11/ext/new_allocator.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  41:/usr/include/c++/11/ext/new_allocator.h **** {
  42:/usr/include/c++/11/ext/new_allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  43:/usr/include/c++/11/ext/new_allocator.h **** 
  44:/usr/include/c++/11/ext/new_allocator.h ****   /**
  45:/usr/include/c++/11/ext/new_allocator.h ****    *  @brief  An allocator that uses global new, as per C++03 [20.4.1].
  46:/usr/include/c++/11/ext/new_allocator.h ****    *  @ingroup allocators
  47:/usr/include/c++/11/ext/new_allocator.h ****    *
  48:/usr/include/c++/11/ext/new_allocator.h ****    *  This is precisely the allocator defined in the C++ Standard.
  49:/usr/include/c++/11/ext/new_allocator.h ****    *    - all allocation calls operator new
  50:/usr/include/c++/11/ext/new_allocator.h ****    *    - all deallocation calls operator delete
  51:/usr/include/c++/11/ext/new_allocator.h ****    *
  52:/usr/include/c++/11/ext/new_allocator.h ****    *  @tparam  _Tp  Type of allocated object.
  53:/usr/include/c++/11/ext/new_allocator.h ****    */
  54:/usr/include/c++/11/ext/new_allocator.h ****   template<typename _Tp>
  55:/usr/include/c++/11/ext/new_allocator.h ****     class new_allocator
  56:/usr/include/c++/11/ext/new_allocator.h ****     {
  57:/usr/include/c++/11/ext/new_allocator.h ****     public:
  58:/usr/include/c++/11/ext/new_allocator.h ****       typedef _Tp        value_type;
  59:/usr/include/c++/11/ext/new_allocator.h ****       typedef std::size_t     size_type;
  60:/usr/include/c++/11/ext/new_allocator.h ****       typedef std::ptrdiff_t  difference_type;
  61:/usr/include/c++/11/ext/new_allocator.h **** #if __cplusplus <= 201703L
  62:/usr/include/c++/11/ext/new_allocator.h ****       typedef _Tp*       pointer;
  63:/usr/include/c++/11/ext/new_allocator.h ****       typedef const _Tp* const_pointer;
  64:/usr/include/c++/11/ext/new_allocator.h ****       typedef _Tp&       reference;
  65:/usr/include/c++/11/ext/new_allocator.h ****       typedef const _Tp& const_reference;
  66:/usr/include/c++/11/ext/new_allocator.h **** 
  67:/usr/include/c++/11/ext/new_allocator.h ****       template<typename _Tp1>
  68:/usr/include/c++/11/ext/new_allocator.h **** 	struct rebind
  69:/usr/include/c++/11/ext/new_allocator.h **** 	{ typedef new_allocator<_Tp1> other; };
  70:/usr/include/c++/11/ext/new_allocator.h **** #endif
  71:/usr/include/c++/11/ext/new_allocator.h **** 
  72:/usr/include/c++/11/ext/new_allocator.h **** #if __cplusplus >= 201103L
  73:/usr/include/c++/11/ext/new_allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  74:/usr/include/c++/11/ext/new_allocator.h ****       // 2103. propagate_on_container_move_assignment
  75:/usr/include/c++/11/ext/new_allocator.h ****       typedef std::true_type propagate_on_container_move_assignment;
  76:/usr/include/c++/11/ext/new_allocator.h **** #endif
  77:/usr/include/c++/11/ext/new_allocator.h **** 
  78:/usr/include/c++/11/ext/new_allocator.h ****       _GLIBCXX20_CONSTEXPR
  79:/usr/include/c++/11/ext/new_allocator.h ****       new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  80:/usr/include/c++/11/ext/new_allocator.h **** 
  81:/usr/include/c++/11/ext/new_allocator.h ****       _GLIBCXX20_CONSTEXPR
  82:/usr/include/c++/11/ext/new_allocator.h ****       new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
  83:/usr/include/c++/11/ext/new_allocator.h **** 
  84:/usr/include/c++/11/ext/new_allocator.h ****       template<typename _Tp1>
  85:/usr/include/c++/11/ext/new_allocator.h **** 	_GLIBCXX20_CONSTEXPR
  86:/usr/include/c++/11/ext/new_allocator.h **** 	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
  87:/usr/include/c++/11/ext/new_allocator.h **** 
  88:/usr/include/c++/11/ext/new_allocator.h **** #if __cplusplus <= 201703L
  89:/usr/include/c++/11/ext/new_allocator.h ****       ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 2685              		.loc 9 89 7
 2686              		.cfi_startproc
 2687 0000 F30F1EFA 		endbr64
 2688 0004 55       		pushq	%rbp
 2689              		.cfi_def_cfa_offset 16
 2690              		.cfi_offset 6, -16
 2691 0005 4889E5   		movq	%rsp, %rbp
 2692              		.cfi_def_cfa_register 6
 2693 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2694              		.loc 9 89 48
 2695 000c 90       		nop
 2696 000d 5D       		popq	%rbp
 2697              		.cfi_def_cfa 7, 8
 2698 000e C3       		ret
 2699              		.cfi_endproc
 2700              	.LFE1587:
 2702              		.weak	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED1Ev
 2703              		.set	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED1Ev,_ZN9__gnu_cxx13new_allocato
 2704              		.section	.text._ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEES2_E10deallocateER
 2705              		.weak	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEES2_E10deallocateERS3_PS2_m
 2707              	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEES2_E10deallocateERS3_PS2_m:
 2708              	.LFB1589:
 2709              		.file 10 "/usr/include/c++/11/ext/alloc_traits.h"
   1:/usr/include/c++/11/ext/alloc_traits.h **** // Allocator traits -*- C++ -*-
   2:/usr/include/c++/11/ext/alloc_traits.h **** 
   3:/usr/include/c++/11/ext/alloc_traits.h **** // Copyright (C) 2011-2021 Free Software Foundation, Inc.
   4:/usr/include/c++/11/ext/alloc_traits.h **** //
   5:/usr/include/c++/11/ext/alloc_traits.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/11/ext/alloc_traits.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/11/ext/alloc_traits.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/11/ext/alloc_traits.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/11/ext/alloc_traits.h **** // any later version.
  10:/usr/include/c++/11/ext/alloc_traits.h **** 
  11:/usr/include/c++/11/ext/alloc_traits.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/11/ext/alloc_traits.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/11/ext/alloc_traits.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/11/ext/alloc_traits.h **** // GNU General Public License for more details.
  15:/usr/include/c++/11/ext/alloc_traits.h **** 
  16:/usr/include/c++/11/ext/alloc_traits.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/11/ext/alloc_traits.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/11/ext/alloc_traits.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/11/ext/alloc_traits.h **** 
  20:/usr/include/c++/11/ext/alloc_traits.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/11/ext/alloc_traits.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/11/ext/alloc_traits.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/11/ext/alloc_traits.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/11/ext/alloc_traits.h **** 
  25:/usr/include/c++/11/ext/alloc_traits.h **** /** @file ext/alloc_traits.h
  26:/usr/include/c++/11/ext/alloc_traits.h ****  *  This file is a GNU extension to the Standard C++ Library.
  27:/usr/include/c++/11/ext/alloc_traits.h ****  */
  28:/usr/include/c++/11/ext/alloc_traits.h **** 
  29:/usr/include/c++/11/ext/alloc_traits.h **** #ifndef _EXT_ALLOC_TRAITS_H
  30:/usr/include/c++/11/ext/alloc_traits.h **** #define _EXT_ALLOC_TRAITS_H 1
  31:/usr/include/c++/11/ext/alloc_traits.h **** 
  32:/usr/include/c++/11/ext/alloc_traits.h **** #pragma GCC system_header
  33:/usr/include/c++/11/ext/alloc_traits.h **** 
  34:/usr/include/c++/11/ext/alloc_traits.h **** # include <bits/alloc_traits.h>
  35:/usr/include/c++/11/ext/alloc_traits.h **** #if __cplusplus < 201103L
  36:/usr/include/c++/11/ext/alloc_traits.h **** # include <bits/allocator.h>  // for __alloc_swap
  37:/usr/include/c++/11/ext/alloc_traits.h **** #endif
  38:/usr/include/c++/11/ext/alloc_traits.h **** 
  39:/usr/include/c++/11/ext/alloc_traits.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  40:/usr/include/c++/11/ext/alloc_traits.h **** {
  41:/usr/include/c++/11/ext/alloc_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  42:/usr/include/c++/11/ext/alloc_traits.h **** 
  43:/usr/include/c++/11/ext/alloc_traits.h **** /**
  44:/usr/include/c++/11/ext/alloc_traits.h ****  * @brief  Uniform interface to C++98 and C++11 allocators.
  45:/usr/include/c++/11/ext/alloc_traits.h ****  * @ingroup allocators
  46:/usr/include/c++/11/ext/alloc_traits.h **** */
  47:/usr/include/c++/11/ext/alloc_traits.h **** template<typename _Alloc, typename = typename _Alloc::value_type>
  48:/usr/include/c++/11/ext/alloc_traits.h ****   struct __alloc_traits
  49:/usr/include/c++/11/ext/alloc_traits.h **** #if __cplusplus >= 201103L
  50:/usr/include/c++/11/ext/alloc_traits.h ****   : std::allocator_traits<_Alloc>
  51:/usr/include/c++/11/ext/alloc_traits.h **** #endif
  52:/usr/include/c++/11/ext/alloc_traits.h ****   {
  53:/usr/include/c++/11/ext/alloc_traits.h ****     typedef _Alloc allocator_type;
  54:/usr/include/c++/11/ext/alloc_traits.h **** #if __cplusplus >= 201103L
  55:/usr/include/c++/11/ext/alloc_traits.h ****     typedef std::allocator_traits<_Alloc>           _Base_type;
  56:/usr/include/c++/11/ext/alloc_traits.h ****     typedef typename _Base_type::value_type         value_type;
  57:/usr/include/c++/11/ext/alloc_traits.h ****     typedef typename _Base_type::pointer            pointer;
  58:/usr/include/c++/11/ext/alloc_traits.h ****     typedef typename _Base_type::const_pointer      const_pointer;
  59:/usr/include/c++/11/ext/alloc_traits.h ****     typedef typename _Base_type::size_type          size_type;
  60:/usr/include/c++/11/ext/alloc_traits.h ****     typedef typename _Base_type::difference_type    difference_type;
  61:/usr/include/c++/11/ext/alloc_traits.h ****     // C++11 allocators do not define reference or const_reference
  62:/usr/include/c++/11/ext/alloc_traits.h ****     typedef value_type&                             reference;
  63:/usr/include/c++/11/ext/alloc_traits.h ****     typedef const value_type&                       const_reference;
  64:/usr/include/c++/11/ext/alloc_traits.h ****     using _Base_type::allocate;
  65:/usr/include/c++/11/ext/alloc_traits.h ****     using _Base_type::deallocate;
  66:/usr/include/c++/11/ext/alloc_traits.h ****     using _Base_type::construct;
  67:/usr/include/c++/11/ext/alloc_traits.h ****     using _Base_type::destroy;
  68:/usr/include/c++/11/ext/alloc_traits.h ****     using _Base_type::max_size;
  69:/usr/include/c++/11/ext/alloc_traits.h **** 
  70:/usr/include/c++/11/ext/alloc_traits.h ****   private:
  71:/usr/include/c++/11/ext/alloc_traits.h ****     template<typename _Ptr>
  72:/usr/include/c++/11/ext/alloc_traits.h ****       using __is_custom_pointer
  73:/usr/include/c++/11/ext/alloc_traits.h **** 	= std::__and_<std::is_same<pointer, _Ptr>,
  74:/usr/include/c++/11/ext/alloc_traits.h **** 		      std::__not_<std::is_pointer<_Ptr>>>;
  75:/usr/include/c++/11/ext/alloc_traits.h **** 
  76:/usr/include/c++/11/ext/alloc_traits.h ****   public:
  77:/usr/include/c++/11/ext/alloc_traits.h ****     // overload construct for non-standard pointer types
  78:/usr/include/c++/11/ext/alloc_traits.h ****     template<typename _Ptr, typename... _Args>
  79:/usr/include/c++/11/ext/alloc_traits.h ****       static _GLIBCXX14_CONSTEXPR
  80:/usr/include/c++/11/ext/alloc_traits.h ****       std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
  81:/usr/include/c++/11/ext/alloc_traits.h ****       construct(_Alloc& __a, _Ptr __p, _Args&&... __args)
  82:/usr/include/c++/11/ext/alloc_traits.h ****       noexcept(noexcept(_Base_type::construct(__a, std::__to_address(__p),
  83:/usr/include/c++/11/ext/alloc_traits.h **** 					      std::forward<_Args>(__args)...)))
  84:/usr/include/c++/11/ext/alloc_traits.h ****       {
  85:/usr/include/c++/11/ext/alloc_traits.h **** 	_Base_type::construct(__a, std::__to_address(__p),
  86:/usr/include/c++/11/ext/alloc_traits.h **** 			      std::forward<_Args>(__args)...);
  87:/usr/include/c++/11/ext/alloc_traits.h ****       }
  88:/usr/include/c++/11/ext/alloc_traits.h **** 
  89:/usr/include/c++/11/ext/alloc_traits.h ****     // overload destroy for non-standard pointer types
  90:/usr/include/c++/11/ext/alloc_traits.h ****     template<typename _Ptr>
  91:/usr/include/c++/11/ext/alloc_traits.h ****       static _GLIBCXX14_CONSTEXPR
  92:/usr/include/c++/11/ext/alloc_traits.h ****       std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
  93:/usr/include/c++/11/ext/alloc_traits.h ****       destroy(_Alloc& __a, _Ptr __p)
  94:/usr/include/c++/11/ext/alloc_traits.h ****       noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
  95:/usr/include/c++/11/ext/alloc_traits.h ****       { _Base_type::destroy(__a, std::__to_address(__p)); }
  96:/usr/include/c++/11/ext/alloc_traits.h **** 
  97:/usr/include/c++/11/ext/alloc_traits.h ****     static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
  98:/usr/include/c++/11/ext/alloc_traits.h ****     { return _Base_type::select_on_container_copy_construction(__a); }
  99:/usr/include/c++/11/ext/alloc_traits.h **** 
 100:/usr/include/c++/11/ext/alloc_traits.h ****     static _GLIBCXX14_CONSTEXPR void _S_on_swap(_Alloc& __a, _Alloc& __b)
 101:/usr/include/c++/11/ext/alloc_traits.h ****     { std::__alloc_on_swap(__a, __b); }
 102:/usr/include/c++/11/ext/alloc_traits.h **** 
 103:/usr/include/c++/11/ext/alloc_traits.h ****     static constexpr bool _S_propagate_on_copy_assign()
 104:/usr/include/c++/11/ext/alloc_traits.h ****     { return _Base_type::propagate_on_container_copy_assignment::value; }
 105:/usr/include/c++/11/ext/alloc_traits.h **** 
 106:/usr/include/c++/11/ext/alloc_traits.h ****     static constexpr bool _S_propagate_on_move_assign()
 107:/usr/include/c++/11/ext/alloc_traits.h ****     { return _Base_type::propagate_on_container_move_assignment::value; }
 108:/usr/include/c++/11/ext/alloc_traits.h **** 
 109:/usr/include/c++/11/ext/alloc_traits.h ****     static constexpr bool _S_propagate_on_swap()
 110:/usr/include/c++/11/ext/alloc_traits.h ****     { return _Base_type::propagate_on_container_swap::value; }
 111:/usr/include/c++/11/ext/alloc_traits.h **** 
 112:/usr/include/c++/11/ext/alloc_traits.h ****     static constexpr bool _S_always_equal()
 113:/usr/include/c++/11/ext/alloc_traits.h ****     { return _Base_type::is_always_equal::value; }
 114:/usr/include/c++/11/ext/alloc_traits.h **** 
 115:/usr/include/c++/11/ext/alloc_traits.h ****     static constexpr bool _S_nothrow_move()
 116:/usr/include/c++/11/ext/alloc_traits.h ****     { return _S_propagate_on_move_assign() || _S_always_equal(); }
 117:/usr/include/c++/11/ext/alloc_traits.h **** 
 118:/usr/include/c++/11/ext/alloc_traits.h ****     template<typename _Tp>
 119:/usr/include/c++/11/ext/alloc_traits.h ****       struct rebind
 120:/usr/include/c++/11/ext/alloc_traits.h ****       { typedef typename _Base_type::template rebind_alloc<_Tp> other; };
 121:/usr/include/c++/11/ext/alloc_traits.h **** #else // ! C++11
 122:/usr/include/c++/11/ext/alloc_traits.h **** 
 123:/usr/include/c++/11/ext/alloc_traits.h ****     typedef typename _Alloc::pointer                pointer;
 124:/usr/include/c++/11/ext/alloc_traits.h ****     typedef typename _Alloc::const_pointer          const_pointer;
 125:/usr/include/c++/11/ext/alloc_traits.h ****     typedef typename _Alloc::value_type             value_type;
 126:/usr/include/c++/11/ext/alloc_traits.h ****     typedef typename _Alloc::reference              reference;
 127:/usr/include/c++/11/ext/alloc_traits.h ****     typedef typename _Alloc::const_reference        const_reference;
 128:/usr/include/c++/11/ext/alloc_traits.h ****     typedef typename _Alloc::size_type              size_type;
 129:/usr/include/c++/11/ext/alloc_traits.h ****     typedef typename _Alloc::difference_type        difference_type;
 130:/usr/include/c++/11/ext/alloc_traits.h **** 
 131:/usr/include/c++/11/ext/alloc_traits.h ****     _GLIBCXX_NODISCARD static pointer
 132:/usr/include/c++/11/ext/alloc_traits.h ****     allocate(_Alloc& __a, size_type __n)
 133:/usr/include/c++/11/ext/alloc_traits.h ****     { return __a.allocate(__n); }
 134:/usr/include/c++/11/ext/alloc_traits.h **** 
 135:/usr/include/c++/11/ext/alloc_traits.h ****     template<typename _Hint>
 136:/usr/include/c++/11/ext/alloc_traits.h ****       _GLIBCXX_NODISCARD static pointer
 137:/usr/include/c++/11/ext/alloc_traits.h ****       allocate(_Alloc& __a, size_type __n, _Hint __hint)
 138:/usr/include/c++/11/ext/alloc_traits.h ****       { return __a.allocate(__n, __hint); }
 139:/usr/include/c++/11/ext/alloc_traits.h **** 
 140:/usr/include/c++/11/ext/alloc_traits.h ****     static void deallocate(_Alloc& __a, pointer __p, size_type __n)
 2710              		.loc 10 140 17
 2711              		.cfi_startproc
 2712 0000 F30F1EFA 		endbr64
 2713 0004 55       		pushq	%rbp
 2714              		.cfi_def_cfa_offset 16
 2715              		.cfi_offset 6, -16
 2716 0005 4889E5   		movq	%rsp, %rbp
 2717              		.cfi_def_cfa_register 6
 2718 0008 4883EC20 		subq	$32, %rsp
 2719 000c 48897DF8 		movq	%rdi, -8(%rbp)
 2720 0010 488975F0 		movq	%rsi, -16(%rbp)
 2721 0014 488955E8 		movq	%rdx, -24(%rbp)
 141:/usr/include/c++/11/ext/alloc_traits.h ****     { __a.deallocate(__p, __n); }
 2722              		.loc 10 141 21
 2723 0018 488B55E8 		movq	-24(%rbp), %rdx
 2724 001c 488B4DF0 		movq	-16(%rbp), %rcx
 2725 0020 488B45F8 		movq	-8(%rbp), %rax
 2726 0024 4889CE   		movq	%rcx, %rsi
 2727 0027 4889C7   		movq	%rax, %rdi
 2728 002a E8000000 		call	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE10deallocateEPS2_m@PLT
 2728      00
 2729              		.loc 10 141 33
 2730 002f 90       		nop
 2731 0030 C9       		leave
 2732              		.cfi_def_cfa 7, 8
 2733 0031 C3       		ret
 2734              		.cfi_endproc
 2735              	.LFE1589:
 2737              		.section	.text._ZNSt12_Destroy_auxILb0EE9__destroyIPN8UnitTest18DeferredTestResultEEEvT_S5_,"axG",
 2738              		.weak	_ZNSt12_Destroy_auxILb0EE9__destroyIPN8UnitTest18DeferredTestResultEEEvT_S5_
 2740              	_ZNSt12_Destroy_auxILb0EE9__destroyIPN8UnitTest18DeferredTestResultEEEvT_S5_:
 2741              	.LFB1590:
 160:/usr/include/c++/11/bits/stl_construct.h **** 	{
 2742              		.loc 8 160 2
 2743              		.cfi_startproc
 2744 0000 F30F1EFA 		endbr64
 2745 0004 55       		pushq	%rbp
 2746              		.cfi_def_cfa_offset 16
 2747              		.cfi_offset 6, -16
 2748 0005 4889E5   		movq	%rsp, %rbp
 2749              		.cfi_def_cfa_register 6
 2750 0008 4883EC10 		subq	$16, %rsp
 2751 000c 48897DF8 		movq	%rdi, -8(%rbp)
 2752 0010 488975F0 		movq	%rsi, -16(%rbp)
 162:/usr/include/c++/11/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 2753              		.loc 8 162 4
 2754 0014 EB19     		jmp	.L135
 2755              	.L136:
 163:/usr/include/c++/11/bits/stl_construct.h **** 	}
 2756              		.loc 8 163 19 discriminator 2
 2757 0016 488B45F8 		movq	-8(%rbp), %rax
 2758 001a 4889C7   		movq	%rax, %rdi
 2759 001d E8000000 		call	_ZSt11__addressofIN8UnitTest18DeferredTestResultEEPT_RS2_@PLT
 2759      00
 2760 0022 4889C7   		movq	%rax, %rdi
 2761 0025 E8000000 		call	_ZSt8_DestroyIN8UnitTest18DeferredTestResultEEvPT_@PLT
 2761      00
 162:/usr/include/c++/11/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 2762              		.loc 8 162 4 discriminator 2
 2763 002a 48836DF8 		subq	$-128, -8(%rbp)
 2763      80
 2764              	.L135:
 162:/usr/include/c++/11/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 2765              		.loc 8 162 19 discriminator 1
 2766 002f 488B45F8 		movq	-8(%rbp), %rax
 2767 0033 483B45F0 		cmpq	-16(%rbp), %rax
 2768 0037 75DD     		jne	.L136
 164:/usr/include/c++/11/bits/stl_construct.h ****     };
 2769              		.loc 8 164 2
 2770 0039 90       		nop
 2771 003a 90       		nop
 2772 003b C9       		leave
 2773              		.cfi_def_cfa 7, 8
 2774 003c C3       		ret
 2775              		.cfi_endproc
 2776              	.LFE1590:
 2778              		.section	.text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEEC2Ev,"axG",@progbits,_
 2779              		.align 2
 2780              		.weak	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEEC2Ev
 2782              	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEEC2Ev:
 2783              	.LFB1600:
  79:/usr/include/c++/11/ext/new_allocator.h **** 
 2784              		.loc 9 79 7
 2785              		.cfi_startproc
 2786 0000 F30F1EFA 		endbr64
 2787 0004 55       		pushq	%rbp
 2788              		.cfi_def_cfa_offset 16
 2789              		.cfi_offset 6, -16
 2790 0005 4889E5   		movq	%rsp, %rbp
 2791              		.cfi_def_cfa_register 6
 2792 0008 48897DF8 		movq	%rdi, -8(%rbp)
  79:/usr/include/c++/11/ext/new_allocator.h **** 
 2793              		.loc 9 79 47
 2794 000c 90       		nop
 2795 000d 5D       		popq	%rbp
 2796              		.cfi_def_cfa 7, 8
 2797 000e C3       		ret
 2798              		.cfi_endproc
 2799              	.LFE1600:
 2801              		.weak	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEEC1Ev
 2802              		.set	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEEC1Ev,_ZN9__gnu_cxx13new_allocato
 2803              		.section	.text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE10deallocateEPS2_m,"ax
 2804              		.align 2
 2805              		.weak	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE10deallocateEPS2_m
 2807              	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE10deallocateEPS2_m:
 2808              	.LFB1602:
  90:/usr/include/c++/11/ext/new_allocator.h **** 
  91:/usr/include/c++/11/ext/new_allocator.h ****       pointer
  92:/usr/include/c++/11/ext/new_allocator.h ****       address(reference __x) const _GLIBCXX_NOEXCEPT
  93:/usr/include/c++/11/ext/new_allocator.h ****       { return std::__addressof(__x); }
  94:/usr/include/c++/11/ext/new_allocator.h **** 
  95:/usr/include/c++/11/ext/new_allocator.h ****       const_pointer
  96:/usr/include/c++/11/ext/new_allocator.h ****       address(const_reference __x) const _GLIBCXX_NOEXCEPT
  97:/usr/include/c++/11/ext/new_allocator.h ****       { return std::__addressof(__x); }
  98:/usr/include/c++/11/ext/new_allocator.h **** #endif
  99:/usr/include/c++/11/ext/new_allocator.h **** 
 100:/usr/include/c++/11/ext/new_allocator.h ****       // NB: __n is permitted to be 0.  The C++ standard says nothing
 101:/usr/include/c++/11/ext/new_allocator.h ****       // about what the return value is when __n == 0.
 102:/usr/include/c++/11/ext/new_allocator.h ****       _GLIBCXX_NODISCARD _Tp*
 103:/usr/include/c++/11/ext/new_allocator.h ****       allocate(size_type __n, const void* = static_cast<const void*>(0))
 104:/usr/include/c++/11/ext/new_allocator.h ****       {
 105:/usr/include/c++/11/ext/new_allocator.h **** #if __cplusplus >= 201103L
 106:/usr/include/c++/11/ext/new_allocator.h **** 	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
 107:/usr/include/c++/11/ext/new_allocator.h **** 	 // 3308. std::allocator<void>().allocate(n)
 108:/usr/include/c++/11/ext/new_allocator.h **** 	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
 109:/usr/include/c++/11/ext/new_allocator.h **** #endif
 110:/usr/include/c++/11/ext/new_allocator.h **** 
 111:/usr/include/c++/11/ext/new_allocator.h **** 	if (__builtin_expect(__n > this->_M_max_size(), false))
 112:/usr/include/c++/11/ext/new_allocator.h **** 	  {
 113:/usr/include/c++/11/ext/new_allocator.h **** 	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
 114:/usr/include/c++/11/ext/new_allocator.h **** 	    // 3190. allocator::allocate sometimes returns too little storage
 115:/usr/include/c++/11/ext/new_allocator.h **** 	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 116:/usr/include/c++/11/ext/new_allocator.h **** 	      std::__throw_bad_array_new_length();
 117:/usr/include/c++/11/ext/new_allocator.h **** 	    std::__throw_bad_alloc();
 118:/usr/include/c++/11/ext/new_allocator.h **** 	  }
 119:/usr/include/c++/11/ext/new_allocator.h **** 
 120:/usr/include/c++/11/ext/new_allocator.h **** #if __cpp_aligned_new
 121:/usr/include/c++/11/ext/new_allocator.h **** 	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
 122:/usr/include/c++/11/ext/new_allocator.h **** 	  {
 123:/usr/include/c++/11/ext/new_allocator.h **** 	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
 124:/usr/include/c++/11/ext/new_allocator.h **** 	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
 125:/usr/include/c++/11/ext/new_allocator.h **** 	  }
 126:/usr/include/c++/11/ext/new_allocator.h **** #endif
 127:/usr/include/c++/11/ext/new_allocator.h **** 	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 128:/usr/include/c++/11/ext/new_allocator.h ****       }
 129:/usr/include/c++/11/ext/new_allocator.h **** 
 130:/usr/include/c++/11/ext/new_allocator.h ****       // __p is not permitted to be a null pointer.
 131:/usr/include/c++/11/ext/new_allocator.h ****       void
 132:/usr/include/c++/11/ext/new_allocator.h ****       deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 2809              		.loc 9 132 7
 2810              		.cfi_startproc
 2811 0000 F30F1EFA 		endbr64
 2812 0004 55       		pushq	%rbp
 2813              		.cfi_def_cfa_offset 16
 2814              		.cfi_offset 6, -16
 2815 0005 4889E5   		movq	%rsp, %rbp
 2816              		.cfi_def_cfa_register 6
 2817 0008 4883EC20 		subq	$32, %rsp
 2818 000c 48897DF8 		movq	%rdi, -8(%rbp)
 2819 0010 488975F0 		movq	%rsi, -16(%rbp)
 2820 0014 488955E8 		movq	%rdx, -24(%rbp)
 133:/usr/include/c++/11/ext/new_allocator.h ****       {
 134:/usr/include/c++/11/ext/new_allocator.h **** #if __cpp_aligned_new
 135:/usr/include/c++/11/ext/new_allocator.h **** 	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
 136:/usr/include/c++/11/ext/new_allocator.h **** 	  {
 137:/usr/include/c++/11/ext/new_allocator.h **** 	    ::operator delete(__p,
 138:/usr/include/c++/11/ext/new_allocator.h **** # if __cpp_sized_deallocation
 139:/usr/include/c++/11/ext/new_allocator.h **** 			      __t * sizeof(_Tp),
 140:/usr/include/c++/11/ext/new_allocator.h **** # endif
 141:/usr/include/c++/11/ext/new_allocator.h **** 			      std::align_val_t(alignof(_Tp)));
 142:/usr/include/c++/11/ext/new_allocator.h **** 	    return;
 143:/usr/include/c++/11/ext/new_allocator.h **** 	  }
 144:/usr/include/c++/11/ext/new_allocator.h **** #endif
 145:/usr/include/c++/11/ext/new_allocator.h **** 	::operator delete(__p
 2821              		.loc 9 145 19
 2822 0018 488B45F0 		movq	-16(%rbp), %rax
 2823 001c 4889C7   		movq	%rax, %rdi
 2824 001f E8000000 		call	_ZdlPv@PLT
 2824      00
 146:/usr/include/c++/11/ext/new_allocator.h **** #if __cpp_sized_deallocation
 147:/usr/include/c++/11/ext/new_allocator.h **** 			  , __t * sizeof(_Tp)
 148:/usr/include/c++/11/ext/new_allocator.h **** #endif
 149:/usr/include/c++/11/ext/new_allocator.h **** 			 );
 150:/usr/include/c++/11/ext/new_allocator.h ****       }
 2825              		.loc 9 150 7
 2826 0024 90       		nop
 2827 0025 C9       		leave
 2828              		.cfi_def_cfa 7, 8
 2829 0026 C3       		ret
 2830              		.cfi_endproc
 2831              	.LFE1602:
 2833              		.section	.text._ZSt11__addressofIN8UnitTest18DeferredTestResultEEPT_RS2_,"axG",@progbits,_ZSt11__a
 2834              		.weak	_ZSt11__addressofIN8UnitTest18DeferredTestResultEEPT_RS2_
 2836              	_ZSt11__addressofIN8UnitTest18DeferredTestResultEEPT_RS2_:
 2837              	.LFB1603:
 2838              		.file 11 "/usr/include/c++/11/bits/move.h"
   1:/usr/include/c++/11/bits/move.h **** // Move, forward and identity for C++11 + swap -*- C++ -*-
   2:/usr/include/c++/11/bits/move.h **** 
   3:/usr/include/c++/11/bits/move.h **** // Copyright (C) 2007-2021 Free Software Foundation, Inc.
   4:/usr/include/c++/11/bits/move.h **** //
   5:/usr/include/c++/11/bits/move.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/11/bits/move.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/11/bits/move.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/11/bits/move.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/11/bits/move.h **** // any later version.
  10:/usr/include/c++/11/bits/move.h **** 
  11:/usr/include/c++/11/bits/move.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/11/bits/move.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/11/bits/move.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/11/bits/move.h **** // GNU General Public License for more details.
  15:/usr/include/c++/11/bits/move.h **** 
  16:/usr/include/c++/11/bits/move.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/11/bits/move.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/11/bits/move.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/11/bits/move.h **** 
  20:/usr/include/c++/11/bits/move.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/11/bits/move.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/11/bits/move.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/11/bits/move.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/11/bits/move.h **** 
  25:/usr/include/c++/11/bits/move.h **** /** @file bits/move.h
  26:/usr/include/c++/11/bits/move.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/c++/11/bits/move.h ****  *  Do not attempt to use it directly. @headername{utility}
  28:/usr/include/c++/11/bits/move.h ****  */
  29:/usr/include/c++/11/bits/move.h **** 
  30:/usr/include/c++/11/bits/move.h **** #ifndef _MOVE_H
  31:/usr/include/c++/11/bits/move.h **** #define _MOVE_H 1
  32:/usr/include/c++/11/bits/move.h **** 
  33:/usr/include/c++/11/bits/move.h **** #include <bits/c++config.h>
  34:/usr/include/c++/11/bits/move.h **** #if __cplusplus < 201103L
  35:/usr/include/c++/11/bits/move.h **** # include <bits/concept_check.h>
  36:/usr/include/c++/11/bits/move.h **** #endif
  37:/usr/include/c++/11/bits/move.h **** 
  38:/usr/include/c++/11/bits/move.h **** namespace std _GLIBCXX_VISIBILITY(default)
  39:/usr/include/c++/11/bits/move.h **** {
  40:/usr/include/c++/11/bits/move.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  41:/usr/include/c++/11/bits/move.h **** 
  42:/usr/include/c++/11/bits/move.h ****   // Used, in C++03 mode too, by allocators, etc.
  43:/usr/include/c++/11/bits/move.h ****   /**
  44:/usr/include/c++/11/bits/move.h ****    *  @brief Same as C++11 std::addressof
  45:/usr/include/c++/11/bits/move.h ****    *  @ingroup utilities
  46:/usr/include/c++/11/bits/move.h ****    */
  47:/usr/include/c++/11/bits/move.h ****   template<typename _Tp>
  48:/usr/include/c++/11/bits/move.h ****     inline _GLIBCXX_CONSTEXPR _Tp*
  49:/usr/include/c++/11/bits/move.h ****     __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 2839              		.loc 11 49 5
 2840              		.cfi_startproc
 2841 0000 F30F1EFA 		endbr64
 2842 0004 55       		pushq	%rbp
 2843              		.cfi_def_cfa_offset 16
 2844              		.cfi_offset 6, -16
 2845 0005 4889E5   		movq	%rsp, %rbp
 2846              		.cfi_def_cfa_register 6
 2847 0008 48897DF8 		movq	%rdi, -8(%rbp)
  50:/usr/include/c++/11/bits/move.h ****     { return __builtin_addressof(__r); }
 2848              		.loc 11 50 37
 2849 000c 488B45F8 		movq	-8(%rbp), %rax
 2850              		.loc 11 50 40
 2851 0010 5D       		popq	%rbp
 2852              		.cfi_def_cfa 7, 8
 2853 0011 C3       		ret
 2854              		.cfi_endproc
 2855              	.LFE1603:
 2857              		.section	.text._ZN8UnitTest18DeferredTestResultD2Ev,"axG",@progbits,_ZN8UnitTest18DeferredTestResu
 2858              		.align 2
 2859              		.weak	_ZN8UnitTest18DeferredTestResultD2Ev
 2861              	_ZN8UnitTest18DeferredTestResultD2Ev:
 2862              	.LFB1606:
 2863              		.file 12 "DeferredTestResult.h"
   1:DeferredTestResult.h **** #ifndef UNITTEST_DEFERREDTESTRESULT_H
   2:DeferredTestResult.h **** #define UNITTEST_DEFERREDTESTRESULT_H
   3:DeferredTestResult.h **** 
   4:DeferredTestResult.h **** #include <string>
   5:DeferredTestResult.h **** #include <vector>
   6:DeferredTestResult.h **** 
   7:DeferredTestResult.h **** namespace UnitTest
   8:DeferredTestResult.h **** {
   9:DeferredTestResult.h **** 
  10:DeferredTestResult.h **** struct DeferredTestResult
 2864              		.loc 12 10 8
 2865              		.cfi_startproc
 2866              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 2867              		.cfi_lsda 0x1b,.LLSDA1606
 2868 0000 F30F1EFA 		endbr64
 2869 0004 55       		pushq	%rbp
 2870              		.cfi_def_cfa_offset 16
 2871              		.cfi_offset 6, -16
 2872 0005 4889E5   		movq	%rsp, %rbp
 2873              		.cfi_def_cfa_register 6
 2874 0008 53       		pushq	%rbx
 2875 0009 4883EC18 		subq	$24, %rsp
 2876              		.cfi_offset 3, -24
 2877 000d 48897DE8 		movq	%rdi, -24(%rbp)
 2878              	.LBB27:
 2879              		.loc 12 10 8
 2880 0011 488B45E8 		movq	-24(%rbp), %rax
 2881 0015 4883C060 		addq	$96, %rax
 2882 0019 4889C7   		movq	%rax, %rdi
 2883              	.LEHB39:
 2884 001c E8000000 		call	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED1Ev@PLT
 2884      00
 2885              	.LEHE39:
 2886              		.loc 12 10 8 is_stmt 0 discriminator 2
 2887 0021 488B45E8 		movq	-24(%rbp), %rax
 2888 0025 4883C040 		addq	$64, %rax
 2889 0029 4889C7   		movq	%rax, %rdi
 2890              	.LEHB40:
 2891 002c E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 2891      00
 2892              	.LEHE40:
 2893              		.loc 12 10 8 discriminator 4
 2894 0031 488B45E8 		movq	-24(%rbp), %rax
 2895 0035 4883C020 		addq	$32, %rax
 2896 0039 4889C7   		movq	%rax, %rdi
 2897              	.LEHB41:
 2898 003c E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 2898      00
 2899              	.LEHE41:
 2900              		.loc 12 10 8 discriminator 6
 2901 0041 488B45E8 		movq	-24(%rbp), %rax
 2902 0045 4889C7   		movq	%rax, %rdi
 2903              	.LEHB42:
 2904 0048 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 2904      00
 2905              	.LEHE42:
 2906              	.LBE27:
 2907 004d EB50     		jmp	.L148
 2908              	.L145:
 2909 004f F30F1EFA 		endbr64
 2910              	.LBB28:
 2911              		.loc 12 10 8
 2912 0053 4889C3   		movq	%rax, %rbx
 2913 0056 488B45E8 		movq	-24(%rbp), %rax
 2914 005a 4883C040 		addq	$64, %rax
 2915 005e 4889C7   		movq	%rax, %rdi
 2916 0061 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 2916      00
 2917 0066 EB07     		jmp	.L143
 2918              	.L146:
 2919 0068 F30F1EFA 		endbr64
 2920 006c 4889C3   		movq	%rax, %rbx
 2921              	.L143:
 2922              		.loc 12 10 8 discriminator 3
 2923 006f 488B45E8 		movq	-24(%rbp), %rax
 2924 0073 4883C020 		addq	$32, %rax
 2925 0077 4889C7   		movq	%rax, %rdi
 2926 007a E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 2926      00
 2927 007f EB07     		jmp	.L144
 2928              	.L147:
 2929 0081 F30F1EFA 		endbr64
 2930              		.loc 12 10 8
 2931 0085 4889C3   		movq	%rax, %rbx
 2932              	.L144:
 2933              		.loc 12 10 8 discriminator 5
 2934 0088 488B45E8 		movq	-24(%rbp), %rax
 2935 008c 4889C7   		movq	%rax, %rdi
 2936 008f E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 2936      00
 2937 0094 4889D8   		movq	%rbx, %rax
 2938 0097 4889C7   		movq	%rax, %rdi
 2939              	.LEHB43:
 2940 009a E8000000 		call	_Unwind_Resume@PLT
 2940      00
 2941              	.LEHE43:
 2942              	.L148:
 2943              	.LBE28:
 2944              		.loc 12 10 8
 2945 009f 488B5DF8 		movq	-8(%rbp), %rbx
 2946 00a3 C9       		leave
 2947              		.cfi_def_cfa 7, 8
 2948 00a4 C3       		ret
 2949              		.cfi_endproc
 2950              	.LFE1606:
 2951              		.section	.gcc_except_table
 2952              	.LLSDA1606:
 2953 00e7 FF       		.byte	0xff
 2954 00e8 FF       		.byte	0xff
 2955 00e9 01       		.byte	0x1
 2956 00ea 16       		.uleb128 .LLSDACSE1606-.LLSDACSB1606
 2957              	.LLSDACSB1606:
 2958 00eb 1C       		.uleb128 .LEHB39-.LFB1606
 2959 00ec 05       		.uleb128 .LEHE39-.LEHB39
 2960 00ed 4F       		.uleb128 .L145-.LFB1606
 2961 00ee 00       		.uleb128 0
 2962 00ef 2C       		.uleb128 .LEHB40-.LFB1606
 2963 00f0 05       		.uleb128 .LEHE40-.LEHB40
 2964 00f1 68       		.uleb128 .L146-.LFB1606
 2965 00f2 00       		.uleb128 0
 2966 00f3 3C       		.uleb128 .LEHB41-.LFB1606
 2967 00f4 05       		.uleb128 .LEHE41-.LEHB41
 2968 00f5 8101     		.uleb128 .L147-.LFB1606
 2969 00f7 00       		.uleb128 0
 2970 00f8 48       		.uleb128 .LEHB42-.LFB1606
 2971 00f9 05       		.uleb128 .LEHE42-.LEHB42
 2972 00fa 00       		.uleb128 0
 2973 00fb 00       		.uleb128 0
 2974 00fc 9A01     		.uleb128 .LEHB43-.LFB1606
 2975 00fe 05       		.uleb128 .LEHE43-.LEHB43
 2976 00ff 00       		.uleb128 0
 2977 0100 00       		.uleb128 0
 2978              	.LLSDACSE1606:
 2979              		.section	.text._ZN8UnitTest18DeferredTestResultD2Ev,"axG",@progbits,_ZN8UnitTest18DeferredTestResu
 2981              		.weak	_ZN8UnitTest18DeferredTestResultD1Ev
 2982              		.set	_ZN8UnitTest18DeferredTestResultD1Ev,_ZN8UnitTest18DeferredTestResultD2Ev
 2983              		.section	.text._ZSt8_DestroyIN8UnitTest18DeferredTestResultEEvPT_,"axG",@progbits,_ZSt8_DestroyIN8
 2984              		.weak	_ZSt8_DestroyIN8UnitTest18DeferredTestResultEEvPT_
 2986              	_ZSt8_DestroyIN8UnitTest18DeferredTestResultEEvPT_:
 2987              	.LFB1604:
 146:/usr/include/c++/11/bits/stl_construct.h ****     {
 2988              		.loc 8 146 5 is_stmt 1
 2989              		.cfi_startproc
 2990 0000 F30F1EFA 		endbr64
 2991 0004 55       		pushq	%rbp
 2992              		.cfi_def_cfa_offset 16
 2993              		.cfi_offset 6, -16
 2994 0005 4889E5   		movq	%rsp, %rbp
 2995              		.cfi_def_cfa_register 6
 2996 0008 4883EC10 		subq	$16, %rsp
 2997 000c 48897DF8 		movq	%rdi, -8(%rbp)
 151:/usr/include/c++/11/bits/stl_construct.h **** #endif
 2998              		.loc 8 151 22
 2999 0010 488B45F8 		movq	-8(%rbp), %rax
 3000 0014 4889C7   		movq	%rax, %rdi
 3001 0017 E8000000 		call	_ZN8UnitTest18DeferredTestResultD1Ev@PLT
 3001      00
 153:/usr/include/c++/11/bits/stl_construct.h **** 
 3002              		.loc 8 153 5
 3003 001c 90       		nop
 3004 001d C9       		leave
 3005              		.cfi_def_cfa 7, 8
 3006 001e C3       		ret
 3007              		.cfi_endproc
 3008              	.LFE1604:
 3010              		.section	.text._ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE
 3011              		.align 2
 3012              		.weak	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2Ev
 3014              	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2Ev:
 3015              	.LFB1612:
 678:/usr/include/c++/11/bits/stl_vector.h ****       {
 3016              		.loc 4 678 7
 3017              		.cfi_startproc
 3018              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 3019              		.cfi_lsda 0x1b,.LLSDA1612
 3020 0000 F30F1EFA 		endbr64
 3021 0004 55       		pushq	%rbp
 3022              		.cfi_def_cfa_offset 16
 3023              		.cfi_offset 6, -16
 3024 0005 4889E5   		movq	%rsp, %rbp
 3025              		.cfi_def_cfa_register 6
 3026 0008 53       		pushq	%rbx
 3027 0009 4883EC18 		subq	$24, %rsp
 3028              		.cfi_offset 3, -24
 3029 000d 48897DE8 		movq	%rdi, -24(%rbp)
 3030              	.LBB29:
 681:/usr/include/c++/11/bits/stl_vector.h **** 	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
 3031              		.loc 4 681 28
 3032 0011 488B45E8 		movq	-24(%rbp), %rax
 3033 0015 4889C7   		movq	%rax, %rdi
 3034 0018 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE19_
 3034      00
 3035 001d 4889C2   		movq	%rax, %rdx
 680:/usr/include/c++/11/bits/stl_vector.h **** 		      _M_get_Tp_allocator());
 3036              		.loc 4 680 15
 3037 0020 488B45E8 		movq	-24(%rbp), %rax
 3038 0024 488B4808 		movq	8(%rax), %rcx
 3039 0028 488B45E8 		movq	-24(%rbp), %rax
 3040 002c 488B00   		movq	(%rax), %rax
 3041 002f 4889CE   		movq	%rcx, %rsi
 3042 0032 4889C7   		movq	%rax, %rdi
 3043              	.LEHB44:
 3044 0035 E8000000 		call	_ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_EvT_S9_RSaIT0
 3044      00
 3045              	.LEHE44:
 683:/usr/include/c++/11/bits/stl_vector.h **** 
 3046              		.loc 4 683 7
 3047 003a 488B45E8 		movq	-24(%rbp), %rax
 3048 003e 4889C7   		movq	%rax, %rdi
 3049              	.LEHB45:
 3050 0041 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2E
 3050      00
 3051              	.LEHE45:
 3052              	.LBE29:
 3053 0046 EB1E     		jmp	.L153
 3054              	.L152:
 3055 0048 F30F1EFA 		endbr64
 3056              	.LBB30:
 3057 004c 4889C3   		movq	%rax, %rbx
 3058 004f 488B45E8 		movq	-24(%rbp), %rax
 3059 0053 4889C7   		movq	%rax, %rdi
 3060 0056 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2E
 3060      00
 3061 005b 4889D8   		movq	%rbx, %rax
 3062 005e 4889C7   		movq	%rax, %rdi
 3063              	.LEHB46:
 3064 0061 E8000000 		call	_Unwind_Resume@PLT
 3064      00
 3065              	.LEHE46:
 3066              	.L153:
 3067              	.LBE30:
 3068 0066 488B5DF8 		movq	-8(%rbp), %rbx
 3069 006a C9       		leave
 3070              		.cfi_def_cfa 7, 8
 3071 006b C3       		ret
 3072              		.cfi_endproc
 3073              	.LFE1612:
 3074              		.section	.gcc_except_table
 3075              	.LLSDA1612:
 3076 0101 FF       		.byte	0xff
 3077 0102 FF       		.byte	0xff
 3078 0103 01       		.byte	0x1
 3079 0104 0C       		.uleb128 .LLSDACSE1612-.LLSDACSB1612
 3080              	.LLSDACSB1612:
 3081 0105 35       		.uleb128 .LEHB44-.LFB1612
 3082 0106 05       		.uleb128 .LEHE44-.LEHB44
 3083 0107 48       		.uleb128 .L152-.LFB1612
 3084 0108 00       		.uleb128 0
 3085 0109 41       		.uleb128 .LEHB45-.LFB1612
 3086 010a 05       		.uleb128 .LEHE45-.LEHB45
 3087 010b 00       		.uleb128 0
 3088 010c 00       		.uleb128 0
 3089 010d 61       		.uleb128 .LEHB46-.LFB1612
 3090 010e 05       		.uleb128 .LEHE46-.LEHB46
 3091 010f 00       		.uleb128 0
 3092 0110 00       		.uleb128 0
 3093              	.LLSDACSE1612:
 3094              		.section	.text._ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE
 3096              		.weak	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED1Ev
 3097              		.set	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED1Ev,_ZNSt
 3098              		.section	.text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES
 3099              		.align 2
 3100              		.weak	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12
 3102              	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_Vector
 3103              	.LFB1616:
 128:/usr/include/c++/11/bits/stl_vector.h **** 	: public _Tp_alloc_type, public _Vector_impl_data
 3104              		.loc 4 128 14
 3105              		.cfi_startproc
 3106 0000 F30F1EFA 		endbr64
 3107 0004 55       		pushq	%rbp
 3108              		.cfi_def_cfa_offset 16
 3109              		.cfi_offset 6, -16
 3110 0005 4889E5   		movq	%rsp, %rbp
 3111              		.cfi_def_cfa_register 6
 3112 0008 4883EC10 		subq	$16, %rsp
 3113 000c 48897DF8 		movq	%rdi, -8(%rbp)
 3114              	.LBB31:
 128:/usr/include/c++/11/bits/stl_vector.h **** 	: public _Tp_alloc_type, public _Vector_impl_data
 3115              		.loc 4 128 14
 3116 0010 488B45F8 		movq	-8(%rbp), %rax
 3117 0014 4889C7   		movq	%rax, %rdi
 3118 0017 E8000000 		call	_ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev@PLT
 3118      00
 3119              	.LBE31:
 3120 001c 90       		nop
 3121 001d C9       		leave
 3122              		.cfi_def_cfa 7, 8
 3123 001e C3       		ret
 3124              		.cfi_endproc
 3125              	.LFE1616:
 3127              		.weak	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12
 3128              		.set	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_
 3129              		.section	.text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES
 3130              		.align 2
 3131              		.weak	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2
 3133              	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2Ev:
 3134              	.LFB1618:
 333:/usr/include/c++/11/bits/stl_vector.h ****       {
 3135              		.loc 4 333 7
 3136              		.cfi_startproc
 3137              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 3138              		.cfi_lsda 0x1b,.LLSDA1618
 3139 0000 F30F1EFA 		endbr64
 3140 0004 55       		pushq	%rbp
 3141              		.cfi_def_cfa_offset 16
 3142              		.cfi_offset 6, -16
 3143 0005 4889E5   		movq	%rsp, %rbp
 3144              		.cfi_def_cfa_register 6
 3145 0008 53       		pushq	%rbx
 3146 0009 4883EC18 		subq	$24, %rsp
 3147              		.cfi_offset 3, -24
 3148 000d 48897DE8 		movq	%rdi, -24(%rbp)
 3149              	.LBB32:
 336:/usr/include/c++/11/bits/stl_vector.h ****       }
 3150              		.loc 4 336 17
 3151 0011 488B45E8 		movq	-24(%rbp), %rax
 3152 0015 488B5010 		movq	16(%rax), %rdx
 336:/usr/include/c++/11/bits/stl_vector.h ****       }
 3153              		.loc 4 336 45
 3154 0019 488B45E8 		movq	-24(%rbp), %rax
 3155 001d 488B08   		movq	(%rax), %rcx
 336:/usr/include/c++/11/bits/stl_vector.h ****       }
 3156              		.loc 4 336 35
 3157 0020 4889D0   		movq	%rdx, %rax
 3158 0023 4829C8   		subq	%rcx, %rax
 3159 0026 48C1F803 		sarq	$3, %rax
 3160 002a 4889C2   		movq	%rax, %rdx
 3161 002d 48B8CDCC 		movabsq	$-3689348814741910323, %rax
 3161      CCCCCCCC 
 3161      CCCC
 3162 0037 480FAFC2 		imulq	%rdx, %rax
 335:/usr/include/c++/11/bits/stl_vector.h **** 		      _M_impl._M_end_of_storage - _M_impl._M_start);
 3163              		.loc 4 335 15
 3164 003b 4889C2   		movq	%rax, %rdx
 3165 003e 488B45E8 		movq	-24(%rbp), %rax
 3166 0042 488B08   		movq	(%rax), %rcx
 3167 0045 488B45E8 		movq	-24(%rbp), %rax
 3168 0049 4889CE   		movq	%rcx, %rsi
 3169 004c 4889C7   		movq	%rax, %rdi
 3170              	.LEHB47:
 3171 004f E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE13_
 3171      00
 3172              	.LEHE47:
 337:/usr/include/c++/11/bits/stl_vector.h **** 
 3173              		.loc 4 337 7
 3174 0054 488B45E8 		movq	-24(%rbp), %rax
 3175 0058 4889C7   		movq	%rax, %rdi
 3176 005b E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_
 3176      00
 3177              	.LBE32:
 3178 0060 EB1E     		jmp	.L158
 3179              	.L157:
 3180 0062 F30F1EFA 		endbr64
 3181              	.LBB33:
 3182 0066 4889C3   		movq	%rax, %rbx
 3183 0069 488B45E8 		movq	-24(%rbp), %rax
 3184 006d 4889C7   		movq	%rax, %rdi
 3185 0070 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_
 3185      00
 3186 0075 4889D8   		movq	%rbx, %rax
 3187 0078 4889C7   		movq	%rax, %rdi
 3188              	.LEHB48:
 3189 007b E8000000 		call	_Unwind_Resume@PLT
 3189      00
 3190              	.LEHE48:
 3191              	.L158:
 3192              	.LBE33:
 3193 0080 488B5DF8 		movq	-8(%rbp), %rbx
 3194 0084 C9       		leave
 3195              		.cfi_def_cfa 7, 8
 3196 0085 C3       		ret
 3197              		.cfi_endproc
 3198              	.LFE1618:
 3199              		.section	.gcc_except_table
 3200              	.LLSDA1618:
 3201 0111 FF       		.byte	0xff
 3202 0112 FF       		.byte	0xff
 3203 0113 01       		.byte	0x1
 3204 0114 08       		.uleb128 .LLSDACSE1618-.LLSDACSB1618
 3205              	.LLSDACSB1618:
 3206 0115 4F       		.uleb128 .LEHB47-.LFB1618
 3207 0116 05       		.uleb128 .LEHE47-.LEHB47
 3208 0117 62       		.uleb128 .L157-.LFB1618
 3209 0118 00       		.uleb128 0
 3210 0119 7B       		.uleb128 .LEHB48-.LFB1618
 3211 011a 05       		.uleb128 .LEHE48-.LEHB48
 3212 011b 00       		.uleb128 0
 3213 011c 00       		.uleb128 0
 3214              	.LLSDACSE1618:
 3215              		.section	.text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES
 3217              		.weak	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED1
 3218              		.set	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED1E
 3219              		.section	.text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES
 3220              		.align 2
 3221              		.weak	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE19
 3223              	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE19_M_get_
 3224              	.LFB1620:
 276:/usr/include/c++/11/bits/stl_vector.h ****       { return this->_M_impl; }
 3225              		.loc 4 276 7
 3226              		.cfi_startproc
 3227 0000 F30F1EFA 		endbr64
 3228 0004 55       		pushq	%rbp
 3229              		.cfi_def_cfa_offset 16
 3230              		.cfi_offset 6, -16
 3231 0005 4889E5   		movq	%rsp, %rbp
 3232              		.cfi_def_cfa_register 6
 3233 0008 48897DF8 		movq	%rdi, -8(%rbp)
 277:/usr/include/c++/11/bits/stl_vector.h **** 
 3234              		.loc 4 277 22
 3235 000c 488B45F8 		movq	-8(%rbp), %rax
 277:/usr/include/c++/11/bits/stl_vector.h **** 
 3236              		.loc 4 277 31
 3237 0010 5D       		popq	%rbp
 3238              		.cfi_def_cfa 7, 8
 3239 0011 C3       		ret
 3240              		.cfi_endproc
 3241              	.LFE1620:
 3243              		.section	.text._ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_EvT
 3244              		.weak	_ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_EvT_S9_RSaIT
 3246              	_ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_EvT_S9_RSaIT0_E:
 3247              	.LFB1621:
 845:/usr/include/c++/11/bits/alloc_traits.h **** 	     allocator<_Tp>&)
 3248              		.loc 6 845 5
 3249              		.cfi_startproc
 3250 0000 F30F1EFA 		endbr64
 3251 0004 55       		pushq	%rbp
 3252              		.cfi_def_cfa_offset 16
 3253              		.cfi_offset 6, -16
 3254 0005 4889E5   		movq	%rsp, %rbp
 3255              		.cfi_def_cfa_register 6
 3256 0008 4883EC20 		subq	$32, %rsp
 3257 000c 48897DF8 		movq	%rdi, -8(%rbp)
 3258 0010 488975F0 		movq	%rsi, -16(%rbp)
 3259 0014 488955E8 		movq	%rdx, -24(%rbp)
 848:/usr/include/c++/11/bits/alloc_traits.h ****     }
 3260              		.loc 6 848 15
 3261 0018 488B55F0 		movq	-16(%rbp), %rdx
 3262 001c 488B45F8 		movq	-8(%rbp), %rax
 3263 0020 4889D6   		movq	%rdx, %rsi
 3264 0023 4889C7   		movq	%rax, %rdi
 3265 0026 E8000000 		call	_ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_@PLT
 3265      00
 3266              		.loc 6 849 5
 3267 002b 90       		nop
 3268 002c C9       		leave
 3269              		.cfi_def_cfa 7, 8
 3270 002d C3       		ret
 3271              		.cfi_endproc
 3272              	.LFE1621:
 3274              		.section	.text._ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev,"axG",@pr
 3275              		.align 2
 3276              		.weak	_ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev
 3278              	_ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev:
 3279              	.LFB1623:
 3280              		.loc 7 174 7
 3281              		.cfi_startproc
 3282 0000 F30F1EFA 		endbr64
 3283 0004 55       		pushq	%rbp
 3284              		.cfi_def_cfa_offset 16
 3285              		.cfi_offset 6, -16
 3286 0005 4889E5   		movq	%rsp, %rbp
 3287              		.cfi_def_cfa_register 6
 3288 0008 4883EC10 		subq	$16, %rsp
 3289 000c 48897DF8 		movq	%rdi, -8(%rbp)
 3290              	.LBB34:
 3291              		.loc 7 174 39
 3292 0010 488B45F8 		movq	-8(%rbp), %rax
 3293 0014 4889C7   		movq	%rax, %rdi
 3294 0017 E8000000 		call	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED
 3294      00
 3295              	.LBE34:
 3296 001c 90       		nop
 3297 001d C9       		leave
 3298              		.cfi_def_cfa 7, 8
 3299 001e C3       		ret
 3300              		.cfi_endproc
 3301              	.LFE1623:
 3303              		.weak	_ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED1Ev
 3304              		.set	_ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED1Ev,_ZNSaISt4pairIiNSt7
 3305              		.section	.text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES
 3306              		.align 2
 3307              		.weak	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE13
 3309              	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE13_M_deal
 3310              	.LFB1625:
 350:/usr/include/c++/11/bits/stl_vector.h ****       {
 3311              		.loc 4 350 7
 3312              		.cfi_startproc
 3313 0000 F30F1EFA 		endbr64
 3314 0004 55       		pushq	%rbp
 3315              		.cfi_def_cfa_offset 16
 3316              		.cfi_offset 6, -16
 3317 0005 4889E5   		movq	%rsp, %rbp
 3318              		.cfi_def_cfa_register 6
 3319 0008 4883EC20 		subq	$32, %rsp
 3320 000c 48897DF8 		movq	%rdi, -8(%rbp)
 3321 0010 488975F0 		movq	%rsi, -16(%rbp)
 3322 0014 488955E8 		movq	%rdx, -24(%rbp)
 353:/usr/include/c++/11/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 3323              		.loc 4 353 2
 3324 0018 48837DF0 		cmpq	$0, -16(%rbp)
 3324      00
 3325 001d 7417     		je	.L165
 354:/usr/include/c++/11/bits/stl_vector.h ****       }
 3326              		.loc 4 354 20
 3327 001f 488B45F8 		movq	-8(%rbp), %rax
 354:/usr/include/c++/11/bits/stl_vector.h ****       }
 3328              		.loc 4 354 19
 3329 0023 488B55E8 		movq	-24(%rbp), %rdx
 3330 0027 488B4DF0 		movq	-16(%rbp), %rcx
 3331 002b 4889CE   		movq	%rcx, %rsi
 3332 002e 4889C7   		movq	%rax, %rdi
 3333 0031 E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE
 3333      00
 3334              	.L165:
 355:/usr/include/c++/11/bits/stl_vector.h **** 
 3335              		.loc 4 355 7
 3336 0036 90       		nop
 3337 0037 C9       		leave
 3338              		.cfi_def_cfa 7, 8
 3339 0038 C3       		ret
 3340              		.cfi_endproc
 3341              	.LFE1625:
 3343              		.section	.text._ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9
 3344              		.weak	_ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_
 3346              	_ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_:
 3347              	.LFB1626:
 182:/usr/include/c++/11/bits/stl_construct.h ****     {
 3348              		.loc 8 182 5
 3349              		.cfi_startproc
 3350 0000 F30F1EFA 		endbr64
 3351 0004 55       		pushq	%rbp
 3352              		.cfi_def_cfa_offset 16
 3353              		.cfi_offset 6, -16
 3354 0005 4889E5   		movq	%rsp, %rbp
 3355              		.cfi_def_cfa_register 6
 3356 0008 4883EC10 		subq	$16, %rsp
 3357 000c 48897DF8 		movq	%rdi, -8(%rbp)
 3358 0010 488975F0 		movq	%rsi, -16(%rbp)
 196:/usr/include/c++/11/bits/stl_construct.h ****     }
 3359              		.loc 8 196 11
 3360 0014 488B55F0 		movq	-16(%rbp), %rdx
 3361 0018 488B45F8 		movq	-8(%rbp), %rax
 3362 001c 4889D6   		movq	%rdx, %rsi
 3363 001f 4889C7   		movq	%rax, %rdi
 3364 0022 E8000000 		call	_ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESa
 3364      00
 3365              		.loc 8 197 5
 3366 0027 90       		nop
 3367 0028 C9       		leave
 3368              		.cfi_def_cfa 7, 8
 3369 0029 C3       		ret
 3370              		.cfi_endproc
 3371              	.LFE1626:
 3373              		.section	.text._ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcE
 3374              		.align 2
 3375              		.weak	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE
 3377              	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev:
 3378              	.LFB1628:
  89:/usr/include/c++/11/ext/new_allocator.h **** 
 3379              		.loc 9 89 7
 3380              		.cfi_startproc
 3381 0000 F30F1EFA 		endbr64
 3382 0004 55       		pushq	%rbp
 3383              		.cfi_def_cfa_offset 16
 3384              		.cfi_offset 6, -16
 3385 0005 4889E5   		movq	%rsp, %rbp
 3386              		.cfi_def_cfa_register 6
 3387 0008 48897DF8 		movq	%rdi, -8(%rbp)
  89:/usr/include/c++/11/ext/new_allocator.h **** 
 3388              		.loc 9 89 48
 3389 000c 90       		nop
 3390 000d 5D       		popq	%rbp
 3391              		.cfi_def_cfa 7, 8
 3392 000e C3       		ret
 3393              		.cfi_endproc
 3394              	.LFE1628:
 3396              		.weak	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE
 3397              		.set	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED
 3398              		.section	.text._ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_trait
 3399              		.weak	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcE
 3401              	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEES8_
 3402              	.LFB1630:
 140:/usr/include/c++/11/ext/alloc_traits.h ****     { __a.deallocate(__p, __n); }
 3403              		.loc 10 140 17
 3404              		.cfi_startproc
 3405 0000 F30F1EFA 		endbr64
 3406 0004 55       		pushq	%rbp
 3407              		.cfi_def_cfa_offset 16
 3408              		.cfi_offset 6, -16
 3409 0005 4889E5   		movq	%rsp, %rbp
 3410              		.cfi_def_cfa_register 6
 3411 0008 4883EC20 		subq	$32, %rsp
 3412 000c 48897DF8 		movq	%rdi, -8(%rbp)
 3413 0010 488975F0 		movq	%rsi, -16(%rbp)
 3414 0014 488955E8 		movq	%rdx, -24(%rbp)
 3415              		.loc 10 141 21
 3416 0018 488B55E8 		movq	-24(%rbp), %rdx
 3417 001c 488B4DF0 		movq	-16(%rbp), %rcx
 3418 0020 488B45F8 		movq	-8(%rbp), %rax
 3419 0024 4889CE   		movq	%rcx, %rsi
 3420 0027 4889C7   		movq	%rax, %rdi
 3421 002a E8000000 		call	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE1
 3421      00
 3422              		.loc 10 141 33
 3423 002f 90       		nop
 3424 0030 C9       		leave
 3425              		.cfi_def_cfa 7, 8
 3426 0031 C3       		ret
 3427              		.cfi_endproc
 3428              	.LFE1630:
 3430              		.section	.text._ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_t
 3431              		.weak	_ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcES
 3433              	_ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE
 3434              	.LFB1631:
 160:/usr/include/c++/11/bits/stl_construct.h **** 	{
 3435              		.loc 8 160 2
 3436              		.cfi_startproc
 3437 0000 F30F1EFA 		endbr64
 3438 0004 55       		pushq	%rbp
 3439              		.cfi_def_cfa_offset 16
 3440              		.cfi_offset 6, -16
 3441 0005 4889E5   		movq	%rsp, %rbp
 3442              		.cfi_def_cfa_register 6
 3443 0008 4883EC10 		subq	$16, %rsp
 3444 000c 48897DF8 		movq	%rdi, -8(%rbp)
 3445 0010 488975F0 		movq	%rsi, -16(%rbp)
 162:/usr/include/c++/11/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 3446              		.loc 8 162 4
 3447 0014 EB19     		jmp	.L170
 3448              	.L171:
 163:/usr/include/c++/11/bits/stl_construct.h **** 	}
 3449              		.loc 8 163 19 discriminator 2
 3450 0016 488B45F8 		movq	-8(%rbp), %rax
 3451 001a 4889C7   		movq	%rax, %rdi
 3452 001d E8000000 		call	_ZSt11__addressofISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT_RS8_@PLT
 3452      00
 3453 0022 4889C7   		movq	%rax, %rdi
 3454 0025 E8000000 		call	_ZSt8_DestroyISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvPT_@PLT
 3454      00
 162:/usr/include/c++/11/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 3455              		.loc 8 162 4 discriminator 2
 3456 002a 488345F8 		addq	$40, -8(%rbp)
 3456      28
 3457              	.L170:
 162:/usr/include/c++/11/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 3458              		.loc 8 162 19 discriminator 1
 3459 002f 488B45F8 		movq	-8(%rbp), %rax
 3460 0033 483B45F0 		cmpq	-16(%rbp), %rax
 3461 0037 75DD     		jne	.L171
 164:/usr/include/c++/11/bits/stl_construct.h ****     };
 3462              		.loc 8 164 2
 3463 0039 90       		nop
 3464 003a 90       		nop
 3465 003b C9       		leave
 3466              		.cfi_def_cfa 7, 8
 3467 003c C3       		ret
 3468              		.cfi_endproc
 3469              	.LFE1631:
 3471              		.section	.text._ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcE
 3472              		.align 2
 3473              		.weak	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE
 3475              	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deall
 3476              	.LFB1632:
 132:/usr/include/c++/11/ext/new_allocator.h ****       {
 3477              		.loc 9 132 7
 3478              		.cfi_startproc
 3479 0000 F30F1EFA 		endbr64
 3480 0004 55       		pushq	%rbp
 3481              		.cfi_def_cfa_offset 16
 3482              		.cfi_offset 6, -16
 3483 0005 4889E5   		movq	%rsp, %rbp
 3484              		.cfi_def_cfa_register 6
 3485 0008 4883EC20 		subq	$32, %rsp
 3486 000c 48897DF8 		movq	%rdi, -8(%rbp)
 3487 0010 488975F0 		movq	%rsi, -16(%rbp)
 3488 0014 488955E8 		movq	%rdx, -24(%rbp)
 145:/usr/include/c++/11/ext/new_allocator.h **** #if __cpp_sized_deallocation
 3489              		.loc 9 145 19
 3490 0018 488B45F0 		movq	-16(%rbp), %rax
 3491 001c 4889C7   		movq	%rax, %rdi
 3492 001f E8000000 		call	_ZdlPv@PLT
 3492      00
 3493              		.loc 9 150 7
 3494 0024 90       		nop
 3495 0025 C9       		leave
 3496              		.cfi_def_cfa 7, 8
 3497 0026 C3       		ret
 3498              		.cfi_endproc
 3499              	.LFE1632:
 3501              		.section	.text._ZSt11__addressofISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT
 3502              		.weak	_ZSt11__addressofISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT_RS8_
 3504              	_ZSt11__addressofISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT_RS8_:
 3505              	.LFB1633:
  49:/usr/include/c++/11/bits/move.h ****     { return __builtin_addressof(__r); }
 3506              		.loc 11 49 5
 3507              		.cfi_startproc
 3508 0000 F30F1EFA 		endbr64
 3509 0004 55       		pushq	%rbp
 3510              		.cfi_def_cfa_offset 16
 3511              		.cfi_offset 6, -16
 3512 0005 4889E5   		movq	%rsp, %rbp
 3513              		.cfi_def_cfa_register 6
 3514 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3515              		.loc 11 50 37
 3516 000c 488B45F8 		movq	-8(%rbp), %rax
 3517              		.loc 11 50 40
 3518 0010 5D       		popq	%rbp
 3519              		.cfi_def_cfa 7, 8
 3520 0011 C3       		ret
 3521              		.cfi_endproc
 3522              	.LFE1633:
 3524              		.section	.text._ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev,"axG",@progbi
 3525              		.align 2
 3526              		.weak	_ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev
 3528              	_ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev:
 3529              	.LFB1636:
 3530              		.file 13 "/usr/include/c++/11/bits/stl_pair.h"
   1:/usr/include/c++/11/bits/stl_pair.h **** // Pair implementation -*- C++ -*-
   2:/usr/include/c++/11/bits/stl_pair.h **** 
   3:/usr/include/c++/11/bits/stl_pair.h **** // Copyright (C) 2001-2021 Free Software Foundation, Inc.
   4:/usr/include/c++/11/bits/stl_pair.h **** //
   5:/usr/include/c++/11/bits/stl_pair.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/11/bits/stl_pair.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/11/bits/stl_pair.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/11/bits/stl_pair.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/11/bits/stl_pair.h **** // any later version.
  10:/usr/include/c++/11/bits/stl_pair.h **** 
  11:/usr/include/c++/11/bits/stl_pair.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/11/bits/stl_pair.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/11/bits/stl_pair.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/11/bits/stl_pair.h **** // GNU General Public License for more details.
  15:/usr/include/c++/11/bits/stl_pair.h **** 
  16:/usr/include/c++/11/bits/stl_pair.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/11/bits/stl_pair.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/11/bits/stl_pair.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/11/bits/stl_pair.h **** 
  20:/usr/include/c++/11/bits/stl_pair.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/11/bits/stl_pair.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/11/bits/stl_pair.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/11/bits/stl_pair.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/11/bits/stl_pair.h **** 
  25:/usr/include/c++/11/bits/stl_pair.h **** /*
  26:/usr/include/c++/11/bits/stl_pair.h ****  *
  27:/usr/include/c++/11/bits/stl_pair.h ****  * Copyright (c) 1994
  28:/usr/include/c++/11/bits/stl_pair.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/11/bits/stl_pair.h ****  *
  30:/usr/include/c++/11/bits/stl_pair.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/11/bits/stl_pair.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/11/bits/stl_pair.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/11/bits/stl_pair.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/11/bits/stl_pair.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/11/bits/stl_pair.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/11/bits/stl_pair.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/11/bits/stl_pair.h ****  *
  38:/usr/include/c++/11/bits/stl_pair.h ****  *
  39:/usr/include/c++/11/bits/stl_pair.h ****  * Copyright (c) 1996,1997
  40:/usr/include/c++/11/bits/stl_pair.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/11/bits/stl_pair.h ****  *
  42:/usr/include/c++/11/bits/stl_pair.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/11/bits/stl_pair.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/11/bits/stl_pair.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/11/bits/stl_pair.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/11/bits/stl_pair.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/11/bits/stl_pair.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/11/bits/stl_pair.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/11/bits/stl_pair.h ****  */
  50:/usr/include/c++/11/bits/stl_pair.h **** 
  51:/usr/include/c++/11/bits/stl_pair.h **** /** @file bits/stl_pair.h
  52:/usr/include/c++/11/bits/stl_pair.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/11/bits/stl_pair.h ****  *  Do not attempt to use it directly. @headername{utility}
  54:/usr/include/c++/11/bits/stl_pair.h ****  */
  55:/usr/include/c++/11/bits/stl_pair.h **** 
  56:/usr/include/c++/11/bits/stl_pair.h **** #ifndef _STL_PAIR_H
  57:/usr/include/c++/11/bits/stl_pair.h **** #define _STL_PAIR_H 1
  58:/usr/include/c++/11/bits/stl_pair.h **** 
  59:/usr/include/c++/11/bits/stl_pair.h **** #include <bits/move.h> // for std::move / std::forward, and std::swap
  60:/usr/include/c++/11/bits/stl_pair.h **** 
  61:/usr/include/c++/11/bits/stl_pair.h **** #if __cplusplus >= 201103L
  62:/usr/include/c++/11/bits/stl_pair.h **** # include <type_traits> // for std::__decay_and_strip, std::is_reference_v
  63:/usr/include/c++/11/bits/stl_pair.h **** #endif
  64:/usr/include/c++/11/bits/stl_pair.h **** #if __cplusplus > 201703L
  65:/usr/include/c++/11/bits/stl_pair.h **** # include <compare>
  66:/usr/include/c++/11/bits/stl_pair.h **** # define __cpp_lib_constexpr_utility 201811L
  67:/usr/include/c++/11/bits/stl_pair.h **** #endif
  68:/usr/include/c++/11/bits/stl_pair.h **** 
  69:/usr/include/c++/11/bits/stl_pair.h **** namespace std _GLIBCXX_VISIBILITY(default)
  70:/usr/include/c++/11/bits/stl_pair.h **** {
  71:/usr/include/c++/11/bits/stl_pair.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  72:/usr/include/c++/11/bits/stl_pair.h **** 
  73:/usr/include/c++/11/bits/stl_pair.h ****   /**
  74:/usr/include/c++/11/bits/stl_pair.h ****    *  @addtogroup utilities
  75:/usr/include/c++/11/bits/stl_pair.h ****    *  @{
  76:/usr/include/c++/11/bits/stl_pair.h ****    */
  77:/usr/include/c++/11/bits/stl_pair.h **** 
  78:/usr/include/c++/11/bits/stl_pair.h **** #if __cplusplus >= 201103L
  79:/usr/include/c++/11/bits/stl_pair.h ****   /// Tag type for piecewise construction of std::pair objects.
  80:/usr/include/c++/11/bits/stl_pair.h ****   struct piecewise_construct_t { explicit piecewise_construct_t() = default; };
  81:/usr/include/c++/11/bits/stl_pair.h **** 
  82:/usr/include/c++/11/bits/stl_pair.h ****   /// Tag for piecewise construction of std::pair objects.
  83:/usr/include/c++/11/bits/stl_pair.h ****   _GLIBCXX17_INLINE constexpr piecewise_construct_t piecewise_construct =
  84:/usr/include/c++/11/bits/stl_pair.h ****     piecewise_construct_t();
  85:/usr/include/c++/11/bits/stl_pair.h **** 
  86:/usr/include/c++/11/bits/stl_pair.h ****   /// @cond undocumented
  87:/usr/include/c++/11/bits/stl_pair.h **** 
  88:/usr/include/c++/11/bits/stl_pair.h ****   // Forward declarations.
  89:/usr/include/c++/11/bits/stl_pair.h ****   template<typename...>
  90:/usr/include/c++/11/bits/stl_pair.h ****     class tuple;
  91:/usr/include/c++/11/bits/stl_pair.h **** 
  92:/usr/include/c++/11/bits/stl_pair.h ****   template<size_t...>
  93:/usr/include/c++/11/bits/stl_pair.h ****     struct _Index_tuple;
  94:/usr/include/c++/11/bits/stl_pair.h **** 
  95:/usr/include/c++/11/bits/stl_pair.h ****   // Concept utility functions, reused in conditionally-explicit
  96:/usr/include/c++/11/bits/stl_pair.h ****   // constructors.
  97:/usr/include/c++/11/bits/stl_pair.h ****   // See PR 70437, don't look at is_constructible or
  98:/usr/include/c++/11/bits/stl_pair.h ****   // is_convertible if the types are the same to
  99:/usr/include/c++/11/bits/stl_pair.h ****   // avoid querying those properties for incomplete types.
 100:/usr/include/c++/11/bits/stl_pair.h ****   template <bool, typename _T1, typename _T2>
 101:/usr/include/c++/11/bits/stl_pair.h ****     struct _PCC
 102:/usr/include/c++/11/bits/stl_pair.h ****     {
 103:/usr/include/c++/11/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 104:/usr/include/c++/11/bits/stl_pair.h ****       static constexpr bool _ConstructiblePair()
 105:/usr/include/c++/11/bits/stl_pair.h ****       {
 106:/usr/include/c++/11/bits/stl_pair.h **** 	return __and_<is_constructible<_T1, const _U1&>,
 107:/usr/include/c++/11/bits/stl_pair.h **** 		      is_constructible<_T2, const _U2&>>::value;
 108:/usr/include/c++/11/bits/stl_pair.h ****       }
 109:/usr/include/c++/11/bits/stl_pair.h **** 
 110:/usr/include/c++/11/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 111:/usr/include/c++/11/bits/stl_pair.h ****       static constexpr bool _ImplicitlyConvertiblePair()
 112:/usr/include/c++/11/bits/stl_pair.h ****       {
 113:/usr/include/c++/11/bits/stl_pair.h **** 	return __and_<is_convertible<const _U1&, _T1>,
 114:/usr/include/c++/11/bits/stl_pair.h **** 		      is_convertible<const _U2&, _T2>>::value;
 115:/usr/include/c++/11/bits/stl_pair.h ****       }
 116:/usr/include/c++/11/bits/stl_pair.h **** 
 117:/usr/include/c++/11/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 118:/usr/include/c++/11/bits/stl_pair.h ****       static constexpr bool _MoveConstructiblePair()
 119:/usr/include/c++/11/bits/stl_pair.h ****       {
 120:/usr/include/c++/11/bits/stl_pair.h **** 	return __and_<is_constructible<_T1, _U1&&>,
 121:/usr/include/c++/11/bits/stl_pair.h **** 		      is_constructible<_T2, _U2&&>>::value;
 122:/usr/include/c++/11/bits/stl_pair.h ****       }
 123:/usr/include/c++/11/bits/stl_pair.h **** 
 124:/usr/include/c++/11/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 125:/usr/include/c++/11/bits/stl_pair.h ****       static constexpr bool _ImplicitlyMoveConvertiblePair()
 126:/usr/include/c++/11/bits/stl_pair.h ****       {
 127:/usr/include/c++/11/bits/stl_pair.h **** 	return __and_<is_convertible<_U1&&, _T1>,
 128:/usr/include/c++/11/bits/stl_pair.h **** 		      is_convertible<_U2&&, _T2>>::value;
 129:/usr/include/c++/11/bits/stl_pair.h ****       }
 130:/usr/include/c++/11/bits/stl_pair.h **** 
 131:/usr/include/c++/11/bits/stl_pair.h ****       template <bool __implicit, typename _U1, typename _U2>
 132:/usr/include/c++/11/bits/stl_pair.h ****       static constexpr bool _CopyMovePair()
 133:/usr/include/c++/11/bits/stl_pair.h ****       {
 134:/usr/include/c++/11/bits/stl_pair.h **** 	using __do_converts = __and_<is_convertible<const _U1&, _T1>,
 135:/usr/include/c++/11/bits/stl_pair.h **** 				  is_convertible<_U2&&, _T2>>;
 136:/usr/include/c++/11/bits/stl_pair.h **** 	using __converts = typename conditional<__implicit,
 137:/usr/include/c++/11/bits/stl_pair.h **** 				       __do_converts,
 138:/usr/include/c++/11/bits/stl_pair.h **** 				       __not_<__do_converts>>::type;
 139:/usr/include/c++/11/bits/stl_pair.h **** 	return __and_<is_constructible<_T1, const _U1&>,
 140:/usr/include/c++/11/bits/stl_pair.h **** 		      is_constructible<_T2, _U2&&>,
 141:/usr/include/c++/11/bits/stl_pair.h **** 		      __converts
 142:/usr/include/c++/11/bits/stl_pair.h **** 		      >::value;
 143:/usr/include/c++/11/bits/stl_pair.h ****       }
 144:/usr/include/c++/11/bits/stl_pair.h **** 
 145:/usr/include/c++/11/bits/stl_pair.h ****       template <bool __implicit, typename _U1, typename _U2>
 146:/usr/include/c++/11/bits/stl_pair.h ****       static constexpr bool _MoveCopyPair()
 147:/usr/include/c++/11/bits/stl_pair.h ****       {
 148:/usr/include/c++/11/bits/stl_pair.h **** 	using __do_converts = __and_<is_convertible<_U1&&, _T1>,
 149:/usr/include/c++/11/bits/stl_pair.h **** 				  is_convertible<const _U2&, _T2>>;
 150:/usr/include/c++/11/bits/stl_pair.h **** 	using __converts = typename conditional<__implicit,
 151:/usr/include/c++/11/bits/stl_pair.h **** 				       __do_converts,
 152:/usr/include/c++/11/bits/stl_pair.h **** 				       __not_<__do_converts>>::type;
 153:/usr/include/c++/11/bits/stl_pair.h **** 	return __and_<is_constructible<_T1, _U1&&>,
 154:/usr/include/c++/11/bits/stl_pair.h **** 		      is_constructible<_T2, const _U2&&>,
 155:/usr/include/c++/11/bits/stl_pair.h **** 		      __converts
 156:/usr/include/c++/11/bits/stl_pair.h **** 		      >::value;
 157:/usr/include/c++/11/bits/stl_pair.h ****       }
 158:/usr/include/c++/11/bits/stl_pair.h ****   };
 159:/usr/include/c++/11/bits/stl_pair.h **** 
 160:/usr/include/c++/11/bits/stl_pair.h ****   template <typename _T1, typename _T2>
 161:/usr/include/c++/11/bits/stl_pair.h ****     struct _PCC<false, _T1, _T2>
 162:/usr/include/c++/11/bits/stl_pair.h ****     {
 163:/usr/include/c++/11/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 164:/usr/include/c++/11/bits/stl_pair.h ****       static constexpr bool _ConstructiblePair()
 165:/usr/include/c++/11/bits/stl_pair.h ****       {
 166:/usr/include/c++/11/bits/stl_pair.h **** 	return false;
 167:/usr/include/c++/11/bits/stl_pair.h ****       }
 168:/usr/include/c++/11/bits/stl_pair.h **** 
 169:/usr/include/c++/11/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 170:/usr/include/c++/11/bits/stl_pair.h ****       static constexpr bool _ImplicitlyConvertiblePair()
 171:/usr/include/c++/11/bits/stl_pair.h ****       {
 172:/usr/include/c++/11/bits/stl_pair.h **** 	return false;
 173:/usr/include/c++/11/bits/stl_pair.h ****       }
 174:/usr/include/c++/11/bits/stl_pair.h **** 
 175:/usr/include/c++/11/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 176:/usr/include/c++/11/bits/stl_pair.h ****       static constexpr bool _MoveConstructiblePair()
 177:/usr/include/c++/11/bits/stl_pair.h ****       {
 178:/usr/include/c++/11/bits/stl_pair.h **** 	return false;
 179:/usr/include/c++/11/bits/stl_pair.h ****       }
 180:/usr/include/c++/11/bits/stl_pair.h **** 
 181:/usr/include/c++/11/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 182:/usr/include/c++/11/bits/stl_pair.h ****       static constexpr bool _ImplicitlyMoveConvertiblePair()
 183:/usr/include/c++/11/bits/stl_pair.h ****       {
 184:/usr/include/c++/11/bits/stl_pair.h **** 	return false;
 185:/usr/include/c++/11/bits/stl_pair.h ****       }
 186:/usr/include/c++/11/bits/stl_pair.h ****   };
 187:/usr/include/c++/11/bits/stl_pair.h **** #endif // C++11
 188:/usr/include/c++/11/bits/stl_pair.h **** 
 189:/usr/include/c++/11/bits/stl_pair.h ****   template<typename _U1, typename _U2> class __pair_base
 190:/usr/include/c++/11/bits/stl_pair.h ****   {
 191:/usr/include/c++/11/bits/stl_pair.h **** #if __cplusplus >= 201103L
 192:/usr/include/c++/11/bits/stl_pair.h ****     template<typename _T1, typename _T2> friend struct pair;
 193:/usr/include/c++/11/bits/stl_pair.h ****     __pair_base() = default;
 194:/usr/include/c++/11/bits/stl_pair.h ****     ~__pair_base() = default;
 195:/usr/include/c++/11/bits/stl_pair.h ****     __pair_base(const __pair_base&) = default;
 196:/usr/include/c++/11/bits/stl_pair.h ****     __pair_base& operator=(const __pair_base&) = delete;
 197:/usr/include/c++/11/bits/stl_pair.h **** #endif // C++11
 198:/usr/include/c++/11/bits/stl_pair.h ****   };
 199:/usr/include/c++/11/bits/stl_pair.h **** 
 200:/usr/include/c++/11/bits/stl_pair.h ****   /// @endcond
 201:/usr/include/c++/11/bits/stl_pair.h **** 
 202:/usr/include/c++/11/bits/stl_pair.h ****  /**
 203:/usr/include/c++/11/bits/stl_pair.h ****    *  @brief Struct holding two objects of arbitrary type.
 204:/usr/include/c++/11/bits/stl_pair.h ****    *
 205:/usr/include/c++/11/bits/stl_pair.h ****    *  @tparam _T1  Type of first object.
 206:/usr/include/c++/11/bits/stl_pair.h ****    *  @tparam _T2  Type of second object.
 207:/usr/include/c++/11/bits/stl_pair.h ****    *
 208:/usr/include/c++/11/bits/stl_pair.h ****    *  <https://gcc.gnu.org/onlinedocs/libstdc++/manual/utilities.html>
 209:/usr/include/c++/11/bits/stl_pair.h ****    */
 210:/usr/include/c++/11/bits/stl_pair.h ****   template<typename _T1, typename _T2>
 211:/usr/include/c++/11/bits/stl_pair.h ****     struct pair
 3531              		.loc 13 211 12
 3532              		.cfi_startproc
 3533 0000 F30F1EFA 		endbr64
 3534 0004 55       		pushq	%rbp
 3535              		.cfi_def_cfa_offset 16
 3536              		.cfi_offset 6, -16
 3537 0005 4889E5   		movq	%rsp, %rbp
 3538              		.cfi_def_cfa_register 6
 3539 0008 4883EC10 		subq	$16, %rsp
 3540 000c 48897DF8 		movq	%rdi, -8(%rbp)
 3541              	.LBB35:
 3542              		.loc 13 211 12
 3543 0010 488B45F8 		movq	-8(%rbp), %rax
 3544 0014 4883C008 		addq	$8, %rax
 3545 0018 4889C7   		movq	%rax, %rdi
 3546 001b E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 3546      00
 3547              	.LBE35:
 3548 0020 90       		nop
 3549 0021 C9       		leave
 3550              		.cfi_def_cfa 7, 8
 3551 0022 C3       		ret
 3552              		.cfi_endproc
 3553              	.LFE1636:
 3555              		.weak	_ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev
 3556              		.set	_ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev,_ZNSt4pairIiNSt7__cxx11
 3557              		.section	.text._ZSt8_DestroyISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvPT_,"
 3558              		.weak	_ZSt8_DestroyISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvPT_
 3560              	_ZSt8_DestroyISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvPT_:
 3561              	.LFB1634:
 146:/usr/include/c++/11/bits/stl_construct.h ****     {
 3562              		.loc 8 146 5
 3563              		.cfi_startproc
 3564 0000 F30F1EFA 		endbr64
 3565 0004 55       		pushq	%rbp
 3566              		.cfi_def_cfa_offset 16
 3567              		.cfi_offset 6, -16
 3568 0005 4889E5   		movq	%rsp, %rbp
 3569              		.cfi_def_cfa_register 6
 3570 0008 4883EC10 		subq	$16, %rsp
 3571 000c 48897DF8 		movq	%rdi, -8(%rbp)
 151:/usr/include/c++/11/bits/stl_construct.h **** #endif
 3572              		.loc 8 151 22
 3573 0010 488B45F8 		movq	-8(%rbp), %rax
 3574 0014 4889C7   		movq	%rax, %rdi
 3575 0017 E8000000 		call	_ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev@PLT
 3575      00
 153:/usr/include/c++/11/bits/stl_construct.h **** 
 3576              		.loc 8 153 5
 3577 001c 90       		nop
 3578 001d C9       		leave
 3579              		.cfi_def_cfa 7, 8
 3580 001e C3       		ret
 3581              		.cfi_endproc
 3582              	.LFE1634:
 3584              		.weak	_ZTVN8UnitTest15XmlTestReporterE
 3585              		.section	.data.rel.ro._ZTVN8UnitTest15XmlTestReporterE,"awG",@progbits,_ZTVN8UnitTest15XmlTestRepo
 3586              		.align 8
 3589              	_ZTVN8UnitTest15XmlTestReporterE:
 3590 0000 00000000 		.quad	0
 3590      00000000 
 3591 0008 00000000 		.quad	_ZTIN8UnitTest15XmlTestReporterE
 3591      00000000 
 3592 0010 00000000 		.quad	_ZN8UnitTest15XmlTestReporterD1Ev
 3592      00000000 
 3593 0018 00000000 		.quad	_ZN8UnitTest15XmlTestReporterD0Ev
 3593      00000000 
 3594 0020 00000000 		.quad	_ZN8UnitTest20DeferredTestReporter15ReportTestStartERKNS_11TestDetailsE
 3594      00000000 
 3595 0028 00000000 		.quad	_ZN8UnitTest20DeferredTestReporter13ReportFailureERKNS_11TestDetailsEPKc
 3595      00000000 
 3596 0030 00000000 		.quad	_ZN8UnitTest20DeferredTestReporter16ReportTestFinishERKNS_11TestDetailsEf
 3596      00000000 
 3597 0038 00000000 		.quad	_ZN8UnitTest15XmlTestReporter13ReportSummaryEiiif
 3597      00000000 
 3598              		.section	.text._ZN8UnitTest15XmlTestReporterD2Ev,"axG",@progbits,_ZN8UnitTest15XmlTestReporterD5Ev
 3599              		.align 2
 3600              		.weak	_ZN8UnitTest15XmlTestReporterD2Ev
 3602              	_ZN8UnitTest15XmlTestReporterD2Ev:
 3603              	.LFB1639:
 3604              		.file 14 "XmlTestReporter.h"
   1:XmlTestReporter.h **** #ifndef UNITTEST_XMLTESTREPORTER_H
   2:XmlTestReporter.h **** #define UNITTEST_XMLTESTREPORTER_H
   3:XmlTestReporter.h **** 
   4:XmlTestReporter.h **** #include "DeferredTestReporter.h"
   5:XmlTestReporter.h **** 
   6:XmlTestReporter.h **** #include <iosfwd>
   7:XmlTestReporter.h **** 
   8:XmlTestReporter.h **** namespace UnitTest
   9:XmlTestReporter.h **** {
  10:XmlTestReporter.h **** 
  11:XmlTestReporter.h **** class XmlTestReporter : public DeferredTestReporter
 3605              		.loc 14 11 7
 3606              		.cfi_startproc
 3607 0000 F30F1EFA 		endbr64
 3608 0004 55       		pushq	%rbp
 3609              		.cfi_def_cfa_offset 16
 3610              		.cfi_offset 6, -16
 3611 0005 4889E5   		movq	%rsp, %rbp
 3612              		.cfi_def_cfa_register 6
 3613 0008 4883EC10 		subq	$16, %rsp
 3614 000c 48897DF8 		movq	%rdi, -8(%rbp)
 3615              	.LBB36:
 3616              		.loc 14 11 7
 3617 0010 488B0500 		movq	_ZTVN8UnitTest15XmlTestReporterE@GOTPCREL(%rip), %rax
 3617      000000
 3618 0017 488D5010 		leaq	16(%rax), %rdx
 3619 001b 488B45F8 		movq	-8(%rbp), %rax
 3620 001f 488910   		movq	%rdx, (%rax)
 3621 0022 488B45F8 		movq	-8(%rbp), %rax
 3622 0026 4889C7   		movq	%rax, %rdi
 3623 0029 E8000000 		call	_ZN8UnitTest20DeferredTestReporterD2Ev@PLT
 3623      00
 3624              	.LBE36:
 3625 002e 90       		nop
 3626 002f C9       		leave
 3627              		.cfi_def_cfa 7, 8
 3628 0030 C3       		ret
 3629              		.cfi_endproc
 3630              	.LFE1639:
 3632              		.weak	_ZN8UnitTest15XmlTestReporterD1Ev
 3633              		.set	_ZN8UnitTest15XmlTestReporterD1Ev,_ZN8UnitTest15XmlTestReporterD2Ev
 3634              		.section	.text._ZN8UnitTest15XmlTestReporterD0Ev,"axG",@progbits,_ZN8UnitTest15XmlTestReporterD5Ev
 3635              		.align 2
 3636              		.weak	_ZN8UnitTest15XmlTestReporterD0Ev
 3638              	_ZN8UnitTest15XmlTestReporterD0Ev:
 3639              	.LFB1641:
 3640              		.loc 14 11 7
 3641              		.cfi_startproc
 3642              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 3643              		.cfi_lsda 0x1b,.LLSDA1641
 3644 0000 F30F1EFA 		endbr64
 3645 0004 55       		pushq	%rbp
 3646              		.cfi_def_cfa_offset 16
 3647              		.cfi_offset 6, -16
 3648 0005 4889E5   		movq	%rsp, %rbp
 3649              		.cfi_def_cfa_register 6
 3650 0008 53       		pushq	%rbx
 3651 0009 4883EC18 		subq	$24, %rsp
 3652              		.cfi_offset 3, -24
 3653 000d 48897DE8 		movq	%rdi, -24(%rbp)
 3654              		.loc 14 11 7
 3655 0011 488B45E8 		movq	-24(%rbp), %rax
 3656 0015 4889C7   		movq	%rax, %rdi
 3657              	.LEHB49:
 3658 0018 E8000000 		call	_ZN8UnitTest15XmlTestReporterD1Ev@PLT
 3658      00
 3659              	.LEHE49:
 3660              		.loc 14 11 7 is_stmt 0 discriminator 2
 3661 001d 488B45E8 		movq	-24(%rbp), %rax
 3662 0021 4889C7   		movq	%rax, %rdi
 3663 0024 E8000000 		call	_ZdlPv@PLT
 3663      00
 3664 0029 EB1E     		jmp	.L181
 3665              	.L180:
 3666 002b F30F1EFA 		endbr64
 3667              		.loc 14 11 7
 3668 002f 4889C3   		movq	%rax, %rbx
 3669 0032 488B45E8 		movq	-24(%rbp), %rax
 3670 0036 4889C7   		movq	%rax, %rdi
 3671 0039 E8000000 		call	_ZdlPv@PLT
 3671      00
 3672 003e 4889D8   		movq	%rbx, %rax
 3673 0041 4889C7   		movq	%rax, %rdi
 3674              	.LEHB50:
 3675 0044 E8000000 		call	_Unwind_Resume@PLT
 3675      00
 3676              	.LEHE50:
 3677              	.L181:
 3678 0049 488B5DF8 		movq	-8(%rbp), %rbx
 3679 004d C9       		leave
 3680              		.cfi_def_cfa 7, 8
 3681 004e C3       		ret
 3682              		.cfi_endproc
 3683              	.LFE1641:
 3684              		.section	.gcc_except_table
 3685              	.LLSDA1641:
 3686 011d FF       		.byte	0xff
 3687 011e FF       		.byte	0xff
 3688 011f 01       		.byte	0x1
 3689 0120 08       		.uleb128 .LLSDACSE1641-.LLSDACSB1641
 3690              	.LLSDACSB1641:
 3691 0121 18       		.uleb128 .LEHB49-.LFB1641
 3692 0122 05       		.uleb128 .LEHE49-.LEHB49
 3693 0123 2B       		.uleb128 .L180-.LFB1641
 3694 0124 00       		.uleb128 0
 3695 0125 44       		.uleb128 .LEHB50-.LFB1641
 3696 0126 05       		.uleb128 .LEHE50-.LEHB50
 3697 0127 00       		.uleb128 0
 3698 0128 00       		.uleb128 0
 3699              	.LLSDACSE1641:
 3700              		.section	.text._ZN8UnitTest15XmlTestReporterD0Ev,"axG",@progbits,_ZN8UnitTest15XmlTestReporterD5Ev
 3702              		.weak	_ZTIN8UnitTest15XmlTestReporterE
 3703              		.section	.data.rel.ro._ZTIN8UnitTest15XmlTestReporterE,"awG",@progbits,_ZTIN8UnitTest15XmlTestRepo
 3704              		.align 8
 3707              	_ZTIN8UnitTest15XmlTestReporterE:
 3708 0000 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 3708      00000000 
 3709 0008 00000000 		.quad	_ZTSN8UnitTest15XmlTestReporterE
 3709      00000000 
 3710 0010 00000000 		.quad	_ZTIN8UnitTest20DeferredTestReporterE
 3710      00000000 
 3711              		.weak	_ZTSN8UnitTest15XmlTestReporterE
 3712              		.section	.rodata._ZTSN8UnitTest15XmlTestReporterE,"aG",@progbits,_ZTSN8UnitTest15XmlTestReporterE,
 3713              		.align 16
 3716              	_ZTSN8UnitTest15XmlTestReporterE:
 3717 0000 4E38556E 		.string	"N8UnitTest15XmlTestReporterE"
 3717      69745465 
 3717      73743135 
 3717      586D6C54 
 3717      65737452 
 3718              		.text
 3720              	_Z41__static_initialization_and_destruction_0ii:
 3721              	.LFB1642:
 126:XmlTestReporter.cpp **** 
 127:XmlTestReporter.cpp **** }
 3722              		.loc 1 127 1 is_stmt 1
 3723              		.cfi_startproc
 3724 0b88 F30F1EFA 		endbr64
 3725 0b8c 55       		pushq	%rbp
 3726              		.cfi_def_cfa_offset 16
 3727              		.cfi_offset 6, -16
 3728 0b8d 4889E5   		movq	%rsp, %rbp
 3729              		.cfi_def_cfa_register 6
 3730 0b90 4883EC10 		subq	$16, %rsp
 3731 0b94 897DFC   		movl	%edi, -4(%rbp)
 3732 0b97 8975F8   		movl	%esi, -8(%rbp)
 3733              		.loc 1 127 1
 3734 0b9a 837DFC01 		cmpl	$1, -4(%rbp)
 3735 0b9e 753B     		jne	.L184
 3736              		.loc 1 127 1 is_stmt 0 discriminator 1
 3737 0ba0 817DF8FF 		cmpl	$65535, -8(%rbp)
 3737      FF0000
 3738 0ba7 7532     		jne	.L184
 3739              		.file 15 "/usr/include/c++/11/iostream"
   1:/usr/include/c++/11/iostream **** // Standard iostream objects -*- C++ -*-
   2:/usr/include/c++/11/iostream **** 
   3:/usr/include/c++/11/iostream **** // Copyright (C) 1997-2021 Free Software Foundation, Inc.
   4:/usr/include/c++/11/iostream **** //
   5:/usr/include/c++/11/iostream **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/11/iostream **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/11/iostream **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/11/iostream **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/11/iostream **** // any later version.
  10:/usr/include/c++/11/iostream **** 
  11:/usr/include/c++/11/iostream **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/11/iostream **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/11/iostream **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/11/iostream **** // GNU General Public License for more details.
  15:/usr/include/c++/11/iostream **** 
  16:/usr/include/c++/11/iostream **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/11/iostream **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/11/iostream **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/11/iostream **** 
  20:/usr/include/c++/11/iostream **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/11/iostream **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/11/iostream **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/11/iostream **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/11/iostream **** 
  25:/usr/include/c++/11/iostream **** /** @file include/iostream
  26:/usr/include/c++/11/iostream ****  *  This is a Standard C++ Library header.
  27:/usr/include/c++/11/iostream ****  */
  28:/usr/include/c++/11/iostream **** 
  29:/usr/include/c++/11/iostream **** //
  30:/usr/include/c++/11/iostream **** // ISO C++ 14882: 27.3  Standard iostream objects
  31:/usr/include/c++/11/iostream **** //
  32:/usr/include/c++/11/iostream **** 
  33:/usr/include/c++/11/iostream **** #ifndef _GLIBCXX_IOSTREAM
  34:/usr/include/c++/11/iostream **** #define _GLIBCXX_IOSTREAM 1
  35:/usr/include/c++/11/iostream **** 
  36:/usr/include/c++/11/iostream **** #pragma GCC system_header
  37:/usr/include/c++/11/iostream **** 
  38:/usr/include/c++/11/iostream **** #include <bits/c++config.h>
  39:/usr/include/c++/11/iostream **** #include <ostream>
  40:/usr/include/c++/11/iostream **** #include <istream>
  41:/usr/include/c++/11/iostream **** 
  42:/usr/include/c++/11/iostream **** namespace std _GLIBCXX_VISIBILITY(default)
  43:/usr/include/c++/11/iostream **** {
  44:/usr/include/c++/11/iostream **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  45:/usr/include/c++/11/iostream **** 
  46:/usr/include/c++/11/iostream ****   /**
  47:/usr/include/c++/11/iostream ****    *  @name Standard Stream Objects
  48:/usr/include/c++/11/iostream ****    *
  49:/usr/include/c++/11/iostream ****    *  The &lt;iostream&gt; header declares the eight <em>standard stream
  50:/usr/include/c++/11/iostream ****    *  objects</em>.  For other declarations, see
  51:/usr/include/c++/11/iostream ****    *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/io.html
  52:/usr/include/c++/11/iostream ****    *  and the @link iosfwd I/O forward declarations @endlink
  53:/usr/include/c++/11/iostream ****    *
  54:/usr/include/c++/11/iostream ****    *  They are required by default to cooperate with the global C
  55:/usr/include/c++/11/iostream ****    *  library's @c FILE streams, and to be available during program
  56:/usr/include/c++/11/iostream ****    *  startup and termination. For more information, see the section of the
  57:/usr/include/c++/11/iostream ****    *  manual linked to above.
  58:/usr/include/c++/11/iostream ****   */
  59:/usr/include/c++/11/iostream ****   ///@{
  60:/usr/include/c++/11/iostream ****   extern istream cin;		/// Linked to standard input
  61:/usr/include/c++/11/iostream ****   extern ostream cout;		/// Linked to standard output
  62:/usr/include/c++/11/iostream ****   extern ostream cerr;		/// Linked to standard error (unbuffered)
  63:/usr/include/c++/11/iostream ****   extern ostream clog;		/// Linked to standard error (buffered)
  64:/usr/include/c++/11/iostream **** 
  65:/usr/include/c++/11/iostream **** #ifdef _GLIBCXX_USE_WCHAR_T
  66:/usr/include/c++/11/iostream ****   extern wistream wcin;		/// Linked to standard input
  67:/usr/include/c++/11/iostream ****   extern wostream wcout;	/// Linked to standard output
  68:/usr/include/c++/11/iostream ****   extern wostream wcerr;	/// Linked to standard error (unbuffered)
  69:/usr/include/c++/11/iostream ****   extern wostream wclog;	/// Linked to standard error (buffered)
  70:/usr/include/c++/11/iostream **** #endif
  71:/usr/include/c++/11/iostream ****   ///@}
  72:/usr/include/c++/11/iostream **** 
  73:/usr/include/c++/11/iostream ****   // For construction of filebuffers for cout, cin, cerr, clog et. al.
  74:/usr/include/c++/11/iostream ****   static ios_base::Init __ioinit;
 3740              		.loc 15 74 25 is_stmt 1
 3741 0ba9 488D0500 		leaq	_ZStL8__ioinit(%rip), %rax
 3741      000000
 3742 0bb0 4889C7   		movq	%rax, %rdi
 3743 0bb3 E8000000 		call	_ZNSt8ios_base4InitC1Ev@PLT
 3743      00
 3744 0bb8 488D0500 		leaq	__dso_handle(%rip), %rax
 3744      000000
 3745 0bbf 4889C2   		movq	%rax, %rdx
 3746 0bc2 488D0500 		leaq	_ZStL8__ioinit(%rip), %rax
 3746      000000
 3747 0bc9 4889C6   		movq	%rax, %rsi
 3748 0bcc 488B0500 		movq	_ZNSt8ios_base4InitD1Ev@GOTPCREL(%rip), %rax
 3748      000000
 3749 0bd3 4889C7   		movq	%rax, %rdi
 3750 0bd6 E8000000 		call	__cxa_atexit@PLT
 3750      00
 3751              	.L184:
 3752              		.loc 1 127 1
 3753 0bdb 90       		nop
 3754 0bdc C9       		leave
 3755              		.cfi_def_cfa 7, 8
 3756 0bdd C3       		ret
 3757              		.cfi_endproc
 3758              	.LFE1642:
 3761              	_GLOBAL__sub_I_XmlTestReporter.cpp:
 3762              	.LFB1643:
 3763              		.loc 1 127 1
 3764              		.cfi_startproc
 3765 0bde F30F1EFA 		endbr64
 3766 0be2 55       		pushq	%rbp
 3767              		.cfi_def_cfa_offset 16
 3768              		.cfi_offset 6, -16
 3769 0be3 4889E5   		movq	%rsp, %rbp
 3770              		.cfi_def_cfa_register 6
 3771              		.loc 1 127 1
 3772 0be6 BEFFFF00 		movl	$65535, %esi
 3772      00
 3773 0beb BF010000 		movl	$1, %edi
 3773      00
 3774 0bf0 E893FFFF 		call	_Z41__static_initialization_and_destruction_0ii
 3774      FF
 3775 0bf5 5D       		popq	%rbp
 3776              		.cfi_def_cfa 7, 8
 3777 0bf6 C3       		ret
 3778              		.cfi_endproc
 3779              	.LFE1643:
 3781              		.section	.init_array,"aw"
 3782              		.align 8
 3783 0000 00000000 		.quad	_GLOBAL__sub_I_XmlTestReporter.cpp
 3783      00000000 
 3784              		.text
 3785              	.Letext0:
 3786              		.file 16 "/usr/include/c++/11/bits/cpp_type_traits.h"
 3787              		.file 17 "/usr/include/c++/11/bits/stl_iterator_base_types.h"
 3788              		.file 18 "/usr/include/c++/11/cwchar"
 3789              		.file 19 "/usr/include/c++/11/bits/char_traits.h"
 3790              		.file 20 "/usr/include/x86_64-linux-gnu/c++/11/bits/c++config.h"
 3791              		.file 21 "/usr/include/c++/11/clocale"
 3792              		.file 22 "/usr/include/c++/11/bits/basic_string.h"
 3793              		.file 23 "/usr/include/c++/11/bits/basic_string.tcc"
 3794              		.file 24 "/usr/include/c++/11/sstream"
 3795              		.file 25 "/usr/include/c++/11/bits/vector.tcc"
 3796              		.file 26 "/usr/include/c++/11/bits/stringfwd.h"
 3797              		.file 27 "/usr/include/c++/11/bits/ios_base.h"
 3798              		.file 28 "/usr/include/c++/11/cwctype"
 3799              		.file 29 "/usr/include/c++/11/bits/ostream.tcc"
 3800              		.file 30 "/usr/include/c++/11/ostream"
 3801              		.file 31 "/usr/include/c++/11/iosfwd"
 3802              		.file 32 "/usr/include/c++/11/bits/functexcept.h"
 3803              		.file 33 "/usr/include/c++/11/bits/stl_iterator_base_funcs.h"
 3804              		.file 34 "/usr/include/c++/11/debug/debug.h"
 3805              		.file 35 "/usr/include/c++/11/bits/predefined_ops.h"
 3806              		.file 36 "/usr/include/c++/11/ext/type_traits.h"
 3807              		.file 37 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h"
 3808              		.file 38 "<built-in>"
 3809              		.file 39 "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h"
 3810              		.file 40 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h"
 3811              		.file 41 "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h"
 3812              		.file 42 "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h"
 3813              		.file 43 "/usr/include/wchar.h"
 3814              		.file 44 "/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h"
 3815              		.file 45 "/usr/include/locale.h"
 3816              		.file 46 "/usr/include/x86_64-linux-gnu/bits/types.h"
 3817              		.file 47 "/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h"
 3818              		.file 48 "/usr/include/wctype.h"
 3819              		.file 49 "/usr/include/c++/11/new"
 21928              		.align 8
 21931              	DW.ref.__gxx_personality_v0:
 21932 0000 00000000 		.quad	__gxx_personality_v0
 21932      00000000 
 21933              		.hidden	__dso_handle
 21934              		.ident	"GCC: (Ubuntu 11.3.0-1ubuntu1~22.04) 11.3.0"
 21935              		.section	.note.GNU-stack,"",@progbits
 21936              		.section	.note.gnu.property,"a"
 21937              		.align 8
 21938 0000 04000000 		.long	1f - 0f
 21939 0004 10000000 		.long	4f - 1f
 21940 0008 05000000 		.long	5
 21941              	0:
 21942 000c 474E5500 		.string	"GNU"
 21943              	1:
 21944              		.align 8
 21945 0010 020000C0 		.long	0xc0000002
 21946 0014 04000000 		.long	3f - 2f
 21947              	2:
 21948 0018 03000000 		.long	0x3
 21949              	3:
 21950 001c 00000000 		.align 8
 21951              	4:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 XmlTestReporter.cpp
                             .bss:0000000000000000 _ZStL8__ioinit
     /tmp/ccVUdFNm.s:8      .text:0000000000000000 _ZN12_GLOBAL__N_111ReplaceCharERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcRKS5_
     /tmp/ccVUdFNm.s:80     .text:000000000000007b _ZN12_GLOBAL__N_19XmlEscapeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
     /tmp/ccVUdFNm.s:21931  .data.rel.local.DW.ref.__gxx_personality_v0:0000000000000000 DW.ref.__gxx_personality_v0
     /tmp/ccVUdFNm.s:475    .text:0000000000000388 _ZN12_GLOBAL__N_119BuildFailureMessageERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiS7_
     /tmp/ccVUdFNm.s:627    .text._ZN8UnitTest12TestReporterC2Ev:0000000000000000 _ZN8UnitTest12TestReporterC2Ev
     /tmp/ccVUdFNm.s:627    .text._ZN8UnitTest12TestReporterC2Ev:0000000000000000 _ZN8UnitTest12TestReporterC1Ev
     /tmp/ccVUdFNm.s:659    .text._ZN8UnitTest20DeferredTestReporterC2Ev:0000000000000000 _ZN8UnitTest20DeferredTestReporterC2Ev
     /tmp/ccVUdFNm.s:1651   .text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev:0000000000000000 _ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EEC1Ev
     /tmp/ccVUdFNm.s:659    .text._ZN8UnitTest20DeferredTestReporterC2Ev:0000000000000000 _ZN8UnitTest20DeferredTestReporterC1Ev
     /tmp/ccVUdFNm.s:737    .text._ZN8UnitTest20DeferredTestReporterD2Ev:0000000000000000 _ZN8UnitTest20DeferredTestReporterD2Ev
     /tmp/ccVUdFNm.s:1684   .text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED2Ev:0000000000000000 _ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED1Ev
     /tmp/ccVUdFNm.s:737    .text._ZN8UnitTest20DeferredTestReporterD2Ev:0000000000000000 _ZN8UnitTest20DeferredTestReporterD1Ev
     /tmp/ccVUdFNm.s:822    .text._ZN8UnitTest20DeferredTestReporterD0Ev:0000000000000000 _ZN8UnitTest20DeferredTestReporterD0Ev
     /tmp/ccVUdFNm.s:890    .text:00000000000004da _ZN8UnitTest15XmlTestReporterC2ERSo
     /tmp/ccVUdFNm.s:3589   .data.rel.ro._ZTVN8UnitTest15XmlTestReporterE:0000000000000000 _ZTVN8UnitTest15XmlTestReporterE
     /tmp/ccVUdFNm.s:890    .text:00000000000004da _ZN8UnitTest15XmlTestReporterC1ERSo
     /tmp/ccVUdFNm.s:930    .text:000000000000051c _ZN8UnitTest15XmlTestReporter13ReportSummaryEiiif
     /tmp/ccVUdFNm.s:1081   .text:000000000000069a _ZN8UnitTest15XmlTestReporter13AddXmlElementERSoPKc
     /tmp/ccVUdFNm.s:1152   .text:0000000000000726 _ZN8UnitTest15XmlTestReporter12BeginResultsERSoiiif
     /tmp/ccVUdFNm.s:1772   .text._ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE5beginEv:0000000000000000 _ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE5beginEv
     /tmp/ccVUdFNm.s:1928   .text._ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEdeEv:0000000000000000 _ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEdeEv
     /tmp/ccVUdFNm.s:1298   .text:0000000000000890 _ZN8UnitTest15XmlTestReporter9BeginTestERSoRKNS_18DeferredTestResultE
     /tmp/ccVUdFNm.s:1953   .text._ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEptEv:0000000000000000 _ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEptEv
     /tmp/ccVUdFNm.s:1441   .text:00000000000009d4 _ZN8UnitTest15XmlTestReporter10AddFailureERSoRKNS_18DeferredTestResultE
     /tmp/ccVUdFNm.s:1388   .text:000000000000097e _ZN8UnitTest15XmlTestReporter7EndTestERSoRKNS_18DeferredTestResultE
     /tmp/ccVUdFNm.s:1897   .text._ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEppEv:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEppEv
     /tmp/ccVUdFNm.s:1813   .text._ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE3endEv:0000000000000000 _ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE3endEv
     /tmp/ccVUdFNm.s:1854   .text._ZN9__gnu_cxxneIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_:0000000000000000 _ZN9__gnu_cxxneIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_
     /tmp/ccVUdFNm.s:1260   .text:0000000000000862 _ZN8UnitTest15XmlTestReporter10EndResultsERSo
     /tmp/ccVUdFNm.s:1978   .text._ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE5beginEv:0000000000000000 _ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE5beginEv
     /tmp/ccVUdFNm.s:2133   .text._ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEptEv:0000000000000000 _ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEptEv
     /tmp/ccVUdFNm.s:2102   .text._ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEppEv:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEppEv
     /tmp/ccVUdFNm.s:2019   .text._ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE3endEv:0000000000000000 _ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE3endEv
     /tmp/ccVUdFNm.s:2060   .text._ZN9__gnu_cxxneIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEEbRKNS_17__normal_iteratorIT_T0_EESJ_:0000000000000000 _ZN9__gnu_cxxneIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEEbRKNS_17__normal_iteratorIT_T0_EESJ_
     /tmp/ccVUdFNm.s:1651   .text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev:0000000000000000 _ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev
     /tmp/ccVUdFNm.s:2189   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev
     /tmp/ccVUdFNm.s:1684   .text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED2Ev:0000000000000000 _ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED2Ev
     /tmp/ccVUdFNm.s:2308   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv
     /tmp/ccVUdFNm.s:2331   .text._ZSt8_DestroyIPN8UnitTest18DeferredTestResultES1_EvT_S3_RSaIT0_E:0000000000000000 _ZSt8_DestroyIPN8UnitTest18DeferredTestResultES1_EvT_S3_RSaIT0_E
     /tmp/ccVUdFNm.s:2221   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED2Ev:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED2Ev
     /tmp/ccVUdFNm.s:2364   .text._ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC2ERKS4_:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC1ERKS4_
     /tmp/ccVUdFNm.s:2397   .text._ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4baseEv:0000000000000000 _ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4baseEv
     /tmp/ccVUdFNm.s:2421   .text._ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEC2ERKSA_:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEC1ERKSA_
     /tmp/ccVUdFNm.s:2454   .text._ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEE4baseEv:0000000000000000 _ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEE4baseEv
     /tmp/ccVUdFNm.s:2158   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD2Ev:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD2Ev
     /tmp/ccVUdFNm.s:2513   .text._ZNSaIN8UnitTest18DeferredTestResultEED2Ev:0000000000000000 _ZNSaIN8UnitTest18DeferredTestResultEED2Ev
     /tmp/ccVUdFNm.s:2158   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD2Ev:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD1Ev
     /tmp/ccVUdFNm.s:2478   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implC2Ev:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implC1Ev
     /tmp/ccVUdFNm.s:2189   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EEC1Ev
     /tmp/ccVUdFNm.s:2545   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE13_M_deallocateEPS1_m:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE13_M_deallocateEPS1_m
     /tmp/ccVUdFNm.s:2221   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED2Ev:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED1Ev
     /tmp/ccVUdFNm.s:2582   .text._ZSt8_DestroyIPN8UnitTest18DeferredTestResultEEvT_S3_:0000000000000000 _ZSt8_DestroyIPN8UnitTest18DeferredTestResultEEvT_S3_
     /tmp/ccVUdFNm.s:2364   .text._ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC2ERKS4_:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC2ERKS4_
     /tmp/ccVUdFNm.s:2421   .text._ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEC2ERKSA_:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEC2ERKSA_
     /tmp/ccVUdFNm.s:2478   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implC2Ev:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implC2Ev
     /tmp/ccVUdFNm.s:2614   .text._ZNSaIN8UnitTest18DeferredTestResultEEC2Ev:0000000000000000 _ZNSaIN8UnitTest18DeferredTestResultEEC2Ev
     /tmp/ccVUdFNm.s:2646   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE17_Vector_impl_dataC2Ev:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE17_Vector_impl_dataC2Ev
     /tmp/ccVUdFNm.s:2682   .text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED2Ev:0000000000000000 _ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED2Ev
     /tmp/ccVUdFNm.s:2513   .text._ZNSaIN8UnitTest18DeferredTestResultEED2Ev:0000000000000000 _ZNSaIN8UnitTest18DeferredTestResultEED1Ev
     /tmp/ccVUdFNm.s:2707   .text._ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEES2_E10deallocateERS3_PS2_m:0000000000000000 _ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEES2_E10deallocateERS3_PS2_m
     /tmp/ccVUdFNm.s:2740   .text._ZNSt12_Destroy_auxILb0EE9__destroyIPN8UnitTest18DeferredTestResultEEEvT_S5_:0000000000000000 _ZNSt12_Destroy_auxILb0EE9__destroyIPN8UnitTest18DeferredTestResultEEEvT_S5_
     /tmp/ccVUdFNm.s:2782   .text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEEC2Ev:0000000000000000 _ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEEC2Ev
     /tmp/ccVUdFNm.s:2614   .text._ZNSaIN8UnitTest18DeferredTestResultEEC2Ev:0000000000000000 _ZNSaIN8UnitTest18DeferredTestResultEEC1Ev
     /tmp/ccVUdFNm.s:2646   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE17_Vector_impl_dataC2Ev:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE17_Vector_impl_dataC1Ev
     /tmp/ccVUdFNm.s:2682   .text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED2Ev:0000000000000000 _ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED1Ev
     /tmp/ccVUdFNm.s:2807   .text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE10deallocateEPS2_m:0000000000000000 _ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE10deallocateEPS2_m
     /tmp/ccVUdFNm.s:2836   .text._ZSt11__addressofIN8UnitTest18DeferredTestResultEEPT_RS2_:0000000000000000 _ZSt11__addressofIN8UnitTest18DeferredTestResultEEPT_RS2_
     /tmp/ccVUdFNm.s:2986   .text._ZSt8_DestroyIN8UnitTest18DeferredTestResultEEvPT_:0000000000000000 _ZSt8_DestroyIN8UnitTest18DeferredTestResultEEvPT_
     /tmp/ccVUdFNm.s:2782   .text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEEC2Ev:0000000000000000 _ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEEC1Ev
     /tmp/ccVUdFNm.s:2861   .text._ZN8UnitTest18DeferredTestResultD2Ev:0000000000000000 _ZN8UnitTest18DeferredTestResultD2Ev
     /tmp/ccVUdFNm.s:3014   .text._ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2Ev:0000000000000000 _ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED1Ev
     /tmp/ccVUdFNm.s:2861   .text._ZN8UnitTest18DeferredTestResultD2Ev:0000000000000000 _ZN8UnitTest18DeferredTestResultD1Ev
     /tmp/ccVUdFNm.s:3014   .text._ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2Ev:0000000000000000 _ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2Ev
     /tmp/ccVUdFNm.s:3223   .text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE19_M_get_Tp_allocatorEv:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE19_M_get_Tp_allocatorEv
     /tmp/ccVUdFNm.s:3246   .text._ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_EvT_S9_RSaIT0_E:0000000000000000 _ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_EvT_S9_RSaIT0_E
     /tmp/ccVUdFNm.s:3133   .text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2Ev:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2Ev
     /tmp/ccVUdFNm.s:3102   .text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_Vector_implD2Ev:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_Vector_implD2Ev
     /tmp/ccVUdFNm.s:3278   .text._ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev:0000000000000000 _ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev
     /tmp/ccVUdFNm.s:3102   .text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_Vector_implD2Ev:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_Vector_implD1Ev
     /tmp/ccVUdFNm.s:3309   .text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE13_M_deallocateEPS7_m:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE13_M_deallocateEPS7_m
     /tmp/ccVUdFNm.s:3133   .text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2Ev:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED1Ev
     /tmp/ccVUdFNm.s:3346   .text._ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_:0000000000000000 _ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_
     /tmp/ccVUdFNm.s:3377   .text._ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev
     /tmp/ccVUdFNm.s:3278   .text._ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev:0000000000000000 _ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED1Ev
     /tmp/ccVUdFNm.s:3401   .text._ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEES8_E10deallocateERS9_PS8_m:0000000000000000 _ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEES8_E10deallocateERS9_PS8_m
     /tmp/ccVUdFNm.s:3433   .text._ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEvT_SB_:0000000000000000 _ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEvT_SB_
     /tmp/ccVUdFNm.s:3377   .text._ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED1Ev
     /tmp/ccVUdFNm.s:3475   .text._ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateEPS8_m:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateEPS8_m
     /tmp/ccVUdFNm.s:3504   .text._ZSt11__addressofISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT_RS8_:0000000000000000 _ZSt11__addressofISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT_RS8_
     /tmp/ccVUdFNm.s:3560   .text._ZSt8_DestroyISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvPT_:0000000000000000 _ZSt8_DestroyISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvPT_
     /tmp/ccVUdFNm.s:3528   .text._ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev:0000000000000000 _ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev
     /tmp/ccVUdFNm.s:3528   .text._ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev:0000000000000000 _ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev
     /tmp/ccVUdFNm.s:3707   .data.rel.ro._ZTIN8UnitTest15XmlTestReporterE:0000000000000000 _ZTIN8UnitTest15XmlTestReporterE
     /tmp/ccVUdFNm.s:3602   .text._ZN8UnitTest15XmlTestReporterD2Ev:0000000000000000 _ZN8UnitTest15XmlTestReporterD1Ev
     /tmp/ccVUdFNm.s:3638   .text._ZN8UnitTest15XmlTestReporterD0Ev:0000000000000000 _ZN8UnitTest15XmlTestReporterD0Ev
     /tmp/ccVUdFNm.s:3602   .text._ZN8UnitTest15XmlTestReporterD2Ev:0000000000000000 _ZN8UnitTest15XmlTestReporterD2Ev
     /tmp/ccVUdFNm.s:3716   .rodata._ZTSN8UnitTest15XmlTestReporterE:0000000000000000 _ZTSN8UnitTest15XmlTestReporterE
     /tmp/ccVUdFNm.s:3720   .text:0000000000000b88 _Z41__static_initialization_and_destruction_0ii
     /tmp/ccVUdFNm.s:3761   .text:0000000000000bde _GLOBAL__sub_I_XmlTestReporter.cpp
                           .group:0000000000000000 _ZN8UnitTest12TestReporterC5Ev
                           .group:0000000000000000 _ZN8UnitTest20DeferredTestReporterC5Ev
                           .group:0000000000000000 _ZN8UnitTest20DeferredTestReporterD5Ev
                           .group:0000000000000000 _ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EEC5Ev
                           .group:0000000000000000 _ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED5Ev
                           .group:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD5Ev
                           .group:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EEC5Ev
                           .group:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED5Ev
                           .group:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC5ERKS4_
                           .group:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEC5ERKSA_
                           .group:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implC5Ev
                           .group:0000000000000000 _ZNSaIN8UnitTest18DeferredTestResultEED5Ev
                           .group:0000000000000000 _ZNSaIN8UnitTest18DeferredTestResultEEC5Ev
                           .group:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE17_Vector_impl_dataC5Ev
                           .group:0000000000000000 _ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED5Ev
                           .group:0000000000000000 _ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEEC5Ev
                           .group:0000000000000000 _ZN8UnitTest18DeferredTestResultD5Ev
                           .group:0000000000000000 _ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED5Ev
                           .group:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_Vector_implD5Ev
                           .group:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED5Ev
                           .group:0000000000000000 _ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED5Ev
                           .group:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED5Ev
                           .group:0000000000000000 _ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED5Ev
                           .group:0000000000000000 _ZN8UnitTest15XmlTestReporterD5Ev

UNDEFINED SYMBOLS
_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcm
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEmmRKS4_
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_
_ZNSaIcEC1Ev
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev
_ZNSaIcED1Ev
_Unwind_Resume
__stack_chk_fail
__gxx_personality_v0
_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEC1Ev
_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKNSt7__cxx1112basic_stringIS4_S5_T1_EE
_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
_ZNSolsEi
_ZNKSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEE3strEv
_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev
_GLOBAL_OFFSET_TABLE_
_ZTVN8UnitTest12TestReporterE
_ZTVN8UnitTest20DeferredTestReporterE
_ZN8UnitTest12TestReporterD2Ev
_ZdlPv
_ZN8UnitTest20DeferredTestReporter10GetResultsEv
_ZNSolsEf
_ZN8UnitTest20DeferredTestReporter15ReportTestStartERKNS_11TestDetailsE
_ZN8UnitTest20DeferredTestReporter13ReportFailureERKNS_11TestDetailsEPKc
_ZN8UnitTest20DeferredTestReporter16ReportTestFinishERKNS_11TestDetailsEf
_ZTVN10__cxxabiv120__si_class_type_infoE
_ZTIN8UnitTest20DeferredTestReporterE
_ZNSt8ios_base4InitC1Ev
__dso_handle
_ZNSt8ios_base4InitD1Ev
__cxa_atexit
