   1              		.file	"DeferredTestResult.cpp"
   2              		.text
   3              	.Ltext0:
   4              		.file 0 "/home/pong/FPGALink/makestuff/libs/libutpp" "DeferredTestResult.cpp"
   5              		.section	.rodata
   6              	.LC0:
   7 0000 00       		.string	""
   8              		.text
   9              		.align 2
  10              		.globl	_ZN8UnitTest18DeferredTestResultC2Ev
  12              	_ZN8UnitTest18DeferredTestResultC2Ev:
  13              	.LFB929:
  14              		.file 1 "DeferredTestResult.cpp"
   1:DeferredTestResult.cpp **** #include "DeferredTestResult.h"
   2:DeferredTestResult.cpp **** #include "Config.h"
   3:DeferredTestResult.cpp **** 
   4:DeferredTestResult.cpp **** namespace UnitTest
   5:DeferredTestResult.cpp **** {
   6:DeferredTestResult.cpp **** 
   7:DeferredTestResult.cpp **** DeferredTestResult::DeferredTestResult()
  15              		.loc 1 7 1
  16              		.cfi_startproc
  17              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
  18              		.cfi_lsda 0x1b,.LLSDA929
  19 0000 F30F1EFA 		endbr64
  20 0004 55       		pushq	%rbp
  21              		.cfi_def_cfa_offset 16
  22              		.cfi_offset 6, -16
  23 0005 4889E5   		movq	%rsp, %rbp
  24              		.cfi_def_cfa_register 6
  25 0008 53       		pushq	%rbx
  26 0009 4883EC28 		subq	$40, %rsp
  27              		.cfi_offset 3, -24
  28 000d 48897DD8 		movq	%rdi, -40(%rbp)
  29              		.loc 1 7 1
  30 0011 64488B04 		movq	%fs:40, %rax
  30      25280000 
  30      00
  31 001a 488945E8 		movq	%rax, -24(%rbp)
  32 001e 31C0     		xorl	%eax, %eax
  33              	.LBB2:
   8:DeferredTestResult.cpp **** 	: suiteName("")
  34              		.loc 1 8 4
  35 0020 488B5DD8 		movq	-40(%rbp), %rbx
  36 0024 488D45E7 		leaq	-25(%rbp), %rax
  37 0028 4889C7   		movq	%rax, %rdi
  38 002b E8000000 		call	_ZNSaIcEC1Ev@PLT
  38      00
  39 0030 488D45E7 		leaq	-25(%rbp), %rax
  40 0034 4889C2   		movq	%rax, %rdx
  41 0037 488D0500 		leaq	.LC0(%rip), %rax
  41      000000
  42 003e 4889C6   		movq	%rax, %rsi
  43 0041 4889DF   		movq	%rbx, %rdi
  44              	.LEHB0:
  45 0044 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_@PLT
  45      00
  46              	.LEHE0:
  47              		.loc 1 8 4 is_stmt 0 discriminator 2
  48 0049 488D45E7 		leaq	-25(%rbp), %rax
  49 004d 4889C7   		movq	%rax, %rdi
  50 0050 E8000000 		call	_ZNSaIcED1Ev@PLT
  50      00
   9:DeferredTestResult.cpp **** 	, testName("")
  51              		.loc 1 9 4 is_stmt 1 discriminator 2
  52 0055 488B45D8 		movq	-40(%rbp), %rax
  53 0059 488D5820 		leaq	32(%rax), %rbx
  54 005d 488D45E7 		leaq	-25(%rbp), %rax
  55 0061 4889C7   		movq	%rax, %rdi
  56 0064 E8000000 		call	_ZNSaIcEC1Ev@PLT
  56      00
  57 0069 488D45E7 		leaq	-25(%rbp), %rax
  58 006d 4889C2   		movq	%rax, %rdx
  59 0070 488D0500 		leaq	.LC0(%rip), %rax
  59      000000
  60 0077 4889C6   		movq	%rax, %rsi
  61 007a 4889DF   		movq	%rbx, %rdi
  62              	.LEHB1:
  63 007d E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_@PLT
  63      00
  64              	.LEHE1:
  65 0082 488D45E7 		leaq	-25(%rbp), %rax
  66 0086 4889C7   		movq	%rax, %rdi
  67 0089 E8000000 		call	_ZNSaIcED1Ev@PLT
  67      00
  10:DeferredTestResult.cpp **** 	, failureFile("")
  68              		.loc 1 10 4 discriminator 2
  69 008e 488B45D8 		movq	-40(%rbp), %rax
  70 0092 488D5840 		leaq	64(%rax), %rbx
  71 0096 488D45E7 		leaq	-25(%rbp), %rax
  72 009a 4889C7   		movq	%rax, %rdi
  73 009d E8000000 		call	_ZNSaIcEC1Ev@PLT
  73      00
  74 00a2 488D45E7 		leaq	-25(%rbp), %rax
  75 00a6 4889C2   		movq	%rax, %rdx
  76 00a9 488D0500 		leaq	.LC0(%rip), %rax
  76      000000
  77 00b0 4889C6   		movq	%rax, %rsi
  78 00b3 4889DF   		movq	%rbx, %rdi
  79              	.LEHB2:
  80 00b6 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_@PLT
  80      00
  81              	.LEHE2:
  82 00bb 488D45E7 		leaq	-25(%rbp), %rax
  83 00bf 4889C7   		movq	%rax, %rdi
  84 00c2 E8000000 		call	_ZNSaIcED1Ev@PLT
  84      00
  11:DeferredTestResult.cpp **** 	, timeElapsed(0.0f)
  12:DeferredTestResult.cpp **** 	, failed(false)
  85              		.loc 1 12 16 discriminator 2
  86 00c7 488B45D8 		movq	-40(%rbp), %rax
  87 00cb 4883C060 		addq	$96, %rax
  88 00cf 4889C7   		movq	%rax, %rdi
  89              	.LEHB3:
  90 00d2 E8000000 		call	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EEC1Ev@PLT
  90      00
  91              	.LEHE3:
  11:DeferredTestResult.cpp **** 	, timeElapsed(0.0f)
  92              		.loc 1 11 4
  93 00d7 488B45D8 		movq	-40(%rbp), %rax
  94 00db 660FEFC0 		pxor	%xmm0, %xmm0
  95 00df F30F1140 		movss	%xmm0, 120(%rax)
  95      78
  96              		.loc 1 12 4
  97 00e4 488B45D8 		movq	-40(%rbp), %rax
  98 00e8 C6407C00 		movb	$0, 124(%rax)
  99              	.LBE2:
  13:DeferredTestResult.cpp **** {
  14:DeferredTestResult.cpp **** }
 100              		.loc 1 14 1
 101 00ec 90       		nop
 102 00ed 488B45E8 		movq	-24(%rbp), %rax
 103 00f1 64482B04 		subq	%fs:40, %rax
 103      25280000 
 103      00
 104 00fa 0F849000 		je	.L8
 104      0000
 105 0100 E9860000 		jmp	.L13
 105      00
 106              	.L9:
 107 0105 F30F1EFA 		endbr64
 108              	.LBB3:
   8:DeferredTestResult.cpp **** 	, testName("")
 109              		.loc 1 8 4
 110 0109 4889C3   		movq	%rax, %rbx
 111 010c 488D45E7 		leaq	-25(%rbp), %rax
 112 0110 4889C7   		movq	%rax, %rdi
 113 0113 E8000000 		call	_ZNSaIcED1Ev@PLT
 113      00
 114 0118 4889D8   		movq	%rbx, %rax
 115 011b 4889C7   		movq	%rax, %rdi
 116              	.LEHB4:
 117 011e E8000000 		call	_Unwind_Resume@PLT
 117      00
 118              	.LEHE4:
 119              	.L10:
 120 0123 F30F1EFA 		endbr64
   9:DeferredTestResult.cpp **** 	, failureFile("")
 121              		.loc 1 9 4
 122 0127 4889C3   		movq	%rax, %rbx
 123 012a 488D45E7 		leaq	-25(%rbp), %rax
 124 012e 4889C7   		movq	%rax, %rdi
 125 0131 E8000000 		call	_ZNSaIcED1Ev@PLT
 125      00
 126 0136 EB3C     		jmp	.L4
 127              	.L11:
 128 0138 F30F1EFA 		endbr64
  10:DeferredTestResult.cpp **** 	, timeElapsed(0.0f)
 129              		.loc 1 10 4
 130 013c 4889C3   		movq	%rax, %rbx
 131 013f 488D45E7 		leaq	-25(%rbp), %rax
 132 0143 4889C7   		movq	%rax, %rdi
 133 0146 E8000000 		call	_ZNSaIcED1Ev@PLT
 133      00
 134 014b EB17     		jmp	.L6
 135              	.L12:
 136 014d F30F1EFA 		endbr64
 137              		.loc 1 14 1
 138 0151 4889C3   		movq	%rax, %rbx
 139 0154 488B45D8 		movq	-40(%rbp), %rax
 140 0158 4883C040 		addq	$64, %rax
 141 015c 4889C7   		movq	%rax, %rdi
 142 015f E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 142      00
 143              	.L6:
 144 0164 488B45D8 		movq	-40(%rbp), %rax
 145 0168 4883C020 		addq	$32, %rax
 146 016c 4889C7   		movq	%rax, %rdi
 147 016f E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 147      00
 148              	.L4:
 149 0174 488B45D8 		movq	-40(%rbp), %rax
 150 0178 4889C7   		movq	%rax, %rdi
 151 017b E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 151      00
 152 0180 4889D8   		movq	%rbx, %rax
 153 0183 4889C7   		movq	%rax, %rdi
 154              	.LEHB5:
 155 0186 E8000000 		call	_Unwind_Resume@PLT
 155      00
 156              	.LEHE5:
 157              	.L13:
 158              	.LBE3:
 159 018b E8000000 		call	__stack_chk_fail@PLT
 159      00
 160              	.L8:
 161 0190 488B5DF8 		movq	-8(%rbp), %rbx
 162 0194 C9       		leave
 163              		.cfi_def_cfa 7, 8
 164 0195 C3       		ret
 165              		.cfi_endproc
 166              	.LFE929:
 167              		.globl	__gxx_personality_v0
 168              		.section	.gcc_except_table,"a",@progbits
 169              	.LLSDA929:
 170 0000 FF       		.byte	0xff
 171 0001 FF       		.byte	0xff
 172 0002 01       		.byte	0x1
 173 0003 20       		.uleb128 .LLSDACSE929-.LLSDACSB929
 174              	.LLSDACSB929:
 175 0004 44       		.uleb128 .LEHB0-.LFB929
 176 0005 05       		.uleb128 .LEHE0-.LEHB0
 177 0006 8502     		.uleb128 .L9-.LFB929
 178 0008 00       		.uleb128 0
 179 0009 7D       		.uleb128 .LEHB1-.LFB929
 180 000a 05       		.uleb128 .LEHE1-.LEHB1
 181 000b A302     		.uleb128 .L10-.LFB929
 182 000d 00       		.uleb128 0
 183 000e B601     		.uleb128 .LEHB2-.LFB929
 184 0010 05       		.uleb128 .LEHE2-.LEHB2
 185 0011 B802     		.uleb128 .L11-.LFB929
 186 0013 00       		.uleb128 0
 187 0014 D201     		.uleb128 .LEHB3-.LFB929
 188 0016 05       		.uleb128 .LEHE3-.LEHB3
 189 0017 CD02     		.uleb128 .L12-.LFB929
 190 0019 00       		.uleb128 0
 191 001a 9E02     		.uleb128 .LEHB4-.LFB929
 192 001c 05       		.uleb128 .LEHE4-.LEHB4
 193 001d 00       		.uleb128 0
 194 001e 00       		.uleb128 0
 195 001f 8603     		.uleb128 .LEHB5-.LFB929
 196 0021 05       		.uleb128 .LEHE5-.LEHB5
 197 0022 00       		.uleb128 0
 198 0023 00       		.uleb128 0
 199              	.LLSDACSE929:
 200              		.text
 202              		.globl	_ZN8UnitTest18DeferredTestResultC1Ev
 203              		.set	_ZN8UnitTest18DeferredTestResultC1Ev,_ZN8UnitTest18DeferredTestResultC2Ev
 204              		.align 2
 205              		.globl	_ZN8UnitTest18DeferredTestResultC2EPKcS2_
 207              	_ZN8UnitTest18DeferredTestResultC2EPKcS2_:
 208              	.LFB932:
  15:DeferredTestResult.cpp **** 
  16:DeferredTestResult.cpp **** DeferredTestResult::DeferredTestResult(char const* suite, char const* test)
 209              		.loc 1 16 1
 210              		.cfi_startproc
 211              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 212              		.cfi_lsda 0x1b,.LLSDA932
 213 0196 F30F1EFA 		endbr64
 214 019a 55       		pushq	%rbp
 215              		.cfi_def_cfa_offset 16
 216              		.cfi_offset 6, -16
 217 019b 4889E5   		movq	%rsp, %rbp
 218              		.cfi_def_cfa_register 6
 219 019e 53       		pushq	%rbx
 220 019f 4883EC38 		subq	$56, %rsp
 221              		.cfi_offset 3, -24
 222 01a3 48897DD8 		movq	%rdi, -40(%rbp)
 223 01a7 488975D0 		movq	%rsi, -48(%rbp)
 224 01ab 488955C8 		movq	%rdx, -56(%rbp)
 225              		.loc 1 16 1
 226 01af 64488B04 		movq	%fs:40, %rax
 226      25280000 
 226      00
 227 01b8 488945E8 		movq	%rax, -24(%rbp)
 228 01bc 31C0     		xorl	%eax, %eax
 229              	.LBB4:
  17:DeferredTestResult.cpp **** 	: suiteName(suite)
 230              		.loc 1 17 4
 231 01be 488B5DD8 		movq	-40(%rbp), %rbx
 232 01c2 488D45E7 		leaq	-25(%rbp), %rax
 233 01c6 4889C7   		movq	%rax, %rdi
 234 01c9 E8000000 		call	_ZNSaIcEC1Ev@PLT
 234      00
 235 01ce 488D55E7 		leaq	-25(%rbp), %rdx
 236 01d2 488B45D0 		movq	-48(%rbp), %rax
 237 01d6 4889C6   		movq	%rax, %rsi
 238 01d9 4889DF   		movq	%rbx, %rdi
 239              	.LEHB6:
 240 01dc E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_@PLT
 240      00
 241              	.LEHE6:
 242              		.loc 1 17 4 is_stmt 0 discriminator 2
 243 01e1 488D45E7 		leaq	-25(%rbp), %rax
 244 01e5 4889C7   		movq	%rax, %rdi
 245 01e8 E8000000 		call	_ZNSaIcED1Ev@PLT
 245      00
  18:DeferredTestResult.cpp **** 	, testName(test)
 246              		.loc 1 18 4 is_stmt 1 discriminator 2
 247 01ed 488B45D8 		movq	-40(%rbp), %rax
 248 01f1 488D5820 		leaq	32(%rax), %rbx
 249 01f5 488D45E7 		leaq	-25(%rbp), %rax
 250 01f9 4889C7   		movq	%rax, %rdi
 251 01fc E8000000 		call	_ZNSaIcEC1Ev@PLT
 251      00
 252 0201 488D55E7 		leaq	-25(%rbp), %rdx
 253 0205 488B45C8 		movq	-56(%rbp), %rax
 254 0209 4889C6   		movq	%rax, %rsi
 255 020c 4889DF   		movq	%rbx, %rdi
 256              	.LEHB7:
 257 020f E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_@PLT
 257      00
 258              	.LEHE7:
 259 0214 488D45E7 		leaq	-25(%rbp), %rax
 260 0218 4889C7   		movq	%rax, %rdi
 261 021b E8000000 		call	_ZNSaIcED1Ev@PLT
 261      00
  19:DeferredTestResult.cpp **** 	, failureFile("")
 262              		.loc 1 19 4 discriminator 2
 263 0220 488B45D8 		movq	-40(%rbp), %rax
 264 0224 488D5840 		leaq	64(%rax), %rbx
 265 0228 488D45E7 		leaq	-25(%rbp), %rax
 266 022c 4889C7   		movq	%rax, %rdi
 267 022f E8000000 		call	_ZNSaIcEC1Ev@PLT
 267      00
 268 0234 488D45E7 		leaq	-25(%rbp), %rax
 269 0238 4889C2   		movq	%rax, %rdx
 270 023b 488D0500 		leaq	.LC0(%rip), %rax
 270      000000
 271 0242 4889C6   		movq	%rax, %rsi
 272 0245 4889DF   		movq	%rbx, %rdi
 273              	.LEHB8:
 274 0248 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_@PLT
 274      00
 275              	.LEHE8:
 276 024d 488D45E7 		leaq	-25(%rbp), %rax
 277 0251 4889C7   		movq	%rax, %rdi
 278 0254 E8000000 		call	_ZNSaIcED1Ev@PLT
 278      00
  20:DeferredTestResult.cpp **** 	, timeElapsed(0.0f)
  21:DeferredTestResult.cpp **** 	, failed(false)
 279              		.loc 1 21 16 discriminator 2
 280 0259 488B45D8 		movq	-40(%rbp), %rax
 281 025d 4883C060 		addq	$96, %rax
 282 0261 4889C7   		movq	%rax, %rdi
 283              	.LEHB9:
 284 0264 E8000000 		call	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EEC1Ev@PLT
 284      00
 285              	.LEHE9:
  20:DeferredTestResult.cpp **** 	, timeElapsed(0.0f)
 286              		.loc 1 20 4
 287 0269 488B45D8 		movq	-40(%rbp), %rax
 288 026d 660FEFC0 		pxor	%xmm0, %xmm0
 289 0271 F30F1140 		movss	%xmm0, 120(%rax)
 289      78
 290              		.loc 1 21 4
 291 0276 488B45D8 		movq	-40(%rbp), %rax
 292 027a C6407C00 		movb	$0, 124(%rax)
 293              	.LBE4:
  22:DeferredTestResult.cpp **** {
  23:DeferredTestResult.cpp **** }
 294              		.loc 1 23 1
 295 027e 90       		nop
 296 027f 488B45E8 		movq	-24(%rbp), %rax
 297 0283 64482B04 		subq	%fs:40, %rax
 297      25280000 
 297      00
 298 028c 0F849000 		je	.L21
 298      0000
 299 0292 E9860000 		jmp	.L26
 299      00
 300              	.L22:
 301 0297 F30F1EFA 		endbr64
 302              	.LBB5:
  17:DeferredTestResult.cpp **** 	, testName(test)
 303              		.loc 1 17 4
 304 029b 4889C3   		movq	%rax, %rbx
 305 029e 488D45E7 		leaq	-25(%rbp), %rax
 306 02a2 4889C7   		movq	%rax, %rdi
 307 02a5 E8000000 		call	_ZNSaIcED1Ev@PLT
 307      00
 308 02aa 4889D8   		movq	%rbx, %rax
 309 02ad 4889C7   		movq	%rax, %rdi
 310              	.LEHB10:
 311 02b0 E8000000 		call	_Unwind_Resume@PLT
 311      00
 312              	.LEHE10:
 313              	.L23:
 314 02b5 F30F1EFA 		endbr64
  18:DeferredTestResult.cpp **** 	, failureFile("")
 315              		.loc 1 18 4
 316 02b9 4889C3   		movq	%rax, %rbx
 317 02bc 488D45E7 		leaq	-25(%rbp), %rax
 318 02c0 4889C7   		movq	%rax, %rdi
 319 02c3 E8000000 		call	_ZNSaIcED1Ev@PLT
 319      00
 320 02c8 EB3C     		jmp	.L17
 321              	.L24:
 322 02ca F30F1EFA 		endbr64
  19:DeferredTestResult.cpp **** 	, timeElapsed(0.0f)
 323              		.loc 1 19 4
 324 02ce 4889C3   		movq	%rax, %rbx
 325 02d1 488D45E7 		leaq	-25(%rbp), %rax
 326 02d5 4889C7   		movq	%rax, %rdi
 327 02d8 E8000000 		call	_ZNSaIcED1Ev@PLT
 327      00
 328 02dd EB17     		jmp	.L19
 329              	.L25:
 330 02df F30F1EFA 		endbr64
 331              		.loc 1 23 1
 332 02e3 4889C3   		movq	%rax, %rbx
 333 02e6 488B45D8 		movq	-40(%rbp), %rax
 334 02ea 4883C040 		addq	$64, %rax
 335 02ee 4889C7   		movq	%rax, %rdi
 336 02f1 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 336      00
 337              	.L19:
 338 02f6 488B45D8 		movq	-40(%rbp), %rax
 339 02fa 4883C020 		addq	$32, %rax
 340 02fe 4889C7   		movq	%rax, %rdi
 341 0301 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 341      00
 342              	.L17:
 343 0306 488B45D8 		movq	-40(%rbp), %rax
 344 030a 4889C7   		movq	%rax, %rdi
 345 030d E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 345      00
 346 0312 4889D8   		movq	%rbx, %rax
 347 0315 4889C7   		movq	%rax, %rdi
 348              	.LEHB11:
 349 0318 E8000000 		call	_Unwind_Resume@PLT
 349      00
 350              	.LEHE11:
 351              	.L26:
 352              	.LBE5:
 353 031d E8000000 		call	__stack_chk_fail@PLT
 353      00
 354              	.L21:
 355 0322 488B5DF8 		movq	-8(%rbp), %rbx
 356 0326 C9       		leave
 357              		.cfi_def_cfa 7, 8
 358 0327 C3       		ret
 359              		.cfi_endproc
 360              	.LFE932:
 361              		.section	.gcc_except_table
 362              	.LLSDA932:
 363 0024 FF       		.byte	0xff
 364 0025 FF       		.byte	0xff
 365 0026 01       		.byte	0x1
 366 0027 20       		.uleb128 .LLSDACSE932-.LLSDACSB932
 367              	.LLSDACSB932:
 368 0028 46       		.uleb128 .LEHB6-.LFB932
 369 0029 05       		.uleb128 .LEHE6-.LEHB6
 370 002a 8102     		.uleb128 .L22-.LFB932
 371 002c 00       		.uleb128 0
 372 002d 79       		.uleb128 .LEHB7-.LFB932
 373 002e 05       		.uleb128 .LEHE7-.LEHB7
 374 002f 9F02     		.uleb128 .L23-.LFB932
 375 0031 00       		.uleb128 0
 376 0032 B201     		.uleb128 .LEHB8-.LFB932
 377 0034 05       		.uleb128 .LEHE8-.LEHB8
 378 0035 B402     		.uleb128 .L24-.LFB932
 379 0037 00       		.uleb128 0
 380 0038 CE01     		.uleb128 .LEHB9-.LFB932
 381 003a 05       		.uleb128 .LEHE9-.LEHB9
 382 003b C902     		.uleb128 .L25-.LFB932
 383 003d 00       		.uleb128 0
 384 003e 9A02     		.uleb128 .LEHB10-.LFB932
 385 0040 05       		.uleb128 .LEHE10-.LEHB10
 386 0041 00       		.uleb128 0
 387 0042 00       		.uleb128 0
 388 0043 8203     		.uleb128 .LEHB11-.LFB932
 389 0045 05       		.uleb128 .LEHE11-.LEHB11
 390 0046 00       		.uleb128 0
 391 0047 00       		.uleb128 0
 392              	.LLSDACSE932:
 393              		.text
 395              		.globl	_ZN8UnitTest18DeferredTestResultC1EPKcS2_
 396              		.set	_ZN8UnitTest18DeferredTestResultC1EPKcS2_,_ZN8UnitTest18DeferredTestResultC2EPKcS2_
 397              		.section	.text._ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE
 398              		.align 2
 399              		.weak	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EEC2Ev
 401              	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EEC2Ev:
 402              	.LFB950:
 403              		.file 2 "/usr/include/c++/11/bits/stl_vector.h"
   1:/usr/include/c++/11/bits/stl_vector.h **** // Vector implementation -*- C++ -*-
   2:/usr/include/c++/11/bits/stl_vector.h **** 
   3:/usr/include/c++/11/bits/stl_vector.h **** // Copyright (C) 2001-2021 Free Software Foundation, Inc.
   4:/usr/include/c++/11/bits/stl_vector.h **** //
   5:/usr/include/c++/11/bits/stl_vector.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/11/bits/stl_vector.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/11/bits/stl_vector.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/11/bits/stl_vector.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/11/bits/stl_vector.h **** // any later version.
  10:/usr/include/c++/11/bits/stl_vector.h **** 
  11:/usr/include/c++/11/bits/stl_vector.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/11/bits/stl_vector.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/11/bits/stl_vector.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/11/bits/stl_vector.h **** // GNU General Public License for more details.
  15:/usr/include/c++/11/bits/stl_vector.h **** 
  16:/usr/include/c++/11/bits/stl_vector.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/11/bits/stl_vector.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/11/bits/stl_vector.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/11/bits/stl_vector.h **** 
  20:/usr/include/c++/11/bits/stl_vector.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/11/bits/stl_vector.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/11/bits/stl_vector.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/11/bits/stl_vector.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/11/bits/stl_vector.h **** 
  25:/usr/include/c++/11/bits/stl_vector.h **** /*
  26:/usr/include/c++/11/bits/stl_vector.h ****  *
  27:/usr/include/c++/11/bits/stl_vector.h ****  * Copyright (c) 1994
  28:/usr/include/c++/11/bits/stl_vector.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/11/bits/stl_vector.h ****  *
  30:/usr/include/c++/11/bits/stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/11/bits/stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/11/bits/stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/11/bits/stl_vector.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/11/bits/stl_vector.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/11/bits/stl_vector.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/11/bits/stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/11/bits/stl_vector.h ****  *
  38:/usr/include/c++/11/bits/stl_vector.h ****  *
  39:/usr/include/c++/11/bits/stl_vector.h ****  * Copyright (c) 1996
  40:/usr/include/c++/11/bits/stl_vector.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/11/bits/stl_vector.h ****  *
  42:/usr/include/c++/11/bits/stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/11/bits/stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/11/bits/stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/11/bits/stl_vector.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/11/bits/stl_vector.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/11/bits/stl_vector.h ****  * representations about the suitability of this  software for any
  48:/usr/include/c++/11/bits/stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/11/bits/stl_vector.h ****  */
  50:/usr/include/c++/11/bits/stl_vector.h **** 
  51:/usr/include/c++/11/bits/stl_vector.h **** /** @file bits/stl_vector.h
  52:/usr/include/c++/11/bits/stl_vector.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/11/bits/stl_vector.h ****  *  Do not attempt to use it directly. @headername{vector}
  54:/usr/include/c++/11/bits/stl_vector.h ****  */
  55:/usr/include/c++/11/bits/stl_vector.h **** 
  56:/usr/include/c++/11/bits/stl_vector.h **** #ifndef _STL_VECTOR_H
  57:/usr/include/c++/11/bits/stl_vector.h **** #define _STL_VECTOR_H 1
  58:/usr/include/c++/11/bits/stl_vector.h **** 
  59:/usr/include/c++/11/bits/stl_vector.h **** #include <bits/stl_iterator_base_funcs.h>
  60:/usr/include/c++/11/bits/stl_vector.h **** #include <bits/functexcept.h>
  61:/usr/include/c++/11/bits/stl_vector.h **** #include <bits/concept_check.h>
  62:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
  63:/usr/include/c++/11/bits/stl_vector.h **** #include <initializer_list>
  64:/usr/include/c++/11/bits/stl_vector.h **** #endif
  65:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus > 201703L
  66:/usr/include/c++/11/bits/stl_vector.h **** # include <compare>
  67:/usr/include/c++/11/bits/stl_vector.h **** #endif
  68:/usr/include/c++/11/bits/stl_vector.h **** 
  69:/usr/include/c++/11/bits/stl_vector.h **** #include <debug/assertions.h>
  70:/usr/include/c++/11/bits/stl_vector.h **** 
  71:/usr/include/c++/11/bits/stl_vector.h **** #if _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
  72:/usr/include/c++/11/bits/stl_vector.h **** extern "C" void
  73:/usr/include/c++/11/bits/stl_vector.h **** __sanitizer_annotate_contiguous_container(const void*, const void*,
  74:/usr/include/c++/11/bits/stl_vector.h **** 					  const void*, const void*);
  75:/usr/include/c++/11/bits/stl_vector.h **** #endif
  76:/usr/include/c++/11/bits/stl_vector.h **** 
  77:/usr/include/c++/11/bits/stl_vector.h **** namespace std _GLIBCXX_VISIBILITY(default)
  78:/usr/include/c++/11/bits/stl_vector.h **** {
  79:/usr/include/c++/11/bits/stl_vector.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  80:/usr/include/c++/11/bits/stl_vector.h **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  81:/usr/include/c++/11/bits/stl_vector.h **** 
  82:/usr/include/c++/11/bits/stl_vector.h ****   /// See bits/stl_deque.h's _Deque_base for an explanation.
  83:/usr/include/c++/11/bits/stl_vector.h ****   template<typename _Tp, typename _Alloc>
  84:/usr/include/c++/11/bits/stl_vector.h ****     struct _Vector_base
  85:/usr/include/c++/11/bits/stl_vector.h ****     {
  86:/usr/include/c++/11/bits/stl_vector.h ****       typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
  87:/usr/include/c++/11/bits/stl_vector.h **** 	rebind<_Tp>::other _Tp_alloc_type;
  88:/usr/include/c++/11/bits/stl_vector.h ****       typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer
  89:/usr/include/c++/11/bits/stl_vector.h ****        	pointer;
  90:/usr/include/c++/11/bits/stl_vector.h **** 
  91:/usr/include/c++/11/bits/stl_vector.h ****       struct _Vector_impl_data
  92:/usr/include/c++/11/bits/stl_vector.h ****       {
  93:/usr/include/c++/11/bits/stl_vector.h **** 	pointer _M_start;
  94:/usr/include/c++/11/bits/stl_vector.h **** 	pointer _M_finish;
  95:/usr/include/c++/11/bits/stl_vector.h **** 	pointer _M_end_of_storage;
  96:/usr/include/c++/11/bits/stl_vector.h **** 
  97:/usr/include/c++/11/bits/stl_vector.h **** 	_Vector_impl_data() _GLIBCXX_NOEXCEPT
  98:/usr/include/c++/11/bits/stl_vector.h **** 	: _M_start(), _M_finish(), _M_end_of_storage()
  99:/usr/include/c++/11/bits/stl_vector.h **** 	{ }
 100:/usr/include/c++/11/bits/stl_vector.h **** 
 101:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
 102:/usr/include/c++/11/bits/stl_vector.h **** 	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
 103:/usr/include/c++/11/bits/stl_vector.h **** 	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 104:/usr/include/c++/11/bits/stl_vector.h **** 	  _M_end_of_storage(__x._M_end_of_storage)
 105:/usr/include/c++/11/bits/stl_vector.h **** 	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 106:/usr/include/c++/11/bits/stl_vector.h **** #endif
 107:/usr/include/c++/11/bits/stl_vector.h **** 
 108:/usr/include/c++/11/bits/stl_vector.h **** 	void
 109:/usr/include/c++/11/bits/stl_vector.h **** 	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
 110:/usr/include/c++/11/bits/stl_vector.h **** 	{
 111:/usr/include/c++/11/bits/stl_vector.h **** 	  _M_start = __x._M_start;
 112:/usr/include/c++/11/bits/stl_vector.h **** 	  _M_finish = __x._M_finish;
 113:/usr/include/c++/11/bits/stl_vector.h **** 	  _M_end_of_storage = __x._M_end_of_storage;
 114:/usr/include/c++/11/bits/stl_vector.h **** 	}
 115:/usr/include/c++/11/bits/stl_vector.h **** 
 116:/usr/include/c++/11/bits/stl_vector.h **** 	void
 117:/usr/include/c++/11/bits/stl_vector.h **** 	_M_swap_data(_Vector_impl_data& __x) _GLIBCXX_NOEXCEPT
 118:/usr/include/c++/11/bits/stl_vector.h **** 	{
 119:/usr/include/c++/11/bits/stl_vector.h **** 	  // Do not use std::swap(_M_start, __x._M_start), etc as it loses
 120:/usr/include/c++/11/bits/stl_vector.h **** 	  // information used by TBAA.
 121:/usr/include/c++/11/bits/stl_vector.h **** 	  _Vector_impl_data __tmp;
 122:/usr/include/c++/11/bits/stl_vector.h **** 	  __tmp._M_copy_data(*this);
 123:/usr/include/c++/11/bits/stl_vector.h **** 	  _M_copy_data(__x);
 124:/usr/include/c++/11/bits/stl_vector.h **** 	  __x._M_copy_data(__tmp);
 125:/usr/include/c++/11/bits/stl_vector.h **** 	}
 126:/usr/include/c++/11/bits/stl_vector.h ****       };
 127:/usr/include/c++/11/bits/stl_vector.h **** 
 128:/usr/include/c++/11/bits/stl_vector.h ****       struct _Vector_impl
 129:/usr/include/c++/11/bits/stl_vector.h **** 	: public _Tp_alloc_type, public _Vector_impl_data
 130:/usr/include/c++/11/bits/stl_vector.h ****       {
 131:/usr/include/c++/11/bits/stl_vector.h **** 	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 132:/usr/include/c++/11/bits/stl_vector.h **** 	    is_nothrow_default_constructible<_Tp_alloc_type>::value)
 133:/usr/include/c++/11/bits/stl_vector.h **** 	: _Tp_alloc_type()
 134:/usr/include/c++/11/bits/stl_vector.h **** 	{ }
 135:/usr/include/c++/11/bits/stl_vector.h **** 
 136:/usr/include/c++/11/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 137:/usr/include/c++/11/bits/stl_vector.h **** 	: _Tp_alloc_type(__a)
 138:/usr/include/c++/11/bits/stl_vector.h **** 	{ }
 139:/usr/include/c++/11/bits/stl_vector.h **** 
 140:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
 141:/usr/include/c++/11/bits/stl_vector.h **** 	// Not defaulted, to enforce noexcept(true) even when
 142:/usr/include/c++/11/bits/stl_vector.h **** 	// !is_nothrow_move_constructible<_Tp_alloc_type>.
 143:/usr/include/c++/11/bits/stl_vector.h **** 	_Vector_impl(_Vector_impl&& __x) noexcept
 144:/usr/include/c++/11/bits/stl_vector.h **** 	: _Tp_alloc_type(std::move(__x)), _Vector_impl_data(std::move(__x))
 145:/usr/include/c++/11/bits/stl_vector.h **** 	{ }
 146:/usr/include/c++/11/bits/stl_vector.h **** 
 147:/usr/include/c++/11/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type&& __a) noexcept
 148:/usr/include/c++/11/bits/stl_vector.h **** 	: _Tp_alloc_type(std::move(__a))
 149:/usr/include/c++/11/bits/stl_vector.h **** 	{ }
 150:/usr/include/c++/11/bits/stl_vector.h **** 
 151:/usr/include/c++/11/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type&& __a, _Vector_impl&& __rv) noexcept
 152:/usr/include/c++/11/bits/stl_vector.h **** 	: _Tp_alloc_type(std::move(__a)), _Vector_impl_data(std::move(__rv))
 153:/usr/include/c++/11/bits/stl_vector.h **** 	{ }
 154:/usr/include/c++/11/bits/stl_vector.h **** #endif
 155:/usr/include/c++/11/bits/stl_vector.h **** 
 156:/usr/include/c++/11/bits/stl_vector.h **** #if _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
 157:/usr/include/c++/11/bits/stl_vector.h **** 	template<typename = _Tp_alloc_type>
 158:/usr/include/c++/11/bits/stl_vector.h **** 	  struct _Asan
 159:/usr/include/c++/11/bits/stl_vector.h **** 	  {
 160:/usr/include/c++/11/bits/stl_vector.h **** 	    typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>
 161:/usr/include/c++/11/bits/stl_vector.h **** 	      ::size_type size_type;
 162:/usr/include/c++/11/bits/stl_vector.h **** 
 163:/usr/include/c++/11/bits/stl_vector.h **** 	    static void _S_shrink(_Vector_impl&, size_type) { }
 164:/usr/include/c++/11/bits/stl_vector.h **** 	    static void _S_on_dealloc(_Vector_impl&) { }
 165:/usr/include/c++/11/bits/stl_vector.h **** 
 166:/usr/include/c++/11/bits/stl_vector.h **** 	    typedef _Vector_impl& _Reinit;
 167:/usr/include/c++/11/bits/stl_vector.h **** 
 168:/usr/include/c++/11/bits/stl_vector.h **** 	    struct _Grow
 169:/usr/include/c++/11/bits/stl_vector.h **** 	    {
 170:/usr/include/c++/11/bits/stl_vector.h **** 	      _Grow(_Vector_impl&, size_type) { }
 171:/usr/include/c++/11/bits/stl_vector.h **** 	      void _M_grew(size_type) { }
 172:/usr/include/c++/11/bits/stl_vector.h **** 	    };
 173:/usr/include/c++/11/bits/stl_vector.h **** 	  };
 174:/usr/include/c++/11/bits/stl_vector.h **** 
 175:/usr/include/c++/11/bits/stl_vector.h **** 	// Enable ASan annotations for memory obtained from std::allocator.
 176:/usr/include/c++/11/bits/stl_vector.h **** 	template<typename _Up>
 177:/usr/include/c++/11/bits/stl_vector.h **** 	  struct _Asan<allocator<_Up> >
 178:/usr/include/c++/11/bits/stl_vector.h **** 	  {
 179:/usr/include/c++/11/bits/stl_vector.h **** 	    typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>
 180:/usr/include/c++/11/bits/stl_vector.h **** 	      ::size_type size_type;
 181:/usr/include/c++/11/bits/stl_vector.h **** 
 182:/usr/include/c++/11/bits/stl_vector.h **** 	    // Adjust ASan annotation for [_M_start, _M_end_of_storage) to
 183:/usr/include/c++/11/bits/stl_vector.h **** 	    // mark end of valid region as __curr instead of __prev.
 184:/usr/include/c++/11/bits/stl_vector.h **** 	    static void
 185:/usr/include/c++/11/bits/stl_vector.h **** 	    _S_adjust(_Vector_impl& __impl, pointer __prev, pointer __curr)
 186:/usr/include/c++/11/bits/stl_vector.h **** 	    {
 187:/usr/include/c++/11/bits/stl_vector.h **** 	      __sanitizer_annotate_contiguous_container(__impl._M_start,
 188:/usr/include/c++/11/bits/stl_vector.h **** 		  __impl._M_end_of_storage, __prev, __curr);
 189:/usr/include/c++/11/bits/stl_vector.h **** 	    }
 190:/usr/include/c++/11/bits/stl_vector.h **** 
 191:/usr/include/c++/11/bits/stl_vector.h **** 	    static void
 192:/usr/include/c++/11/bits/stl_vector.h **** 	    _S_grow(_Vector_impl& __impl, size_type __n)
 193:/usr/include/c++/11/bits/stl_vector.h **** 	    { _S_adjust(__impl, __impl._M_finish, __impl._M_finish + __n); }
 194:/usr/include/c++/11/bits/stl_vector.h **** 
 195:/usr/include/c++/11/bits/stl_vector.h **** 	    static void
 196:/usr/include/c++/11/bits/stl_vector.h **** 	    _S_shrink(_Vector_impl& __impl, size_type __n)
 197:/usr/include/c++/11/bits/stl_vector.h **** 	    { _S_adjust(__impl, __impl._M_finish + __n, __impl._M_finish); }
 198:/usr/include/c++/11/bits/stl_vector.h **** 
 199:/usr/include/c++/11/bits/stl_vector.h **** 	    static void
 200:/usr/include/c++/11/bits/stl_vector.h **** 	    _S_on_dealloc(_Vector_impl& __impl)
 201:/usr/include/c++/11/bits/stl_vector.h **** 	    {
 202:/usr/include/c++/11/bits/stl_vector.h **** 	      if (__impl._M_start)
 203:/usr/include/c++/11/bits/stl_vector.h **** 		_S_adjust(__impl, __impl._M_finish, __impl._M_end_of_storage);
 204:/usr/include/c++/11/bits/stl_vector.h **** 	    }
 205:/usr/include/c++/11/bits/stl_vector.h **** 
 206:/usr/include/c++/11/bits/stl_vector.h **** 	    // Used on reallocation to tell ASan unused capacity is invalid.
 207:/usr/include/c++/11/bits/stl_vector.h **** 	    struct _Reinit
 208:/usr/include/c++/11/bits/stl_vector.h **** 	    {
 209:/usr/include/c++/11/bits/stl_vector.h **** 	      explicit _Reinit(_Vector_impl& __impl) : _M_impl(__impl)
 210:/usr/include/c++/11/bits/stl_vector.h **** 	      {
 211:/usr/include/c++/11/bits/stl_vector.h **** 		// Mark unused capacity as valid again before deallocating it.
 212:/usr/include/c++/11/bits/stl_vector.h **** 		_S_on_dealloc(_M_impl);
 213:/usr/include/c++/11/bits/stl_vector.h **** 	      }
 214:/usr/include/c++/11/bits/stl_vector.h **** 
 215:/usr/include/c++/11/bits/stl_vector.h **** 	      ~_Reinit()
 216:/usr/include/c++/11/bits/stl_vector.h **** 	      {
 217:/usr/include/c++/11/bits/stl_vector.h **** 		// Mark unused capacity as invalid after reallocation.
 218:/usr/include/c++/11/bits/stl_vector.h **** 		if (_M_impl._M_start)
 219:/usr/include/c++/11/bits/stl_vector.h **** 		  _S_adjust(_M_impl, _M_impl._M_end_of_storage,
 220:/usr/include/c++/11/bits/stl_vector.h **** 			    _M_impl._M_finish);
 221:/usr/include/c++/11/bits/stl_vector.h **** 	      }
 222:/usr/include/c++/11/bits/stl_vector.h **** 
 223:/usr/include/c++/11/bits/stl_vector.h **** 	      _Vector_impl& _M_impl;
 224:/usr/include/c++/11/bits/stl_vector.h **** 
 225:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
 226:/usr/include/c++/11/bits/stl_vector.h **** 	      _Reinit(const _Reinit&) = delete;
 227:/usr/include/c++/11/bits/stl_vector.h **** 	      _Reinit& operator=(const _Reinit&) = delete;
 228:/usr/include/c++/11/bits/stl_vector.h **** #endif
 229:/usr/include/c++/11/bits/stl_vector.h **** 	    };
 230:/usr/include/c++/11/bits/stl_vector.h **** 
 231:/usr/include/c++/11/bits/stl_vector.h **** 	    // Tell ASan when unused capacity is initialized to be valid.
 232:/usr/include/c++/11/bits/stl_vector.h **** 	    struct _Grow
 233:/usr/include/c++/11/bits/stl_vector.h **** 	    {
 234:/usr/include/c++/11/bits/stl_vector.h **** 	      _Grow(_Vector_impl& __impl, size_type __n)
 235:/usr/include/c++/11/bits/stl_vector.h **** 	      : _M_impl(__impl), _M_n(__n)
 236:/usr/include/c++/11/bits/stl_vector.h **** 	      { _S_grow(_M_impl, __n); }
 237:/usr/include/c++/11/bits/stl_vector.h **** 
 238:/usr/include/c++/11/bits/stl_vector.h **** 	      ~_Grow() { if (_M_n) _S_shrink(_M_impl, _M_n); }
 239:/usr/include/c++/11/bits/stl_vector.h **** 
 240:/usr/include/c++/11/bits/stl_vector.h **** 	      void _M_grew(size_type __n) { _M_n -= __n; }
 241:/usr/include/c++/11/bits/stl_vector.h **** 
 242:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
 243:/usr/include/c++/11/bits/stl_vector.h **** 	      _Grow(const _Grow&) = delete;
 244:/usr/include/c++/11/bits/stl_vector.h **** 	      _Grow& operator=(const _Grow&) = delete;
 245:/usr/include/c++/11/bits/stl_vector.h **** #endif
 246:/usr/include/c++/11/bits/stl_vector.h **** 	    private:
 247:/usr/include/c++/11/bits/stl_vector.h **** 	      _Vector_impl& _M_impl;
 248:/usr/include/c++/11/bits/stl_vector.h **** 	      size_type _M_n;
 249:/usr/include/c++/11/bits/stl_vector.h **** 	    };
 250:/usr/include/c++/11/bits/stl_vector.h **** 	  };
 251:/usr/include/c++/11/bits/stl_vector.h **** 
 252:/usr/include/c++/11/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_REINIT \
 253:/usr/include/c++/11/bits/stl_vector.h ****   typename _Base::_Vector_impl::template _Asan<>::_Reinit const \
 254:/usr/include/c++/11/bits/stl_vector.h **** 	__attribute__((__unused__)) __reinit_guard(this->_M_impl)
 255:/usr/include/c++/11/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GROW(n) \
 256:/usr/include/c++/11/bits/stl_vector.h ****   typename _Base::_Vector_impl::template _Asan<>::_Grow \
 257:/usr/include/c++/11/bits/stl_vector.h **** 	__attribute__((__unused__)) __grow_guard(this->_M_impl, (n))
 258:/usr/include/c++/11/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GREW(n) __grow_guard._M_grew(n)
 259:/usr/include/c++/11/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_SHRINK(n) \
 260:/usr/include/c++/11/bits/stl_vector.h ****   _Base::_Vector_impl::template _Asan<>::_S_shrink(this->_M_impl, n)
 261:/usr/include/c++/11/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC \
 262:/usr/include/c++/11/bits/stl_vector.h ****   _Base::_Vector_impl::template _Asan<>::_S_on_dealloc(this->_M_impl)
 263:/usr/include/c++/11/bits/stl_vector.h **** #else // ! (_GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR)
 264:/usr/include/c++/11/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_REINIT
 265:/usr/include/c++/11/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GROW(n)
 266:/usr/include/c++/11/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GREW(n)
 267:/usr/include/c++/11/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_SHRINK(n)
 268:/usr/include/c++/11/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC
 269:/usr/include/c++/11/bits/stl_vector.h **** #endif // _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
 270:/usr/include/c++/11/bits/stl_vector.h ****       };
 271:/usr/include/c++/11/bits/stl_vector.h **** 
 272:/usr/include/c++/11/bits/stl_vector.h ****     public:
 273:/usr/include/c++/11/bits/stl_vector.h ****       typedef _Alloc allocator_type;
 274:/usr/include/c++/11/bits/stl_vector.h **** 
 275:/usr/include/c++/11/bits/stl_vector.h ****       _Tp_alloc_type&
 276:/usr/include/c++/11/bits/stl_vector.h ****       _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 277:/usr/include/c++/11/bits/stl_vector.h ****       { return this->_M_impl; }
 278:/usr/include/c++/11/bits/stl_vector.h **** 
 279:/usr/include/c++/11/bits/stl_vector.h ****       const _Tp_alloc_type&
 280:/usr/include/c++/11/bits/stl_vector.h ****       _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 281:/usr/include/c++/11/bits/stl_vector.h ****       { return this->_M_impl; }
 282:/usr/include/c++/11/bits/stl_vector.h **** 
 283:/usr/include/c++/11/bits/stl_vector.h ****       allocator_type
 284:/usr/include/c++/11/bits/stl_vector.h ****       get_allocator() const _GLIBCXX_NOEXCEPT
 285:/usr/include/c++/11/bits/stl_vector.h ****       { return allocator_type(_M_get_Tp_allocator()); }
 286:/usr/include/c++/11/bits/stl_vector.h **** 
 287:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
 288:/usr/include/c++/11/bits/stl_vector.h ****       _Vector_base() = default;
 289:/usr/include/c++/11/bits/stl_vector.h **** #else
 290:/usr/include/c++/11/bits/stl_vector.h ****       _Vector_base() { }
 291:/usr/include/c++/11/bits/stl_vector.h **** #endif
 292:/usr/include/c++/11/bits/stl_vector.h **** 
 293:/usr/include/c++/11/bits/stl_vector.h ****       _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 294:/usr/include/c++/11/bits/stl_vector.h ****       : _M_impl(__a) { }
 295:/usr/include/c++/11/bits/stl_vector.h **** 
 296:/usr/include/c++/11/bits/stl_vector.h ****       // Kept for ABI compatibility.
 297:/usr/include/c++/11/bits/stl_vector.h **** #if !_GLIBCXX_INLINE_VERSION
 298:/usr/include/c++/11/bits/stl_vector.h ****       _Vector_base(size_t __n)
 299:/usr/include/c++/11/bits/stl_vector.h ****       : _M_impl()
 300:/usr/include/c++/11/bits/stl_vector.h ****       { _M_create_storage(__n); }
 301:/usr/include/c++/11/bits/stl_vector.h **** #endif
 302:/usr/include/c++/11/bits/stl_vector.h **** 
 303:/usr/include/c++/11/bits/stl_vector.h ****       _Vector_base(size_t __n, const allocator_type& __a)
 304:/usr/include/c++/11/bits/stl_vector.h ****       : _M_impl(__a)
 305:/usr/include/c++/11/bits/stl_vector.h ****       { _M_create_storage(__n); }
 306:/usr/include/c++/11/bits/stl_vector.h **** 
 307:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
 308:/usr/include/c++/11/bits/stl_vector.h ****       _Vector_base(_Vector_base&&) = default;
 309:/usr/include/c++/11/bits/stl_vector.h **** 
 310:/usr/include/c++/11/bits/stl_vector.h ****       // Kept for ABI compatibility.
 311:/usr/include/c++/11/bits/stl_vector.h **** # if !_GLIBCXX_INLINE_VERSION
 312:/usr/include/c++/11/bits/stl_vector.h ****       _Vector_base(_Tp_alloc_type&& __a) noexcept
 313:/usr/include/c++/11/bits/stl_vector.h ****       : _M_impl(std::move(__a)) { }
 314:/usr/include/c++/11/bits/stl_vector.h **** 
 315:/usr/include/c++/11/bits/stl_vector.h ****       _Vector_base(_Vector_base&& __x, const allocator_type& __a)
 316:/usr/include/c++/11/bits/stl_vector.h ****       : _M_impl(__a)
 317:/usr/include/c++/11/bits/stl_vector.h ****       {
 318:/usr/include/c++/11/bits/stl_vector.h **** 	if (__x.get_allocator() == __a)
 319:/usr/include/c++/11/bits/stl_vector.h **** 	  this->_M_impl._M_swap_data(__x._M_impl);
 320:/usr/include/c++/11/bits/stl_vector.h **** 	else
 321:/usr/include/c++/11/bits/stl_vector.h **** 	  {
 322:/usr/include/c++/11/bits/stl_vector.h **** 	    size_t __n = __x._M_impl._M_finish - __x._M_impl._M_start;
 323:/usr/include/c++/11/bits/stl_vector.h **** 	    _M_create_storage(__n);
 324:/usr/include/c++/11/bits/stl_vector.h **** 	  }
 325:/usr/include/c++/11/bits/stl_vector.h ****       }
 326:/usr/include/c++/11/bits/stl_vector.h **** # endif
 327:/usr/include/c++/11/bits/stl_vector.h **** 
 328:/usr/include/c++/11/bits/stl_vector.h ****       _Vector_base(const allocator_type& __a, _Vector_base&& __x)
 329:/usr/include/c++/11/bits/stl_vector.h ****       : _M_impl(_Tp_alloc_type(__a), std::move(__x._M_impl))
 330:/usr/include/c++/11/bits/stl_vector.h ****       { }
 331:/usr/include/c++/11/bits/stl_vector.h **** #endif
 332:/usr/include/c++/11/bits/stl_vector.h **** 
 333:/usr/include/c++/11/bits/stl_vector.h ****       ~_Vector_base() _GLIBCXX_NOEXCEPT
 334:/usr/include/c++/11/bits/stl_vector.h ****       {
 335:/usr/include/c++/11/bits/stl_vector.h **** 	_M_deallocate(_M_impl._M_start,
 336:/usr/include/c++/11/bits/stl_vector.h **** 		      _M_impl._M_end_of_storage - _M_impl._M_start);
 337:/usr/include/c++/11/bits/stl_vector.h ****       }
 338:/usr/include/c++/11/bits/stl_vector.h **** 
 339:/usr/include/c++/11/bits/stl_vector.h ****     public:
 340:/usr/include/c++/11/bits/stl_vector.h ****       _Vector_impl _M_impl;
 341:/usr/include/c++/11/bits/stl_vector.h **** 
 342:/usr/include/c++/11/bits/stl_vector.h ****       pointer
 343:/usr/include/c++/11/bits/stl_vector.h ****       _M_allocate(size_t __n)
 344:/usr/include/c++/11/bits/stl_vector.h ****       {
 345:/usr/include/c++/11/bits/stl_vector.h **** 	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 346:/usr/include/c++/11/bits/stl_vector.h **** 	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 347:/usr/include/c++/11/bits/stl_vector.h ****       }
 348:/usr/include/c++/11/bits/stl_vector.h **** 
 349:/usr/include/c++/11/bits/stl_vector.h ****       void
 350:/usr/include/c++/11/bits/stl_vector.h ****       _M_deallocate(pointer __p, size_t __n)
 351:/usr/include/c++/11/bits/stl_vector.h ****       {
 352:/usr/include/c++/11/bits/stl_vector.h **** 	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 353:/usr/include/c++/11/bits/stl_vector.h **** 	if (__p)
 354:/usr/include/c++/11/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 355:/usr/include/c++/11/bits/stl_vector.h ****       }
 356:/usr/include/c++/11/bits/stl_vector.h **** 
 357:/usr/include/c++/11/bits/stl_vector.h ****     protected:
 358:/usr/include/c++/11/bits/stl_vector.h ****       void
 359:/usr/include/c++/11/bits/stl_vector.h ****       _M_create_storage(size_t __n)
 360:/usr/include/c++/11/bits/stl_vector.h ****       {
 361:/usr/include/c++/11/bits/stl_vector.h **** 	this->_M_impl._M_start = this->_M_allocate(__n);
 362:/usr/include/c++/11/bits/stl_vector.h **** 	this->_M_impl._M_finish = this->_M_impl._M_start;
 363:/usr/include/c++/11/bits/stl_vector.h **** 	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 364:/usr/include/c++/11/bits/stl_vector.h ****       }
 365:/usr/include/c++/11/bits/stl_vector.h ****     };
 366:/usr/include/c++/11/bits/stl_vector.h **** 
 367:/usr/include/c++/11/bits/stl_vector.h ****   /**
 368:/usr/include/c++/11/bits/stl_vector.h ****    *  @brief A standard container which offers fixed time access to
 369:/usr/include/c++/11/bits/stl_vector.h ****    *  individual elements in any order.
 370:/usr/include/c++/11/bits/stl_vector.h ****    *
 371:/usr/include/c++/11/bits/stl_vector.h ****    *  @ingroup sequences
 372:/usr/include/c++/11/bits/stl_vector.h ****    *
 373:/usr/include/c++/11/bits/stl_vector.h ****    *  @tparam _Tp  Type of element.
 374:/usr/include/c++/11/bits/stl_vector.h ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_Tp>.
 375:/usr/include/c++/11/bits/stl_vector.h ****    *
 376:/usr/include/c++/11/bits/stl_vector.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
 377:/usr/include/c++/11/bits/stl_vector.h ****    *  <a href="tables.html#66">reversible container</a>, and a
 378:/usr/include/c++/11/bits/stl_vector.h ****    *  <a href="tables.html#67">sequence</a>, including the
 379:/usr/include/c++/11/bits/stl_vector.h ****    *  <a href="tables.html#68">optional sequence requirements</a> with the
 380:/usr/include/c++/11/bits/stl_vector.h ****    *  %exception of @c push_front and @c pop_front.
 381:/usr/include/c++/11/bits/stl_vector.h ****    *
 382:/usr/include/c++/11/bits/stl_vector.h ****    *  In some terminology a %vector can be described as a dynamic
 383:/usr/include/c++/11/bits/stl_vector.h ****    *  C-style array, it offers fast and efficient access to individual
 384:/usr/include/c++/11/bits/stl_vector.h ****    *  elements in any order and saves the user from worrying about
 385:/usr/include/c++/11/bits/stl_vector.h ****    *  memory and size allocation.  Subscripting ( @c [] ) access is
 386:/usr/include/c++/11/bits/stl_vector.h ****    *  also provided as with C-style arrays.
 387:/usr/include/c++/11/bits/stl_vector.h ****   */
 388:/usr/include/c++/11/bits/stl_vector.h ****   template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
 389:/usr/include/c++/11/bits/stl_vector.h ****     class vector : protected _Vector_base<_Tp, _Alloc>
 390:/usr/include/c++/11/bits/stl_vector.h ****     {
 391:/usr/include/c++/11/bits/stl_vector.h **** #ifdef _GLIBCXX_CONCEPT_CHECKS
 392:/usr/include/c++/11/bits/stl_vector.h ****       // Concept requirements.
 393:/usr/include/c++/11/bits/stl_vector.h ****       typedef typename _Alloc::value_type		_Alloc_value_type;
 394:/usr/include/c++/11/bits/stl_vector.h **** # if __cplusplus < 201103L
 395:/usr/include/c++/11/bits/stl_vector.h ****       __glibcxx_class_requires(_Tp, _SGIAssignableConcept)
 396:/usr/include/c++/11/bits/stl_vector.h **** # endif
 397:/usr/include/c++/11/bits/stl_vector.h ****       __glibcxx_class_requires2(_Tp, _Alloc_value_type, _SameTypeConcept)
 398:/usr/include/c++/11/bits/stl_vector.h **** #endif
 399:/usr/include/c++/11/bits/stl_vector.h **** 
 400:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
 401:/usr/include/c++/11/bits/stl_vector.h ****       static_assert(is_same<typename remove_cv<_Tp>::type, _Tp>::value,
 402:/usr/include/c++/11/bits/stl_vector.h **** 	  "std::vector must have a non-const, non-volatile value_type");
 403:/usr/include/c++/11/bits/stl_vector.h **** # if __cplusplus > 201703L || defined __STRICT_ANSI__
 404:/usr/include/c++/11/bits/stl_vector.h ****       static_assert(is_same<typename _Alloc::value_type, _Tp>::value,
 405:/usr/include/c++/11/bits/stl_vector.h **** 	  "std::vector must have the same value_type as its allocator");
 406:/usr/include/c++/11/bits/stl_vector.h **** # endif
 407:/usr/include/c++/11/bits/stl_vector.h **** #endif
 408:/usr/include/c++/11/bits/stl_vector.h **** 
 409:/usr/include/c++/11/bits/stl_vector.h ****       typedef _Vector_base<_Tp, _Alloc>			_Base;
 410:/usr/include/c++/11/bits/stl_vector.h ****       typedef typename _Base::_Tp_alloc_type		_Tp_alloc_type;
 411:/usr/include/c++/11/bits/stl_vector.h ****       typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type>	_Alloc_traits;
 412:/usr/include/c++/11/bits/stl_vector.h **** 
 413:/usr/include/c++/11/bits/stl_vector.h ****     public:
 414:/usr/include/c++/11/bits/stl_vector.h ****       typedef _Tp					value_type;
 415:/usr/include/c++/11/bits/stl_vector.h ****       typedef typename _Base::pointer			pointer;
 416:/usr/include/c++/11/bits/stl_vector.h ****       typedef typename _Alloc_traits::const_pointer	const_pointer;
 417:/usr/include/c++/11/bits/stl_vector.h ****       typedef typename _Alloc_traits::reference		reference;
 418:/usr/include/c++/11/bits/stl_vector.h ****       typedef typename _Alloc_traits::const_reference	const_reference;
 419:/usr/include/c++/11/bits/stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<pointer, vector> iterator;
 420:/usr/include/c++/11/bits/stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<const_pointer, vector>
 421:/usr/include/c++/11/bits/stl_vector.h ****       const_iterator;
 422:/usr/include/c++/11/bits/stl_vector.h ****       typedef std::reverse_iterator<const_iterator>	const_reverse_iterator;
 423:/usr/include/c++/11/bits/stl_vector.h ****       typedef std::reverse_iterator<iterator>		reverse_iterator;
 424:/usr/include/c++/11/bits/stl_vector.h ****       typedef size_t					size_type;
 425:/usr/include/c++/11/bits/stl_vector.h ****       typedef ptrdiff_t					difference_type;
 426:/usr/include/c++/11/bits/stl_vector.h ****       typedef _Alloc					allocator_type;
 427:/usr/include/c++/11/bits/stl_vector.h **** 
 428:/usr/include/c++/11/bits/stl_vector.h ****     private:
 429:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
 430:/usr/include/c++/11/bits/stl_vector.h ****       static constexpr bool
 431:/usr/include/c++/11/bits/stl_vector.h ****       _S_nothrow_relocate(true_type)
 432:/usr/include/c++/11/bits/stl_vector.h ****       {
 433:/usr/include/c++/11/bits/stl_vector.h **** 	return noexcept(std::__relocate_a(std::declval<pointer>(),
 434:/usr/include/c++/11/bits/stl_vector.h **** 					  std::declval<pointer>(),
 435:/usr/include/c++/11/bits/stl_vector.h **** 					  std::declval<pointer>(),
 436:/usr/include/c++/11/bits/stl_vector.h **** 					  std::declval<_Tp_alloc_type&>()));
 437:/usr/include/c++/11/bits/stl_vector.h ****       }
 438:/usr/include/c++/11/bits/stl_vector.h **** 
 439:/usr/include/c++/11/bits/stl_vector.h ****       static constexpr bool
 440:/usr/include/c++/11/bits/stl_vector.h ****       _S_nothrow_relocate(false_type)
 441:/usr/include/c++/11/bits/stl_vector.h ****       { return false; }
 442:/usr/include/c++/11/bits/stl_vector.h **** 
 443:/usr/include/c++/11/bits/stl_vector.h ****       static constexpr bool
 444:/usr/include/c++/11/bits/stl_vector.h ****       _S_use_relocate()
 445:/usr/include/c++/11/bits/stl_vector.h ****       {
 446:/usr/include/c++/11/bits/stl_vector.h **** 	// Instantiating std::__relocate_a might cause an error outside the
 447:/usr/include/c++/11/bits/stl_vector.h **** 	// immediate context (in __relocate_object_a's noexcept-specifier),
 448:/usr/include/c++/11/bits/stl_vector.h **** 	// so only do it if we know the type can be move-inserted into *this.
 449:/usr/include/c++/11/bits/stl_vector.h **** 	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 450:/usr/include/c++/11/bits/stl_vector.h ****       }
 451:/usr/include/c++/11/bits/stl_vector.h **** 
 452:/usr/include/c++/11/bits/stl_vector.h ****       static pointer
 453:/usr/include/c++/11/bits/stl_vector.h ****       _S_do_relocate(pointer __first, pointer __last, pointer __result,
 454:/usr/include/c++/11/bits/stl_vector.h **** 		     _Tp_alloc_type& __alloc, true_type) noexcept
 455:/usr/include/c++/11/bits/stl_vector.h ****       {
 456:/usr/include/c++/11/bits/stl_vector.h **** 	return std::__relocate_a(__first, __last, __result, __alloc);
 457:/usr/include/c++/11/bits/stl_vector.h ****       }
 458:/usr/include/c++/11/bits/stl_vector.h **** 
 459:/usr/include/c++/11/bits/stl_vector.h ****       static pointer
 460:/usr/include/c++/11/bits/stl_vector.h ****       _S_do_relocate(pointer, pointer, pointer __result,
 461:/usr/include/c++/11/bits/stl_vector.h **** 		     _Tp_alloc_type&, false_type) noexcept
 462:/usr/include/c++/11/bits/stl_vector.h ****       { return __result; }
 463:/usr/include/c++/11/bits/stl_vector.h **** 
 464:/usr/include/c++/11/bits/stl_vector.h ****       static pointer
 465:/usr/include/c++/11/bits/stl_vector.h ****       _S_relocate(pointer __first, pointer __last, pointer __result,
 466:/usr/include/c++/11/bits/stl_vector.h **** 		  _Tp_alloc_type& __alloc) noexcept
 467:/usr/include/c++/11/bits/stl_vector.h ****       {
 468:/usr/include/c++/11/bits/stl_vector.h **** 	using __do_it = __bool_constant<_S_use_relocate()>;
 469:/usr/include/c++/11/bits/stl_vector.h **** 	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 470:/usr/include/c++/11/bits/stl_vector.h ****       }
 471:/usr/include/c++/11/bits/stl_vector.h **** #endif // C++11
 472:/usr/include/c++/11/bits/stl_vector.h **** 
 473:/usr/include/c++/11/bits/stl_vector.h ****     protected:
 474:/usr/include/c++/11/bits/stl_vector.h ****       using _Base::_M_allocate;
 475:/usr/include/c++/11/bits/stl_vector.h ****       using _Base::_M_deallocate;
 476:/usr/include/c++/11/bits/stl_vector.h ****       using _Base::_M_impl;
 477:/usr/include/c++/11/bits/stl_vector.h ****       using _Base::_M_get_Tp_allocator;
 478:/usr/include/c++/11/bits/stl_vector.h **** 
 479:/usr/include/c++/11/bits/stl_vector.h ****     public:
 480:/usr/include/c++/11/bits/stl_vector.h ****       // [23.2.4.1] construct/copy/destroy
 481:/usr/include/c++/11/bits/stl_vector.h ****       // (assign() and get_allocator() are also listed in this section)
 482:/usr/include/c++/11/bits/stl_vector.h **** 
 483:/usr/include/c++/11/bits/stl_vector.h ****       /**
 484:/usr/include/c++/11/bits/stl_vector.h ****        *  @brief  Creates a %vector with no elements.
 485:/usr/include/c++/11/bits/stl_vector.h ****        */
 486:/usr/include/c++/11/bits/stl_vector.h **** #if __cplusplus >= 201103L
 487:/usr/include/c++/11/bits/stl_vector.h ****       vector() = default;
 488:/usr/include/c++/11/bits/stl_vector.h **** #else
 489:/usr/include/c++/11/bits/stl_vector.h ****       vector() { }
 404              		.loc 2 489 7
 405              		.cfi_startproc
 406 0000 F30F1EFA 		endbr64
 407 0004 55       		pushq	%rbp
 408              		.cfi_def_cfa_offset 16
 409              		.cfi_offset 6, -16
 410 0005 4889E5   		movq	%rsp, %rbp
 411              		.cfi_def_cfa_register 6
 412 0008 4883EC10 		subq	$16, %rsp
 413 000c 48897DF8 		movq	%rdi, -8(%rbp)
 414              	.LBB6:
 415              		.loc 2 489 16
 416 0010 488B45F8 		movq	-8(%rbp), %rax
 417 0014 4889C7   		movq	%rax, %rdi
 418 0017 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EEC2E
 418      00
 419              	.LBE6:
 420              		.loc 2 489 18
 421 001c 90       		nop
 422 001d C9       		leave
 423              		.cfi_def_cfa 7, 8
 424 001e C3       		ret
 425              		.cfi_endproc
 426              	.LFE950:
 428              		.weak	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EEC1Ev
 429              		.set	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EEC1Ev,_ZNSt
 430              		.section	.text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES
 431              		.align 2
 432              		.weak	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EEC2
 434              	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EEC2Ev:
 435              	.LFB971:
 290:/usr/include/c++/11/bits/stl_vector.h **** #endif
 436              		.loc 2 290 7
 437              		.cfi_startproc
 438 0000 F30F1EFA 		endbr64
 439 0004 55       		pushq	%rbp
 440              		.cfi_def_cfa_offset 16
 441              		.cfi_offset 6, -16
 442 0005 4889E5   		movq	%rsp, %rbp
 443              		.cfi_def_cfa_register 6
 444 0008 4883EC10 		subq	$16, %rsp
 445 000c 48897DF8 		movq	%rdi, -8(%rbp)
 446              	.LBB7:
 290:/usr/include/c++/11/bits/stl_vector.h **** #endif
 447              		.loc 2 290 22
 448 0010 488B45F8 		movq	-8(%rbp), %rax
 449 0014 4889C7   		movq	%rax, %rdi
 450 0017 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_
 450      00
 451              	.LBE7:
 290:/usr/include/c++/11/bits/stl_vector.h **** #endif
 452              		.loc 2 290 24
 453 001c 90       		nop
 454 001d C9       		leave
 455              		.cfi_def_cfa 7, 8
 456 001e C3       		ret
 457              		.cfi_endproc
 458              	.LFE971:
 460              		.weak	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EEC1
 461              		.set	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EEC1E
 462              		.section	.text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES
 463              		.align 2
 464              		.weak	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12
 466              	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_Vector
 467              	.LFB991:
 131:/usr/include/c++/11/bits/stl_vector.h **** 	    is_nothrow_default_constructible<_Tp_alloc_type>::value)
 468              		.loc 2 131 2
 469              		.cfi_startproc
 470 0000 F30F1EFA 		endbr64
 471 0004 55       		pushq	%rbp
 472              		.cfi_def_cfa_offset 16
 473              		.cfi_offset 6, -16
 474 0005 4889E5   		movq	%rsp, %rbp
 475              		.cfi_def_cfa_register 6
 476 0008 4883EC10 		subq	$16, %rsp
 477 000c 48897DF8 		movq	%rdi, -8(%rbp)
 478              	.LBB8:
 133:/usr/include/c++/11/bits/stl_vector.h **** 	{ }
 479              		.loc 2 133 19
 480 0010 488B45F8 		movq	-8(%rbp), %rax
 481 0014 4889C7   		movq	%rax, %rdi
 482 0017 E8000000 		call	_ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2Ev@PLT
 482      00
 483 001c 488B45F8 		movq	-8(%rbp), %rax
 484 0020 4889C7   		movq	%rax, %rdi
 485 0023 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE17_
 485      00
 486              	.LBE8:
 134:/usr/include/c++/11/bits/stl_vector.h **** 
 487              		.loc 2 134 4
 488 0028 90       		nop
 489 0029 C9       		leave
 490              		.cfi_def_cfa 7, 8
 491 002a C3       		ret
 492              		.cfi_endproc
 493              	.LFE991:
 495              		.weak	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12
 496              		.set	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_
 497              		.section	.text._ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2Ev,"axG",@pr
 498              		.align 2
 499              		.weak	_ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2Ev
 501              	_ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2Ev:
 502              	.LFB1009:
 503              		.file 3 "/usr/include/c++/11/bits/allocator.h"
   1:/usr/include/c++/11/bits/allocator.h **** // Allocators -*- C++ -*-
   2:/usr/include/c++/11/bits/allocator.h **** 
   3:/usr/include/c++/11/bits/allocator.h **** // Copyright (C) 2001-2021 Free Software Foundation, Inc.
   4:/usr/include/c++/11/bits/allocator.h **** //
   5:/usr/include/c++/11/bits/allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/11/bits/allocator.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/11/bits/allocator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/11/bits/allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/11/bits/allocator.h **** // any later version.
  10:/usr/include/c++/11/bits/allocator.h **** 
  11:/usr/include/c++/11/bits/allocator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/11/bits/allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/11/bits/allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/11/bits/allocator.h **** // GNU General Public License for more details.
  15:/usr/include/c++/11/bits/allocator.h **** 
  16:/usr/include/c++/11/bits/allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/11/bits/allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/11/bits/allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/11/bits/allocator.h **** 
  20:/usr/include/c++/11/bits/allocator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/11/bits/allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/11/bits/allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/11/bits/allocator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/11/bits/allocator.h **** 
  25:/usr/include/c++/11/bits/allocator.h **** /*
  26:/usr/include/c++/11/bits/allocator.h ****  * Copyright (c) 1996-1997
  27:/usr/include/c++/11/bits/allocator.h ****  * Silicon Graphics Computer Systems, Inc.
  28:/usr/include/c++/11/bits/allocator.h ****  *
  29:/usr/include/c++/11/bits/allocator.h ****  * Permission to use, copy, modify, distribute and sell this software
  30:/usr/include/c++/11/bits/allocator.h ****  * and its documentation for any purpose is hereby granted without fee,
  31:/usr/include/c++/11/bits/allocator.h ****  * provided that the above copyright notice appear in all copies and
  32:/usr/include/c++/11/bits/allocator.h ****  * that both that copyright notice and this permission notice appear
  33:/usr/include/c++/11/bits/allocator.h ****  * in supporting documentation.  Silicon Graphics makes no
  34:/usr/include/c++/11/bits/allocator.h ****  * representations about the suitability of this software for any
  35:/usr/include/c++/11/bits/allocator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  36:/usr/include/c++/11/bits/allocator.h ****  */
  37:/usr/include/c++/11/bits/allocator.h **** 
  38:/usr/include/c++/11/bits/allocator.h **** /** @file bits/allocator.h
  39:/usr/include/c++/11/bits/allocator.h ****  *  This is an internal header file, included by other library headers.
  40:/usr/include/c++/11/bits/allocator.h ****  *  Do not attempt to use it directly. @headername{memory}
  41:/usr/include/c++/11/bits/allocator.h ****  */
  42:/usr/include/c++/11/bits/allocator.h **** 
  43:/usr/include/c++/11/bits/allocator.h **** #ifndef _ALLOCATOR_H
  44:/usr/include/c++/11/bits/allocator.h **** #define _ALLOCATOR_H 1
  45:/usr/include/c++/11/bits/allocator.h **** 
  46:/usr/include/c++/11/bits/allocator.h **** #include <bits/c++allocator.h> // Define the base class to std::allocator.
  47:/usr/include/c++/11/bits/allocator.h **** #include <bits/memoryfwd.h>
  48:/usr/include/c++/11/bits/allocator.h **** #if __cplusplus >= 201103L
  49:/usr/include/c++/11/bits/allocator.h **** #include <type_traits>
  50:/usr/include/c++/11/bits/allocator.h **** #endif
  51:/usr/include/c++/11/bits/allocator.h **** 
  52:/usr/include/c++/11/bits/allocator.h **** #define __cpp_lib_incomplete_container_elements 201505
  53:/usr/include/c++/11/bits/allocator.h **** 
  54:/usr/include/c++/11/bits/allocator.h **** namespace std _GLIBCXX_VISIBILITY(default)
  55:/usr/include/c++/11/bits/allocator.h **** {
  56:/usr/include/c++/11/bits/allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  57:/usr/include/c++/11/bits/allocator.h **** 
  58:/usr/include/c++/11/bits/allocator.h ****   /**
  59:/usr/include/c++/11/bits/allocator.h ****    *  @addtogroup allocators
  60:/usr/include/c++/11/bits/allocator.h ****    *  @{
  61:/usr/include/c++/11/bits/allocator.h ****    */
  62:/usr/include/c++/11/bits/allocator.h **** 
  63:/usr/include/c++/11/bits/allocator.h ****   // Since C++20 the primary template should be used for allocator<void>,
  64:/usr/include/c++/11/bits/allocator.h ****   // but then it would have a non-trivial default ctor and dtor for C++20,
  65:/usr/include/c++/11/bits/allocator.h ****   // but trivial for C++98-17, which would be an ABI incompatibiliy between
  66:/usr/include/c++/11/bits/allocator.h ****   // different standard dialects. So C++20 still uses the allocator<void>
  67:/usr/include/c++/11/bits/allocator.h ****   // explicit specialization, with the historical ABI properties, but with
  68:/usr/include/c++/11/bits/allocator.h ****   // the same members that are present in the primary template.
  69:/usr/include/c++/11/bits/allocator.h **** 
  70:/usr/include/c++/11/bits/allocator.h ****   /// allocator<void> specialization.
  71:/usr/include/c++/11/bits/allocator.h ****   template<>
  72:/usr/include/c++/11/bits/allocator.h ****     class allocator<void>
  73:/usr/include/c++/11/bits/allocator.h ****     {
  74:/usr/include/c++/11/bits/allocator.h ****     public:
  75:/usr/include/c++/11/bits/allocator.h ****       typedef void        value_type;
  76:/usr/include/c++/11/bits/allocator.h ****       typedef size_t      size_type;
  77:/usr/include/c++/11/bits/allocator.h ****       typedef ptrdiff_t   difference_type;
  78:/usr/include/c++/11/bits/allocator.h **** 
  79:/usr/include/c++/11/bits/allocator.h **** #if __cplusplus <= 201703L
  80:/usr/include/c++/11/bits/allocator.h ****       // These were removed for C++20, allocator_traits does the right thing.
  81:/usr/include/c++/11/bits/allocator.h ****       typedef void*       pointer;
  82:/usr/include/c++/11/bits/allocator.h ****       typedef const void* const_pointer;
  83:/usr/include/c++/11/bits/allocator.h **** 
  84:/usr/include/c++/11/bits/allocator.h ****       template<typename _Tp1>
  85:/usr/include/c++/11/bits/allocator.h **** 	struct rebind
  86:/usr/include/c++/11/bits/allocator.h **** 	{ typedef allocator<_Tp1> other; };
  87:/usr/include/c++/11/bits/allocator.h **** #endif
  88:/usr/include/c++/11/bits/allocator.h **** 
  89:/usr/include/c++/11/bits/allocator.h **** #if __cplusplus >= 201103L
  90:/usr/include/c++/11/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  91:/usr/include/c++/11/bits/allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
  92:/usr/include/c++/11/bits/allocator.h ****       using propagate_on_container_move_assignment = true_type;
  93:/usr/include/c++/11/bits/allocator.h **** 
  94:/usr/include/c++/11/bits/allocator.h ****       using is_always_equal
  95:/usr/include/c++/11/bits/allocator.h **** 	_GLIBCXX20_DEPRECATED_SUGGEST("std::allocator_traits::is_always_equal")
  96:/usr/include/c++/11/bits/allocator.h **** 	= true_type;
  97:/usr/include/c++/11/bits/allocator.h **** 
  98:/usr/include/c++/11/bits/allocator.h **** #if __cplusplus >= 202002L
  99:/usr/include/c++/11/bits/allocator.h ****       // As noted above, these members are present for C++20 to provide the
 100:/usr/include/c++/11/bits/allocator.h ****       // same API as the primary template, but still trivial as in pre-C++20.
 101:/usr/include/c++/11/bits/allocator.h ****       allocator() = default;
 102:/usr/include/c++/11/bits/allocator.h ****       ~allocator() = default;
 103:/usr/include/c++/11/bits/allocator.h **** 
 104:/usr/include/c++/11/bits/allocator.h ****       template<typename _Up>
 105:/usr/include/c++/11/bits/allocator.h **** 	constexpr
 106:/usr/include/c++/11/bits/allocator.h **** 	allocator(const allocator<_Up>&) noexcept { }
 107:/usr/include/c++/11/bits/allocator.h **** 
 108:/usr/include/c++/11/bits/allocator.h ****       // No allocate member because it's ill-formed by LWG 3307.
 109:/usr/include/c++/11/bits/allocator.h ****       // No deallocate member because it would be undefined to call it
 110:/usr/include/c++/11/bits/allocator.h ****       // with any pointer which wasn't obtained from allocate.
 111:/usr/include/c++/11/bits/allocator.h **** #endif // C++20
 112:/usr/include/c++/11/bits/allocator.h **** #endif // C++11
 113:/usr/include/c++/11/bits/allocator.h ****     };
 114:/usr/include/c++/11/bits/allocator.h **** 
 115:/usr/include/c++/11/bits/allocator.h ****   /**
 116:/usr/include/c++/11/bits/allocator.h ****    * @brief  The @a standard allocator, as per C++03 [20.4.1].
 117:/usr/include/c++/11/bits/allocator.h ****    *
 118:/usr/include/c++/11/bits/allocator.h ****    *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/memory.html#std.util.memory.allocator
 119:/usr/include/c++/11/bits/allocator.h ****    *  for further details.
 120:/usr/include/c++/11/bits/allocator.h ****    *
 121:/usr/include/c++/11/bits/allocator.h ****    *  @tparam  _Tp  Type of allocated object.
 122:/usr/include/c++/11/bits/allocator.h ****    */
 123:/usr/include/c++/11/bits/allocator.h ****   template<typename _Tp>
 124:/usr/include/c++/11/bits/allocator.h ****     class allocator : public __allocator_base<_Tp>
 125:/usr/include/c++/11/bits/allocator.h ****     {
 126:/usr/include/c++/11/bits/allocator.h ****     public:
 127:/usr/include/c++/11/bits/allocator.h ****       typedef _Tp        value_type;
 128:/usr/include/c++/11/bits/allocator.h ****       typedef size_t     size_type;
 129:/usr/include/c++/11/bits/allocator.h ****       typedef ptrdiff_t  difference_type;
 130:/usr/include/c++/11/bits/allocator.h **** 
 131:/usr/include/c++/11/bits/allocator.h **** #if __cplusplus <= 201703L
 132:/usr/include/c++/11/bits/allocator.h ****       // These were removed for C++20.
 133:/usr/include/c++/11/bits/allocator.h ****       typedef _Tp*       pointer;
 134:/usr/include/c++/11/bits/allocator.h ****       typedef const _Tp* const_pointer;
 135:/usr/include/c++/11/bits/allocator.h ****       typedef _Tp&       reference;
 136:/usr/include/c++/11/bits/allocator.h ****       typedef const _Tp& const_reference;
 137:/usr/include/c++/11/bits/allocator.h **** 
 138:/usr/include/c++/11/bits/allocator.h ****       template<typename _Tp1>
 139:/usr/include/c++/11/bits/allocator.h **** 	struct rebind
 140:/usr/include/c++/11/bits/allocator.h **** 	{ typedef allocator<_Tp1> other; };
 141:/usr/include/c++/11/bits/allocator.h **** #endif
 142:/usr/include/c++/11/bits/allocator.h **** 
 143:/usr/include/c++/11/bits/allocator.h **** #if __cplusplus >= 201103L
 144:/usr/include/c++/11/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 145:/usr/include/c++/11/bits/allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
 146:/usr/include/c++/11/bits/allocator.h ****       using propagate_on_container_move_assignment = true_type;
 147:/usr/include/c++/11/bits/allocator.h **** 
 148:/usr/include/c++/11/bits/allocator.h ****       using is_always_equal
 149:/usr/include/c++/11/bits/allocator.h **** 	_GLIBCXX20_DEPRECATED_SUGGEST("std::allocator_traits::is_always_equal")
 150:/usr/include/c++/11/bits/allocator.h **** 	= true_type;
 151:/usr/include/c++/11/bits/allocator.h **** #endif
 152:/usr/include/c++/11/bits/allocator.h **** 
 153:/usr/include/c++/11/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 154:/usr/include/c++/11/bits/allocator.h ****       // 3035. std::allocator's constructors should be constexpr
 155:/usr/include/c++/11/bits/allocator.h ****       _GLIBCXX20_CONSTEXPR
 156:/usr/include/c++/11/bits/allocator.h ****       allocator() _GLIBCXX_NOTHROW { }
 504              		.loc 3 156 7
 505              		.cfi_startproc
 506 0000 F30F1EFA 		endbr64
 507 0004 55       		pushq	%rbp
 508              		.cfi_def_cfa_offset 16
 509              		.cfi_offset 6, -16
 510 0005 4889E5   		movq	%rsp, %rbp
 511              		.cfi_def_cfa_register 6
 512 0008 4883EC10 		subq	$16, %rsp
 513 000c 48897DF8 		movq	%rdi, -8(%rbp)
 514              	.LBB9:
 515              		.loc 3 156 36
 516 0010 488B45F8 		movq	-8(%rbp), %rax
 517 0014 4889C7   		movq	%rax, %rdi
 518 0017 E8000000 		call	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC
 518      00
 519              	.LBE9:
 520              		.loc 3 156 38
 521 001c 90       		nop
 522 001d C9       		leave
 523              		.cfi_def_cfa 7, 8
 524 001e C3       		ret
 525              		.cfi_endproc
 526              	.LFE1009:
 528              		.weak	_ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev
 529              		.set	_ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev,_ZNSaISt4pairIiNSt7
 530              		.section	.text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES
 531              		.align 2
 532              		.weak	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE17
 534              	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE17_Vector
 535              	.LFB1012:
  97:/usr/include/c++/11/bits/stl_vector.h **** 	: _M_start(), _M_finish(), _M_end_of_storage()
 536              		.loc 2 97 2
 537              		.cfi_startproc
 538 0000 F30F1EFA 		endbr64
 539 0004 55       		pushq	%rbp
 540              		.cfi_def_cfa_offset 16
 541              		.cfi_offset 6, -16
 542 0005 4889E5   		movq	%rsp, %rbp
 543              		.cfi_def_cfa_register 6
 544 0008 48897DF8 		movq	%rdi, -8(%rbp)
 545              	.LBB10:
  98:/usr/include/c++/11/bits/stl_vector.h **** 	{ }
 546              		.loc 2 98 4
 547 000c 488B45F8 		movq	-8(%rbp), %rax
 548 0010 48C70000 		movq	$0, (%rax)
 548      000000
  98:/usr/include/c++/11/bits/stl_vector.h **** 	{ }
 549              		.loc 2 98 16
 550 0017 488B45F8 		movq	-8(%rbp), %rax
 551 001b 48C74008 		movq	$0, 8(%rax)
 551      00000000 
  98:/usr/include/c++/11/bits/stl_vector.h **** 	{ }
 552              		.loc 2 98 29
 553 0023 488B45F8 		movq	-8(%rbp), %rax
 554 0027 48C74010 		movq	$0, 16(%rax)
 554      00000000 
 555              	.LBE10:
  99:/usr/include/c++/11/bits/stl_vector.h **** 
 556              		.loc 2 99 4
 557 002f 90       		nop
 558 0030 5D       		popq	%rbp
 559              		.cfi_def_cfa 7, 8
 560 0031 C3       		ret
 561              		.cfi_endproc
 562              	.LFE1012:
 564              		.weak	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE17
 565              		.set	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE17_
 566              		.section	.text._ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcE
 567              		.align 2
 568              		.weak	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE
 570              	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2Ev:
 571              	.LFB1021:
 572              		.file 4 "/usr/include/c++/11/ext/new_allocator.h"
   1:/usr/include/c++/11/ext/new_allocator.h **** // Allocator that wraps operator new -*- C++ -*-
   2:/usr/include/c++/11/ext/new_allocator.h **** 
   3:/usr/include/c++/11/ext/new_allocator.h **** // Copyright (C) 2001-2021 Free Software Foundation, Inc.
   4:/usr/include/c++/11/ext/new_allocator.h **** //
   5:/usr/include/c++/11/ext/new_allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/11/ext/new_allocator.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/11/ext/new_allocator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/11/ext/new_allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/11/ext/new_allocator.h **** // any later version.
  10:/usr/include/c++/11/ext/new_allocator.h **** 
  11:/usr/include/c++/11/ext/new_allocator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/11/ext/new_allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/11/ext/new_allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/11/ext/new_allocator.h **** // GNU General Public License for more details.
  15:/usr/include/c++/11/ext/new_allocator.h **** 
  16:/usr/include/c++/11/ext/new_allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/11/ext/new_allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/11/ext/new_allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/11/ext/new_allocator.h **** 
  20:/usr/include/c++/11/ext/new_allocator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/11/ext/new_allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/11/ext/new_allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/11/ext/new_allocator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/11/ext/new_allocator.h **** 
  25:/usr/include/c++/11/ext/new_allocator.h **** /** @file ext/new_allocator.h
  26:/usr/include/c++/11/ext/new_allocator.h ****  *  This file is a GNU extension to the Standard C++ Library.
  27:/usr/include/c++/11/ext/new_allocator.h ****  */
  28:/usr/include/c++/11/ext/new_allocator.h **** 
  29:/usr/include/c++/11/ext/new_allocator.h **** #ifndef _NEW_ALLOCATOR_H
  30:/usr/include/c++/11/ext/new_allocator.h **** #define _NEW_ALLOCATOR_H 1
  31:/usr/include/c++/11/ext/new_allocator.h **** 
  32:/usr/include/c++/11/ext/new_allocator.h **** #include <bits/c++config.h>
  33:/usr/include/c++/11/ext/new_allocator.h **** #include <new>
  34:/usr/include/c++/11/ext/new_allocator.h **** #include <bits/functexcept.h>
  35:/usr/include/c++/11/ext/new_allocator.h **** #include <bits/move.h>
  36:/usr/include/c++/11/ext/new_allocator.h **** #if __cplusplus >= 201103L
  37:/usr/include/c++/11/ext/new_allocator.h **** #include <type_traits>
  38:/usr/include/c++/11/ext/new_allocator.h **** #endif
  39:/usr/include/c++/11/ext/new_allocator.h **** 
  40:/usr/include/c++/11/ext/new_allocator.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  41:/usr/include/c++/11/ext/new_allocator.h **** {
  42:/usr/include/c++/11/ext/new_allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  43:/usr/include/c++/11/ext/new_allocator.h **** 
  44:/usr/include/c++/11/ext/new_allocator.h ****   /**
  45:/usr/include/c++/11/ext/new_allocator.h ****    *  @brief  An allocator that uses global new, as per C++03 [20.4.1].
  46:/usr/include/c++/11/ext/new_allocator.h ****    *  @ingroup allocators
  47:/usr/include/c++/11/ext/new_allocator.h ****    *
  48:/usr/include/c++/11/ext/new_allocator.h ****    *  This is precisely the allocator defined in the C++ Standard.
  49:/usr/include/c++/11/ext/new_allocator.h ****    *    - all allocation calls operator new
  50:/usr/include/c++/11/ext/new_allocator.h ****    *    - all deallocation calls operator delete
  51:/usr/include/c++/11/ext/new_allocator.h ****    *
  52:/usr/include/c++/11/ext/new_allocator.h ****    *  @tparam  _Tp  Type of allocated object.
  53:/usr/include/c++/11/ext/new_allocator.h ****    */
  54:/usr/include/c++/11/ext/new_allocator.h ****   template<typename _Tp>
  55:/usr/include/c++/11/ext/new_allocator.h ****     class new_allocator
  56:/usr/include/c++/11/ext/new_allocator.h ****     {
  57:/usr/include/c++/11/ext/new_allocator.h ****     public:
  58:/usr/include/c++/11/ext/new_allocator.h ****       typedef _Tp        value_type;
  59:/usr/include/c++/11/ext/new_allocator.h ****       typedef std::size_t     size_type;
  60:/usr/include/c++/11/ext/new_allocator.h ****       typedef std::ptrdiff_t  difference_type;
  61:/usr/include/c++/11/ext/new_allocator.h **** #if __cplusplus <= 201703L
  62:/usr/include/c++/11/ext/new_allocator.h ****       typedef _Tp*       pointer;
  63:/usr/include/c++/11/ext/new_allocator.h ****       typedef const _Tp* const_pointer;
  64:/usr/include/c++/11/ext/new_allocator.h ****       typedef _Tp&       reference;
  65:/usr/include/c++/11/ext/new_allocator.h ****       typedef const _Tp& const_reference;
  66:/usr/include/c++/11/ext/new_allocator.h **** 
  67:/usr/include/c++/11/ext/new_allocator.h ****       template<typename _Tp1>
  68:/usr/include/c++/11/ext/new_allocator.h **** 	struct rebind
  69:/usr/include/c++/11/ext/new_allocator.h **** 	{ typedef new_allocator<_Tp1> other; };
  70:/usr/include/c++/11/ext/new_allocator.h **** #endif
  71:/usr/include/c++/11/ext/new_allocator.h **** 
  72:/usr/include/c++/11/ext/new_allocator.h **** #if __cplusplus >= 201103L
  73:/usr/include/c++/11/ext/new_allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  74:/usr/include/c++/11/ext/new_allocator.h ****       // 2103. propagate_on_container_move_assignment
  75:/usr/include/c++/11/ext/new_allocator.h ****       typedef std::true_type propagate_on_container_move_assignment;
  76:/usr/include/c++/11/ext/new_allocator.h **** #endif
  77:/usr/include/c++/11/ext/new_allocator.h **** 
  78:/usr/include/c++/11/ext/new_allocator.h ****       _GLIBCXX20_CONSTEXPR
  79:/usr/include/c++/11/ext/new_allocator.h ****       new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 573              		.loc 4 79 7
 574              		.cfi_startproc
 575 0000 F30F1EFA 		endbr64
 576 0004 55       		pushq	%rbp
 577              		.cfi_def_cfa_offset 16
 578              		.cfi_offset 6, -16
 579 0005 4889E5   		movq	%rsp, %rbp
 580              		.cfi_def_cfa_register 6
 581 0008 48897DF8 		movq	%rdi, -8(%rbp)
 582              		.loc 4 79 47
 583 000c 90       		nop
 584 000d 5D       		popq	%rbp
 585              		.cfi_def_cfa 7, 8
 586 000e C3       		ret
 587              		.cfi_endproc
 588              	.LFE1021:
 590              		.weak	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE
 591              		.set	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC
 592              		.text
 593              	.Letext0:
 594              		.file 5 "/usr/include/c++/11/bits/stl_iterator_base_types.h"
 595              		.file 6 "/usr/include/c++/11/cwchar"
 596              		.file 7 "/usr/include/c++/11/bits/char_traits.h"
 597              		.file 8 "/usr/include/x86_64-linux-gnu/c++/11/bits/c++config.h"
 598              		.file 9 "/usr/include/c++/11/clocale"
 599              		.file 10 "/usr/include/c++/11/bits/basic_string.h"
 600              		.file 11 "/usr/include/c++/11/bits/basic_string.tcc"
 601              		.file 12 "/usr/include/c++/11/bits/stl_pair.h"
 602              		.file 13 "/usr/include/c++/11/bits/vector.tcc"
 603              		.file 14 "/usr/include/c++/11/bits/stringfwd.h"
 604              		.file 15 "/usr/include/c++/11/bits/functexcept.h"
 605              		.file 16 "/usr/include/c++/11/bits/stl_iterator_base_funcs.h"
 606              		.file 17 "/usr/include/c++/11/debug/debug.h"
 607              		.file 18 "/usr/include/c++/11/bits/predefined_ops.h"
 608              		.file 19 "/usr/include/c++/11/ext/alloc_traits.h"
 609              		.file 20 "/usr/include/c++/11/bits/stl_iterator.h"
 610              		.file 21 "/usr/include/c++/11/ext/type_traits.h"
 611              		.file 22 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h"
 612              		.file 23 "<built-in>"
 613              		.file 24 "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h"
 614              		.file 25 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h"
 615              		.file 26 "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h"
 616              		.file 27 "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h"
 617              		.file 28 "/usr/include/wchar.h"
 618              		.file 29 "/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h"
 619              		.file 30 "/usr/include/locale.h"
 620              		.file 31 "DeferredTestResult.h"
 11440              		.align 8
 11443              	DW.ref.__gxx_personality_v0:
 11444 0000 00000000 		.quad	__gxx_personality_v0
 11444      00000000 
 11445              		.ident	"GCC: (Ubuntu 11.3.0-1ubuntu1~22.04) 11.3.0"
 11446              		.section	.note.GNU-stack,"",@progbits
 11447              		.section	.note.gnu.property,"a"
 11448              		.align 8
 11449 0000 04000000 		.long	1f - 0f
 11450 0004 10000000 		.long	4f - 1f
 11451 0008 05000000 		.long	5
 11452              	0:
 11453 000c 474E5500 		.string	"GNU"
 11454              	1:
 11455              		.align 8
 11456 0010 020000C0 		.long	0xc0000002
 11457 0014 04000000 		.long	3f - 2f
 11458              	2:
 11459 0018 03000000 		.long	0x3
 11460              	3:
 11461 001c 00000000 		.align 8
 11462              	4:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 DeferredTestResult.cpp
     /tmp/ccZcXuMZ.s:12     .text:0000000000000000 _ZN8UnitTest18DeferredTestResultC2Ev
     /tmp/ccZcXuMZ.s:11443  .data.rel.local.DW.ref.__gxx_personality_v0:0000000000000000 DW.ref.__gxx_personality_v0
     /tmp/ccZcXuMZ.s:401    .text._ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EEC2Ev:0000000000000000 _ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EEC1Ev
     /tmp/ccZcXuMZ.s:12     .text:0000000000000000 _ZN8UnitTest18DeferredTestResultC1Ev
     /tmp/ccZcXuMZ.s:207    .text:0000000000000196 _ZN8UnitTest18DeferredTestResultC2EPKcS2_
     /tmp/ccZcXuMZ.s:207    .text:0000000000000196 _ZN8UnitTest18DeferredTestResultC1EPKcS2_
     /tmp/ccZcXuMZ.s:401    .text._ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EEC2Ev:0000000000000000 _ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EEC2Ev
     /tmp/ccZcXuMZ.s:434    .text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EEC2Ev:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EEC2Ev
     /tmp/ccZcXuMZ.s:466    .text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_Vector_implC2Ev:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_Vector_implC1Ev
     /tmp/ccZcXuMZ.s:434    .text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EEC2Ev:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EEC1Ev
     /tmp/ccZcXuMZ.s:466    .text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_Vector_implC2Ev:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_Vector_implC2Ev
     /tmp/ccZcXuMZ.s:501    .text._ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2Ev:0000000000000000 _ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2Ev
     /tmp/ccZcXuMZ.s:534    .text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE17_Vector_impl_dataC2Ev:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE17_Vector_impl_dataC2Ev
     /tmp/ccZcXuMZ.s:570    .text._ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2Ev:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2Ev
     /tmp/ccZcXuMZ.s:501    .text._ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2Ev:0000000000000000 _ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev
     /tmp/ccZcXuMZ.s:534    .text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE17_Vector_impl_dataC2Ev:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE17_Vector_impl_dataC1Ev
     /tmp/ccZcXuMZ.s:570    .text._ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2Ev:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev
                           .group:0000000000000000 _ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EEC5Ev
                           .group:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EEC5Ev
                           .group:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_Vector_implC5Ev
                           .group:0000000000000000 _ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC5Ev
                           .group:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE17_Vector_impl_dataC5Ev
                           .group:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC5Ev

UNDEFINED SYMBOLS
_ZNSaIcEC1Ev
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_
_ZNSaIcED1Ev
_Unwind_Resume
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev
__stack_chk_fail
__gxx_personality_v0
