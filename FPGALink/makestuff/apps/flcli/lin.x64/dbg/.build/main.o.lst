   1              		.file	"main.c"
   2              		.text
   3              	.Ltext0:
   4              		.file 0 "/home/pong/FPGALink/makestuff/apps/flcli" "main.c"
   5              		.local	ptr
   6              		.comm	ptr,8,8
   7              		.local	enableBenchmarking
   8              		.comm	enableBenchmarking,1,1
  10              	isHexDigit:
  11              	.LFB4:
  12              		.file 1 "main.c"
   1:main.c        **** /* 
   2:main.c        ****  * Copyright (C) 2012-2014 Chris McClelland
   3:main.c        ****  *
   4:main.c        ****  * This program is free software: you can redistribute it and/or modify
   5:main.c        ****  * it under the terms of the GNU General Public License as published by
   6:main.c        ****  * the Free Software Foundation, either version 3 of the License, or
   7:main.c        ****  * (at your option) any later version.
   8:main.c        ****  *
   9:main.c        ****  * This program is distributed in the hope that it will be useful,
  10:main.c        ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:main.c        ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:main.c        ****  * GNU General Public License for more details.
  13:main.c        ****  *  
  14:main.c        ****  * You should have received a copy of the GNU General Public License
  15:main.c        ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:main.c        ****  */
  17:main.c        **** #include <stdio.h>
  18:main.c        **** #include <stdlib.h>
  19:main.c        **** #include <string.h>
  20:main.c        **** #include <errno.h>
  21:main.c        **** #include <makestuff.h>
  22:main.c        **** #include <libfpgalink.h>
  23:main.c        **** #include <libbuffer.h>
  24:main.c        **** #include <liberror.h>
  25:main.c        **** #include <libdump.h>
  26:main.c        **** #include <argtable2.h>
  27:main.c        **** #include <readline/readline.h>
  28:main.c        **** #include <readline/history.h>
  29:main.c        **** #ifdef WIN32
  30:main.c        **** #include <Windows.h>
  31:main.c        **** #else
  32:main.c        **** #include <sys/time.h>
  33:main.c        **** #endif
  34:main.c        **** 
  35:main.c        **** bool sigIsRaised(void);
  36:main.c        **** void sigRegisterHandler(void);
  37:main.c        **** 
  38:main.c        **** static const char *ptr;
  39:main.c        **** static bool enableBenchmarking = false;
  40:main.c        **** 
  41:main.c        **** static bool isHexDigit(char ch) {
  13              		.loc 1 41 33
  14              		.cfi_startproc
  15 0000 F30F1EFA 		endbr64
  16 0004 55       		pushq	%rbp
  17              		.cfi_def_cfa_offset 16
  18              		.cfi_offset 6, -16
  19 0005 4889E5   		movq	%rsp, %rbp
  20              		.cfi_def_cfa_register 6
  21 0008 89F8     		movl	%edi, %eax
  22 000a 8845FC   		movb	%al, -4(%rbp)
  42:main.c        **** 	return
  43:main.c        **** 		(ch >= '0' && ch <= '9') ||
  44:main.c        **** 		(ch >= 'a' && ch <= 'f') ||
  23              		.loc 1 44 28
  24 000d 807DFC2F 		cmpb	$47, -4(%rbp)
  25 0011 7E06     		jle	.L2
  43:main.c        **** 		(ch >= 'a' && ch <= 'f') ||
  26              		.loc 1 43 14
  27 0013 807DFC39 		cmpb	$57, -4(%rbp)
  28 0017 7E18     		jle	.L3
  29              	.L2:
  43:main.c        **** 		(ch >= 'a' && ch <= 'f') ||
  30              		.loc 1 43 28 discriminator 1
  31 0019 807DFC60 		cmpb	$96, -4(%rbp)
  32 001d 7E06     		jle	.L4
  33              		.loc 1 44 14
  34 001f 807DFC66 		cmpb	$102, -4(%rbp)
  35 0023 7E0C     		jle	.L3
  36              	.L4:
  37              		.loc 1 44 28 discriminator 2
  38 0025 807DFC40 		cmpb	$64, -4(%rbp)
  39 0029 7E0D     		jle	.L5
  45:main.c        **** 		(ch >= 'A' && ch <= 'F');
  40              		.loc 1 45 14
  41 002b 807DFC46 		cmpb	$70, -4(%rbp)
  42 002f 7F07     		jg	.L5
  43              	.L3:
  44:main.c        **** 		(ch >= 'A' && ch <= 'F');
  44              		.loc 1 44 28 discriminator 1
  45 0031 B8010000 		movl	$1, %eax
  45      00
  46 0036 EB05     		jmp	.L6
  47              	.L5:
  44:main.c        **** 		(ch >= 'A' && ch <= 'F');
  48              		.loc 1 44 28 is_stmt 0 discriminator 3
  49 0038 B8000000 		movl	$0, %eax
  49      00
  50              	.L6:
  44:main.c        **** 		(ch >= 'A' && ch <= 'F');
  51              		.loc 1 44 28 discriminator 5
  52 003d 83E001   		andl	$1, %eax
  46:main.c        **** }
  53              		.loc 1 46 1 is_stmt 1 discriminator 5
  54 0040 5D       		popq	%rbp
  55              		.cfi_def_cfa 7, 8
  56 0041 C3       		ret
  57              		.cfi_endproc
  58              	.LFE4:
  61              	calcChecksum:
  62              	.LFB5:
  47:main.c        **** 
  48:main.c        **** static uint16 calcChecksum(const uint8 *data, size_t length) {
  63              		.loc 1 48 62
  64              		.cfi_startproc
  65 0042 F30F1EFA 		endbr64
  66 0046 55       		pushq	%rbp
  67              		.cfi_def_cfa_offset 16
  68              		.cfi_offset 6, -16
  69 0047 4889E5   		movq	%rsp, %rbp
  70              		.cfi_def_cfa_register 6
  71 004a 48897DE8 		movq	%rdi, -24(%rbp)
  72 004e 488975E0 		movq	%rsi, -32(%rbp)
  49:main.c        **** 	uint16 cksum = 0x0000;
  73              		.loc 1 49 9
  74 0052 66C745FE 		movw	$0, -2(%rbp)
  74      0000
  50:main.c        **** 	while ( length-- ) {
  75              		.loc 1 50 8
  76 0058 EB16     		jmp	.L9
  77              	.L10:
  51:main.c        **** 		cksum = (uint16)(cksum + *data++);
  78              		.loc 1 51 33
  79 005a 488B45E8 		movq	-24(%rbp), %rax
  80 005e 488D5001 		leaq	1(%rax), %rdx
  81 0062 488955E8 		movq	%rdx, -24(%rbp)
  82              		.loc 1 51 28
  83 0066 0FB600   		movzbl	(%rax), %eax
  84 0069 0FB6C0   		movzbl	%al, %eax
  85              		.loc 1 51 9
  86 006c 660145FE 		addw	%ax, -2(%rbp)
  87              	.L9:
  50:main.c        **** 	while ( length-- ) {
  88              		.loc 1 50 16
  89 0070 488B45E0 		movq	-32(%rbp), %rax
  90 0074 488D50FF 		leaq	-1(%rax), %rdx
  91 0078 488955E0 		movq	%rdx, -32(%rbp)
  50:main.c        **** 	while ( length-- ) {
  92              		.loc 1 50 10
  93 007c 4885C0   		testq	%rax, %rax
  94 007f 75D9     		jne	.L10
  52:main.c        **** 	}
  53:main.c        **** 	return cksum;
  95              		.loc 1 53 9
  96 0081 0FB745FE 		movzwl	-2(%rbp), %eax
  54:main.c        **** }
  97              		.loc 1 54 1
  98 0085 5D       		popq	%rbp
  99              		.cfi_def_cfa 7, 8
 100 0086 C3       		ret
 101              		.cfi_endproc
 102              	.LFE5:
 105              	getHexNibble:
 106              	.LFB6:
  55:main.c        **** 
  56:main.c        **** static bool getHexNibble(char hexDigit, uint8 *nibble) {
 107              		.loc 1 56 56
 108              		.cfi_startproc
 109 0087 F30F1EFA 		endbr64
 110 008b 55       		pushq	%rbp
 111              		.cfi_def_cfa_offset 16
 112              		.cfi_offset 6, -16
 113 008c 4889E5   		movq	%rsp, %rbp
 114              		.cfi_def_cfa_register 6
 115 008f 89F8     		movl	%edi, %eax
 116 0091 488975F0 		movq	%rsi, -16(%rbp)
 117 0095 8845FC   		movb	%al, -4(%rbp)
  57:main.c        **** 	if ( hexDigit >= '0' && hexDigit <= '9' ) {
 118              		.loc 1 57 5
 119 0098 807DFC2F 		cmpb	$47, -4(%rbp)
 120 009c 7E1A     		jle	.L13
 121              		.loc 1 57 23 discriminator 1
 122 009e 807DFC39 		cmpb	$57, -4(%rbp)
 123 00a2 7F14     		jg	.L13
  58:main.c        **** 		*nibble = (uint8)(hexDigit - '0');
 124              		.loc 1 58 13
 125 00a4 0FB645FC 		movzbl	-4(%rbp), %eax
 126 00a8 8D50D0   		leal	-48(%rax), %edx
 127              		.loc 1 58 11
 128 00ab 488B45F0 		movq	-16(%rbp), %rax
 129 00af 8810     		movb	%dl, (%rax)
  59:main.c        **** 		return false;
 130              		.loc 1 59 10
 131 00b1 B8000000 		movl	$0, %eax
 131      00
 132 00b6 EB45     		jmp	.L14
 133              	.L13:
  60:main.c        **** 	} else if ( hexDigit >= 'a' && hexDigit <= 'f' ) {
 134              		.loc 1 60 12
 135 00b8 807DFC60 		cmpb	$96, -4(%rbp)
 136 00bc 7E1A     		jle	.L15
 137              		.loc 1 60 30 discriminator 1
 138 00be 807DFC66 		cmpb	$102, -4(%rbp)
 139 00c2 7F14     		jg	.L15
  61:main.c        **** 		*nibble = (uint8)(hexDigit - 'a' + 10);
 140              		.loc 1 61 13
 141 00c4 0FB645FC 		movzbl	-4(%rbp), %eax
 142 00c8 8D50A9   		leal	-87(%rax), %edx
 143              		.loc 1 61 11
 144 00cb 488B45F0 		movq	-16(%rbp), %rax
 145 00cf 8810     		movb	%dl, (%rax)
  62:main.c        **** 		return false;
 146              		.loc 1 62 10
 147 00d1 B8000000 		movl	$0, %eax
 147      00
 148 00d6 EB25     		jmp	.L14
 149              	.L15:
  63:main.c        **** 	} else if ( hexDigit >= 'A' && hexDigit <= 'F' ) {
 150              		.loc 1 63 12
 151 00d8 807DFC40 		cmpb	$64, -4(%rbp)
 152 00dc 7E1A     		jle	.L16
 153              		.loc 1 63 30 discriminator 1
 154 00de 807DFC46 		cmpb	$70, -4(%rbp)
 155 00e2 7F14     		jg	.L16
  64:main.c        **** 		*nibble = (uint8)(hexDigit - 'A' + 10);
 156              		.loc 1 64 13
 157 00e4 0FB645FC 		movzbl	-4(%rbp), %eax
 158 00e8 8D50C9   		leal	-55(%rax), %edx
 159              		.loc 1 64 11
 160 00eb 488B45F0 		movq	-16(%rbp), %rax
 161 00ef 8810     		movb	%dl, (%rax)
  65:main.c        **** 		return false;
 162              		.loc 1 65 10
 163 00f1 B8000000 		movl	$0, %eax
 163      00
 164 00f6 EB05     		jmp	.L14
 165              	.L16:
  66:main.c        **** 	} else {
  67:main.c        **** 		return true;
 166              		.loc 1 67 10
 167 00f8 B8010000 		movl	$1, %eax
 167      00
 168              	.L14:
  68:main.c        **** 	}
  69:main.c        **** }
 169              		.loc 1 69 1
 170 00fd 5D       		popq	%rbp
 171              		.cfi_def_cfa 7, 8
 172 00fe C3       		ret
 173              		.cfi_endproc
 174              	.LFE6:
 177              	getHexByte:
 178              	.LFB7:
  70:main.c        **** 
  71:main.c        **** static int getHexByte(uint8 *byte) {
 179              		.loc 1 71 36
 180              		.cfi_startproc
 181 00ff F30F1EFA 		endbr64
 182 0103 55       		pushq	%rbp
 183              		.cfi_def_cfa_offset 16
 184              		.cfi_offset 6, -16
 185 0104 4889E5   		movq	%rsp, %rbp
 186              		.cfi_def_cfa_register 6
 187 0107 4883EC20 		subq	$32, %rsp
 188 010b 48897DE8 		movq	%rdi, -24(%rbp)
 189              		.loc 1 71 36
 190 010f 64488B04 		movq	%fs:40, %rax
 190      25280000 
 190      00
 191 0118 488945F8 		movq	%rax, -8(%rbp)
 192 011c 31C0     		xorl	%eax, %eax
  72:main.c        **** 	uint8 upperNibble;
  73:main.c        **** 	uint8 lowerNibble;
  74:main.c        **** 	if ( !getHexNibble(ptr[0], &upperNibble) && !getHexNibble(ptr[1], &lowerNibble) ) {
 193              		.loc 1 74 24
 194 011e 488B0500 		movq	ptr(%rip), %rax
 194      000000
 195 0125 0FB600   		movzbl	(%rax), %eax
 196              		.loc 1 74 8
 197 0128 0FBEC0   		movsbl	%al, %eax
 198 012b 488D55F6 		leaq	-10(%rbp), %rdx
 199 012f 4889D6   		movq	%rdx, %rsi
 200 0132 89C7     		movl	%eax, %edi
 201 0134 E84EFFFF 		call	getHexNibble
 201      FF
 202              		.loc 1 74 7
 203 0139 83F001   		xorl	$1, %eax
 204              		.loc 1 74 5
 205 013c 84C0     		testb	%al, %al
 206 013e 744C     		je	.L18
 207              		.loc 1 74 63 discriminator 1
 208 0140 488B0500 		movq	ptr(%rip), %rax
 208      000000
 209 0147 4883C001 		addq	$1, %rax
 210 014b 0FB600   		movzbl	(%rax), %eax
 211              		.loc 1 74 47 discriminator 1
 212 014e 0FBEC0   		movsbl	%al, %eax
 213 0151 488D55F7 		leaq	-9(%rbp), %rdx
 214 0155 4889D6   		movq	%rdx, %rsi
 215 0158 89C7     		movl	%eax, %edi
 216 015a E828FFFF 		call	getHexNibble
 216      FF
 217              		.loc 1 74 46 discriminator 1
 218 015f 83F001   		xorl	$1, %eax
 219              		.loc 1 74 43 discriminator 1
 220 0162 84C0     		testb	%al, %al
 221 0164 7426     		je	.L18
  75:main.c        **** 		*byte = (uint8)((upperNibble << 4) | lowerNibble);
 222              		.loc 1 75 32
 223 0166 0FB645F6 		movzbl	-10(%rbp), %eax
 224 016a 0FB6C0   		movzbl	%al, %eax
 225 016d C1E004   		sall	$4, %eax
 226              		.loc 1 75 38
 227 0170 89C2     		movl	%eax, %edx
 228 0172 0FB645F7 		movzbl	-9(%rbp), %eax
 229 0176 09D0     		orl	%edx, %eax
 230              		.loc 1 75 11
 231 0178 89C2     		movl	%eax, %edx
 232              		.loc 1 75 9
 233 017a 488B45E8 		movq	-24(%rbp), %rax
 234 017e 8810     		movb	%dl, (%rax)
  76:main.c        **** 		byte += 2;
 235              		.loc 1 76 8
 236 0180 488345E8 		addq	$2, -24(%rbp)
 236      02
  77:main.c        **** 		return 0;
 237              		.loc 1 77 10
 238 0185 B8000000 		movl	$0, %eax
 238      00
 239 018a EB05     		jmp	.L20
 240              	.L18:
  78:main.c        **** 	} else {
  79:main.c        **** 		return 1;
 241              		.loc 1 79 10
 242 018c B8010000 		movl	$1, %eax
 242      00
 243              	.L20:
  80:main.c        **** 	}
  81:main.c        **** }
 244              		.loc 1 81 1 discriminator 1
 245 0191 488B55F8 		movq	-8(%rbp), %rdx
 246 0195 64482B14 		subq	%fs:40, %rdx
 246      25280000 
 246      00
 247 019e 7405     		je	.L21
 248              		.loc 1 81 1 is_stmt 0
 249 01a0 E8000000 		call	__stack_chk_fail@PLT
 249      00
 250              	.L21:
 251 01a5 C9       		leave
 252              		.cfi_def_cfa 7, 8
 253 01a6 C3       		ret
 254              		.cfi_endproc
 255              	.LFE7:
 257              		.section	.rodata
 258              	.LC0:
 259 0000 556E7061 		.string	"Unparseable hex number"
 259      72736561 
 259      626C6520 
 259      68657820 
 259      6E756D62 
 260              	.LC1:
 261 0017 4368616E 		.string	"Channel out of range"
 261      6E656C20 
 261      6F757420 
 261      6F662072 
 261      616E6765 
 262              	.LC2:
 263 002c 436F6E64 		.string	"Conduit out of range"
 263      75697420 
 263      6F757420 
 263      6F662072 
 263      616E6765 
 264              	.LC3:
 265 0041 496C6C65 		.string	"Illegal character"
 265      67616C20 
 265      63686172 
 265      61637465 
 265      7200
 266              	.LC4:
 267 0053 556E7465 		.string	"Unterminated string"
 267      726D696E 
 267      61746564 
 267      20737472 
 267      696E6700 
 268              	.LC5:
 269 0067 4E6F206D 		.string	"No memory"
 269      656D6F72 
 269      7900
 270              	.LC6:
 271 0071 456D7074 		.string	"Empty string"
 271      79207374 
 271      72696E67 
 271      00
 272              	.LC7:
 273 007e 4F646420 		.string	"Odd number of digits"
 273      6E756D62 
 273      6572206F 
 273      66206469 
 273      67697473 
 274              	.LC8:
 275 0093 43616E6E 		.string	"Cannot load file"
 275      6F74206C 
 275      6F616420 
 275      66696C65 
 275      00
 276              	.LC9:
 277 00a4 43616E6E 		.string	"Cannot save file"
 277      6F742073 
 277      61766520 
 277      66696C65 
 277      00
 278              	.LC10:
 279 00b5 42616420 		.string	"Bad arguments"
 279      61726775 
 279      6D656E74 
 279      7300
 280              		.section	.data.rel.ro.local,"aw"
 281              		.align 32
 284              	errMessages:
 285 0000 00000000 		.quad	0
 285      00000000 
 286 0008 00000000 		.quad	0
 286      00000000 
 287 0010 00000000 		.quad	.LC0
 287      00000000 
 288 0018 00000000 		.quad	.LC1
 288      00000000 
 289 0020 00000000 		.quad	.LC2
 289      00000000 
 290 0028 00000000 		.quad	.LC3
 290      00000000 
 291 0030 00000000 		.quad	.LC4
 291      00000000 
 292 0038 00000000 		.quad	.LC5
 292      00000000 
 293 0040 00000000 		.quad	.LC6
 293      00000000 
 294 0048 00000000 		.quad	.LC7
 294      00000000 
 295 0050 00000000 		.quad	.LC8
 295      00000000 
 296 0058 00000000 		.quad	.LC9
 296      00000000 
 297 0060 00000000 		.quad	.LC10
 297      00000000 
 298              		.section	.rodata
 299              	.LC11:
 300 00c3 646F5265 		.string	"doRead()"
 300      61642829 
 300      00
 301              		.text
 303              	doRead:
 304              	.LFB8:
  82:main.c        **** 
  83:main.c        **** static const char *const errMessages[] = {
  84:main.c        **** 	NULL,
  85:main.c        **** 	NULL,
  86:main.c        **** 	"Unparseable hex number",
  87:main.c        **** 	"Channel out of range",
  88:main.c        **** 	"Conduit out of range",
  89:main.c        **** 	"Illegal character",
  90:main.c        **** 	"Unterminated string",
  91:main.c        **** 	"No memory",
  92:main.c        **** 	"Empty string",
  93:main.c        **** 	"Odd number of digits",
  94:main.c        **** 	"Cannot load file",
  95:main.c        **** 	"Cannot save file",
  96:main.c        **** 	"Bad arguments"
  97:main.c        **** };
  98:main.c        **** 
  99:main.c        **** typedef enum {
 100:main.c        **** 	FLP_SUCCESS,
 101:main.c        **** 	FLP_LIBERR,
 102:main.c        **** 	FLP_BAD_HEX,
 103:main.c        **** 	FLP_CHAN_RANGE,
 104:main.c        **** 	FLP_CONDUIT_RANGE,
 105:main.c        **** 	FLP_ILL_CHAR,
 106:main.c        **** 	FLP_UNTERM_STRING,
 107:main.c        **** 	FLP_NO_MEMORY,
 108:main.c        **** 	FLP_EMPTY_STRING,
 109:main.c        **** 	FLP_ODD_DIGITS,
 110:main.c        **** 	FLP_CANNOT_LOAD,
 111:main.c        **** 	FLP_CANNOT_SAVE,
 112:main.c        **** 	FLP_ARGS
 113:main.c        **** } ReturnCode;
 114:main.c        **** 
 115:main.c        **** static ReturnCode doRead(
 116:main.c        **** 	struct FLContext *handle, uint8 chan, uint32 length, FILE *destFile, uint16 *checksum,
 117:main.c        **** 	const char **error)
 118:main.c        **** {
 305              		.loc 1 118 1 is_stmt 1
 306              		.cfi_startproc
 307 01a7 F30F1EFA 		endbr64
 308 01ab 55       		pushq	%rbp
 309              		.cfi_def_cfa_offset 16
 310              		.cfi_offset 6, -16
 311 01ac 4889E5   		movq	%rsp, %rbp
 312              		.cfi_def_cfa_register 6
 313 01af 4883EC60 		subq	$96, %rsp
 314 01b3 48897DC8 		movq	%rdi, -56(%rbp)
 315 01b7 89F0     		movl	%esi, %eax
 316 01b9 8955C0   		movl	%edx, -64(%rbp)
 317 01bc 48894DB8 		movq	%rcx, -72(%rbp)
 318 01c0 4C8945B0 		movq	%r8, -80(%rbp)
 319 01c4 4C894DA8 		movq	%r9, -88(%rbp)
 320 01c8 8845C4   		movb	%al, -60(%rbp)
 321              		.loc 1 118 1
 322 01cb 64488B04 		movq	%fs:40, %rax
 322      25280000 
 322      00
 323 01d4 488945F8 		movq	%rax, -8(%rbp)
 324 01d8 31C0     		xorl	%eax, %eax
 119:main.c        **** 	ReturnCode retVal = FLP_SUCCESS;
 325              		.loc 1 119 13
 326 01da C745D800 		movl	$0, -40(%rbp)
 326      000000
 120:main.c        **** 	uint32 bytesWritten;
 121:main.c        **** 	FLStatus fStatus;
 122:main.c        **** 	uint32 chunkSize;
 123:main.c        **** 	const uint8 *recvData;
 124:main.c        **** 	uint32 actualLength;
 125:main.c        **** 	const uint8 *ptr;
 126:main.c        **** 	uint16 csVal = 0x0000;
 327              		.loc 1 126 9
 328 01e1 66C745D2 		movw	$0, -46(%rbp)
 328      0000
 127:main.c        **** 	#define READ_MAX 65536
 128:main.c        **** 
 129:main.c        **** 	// Read first chunk
 130:main.c        **** 	chunkSize = length >= READ_MAX ? READ_MAX : length;
 329              		.loc 1 130 12
 330 01e7 8B45C0   		movl	-64(%rbp), %eax
 331 01ea BA000001 		movl	$65536, %edx
 331      00
 332 01ef 39D0     		cmpl	%edx, %eax
 333 01f1 0F47C2   		cmova	%edx, %eax
 334 01f4 8945DC   		movl	%eax, -36(%rbp)
 131:main.c        **** 	fStatus = flReadChannelAsyncSubmit(handle, chan, chunkSize, NULL, error);
 335              		.loc 1 131 12
 336 01f7 0FB675C4 		movzbl	-60(%rbp), %esi
 337 01fb 488B4DA8 		movq	-88(%rbp), %rcx
 338 01ff 8B55DC   		movl	-36(%rbp), %edx
 339 0202 488B45C8 		movq	-56(%rbp), %rax
 340 0206 4989C8   		movq	%rcx, %r8
 341 0209 B9000000 		movl	$0, %ecx
 341      00
 342 020e 4889C7   		movq	%rax, %rdi
 343 0211 E8000000 		call	flReadChannelAsyncSubmit@PLT
 343      00
 344 0216 8945E0   		movl	%eax, -32(%rbp)
 132:main.c        **** 	CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doRead()");
 345              		.loc 1 132 2
 346 0219 837DE000 		cmpl	$0, -32(%rbp)
 347 021d 7422     		je	.L23
 348              		.loc 1 132 2 is_stmt 0 discriminator 1
 349 021f 488B45A8 		movq	-88(%rbp), %rax
 350 0223 488D1500 		leaq	.LC11(%rip), %rdx
 350      000000
 351 022a 4889D6   		movq	%rdx, %rsi
 352 022d 4889C7   		movq	%rax, %rdi
 353 0230 E8000000 		call	errPrefix@PLT
 353      00
 354 0235 C745D801 		movl	$1, -40(%rbp)
 354      000000
 355 023c E9110200 		jmp	.L24
 355      00
 356              	.L23:
 133:main.c        **** 	length = length - chunkSize;
 357              		.loc 1 133 9 is_stmt 1
 358 0241 8B45DC   		movl	-36(%rbp), %eax
 359 0244 2945C0   		subl	%eax, -64(%rbp)
 134:main.c        **** 
 135:main.c        **** 	while ( length ) {
 360              		.loc 1 135 8
 361 0247 E92A0100 		jmp	.L25
 361      00
 362              	.L31:
 136:main.c        **** 		// Read chunk N
 137:main.c        **** 		chunkSize = length >= READ_MAX ? READ_MAX : length;
 363              		.loc 1 137 13
 364 024c 8B45C0   		movl	-64(%rbp), %eax
 365 024f BA000001 		movl	$65536, %edx
 365      00
 366 0254 39D0     		cmpl	%edx, %eax
 367 0256 0F47C2   		cmova	%edx, %eax
 368 0259 8945DC   		movl	%eax, -36(%rbp)
 138:main.c        **** 		fStatus = flReadChannelAsyncSubmit(handle, chan, chunkSize, NULL, error);
 369              		.loc 1 138 13
 370 025c 0FB675C4 		movzbl	-60(%rbp), %esi
 371 0260 488B4DA8 		movq	-88(%rbp), %rcx
 372 0264 8B55DC   		movl	-36(%rbp), %edx
 373 0267 488B45C8 		movq	-56(%rbp), %rax
 374 026b 4989C8   		movq	%rcx, %r8
 375 026e B9000000 		movl	$0, %ecx
 375      00
 376 0273 4889C7   		movq	%rax, %rdi
 377 0276 E8000000 		call	flReadChannelAsyncSubmit@PLT
 377      00
 378 027b 8945E0   		movl	%eax, -32(%rbp)
 139:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doRead()");
 379              		.loc 1 139 3
 380 027e 837DE000 		cmpl	$0, -32(%rbp)
 381 0282 7422     		je	.L26
 382              		.loc 1 139 3 is_stmt 0 discriminator 1
 383 0284 488B45A8 		movq	-88(%rbp), %rax
 384 0288 488D1500 		leaq	.LC11(%rip), %rdx
 384      000000
 385 028f 4889D6   		movq	%rdx, %rsi
 386 0292 4889C7   		movq	%rax, %rdi
 387 0295 E8000000 		call	errPrefix@PLT
 387      00
 388 029a C745D801 		movl	$1, -40(%rbp)
 388      000000
 389 02a1 E9AC0100 		jmp	.L24
 389      00
 390              	.L26:
 140:main.c        **** 		length = length - chunkSize;
 391              		.loc 1 140 10 is_stmt 1
 392 02a6 8B45DC   		movl	-36(%rbp), %eax
 393 02a9 2945C0   		subl	%eax, -64(%rbp)
 141:main.c        **** 		
 142:main.c        **** 		// Await chunk N-1
 143:main.c        **** 		fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, error);
 394              		.loc 1 143 13
 395 02ac 488B7DA8 		movq	-88(%rbp), %rdi
 396 02b0 488D4DD4 		leaq	-44(%rbp), %rcx
 397 02b4 488D55D4 		leaq	-44(%rbp), %rdx
 398 02b8 488D75E8 		leaq	-24(%rbp), %rsi
 399 02bc 488B45C8 		movq	-56(%rbp), %rax
 400 02c0 4989F8   		movq	%rdi, %r8
 401 02c3 4889C7   		movq	%rax, %rdi
 402 02c6 E8000000 		call	flReadChannelAsyncAwait@PLT
 402      00
 403 02cb 8945E0   		movl	%eax, -32(%rbp)
 144:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doRead()");
 404              		.loc 1 144 3
 405 02ce 837DE000 		cmpl	$0, -32(%rbp)
 406 02d2 7422     		je	.L27
 407              		.loc 1 144 3 is_stmt 0 discriminator 1
 408 02d4 488B45A8 		movq	-88(%rbp), %rax
 409 02d8 488D1500 		leaq	.LC11(%rip), %rdx
 409      000000
 410 02df 4889D6   		movq	%rdx, %rsi
 411 02e2 4889C7   		movq	%rax, %rdi
 412 02e5 E8000000 		call	errPrefix@PLT
 412      00
 413 02ea C745D801 		movl	$1, -40(%rbp)
 413      000000
 414 02f1 E95C0100 		jmp	.L24
 414      00
 415              	.L27:
 145:main.c        **** 
 146:main.c        **** 		// Write chunk N-1 to file
 147:main.c        **** 		bytesWritten = (uint32)fwrite(recvData, 1, actualLength, destFile);
 416              		.loc 1 147 26 is_stmt 1
 417 02f6 8B45D4   		movl	-44(%rbp), %eax
 418 02f9 89C6     		movl	%eax, %esi
 419 02fb 488B45E8 		movq	-24(%rbp), %rax
 420 02ff 488B55B8 		movq	-72(%rbp), %rdx
 421 0303 4889D1   		movq	%rdx, %rcx
 422 0306 4889F2   		movq	%rsi, %rdx
 423 0309 BE010000 		movl	$1, %esi
 423      00
 424 030e 4889C7   		movq	%rax, %rdi
 425 0311 E8000000 		call	fwrite@PLT
 425      00
 426              		.loc 1 147 16
 427 0316 8945E4   		movl	%eax, -28(%rbp)
 148:main.c        **** 		CHECK_STATUS(bytesWritten != actualLength, FLP_CANNOT_SAVE, cleanup, "doRead()");
 428              		.loc 1 148 3
 429 0319 8B45D4   		movl	-44(%rbp), %eax
 430 031c 3945E4   		cmpl	%eax, -28(%rbp)
 431 031f 7422     		je	.L28
 432              		.loc 1 148 3 is_stmt 0 discriminator 1
 433 0321 488B45A8 		movq	-88(%rbp), %rax
 434 0325 488D1500 		leaq	.LC11(%rip), %rdx
 434      000000
 435 032c 4889D6   		movq	%rdx, %rsi
 436 032f 4889C7   		movq	%rax, %rdi
 437 0332 E8000000 		call	errPrefix@PLT
 437      00
 438 0337 C745D80B 		movl	$11, -40(%rbp)
 438      000000
 439 033e E90F0100 		jmp	.L24
 439      00
 440              	.L28:
 149:main.c        **** 
 150:main.c        **** 		// Checksum chunk N-1
 151:main.c        **** 		chunkSize = actualLength;
 441              		.loc 1 151 13 is_stmt 1
 442 0343 8B45D4   		movl	-44(%rbp), %eax
 443 0346 8945DC   		movl	%eax, -36(%rbp)
 152:main.c        **** 		ptr = recvData;
 444              		.loc 1 152 7
 445 0349 488B45E8 		movq	-24(%rbp), %rax
 446 034d 488945F0 		movq	%rax, -16(%rbp)
 153:main.c        **** 		while ( chunkSize-- ) {
 447              		.loc 1 153 9
 448 0351 EB16     		jmp	.L29
 449              	.L30:
 154:main.c        **** 			csVal = (uint16)(csVal + *ptr++);
 450              		.loc 1 154 33
 451 0353 488B45F0 		movq	-16(%rbp), %rax
 452 0357 488D5001 		leaq	1(%rax), %rdx
 453 035b 488955F0 		movq	%rdx, -16(%rbp)
 454              		.loc 1 154 29
 455 035f 0FB600   		movzbl	(%rax), %eax
 456 0362 0FB6C0   		movzbl	%al, %eax
 457              		.loc 1 154 10
 458 0365 660145D2 		addw	%ax, -46(%rbp)
 459              	.L29:
 153:main.c        **** 		while ( chunkSize-- ) {
 460              		.loc 1 153 20
 461 0369 8B45DC   		movl	-36(%rbp), %eax
 462 036c 8D50FF   		leal	-1(%rax), %edx
 463 036f 8955DC   		movl	%edx, -36(%rbp)
 153:main.c        **** 		while ( chunkSize-- ) {
 464              		.loc 1 153 11
 465 0372 85C0     		testl	%eax, %eax
 466 0374 75DD     		jne	.L30
 467              	.L25:
 135:main.c        **** 		// Read chunk N
 468              		.loc 1 135 10
 469 0376 837DC000 		cmpl	$0, -64(%rbp)
 470 037a 0F85CCFE 		jne	.L31
 470      FFFF
 155:main.c        **** 		}
 156:main.c        **** 	}
 157:main.c        **** 
 158:main.c        **** 	// Await last chunk
 159:main.c        **** 	fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, error);
 471              		.loc 1 159 12
 472 0380 488B7DA8 		movq	-88(%rbp), %rdi
 473 0384 488D4DD4 		leaq	-44(%rbp), %rcx
 474 0388 488D55D4 		leaq	-44(%rbp), %rdx
 475 038c 488D75E8 		leaq	-24(%rbp), %rsi
 476 0390 488B45C8 		movq	-56(%rbp), %rax
 477 0394 4989F8   		movq	%rdi, %r8
 478 0397 4889C7   		movq	%rax, %rdi
 479 039a E8000000 		call	flReadChannelAsyncAwait@PLT
 479      00
 480 039f 8945E0   		movl	%eax, -32(%rbp)
 160:main.c        **** 	CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doRead()");
 481              		.loc 1 160 2
 482 03a2 837DE000 		cmpl	$0, -32(%rbp)
 483 03a6 7422     		je	.L32
 484              		.loc 1 160 2 is_stmt 0 discriminator 1
 485 03a8 488B45A8 		movq	-88(%rbp), %rax
 486 03ac 488D1500 		leaq	.LC11(%rip), %rdx
 486      000000
 487 03b3 4889D6   		movq	%rdx, %rsi
 488 03b6 4889C7   		movq	%rax, %rdi
 489 03b9 E8000000 		call	errPrefix@PLT
 489      00
 490 03be C745D801 		movl	$1, -40(%rbp)
 490      000000
 491 03c5 E9880000 		jmp	.L24
 491      00
 492              	.L32:
 161:main.c        **** 	
 162:main.c        **** 	// Write last chunk to file
 163:main.c        **** 	bytesWritten = (uint32)fwrite(recvData, 1, actualLength, destFile);
 493              		.loc 1 163 25 is_stmt 1
 494 03ca 8B45D4   		movl	-44(%rbp), %eax
 495 03cd 89C6     		movl	%eax, %esi
 496 03cf 488B45E8 		movq	-24(%rbp), %rax
 497 03d3 488B55B8 		movq	-72(%rbp), %rdx
 498 03d7 4889D1   		movq	%rdx, %rcx
 499 03da 4889F2   		movq	%rsi, %rdx
 500 03dd BE010000 		movl	$1, %esi
 500      00
 501 03e2 4889C7   		movq	%rax, %rdi
 502 03e5 E8000000 		call	fwrite@PLT
 502      00
 503              		.loc 1 163 15
 504 03ea 8945E4   		movl	%eax, -28(%rbp)
 164:main.c        **** 	CHECK_STATUS(bytesWritten != actualLength, FLP_CANNOT_SAVE, cleanup, "doRead()");
 505              		.loc 1 164 2
 506 03ed 8B45D4   		movl	-44(%rbp), %eax
 507 03f0 3945E4   		cmpl	%eax, -28(%rbp)
 508 03f3 741F     		je	.L33
 509              		.loc 1 164 2 is_stmt 0 discriminator 1
 510 03f5 488B45A8 		movq	-88(%rbp), %rax
 511 03f9 488D1500 		leaq	.LC11(%rip), %rdx
 511      000000
 512 0400 4889D6   		movq	%rdx, %rsi
 513 0403 4889C7   		movq	%rax, %rdi
 514 0406 E8000000 		call	errPrefix@PLT
 514      00
 515 040b C745D80B 		movl	$11, -40(%rbp)
 515      000000
 516 0412 EB3E     		jmp	.L24
 517              	.L33:
 165:main.c        **** 
 166:main.c        **** 	// Checksum last chunk
 167:main.c        **** 	chunkSize = actualLength;
 518              		.loc 1 167 12 is_stmt 1
 519 0414 8B45D4   		movl	-44(%rbp), %eax
 520 0417 8945DC   		movl	%eax, -36(%rbp)
 168:main.c        **** 	ptr = recvData;
 521              		.loc 1 168 6
 522 041a 488B45E8 		movq	-24(%rbp), %rax
 523 041e 488945F0 		movq	%rax, -16(%rbp)
 169:main.c        **** 	while ( chunkSize-- ) {
 524              		.loc 1 169 8
 525 0422 EB16     		jmp	.L34
 526              	.L35:
 170:main.c        **** 		csVal = (uint16)(csVal + *ptr++);
 527              		.loc 1 170 32
 528 0424 488B45F0 		movq	-16(%rbp), %rax
 529 0428 488D5001 		leaq	1(%rax), %rdx
 530 042c 488955F0 		movq	%rdx, -16(%rbp)
 531              		.loc 1 170 28
 532 0430 0FB600   		movzbl	(%rax), %eax
 533 0433 0FB6C0   		movzbl	%al, %eax
 534              		.loc 1 170 9
 535 0436 660145D2 		addw	%ax, -46(%rbp)
 536              	.L34:
 169:main.c        **** 	while ( chunkSize-- ) {
 537              		.loc 1 169 19
 538 043a 8B45DC   		movl	-36(%rbp), %eax
 539 043d 8D50FF   		leal	-1(%rax), %edx
 540 0440 8955DC   		movl	%edx, -36(%rbp)
 169:main.c        **** 	while ( chunkSize-- ) {
 541              		.loc 1 169 10
 542 0443 85C0     		testl	%eax, %eax
 543 0445 75DD     		jne	.L35
 171:main.c        **** 	}
 172:main.c        **** 	
 173:main.c        **** 	// Return checksum to caller
 174:main.c        **** 	*checksum = csVal;
 544              		.loc 1 174 12
 545 0447 488B45B0 		movq	-80(%rbp), %rax
 546 044b 0FB755D2 		movzwl	-46(%rbp), %edx
 547 044f 668910   		movw	%dx, (%rax)
 548              	.L24:
 175:main.c        **** cleanup:
 176:main.c        **** 	return retVal;
 549              		.loc 1 176 9
 550 0452 8B45D8   		movl	-40(%rbp), %eax
 177:main.c        **** }
 551              		.loc 1 177 1
 552 0455 488B55F8 		movq	-8(%rbp), %rdx
 553 0459 64482B14 		subq	%fs:40, %rdx
 553      25280000 
 553      00
 554 0462 7405     		je	.L37
 555 0464 E8000000 		call	__stack_chk_fail@PLT
 555      00
 556              	.L37:
 557 0469 C9       		leave
 558              		.cfi_def_cfa 7, 8
 559 046a C3       		ret
 560              		.cfi_endproc
 561              	.LFE8:
 563              		.section	.rodata
 564              	.LC12:
 565 00cc 646F5772 		.string	"doWrite()"
 565      69746528 
 565      2900
 566              		.text
 568              	doWrite:
 569              	.LFB9:
 178:main.c        **** 
 179:main.c        **** static ReturnCode doWrite(
 180:main.c        **** 	struct FLContext *handle, uint8 chan, FILE *srcFile, size_t *length, uint16 *checksum,
 181:main.c        **** 	const char **error)
 182:main.c        **** {
 570              		.loc 1 182 1
 571              		.cfi_startproc
 572 046b F30F1EFA 		endbr64
 573 046f 55       		pushq	%rbp
 574              		.cfi_def_cfa_offset 16
 575              		.cfi_offset 6, -16
 576 0470 4889E5   		movq	%rsp, %rbp
 577              		.cfi_def_cfa_register 6
 578 0473 4C8D9C24 		leaq	-65536(%rsp), %r11
 578      0000FFFF 
 579              	.LPSRL0:
 580 047b 4881EC00 		subq	$4096, %rsp
 580      100000
 581 0482 48830C24 		orq	$0, (%rsp)
 581      00
 582 0487 4C39DC   		cmpq	%r11, %rsp
 583 048a 75EF     		jne	.LPSRL0
 584 048c 4883EC70 		subq	$112, %rsp
 585 0490 4889BDB8 		movq	%rdi, -65608(%rbp)
 585      FFFEFF
 586 0497 89F0     		movl	%esi, %eax
 587 0499 488995A8 		movq	%rdx, -65624(%rbp)
 587      FFFEFF
 588 04a0 48898DA0 		movq	%rcx, -65632(%rbp)
 588      FFFEFF
 589 04a7 4C898598 		movq	%r8, -65640(%rbp)
 589      FFFEFF
 590 04ae 4C898D90 		movq	%r9, -65648(%rbp)
 590      FFFEFF
 591 04b5 8885B4FF 		movb	%al, -65612(%rbp)
 591      FEFF
 592              		.loc 1 182 1
 593 04bb 64488B04 		movq	%fs:40, %rax
 593      25280000 
 593      00
 594 04c4 488945F8 		movq	%rax, -8(%rbp)
 595 04c8 31C0     		xorl	%eax, %eax
 183:main.c        **** 	ReturnCode retVal = FLP_SUCCESS;
 596              		.loc 1 183 13
 597 04ca C785C8FF 		movl	$0, -65592(%rbp)
 597      FEFF0000 
 597      0000
 184:main.c        **** 	size_t bytesRead, i;
 185:main.c        **** 	FLStatus fStatus;
 186:main.c        **** 	const uint8 *ptr;
 187:main.c        **** 	uint16 csVal = 0x0000;
 598              		.loc 1 187 9
 599 04d4 66C785C6 		movw	$0, -65594(%rbp)
 599      FFFEFF00 
 599      00
 188:main.c        **** 	size_t lenVal = 0;
 600              		.loc 1 188 9
 601 04dd 48C785E0 		movq	$0, -65568(%rbp)
 601      FFFEFF00 
 601      000000
 602              	.L44:
 189:main.c        **** 	#define WRITE_MAX (65536 - 5)
 190:main.c        **** 	uint8 buffer[WRITE_MAX];
 191:main.c        **** 
 192:main.c        **** 	do {
 193:main.c        **** 		// Read Nth chunk
 194:main.c        **** 		bytesRead = fread(buffer, 1, WRITE_MAX, srcFile);
 603              		.loc 1 194 15
 604 04e8 488B95A8 		movq	-65624(%rbp), %rdx
 604      FFFEFF
 605 04ef 488D85F0 		leaq	-65552(%rbp), %rax
 605      FFFEFF
 606 04f6 4889D1   		movq	%rdx, %rcx
 607 04f9 BAFBFF00 		movl	$65531, %edx
 607      00
 608 04fe BE010000 		movl	$1, %esi
 608      00
 609 0503 4889C7   		movq	%rax, %rdi
 610 0506 E8000000 		call	fread@PLT
 610      00
 611 050b 488985E8 		movq	%rax, -65560(%rbp)
 611      FFFEFF
 195:main.c        **** 		if ( bytesRead ) {
 612              		.loc 1 195 6
 613 0512 4883BDE8 		cmpq	$0, -65560(%rbp)
 613      FFFEFF00 
 614 051a 0F84C700 		je	.L39
 614      0000
 196:main.c        **** 			// Update running total
 197:main.c        **** 			lenVal = lenVal + bytesRead;
 615              		.loc 1 197 11
 616 0520 488B85E8 		movq	-65560(%rbp), %rax
 616      FFFEFF
 617 0527 480185E0 		addq	%rax, -65568(%rbp)
 617      FFFEFF
 198:main.c        **** 
 199:main.c        **** 			// Submit Nth chunk
 200:main.c        **** 			fStatus = flWriteChannelAsync(handle, chan, bytesRead, buffer, error);
 618              		.loc 1 200 14
 619 052e 0FB6B5B4 		movzbl	-65612(%rbp), %esi
 619      FFFEFF
 620 0535 488BBD90 		movq	-65648(%rbp), %rdi
 620      FFFEFF
 621 053c 488D8DF0 		leaq	-65552(%rbp), %rcx
 621      FFFEFF
 622 0543 488B95E8 		movq	-65560(%rbp), %rdx
 622      FFFEFF
 623 054a 488B85B8 		movq	-65608(%rbp), %rax
 623      FFFEFF
 624 0551 4989F8   		movq	%rdi, %r8
 625 0554 4889C7   		movq	%rax, %rdi
 626 0557 E8000000 		call	flWriteChannelAsync@PLT
 626      00
 627 055c 8985CCFF 		movl	%eax, -65588(%rbp)
 627      FEFF
 201:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doWrite()");
 628              		.loc 1 201 4
 629 0562 83BDCCFF 		cmpl	$0, -65588(%rbp)
 629      FEFF00
 630 0569 7428     		je	.L40
 631              		.loc 1 201 4 is_stmt 0 discriminator 1
 632 056b 488B8590 		movq	-65648(%rbp), %rax
 632      FFFEFF
 633 0572 488D1500 		leaq	.LC12(%rip), %rdx
 633      000000
 634 0579 4889D6   		movq	%rdx, %rsi
 635 057c 4889C7   		movq	%rax, %rdi
 636 057f E8000000 		call	errPrefix@PLT
 636      00
 637 0584 C785C8FF 		movl	$1, -65592(%rbp)
 637      FEFF0100 
 637      0000
 638 058e E9D40000 		jmp	.L41
 638      00
 639              	.L40:
 202:main.c        **** 
 203:main.c        **** 			// Checksum Nth chunk
 204:main.c        **** 			i = bytesRead;
 640              		.loc 1 204 6 is_stmt 1
 641 0593 488B85E8 		movq	-65560(%rbp), %rax
 641      FFFEFF
 642 059a 488985D0 		movq	%rax, -65584(%rbp)
 642      FFFEFF
 205:main.c        **** 			ptr = buffer;
 643              		.loc 1 205 8
 644 05a1 488D85F0 		leaq	-65552(%rbp), %rax
 644      FFFEFF
 645 05a8 488985D8 		movq	%rax, -65576(%rbp)
 645      FFFEFF
 206:main.c        **** 			while ( i-- ) {
 646              		.loc 1 206 10
 647 05af EB1F     		jmp	.L42
 648              	.L43:
 207:main.c        **** 				csVal = (uint16)(csVal + *ptr++);
 649              		.loc 1 207 34
 650 05b1 488B85D8 		movq	-65576(%rbp), %rax
 650      FFFEFF
 651 05b8 488D5001 		leaq	1(%rax), %rdx
 652 05bc 488995D8 		movq	%rdx, -65576(%rbp)
 652      FFFEFF
 653              		.loc 1 207 30
 654 05c3 0FB600   		movzbl	(%rax), %eax
 655 05c6 0FB6C0   		movzbl	%al, %eax
 656              		.loc 1 207 11
 657 05c9 660185C6 		addw	%ax, -65594(%rbp)
 657      FFFEFF
 658              	.L42:
 206:main.c        **** 			while ( i-- ) {
 659              		.loc 1 206 13
 660 05d0 488B85D0 		movq	-65584(%rbp), %rax
 660      FFFEFF
 661 05d7 488D50FF 		leaq	-1(%rax), %rdx
 662 05db 488995D0 		movq	%rdx, -65584(%rbp)
 662      FFFEFF
 206:main.c        **** 			while ( i-- ) {
 663              		.loc 1 206 12
 664 05e2 4885C0   		testq	%rax, %rax
 665 05e5 75CA     		jne	.L43
 666              	.L39:
 208:main.c        **** 			}
 209:main.c        **** 		}
 210:main.c        **** 	} while ( bytesRead == WRITE_MAX );
 667              		.loc 1 210 22
 668 05e7 4881BDE8 		cmpq	$65531, -65560(%rbp)
 668      FFFEFFFB 
 668      FF0000
 669 05f2 0F84F0FE 		je	.L44
 669      FFFF
 211:main.c        **** 
 212:main.c        **** 	// Wait for writes to be received. This is optional, but it's only fair if we're benchmarking to
 213:main.c        **** 	// actually wait for the work to be completed.
 214:main.c        **** 	fStatus = flAwaitAsyncWrites(handle, error);
 670              		.loc 1 214 12
 671 05f8 488B9590 		movq	-65648(%rbp), %rdx
 671      FFFEFF
 672 05ff 488B85B8 		movq	-65608(%rbp), %rax
 672      FFFEFF
 673 0606 4889D6   		movq	%rdx, %rsi
 674 0609 4889C7   		movq	%rax, %rdi
 675 060c E8000000 		call	flAwaitAsyncWrites@PLT
 675      00
 676 0611 8985CCFF 		movl	%eax, -65588(%rbp)
 676      FEFF
 215:main.c        **** 	CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doWrite()");
 677              		.loc 1 215 2
 678 0617 83BDCCFF 		cmpl	$0, -65588(%rbp)
 678      FEFF00
 679 061e 7425     		je	.L45
 680              		.loc 1 215 2 is_stmt 0 discriminator 1
 681 0620 488B8590 		movq	-65648(%rbp), %rax
 681      FFFEFF
 682 0627 488D1500 		leaq	.LC12(%rip), %rdx
 682      000000
 683 062e 4889D6   		movq	%rdx, %rsi
 684 0631 4889C7   		movq	%rax, %rdi
 685 0634 E8000000 		call	errPrefix@PLT
 685      00
 686 0639 C785C8FF 		movl	$1, -65592(%rbp)
 686      FEFF0100 
 686      0000
 687 0643 EB22     		jmp	.L41
 688              	.L45:
 216:main.c        **** 
 217:main.c        **** 	// Return checksum & length to caller
 218:main.c        **** 	*checksum = csVal;
 689              		.loc 1 218 12 is_stmt 1
 690 0645 488B8598 		movq	-65640(%rbp), %rax
 690      FFFEFF
 691 064c 0FB795C6 		movzwl	-65594(%rbp), %edx
 691      FFFEFF
 692 0653 668910   		movw	%dx, (%rax)
 219:main.c        **** 	*length = lenVal;
 693              		.loc 1 219 10
 694 0656 488B85A0 		movq	-65632(%rbp), %rax
 694      FFFEFF
 695 065d 488B95E0 		movq	-65568(%rbp), %rdx
 695      FFFEFF
 696 0664 488910   		movq	%rdx, (%rax)
 697              	.L41:
 220:main.c        **** cleanup:
 221:main.c        **** 	return retVal;
 698              		.loc 1 221 9
 699 0667 8B85C8FF 		movl	-65592(%rbp), %eax
 699      FEFF
 222:main.c        **** }
 700              		.loc 1 222 1
 701 066d 488B55F8 		movq	-8(%rbp), %rdx
 702 0671 64482B14 		subq	%fs:40, %rdx
 702      25280000 
 702      00
 703 067a 7405     		je	.L47
 704 067c E8000000 		call	__stack_chk_fail@PLT
 704      00
 705              	.L47:
 706 0681 C9       		leave
 707              		.cfi_def_cfa 7, 8
 708 0682 C3       		ret
 709              		.cfi_endproc
 710              	.LFE9:
 712              		.section	.rodata
 713              	.LC13:
 714 00d6 776200   		.string	"wb"
 715 00d9 00000000 		.align 8
 715      000000
 716              	.LC16:
 717 00e0 52656164 		.string	"Read %d bytes (checksum 0x%04X) from channel %d at %f MiB/s\n"
 717      20256420 
 717      62797465 
 717      73202863 
 717      6865636B 
 718              	.LC17:
 719 011d 726200   		.string	"rb"
 720              		.align 8
 721              	.LC18:
 722 0120 57726F74 		.string	"Wrote %zu bytes (checksum 0x%04X) to channel %lu at %f MiB/s\n"
 722      6520257A 
 722      75206279 
 722      74657320 
 722      28636865 
 723              	.LC19:
 724 015e 25732061 		.string	"%s at column %d\n  %s\n  "
 724      7420636F 
 724      6C756D6E 
 724      2025640A 
 724      20202573 
 725              	.LC20:
 726 0176 5E0A00   		.string	"^\n"
 727              		.text
 729              	parseLine:
 730              	.LFB10:
 223:main.c        **** 
 224:main.c        **** static int parseLine(struct FLContext *handle, const char *line, const char **error) {
 731              		.loc 1 224 86
 732              		.cfi_startproc
 733 0683 F30F1EFA 		endbr64
 734 0687 55       		pushq	%rbp
 735              		.cfi_def_cfa_offset 16
 736              		.cfi_offset 6, -16
 737 0688 4889E5   		movq	%rsp, %rbp
 738              		.cfi_def_cfa_register 6
 739 068b 4881EC10 		subq	$272, %rsp
 739      010000
 740 0692 4889BD08 		movq	%rdi, -248(%rbp)
 740      FFFFFF
 741 0699 4889B500 		movq	%rsi, -256(%rbp)
 741      FFFFFF
 742 06a0 488995F8 		movq	%rdx, -264(%rbp)
 742      FEFFFF
 743              		.loc 1 224 86
 744 06a7 64488B04 		movq	%fs:40, %rax
 744      25280000 
 744      00
 745 06b0 488945F8 		movq	%rax, -8(%rbp)
 746 06b4 31C0     		xorl	%eax, %eax
 225:main.c        **** 	ReturnCode retVal = FLP_SUCCESS, status;
 747              		.loc 1 225 13
 748 06b6 C78514FF 		movl	$0, -236(%rbp)
 748      FFFF0000 
 748      0000
 226:main.c        **** 	FLStatus fStatus;
 227:main.c        **** 	struct Buffer dataFromFPGA = {0,};
 749              		.loc 1 227 16
 750 06c0 48C745D0 		movq	$0, -48(%rbp)
 750      00000000 
 751 06c8 48C745D8 		movq	$0, -40(%rbp)
 751      00000000 
 752 06d0 48C745E0 		movq	$0, -32(%rbp)
 752      00000000 
 753 06d8 48C745E8 		movq	$0, -24(%rbp)
 753      00000000 
 228:main.c        **** 	BufferStatus bStatus;
 229:main.c        **** 	uint8 *data = NULL;
 754              		.loc 1 229 9
 755 06e0 48C78548 		movq	$0, -184(%rbp)
 755      FFFFFF00 
 755      000000
 230:main.c        **** 	char *fileName = NULL;
 756              		.loc 1 230 8
 757 06eb 48C78550 		movq	$0, -176(%rbp)
 757      FFFFFF00 
 757      000000
 231:main.c        **** 	FILE *file = NULL;
 758              		.loc 1 231 8
 759 06f6 48C78558 		movq	$0, -168(%rbp)
 759      FFFFFF00 
 759      000000
 232:main.c        **** 	double totalTime, speed;
 233:main.c        **** 	#ifdef WIN32
 234:main.c        **** 		LARGE_INTEGER tvStart, tvEnd, freq;
 235:main.c        **** 		DWORD_PTR mask = 1;
 236:main.c        **** 		SetThreadAffinityMask(GetCurrentThread(), mask);
 237:main.c        **** 		QueryPerformanceFrequency(&freq);
 238:main.c        **** 	#else
 239:main.c        **** 		struct timeval tvStart, tvEnd;
 240:main.c        **** 		long long startTime, endTime;
 241:main.c        **** 	#endif
 242:main.c        **** 	bStatus = bufInitialise(&dataFromFPGA, 1024, 0x00, error);
 760              		.loc 1 242 12
 761 0701 488B95F8 		movq	-264(%rbp), %rdx
 761      FEFFFF
 762 0708 488D45D0 		leaq	-48(%rbp), %rax
 763 070c 4889D1   		movq	%rdx, %rcx
 764 070f BA000000 		movl	$0, %edx
 764      00
 765 0714 BE000400 		movl	$1024, %esi
 765      00
 766 0719 4889C7   		movq	%rax, %rdi
 767 071c E8000000 		call	bufInitialise@PLT
 767      00
 768 0721 898520FF 		movl	%eax, -224(%rbp)
 768      FFFF
 243:main.c        **** 	CHECK_STATUS(bStatus, FLP_LIBERR, cleanup);
 769              		.loc 1 243 2
 770 0727 83BD20FF 		cmpl	$0, -224(%rbp)
 770      FFFF00
 771 072e 740F     		je	.L49
 772              		.loc 1 243 2 is_stmt 0 discriminator 1
 773 0730 C78514FF 		movl	$1, -236(%rbp)
 773      FFFF0100 
 773      0000
 774 073a E9D70E00 		jmp	.L50
 774      00
 775              	.L49:
 244:main.c        **** 	ptr = line;
 776              		.loc 1 244 6 is_stmt 1
 777 073f 488B8500 		movq	-256(%rbp), %rax
 777      FFFFFF
 778 0746 48890500 		movq	%rax, ptr(%rip)
 778      000000
 245:main.c        **** 	do {
 246:main.c        **** 		while ( *ptr == ';' ) {
 779              		.loc 1 246 9
 780 074d EB12     		jmp	.L51
 781              	.L52:
 247:main.c        **** 			ptr++;
 782              		.loc 1 247 7
 783 074f 488B0500 		movq	ptr(%rip), %rax
 783      000000
 784 0756 4883C001 		addq	$1, %rax
 785 075a 48890500 		movq	%rax, ptr(%rip)
 785      000000
 786              	.L51:
 246:main.c        **** 			ptr++;
 787              		.loc 1 246 11
 788 0761 488B0500 		movq	ptr(%rip), %rax
 788      000000
 789 0768 0FB600   		movzbl	(%rax), %eax
 246:main.c        **** 			ptr++;
 790              		.loc 1 246 16
 791 076b 3C3B     		cmpb	$59, %al
 792 076d 74E0     		je	.L52
 248:main.c        **** 		}
 249:main.c        **** 		switch ( *ptr ) {
 793              		.loc 1 249 12
 794 076f 488B0500 		movq	ptr(%rip), %rax
 794      000000
 795 0776 0FB600   		movzbl	(%rax), %eax
 796 0779 0FBEC0   		movsbl	%al, %eax
 797              		.loc 1 249 3
 798 077c 83F877   		cmpl	$119, %eax
 799 077f 0F84C606 		je	.L53
 799      0000
 800 0785 83F877   		cmpl	$119, %eax
 801 0788 0F8F370E 		jg	.L54
 801      0000
 802 078e 83F82B   		cmpl	$43, %eax
 803 0791 0F84430D 		je	.L55
 803      0000
 804 0797 83F872   		cmpl	$114, %eax
 805 079a 0F85250E 		jne	.L54
 805      0000
 806              	.LBB2:
 250:main.c        **** 		case 'r':{
 251:main.c        **** 			uint32 chan;
 252:main.c        **** 			uint32 length = 1;
 807              		.loc 1 252 11
 808 07a0 C78518FF 		movl	$1, -232(%rbp)
 808      FFFF0100 
 808      0000
 253:main.c        **** 			char *end;
 254:main.c        **** 			ptr++;
 809              		.loc 1 254 7
 810 07aa 488B0500 		movq	ptr(%rip), %rax
 810      000000
 811 07b1 4883C001 		addq	$1, %rax
 812 07b5 48890500 		movq	%rax, ptr(%rip)
 812      000000
 255:main.c        **** 			
 256:main.c        **** 			// Get the channel to be read:
 257:main.c        **** 			errno = 0;
 813              		.loc 1 257 4
 814 07bc E8000000 		call	__errno_location@PLT
 814      00
 815              		.loc 1 257 10
 816 07c1 C7000000 		movl	$0, (%rax)
 816      0000
 258:main.c        **** 			chan = (uint32)strtoul(ptr, &end, 16);
 817              		.loc 1 258 19
 818 07c7 488B0500 		movq	ptr(%rip), %rax
 818      000000
 819 07ce 488D8D40 		leaq	-192(%rbp), %rcx
 819      FFFFFF
 820 07d5 BA100000 		movl	$16, %edx
 820      00
 821 07da 4889CE   		movq	%rcx, %rsi
 822 07dd 4889C7   		movq	%rax, %rdi
 823 07e0 E8000000 		call	strtoul@PLT
 823      00
 824              		.loc 1 258 9
 825 07e5 89852CFF 		movl	%eax, -212(%rbp)
 825      FFFF
 259:main.c        **** 			CHECK_STATUS(errno, FLP_BAD_HEX, cleanup);
 826              		.loc 1 259 4
 827 07eb E8000000 		call	__errno_location@PLT
 827      00
 828 07f0 8B00     		movl	(%rax), %eax
 829 07f2 85C0     		testl	%eax, %eax
 830 07f4 740F     		je	.L56
 831              		.loc 1 259 4 is_stmt 0 discriminator 1
 832 07f6 C78514FF 		movl	$2, -236(%rbp)
 832      FFFF0200 
 832      0000
 833 0800 E9110E00 		jmp	.L50
 833      00
 834              	.L56:
 260:main.c        **** 
 261:main.c        **** 			// Ensure that it's 0-127
 262:main.c        **** 			CHECK_STATUS(chan > 127, FLP_CHAN_RANGE, cleanup);
 835              		.loc 1 262 4 is_stmt 1
 836 0805 83BD2CFF 		cmpl	$127, -212(%rbp)
 836      FFFF7F
 837 080c 760F     		jbe	.L58
 838              		.loc 1 262 4 is_stmt 0 discriminator 1
 839 080e C78514FF 		movl	$3, -236(%rbp)
 839      FFFF0300 
 839      0000
 840 0818 E9F90D00 		jmp	.L50
 840      00
 841              	.L58:
 263:main.c        **** 			ptr = end;
 842              		.loc 1 263 8 is_stmt 1
 843 081d 488B8540 		movq	-192(%rbp), %rax
 843      FFFFFF
 844 0824 48890500 		movq	%rax, ptr(%rip)
 844      000000
 264:main.c        **** 
 265:main.c        **** 			// Only three valid chars at this point:
 266:main.c        **** 			CHECK_STATUS(*ptr != '\0' && *ptr != ';' && *ptr != ' ', FLP_ILL_CHAR, cleanup);
 845              		.loc 1 266 4
 846 082b 488B0500 		movq	ptr(%rip), %rax
 846      000000
 847 0832 0FB600   		movzbl	(%rax), %eax
 848 0835 84C0     		testb	%al, %al
 849 0837 742B     		je	.L59
 850              		.loc 1 266 4 is_stmt 0 discriminator 1
 851 0839 488B0500 		movq	ptr(%rip), %rax
 851      000000
 852 0840 0FB600   		movzbl	(%rax), %eax
 853 0843 3C3B     		cmpb	$59, %al
 854 0845 741D     		je	.L59
 855              		.loc 1 266 4 discriminator 2
 856 0847 488B0500 		movq	ptr(%rip), %rax
 856      000000
 857 084e 0FB600   		movzbl	(%rax), %eax
 858 0851 3C20     		cmpb	$32, %al
 859 0853 740F     		je	.L59
 860              		.loc 1 266 4 discriminator 3
 861 0855 C78514FF 		movl	$5, -236(%rbp)
 861      FFFF0500 
 861      0000
 862 085f E9B20D00 		jmp	.L50
 862      00
 863              	.L59:
 267:main.c        **** 
 268:main.c        **** 			if ( *ptr == ' ' ) {
 864              		.loc 1 268 9 is_stmt 1
 865 0864 488B0500 		movq	ptr(%rip), %rax
 865      000000
 866 086b 0FB600   		movzbl	(%rax), %eax
 867              		.loc 1 268 7
 868 086e 3C20     		cmpb	$32, %al
 869 0870 0F851A02 		jne	.L60
 869      0000
 269:main.c        **** 				ptr++;
 870              		.loc 1 269 8
 871 0876 488B0500 		movq	ptr(%rip), %rax
 871      000000
 872 087d 4883C001 		addq	$1, %rax
 873 0881 48890500 		movq	%rax, ptr(%rip)
 873      000000
 270:main.c        **** 
 271:main.c        **** 				// Get the read count:
 272:main.c        **** 				errno = 0;
 874              		.loc 1 272 5
 875 0888 E8000000 		call	__errno_location@PLT
 875      00
 876              		.loc 1 272 11
 877 088d C7000000 		movl	$0, (%rax)
 877      0000
 273:main.c        **** 				length = (uint32)strtoul(ptr, &end, 16);
 878              		.loc 1 273 22
 879 0893 488B0500 		movq	ptr(%rip), %rax
 879      000000
 880 089a 488D8D40 		leaq	-192(%rbp), %rcx
 880      FFFFFF
 881 08a1 BA100000 		movl	$16, %edx
 881      00
 882 08a6 4889CE   		movq	%rcx, %rsi
 883 08a9 4889C7   		movq	%rax, %rdi
 884 08ac E8000000 		call	strtoul@PLT
 884      00
 885              		.loc 1 273 12
 886 08b1 898518FF 		movl	%eax, -232(%rbp)
 886      FFFF
 274:main.c        **** 				CHECK_STATUS(errno, FLP_BAD_HEX, cleanup);
 887              		.loc 1 274 5
 888 08b7 E8000000 		call	__errno_location@PLT
 888      00
 889 08bc 8B00     		movl	(%rax), %eax
 890 08be 85C0     		testl	%eax, %eax
 891 08c0 740F     		je	.L61
 892              		.loc 1 274 5 is_stmt 0 discriminator 1
 893 08c2 C78514FF 		movl	$2, -236(%rbp)
 893      FFFF0200 
 893      0000
 894 08cc E9450D00 		jmp	.L50
 894      00
 895              	.L61:
 275:main.c        **** 				ptr = end;
 896              		.loc 1 275 9 is_stmt 1
 897 08d1 488B8540 		movq	-192(%rbp), %rax
 897      FFFFFF
 898 08d8 48890500 		movq	%rax, ptr(%rip)
 898      000000
 276:main.c        **** 				
 277:main.c        **** 				// Only three valid chars at this point:
 278:main.c        **** 				CHECK_STATUS(*ptr != '\0' && *ptr != ';' && *ptr != ' ', FLP_ILL_CHAR, cleanup);
 899              		.loc 1 278 5
 900 08df 488B0500 		movq	ptr(%rip), %rax
 900      000000
 901 08e6 0FB600   		movzbl	(%rax), %eax
 902 08e9 84C0     		testb	%al, %al
 903 08eb 742B     		je	.L62
 904              		.loc 1 278 5 is_stmt 0 discriminator 1
 905 08ed 488B0500 		movq	ptr(%rip), %rax
 905      000000
 906 08f4 0FB600   		movzbl	(%rax), %eax
 907 08f7 3C3B     		cmpb	$59, %al
 908 08f9 741D     		je	.L62
 909              		.loc 1 278 5 discriminator 2
 910 08fb 488B0500 		movq	ptr(%rip), %rax
 910      000000
 911 0902 0FB600   		movzbl	(%rax), %eax
 912 0905 3C20     		cmpb	$32, %al
 913 0907 740F     		je	.L62
 914              		.loc 1 278 5 discriminator 3
 915 0909 C78514FF 		movl	$5, -236(%rbp)
 915      FFFF0500 
 915      0000
 916 0913 E9FE0C00 		jmp	.L50
 916      00
 917              	.L62:
 279:main.c        **** 				if ( *ptr == ' ' ) {
 918              		.loc 1 279 10 is_stmt 1
 919 0918 488B0500 		movq	ptr(%rip), %rax
 919      000000
 920 091f 0FB600   		movzbl	(%rax), %eax
 921              		.loc 1 279 8
 922 0922 3C20     		cmpb	$32, %al
 923 0924 0F856601 		jne	.L60
 923      0000
 924              	.LBB3:
 280:main.c        **** 					const char *p;
 281:main.c        **** 					const char quoteChar = *++ptr;
 925              		.loc 1 281 30
 926 092a 488B0500 		movq	ptr(%rip), %rax
 926      000000
 927 0931 4883C001 		addq	$1, %rax
 928              		.loc 1 281 17
 929 0935 48890500 		movq	%rax, ptr(%rip)
 929      000000
 930              		.loc 1 281 30
 931 093c 488B0500 		movq	ptr(%rip), %rax
 931      000000
 932              		.loc 1 281 17
 933 0943 0FB600   		movzbl	(%rax), %eax
 934 0946 888511FF 		movb	%al, -239(%rbp)
 934      FFFF
 282:main.c        **** 					CHECK_STATUS(
 935              		.loc 1 282 6
 936 094c 80BD11FF 		cmpb	$34, -239(%rbp)
 936      FFFF22
 937 0953 7418     		je	.L63
 938              		.loc 1 282 6 is_stmt 0 discriminator 1
 939 0955 80BD11FF 		cmpb	$39, -239(%rbp)
 939      FFFF27
 940 095c 740F     		je	.L63
 941              		.loc 1 282 6 discriminator 2
 942 095e C78514FF 		movl	$5, -236(%rbp)
 942      FFFF0500 
 942      0000
 943 0968 E9A90C00 		jmp	.L50
 943      00
 944              	.L63:
 283:main.c        **** 						(quoteChar != '"' && quoteChar != '\''),
 284:main.c        **** 						FLP_ILL_CHAR, cleanup);
 285:main.c        **** 					
 286:main.c        **** 					// Get the file to write bytes to:
 287:main.c        **** 					ptr++;
 945              		.loc 1 287 9 is_stmt 1
 946 096d 488B0500 		movq	ptr(%rip), %rax
 946      000000
 947 0974 4883C001 		addq	$1, %rax
 948 0978 48890500 		movq	%rax, ptr(%rip)
 948      000000
 288:main.c        **** 					p = ptr;
 949              		.loc 1 288 8
 950 097f 488B0500 		movq	ptr(%rip), %rax
 950      000000
 951 0986 48898560 		movq	%rax, -160(%rbp)
 951      FFFFFF
 289:main.c        **** 					while ( *p != quoteChar && *p != '\0' ) {
 952              		.loc 1 289 12
 953 098d EB08     		jmp	.L64
 954              	.L66:
 290:main.c        **** 						p++;
 955              		.loc 1 290 8
 956 098f 48838560 		addq	$1, -160(%rbp)
 956      FFFFFF01 
 957              	.L64:
 289:main.c        **** 					while ( *p != quoteChar && *p != '\0' ) {
 958              		.loc 1 289 14
 959 0997 488B8560 		movq	-160(%rbp), %rax
 959      FFFFFF
 960 099e 0FB600   		movzbl	(%rax), %eax
 289:main.c        **** 					while ( *p != quoteChar && *p != '\0' ) {
 961              		.loc 1 289 30
 962 09a1 388511FF 		cmpb	%al, -239(%rbp)
 962      FFFF
 963 09a7 740E     		je	.L65
 289:main.c        **** 					while ( *p != quoteChar && *p != '\0' ) {
 964              		.loc 1 289 33 discriminator 1
 965 09a9 488B8560 		movq	-160(%rbp), %rax
 965      FFFFFF
 966 09b0 0FB600   		movzbl	(%rax), %eax
 289:main.c        **** 					while ( *p != quoteChar && *p != '\0' ) {
 967              		.loc 1 289 30 discriminator 1
 968 09b3 84C0     		testb	%al, %al
 969 09b5 75D8     		jne	.L66
 970              	.L65:
 291:main.c        **** 					}
 292:main.c        **** 					CHECK_STATUS(*p == '\0', FLP_UNTERM_STRING, cleanup);
 971              		.loc 1 292 6
 972 09b7 488B8560 		movq	-160(%rbp), %rax
 972      FFFFFF
 973 09be 0FB600   		movzbl	(%rax), %eax
 974 09c1 84C0     		testb	%al, %al
 975 09c3 750F     		jne	.L67
 976              		.loc 1 292 6 is_stmt 0 discriminator 1
 977 09c5 C78514FF 		movl	$6, -236(%rbp)
 977      FFFF0600 
 977      0000
 978 09cf E9420C00 		jmp	.L50
 978      00
 979              	.L67:
 293:main.c        **** 					fileName = malloc((size_t)(p - ptr + 1));
 980              		.loc 1 293 35 is_stmt 1
 981 09d4 488B1500 		movq	ptr(%rip), %rdx
 981      000000
 982 09db 488B8560 		movq	-160(%rbp), %rax
 982      FFFFFF
 983 09e2 4829D0   		subq	%rdx, %rax
 984              		.loc 1 293 41
 985 09e5 4883C001 		addq	$1, %rax
 986              		.loc 1 293 17
 987 09e9 4889C7   		movq	%rax, %rdi
 988 09ec E8000000 		call	malloc@PLT
 988      00
 989 09f1 48898550 		movq	%rax, -176(%rbp)
 989      FFFFFF
 294:main.c        **** 					CHECK_STATUS(!fileName, FLP_NO_MEMORY, cleanup);
 990              		.loc 1 294 6
 991 09f8 4883BD50 		cmpq	$0, -176(%rbp)
 991      FFFFFF00 
 992 0a00 750F     		jne	.L68
 993              		.loc 1 294 6 is_stmt 0 discriminator 1
 994 0a02 C78514FF 		movl	$7, -236(%rbp)
 994      FFFF0700 
 994      0000
 995 0a0c E9050C00 		jmp	.L50
 995      00
 996              	.L68:
 295:main.c        **** 					CHECK_STATUS(p - ptr == 0, FLP_EMPTY_STRING, cleanup);
 997              		.loc 1 295 6 is_stmt 1
 998 0a11 488B0500 		movq	ptr(%rip), %rax
 998      000000
 999 0a18 48398560 		cmpq	%rax, -160(%rbp)
 999      FFFFFF
 1000 0a1f 750F     		jne	.L69
 1001              		.loc 1 295 6 is_stmt 0 discriminator 1
 1002 0a21 C78514FF 		movl	$8, -236(%rbp)
 1002      FFFF0800 
 1002      0000
 1003 0a2b E9E60B00 		jmp	.L50
 1003      00
 1004              	.L69:
 296:main.c        **** 					strncpy(fileName, ptr, (size_t)(p - ptr));
 1005              		.loc 1 296 40 is_stmt 1
 1006 0a30 488B1500 		movq	ptr(%rip), %rdx
 1006      000000
 1007 0a37 488B8560 		movq	-160(%rbp), %rax
 1007      FFFFFF
 1008 0a3e 4829D0   		subq	%rdx, %rax
 1009              		.loc 1 296 6
 1010 0a41 4889C2   		movq	%rax, %rdx
 1011 0a44 488B0D00 		movq	ptr(%rip), %rcx
 1011      000000
 1012 0a4b 488B8550 		movq	-176(%rbp), %rax
 1012      FFFFFF
 1013 0a52 4889CE   		movq	%rcx, %rsi
 1014 0a55 4889C7   		movq	%rax, %rdi
 1015 0a58 E8000000 		call	strncpy@PLT
 1015      00
 297:main.c        **** 					fileName[p - ptr] = '\0';
 1016              		.loc 1 297 17
 1017 0a5d 488B1500 		movq	ptr(%rip), %rdx
 1017      000000
 1018 0a64 488B8560 		movq	-160(%rbp), %rax
 1018      FFFFFF
 1019 0a6b 4829D0   		subq	%rdx, %rax
 1020 0a6e 4889C2   		movq	%rax, %rdx
 1021              		.loc 1 297 14
 1022 0a71 488B8550 		movq	-176(%rbp), %rax
 1022      FFFFFF
 1023 0a78 4801D0   		addq	%rdx, %rax
 1024              		.loc 1 297 24
 1025 0a7b C60000   		movb	$0, (%rax)
 298:main.c        **** 					ptr = p + 1;
 1026              		.loc 1 298 14
 1027 0a7e 488B8560 		movq	-160(%rbp), %rax
 1027      FFFFFF
 1028 0a85 4883C001 		addq	$1, %rax
 1029              		.loc 1 298 10
 1030 0a89 48890500 		movq	%rax, ptr(%rip)
 1030      000000
 1031              	.L60:
 1032              	.LBE3:
 299:main.c        **** 				}
 300:main.c        **** 			}
 301:main.c        **** 			if ( fileName ) {
 1033              		.loc 1 301 7
 1034 0a90 4883BD50 		cmpq	$0, -176(%rbp)
 1034      FFFFFF00 
 1035 0a98 0F84E901 		je	.L70
 1035      0000
 1036              	.LBB4:
 302:main.c        **** 				uint16 checksum = 0x0000;
 1037              		.loc 1 302 12
 1038 0a9e 66C78538 		movw	$0, -200(%rbp)
 1038      FFFFFF00 
 1038      00
 303:main.c        **** 
 304:main.c        **** 				// Open file for writing
 305:main.c        **** 				file = fopen(fileName, "wb");
 1039              		.loc 1 305 12
 1040 0aa7 488B8550 		movq	-176(%rbp), %rax
 1040      FFFFFF
 1041 0aae 488D1500 		leaq	.LC13(%rip), %rdx
 1041      000000
 1042 0ab5 4889D6   		movq	%rdx, %rsi
 1043 0ab8 4889C7   		movq	%rax, %rdi
 1044 0abb E8000000 		call	fopen@PLT
 1044      00
 1045 0ac0 48898558 		movq	%rax, -168(%rbp)
 1045      FFFFFF
 306:main.c        **** 				CHECK_STATUS(!file, FLP_CANNOT_SAVE, cleanup);
 1046              		.loc 1 306 5
 1047 0ac7 4883BD58 		cmpq	$0, -168(%rbp)
 1047      FFFFFF00 
 1048 0acf 750F     		jne	.L71
 1049              		.loc 1 306 5 is_stmt 0 discriminator 1
 1050 0ad1 C78514FF 		movl	$11, -236(%rbp)
 1050      FFFF0B00 
 1050      0000
 1051 0adb E9360B00 		jmp	.L50
 1051      00
 1052              	.L71:
 307:main.c        **** 				free(fileName);
 1053              		.loc 1 307 5 is_stmt 1
 1054 0ae0 488B8550 		movq	-176(%rbp), %rax
 1054      FFFFFF
 1055 0ae7 4889C7   		movq	%rax, %rdi
 1056 0aea E8000000 		call	free@PLT
 1056      00
 308:main.c        **** 				fileName = NULL;
 1057              		.loc 1 308 14
 1058 0aef 48C78550 		movq	$0, -176(%rbp)
 1058      FFFFFF00 
 1058      000000
 309:main.c        **** 
 310:main.c        **** 				#ifdef WIN32
 311:main.c        **** 					QueryPerformanceCounter(&tvStart);
 312:main.c        **** 					status = doRead(handle, (uint8)chan, length, file, &checksum, error);
 313:main.c        **** 					QueryPerformanceCounter(&tvEnd);
 314:main.c        **** 					totalTime = (double)(tvEnd.QuadPart - tvStart.QuadPart);
 315:main.c        **** 					totalTime /= freq.QuadPart;
 316:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 317:main.c        **** 				#else
 318:main.c        **** 					gettimeofday(&tvStart, NULL);
 1059              		.loc 1 318 6
 1060 0afa 488D45B0 		leaq	-80(%rbp), %rax
 1061 0afe BE000000 		movl	$0, %esi
 1061      00
 1062 0b03 4889C7   		movq	%rax, %rdi
 1063 0b06 E8000000 		call	gettimeofday@PLT
 1063      00
 319:main.c        **** 					status = doRead(handle, (uint8)chan, length, file, &checksum, error);
 1064              		.loc 1 319 30
 1065 0b0b 8B852CFF 		movl	-212(%rbp), %eax
 1065      FFFF
 1066              		.loc 1 319 15
 1067 0b11 0FB6F0   		movzbl	%al, %esi
 1068 0b14 4C8B85F8 		movq	-264(%rbp), %r8
 1068      FEFFFF
 1069 0b1b 488DBD38 		leaq	-200(%rbp), %rdi
 1069      FFFFFF
 1070 0b22 488B8D58 		movq	-168(%rbp), %rcx
 1070      FFFFFF
 1071 0b29 8B9518FF 		movl	-232(%rbp), %edx
 1071      FFFF
 1072 0b2f 488B8508 		movq	-248(%rbp), %rax
 1072      FFFFFF
 1073 0b36 4D89C1   		movq	%r8, %r9
 1074 0b39 4989F8   		movq	%rdi, %r8
 1075 0b3c 4889C7   		movq	%rax, %rdi
 1076 0b3f E863F6FF 		call	doRead
 1076      FF
 1077 0b44 898528FF 		movl	%eax, -216(%rbp)
 1077      FFFF
 320:main.c        **** 					gettimeofday(&tvEnd, NULL);
 1078              		.loc 1 320 6
 1079 0b4a 488D45C0 		leaq	-64(%rbp), %rax
 1080 0b4e BE000000 		movl	$0, %esi
 1080      00
 1081 0b53 4889C7   		movq	%rax, %rdi
 1082 0b56 E8000000 		call	gettimeofday@PLT
 1082      00
 321:main.c        **** 					startTime = tvStart.tv_sec;
 1083              		.loc 1 321 16
 1084 0b5b 488B45B0 		movq	-80(%rbp), %rax
 1085 0b5f 48894588 		movq	%rax, -120(%rbp)
 322:main.c        **** 					startTime *= 1000000;
 1086              		.loc 1 322 16
 1087 0b63 488B4588 		movq	-120(%rbp), %rax
 1088 0b67 4869C040 		imulq	$1000000, %rax, %rax
 1088      420F00
 1089 0b6e 48894588 		movq	%rax, -120(%rbp)
 323:main.c        **** 					startTime += tvStart.tv_usec;
 1090              		.loc 1 323 26
 1091 0b72 488B45B8 		movq	-72(%rbp), %rax
 1092              		.loc 1 323 16
 1093 0b76 48014588 		addq	%rax, -120(%rbp)
 324:main.c        **** 					endTime = tvEnd.tv_sec;
 1094              		.loc 1 324 14
 1095 0b7a 488B45C0 		movq	-64(%rbp), %rax
 1096 0b7e 48894590 		movq	%rax, -112(%rbp)
 325:main.c        **** 					endTime *= 1000000;
 1097              		.loc 1 325 14
 1098 0b82 488B4590 		movq	-112(%rbp), %rax
 1099 0b86 4869C040 		imulq	$1000000, %rax, %rax
 1099      420F00
 1100 0b8d 48894590 		movq	%rax, -112(%rbp)
 326:main.c        **** 					endTime += tvEnd.tv_usec;
 1101              		.loc 1 326 22
 1102 0b91 488B45C8 		movq	-56(%rbp), %rax
 1103              		.loc 1 326 14
 1104 0b95 48014590 		addq	%rax, -112(%rbp)
 327:main.c        **** 					totalTime = (double)(endTime - startTime);
 1105              		.loc 1 327 35
 1106 0b99 488B4590 		movq	-112(%rbp), %rax
 1107 0b9d 482B4588 		subq	-120(%rbp), %rax
 1108              		.loc 1 327 16
 1109 0ba1 660FEFC0 		pxor	%xmm0, %xmm0
 1110 0ba5 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 1110      C0
 1111 0baa F20F1145 		movsd	%xmm0, -104(%rbp)
 1111      98
 328:main.c        **** 					totalTime /= 1000000;  // convert from uS to S.
 1112              		.loc 1 328 16
 1113 0baf F20F1045 		movsd	-104(%rbp), %xmm0
 1113      98
 1114 0bb4 F20F100D 		movsd	.LC14(%rip), %xmm1
 1114      00000000 
 1115 0bbc F20F5EC1 		divsd	%xmm1, %xmm0
 1116 0bc0 F20F1145 		movsd	%xmm0, -104(%rbp)
 1116      98
 329:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 1117              		.loc 1 329 14
 1118 0bc5 8B8518FF 		movl	-232(%rbp), %eax
 1118      FFFF
 1119 0bcb 4885C0   		testq	%rax, %rax
 1120 0bce 780B     		js	.L73
 1121 0bd0 660FEFC0 		pxor	%xmm0, %xmm0
 1122 0bd4 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 1122      C0
 1123 0bd9 EB19     		jmp	.L74
 1124              	.L73:
 1125 0bdb 4889C2   		movq	%rax, %rdx
 1126 0bde 48D1EA   		shrq	%rdx
 1127 0be1 83E001   		andl	$1, %eax
 1128 0be4 4809C2   		orq	%rax, %rdx
 1129 0be7 660FEFC0 		pxor	%xmm0, %xmm0
 1130 0beb F2480F2A 		cvtsi2sdq	%rdx, %xmm0
 1130      C2
 1131 0bf0 F20F58C0 		addsd	%xmm0, %xmm0
 1132              	.L74:
 1133              		.loc 1 329 41
 1134 0bf4 F20F1055 		movsd	-104(%rbp), %xmm2
 1134      98
 1135 0bf9 F20F100D 		movsd	.LC15(%rip), %xmm1
 1135      00000000 
 1136 0c01 F20F59CA 		mulsd	%xmm2, %xmm1
 1137              		.loc 1 329 12
 1138 0c05 F20F5EC1 		divsd	%xmm1, %xmm0
 1139 0c09 F20F1145 		movsd	%xmm0, -96(%rbp)
 1139      A0
 330:main.c        **** 				#endif
 331:main.c        **** 				if ( enableBenchmarking ) {
 1140              		.loc 1 331 10
 1141 0c0e 0FB60500 		movzbl	enableBenchmarking(%rip), %eax
 1141      000000
 1142              		.loc 1 331 8
 1143 0c15 84C0     		testb	%al, %al
 1144 0c17 7435     		je	.L75
 332:main.c        **** 					printf(
 1145              		.loc 1 332 6
 1146 0c19 0FB78538 		movzwl	-200(%rbp), %eax
 1146      FFFFFF
 1147 0c20 0FB7D0   		movzwl	%ax, %edx
 1148 0c23 488B75A0 		movq	-96(%rbp), %rsi
 1149 0c27 8B8D2CFF 		movl	-212(%rbp), %ecx
 1149      FFFF
 1150 0c2d 8B8518FF 		movl	-232(%rbp), %eax
 1150      FFFF
 1151 0c33 66480F6E 		movq	%rsi, %xmm0
 1151      C6
 1152 0c38 89C6     		movl	%eax, %esi
 1153 0c3a 488D0500 		leaq	.LC16(%rip), %rax
 1153      000000
 1154 0c41 4889C7   		movq	%rax, %rdi
 1155 0c44 B8010000 		movl	$1, %eax
 1155      00
 1156 0c49 E8000000 		call	printf@PLT
 1156      00
 1157              	.L75:
 333:main.c        **** 						"Read %d bytes (checksum 0x%04X) from channel %d at %f MiB/s\n",
 334:main.c        **** 						length, checksum, chan, speed);
 335:main.c        **** 				}
 336:main.c        **** 				CHECK_STATUS(status, status, cleanup);
 1158              		.loc 1 336 5
 1159 0c4e 83BD28FF 		cmpl	$0, -216(%rbp)
 1159      FFFF00
 1160 0c55 7411     		je	.L76
 1161              		.loc 1 336 5 is_stmt 0 discriminator 1
 1162 0c57 8B8528FF 		movl	-216(%rbp), %eax
 1162      FFFF
 1163 0c5d 898514FF 		movl	%eax, -236(%rbp)
 1163      FFFF
 1164              	.LBE4:
 259:main.c        **** 
 1165              		.loc 1 259 4 is_stmt 1 discriminator 1
 1166 0c63 E9AE0900 		jmp	.L50
 1166      00
 1167              	.L76:
 1168              	.LBB5:
 337:main.c        **** 
 338:main.c        **** 				// Close the file
 339:main.c        **** 				fclose(file);
 1169              		.loc 1 339 5
 1170 0c68 488B8558 		movq	-168(%rbp), %rax
 1170      FFFFFF
 1171 0c6f 4889C7   		movq	%rax, %rdi
 1172 0c72 E8000000 		call	fclose@PLT
 1172      00
 340:main.c        **** 				file = NULL;
 1173              		.loc 1 340 10
 1174 0c77 48C78558 		movq	$0, -168(%rbp)
 1174      FFFFFF00 
 1174      000000
 1175              	.LBE5:
 341:main.c        **** 			} else {
 342:main.c        **** 				size_t oldLength = dataFromFPGA.length;
 343:main.c        **** 				bStatus = bufAppendConst(&dataFromFPGA, 0x00, length, error);
 344:main.c        **** 				CHECK_STATUS(bStatus, FLP_LIBERR, cleanup);
 345:main.c        **** 				#ifdef WIN32
 346:main.c        **** 					QueryPerformanceCounter(&tvStart);
 347:main.c        **** 					fStatus = flReadChannel(handle, (uint8)chan, length, dataFromFPGA.data + oldLength, error);
 348:main.c        **** 					QueryPerformanceCounter(&tvEnd);
 349:main.c        **** 					totalTime = (double)(tvEnd.QuadPart - tvStart.QuadPart);
 350:main.c        **** 					totalTime /= freq.QuadPart;
 351:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 352:main.c        **** 				#else
 353:main.c        **** 					gettimeofday(&tvStart, NULL);
 354:main.c        **** 					fStatus = flReadChannel(handle, (uint8)chan, length, dataFromFPGA.data + oldLength, error);
 355:main.c        **** 					gettimeofday(&tvEnd, NULL);
 356:main.c        **** 					startTime = tvStart.tv_sec;
 357:main.c        **** 					startTime *= 1000000;
 358:main.c        **** 					startTime += tvStart.tv_usec;
 359:main.c        **** 					endTime = tvEnd.tv_sec;
 360:main.c        **** 					endTime *= 1000000;
 361:main.c        **** 					endTime += tvEnd.tv_usec;
 362:main.c        **** 					totalTime = (double)(endTime - startTime);
 363:main.c        **** 					totalTime /= 1000000;  // convert from uS to S.
 364:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 365:main.c        **** 				#endif
 366:main.c        **** 				if ( enableBenchmarking ) {
 367:main.c        **** 					printf(
 368:main.c        **** 						"Read %d bytes (checksum 0x%04X) from channel %d at %f MiB/s\n",
 369:main.c        **** 						length, calcChecksum(dataFromFPGA.data + oldLength, length), chan, speed);
 370:main.c        **** 				}
 371:main.c        **** 				CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 372:main.c        **** 			}
 373:main.c        **** 			break;
 1176              		.loc 1 373 4
 1177 0c82 E94A0900 		jmp	.L125
 1177      00
 1178              	.L70:
 1179              	.LBB6:
 342:main.c        **** 				bStatus = bufAppendConst(&dataFromFPGA, 0x00, length, error);
 1180              		.loc 1 342 12
 1181 0c87 488B45D8 		movq	-40(%rbp), %rax
 1182 0c8b 488945A8 		movq	%rax, -88(%rbp)
 343:main.c        **** 				CHECK_STATUS(bStatus, FLP_LIBERR, cleanup);
 1183              		.loc 1 343 15
 1184 0c8f 8B9518FF 		movl	-232(%rbp), %edx
 1184      FFFF
 1185 0c95 488B8DF8 		movq	-264(%rbp), %rcx
 1185      FEFFFF
 1186 0c9c 488D45D0 		leaq	-48(%rbp), %rax
 1187 0ca0 BE000000 		movl	$0, %esi
 1187      00
 1188 0ca5 4889C7   		movq	%rax, %rdi
 1189 0ca8 E8000000 		call	bufAppendConst@PLT
 1189      00
 1190 0cad 898520FF 		movl	%eax, -224(%rbp)
 1190      FFFF
 344:main.c        **** 				#ifdef WIN32
 1191              		.loc 1 344 5
 1192 0cb3 83BD20FF 		cmpl	$0, -224(%rbp)
 1192      FFFF00
 1193 0cba 740F     		je	.L78
 344:main.c        **** 				#ifdef WIN32
 1194              		.loc 1 344 5 is_stmt 0 discriminator 1
 1195 0cbc C78514FF 		movl	$1, -236(%rbp)
 1195      FFFF0100 
 1195      0000
 1196 0cc6 E94B0900 		jmp	.L50
 1196      00
 1197              	.L78:
 353:main.c        **** 					fStatus = flReadChannel(handle, (uint8)chan, length, dataFromFPGA.data + oldLength, error);
 1198              		.loc 1 353 6 is_stmt 1
 1199 0ccb 488D45B0 		leaq	-80(%rbp), %rax
 1200 0ccf BE000000 		movl	$0, %esi
 1200      00
 1201 0cd4 4889C7   		movq	%rax, %rdi
 1202 0cd7 E8000000 		call	gettimeofday@PLT
 1202      00
 354:main.c        **** 					gettimeofday(&tvEnd, NULL);
 1203              		.loc 1 354 71
 1204 0cdc 488B55D0 		movq	-48(%rbp), %rdx
 354:main.c        **** 					gettimeofday(&tvEnd, NULL);
 1205              		.loc 1 354 16
 1206 0ce0 488B45A8 		movq	-88(%rbp), %rax
 1207 0ce4 488D0C02 		leaq	(%rdx,%rax), %rcx
 1208 0ce8 8B9518FF 		movl	-232(%rbp), %edx
 1208      FFFF
 354:main.c        **** 					gettimeofday(&tvEnd, NULL);
 1209              		.loc 1 354 38
 1210 0cee 8B852CFF 		movl	-212(%rbp), %eax
 1210      FFFF
 354:main.c        **** 					gettimeofday(&tvEnd, NULL);
 1211              		.loc 1 354 16
 1212 0cf4 0FB6F0   		movzbl	%al, %esi
 1213 0cf7 488BBDF8 		movq	-264(%rbp), %rdi
 1213      FEFFFF
 1214 0cfe 488B8508 		movq	-248(%rbp), %rax
 1214      FFFFFF
 1215 0d05 4989F8   		movq	%rdi, %r8
 1216 0d08 4889C7   		movq	%rax, %rdi
 1217 0d0b E8000000 		call	flReadChannel@PLT
 1217      00
 1218 0d10 898524FF 		movl	%eax, -220(%rbp)
 1218      FFFF
 355:main.c        **** 					startTime = tvStart.tv_sec;
 1219              		.loc 1 355 6
 1220 0d16 488D45C0 		leaq	-64(%rbp), %rax
 1221 0d1a BE000000 		movl	$0, %esi
 1221      00
 1222 0d1f 4889C7   		movq	%rax, %rdi
 1223 0d22 E8000000 		call	gettimeofday@PLT
 1223      00
 356:main.c        **** 					startTime *= 1000000;
 1224              		.loc 1 356 16
 1225 0d27 488B45B0 		movq	-80(%rbp), %rax
 1226 0d2b 48894588 		movq	%rax, -120(%rbp)
 357:main.c        **** 					startTime += tvStart.tv_usec;
 1227              		.loc 1 357 16
 1228 0d2f 488B4588 		movq	-120(%rbp), %rax
 1229 0d33 4869C040 		imulq	$1000000, %rax, %rax
 1229      420F00
 1230 0d3a 48894588 		movq	%rax, -120(%rbp)
 358:main.c        **** 					endTime = tvEnd.tv_sec;
 1231              		.loc 1 358 26
 1232 0d3e 488B45B8 		movq	-72(%rbp), %rax
 358:main.c        **** 					endTime = tvEnd.tv_sec;
 1233              		.loc 1 358 16
 1234 0d42 48014588 		addq	%rax, -120(%rbp)
 359:main.c        **** 					endTime *= 1000000;
 1235              		.loc 1 359 14
 1236 0d46 488B45C0 		movq	-64(%rbp), %rax
 1237 0d4a 48894590 		movq	%rax, -112(%rbp)
 360:main.c        **** 					endTime += tvEnd.tv_usec;
 1238              		.loc 1 360 14
 1239 0d4e 488B4590 		movq	-112(%rbp), %rax
 1240 0d52 4869C040 		imulq	$1000000, %rax, %rax
 1240      420F00
 1241 0d59 48894590 		movq	%rax, -112(%rbp)
 361:main.c        **** 					totalTime = (double)(endTime - startTime);
 1242              		.loc 1 361 22
 1243 0d5d 488B45C8 		movq	-56(%rbp), %rax
 361:main.c        **** 					totalTime = (double)(endTime - startTime);
 1244              		.loc 1 361 14
 1245 0d61 48014590 		addq	%rax, -112(%rbp)
 362:main.c        **** 					totalTime /= 1000000;  // convert from uS to S.
 1246              		.loc 1 362 35
 1247 0d65 488B4590 		movq	-112(%rbp), %rax
 1248 0d69 482B4588 		subq	-120(%rbp), %rax
 362:main.c        **** 					totalTime /= 1000000;  // convert from uS to S.
 1249              		.loc 1 362 16
 1250 0d6d 660FEFC0 		pxor	%xmm0, %xmm0
 1251 0d71 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 1251      C0
 1252 0d76 F20F1145 		movsd	%xmm0, -104(%rbp)
 1252      98
 363:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 1253              		.loc 1 363 16
 1254 0d7b F20F1045 		movsd	-104(%rbp), %xmm0
 1254      98
 1255 0d80 F20F100D 		movsd	.LC14(%rip), %xmm1
 1255      00000000 
 1256 0d88 F20F5EC1 		divsd	%xmm1, %xmm0
 1257 0d8c F20F1145 		movsd	%xmm0, -104(%rbp)
 1257      98
 364:main.c        **** 				#endif
 1258              		.loc 1 364 14
 1259 0d91 8B8518FF 		movl	-232(%rbp), %eax
 1259      FFFF
 1260 0d97 4885C0   		testq	%rax, %rax
 1261 0d9a 780B     		js	.L79
 1262 0d9c 660FEFC0 		pxor	%xmm0, %xmm0
 1263 0da0 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 1263      C0
 1264 0da5 EB19     		jmp	.L80
 1265              	.L79:
 1266 0da7 4889C2   		movq	%rax, %rdx
 1267 0daa 48D1EA   		shrq	%rdx
 1268 0dad 83E001   		andl	$1, %eax
 1269 0db0 4809C2   		orq	%rax, %rdx
 1270 0db3 660FEFC0 		pxor	%xmm0, %xmm0
 1271 0db7 F2480F2A 		cvtsi2sdq	%rdx, %xmm0
 1271      C2
 1272 0dbc F20F58C0 		addsd	%xmm0, %xmm0
 1273              	.L80:
 364:main.c        **** 				#endif
 1274              		.loc 1 364 41
 1275 0dc0 F20F1055 		movsd	-104(%rbp), %xmm2
 1275      98
 1276 0dc5 F20F100D 		movsd	.LC15(%rip), %xmm1
 1276      00000000 
 1277 0dcd F20F59CA 		mulsd	%xmm2, %xmm1
 364:main.c        **** 				#endif
 1278              		.loc 1 364 12
 1279 0dd1 F20F5EC1 		divsd	%xmm1, %xmm0
 1280 0dd5 F20F1145 		movsd	%xmm0, -96(%rbp)
 1280      A0
 366:main.c        **** 					printf(
 1281              		.loc 1 366 10
 1282 0dda 0FB60500 		movzbl	enableBenchmarking(%rip), %eax
 1282      000000
 366:main.c        **** 					printf(
 1283              		.loc 1 366 8
 1284 0de1 84C0     		testb	%al, %al
 1285 0de3 744A     		je	.L81
 369:main.c        **** 				}
 1286              		.loc 1 369 15
 1287 0de5 8B8518FF 		movl	-232(%rbp), %eax
 1287      FFFF
 369:main.c        **** 				}
 1288              		.loc 1 369 40
 1289 0deb 488B4DD0 		movq	-48(%rbp), %rcx
 369:main.c        **** 				}
 1290              		.loc 1 369 46
 1291 0def 488B55A8 		movq	-88(%rbp), %rdx
 1292 0df3 4801CA   		addq	%rcx, %rdx
 369:main.c        **** 				}
 1293              		.loc 1 369 15
 1294 0df6 4889C6   		movq	%rax, %rsi
 1295 0df9 4889D7   		movq	%rdx, %rdi
 1296 0dfc E841F2FF 		call	calcChecksum
 1296      FF
 367:main.c        **** 						"Read %d bytes (checksum 0x%04X) from channel %d at %f MiB/s\n",
 1297              		.loc 1 367 6
 1298 0e01 0FB7D0   		movzwl	%ax, %edx
 1299 0e04 488B75A0 		movq	-96(%rbp), %rsi
 1300 0e08 8B8D2CFF 		movl	-212(%rbp), %ecx
 1300      FFFF
 1301 0e0e 8B8518FF 		movl	-232(%rbp), %eax
 1301      FFFF
 1302 0e14 66480F6E 		movq	%rsi, %xmm0
 1302      C6
 1303 0e19 89C6     		movl	%eax, %esi
 1304 0e1b 488D0500 		leaq	.LC16(%rip), %rax
 1304      000000
 1305 0e22 4889C7   		movq	%rax, %rdi
 1306 0e25 B8010000 		movl	$1, %eax
 1306      00
 1307 0e2a E8000000 		call	printf@PLT
 1307      00
 1308              	.L81:
 371:main.c        **** 			}
 1309              		.loc 1 371 5
 1310 0e2f 83BD24FF 		cmpl	$0, -220(%rbp)
 1310      FFFF00
 1311 0e36 0F849507 		je	.L125
 1311      0000
 371:main.c        **** 			}
 1312              		.loc 1 371 5 is_stmt 0 discriminator 1
 1313 0e3c C78514FF 		movl	$1, -236(%rbp)
 1313      FFFF0100 
 1313      0000
 1314 0e46 E9CB0700 		jmp	.L50
 1314      00
 1315              	.L53:
 1316              	.LBE6:
 1317              	.LBE2:
 1318              	.LBB7:
 374:main.c        **** 		}
 375:main.c        **** 		case 'w':{
 376:main.c        **** 			unsigned long int chan;
 377:main.c        **** 			size_t length = 1, i;
 1319              		.loc 1 377 11 is_stmt 1
 1320 0e4b 48C78538 		movq	$1, -200(%rbp)
 1320      FFFFFF01 
 1320      000000
 378:main.c        **** 			char *end, ch;
 379:main.c        **** 			const char *p;
 380:main.c        **** 			ptr++;
 1321              		.loc 1 380 7
 1322 0e56 488B0500 		movq	ptr(%rip), %rax
 1322      000000
 1323 0e5d 4883C001 		addq	$1, %rax
 1324 0e61 48890500 		movq	%rax, ptr(%rip)
 1324      000000
 381:main.c        **** 			
 382:main.c        **** 			// Get the channel to be written:
 383:main.c        **** 			errno = 0;
 1325              		.loc 1 383 4
 1326 0e68 E8000000 		call	__errno_location@PLT
 1326      00
 1327              		.loc 1 383 10
 1328 0e6d C7000000 		movl	$0, (%rax)
 1328      0000
 384:main.c        **** 			chan = strtoul(ptr, &end, 16);
 1329              		.loc 1 384 11
 1330 0e73 488B0500 		movq	ptr(%rip), %rax
 1330      000000
 1331 0e7a 488D8D40 		leaq	-192(%rbp), %rcx
 1331      FFFFFF
 1332 0e81 BA100000 		movl	$16, %edx
 1332      00
 1333 0e86 4889CE   		movq	%rcx, %rsi
 1334 0e89 4889C7   		movq	%rax, %rdi
 1335 0e8c E8000000 		call	strtoul@PLT
 1335      00
 1336 0e91 48894580 		movq	%rax, -128(%rbp)
 385:main.c        **** 			CHECK_STATUS(errno, FLP_BAD_HEX, cleanup);
 1337              		.loc 1 385 4
 1338 0e95 E8000000 		call	__errno_location@PLT
 1338      00
 1339 0e9a 8B00     		movl	(%rax), %eax
 1340 0e9c 85C0     		testl	%eax, %eax
 1341 0e9e 740F     		je	.L83
 1342              		.loc 1 385 4 is_stmt 0 discriminator 1
 1343 0ea0 C78514FF 		movl	$2, -236(%rbp)
 1343      FFFF0200 
 1343      0000
 1344 0eaa E9670700 		jmp	.L50
 1344      00
 1345              	.L83:
 386:main.c        **** 
 387:main.c        **** 			// Ensure that it's 0-127
 388:main.c        **** 			CHECK_STATUS(chan > 127, FLP_CHAN_RANGE, cleanup);
 1346              		.loc 1 388 4 is_stmt 1
 1347 0eaf 48837D80 		cmpq	$127, -128(%rbp)
 1347      7F
 1348 0eb4 760F     		jbe	.L85
 1349              		.loc 1 388 4 is_stmt 0 discriminator 1
 1350 0eb6 C78514FF 		movl	$3, -236(%rbp)
 1350      FFFF0300 
 1350      0000
 1351 0ec0 E9510700 		jmp	.L50
 1351      00
 1352              	.L85:
 389:main.c        **** 			ptr = end;
 1353              		.loc 1 389 8 is_stmt 1
 1354 0ec5 488B8540 		movq	-192(%rbp), %rax
 1354      FFFFFF
 1355 0ecc 48890500 		movq	%rax, ptr(%rip)
 1355      000000
 390:main.c        **** 
 391:main.c        **** 			// There must be a space now:
 392:main.c        **** 			CHECK_STATUS(*ptr != ' ', FLP_ILL_CHAR, cleanup);
 1356              		.loc 1 392 4
 1357 0ed3 488B0500 		movq	ptr(%rip), %rax
 1357      000000
 1358 0eda 0FB600   		movzbl	(%rax), %eax
 1359 0edd 3C20     		cmpb	$32, %al
 1360 0edf 740F     		je	.L86
 1361              		.loc 1 392 4 is_stmt 0 discriminator 1
 1362 0ee1 C78514FF 		movl	$5, -236(%rbp)
 1362      FFFF0500 
 1362      0000
 1363 0eeb E9260700 		jmp	.L50
 1363      00
 1364              	.L86:
 393:main.c        **** 
 394:main.c        **** 			// Now either a quote or a hex digit
 395:main.c        **** 		   ch = *++ptr;
 1365              		.loc 1 395 12 is_stmt 1
 1366 0ef0 488B0500 		movq	ptr(%rip), %rax
 1366      000000
 1367 0ef7 4883C001 		addq	$1, %rax
 1368              		.loc 1 395 9
 1369 0efb 48890500 		movq	%rax, ptr(%rip)
 1369      000000
 1370              		.loc 1 395 12
 1371 0f02 488B0500 		movq	ptr(%rip), %rax
 1371      000000
 1372              		.loc 1 395 9
 1373 0f09 0FB600   		movzbl	(%rax), %eax
 1374 0f0c 888510FF 		movb	%al, -240(%rbp)
 1374      FFFF
 396:main.c        **** 			if ( ch == '"' || ch == '\'' ) {
 1375              		.loc 1 396 7
 1376 0f12 80BD10FF 		cmpb	$34, -240(%rbp)
 1376      FFFF22
 1377 0f19 740D     		je	.L87
 1378              		.loc 1 396 19 discriminator 1
 1379 0f1b 80BD10FF 		cmpb	$39, -240(%rbp)
 1379      FFFF27
 1380 0f22 0F850E03 		jne	.L88
 1380      0000
 1381              	.L87:
 1382              	.LBB8:
 397:main.c        **** 				uint16 checksum = 0x0000;
 1383              		.loc 1 397 12
 1384 0f28 66C78512 		movw	$0, -238(%rbp)
 1384      FFFFFF00 
 1384      00
 398:main.c        **** 
 399:main.c        **** 				// Get the file to read bytes from:
 400:main.c        **** 				ptr++;
 1385              		.loc 1 400 8
 1386 0f31 488B0500 		movq	ptr(%rip), %rax
 1386      000000
 1387 0f38 4883C001 		addq	$1, %rax
 1388 0f3c 48890500 		movq	%rax, ptr(%rip)
 1388      000000
 401:main.c        **** 				p = ptr;
 1389              		.loc 1 401 7
 1390 0f43 488B0500 		movq	ptr(%rip), %rax
 1390      000000
 1391 0f4a 48898570 		movq	%rax, -144(%rbp)
 1391      FFFFFF
 402:main.c        **** 				while ( *p != ch && *p != '\0' ) {
 1392              		.loc 1 402 11
 1393 0f51 EB08     		jmp	.L89
 1394              	.L91:
 403:main.c        **** 					p++;
 1395              		.loc 1 403 7
 1396 0f53 48838570 		addq	$1, -144(%rbp)
 1396      FFFFFF01 
 1397              	.L89:
 402:main.c        **** 				while ( *p != ch && *p != '\0' ) {
 1398              		.loc 1 402 13
 1399 0f5b 488B8570 		movq	-144(%rbp), %rax
 1399      FFFFFF
 1400 0f62 0FB600   		movzbl	(%rax), %eax
 402:main.c        **** 				while ( *p != ch && *p != '\0' ) {
 1401              		.loc 1 402 22
 1402 0f65 388510FF 		cmpb	%al, -240(%rbp)
 1402      FFFF
 1403 0f6b 740E     		je	.L90
 402:main.c        **** 				while ( *p != ch && *p != '\0' ) {
 1404              		.loc 1 402 25 discriminator 1
 1405 0f6d 488B8570 		movq	-144(%rbp), %rax
 1405      FFFFFF
 1406 0f74 0FB600   		movzbl	(%rax), %eax
 402:main.c        **** 				while ( *p != ch && *p != '\0' ) {
 1407              		.loc 1 402 22 discriminator 1
 1408 0f77 84C0     		testb	%al, %al
 1409 0f79 75D8     		jne	.L91
 1410              	.L90:
 404:main.c        **** 				}
 405:main.c        **** 				CHECK_STATUS(*p == '\0', FLP_UNTERM_STRING, cleanup);
 1411              		.loc 1 405 5
 1412 0f7b 488B8570 		movq	-144(%rbp), %rax
 1412      FFFFFF
 1413 0f82 0FB600   		movzbl	(%rax), %eax
 1414 0f85 84C0     		testb	%al, %al
 1415 0f87 750F     		jne	.L92
 1416              		.loc 1 405 5 is_stmt 0 discriminator 1
 1417 0f89 C78514FF 		movl	$6, -236(%rbp)
 1417      FFFF0600 
 1417      0000
 1418 0f93 E97E0600 		jmp	.L50
 1418      00
 1419              	.L92:
 406:main.c        **** 				fileName = malloc((size_t)(p - ptr + 1));
 1420              		.loc 1 406 34 is_stmt 1
 1421 0f98 488B1500 		movq	ptr(%rip), %rdx
 1421      000000
 1422 0f9f 488B8570 		movq	-144(%rbp), %rax
 1422      FFFFFF
 1423 0fa6 4829D0   		subq	%rdx, %rax
 1424              		.loc 1 406 40
 1425 0fa9 4883C001 		addq	$1, %rax
 1426              		.loc 1 406 16
 1427 0fad 4889C7   		movq	%rax, %rdi
 1428 0fb0 E8000000 		call	malloc@PLT
 1428      00
 1429 0fb5 48898550 		movq	%rax, -176(%rbp)
 1429      FFFFFF
 407:main.c        **** 				CHECK_STATUS(!fileName, FLP_NO_MEMORY, cleanup);
 1430              		.loc 1 407 5
 1431 0fbc 4883BD50 		cmpq	$0, -176(%rbp)
 1431      FFFFFF00 
 1432 0fc4 750F     		jne	.L94
 1433              		.loc 1 407 5 is_stmt 0 discriminator 1
 1434 0fc6 C78514FF 		movl	$7, -236(%rbp)
 1434      FFFF0700 
 1434      0000
 1435 0fd0 E95C0200 		jmp	.L93
 1435      00
 1436              	.L94:
 408:main.c        **** 				CHECK_STATUS(p - ptr == 0, FLP_EMPTY_STRING, cleanup);
 1437              		.loc 1 408 5 is_stmt 1
 1438 0fd5 488B0500 		movq	ptr(%rip), %rax
 1438      000000
 1439 0fdc 48398570 		cmpq	%rax, -144(%rbp)
 1439      FFFFFF
 1440 0fe3 750F     		jne	.L95
 1441              		.loc 1 408 5 is_stmt 0 discriminator 1
 1442 0fe5 C78514FF 		movl	$8, -236(%rbp)
 1442      FFFF0800 
 1442      0000
 1443 0fef E93D0200 		jmp	.L93
 1443      00
 1444              	.L95:
 409:main.c        **** 				strncpy(fileName, ptr, (size_t)(p - ptr));
 1445              		.loc 1 409 39 is_stmt 1
 1446 0ff4 488B1500 		movq	ptr(%rip), %rdx
 1446      000000
 1447 0ffb 488B8570 		movq	-144(%rbp), %rax
 1447      FFFFFF
 1448 1002 4829D0   		subq	%rdx, %rax
 1449              		.loc 1 409 5
 1450 1005 4889C2   		movq	%rax, %rdx
 1451 1008 488B0D00 		movq	ptr(%rip), %rcx
 1451      000000
 1452 100f 488B8550 		movq	-176(%rbp), %rax
 1452      FFFFFF
 1453 1016 4889CE   		movq	%rcx, %rsi
 1454 1019 4889C7   		movq	%rax, %rdi
 1455 101c E8000000 		call	strncpy@PLT
 1455      00
 410:main.c        **** 				fileName[p - ptr] = '\0';
 1456              		.loc 1 410 16
 1457 1021 488B1500 		movq	ptr(%rip), %rdx
 1457      000000
 1458 1028 488B8570 		movq	-144(%rbp), %rax
 1458      FFFFFF
 1459 102f 4829D0   		subq	%rdx, %rax
 1460 1032 4889C2   		movq	%rax, %rdx
 1461              		.loc 1 410 13
 1462 1035 488B8550 		movq	-176(%rbp), %rax
 1462      FFFFFF
 1463 103c 4801D0   		addq	%rdx, %rax
 1464              		.loc 1 410 23
 1465 103f C60000   		movb	$0, (%rax)
 411:main.c        **** 				ptr = p + 1;  // skip over closing quote
 1466              		.loc 1 411 13
 1467 1042 488B8570 		movq	-144(%rbp), %rax
 1467      FFFFFF
 1468 1049 4883C001 		addq	$1, %rax
 1469              		.loc 1 411 9
 1470 104d 48890500 		movq	%rax, ptr(%rip)
 1470      000000
 412:main.c        **** 
 413:main.c        **** 				// Open file for reading
 414:main.c        **** 				file = fopen(fileName, "rb");
 1471              		.loc 1 414 12
 1472 1054 488B8550 		movq	-176(%rbp), %rax
 1472      FFFFFF
 1473 105b 488D1500 		leaq	.LC17(%rip), %rdx
 1473      000000
 1474 1062 4889D6   		movq	%rdx, %rsi
 1475 1065 4889C7   		movq	%rax, %rdi
 1476 1068 E8000000 		call	fopen@PLT
 1476      00
 1477 106d 48898558 		movq	%rax, -168(%rbp)
 1477      FFFFFF
 415:main.c        **** 				CHECK_STATUS(!file, FLP_CANNOT_LOAD, cleanup);
 1478              		.loc 1 415 5
 1479 1074 4883BD58 		cmpq	$0, -168(%rbp)
 1479      FFFFFF00 
 1480 107c 750F     		jne	.L96
 1481              		.loc 1 415 5 is_stmt 0 discriminator 1
 1482 107e C78514FF 		movl	$10, -236(%rbp)
 1482      FFFF0A00 
 1482      0000
 1483 1088 E9A40100 		jmp	.L93
 1483      00
 1484              	.L96:
 416:main.c        **** 				free(fileName);
 1485              		.loc 1 416 5 is_stmt 1
 1486 108d 488B8550 		movq	-176(%rbp), %rax
 1486      FFFFFF
 1487 1094 4889C7   		movq	%rax, %rdi
 1488 1097 E8000000 		call	free@PLT
 1488      00
 417:main.c        **** 				fileName = NULL;
 1489              		.loc 1 417 14
 1490 109c 48C78550 		movq	$0, -176(%rbp)
 1490      FFFFFF00 
 1490      000000
 418:main.c        **** 				
 419:main.c        **** 				#ifdef WIN32
 420:main.c        **** 					QueryPerformanceCounter(&tvStart);
 421:main.c        **** 					status = doWrite(handle, (uint8)chan, file, &length, &checksum, error);
 422:main.c        **** 					QueryPerformanceCounter(&tvEnd);
 423:main.c        **** 					totalTime = (double)(tvEnd.QuadPart - tvStart.QuadPart);
 424:main.c        **** 					totalTime /= freq.QuadPart;
 425:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 426:main.c        **** 				#else
 427:main.c        **** 					gettimeofday(&tvStart, NULL);
 1491              		.loc 1 427 6
 1492 10a7 488D45B0 		leaq	-80(%rbp), %rax
 1493 10ab BE000000 		movl	$0, %esi
 1493      00
 1494 10b0 4889C7   		movq	%rax, %rdi
 1495 10b3 E8000000 		call	gettimeofday@PLT
 1495      00
 428:main.c        **** 					status = doWrite(handle, (uint8)chan, file, &length, &checksum, error);
 1496              		.loc 1 428 31
 1497 10b8 488B4580 		movq	-128(%rbp), %rax
 1498              		.loc 1 428 15
 1499 10bc 0FB6F0   		movzbl	%al, %esi
 1500 10bf 4C8B85F8 		movq	-264(%rbp), %r8
 1500      FEFFFF
 1501 10c6 488DBD12 		leaq	-238(%rbp), %rdi
 1501      FFFFFF
 1502 10cd 488D8D38 		leaq	-200(%rbp), %rcx
 1502      FFFFFF
 1503 10d4 488B9558 		movq	-168(%rbp), %rdx
 1503      FFFFFF
 1504 10db 488B8508 		movq	-248(%rbp), %rax
 1504      FFFFFF
 1505 10e2 4D89C1   		movq	%r8, %r9
 1506 10e5 4989F8   		movq	%rdi, %r8
 1507 10e8 4889C7   		movq	%rax, %rdi
 1508 10eb E87BF3FF 		call	doWrite
 1508      FF
 1509 10f0 898528FF 		movl	%eax, -216(%rbp)
 1509      FFFF
 429:main.c        **** 					gettimeofday(&tvEnd, NULL);
 1510              		.loc 1 429 6
 1511 10f6 488D45C0 		leaq	-64(%rbp), %rax
 1512 10fa BE000000 		movl	$0, %esi
 1512      00
 1513 10ff 4889C7   		movq	%rax, %rdi
 1514 1102 E8000000 		call	gettimeofday@PLT
 1514      00
 430:main.c        **** 					startTime = tvStart.tv_sec;
 1515              		.loc 1 430 16
 1516 1107 488B45B0 		movq	-80(%rbp), %rax
 1517 110b 48894588 		movq	%rax, -120(%rbp)
 431:main.c        **** 					startTime *= 1000000;
 1518              		.loc 1 431 16
 1519 110f 488B4588 		movq	-120(%rbp), %rax
 1520 1113 4869C040 		imulq	$1000000, %rax, %rax
 1520      420F00
 1521 111a 48894588 		movq	%rax, -120(%rbp)
 432:main.c        **** 					startTime += tvStart.tv_usec;
 1522              		.loc 1 432 26
 1523 111e 488B45B8 		movq	-72(%rbp), %rax
 1524              		.loc 1 432 16
 1525 1122 48014588 		addq	%rax, -120(%rbp)
 433:main.c        **** 					endTime = tvEnd.tv_sec;
 1526              		.loc 1 433 14
 1527 1126 488B45C0 		movq	-64(%rbp), %rax
 1528 112a 48894590 		movq	%rax, -112(%rbp)
 434:main.c        **** 					endTime *= 1000000;
 1529              		.loc 1 434 14
 1530 112e 488B4590 		movq	-112(%rbp), %rax
 1531 1132 4869C040 		imulq	$1000000, %rax, %rax
 1531      420F00
 1532 1139 48894590 		movq	%rax, -112(%rbp)
 435:main.c        **** 					endTime += tvEnd.tv_usec;
 1533              		.loc 1 435 22
 1534 113d 488B45C8 		movq	-56(%rbp), %rax
 1535              		.loc 1 435 14
 1536 1141 48014590 		addq	%rax, -112(%rbp)
 436:main.c        **** 					totalTime = (double)(endTime - startTime);
 1537              		.loc 1 436 35
 1538 1145 488B4590 		movq	-112(%rbp), %rax
 1539 1149 482B4588 		subq	-120(%rbp), %rax
 1540              		.loc 1 436 16
 1541 114d 660FEFC0 		pxor	%xmm0, %xmm0
 1542 1151 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 1542      C0
 1543 1156 F20F1145 		movsd	%xmm0, -104(%rbp)
 1543      98
 437:main.c        **** 					totalTime /= 1000000;  // convert from uS to S.
 1544              		.loc 1 437 16
 1545 115b F20F1045 		movsd	-104(%rbp), %xmm0
 1545      98
 1546 1160 F20F100D 		movsd	.LC14(%rip), %xmm1
 1546      00000000 
 1547 1168 F20F5EC1 		divsd	%xmm1, %xmm0
 1548 116c F20F1145 		movsd	%xmm0, -104(%rbp)
 1548      98
 438:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 1549              		.loc 1 438 14
 1550 1171 488B8538 		movq	-200(%rbp), %rax
 1550      FFFFFF
 1551 1178 4885C0   		testq	%rax, %rax
 1552 117b 780B     		js	.L97
 1553 117d 660FEFC0 		pxor	%xmm0, %xmm0
 1554 1181 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 1554      C0
 1555 1186 EB19     		jmp	.L98
 1556              	.L97:
 1557 1188 4889C2   		movq	%rax, %rdx
 1558 118b 48D1EA   		shrq	%rdx
 1559 118e 83E001   		andl	$1, %eax
 1560 1191 4809C2   		orq	%rax, %rdx
 1561 1194 660FEFC0 		pxor	%xmm0, %xmm0
 1562 1198 F2480F2A 		cvtsi2sdq	%rdx, %xmm0
 1562      C2
 1563 119d F20F58C0 		addsd	%xmm0, %xmm0
 1564              	.L98:
 1565              		.loc 1 438 41
 1566 11a1 F20F1055 		movsd	-104(%rbp), %xmm2
 1566      98
 1567 11a6 F20F100D 		movsd	.LC15(%rip), %xmm1
 1567      00000000 
 1568 11ae F20F59CA 		mulsd	%xmm2, %xmm1
 1569              		.loc 1 438 12
 1570 11b2 F20F5EC1 		divsd	%xmm1, %xmm0
 1571 11b6 F20F1145 		movsd	%xmm0, -96(%rbp)
 1571      A0
 439:main.c        **** 				#endif
 440:main.c        **** 				if ( enableBenchmarking ) {
 1572              		.loc 1 440 10
 1573 11bb 0FB60500 		movzbl	enableBenchmarking(%rip), %eax
 1573      000000
 1574              		.loc 1 440 8
 1575 11c2 84C0     		testb	%al, %al
 1576 11c4 7435     		je	.L99
 441:main.c        **** 					printf(
 1577              		.loc 1 441 6
 1578 11c6 0FB78512 		movzwl	-238(%rbp), %eax
 1578      FFFFFF
 1579 11cd 0FB7D0   		movzwl	%ax, %edx
 1580 11d0 488B8538 		movq	-200(%rbp), %rax
 1580      FFFFFF
 1581 11d7 488B75A0 		movq	-96(%rbp), %rsi
 1582 11db 488B4D80 		movq	-128(%rbp), %rcx
 1583 11df 66480F6E 		movq	%rsi, %xmm0
 1583      C6
 1584 11e4 4889C6   		movq	%rax, %rsi
 1585 11e7 488D0500 		leaq	.LC18(%rip), %rax
 1585      000000
 1586 11ee 4889C7   		movq	%rax, %rdi
 1587 11f1 B8010000 		movl	$1, %eax
 1587      00
 1588 11f6 E8000000 		call	printf@PLT
 1588      00
 1589              	.L99:
 442:main.c        **** 						"Wrote "PFSZD" bytes (checksum 0x%04X) to channel %lu at %f MiB/s\n",
 443:main.c        **** 						length, checksum, chan, speed);
 444:main.c        **** 				}
 445:main.c        **** 				CHECK_STATUS(status, status, cleanup);
 1590              		.loc 1 445 5
 1591 11fb 83BD28FF 		cmpl	$0, -216(%rbp)
 1591      FFFF00
 1592 1202 740E     		je	.L100
 1593              		.loc 1 445 5 is_stmt 0 discriminator 1
 1594 1204 8B8528FF 		movl	-216(%rbp), %eax
 1594      FFFF
 1595 120a 898514FF 		movl	%eax, -236(%rbp)
 1595      FFFF
 1596 1210 EB1F     		jmp	.L93
 1597              	.L100:
 446:main.c        **** 
 447:main.c        **** 				// Close the file
 448:main.c        **** 				fclose(file);
 1598              		.loc 1 448 5 is_stmt 1
 1599 1212 488B8558 		movq	-168(%rbp), %rax
 1599      FFFFFF
 1600 1219 4889C7   		movq	%rax, %rdi
 1601 121c E8000000 		call	fclose@PLT
 1601      00
 449:main.c        **** 				file = NULL;
 1602              		.loc 1 449 10
 1603 1221 48C78558 		movq	$0, -168(%rbp)
 1603      FFFFFF00 
 1603      000000
 1604              	.LBE8:
 396:main.c        **** 				uint16 checksum = 0x0000;
 1605              		.loc 1 396 35
 1606 122c E9A40300 		jmp	.L82
 1606      00
 1607              	.L93:
 385:main.c        **** 
 1608              		.loc 1 385 4 discriminator 2
 1609 1231 E9E00300 		jmp	.L50
 1609      00
 1610              	.L88:
 450:main.c        **** 			} else if ( isHexDigit(ch) ) {
 1611              		.loc 1 450 16
 1612 1236 0FBE8510 		movsbl	-240(%rbp), %eax
 1612      FFFFFF
 1613 123d 89C7     		movl	%eax, %edi
 1614 123f E8BCEDFF 		call	isHexDigit
 1614      FF
 1615              		.loc 1 450 14
 1616 1244 84C0     		testb	%al, %al
 1617 1246 0F847F02 		je	.L102
 1617      0000
 1618              	.LBB9:
 451:main.c        **** 				// Read a sequence of hex bytes to write
 452:main.c        **** 				uint8 *dataPtr;
 453:main.c        **** 				p = ptr + 1;
 1619              		.loc 1 453 13
 1620 124c 488B0500 		movq	ptr(%rip), %rax
 1620      000000
 1621              		.loc 1 453 7
 1622 1253 4883C001 		addq	$1, %rax
 1623 1257 48898570 		movq	%rax, -144(%rbp)
 1623      FFFFFF
 454:main.c        **** 				while ( isHexDigit(*p) ) {
 1624              		.loc 1 454 11
 1625 125e EB08     		jmp	.L103
 1626              	.L104:
 455:main.c        **** 					p++;
 1627              		.loc 1 455 7
 1628 1260 48838570 		addq	$1, -144(%rbp)
 1628      FFFFFF01 
 1629              	.L103:
 454:main.c        **** 				while ( isHexDigit(*p) ) {
 1630              		.loc 1 454 24
 1631 1268 488B8570 		movq	-144(%rbp), %rax
 1631      FFFFFF
 1632 126f 0FB600   		movzbl	(%rax), %eax
 454:main.c        **** 				while ( isHexDigit(*p) ) {
 1633              		.loc 1 454 13
 1634 1272 0FBEC0   		movsbl	%al, %eax
 1635 1275 89C7     		movl	%eax, %edi
 1636 1277 E884EDFF 		call	isHexDigit
 1636      FF
 1637 127c 84C0     		testb	%al, %al
 1638 127e 75E0     		jne	.L104
 456:main.c        **** 				}
 457:main.c        **** 				CHECK_STATUS((p - ptr) & 1, FLP_ODD_DIGITS, cleanup);
 1639              		.loc 1 457 5
 1640 1280 488B1500 		movq	ptr(%rip), %rdx
 1640      000000
 1641 1287 488B8570 		movq	-144(%rbp), %rax
 1641      FFFFFF
 1642 128e 4829D0   		subq	%rdx, %rax
 1643 1291 83E001   		andl	$1, %eax
 1644 1294 4885C0   		testq	%rax, %rax
 1645 1297 740F     		je	.L105
 1646              		.loc 1 457 5 is_stmt 0 discriminator 1
 1647 1299 C78514FF 		movl	$9, -236(%rbp)
 1647      FFFF0900 
 1647      0000
 1648 12a3 E96E0300 		jmp	.L50
 1648      00
 1649              	.L105:
 458:main.c        **** 				length = (size_t)(p - ptr) / 2;
 1650              		.loc 1 458 25 is_stmt 1
 1651 12a8 488B1500 		movq	ptr(%rip), %rdx
 1651      000000
 1652 12af 488B8570 		movq	-144(%rbp), %rax
 1652      FFFFFF
 1653 12b6 4829D0   		subq	%rdx, %rax
 1654              		.loc 1 458 32
 1655 12b9 48D1E8   		shrq	%rax
 1656              		.loc 1 458 12
 1657 12bc 48898538 		movq	%rax, -200(%rbp)
 1657      FFFFFF
 459:main.c        **** 				data = malloc(length);
 1658              		.loc 1 459 12
 1659 12c3 488B8538 		movq	-200(%rbp), %rax
 1659      FFFFFF
 1660 12ca 4889C7   		movq	%rax, %rdi
 1661 12cd E8000000 		call	malloc@PLT
 1661      00
 1662 12d2 48898548 		movq	%rax, -184(%rbp)
 1662      FFFFFF
 460:main.c        **** 				dataPtr = data;
 1663              		.loc 1 460 13
 1664 12d9 488B8548 		movq	-184(%rbp), %rax
 1664      FFFFFF
 1665 12e0 48898578 		movq	%rax, -136(%rbp)
 1665      FFFFFF
 461:main.c        **** 				for ( i = 0; i < length; i++ ) {
 1666              		.loc 1 461 13
 1667 12e7 48C78568 		movq	$0, -152(%rbp)
 1667      FFFFFF00 
 1667      000000
 1668              		.loc 1 461 5
 1669 12f2 EB34     		jmp	.L106
 1670              	.L107:
 462:main.c        **** 					getHexByte(dataPtr++);
 1671              		.loc 1 462 6 discriminator 3
 1672 12f4 488B8578 		movq	-136(%rbp), %rax
 1672      FFFFFF
 1673 12fb 488D5001 		leaq	1(%rax), %rdx
 1674 12ff 48899578 		movq	%rdx, -136(%rbp)
 1674      FFFFFF
 1675 1306 4889C7   		movq	%rax, %rdi
 1676 1309 E8F1EDFF 		call	getHexByte
 1676      FF
 463:main.c        **** 					ptr += 2;
 1677              		.loc 1 463 10 discriminator 3
 1678 130e 488B0500 		movq	ptr(%rip), %rax
 1678      000000
 1679 1315 4883C002 		addq	$2, %rax
 1680 1319 48890500 		movq	%rax, ptr(%rip)
 1680      000000
 461:main.c        **** 				for ( i = 0; i < length; i++ ) {
 1681              		.loc 1 461 31 discriminator 3
 1682 1320 48838568 		addq	$1, -152(%rbp)
 1682      FFFFFF01 
 1683              	.L106:
 461:main.c        **** 				for ( i = 0; i < length; i++ ) {
 1684              		.loc 1 461 20 discriminator 1
 1685 1328 488B8538 		movq	-200(%rbp), %rax
 1685      FFFFFF
 1686 132f 48398568 		cmpq	%rax, -152(%rbp)
 1686      FFFFFF
 1687 1336 72BC     		jb	.L107
 464:main.c        **** 				}
 465:main.c        **** 				#ifdef WIN32
 466:main.c        **** 					QueryPerformanceCounter(&tvStart);
 467:main.c        **** 					fStatus = flWriteChannel(handle, (uint8)chan, length, data, error);
 468:main.c        **** 					QueryPerformanceCounter(&tvEnd);
 469:main.c        **** 					totalTime = (double)(tvEnd.QuadPart - tvStart.QuadPart);
 470:main.c        **** 					totalTime /= freq.QuadPart;
 471:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 472:main.c        **** 				#else
 473:main.c        **** 					gettimeofday(&tvStart, NULL);
 1688              		.loc 1 473 6
 1689 1338 488D45B0 		leaq	-80(%rbp), %rax
 1690 133c BE000000 		movl	$0, %esi
 1690      00
 1691 1341 4889C7   		movq	%rax, %rdi
 1692 1344 E8000000 		call	gettimeofday@PLT
 1692      00
 474:main.c        **** 					fStatus = flWriteChannel(handle, (uint8)chan, length, data, error);
 1693              		.loc 1 474 16
 1694 1349 488B9538 		movq	-200(%rbp), %rdx
 1694      FFFFFF
 1695              		.loc 1 474 39
 1696 1350 488B4580 		movq	-128(%rbp), %rax
 1697              		.loc 1 474 16
 1698 1354 0FB6F0   		movzbl	%al, %esi
 1699 1357 488BBDF8 		movq	-264(%rbp), %rdi
 1699      FEFFFF
 1700 135e 488B8D48 		movq	-184(%rbp), %rcx
 1700      FFFFFF
 1701 1365 488B8508 		movq	-248(%rbp), %rax
 1701      FFFFFF
 1702 136c 4989F8   		movq	%rdi, %r8
 1703 136f 4889C7   		movq	%rax, %rdi
 1704 1372 E8000000 		call	flWriteChannel@PLT
 1704      00
 1705 1377 898524FF 		movl	%eax, -220(%rbp)
 1705      FFFF
 475:main.c        **** 					gettimeofday(&tvEnd, NULL);
 1706              		.loc 1 475 6
 1707 137d 488D45C0 		leaq	-64(%rbp), %rax
 1708 1381 BE000000 		movl	$0, %esi
 1708      00
 1709 1386 4889C7   		movq	%rax, %rdi
 1710 1389 E8000000 		call	gettimeofday@PLT
 1710      00
 476:main.c        **** 					startTime = tvStart.tv_sec;
 1711              		.loc 1 476 16
 1712 138e 488B45B0 		movq	-80(%rbp), %rax
 1713 1392 48894588 		movq	%rax, -120(%rbp)
 477:main.c        **** 					startTime *= 1000000;
 1714              		.loc 1 477 16
 1715 1396 488B4588 		movq	-120(%rbp), %rax
 1716 139a 4869C040 		imulq	$1000000, %rax, %rax
 1716      420F00
 1717 13a1 48894588 		movq	%rax, -120(%rbp)
 478:main.c        **** 					startTime += tvStart.tv_usec;
 1718              		.loc 1 478 26
 1719 13a5 488B45B8 		movq	-72(%rbp), %rax
 1720              		.loc 1 478 16
 1721 13a9 48014588 		addq	%rax, -120(%rbp)
 479:main.c        **** 					endTime = tvEnd.tv_sec;
 1722              		.loc 1 479 14
 1723 13ad 488B45C0 		movq	-64(%rbp), %rax
 1724 13b1 48894590 		movq	%rax, -112(%rbp)
 480:main.c        **** 					endTime *= 1000000;
 1725              		.loc 1 480 14
 1726 13b5 488B4590 		movq	-112(%rbp), %rax
 1727 13b9 4869C040 		imulq	$1000000, %rax, %rax
 1727      420F00
 1728 13c0 48894590 		movq	%rax, -112(%rbp)
 481:main.c        **** 					endTime += tvEnd.tv_usec;
 1729              		.loc 1 481 22
 1730 13c4 488B45C8 		movq	-56(%rbp), %rax
 1731              		.loc 1 481 14
 1732 13c8 48014590 		addq	%rax, -112(%rbp)
 482:main.c        **** 					totalTime = (double)(endTime - startTime);
 1733              		.loc 1 482 35
 1734 13cc 488B4590 		movq	-112(%rbp), %rax
 1735 13d0 482B4588 		subq	-120(%rbp), %rax
 1736              		.loc 1 482 16
 1737 13d4 660FEFC0 		pxor	%xmm0, %xmm0
 1738 13d8 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 1738      C0
 1739 13dd F20F1145 		movsd	%xmm0, -104(%rbp)
 1739      98
 483:main.c        **** 					totalTime /= 1000000;  // convert from uS to S.
 1740              		.loc 1 483 16
 1741 13e2 F20F1045 		movsd	-104(%rbp), %xmm0
 1741      98
 1742 13e7 F20F100D 		movsd	.LC14(%rip), %xmm1
 1742      00000000 
 1743 13ef F20F5EC1 		divsd	%xmm1, %xmm0
 1744 13f3 F20F1145 		movsd	%xmm0, -104(%rbp)
 1744      98
 484:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 1745              		.loc 1 484 14
 1746 13f8 488B8538 		movq	-200(%rbp), %rax
 1746      FFFFFF
 1747 13ff 4885C0   		testq	%rax, %rax
 1748 1402 780B     		js	.L108
 1749 1404 660FEFC0 		pxor	%xmm0, %xmm0
 1750 1408 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 1750      C0
 1751 140d EB19     		jmp	.L109
 1752              	.L108:
 1753 140f 4889C2   		movq	%rax, %rdx
 1754 1412 48D1EA   		shrq	%rdx
 1755 1415 83E001   		andl	$1, %eax
 1756 1418 4809C2   		orq	%rax, %rdx
 1757 141b 660FEFC0 		pxor	%xmm0, %xmm0
 1758 141f F2480F2A 		cvtsi2sdq	%rdx, %xmm0
 1758      C2
 1759 1424 F20F58C0 		addsd	%xmm0, %xmm0
 1760              	.L109:
 1761              		.loc 1 484 41
 1762 1428 F20F1055 		movsd	-104(%rbp), %xmm2
 1762      98
 1763 142d F20F100D 		movsd	.LC15(%rip), %xmm1
 1763      00000000 
 1764 1435 F20F59CA 		mulsd	%xmm2, %xmm1
 1765              		.loc 1 484 12
 1766 1439 F20F5EC1 		divsd	%xmm1, %xmm0
 1767 143d F20F1145 		movsd	%xmm0, -96(%rbp)
 1767      A0
 485:main.c        **** 				#endif
 486:main.c        **** 				if ( enableBenchmarking ) {
 1768              		.loc 1 486 10
 1769 1442 0FB60500 		movzbl	enableBenchmarking(%rip), %eax
 1769      000000
 1770              		.loc 1 486 8
 1771 1449 84C0     		testb	%al, %al
 1772 144b 7447     		je	.L110
 487:main.c        **** 					printf(
 488:main.c        **** 						"Wrote "PFSZD" bytes (checksum 0x%04X) to channel %lu at %f MiB/s\n",
 489:main.c        **** 						length, calcChecksum(data, length), chan, speed);
 1773              		.loc 1 489 15
 1774 144d 488B9538 		movq	-200(%rbp), %rdx
 1774      FFFFFF
 1775 1454 488B8548 		movq	-184(%rbp), %rax
 1775      FFFFFF
 1776 145b 4889D6   		movq	%rdx, %rsi
 1777 145e 4889C7   		movq	%rax, %rdi
 1778 1461 E8DCEBFF 		call	calcChecksum
 1778      FF
 487:main.c        **** 					printf(
 1779              		.loc 1 487 6
 1780 1466 0FB7D0   		movzwl	%ax, %edx
 1781 1469 488B8538 		movq	-200(%rbp), %rax
 1781      FFFFFF
 1782 1470 488B75A0 		movq	-96(%rbp), %rsi
 1783 1474 488B4D80 		movq	-128(%rbp), %rcx
 1784 1478 66480F6E 		movq	%rsi, %xmm0
 1784      C6
 1785 147d 4889C6   		movq	%rax, %rsi
 1786 1480 488D0500 		leaq	.LC18(%rip), %rax
 1786      000000
 1787 1487 4889C7   		movq	%rax, %rdi
 1788 148a B8010000 		movl	$1, %eax
 1788      00
 1789 148f E8000000 		call	printf@PLT
 1789      00
 1790              	.L110:
 490:main.c        **** 				}
 491:main.c        **** 				CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 1791              		.loc 1 491 5
 1792 1494 83BD24FF 		cmpl	$0, -220(%rbp)
 1792      FFFF00
 1793 149b 740F     		je	.L111
 1794              		.loc 1 491 5 is_stmt 0 discriminator 1
 1795 149d C78514FF 		movl	$1, -236(%rbp)
 1795      FFFF0100 
 1795      0000
 1796 14a7 E96A0100 		jmp	.L50
 1796      00
 1797              	.L111:
 492:main.c        **** 				free(data);
 1798              		.loc 1 492 5 is_stmt 1
 1799 14ac 488B8548 		movq	-184(%rbp), %rax
 1799      FFFFFF
 1800 14b3 4889C7   		movq	%rax, %rdi
 1801 14b6 E8000000 		call	free@PLT
 1801      00
 493:main.c        **** 				data = NULL;
 1802              		.loc 1 493 10
 1803 14bb 48C78548 		movq	$0, -184(%rbp)
 1803      FFFFFF00 
 1803      000000
 1804              	.LBE9:
 494:main.c        **** 			} else {
 495:main.c        **** 				FAIL(FLP_ILL_CHAR, cleanup);
 496:main.c        **** 			}
 497:main.c        **** 			break;
 1805              		.loc 1 497 4
 1806 14c6 E90A0100 		jmp	.L82
 1806      00
 1807              	.L102:
 495:main.c        **** 			}
 1808              		.loc 1 495 5
 1809 14cb C78514FF 		movl	$5, -236(%rbp)
 1809      FFFF0500 
 1809      0000
 1810 14d5 E93C0100 		jmp	.L50
 1810      00
 1811              	.L55:
 1812              	.LBE7:
 1813              	.LBB10:
 498:main.c        **** 		}
 499:main.c        **** 		case '+':{
 500:main.c        **** 			uint32 conduit;
 501:main.c        **** 			char *end;
 502:main.c        **** 			ptr++;
 1814              		.loc 1 502 7
 1815 14da 488B0500 		movq	ptr(%rip), %rax
 1815      000000
 1816 14e1 4883C001 		addq	$1, %rax
 1817 14e5 48890500 		movq	%rax, ptr(%rip)
 1817      000000
 503:main.c        **** 
 504:main.c        **** 			// Get the conduit
 505:main.c        **** 			errno = 0;
 1818              		.loc 1 505 4
 1819 14ec E8000000 		call	__errno_location@PLT
 1819      00
 1820              		.loc 1 505 10
 1821 14f1 C7000000 		movl	$0, (%rax)
 1821      0000
 506:main.c        **** 			conduit = (uint32)strtoul(ptr, &end, 16);
 1822              		.loc 1 506 22
 1823 14f7 488B0500 		movq	ptr(%rip), %rax
 1823      000000
 1824 14fe 488D8D40 		leaq	-192(%rbp), %rcx
 1824      FFFFFF
 1825 1505 BA100000 		movl	$16, %edx
 1825      00
 1826 150a 4889CE   		movq	%rcx, %rsi
 1827 150d 4889C7   		movq	%rax, %rdi
 1828 1510 E8000000 		call	strtoul@PLT
 1828      00
 1829              		.loc 1 506 12
 1830 1515 898530FF 		movl	%eax, -208(%rbp)
 1830      FFFF
 507:main.c        **** 			CHECK_STATUS(errno, FLP_BAD_HEX, cleanup);
 1831              		.loc 1 507 4
 1832 151b E8000000 		call	__errno_location@PLT
 1832      00
 1833 1520 8B00     		movl	(%rax), %eax
 1834 1522 85C0     		testl	%eax, %eax
 1835 1524 740F     		je	.L112
 1836              		.loc 1 507 4 is_stmt 0 discriminator 1
 1837 1526 C78514FF 		movl	$2, -236(%rbp)
 1837      FFFF0200 
 1837      0000
 1838 1530 E9E10000 		jmp	.L50
 1838      00
 1839              	.L112:
 508:main.c        **** 
 509:main.c        **** 			// Ensure that it's 0-127
 510:main.c        **** 			CHECK_STATUS(conduit > 255, FLP_CONDUIT_RANGE, cleanup);
 1840              		.loc 1 510 4 is_stmt 1
 1841 1535 81BD30FF 		cmpl	$255, -208(%rbp)
 1841      FFFFFF00 
 1841      0000
 1842 153f 760F     		jbe	.L114
 1843              		.loc 1 510 4 is_stmt 0 discriminator 1
 1844 1541 C78514FF 		movl	$4, -236(%rbp)
 1844      FFFF0400 
 1844      0000
 1845 154b E9C60000 		jmp	.L50
 1845      00
 1846              	.L114:
 511:main.c        **** 			ptr = end;
 1847              		.loc 1 511 8 is_stmt 1
 1848 1550 488B8540 		movq	-192(%rbp), %rax
 1848      FFFFFF
 1849 1557 48890500 		movq	%rax, ptr(%rip)
 1849      000000
 512:main.c        **** 
 513:main.c        **** 			// Only two valid chars at this point:
 514:main.c        **** 			CHECK_STATUS(*ptr != '\0' && *ptr != ';', FLP_ILL_CHAR, cleanup);
 1850              		.loc 1 514 4
 1851 155e 488B0500 		movq	ptr(%rip), %rax
 1851      000000
 1852 1565 0FB600   		movzbl	(%rax), %eax
 1853 1568 84C0     		testb	%al, %al
 1854 156a 741D     		je	.L115
 1855              		.loc 1 514 4 is_stmt 0 discriminator 1
 1856 156c 488B0500 		movq	ptr(%rip), %rax
 1856      000000
 1857 1573 0FB600   		movzbl	(%rax), %eax
 1858 1576 3C3B     		cmpb	$59, %al
 1859 1578 740F     		je	.L115
 1860              		.loc 1 514 4 discriminator 2
 1861 157a C78514FF 		movl	$5, -236(%rbp)
 1861      FFFF0500 
 1861      0000
 1862 1584 E98D0000 		jmp	.L50
 1862      00
 1863              	.L115:
 515:main.c        **** 
 516:main.c        **** 			fStatus = flSelectConduit(handle, (uint8)conduit, error);
 1864              		.loc 1 516 38 is_stmt 1
 1865 1589 8B8530FF 		movl	-208(%rbp), %eax
 1865      FFFF
 1866              		.loc 1 516 14
 1867 158f 0FB6C8   		movzbl	%al, %ecx
 1868 1592 488B95F8 		movq	-264(%rbp), %rdx
 1868      FEFFFF
 1869 1599 488B8508 		movq	-248(%rbp), %rax
 1869      FFFFFF
 1870 15a0 89CE     		movl	%ecx, %esi
 1871 15a2 4889C7   		movq	%rax, %rdi
 1872 15a5 E8000000 		call	flSelectConduit@PLT
 1872      00
 1873 15aa 898524FF 		movl	%eax, -220(%rbp)
 1873      FFFF
 517:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 1874              		.loc 1 517 4
 1875 15b0 83BD24FF 		cmpl	$0, -220(%rbp)
 1875      FFFF00
 1876 15b7 741B     		je	.L126
 1877              		.loc 1 517 4 is_stmt 0 discriminator 1
 1878 15b9 C78514FF 		movl	$1, -236(%rbp)
 1878      FFFF0100 
 1878      0000
 1879 15c3 EB51     		jmp	.L50
 1880              	.L54:
 1881              	.LBE10:
 518:main.c        **** 			break;
 519:main.c        **** 		}
 520:main.c        **** 		default:
 521:main.c        **** 			FAIL(FLP_ILL_CHAR, cleanup);
 1882              		.loc 1 521 4 is_stmt 1
 1883 15c5 C78514FF 		movl	$5, -236(%rbp)
 1883      FFFF0500 
 1883      0000
 1884 15cf EB45     		jmp	.L50
 1885              	.L125:
 1886              	.LBB11:
 373:main.c        **** 		}
 1887              		.loc 1 373 4
 1888 15d1 90       		nop
 1889 15d2 EB01     		jmp	.L82
 1890              	.L126:
 1891              	.LBE11:
 1892              	.LBB12:
 518:main.c        **** 			break;
 1893              		.loc 1 518 4
 1894 15d4 90       		nop
 1895              	.L82:
 1896              	.LBE12:
 522:main.c        **** 		}
 523:main.c        **** 	} while ( *ptr == ';' );
 1897              		.loc 1 523 12
 1898 15d5 488B0500 		movq	ptr(%rip), %rax
 1898      000000
 1899 15dc 0FB600   		movzbl	(%rax), %eax
 1900              		.loc 1 523 17
 1901 15df 3C3B     		cmpb	$59, %al
 1902 15e1 0F847AF1 		je	.L51
 1902      FFFF
 524:main.c        **** 	CHECK_STATUS(*ptr != '\0', FLP_ILL_CHAR, cleanup);
 1903              		.loc 1 524 2
 1904 15e7 488B0500 		movq	ptr(%rip), %rax
 1904      000000
 1905 15ee 0FB600   		movzbl	(%rax), %eax
 1906 15f1 84C0     		testb	%al, %al
 1907 15f3 740C     		je	.L118
 1908              		.loc 1 524 2 is_stmt 0 discriminator 1
 1909 15f5 C78514FF 		movl	$5, -236(%rbp)
 1909      FFFF0500 
 1909      0000
 1910 15ff EB15     		jmp	.L50
 1911              	.L118:
 525:main.c        **** 
 526:main.c        **** 	dump(0x00000000, dataFromFPGA.data, dataFromFPGA.length);
 1912              		.loc 1 526 2 is_stmt 1
 1913 1601 488B55D8 		movq	-40(%rbp), %rdx
 1914              		.loc 1 526 31
 1915 1605 488B45D0 		movq	-48(%rbp), %rax
 1916              		.loc 1 526 2
 1917 1609 4889C6   		movq	%rax, %rsi
 1918 160c BF000000 		movl	$0, %edi
 1918      00
 1919 1611 E8000000 		call	dump@PLT
 1919      00
 1920              	.L50:
 527:main.c        **** 
 528:main.c        **** cleanup:
 529:main.c        **** 	bufDestroy(&dataFromFPGA);
 1921              		.loc 1 529 2
 1922 1616 488D45D0 		leaq	-48(%rbp), %rax
 1923 161a 4889C7   		movq	%rax, %rdi
 1924 161d E8000000 		call	bufDestroy@PLT
 1924      00
 530:main.c        **** 	if ( file ) {
 1925              		.loc 1 530 5
 1926 1622 4883BD58 		cmpq	$0, -168(%rbp)
 1926      FFFFFF00 
 1927 162a 740F     		je	.L119
 531:main.c        **** 		fclose(file);
 1928              		.loc 1 531 3
 1929 162c 488B8558 		movq	-168(%rbp), %rax
 1929      FFFFFF
 1930 1633 4889C7   		movq	%rax, %rdi
 1931 1636 E8000000 		call	fclose@PLT
 1931      00
 1932              	.L119:
 532:main.c        **** 	}
 533:main.c        **** 	free(fileName);
 1933              		.loc 1 533 2
 1934 163b 488B8550 		movq	-176(%rbp), %rax
 1934      FFFFFF
 1935 1642 4889C7   		movq	%rax, %rdi
 1936 1645 E8000000 		call	free@PLT
 1936      00
 534:main.c        **** 	free(data);
 1937              		.loc 1 534 2
 1938 164a 488B8548 		movq	-184(%rbp), %rax
 1938      FFFFFF
 1939 1651 4889C7   		movq	%rax, %rdi
 1940 1654 E8000000 		call	free@PLT
 1940      00
 535:main.c        **** 	if ( retVal > FLP_LIBERR ) {
 1941              		.loc 1 535 5
 1942 1659 83BD14FF 		cmpl	$1, -236(%rbp)
 1942      FFFF01
 1943 1660 0F86B000 		jbe	.L120
 1943      0000
 1944              	.LBB13:
 536:main.c        **** 		const int column = (int)(ptr - line);
 1945              		.loc 1 536 32
 1946 1666 488B0500 		movq	ptr(%rip), %rax
 1946      000000
 1947 166d 482B8500 		subq	-256(%rbp), %rax
 1947      FFFFFF
 1948              		.loc 1 536 13
 1949 1674 898534FF 		movl	%eax, -204(%rbp)
 1949      FFFF
 537:main.c        **** 		int i;
 538:main.c        **** 		fprintf(stderr, "%s at column %d\n  %s\n  ", errMessages[retVal], column, line);
 1950              		.loc 1 538 59
 1951 167a 8B8514FF 		movl	-236(%rbp), %eax
 1951      FFFF
 1952 1680 488D14C5 		leaq	0(,%rax,8), %rdx
 1952      00000000 
 1953 1688 488D0500 		leaq	errMessages(%rip), %rax
 1953      000000
 1954 168f 488B1402 		movq	(%rdx,%rax), %rdx
 1955              		.loc 1 538 3
 1956 1693 488B0500 		movq	stderr(%rip), %rax
 1956      000000
 1957 169a 488BB500 		movq	-256(%rbp), %rsi
 1957      FFFFFF
 1958 16a1 8B8D34FF 		movl	-204(%rbp), %ecx
 1958      FFFF
 1959 16a7 4989F0   		movq	%rsi, %r8
 1960 16aa 488D3500 		leaq	.LC19(%rip), %rsi
 1960      000000
 1961 16b1 4889C7   		movq	%rax, %rdi
 1962 16b4 B8000000 		movl	$0, %eax
 1962      00
 1963 16b9 E8000000 		call	fprintf@PLT
 1963      00
 539:main.c        **** 		for ( i = 0; i < column; i++ ) {
 1964              		.loc 1 539 11
 1965 16be C7851CFF 		movl	$0, -228(%rbp)
 1965      FFFF0000 
 1965      0000
 1966              		.loc 1 539 3
 1967 16c8 EB1B     		jmp	.L121
 1968              	.L122:
 540:main.c        **** 			fprintf(stderr, " ");
 1969              		.loc 1 540 4 discriminator 3
 1970 16ca 488B0500 		movq	stderr(%rip), %rax
 1970      000000
 1971 16d1 4889C6   		movq	%rax, %rsi
 1972 16d4 BF200000 		movl	$32, %edi
 1972      00
 1973 16d9 E8000000 		call	fputc@PLT
 1973      00
 539:main.c        **** 		for ( i = 0; i < column; i++ ) {
 1974              		.loc 1 539 29 discriminator 3
 1975 16de 83851CFF 		addl	$1, -228(%rbp)
 1975      FFFF01
 1976              	.L121:
 539:main.c        **** 		for ( i = 0; i < column; i++ ) {
 1977              		.loc 1 539 18 discriminator 1
 1978 16e5 8B851CFF 		movl	-228(%rbp), %eax
 1978      FFFF
 1979 16eb 3B8534FF 		cmpl	-204(%rbp), %eax
 1979      FFFF
 1980 16f1 7CD7     		jl	.L122
 541:main.c        **** 		}
 542:main.c        **** 		fprintf(stderr, "^\n");
 1981              		.loc 1 542 3
 1982 16f3 488B0500 		movq	stderr(%rip), %rax
 1982      000000
 1983 16fa 4889C1   		movq	%rax, %rcx
 1984 16fd BA020000 		movl	$2, %edx
 1984      00
 1985 1702 BE010000 		movl	$1, %esi
 1985      00
 1986 1707 488D0500 		leaq	.LC20(%rip), %rax
 1986      000000
 1987 170e 4889C7   		movq	%rax, %rdi
 1988 1711 E8000000 		call	fwrite@PLT
 1988      00
 1989              	.L120:
 1990              	.LBE13:
 543:main.c        **** 	}
 544:main.c        **** 	return retVal;
 1991              		.loc 1 544 9
 1992 1716 8B8514FF 		movl	-236(%rbp), %eax
 1992      FFFF
 545:main.c        **** }
 1993              		.loc 1 545 1
 1994 171c 488B55F8 		movq	-8(%rbp), %rdx
 1995 1720 64482B14 		subq	%fs:40, %rdx
 1995      25280000 
 1995      00
 1996 1729 7405     		je	.L124
 1997 172b E8000000 		call	__stack_chk_fail@PLT
 1997      00
 1998              	.L124:
 1999 1730 C9       		leave
 2000              		.cfi_def_cfa 7, 8
 2001 1731 C3       		ret
 2002              		.cfi_endproc
 2003              	.LFE10:
 2005              		.section	.rodata
 2006              	.LC21:
 2007 0179 30303030 		.string	"0000"
 2007      00
 2008              	.LC22:
 2009 017e 30303031 		.string	"0001"
 2009      00
 2010              	.LC23:
 2011 0183 30303130 		.string	"0010"
 2011      00
 2012              	.LC24:
 2013 0188 30303131 		.string	"0011"
 2013      00
 2014              	.LC25:
 2015 018d 30313030 		.string	"0100"
 2015      00
 2016              	.LC26:
 2017 0192 30313031 		.string	"0101"
 2017      00
 2018              	.LC27:
 2019 0197 30313130 		.string	"0110"
 2019      00
 2020              	.LC28:
 2021 019c 30313131 		.string	"0111"
 2021      00
 2022              	.LC29:
 2023 01a1 31303030 		.string	"1000"
 2023      00
 2024              	.LC30:
 2025 01a6 31303031 		.string	"1001"
 2025      00
 2026              	.LC31:
 2027 01ab 58585858 		.string	"XXXX"
 2027      00
 2028              	.LC32:
 2029 01b0 31303130 		.string	"1010"
 2029      00
 2030              	.LC33:
 2031 01b5 31303131 		.string	"1011"
 2031      00
 2032              	.LC34:
 2033 01ba 31313030 		.string	"1100"
 2033      00
 2034              	.LC35:
 2035 01bf 31313031 		.string	"1101"
 2035      00
 2036              	.LC36:
 2037 01c4 31313130 		.string	"1110"
 2037      00
 2038              	.LC37:
 2039 01c9 31313131 		.string	"1111"
 2039      00
 2040              		.section	.data.rel.local,"aw"
 2041              		.align 32
 2044              	nibbles:
 2045 0000 00000000 		.quad	.LC21
 2045      00000000 
 2046 0008 00000000 		.quad	.LC22
 2046      00000000 
 2047 0010 00000000 		.quad	.LC23
 2047      00000000 
 2048 0018 00000000 		.quad	.LC24
 2048      00000000 
 2049 0020 00000000 		.quad	.LC25
 2049      00000000 
 2050 0028 00000000 		.quad	.LC26
 2050      00000000 
 2051 0030 00000000 		.quad	.LC27
 2051      00000000 
 2052 0038 00000000 		.quad	.LC28
 2052      00000000 
 2053 0040 00000000 		.quad	.LC29
 2053      00000000 
 2054 0048 00000000 		.quad	.LC30
 2054      00000000 
 2055 0050 00000000 		.quad	.LC31
 2055      00000000 
 2056 0058 00000000 		.quad	.LC31
 2056      00000000 
 2057 0060 00000000 		.quad	.LC31
 2057      00000000 
 2058 0068 00000000 		.quad	.LC31
 2058      00000000 
 2059 0070 00000000 		.quad	.LC31
 2059      00000000 
 2060 0078 00000000 		.quad	.LC31
 2060      00000000 
 2061 0080 00000000 		.quad	.LC31
 2061      00000000 
 2062 0088 00000000 		.quad	.LC32
 2062      00000000 
 2063 0090 00000000 		.quad	.LC33
 2063      00000000 
 2064 0098 00000000 		.quad	.LC34
 2064      00000000 
 2065 00a0 00000000 		.quad	.LC35
 2065      00000000 
 2066 00a8 00000000 		.quad	.LC36
 2066      00000000 
 2067 00b0 00000000 		.quad	.LC37
 2067      00000000 
 2068              		.section	.rodata
 2069 01ce 0000     		.align 8
 2070              	.LC38:
 2071 01d0 20202020 		.string	"            vendor ID and product ID (e.g 04B4:8613)"
 2071      20202020 
 2071      20202020 
 2071      76656E64 
 2071      6F722049 
 2072              	.LC39:
 2073 0205 3C564944 		.string	"<VID:PID>"
 2073      3A504944 
 2073      3E00
 2074              	.LC40:
 2075 020f 69767000 		.string	"ivp"
 2076              	.LC41:
 2077 0213 6900     		.string	"i"
 2078 0215 000000   		.align 8
 2079              	.LC42:
 2080 0218 20202020 		.string	"       VID, PID and opt. dev ID (e.g 1D50:602B:0001)"
 2080      20202056 
 2080      49442C20 
 2080      50494420 
 2080      616E6420 
 2081              	.LC43:
 2082 024d 3C564944 		.string	"<VID:PID[:DID]>"
 2082      3A504944 
 2082      5B3A4449 
 2082      445D3E00 
 2083              	.LC44:
 2084 025d 767000   		.string	"vp"
 2085              	.LC45:
 2086 0260 7600     		.string	"v"
 2087 0262 00000000 		.align 8
 2087      0000
 2088              	.LC46:
 2089 0268 20202020 		.string	"        firmware to RAM-load (or use std fw)"
 2089      20202020 
 2089      6669726D 
 2089      77617265 
 2089      20746F20 
 2090              	.LC47:
 2091 0295 3C666972 		.string	"<firmware.hex>"
 2091      6D776172 
 2091      652E6865 
 2091      783E00
 2092              	.LC48:
 2093 02a4 667700   		.string	"fw"
 2094              	.LC49:
 2095 02a7 6600     		.string	"f"
 2096 02a9 00000000 		.align 8
 2096      000000
 2097              	.LC50:
 2098 02b0 20726561 		.string	" read/write digital ports (e.g B13+,C1-,B2?)"
 2098      642F7772 
 2098      69746520 
 2098      64696769 
 2098      74616C20 
 2099              	.LC51:
 2100 02dd 3C626974 		.string	"<bitCfg[,bitCfg]*>"
 2100      4366675B 
 2100      2C626974 
 2100      4366675D 
 2100      2A3E00
 2101              	.LC52:
 2102 02f0 706F7274 		.string	"ports"
 2102      7300
 2103              	.LC53:
 2104 02f6 6400     		.string	"d"
 2105              	.LC54:
 2106 02f8 20202020 		.string	"         query the JTAG chain"
 2106      20202020 
 2106      20717565 
 2106      72792074 
 2106      6865204A 
 2107              	.LC55:
 2108 0316 3C6A7461 		.string	"<jtagBits>"
 2108      67426974 
 2108      733E00
 2109              	.LC56:
 2110 0321 71756572 		.string	"query"
 2110      7900
 2111              	.LC57:
 2112 0327 7100     		.string	"q"
 2113              	.LC58:
 2114 0329 20202020 		.string	"         program a device"
 2114      20202020 
 2114      2070726F 
 2114      6772616D 
 2114      20612064 
 2115              	.LC59:
 2116 0343 3C636F6E 		.string	"<config>"
 2116      6669673E 
 2116      00
 2117              	.LC60:
 2118 034c 70726F67 		.string	"program"
 2118      72616D00 
 2119              	.LC61:
 2120 0354 7000     		.string	"p"
 2121 0356 0000     		.align 8
 2122              	.LC62:
 2123 0358 20202020 		.string	"        which comm conduit to choose (default 0x01)"
 2123      20202020 
 2123      77686963 
 2123      6820636F 
 2123      6D6D2063 
 2124              	.LC63:
 2125 038c 3C636F6E 		.string	"<conduit>"
 2125      64756974 
 2125      3E00
 2126              	.LC64:
 2127 0396 636F6E64 		.string	"conduit"
 2127      75697400 
 2128              	.LC65:
 2129 039e 6300     		.string	"c"
 2130              		.align 8
 2131              	.LC66:
 2132 03a0 20202020 		.string	"    a series of CommFPGA actions"
 2132      61207365 
 2132      72696573 
 2132      206F6620 
 2132      436F6D6D 
 2133              	.LC67:
 2134 03c1 3C616374 		.string	"<actionString>"
 2134      696F6E53 
 2134      7472696E 
 2134      673E00
 2135              	.LC68:
 2136 03d0 61637469 		.string	"action"
 2136      6F6E00
 2137              	.LC69:
 2138 03d7 6100     		.string	"a"
 2139 03d9 00000000 		.align 8
 2139      000000
 2140              	.LC70:
 2141 03e0 20202020 		.string	"                    start up an interactive CommFPGA session"
 2141      20202020 
 2141      20202020 
 2141      20202020 
 2141      20202020 
 2142              	.LC71:
 2143 041d 7368656C 		.string	"shell"
 2143      6C00
 2144              	.LC72:
 2145 0423 7300     		.string	"s"
 2146 0425 000000   		.align 8
 2147              	.LC73:
 2148 0428 20202020 		.string	"                enable benchmarking & checksumming"
 2148      20202020 
 2148      20202020 
 2148      20202020 
 2148      656E6162 
 2149              	.LC74:
 2150 045b 62656E63 		.string	"benchmark"
 2150      686D6172 
 2150      6B00
 2151              	.LC75:
 2152 0465 6200     		.string	"b"
 2153 0467 00       		.align 8
 2154              	.LC76:
 2155 0468 20202020 		.string	"                    reset the bulk endpoints"
 2155      20202020 
 2155      20202020 
 2155      20202020 
 2155      20202020 
 2156              	.LC77:
 2157 0495 72657365 		.string	"reset"
 2157      7400
 2158              	.LC78:
 2159 049b 7200     		.string	"r"
 2160 049d 000000   		.align 8
 2161              	.LC79:
 2162 04a0 20202077 		.string	"   write data from channel ch to file"
 2162      72697465 
 2162      20646174 
 2162      61206672 
 2162      6F6D2063 
 2163              	.LC80:
 2164 04c6 3C63683A 		.string	"<ch:file.bin>"
 2164      66696C65 
 2164      2E62696E 
 2164      3E00
 2165              	.LC81:
 2166 04d4 64756D70 		.string	"dumploop"
 2166      6C6F6F70 
 2166      00
 2167              	.LC82:
 2168 04dd 6C00     		.string	"l"
 2169 04df 00       		.align 8
 2170              	.LC83:
 2171 04e0 20202020 		.string	"                     print this help and exit"
 2171      20202020 
 2171      20202020 
 2171      20202020 
 2171      20202020 
 2172              	.LC84:
 2173 050e 68656C70 		.string	"help"
 2173      00
 2174              	.LC85:
 2175 0513 6800     		.string	"h"
 2176 0515 000000   		.align 8
 2177              	.LC86:
 2178 0518 20202077 		.string	"   write firmware to FX2's EEPROM (!!)"
 2178      72697465 
 2178      20666972 
 2178      6D776172 
 2178      6520746F 
 2179              	.LC87:
 2180 053f 3C737464 		.string	"<std|fw.hex|fw.iic>"
 2180      7C66772E 
 2180      6865787C 
 2180      66772E69 
 2180      69633E00 
 2181              	.LC88:
 2182 0553 65657072 		.string	"eeprom"
 2182      6F6D00
 2183 055a 00000000 		.align 8
 2183      0000
 2184              	.LC89:
 2185 0560 20202020 		.string	"     backup FX2's EEPROM (e.g 128:fw.iic)\n"
 2185      20626163 
 2185      6B757020 
 2185      46583227 
 2185      73204545 
 2186              	.LC90:
 2187 058b 3C6B6269 		.string	"<kbitSize:fw.iic>"
 2187      7453697A 
 2187      653A6677 
 2187      2E696963 
 2187      3E00
 2188              	.LC91:
 2189 059d 6261636B 		.string	"backup"
 2189      757000
 2190              	.LC92:
 2191 05a4 666C636C 		.string	"flcli"
 2191      6900
 2192              	.LC93:
 2193 05aa 25733A20 		.string	"%s: insufficient memory\n"
 2193      696E7375 
 2193      66666963 
 2193      69656E74 
 2193      206D656D 
 2194 05c3 00000000 		.align 8
 2194      00
 2195              	.LC94:
 2196 05c8 46504741 		.string	"FPGALink Command-Line Interface Copyright (C) 2012-2014 Chris McClelland\n\nUsage: %s"
 2196      4C696E6B 
 2196      20436F6D 
 2196      6D616E64 
 2196      2D4C696E 
 2197              	.LC95:
 2198 061c 0A00     		.string	"\n"
 2199 061e 0000     		.align 8
 2200              	.LC96:
 2201 0620 0A496E74 		.string	"\nInteract with an FPGALink device.\n"
 2201      65726163 
 2201      74207769 
 2201      74682061 
 2201      6E204650 
 2202              	.LC97:
 2203 0644 2020252D 		.string	"  %-10s %s\n"
 2203      31307320 
 2203      25730A00 
 2204              		.align 8
 2205              	.LC98:
 2206 0650 54727920 		.string	"Try '%s --help' for more information.\n"
 2206      27257320 
 2206      2D2D6865 
 2206      6C702720 
 2206      666F7220 
 2207 0677 00       		.align 8
 2208              	.LC99:
 2209 0678 41747465 		.string	"Attempting to open connection to FPGALink device %s...\n"
 2209      6D707469 
 2209      6E672074 
 2209      6F206F70 
 2209      656E2063 
 2210              	.LC100:
 2211 06b0 4C6F6164 		.string	"Loading firmware into %s...\n"
 2211      696E6720 
 2211      6669726D 
 2211      77617265 
 2211      20696E74 
 2212              	.LC101:
 2213 06cd 41776169 		.string	"Awaiting renumeration"
 2213      74696E67 
 2213      2072656E 
 2213      756D6572 
 2213      6174696F 
 2214 06e3 00000000 		.align 8
 2214      00
 2215              	.LC102:
 2216 06e8 46504741 		.string	"FPGALink device did not renumerate properly as %s\n"
 2216      4C696E6B 
 2216      20646576 
 2216      69636520 
 2216      64696420 
 2217 071b 00000000 		.align 8
 2217      00
 2218              	.LC103:
 2219 0720 41747465 		.string	"Attempting to open connection to FPGLink device %s again...\n"
 2219      6D707469 
 2219      6E672074 
 2219      6F206F70 
 2219      656E2063 
 2220 075d 000000   		.align 8
 2221              	.LC104:
 2222 0760 436F756C 		.string	"Could not open FPGALink device at %s and no initial VID:PID was supplied\n"
 2222      64206E6F 
 2222      74206F70 
 2222      656E2046 
 2222      5047414C 
 2223 07aa 00000000 		.align 8
 2223      0000
 2224              	.LC105:
 2225 07b0 436F6E6E 		.string	"Connected to FPGALink device %s (firmwareID: 0x%04X, firmwareVersion: 0x%08X)\n"
 2225      65637465 
 2225      6420746F 
 2225      20465047 
 2225      414C696E 
 2226              	.LC106:
 2227 07ff 73746400 		.string	"std"
 2228 0803 00000000 		.align 8
 2228      00
 2229              	.LC107:
 2230 0808 57726974 		.string	"Writing the standard FPGALink firmware to the FX2's EEPROM..."
 2230      696E6720 
 2230      74686520 
 2230      7374616E 
 2230      64617264 
 2231 0846 0000     		.align 8
 2232              	.LC108:
 2233 0848 57726974 		.string	"Writing custom FPGALink firmware from %s to the FX2's EEPROM...\n"
 2233      696E6720 
 2233      63757374 
 2233      6F6D2046 
 2233      5047414C 
 2234 0889 00000000 		.align 8
 2234      000000
 2235              	.LC109:
 2236 0890 25733A20 		.string	"%s: invalid argument to option --backup=<kbitSize:fw.iic>\n"
 2236      696E7661 
 2236      6C696420 
 2236      61726775 
 2236      6D656E74 
 2237 08cb 00000000 		.align 8
 2237      00
 2238              	.LC110:
 2239 08d0 53617669 		.string	"Saving a backup of %d kbit from the FX2's EEPROM to %s...\n"
 2239      6E672061 
 2239      20626163 
 2239      6B757020 
 2239      6F662025 
 2240              	.LC111:
 2241 090b 436F6E66 		.string	"Configuring ports..."
 2241      69677572 
 2241      696E6720 
 2241      706F7274 
 2241      732E2E2E 
 2242              	.LC112:
 2243 0920 25303858 		.string	"%08X"
 2243      00
 2244 0925 000000   		.align 8
 2245              	.LC113:
 2246 0928 52656164 		.string	"Readback:   28   24   20   16    12    8    4    0\n          %s"
 2246      6261636B 
 2246      3A202020 
 2246      32382020 
 2246      20323420 
 2247              	.LC114:
 2248 0968 20257300 		.string	" %s"
 2249              	.LC115:
 2250 096c 20202573 		.string	"  %s"
 2250      00
 2251              	.LC116:
 2252 0971 2025730A 		.string	" %s\n"
 2252      00
 2253 0976 0000     		.align 8
 2254              	.LC117:
 2255 0978 54686520 		.string	"The FPGALink device at %s scanned its JTAG chain, yielding:\n"
 2255      46504741 
 2255      4C696E6B 
 2255      20646576 
 2255      69636520 
 2256              	.LC118:
 2257 09b5 20203078 		.string	"  0x%08X\n"
 2257      25303858 
 2257      0A00
 2258 09bf 00       		.align 8
 2259              	.LC119:
 2260 09c0 54686520 		.string	"The FPGALink device at %s scanned its JTAG chain but did not find any attached devices\n"
 2260      46504741 
 2260      4C696E6B 
 2260      20646576 
 2260      69636520 
 2261              		.align 8
 2262              	.LC120:
 2263 0a18 4A544147 		.string	"JTAG chain scan requested but FPGALink device at %s does not support NeroProg\n"
 2263      20636861 
 2263      696E2073 
 2263      63616E20 
 2263      72657175 
 2264              	.LC121:
 2265 0a67 50726F67 		.string	"Programming device..."
 2265      72616D6D 
 2265      696E6720 
 2265      64657669 
 2265      63652E2E 
 2266 0a7d 000000   		.align 8
 2267              	.LC122:
 2268 0a80 50726F67 		.string	"Program operation requested but device at %s does not support NeroProg\n"
 2268      72616D20 
 2268      6F706572 
 2268      6174696F 
 2268      6E207265 
 2269              		.align 8
 2270              	.LC123:
 2271 0ac8 45786563 		.string	"Executing CommFPGA actions on FPGALink device %s...\n"
 2271      7574696E 
 2271      6720436F 
 2271      6D6D4650 
 2271      47412061 
 2272 0afd 000000   		.align 8
 2273              	.LC124:
 2274 0b00 54686520 		.string	"The FPGALink device at %s is not ready to talk - did you forget --program?\n"
 2274      46504741 
 2274      4C696E6B 
 2274      20646576 
 2274      69636520 
 2275 0b4c 00000000 		.align 8
 2276              	.LC125:
 2277 0b50 41637469 		.string	"Action requested but device at %s does not support CommFPGA\n"
 2277      6F6E2072 
 2277      65717565 
 2277      73746564 
 2277      20627574 
 2278 0b8d 000000   		.align 8
 2279              	.LC126:
 2280 0b90 25733A20 		.string	"%s: invalid argument to option -l|--dumploop=<ch:file.bin>\n"
 2280      696E7661 
 2280      6C696420 
 2280      61726775 
 2280      6D656E74 
 2281 0bcc 00000000 		.align 8
 2282              	.LC127:
 2283 0bd0 436F7079 		.string	"Copying from channel %lu to %s"
 2283      696E6720 
 2283      66726F6D 
 2283      20636861 
 2283      6E6E656C 
 2284              	.LC128:
 2285 0bef 0A436175 		.string	"\nCaught SIGINT, quitting..."
 2285      67687420 
 2285      53494749 
 2285      4E542C20 
 2285      71756974 
 2286 0c0b 00000000 		.align 8
 2286      00
 2287              	.LC129:
 2288 0c10 0A456E74 		.string	"\nEntering CommFPGA command-line mode:"
 2288      6572696E 
 2288      6720436F 
 2288      6D6D4650 
 2288      47412063 
 2289              	.LC130:
 2290 0c36 3E2000   		.string	"> "
 2291 0c39 00000000 		.align 8
 2291      000000
 2292              	.LC131:
 2293 0c40 54686520 		.string	"The FPGALink device at %s is not ready to talk - did you forget --xsvf?\n"
 2293      46504741 
 2293      4C696E6B 
 2293      20646576 
 2293      69636520 
 2294 0c89 00000000 		.align 8
 2294      000000
 2295              	.LC132:
 2296 0c90 5368656C 		.string	"Shell requested but device at %s does not support CommFPGA\n"
 2296      6C207265 
 2296      71756573 
 2296      74656420 
 2296      62757420 
 2297              	.LC133:
 2298 0ccc 25730A00 		.string	"%s\n"
 2299              		.text
 2300              		.globl	main
 2302              	main:
 2303              	.LFB11:
 546:main.c        **** 
 547:main.c        **** static const char *nibbles[] = {
 548:main.c        **** 	"0000",  // '0'
 549:main.c        **** 	"0001",  // '1'
 550:main.c        **** 	"0010",  // '2'
 551:main.c        **** 	"0011",  // '3'
 552:main.c        **** 	"0100",  // '4'
 553:main.c        **** 	"0101",  // '5'
 554:main.c        **** 	"0110",  // '6'
 555:main.c        **** 	"0111",  // '7'
 556:main.c        **** 	"1000",  // '8'
 557:main.c        **** 	"1001",  // '9'
 558:main.c        **** 
 559:main.c        **** 	"XXXX",  // ':'
 560:main.c        **** 	"XXXX",  // ';'
 561:main.c        **** 	"XXXX",  // '<'
 562:main.c        **** 	"XXXX",  // '='
 563:main.c        **** 	"XXXX",  // '>'
 564:main.c        **** 	"XXXX",  // '?'
 565:main.c        **** 	"XXXX",  // '@'
 566:main.c        **** 
 567:main.c        **** 	"1010",  // 'A'
 568:main.c        **** 	"1011",  // 'B'
 569:main.c        **** 	"1100",  // 'C'
 570:main.c        **** 	"1101",  // 'D'
 571:main.c        **** 	"1110",  // 'E'
 572:main.c        **** 	"1111"   // 'F'
 573:main.c        **** };
 574:main.c        **** 
 575:main.c        **** int main(int argc, char *argv[]) {
 2304              		.loc 1 575 34
 2305              		.cfi_startproc
 2306 1732 F30F1EFA 		endbr64
 2307 1736 55       		pushq	%rbp
 2308              		.cfi_def_cfa_offset 16
 2309              		.cfi_offset 6, -16
 2310 1737 4889E5   		movq	%rsp, %rbp
 2311              		.cfi_def_cfa_register 6
 2312 173a 53       		pushq	%rbx
 2313 173b 4881ECF8 		subq	$504, %rsp
 2313      010000
 2314              		.cfi_offset 3, -24
 2315 1742 89BD0CFE 		movl	%edi, -500(%rbp)
 2315      FFFF
 2316 1748 4889B500 		movq	%rsi, -512(%rbp)
 2316      FEFFFF
 2317              		.loc 1 575 34
 2318 174f 64488B04 		movq	%fs:40, %rax
 2318      25280000 
 2318      00
 2319 1758 488945E8 		movq	%rax, -24(%rbp)
 2320 175c 31C0     		xorl	%eax, %eax
 576:main.c        **** 	ReturnCode retVal = FLP_SUCCESS, pStatus;
 2321              		.loc 1 576 13
 2322 175e C7851CFE 		movl	$0, -484(%rbp)
 2322      FFFF0000 
 2322      0000
 577:main.c        **** 	struct arg_str *ivpOpt = arg_str0("i", "ivp", "<VID:PID>", "            vendor ID and product ID (
 2323              		.loc 1 577 27
 2324 1768 488D0500 		leaq	.LC38(%rip), %rax
 2324      000000
 2325 176f 4889C1   		movq	%rax, %rcx
 2326 1772 488D0500 		leaq	.LC39(%rip), %rax
 2326      000000
 2327 1779 4889C2   		movq	%rax, %rdx
 2328 177c 488D0500 		leaq	.LC40(%rip), %rax
 2328      000000
 2329 1783 4889C6   		movq	%rax, %rsi
 2330 1786 488D0500 		leaq	.LC41(%rip), %rax
 2330      000000
 2331 178d 4889C7   		movq	%rax, %rdi
 2332 1790 E8000000 		call	arg_str0@PLT
 2332      00
 2333 1795 48898560 		movq	%rax, -416(%rbp)
 2333      FEFFFF
 578:main.c        **** 	struct arg_str *vpOpt = arg_str1("v", "vp", "<VID:PID[:DID]>", "       VID, PID and opt. dev ID (e
 2334              		.loc 1 578 26
 2335 179c 488D0500 		leaq	.LC42(%rip), %rax
 2335      000000
 2336 17a3 4889C1   		movq	%rax, %rcx
 2337 17a6 488D0500 		leaq	.LC43(%rip), %rax
 2337      000000
 2338 17ad 4889C2   		movq	%rax, %rdx
 2339 17b0 488D0500 		leaq	.LC44(%rip), %rax
 2339      000000
 2340 17b7 4889C6   		movq	%rax, %rsi
 2341 17ba 488D0500 		leaq	.LC45(%rip), %rax
 2341      000000
 2342 17c1 4889C7   		movq	%rax, %rdi
 2343 17c4 E8000000 		call	arg_str1@PLT
 2343      00
 2344 17c9 48898568 		movq	%rax, -408(%rbp)
 2344      FEFFFF
 579:main.c        **** 	struct arg_str *fwOpt = arg_str0("f", "fw", "<firmware.hex>", "        firmware to RAM-load (or us
 2345              		.loc 1 579 26
 2346 17d0 488D0500 		leaq	.LC46(%rip), %rax
 2346      000000
 2347 17d7 4889C1   		movq	%rax, %rcx
 2348 17da 488D0500 		leaq	.LC47(%rip), %rax
 2348      000000
 2349 17e1 4889C2   		movq	%rax, %rdx
 2350 17e4 488D0500 		leaq	.LC48(%rip), %rax
 2350      000000
 2351 17eb 4889C6   		movq	%rax, %rsi
 2352 17ee 488D0500 		leaq	.LC49(%rip), %rax
 2352      000000
 2353 17f5 4889C7   		movq	%rax, %rdi
 2354 17f8 E8000000 		call	arg_str0@PLT
 2354      00
 2355 17fd 48898570 		movq	%rax, -400(%rbp)
 2355      FEFFFF
 580:main.c        **** 	struct arg_str *portOpt = arg_str0("d", "ports", "<bitCfg[,bitCfg]*>", " read/write digital ports 
 2356              		.loc 1 580 28
 2357 1804 488D0500 		leaq	.LC50(%rip), %rax
 2357      000000
 2358 180b 4889C1   		movq	%rax, %rcx
 2359 180e 488D0500 		leaq	.LC51(%rip), %rax
 2359      000000
 2360 1815 4889C2   		movq	%rax, %rdx
 2361 1818 488D0500 		leaq	.LC52(%rip), %rax
 2361      000000
 2362 181f 4889C6   		movq	%rax, %rsi
 2363 1822 488D0500 		leaq	.LC53(%rip), %rax
 2363      000000
 2364 1829 4889C7   		movq	%rax, %rdi
 2365 182c E8000000 		call	arg_str0@PLT
 2365      00
 2366 1831 48898578 		movq	%rax, -392(%rbp)
 2366      FEFFFF
 581:main.c        **** 	struct arg_str *queryOpt = arg_str0("q", "query", "<jtagBits>", "         query the JTAG chain");
 2367              		.loc 1 581 29
 2368 1838 488D0500 		leaq	.LC54(%rip), %rax
 2368      000000
 2369 183f 4889C1   		movq	%rax, %rcx
 2370 1842 488D0500 		leaq	.LC55(%rip), %rax
 2370      000000
 2371 1849 4889C2   		movq	%rax, %rdx
 2372 184c 488D0500 		leaq	.LC56(%rip), %rax
 2372      000000
 2373 1853 4889C6   		movq	%rax, %rsi
 2374 1856 488D0500 		leaq	.LC57(%rip), %rax
 2374      000000
 2375 185d 4889C7   		movq	%rax, %rdi
 2376 1860 E8000000 		call	arg_str0@PLT
 2376      00
 2377 1865 48898580 		movq	%rax, -384(%rbp)
 2377      FEFFFF
 582:main.c        **** 	struct arg_str *progOpt = arg_str0("p", "program", "<config>", "         program a device");
 2378              		.loc 1 582 28
 2379 186c 488D0500 		leaq	.LC58(%rip), %rax
 2379      000000
 2380 1873 4889C1   		movq	%rax, %rcx
 2381 1876 488D0500 		leaq	.LC59(%rip), %rax
 2381      000000
 2382 187d 4889C2   		movq	%rax, %rdx
 2383 1880 488D0500 		leaq	.LC60(%rip), %rax
 2383      000000
 2384 1887 4889C6   		movq	%rax, %rsi
 2385 188a 488D0500 		leaq	.LC61(%rip), %rax
 2385      000000
 2386 1891 4889C7   		movq	%rax, %rdi
 2387 1894 E8000000 		call	arg_str0@PLT
 2387      00
 2388 1899 48898588 		movq	%rax, -376(%rbp)
 2388      FEFFFF
 583:main.c        **** 	struct arg_uint *conOpt = arg_uint0("c", "conduit", "<conduit>", "        which comm conduit to ch
 2389              		.loc 1 583 28
 2390 18a0 488D0500 		leaq	.LC62(%rip), %rax
 2390      000000
 2391 18a7 4889C1   		movq	%rax, %rcx
 2392 18aa 488D0500 		leaq	.LC63(%rip), %rax
 2392      000000
 2393 18b1 4889C2   		movq	%rax, %rdx
 2394 18b4 488D0500 		leaq	.LC64(%rip), %rax
 2394      000000
 2395 18bb 4889C6   		movq	%rax, %rsi
 2396 18be 488D0500 		leaq	.LC65(%rip), %rax
 2396      000000
 2397 18c5 4889C7   		movq	%rax, %rdi
 2398 18c8 E8000000 		call	arg_uint0@PLT
 2398      00
 2399 18cd 48898590 		movq	%rax, -368(%rbp)
 2399      FEFFFF
 584:main.c        **** 	struct arg_str *actOpt = arg_str0("a", "action", "<actionString>", "    a series of CommFPGA actio
 2400              		.loc 1 584 27
 2401 18d4 488D0500 		leaq	.LC66(%rip), %rax
 2401      000000
 2402 18db 4889C1   		movq	%rax, %rcx
 2403 18de 488D0500 		leaq	.LC67(%rip), %rax
 2403      000000
 2404 18e5 4889C2   		movq	%rax, %rdx
 2405 18e8 488D0500 		leaq	.LC68(%rip), %rax
 2405      000000
 2406 18ef 4889C6   		movq	%rax, %rsi
 2407 18f2 488D0500 		leaq	.LC69(%rip), %rax
 2407      000000
 2408 18f9 4889C7   		movq	%rax, %rdi
 2409 18fc E8000000 		call	arg_str0@PLT
 2409      00
 2410 1901 48898598 		movq	%rax, -360(%rbp)
 2410      FEFFFF
 585:main.c        **** 	struct arg_lit *shellOpt  = arg_lit0("s", "shell", "                    start up an interactive Co
 2411              		.loc 1 585 30
 2412 1908 488D0500 		leaq	.LC70(%rip), %rax
 2412      000000
 2413 190f 4889C2   		movq	%rax, %rdx
 2414 1912 488D0500 		leaq	.LC71(%rip), %rax
 2414      000000
 2415 1919 4889C6   		movq	%rax, %rsi
 2416 191c 488D0500 		leaq	.LC72(%rip), %rax
 2416      000000
 2417 1923 4889C7   		movq	%rax, %rdi
 2418 1926 E8000000 		call	arg_lit0@PLT
 2418      00
 2419 192b 488985A0 		movq	%rax, -352(%rbp)
 2419      FEFFFF
 586:main.c        **** 	struct arg_lit *benOpt  = arg_lit0("b", "benchmark", "                enable benchmarking & checks
 2420              		.loc 1 586 28
 2421 1932 488D0500 		leaq	.LC73(%rip), %rax
 2421      000000
 2422 1939 4889C2   		movq	%rax, %rdx
 2423 193c 488D0500 		leaq	.LC74(%rip), %rax
 2423      000000
 2424 1943 4889C6   		movq	%rax, %rsi
 2425 1946 488D0500 		leaq	.LC75(%rip), %rax
 2425      000000
 2426 194d 4889C7   		movq	%rax, %rdi
 2427 1950 E8000000 		call	arg_lit0@PLT
 2427      00
 2428 1955 488985A8 		movq	%rax, -344(%rbp)
 2428      FEFFFF
 587:main.c        **** 	struct arg_lit *rstOpt  = arg_lit0("r", "reset", "                    reset the bulk endpoints");
 2429              		.loc 1 587 28
 2430 195c 488D0500 		leaq	.LC76(%rip), %rax
 2430      000000
 2431 1963 4889C2   		movq	%rax, %rdx
 2432 1966 488D0500 		leaq	.LC77(%rip), %rax
 2432      000000
 2433 196d 4889C6   		movq	%rax, %rsi
 2434 1970 488D0500 		leaq	.LC78(%rip), %rax
 2434      000000
 2435 1977 4889C7   		movq	%rax, %rdi
 2436 197a E8000000 		call	arg_lit0@PLT
 2436      00
 2437 197f 488985B0 		movq	%rax, -336(%rbp)
 2437      FEFFFF
 588:main.c        **** 	struct arg_str *dumpOpt = arg_str0("l", "dumploop", "<ch:file.bin>", "   write data from channel c
 2438              		.loc 1 588 28
 2439 1986 488D0500 		leaq	.LC79(%rip), %rax
 2439      000000
 2440 198d 4889C1   		movq	%rax, %rcx
 2441 1990 488D0500 		leaq	.LC80(%rip), %rax
 2441      000000
 2442 1997 4889C2   		movq	%rax, %rdx
 2443 199a 488D0500 		leaq	.LC81(%rip), %rax
 2443      000000
 2444 19a1 4889C6   		movq	%rax, %rsi
 2445 19a4 488D0500 		leaq	.LC82(%rip), %rax
 2445      000000
 2446 19ab 4889C7   		movq	%rax, %rdi
 2447 19ae E8000000 		call	arg_str0@PLT
 2447      00
 2448 19b3 488985B8 		movq	%rax, -328(%rbp)
 2448      FEFFFF
 589:main.c        **** 	struct arg_lit *helpOpt  = arg_lit0("h", "help", "                     print this help and exit");
 2449              		.loc 1 589 29
 2450 19ba 488D0500 		leaq	.LC83(%rip), %rax
 2450      000000
 2451 19c1 4889C2   		movq	%rax, %rdx
 2452 19c4 488D0500 		leaq	.LC84(%rip), %rax
 2452      000000
 2453 19cb 4889C6   		movq	%rax, %rsi
 2454 19ce 488D0500 		leaq	.LC85(%rip), %rax
 2454      000000
 2455 19d5 4889C7   		movq	%rax, %rdi
 2456 19d8 E8000000 		call	arg_lit0@PLT
 2456      00
 2457 19dd 488985C0 		movq	%rax, -320(%rbp)
 2457      FEFFFF
 590:main.c        **** 	struct arg_str *eepromOpt  = arg_str0(NULL, "eeprom", "<std|fw.hex|fw.iic>", "   write firmware to
 2458              		.loc 1 590 31
 2459 19e4 488D0500 		leaq	.LC86(%rip), %rax
 2459      000000
 2460 19eb 4889C1   		movq	%rax, %rcx
 2461 19ee 488D0500 		leaq	.LC87(%rip), %rax
 2461      000000
 2462 19f5 4889C2   		movq	%rax, %rdx
 2463 19f8 488D0500 		leaq	.LC88(%rip), %rax
 2463      000000
 2464 19ff 4889C6   		movq	%rax, %rsi
 2465 1a02 BF000000 		movl	$0, %edi
 2465      00
 2466 1a07 E8000000 		call	arg_str0@PLT
 2466      00
 2467 1a0c 488985C8 		movq	%rax, -312(%rbp)
 2467      FEFFFF
 591:main.c        **** 	struct arg_str *backupOpt  = arg_str0(NULL, "backup", "<kbitSize:fw.iic>", "     backup FX2's EEPR
 2468              		.loc 1 591 31
 2469 1a13 488D0500 		leaq	.LC89(%rip), %rax
 2469      000000
 2470 1a1a 4889C1   		movq	%rax, %rcx
 2471 1a1d 488D0500 		leaq	.LC90(%rip), %rax
 2471      000000
 2472 1a24 4889C2   		movq	%rax, %rdx
 2473 1a27 488D0500 		leaq	.LC91(%rip), %rax
 2473      000000
 2474 1a2e 4889C6   		movq	%rax, %rsi
 2475 1a31 BF000000 		movl	$0, %edi
 2475      00
 2476 1a36 E8000000 		call	arg_str0@PLT
 2476      00
 2477 1a3b 488985D0 		movq	%rax, -304(%rbp)
 2477      FEFFFF
 592:main.c        **** 	struct arg_end *endOpt   = arg_end(20);
 2478              		.loc 1 592 29
 2479 1a42 BF140000 		movl	$20, %edi
 2479      00
 2480 1a47 E8000000 		call	arg_end@PLT
 2480      00
 2481 1a4c 488985D8 		movq	%rax, -296(%rbp)
 2481      FEFFFF
 593:main.c        **** 	void *argTable[] = {
 2482              		.loc 1 593 8
 2483 1a53 488B8560 		movq	-416(%rbp), %rax
 2483      FEFFFF
 2484 1a5a 48898550 		movq	%rax, -176(%rbp)
 2484      FFFFFF
 2485 1a61 488B8568 		movq	-408(%rbp), %rax
 2485      FEFFFF
 2486 1a68 48898558 		movq	%rax, -168(%rbp)
 2486      FFFFFF
 2487 1a6f 488B8570 		movq	-400(%rbp), %rax
 2487      FEFFFF
 2488 1a76 48898560 		movq	%rax, -160(%rbp)
 2488      FFFFFF
 2489 1a7d 488B8578 		movq	-392(%rbp), %rax
 2489      FEFFFF
 2490 1a84 48898568 		movq	%rax, -152(%rbp)
 2490      FFFFFF
 2491 1a8b 488B8580 		movq	-384(%rbp), %rax
 2491      FEFFFF
 2492 1a92 48898570 		movq	%rax, -144(%rbp)
 2492      FFFFFF
 2493 1a99 488B8588 		movq	-376(%rbp), %rax
 2493      FEFFFF
 2494 1aa0 48898578 		movq	%rax, -136(%rbp)
 2494      FFFFFF
 2495 1aa7 488B8590 		movq	-368(%rbp), %rax
 2495      FEFFFF
 2496 1aae 48894580 		movq	%rax, -128(%rbp)
 2497 1ab2 488B8598 		movq	-360(%rbp), %rax
 2497      FEFFFF
 2498 1ab9 48894588 		movq	%rax, -120(%rbp)
 2499 1abd 488B85A0 		movq	-352(%rbp), %rax
 2499      FEFFFF
 2500 1ac4 48894590 		movq	%rax, -112(%rbp)
 2501 1ac8 488B85A8 		movq	-344(%rbp), %rax
 2501      FEFFFF
 2502 1acf 48894598 		movq	%rax, -104(%rbp)
 2503 1ad3 488B85B0 		movq	-336(%rbp), %rax
 2503      FEFFFF
 2504 1ada 488945A0 		movq	%rax, -96(%rbp)
 2505 1ade 488B85B8 		movq	-328(%rbp), %rax
 2505      FEFFFF
 2506 1ae5 488945A8 		movq	%rax, -88(%rbp)
 2507 1ae9 488B85C0 		movq	-320(%rbp), %rax
 2507      FEFFFF
 2508 1af0 488945B0 		movq	%rax, -80(%rbp)
 2509 1af4 488B85C8 		movq	-312(%rbp), %rax
 2509      FEFFFF
 2510 1afb 488945B8 		movq	%rax, -72(%rbp)
 2511 1aff 488B85D0 		movq	-304(%rbp), %rax
 2511      FEFFFF
 2512 1b06 488945C0 		movq	%rax, -64(%rbp)
 2513 1b0a 488B85D8 		movq	-296(%rbp), %rax
 2513      FEFFFF
 2514 1b11 488945C8 		movq	%rax, -56(%rbp)
 594:main.c        **** 		ivpOpt, vpOpt, fwOpt, portOpt, queryOpt, progOpt, conOpt, actOpt,
 595:main.c        **** 		shellOpt, benOpt, rstOpt, dumpOpt, helpOpt, eepromOpt, backupOpt, endOpt
 596:main.c        **** 	};
 597:main.c        **** 	const char *progName = "flcli";
 2515              		.loc 1 597 14
 2516 1b15 488D0500 		leaq	.LC92(%rip), %rax
 2516      000000
 2517 1b1c 488985E0 		movq	%rax, -288(%rbp)
 2517      FEFFFF
 598:main.c        **** 	int numErrors;
 599:main.c        **** 	struct FLContext *handle = NULL;
 2518              		.loc 1 599 20
 2519 1b23 48C78538 		movq	$0, -456(%rbp)
 2519      FEFFFF00 
 2519      000000
 600:main.c        **** 	FLStatus fStatus;
 601:main.c        **** 	const char *error = NULL;
 2520              		.loc 1 601 14
 2521 1b2e 48C78540 		movq	$0, -448(%rbp)
 2521      FEFFFF00 
 2521      000000
 602:main.c        **** 	const char *ivp = NULL;
 2522              		.loc 1 602 14
 2523 1b39 48C785E8 		movq	$0, -280(%rbp)
 2523      FEFFFF00 
 2523      000000
 603:main.c        **** 	const char *vp = NULL;
 2524              		.loc 1 603 14
 2525 1b44 48C785F0 		movq	$0, -272(%rbp)
 2525      FEFFFF00 
 2525      000000
 604:main.c        **** 	bool isNeroCapable, isCommCapable;
 605:main.c        **** 	uint32 numDevices, scanChain[16], i;
 606:main.c        **** 	const char *line = NULL;
 2526              		.loc 1 606 14
 2527 1b4f 48C78558 		movq	$0, -424(%rbp)
 2527      FEFFFF00 
 2527      000000
 607:main.c        **** 	uint8 conduit = 0x01;
 2528              		.loc 1 607 8
 2529 1b5a C68511FE 		movb	$1, -495(%rbp)
 2529      FFFF01
 608:main.c        **** 
 609:main.c        **** 	if ( arg_nullcheck(argTable) != 0 ) {
 2530              		.loc 1 609 7
 2531 1b61 488D8550 		leaq	-176(%rbp), %rax
 2531      FFFFFF
 2532 1b68 4889C7   		movq	%rax, %rdi
 2533 1b6b E8000000 		call	arg_nullcheck@PLT
 2533      00
 2534              		.loc 1 609 5
 2535 1b70 85C0     		testl	%eax, %eax
 2536 1b72 7434     		je	.L128
 610:main.c        **** 		fprintf(stderr, "%s: insufficient memory\n", progName);
 2537              		.loc 1 610 3
 2538 1b74 488B0500 		movq	stderr(%rip), %rax
 2538      000000
 2539 1b7b 488B95E0 		movq	-288(%rbp), %rdx
 2539      FEFFFF
 2540 1b82 488D0D00 		leaq	.LC93(%rip), %rcx
 2540      000000
 2541 1b89 4889CE   		movq	%rcx, %rsi
 2542 1b8c 4889C7   		movq	%rax, %rdi
 2543 1b8f B8000000 		movl	$0, %eax
 2543      00
 2544 1b94 E8000000 		call	fprintf@PLT
 2544      00
 611:main.c        **** 		FAIL(1, cleanup);
 2545              		.loc 1 611 3
 2546 1b99 C7851CFE 		movl	$1, -484(%rbp)
 2546      FFFF0100 
 2546      0000
 2547 1ba3 E9271200 		jmp	.L129
 2547      00
 2548              	.L128:
 612:main.c        **** 	}
 613:main.c        **** 
 614:main.c        **** 	numErrors = arg_parse(argc, argv, argTable);
 2549              		.loc 1 614 14
 2550 1ba8 488D9550 		leaq	-176(%rbp), %rdx
 2550      FFFFFF
 2551 1baf 488B8D00 		movq	-512(%rbp), %rcx
 2551      FEFFFF
 2552 1bb6 8B850CFE 		movl	-500(%rbp), %eax
 2552      FFFF
 2553 1bbc 4889CE   		movq	%rcx, %rsi
 2554 1bbf 89C7     		movl	%eax, %edi
 2555 1bc1 E8000000 		call	arg_parse@PLT
 2555      00
 2556 1bc6 89852CFE 		movl	%eax, -468(%rbp)
 2556      FFFF
 615:main.c        **** 
 616:main.c        **** 	if ( helpOpt->count > 0 ) {
 2557              		.loc 1 616 14
 2558 1bcc 488B85C0 		movq	-320(%rbp), %rax
 2558      FEFFFF
 2559 1bd3 8B4060   		movl	96(%rax), %eax
 2560              		.loc 1 616 5
 2561 1bd6 85C0     		testl	%eax, %eax
 2562 1bd8 7E7C     		jle	.L130
 617:main.c        **** 		printf("FPGALink Command-Line Interface Copyright (C) 2012-2014 Chris McClelland\n\nUsage: %s", p
 2563              		.loc 1 617 3
 2564 1bda 488B85E0 		movq	-288(%rbp), %rax
 2564      FEFFFF
 2565 1be1 4889C6   		movq	%rax, %rsi
 2566 1be4 488D0500 		leaq	.LC94(%rip), %rax
 2566      000000
 2567 1beb 4889C7   		movq	%rax, %rdi
 2568 1bee B8000000 		movl	$0, %eax
 2568      00
 2569 1bf3 E8000000 		call	printf@PLT
 2569      00
 618:main.c        **** 		arg_print_syntax(stdout, argTable, "\n");
 2570              		.loc 1 618 3
 2571 1bf8 488B0500 		movq	stdout(%rip), %rax
 2571      000000
 2572 1bff 488D8D50 		leaq	-176(%rbp), %rcx
 2572      FFFFFF
 2573 1c06 488D1500 		leaq	.LC95(%rip), %rdx
 2573      000000
 2574 1c0d 4889CE   		movq	%rcx, %rsi
 2575 1c10 4889C7   		movq	%rax, %rdi
 2576 1c13 E8000000 		call	arg_print_syntax@PLT
 2576      00
 619:main.c        **** 		printf("\nInteract with an FPGALink device.\n\n");
 2577              		.loc 1 619 3
 2578 1c18 488D0500 		leaq	.LC96(%rip), %rax
 2578      000000
 2579 1c1f 4889C7   		movq	%rax, %rdi
 2580 1c22 E8000000 		call	puts@PLT
 2580      00
 620:main.c        **** 		arg_print_glossary(stdout, argTable,"  %-10s %s\n");
 2581              		.loc 1 620 3
 2582 1c27 488B0500 		movq	stdout(%rip), %rax
 2582      000000
 2583 1c2e 488D8D50 		leaq	-176(%rbp), %rcx
 2583      FFFFFF
 2584 1c35 488D1500 		leaq	.LC97(%rip), %rdx
 2584      000000
 2585 1c3c 4889CE   		movq	%rcx, %rsi
 2586 1c3f 4889C7   		movq	%rax, %rdi
 2587 1c42 E8000000 		call	arg_print_glossary@PLT
 2587      00
 621:main.c        **** 		FAIL(FLP_SUCCESS, cleanup);
 2588              		.loc 1 621 3
 2589 1c47 C7851CFE 		movl	$0, -484(%rbp)
 2589      FFFF0000 
 2589      0000
 2590 1c51 E9791100 		jmp	.L129
 2590      00
 2591              	.L130:
 622:main.c        **** 	}
 623:main.c        **** 
 624:main.c        **** 	if ( numErrors > 0 ) {
 2592              		.loc 1 624 5
 2593 1c56 83BD2CFE 		cmpl	$0, -468(%rbp)
 2593      FFFF00
 2594 1c5d 7E54     		jle	.L131
 625:main.c        **** 		arg_print_errors(stdout, endOpt, progName);
 2595              		.loc 1 625 3
 2596 1c5f 488B0500 		movq	stdout(%rip), %rax
 2596      000000
 2597 1c66 488B95E0 		movq	-288(%rbp), %rdx
 2597      FEFFFF
 2598 1c6d 488B8DD8 		movq	-296(%rbp), %rcx
 2598      FEFFFF
 2599 1c74 4889CE   		movq	%rcx, %rsi
 2600 1c77 4889C7   		movq	%rax, %rdi
 2601 1c7a E8000000 		call	arg_print_errors@PLT
 2601      00
 626:main.c        **** 		fprintf(stderr, "Try '%s --help' for more information.\n", progName);
 2602              		.loc 1 626 3
 2603 1c7f 488B0500 		movq	stderr(%rip), %rax
 2603      000000
 2604 1c86 488B95E0 		movq	-288(%rbp), %rdx
 2604      FEFFFF
 2605 1c8d 488D0D00 		leaq	.LC98(%rip), %rcx
 2605      000000
 2606 1c94 4889CE   		movq	%rcx, %rsi
 2607 1c97 4889C7   		movq	%rax, %rdi
 2608 1c9a B8000000 		movl	$0, %eax
 2608      00
 2609 1c9f E8000000 		call	fprintf@PLT
 2609      00
 627:main.c        **** 		FAIL(FLP_ARGS, cleanup);
 2610              		.loc 1 627 3
 2611 1ca4 C7851CFE 		movl	$12, -484(%rbp)
 2611      FFFF0C00 
 2611      0000
 2612 1cae E91C1100 		jmp	.L129
 2612      00
 2613              	.L131:
 628:main.c        **** 	}
 629:main.c        **** 
 630:main.c        **** 	fStatus = flInitialise(0, &error);
 2614              		.loc 1 630 12
 2615 1cb3 488D8540 		leaq	-448(%rbp), %rax
 2615      FEFFFF
 2616 1cba 4889C6   		movq	%rax, %rsi
 2617 1cbd BF000000 		movl	$0, %edi
 2617      00
 2618 1cc2 E8000000 		call	flInitialise@PLT
 2618      00
 2619 1cc7 898520FE 		movl	%eax, -480(%rbp)
 2619      FFFF
 631:main.c        **** 	CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 2620              		.loc 1 631 2
 2621 1ccd 83BD20FE 		cmpl	$0, -480(%rbp)
 2621      FFFF00
 2622 1cd4 740F     		je	.L132
 2623              		.loc 1 631 2 is_stmt 0 discriminator 1
 2624 1cd6 C7851CFE 		movl	$1, -484(%rbp)
 2624      FFFF0100 
 2624      0000
 2625 1ce0 E9EA1000 		jmp	.L129
 2625      00
 2626              	.L132:
 632:main.c        **** 
 633:main.c        **** 	vp = vpOpt->sval[0];
 2627              		.loc 1 633 12 is_stmt 1
 2628 1ce5 488B8568 		movq	-408(%rbp), %rax
 2628      FEFFFF
 2629 1cec 488B4068 		movq	104(%rax), %rax
 2630              		.loc 1 633 5
 2631 1cf0 488B00   		movq	(%rax), %rax
 2632 1cf3 488985F0 		movq	%rax, -272(%rbp)
 2632      FEFFFF
 634:main.c        **** 
 635:main.c        **** 	printf("Attempting to open connection to FPGALink device %s...\n", vp);
 2633              		.loc 1 635 2
 2634 1cfa 488B85F0 		movq	-272(%rbp), %rax
 2634      FEFFFF
 2635 1d01 4889C6   		movq	%rax, %rsi
 2636 1d04 488D0500 		leaq	.LC99(%rip), %rax
 2636      000000
 2637 1d0b 4889C7   		movq	%rax, %rdi
 2638 1d0e B8000000 		movl	$0, %eax
 2638      00
 2639 1d13 E8000000 		call	printf@PLT
 2639      00
 636:main.c        **** 	fStatus = flOpen(vp, &handle, NULL);
 2640              		.loc 1 636 12
 2641 1d18 488D8D38 		leaq	-456(%rbp), %rcx
 2641      FEFFFF
 2642 1d1f 488B85F0 		movq	-272(%rbp), %rax
 2642      FEFFFF
 2643 1d26 BA000000 		movl	$0, %edx
 2643      00
 2644 1d2b 4889CE   		movq	%rcx, %rsi
 2645 1d2e 4889C7   		movq	%rax, %rdi
 2646 1d31 E8000000 		call	flOpen@PLT
 2646      00
 2647 1d36 898520FE 		movl	%eax, -480(%rbp)
 2647      FFFF
 637:main.c        **** 	if ( fStatus ) {
 2648              		.loc 1 637 5
 2649 1d3c 83BD20FE 		cmpl	$0, -480(%rbp)
 2649      FFFF00
 2650 1d43 0F843D02 		je	.L133
 2650      0000
 638:main.c        **** 		if ( ivpOpt->count ) {
 2651              		.loc 1 638 14
 2652 1d49 488B8560 		movq	-416(%rbp), %rax
 2652      FEFFFF
 2653 1d50 8B4060   		movl	96(%rax), %eax
 2654              		.loc 1 638 6
 2655 1d53 85C0     		testl	%eax, %eax
 2656 1d55 0F84F701 		je	.L134
 2656      0000
 2657              	.LBB14:
 639:main.c        **** 			int count = 60;
 2658              		.loc 1 639 8
 2659 1d5b C78528FE 		movl	$60, -472(%rbp)
 2659      FFFF3C00 
 2659      0000
 640:main.c        **** 			uint8 flag;
 641:main.c        **** 			ivp = ivpOpt->sval[0];
 2660              		.loc 1 641 16
 2661 1d65 488B8560 		movq	-416(%rbp), %rax
 2661      FEFFFF
 2662 1d6c 488B4068 		movq	104(%rax), %rax
 2663              		.loc 1 641 8
 2664 1d70 488B00   		movq	(%rax), %rax
 2665 1d73 488985E8 		movq	%rax, -280(%rbp)
 2665      FEFFFF
 642:main.c        **** 			printf("Loading firmware into %s...\n", ivp);
 2666              		.loc 1 642 4
 2667 1d7a 488B85E8 		movq	-280(%rbp), %rax
 2667      FEFFFF
 2668 1d81 4889C6   		movq	%rax, %rsi
 2669 1d84 488D0500 		leaq	.LC100(%rip), %rax
 2669      000000
 2670 1d8b 4889C7   		movq	%rax, %rdi
 2671 1d8e B8000000 		movl	$0, %eax
 2671      00
 2672 1d93 E8000000 		call	printf@PLT
 2672      00
 643:main.c        **** 			if ( fwOpt->count ) {
 2673              		.loc 1 643 14
 2674 1d98 488B8570 		movq	-400(%rbp), %rax
 2674      FEFFFF
 2675 1d9f 8B4060   		movl	96(%rax), %eax
 2676              		.loc 1 643 7
 2677 1da2 85C0     		testl	%eax, %eax
 2678 1da4 742F     		je	.L135
 644:main.c        **** 				fStatus = flLoadCustomFirmware(ivp, fwOpt->sval[0], &error);
 2679              		.loc 1 644 46
 2680 1da6 488B8570 		movq	-400(%rbp), %rax
 2680      FEFFFF
 2681 1dad 488B4068 		movq	104(%rax), %rax
 2682              		.loc 1 644 15
 2683 1db1 488B08   		movq	(%rax), %rcx
 2684 1db4 488D9540 		leaq	-448(%rbp), %rdx
 2684      FEFFFF
 2685 1dbb 488B85E8 		movq	-280(%rbp), %rax
 2685      FEFFFF
 2686 1dc2 4889CE   		movq	%rcx, %rsi
 2687 1dc5 4889C7   		movq	%rax, %rdi
 2688 1dc8 E8000000 		call	flLoadCustomFirmware@PLT
 2688      00
 2689 1dcd 898520FE 		movl	%eax, -480(%rbp)
 2689      FFFF
 2690 1dd3 EB26     		jmp	.L136
 2691              	.L135:
 645:main.c        **** 			} else {
 646:main.c        **** 				fStatus = flLoadStandardFirmware(ivp, vp, &error);
 2692              		.loc 1 646 15
 2693 1dd5 488D9540 		leaq	-448(%rbp), %rdx
 2693      FEFFFF
 2694 1ddc 488B8DF0 		movq	-272(%rbp), %rcx
 2694      FEFFFF
 2695 1de3 488B85E8 		movq	-280(%rbp), %rax
 2695      FEFFFF
 2696 1dea 4889CE   		movq	%rcx, %rsi
 2697 1ded 4889C7   		movq	%rax, %rdi
 2698 1df0 E8000000 		call	flLoadStandardFirmware@PLT
 2698      00
 2699 1df5 898520FE 		movl	%eax, -480(%rbp)
 2699      FFFF
 2700              	.L136:
 647:main.c        **** 			}
 648:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 2701              		.loc 1 648 4
 2702 1dfb 83BD20FE 		cmpl	$0, -480(%rbp)
 2702      FFFF00
 2703 1e02 740F     		je	.L137
 2704              		.loc 1 648 4 is_stmt 0 discriminator 1
 2705 1e04 C7851CFE 		movl	$1, -484(%rbp)
 2705      FFFF0100 
 2705      0000
 2706 1e0e E9BC0F00 		jmp	.L129
 2706      00
 2707              	.L137:
 649:main.c        **** 			
 650:main.c        **** 			printf("Awaiting renumeration");
 2708              		.loc 1 650 4 is_stmt 1
 2709 1e13 488D0500 		leaq	.LC101(%rip), %rax
 2709      000000
 2710 1e1a 4889C7   		movq	%rax, %rdi
 2711 1e1d B8000000 		movl	$0, %eax
 2711      00
 2712 1e22 E8000000 		call	printf@PLT
 2712      00
 651:main.c        **** 			flSleep(1000);
 2713              		.loc 1 651 4
 2714 1e27 BFE80300 		movl	$1000, %edi
 2714      00
 2715 1e2c E8000000 		call	flSleep@PLT
 2715      00
 2716              	.L141:
 652:main.c        **** 			do {
 653:main.c        **** 				printf(".");
 2717              		.loc 1 653 5
 2718 1e31 BF2E0000 		movl	$46, %edi
 2718      00
 2719 1e36 E8000000 		call	putchar@PLT
 2719      00
 654:main.c        **** 				fflush(stdout);
 2720              		.loc 1 654 5
 2721 1e3b 488B0500 		movq	stdout(%rip), %rax
 2721      000000
 2722 1e42 4889C7   		movq	%rax, %rdi
 2723 1e45 E8000000 		call	fflush@PLT
 2723      00
 655:main.c        **** 				fStatus = flIsDeviceAvailable(vp, &flag, &error);
 2724              		.loc 1 655 15
 2725 1e4a 488D9540 		leaq	-448(%rbp), %rdx
 2725      FEFFFF
 2726 1e51 488D8D50 		leaq	-432(%rbp), %rcx
 2726      FEFFFF
 2727 1e58 488B85F0 		movq	-272(%rbp), %rax
 2727      FEFFFF
 2728 1e5f 4889CE   		movq	%rcx, %rsi
 2729 1e62 4889C7   		movq	%rax, %rdi
 2730 1e65 E8000000 		call	flIsDeviceAvailable@PLT
 2730      00
 2731 1e6a 898520FE 		movl	%eax, -480(%rbp)
 2731      FFFF
 656:main.c        **** 				CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 2732              		.loc 1 656 5
 2733 1e70 83BD20FE 		cmpl	$0, -480(%rbp)
 2733      FFFF00
 2734 1e77 740F     		je	.L139
 2735              		.loc 1 656 5 is_stmt 0 discriminator 1
 2736 1e79 C7851CFE 		movl	$1, -484(%rbp)
 2736      FFFF0100 
 2736      0000
 2737 1e83 E9470F00 		jmp	.L129
 2737      00
 2738              	.L139:
 657:main.c        **** 				flSleep(250);
 2739              		.loc 1 657 5 is_stmt 1
 2740 1e88 BFFA0000 		movl	$250, %edi
 2740      00
 2741 1e8d E8000000 		call	flSleep@PLT
 2741      00
 658:main.c        **** 				count--;
 2742              		.loc 1 658 10
 2743 1e92 83AD28FE 		subl	$1, -472(%rbp)
 2743      FFFF01
 659:main.c        **** 			} while ( !flag && count );
 2744              		.loc 1 659 14
 2745 1e99 0FB68550 		movzbl	-432(%rbp), %eax
 2745      FEFFFF
 2746              		.loc 1 659 20
 2747 1ea0 84C0     		testb	%al, %al
 2748 1ea2 7509     		jne	.L140
 2749              		.loc 1 659 20 is_stmt 0 discriminator 1
 2750 1ea4 83BD28FE 		cmpl	$0, -472(%rbp)
 2750      FFFF00
 2751 1eab 7584     		jne	.L141
 2752              	.L140:
 660:main.c        **** 			printf("\n");
 2753              		.loc 1 660 4 is_stmt 1
 2754 1ead BF0A0000 		movl	$10, %edi
 2754      00
 2755 1eb2 E8000000 		call	putchar@PLT
 2755      00
 661:main.c        **** 			if ( !flag ) {
 2756              		.loc 1 661 9
 2757 1eb7 0FB68550 		movzbl	-432(%rbp), %eax
 2757      FEFFFF
 2758              		.loc 1 661 7
 2759 1ebe 84C0     		testb	%al, %al
 2760 1ec0 7534     		jne	.L142
 662:main.c        **** 				fprintf(stderr, "FPGALink device did not renumerate properly as %s\n", vp);
 2761              		.loc 1 662 5
 2762 1ec2 488B0500 		movq	stderr(%rip), %rax
 2762      000000
 2763 1ec9 488B95F0 		movq	-272(%rbp), %rdx
 2763      FEFFFF
 2764 1ed0 488D0D00 		leaq	.LC102(%rip), %rcx
 2764      000000
 2765 1ed7 4889CE   		movq	%rcx, %rsi
 2766 1eda 4889C7   		movq	%rax, %rdi
 2767 1edd B8000000 		movl	$0, %eax
 2767      00
 2768 1ee2 E8000000 		call	fprintf@PLT
 2768      00
 663:main.c        **** 				FAIL(FLP_LIBERR, cleanup);
 2769              		.loc 1 663 5
 2770 1ee7 C7851CFE 		movl	$1, -484(%rbp)
 2770      FFFF0100 
 2770      0000
 2771 1ef1 E9D90E00 		jmp	.L129
 2771      00
 2772              	.L142:
 664:main.c        **** 			}
 665:main.c        **** 
 666:main.c        **** 			printf("Attempting to open connection to FPGLink device %s again...\n", vp);
 2773              		.loc 1 666 4
 2774 1ef6 488B85F0 		movq	-272(%rbp), %rax
 2774      FEFFFF
 2775 1efd 4889C6   		movq	%rax, %rsi
 2776 1f00 488D0500 		leaq	.LC103(%rip), %rax
 2776      000000
 2777 1f07 4889C7   		movq	%rax, %rdi
 2778 1f0a B8000000 		movl	$0, %eax
 2778      00
 2779 1f0f E8000000 		call	printf@PLT
 2779      00
 667:main.c        **** 			fStatus = flOpen(vp, &handle, &error);
 2780              		.loc 1 667 14
 2781 1f14 488D9540 		leaq	-448(%rbp), %rdx
 2781      FEFFFF
 2782 1f1b 488D8D38 		leaq	-456(%rbp), %rcx
 2782      FEFFFF
 2783 1f22 488B85F0 		movq	-272(%rbp), %rax
 2783      FEFFFF
 2784 1f29 4889CE   		movq	%rcx, %rsi
 2785 1f2c 4889C7   		movq	%rax, %rdi
 2786 1f2f E8000000 		call	flOpen@PLT
 2786      00
 2787 1f34 898520FE 		movl	%eax, -480(%rbp)
 2787      FFFF
 668:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 2788              		.loc 1 668 4
 2789 1f3a 83BD20FE 		cmpl	$0, -480(%rbp)
 2789      FFFF00
 2790 1f41 7443     		je	.L133
 2791              		.loc 1 668 4 is_stmt 0 discriminator 1
 2792 1f43 C7851CFE 		movl	$1, -484(%rbp)
 2792      FFFF0100 
 2792      0000
 2793 1f4d E97D0E00 		jmp	.L129
 2793      00
 2794              	.L134:
 2795              	.LBE14:
 669:main.c        **** 		} else {
 670:main.c        **** 			fprintf(stderr, "Could not open FPGALink device at %s and no initial VID:PID was supplied\n", vp
 2796              		.loc 1 670 4 is_stmt 1
 2797 1f52 488B0500 		movq	stderr(%rip), %rax
 2797      000000
 2798 1f59 488B95F0 		movq	-272(%rbp), %rdx
 2798      FEFFFF
 2799 1f60 488D0D00 		leaq	.LC104(%rip), %rcx
 2799      000000
 2800 1f67 4889CE   		movq	%rcx, %rsi
 2801 1f6a 4889C7   		movq	%rax, %rdi
 2802 1f6d B8000000 		movl	$0, %eax
 2802      00
 2803 1f72 E8000000 		call	fprintf@PLT
 2803      00
 671:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 2804              		.loc 1 671 4
 2805 1f77 C7851CFE 		movl	$12, -484(%rbp)
 2805      FFFF0C00 
 2805      0000
 2806 1f81 E9490E00 		jmp	.L129
 2806      00
 2807              	.L133:
 672:main.c        **** 		}
 673:main.c        **** 	}
 674:main.c        **** 
 675:main.c        **** 	printf(
 2808              		.loc 1 675 2
 2809 1f86 488B8538 		movq	-456(%rbp), %rax
 2809      FEFFFF
 2810 1f8d 4889C7   		movq	%rax, %rdi
 2811 1f90 E8000000 		call	flGetFirmwareVersion@PLT
 2811      00
 2812 1f95 89C3     		movl	%eax, %ebx
 676:main.c        **** 		"Connected to FPGALink device %s (firmwareID: 0x%04X, firmwareVersion: 0x%08X)\n",
 677:main.c        **** 		vp, flGetFirmwareID(handle), flGetFirmwareVersion(handle)
 2813              		.loc 1 677 7
 2814 1f97 488B8538 		movq	-456(%rbp), %rax
 2814      FEFFFF
 2815 1f9e 4889C7   		movq	%rax, %rdi
 2816 1fa1 E8000000 		call	flGetFirmwareID@PLT
 2816      00
 675:main.c        **** 		"Connected to FPGALink device %s (firmwareID: 0x%04X, firmwareVersion: 0x%08X)\n",
 2817              		.loc 1 675 2
 2818 1fa6 0FB7D0   		movzwl	%ax, %edx
 2819 1fa9 488B85F0 		movq	-272(%rbp), %rax
 2819      FEFFFF
 2820 1fb0 89D9     		movl	%ebx, %ecx
 2821 1fb2 4889C6   		movq	%rax, %rsi
 2822 1fb5 488D0500 		leaq	.LC105(%rip), %rax
 2822      000000
 2823 1fbc 4889C7   		movq	%rax, %rdi
 2824 1fbf B8000000 		movl	$0, %eax
 2824      00
 2825 1fc4 E8000000 		call	printf@PLT
 2825      00
 678:main.c        **** 	);
 679:main.c        **** 
 680:main.c        **** 	if ( eepromOpt->count ) {
 2826              		.loc 1 680 16
 2827 1fc9 488B85C8 		movq	-312(%rbp), %rax
 2827      FEFFFF
 2828 1fd0 8B4060   		movl	96(%rax), %eax
 2829              		.loc 1 680 5
 2830 1fd3 85C0     		testl	%eax, %eax
 2831 1fd5 0F84C500 		je	.L144
 2831      0000
 681:main.c        **** 		if ( !strcmp("std", eepromOpt->sval[0]) ) {
 2832              		.loc 1 681 32
 2833 1fdb 488B85C8 		movq	-312(%rbp), %rax
 2833      FEFFFF
 2834 1fe2 488B4068 		movq	104(%rax), %rax
 2835              		.loc 1 681 9
 2836 1fe6 488B00   		movq	(%rax), %rax
 2837 1fe9 4889C6   		movq	%rax, %rsi
 2838 1fec 488D0500 		leaq	.LC106(%rip), %rax
 2838      000000
 2839 1ff3 4889C7   		movq	%rax, %rdi
 2840 1ff6 E8000000 		call	strcmp@PLT
 2840      00
 2841              		.loc 1 681 6
 2842 1ffb 85C0     		testl	%eax, %eax
 2843 1ffd 7537     		jne	.L145
 682:main.c        **** 			printf("Writing the standard FPGALink firmware to the FX2's EEPROM...\n");
 2844              		.loc 1 682 4
 2845 1fff 488D0500 		leaq	.LC107(%rip), %rax
 2845      000000
 2846 2006 4889C7   		movq	%rax, %rdi
 2847 2009 E8000000 		call	puts@PLT
 2847      00
 683:main.c        **** 			fStatus = flFlashStandardFirmware(handle, vp, &error);
 2848              		.loc 1 683 14
 2849 200e 488B8538 		movq	-456(%rbp), %rax
 2849      FEFFFF
 2850 2015 488D9540 		leaq	-448(%rbp), %rdx
 2850      FEFFFF
 2851 201c 488B8DF0 		movq	-272(%rbp), %rcx
 2851      FEFFFF
 2852 2023 4889CE   		movq	%rcx, %rsi
 2853 2026 4889C7   		movq	%rax, %rdi
 2854 2029 E8000000 		call	flFlashStandardFirmware@PLT
 2854      00
 2855 202e 898520FE 		movl	%eax, -480(%rbp)
 2855      FFFF
 2856 2034 EB52     		jmp	.L146
 2857              	.L145:
 684:main.c        **** 		} else {
 685:main.c        **** 			printf("Writing custom FPGALink firmware from %s to the FX2's EEPROM...\n", eepromOpt->sval[0]);
 2858              		.loc 1 685 89
 2859 2036 488B85C8 		movq	-312(%rbp), %rax
 2859      FEFFFF
 2860 203d 488B4068 		movq	104(%rax), %rax
 2861              		.loc 1 685 4
 2862 2041 488B00   		movq	(%rax), %rax
 2863 2044 4889C6   		movq	%rax, %rsi
 2864 2047 488D0500 		leaq	.LC108(%rip), %rax
 2864      000000
 2865 204e 4889C7   		movq	%rax, %rdi
 2866 2051 B8000000 		movl	$0, %eax
 2866      00
 2867 2056 E8000000 		call	printf@PLT
 2867      00
 686:main.c        **** 			fStatus = flFlashCustomFirmware(handle, eepromOpt->sval[0], &error);
 2868              		.loc 1 686 53
 2869 205b 488B85C8 		movq	-312(%rbp), %rax
 2869      FEFFFF
 2870 2062 488B4068 		movq	104(%rax), %rax
 2871              		.loc 1 686 14
 2872 2066 488B08   		movq	(%rax), %rcx
 2873 2069 488B8538 		movq	-456(%rbp), %rax
 2873      FEFFFF
 2874 2070 488D9540 		leaq	-448(%rbp), %rdx
 2874      FEFFFF
 2875 2077 4889CE   		movq	%rcx, %rsi
 2876 207a 4889C7   		movq	%rax, %rdi
 2877 207d E8000000 		call	flFlashCustomFirmware@PLT
 2877      00
 2878 2082 898520FE 		movl	%eax, -480(%rbp)
 2878      FFFF
 2879              	.L146:
 687:main.c        **** 		}
 688:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 2880              		.loc 1 688 3
 2881 2088 83BD20FE 		cmpl	$0, -480(%rbp)
 2881      FFFF00
 2882 208f 740F     		je	.L144
 2883              		.loc 1 688 3 is_stmt 0 discriminator 1
 2884 2091 C7851CFE 		movl	$1, -484(%rbp)
 2884      FFFF0100 
 2884      0000
 2885 209b E92F0D00 		jmp	.L129
 2885      00
 2886              	.L144:
 689:main.c        **** 	}
 690:main.c        **** 
 691:main.c        **** 	if ( backupOpt->count ) {
 2887              		.loc 1 691 16 is_stmt 1
 2888 20a0 488B85D0 		movq	-304(%rbp), %rax
 2888      FEFFFF
 2889 20a7 8B4060   		movl	96(%rax), %eax
 2890              		.loc 1 691 5
 2891 20aa 85C0     		testl	%eax, %eax
 2892 20ac 0F84E300 		je	.L147
 2892      0000
 2893              	.LBB15:
 692:main.c        **** 		const char *fileName;
 693:main.c        **** 		const uint32 kbitSize = strtoul(backupOpt->sval[0], (char**)&fileName, 0);
 2894              		.loc 1 693 44
 2895 20b2 488B85D0 		movq	-304(%rbp), %rax
 2895      FEFFFF
 2896 20b9 488B4068 		movq	104(%rax), %rax
 2897              		.loc 1 693 27
 2898 20bd 488B00   		movq	(%rax), %rax
 2899 20c0 488D8D50 		leaq	-432(%rbp), %rcx
 2899      FEFFFF
 2900 20c7 BA000000 		movl	$0, %edx
 2900      00
 2901 20cc 4889CE   		movq	%rcx, %rsi
 2902 20cf 4889C7   		movq	%rax, %rdi
 2903 20d2 E8000000 		call	strtoul@PLT
 2903      00
 2904              		.loc 1 693 16
 2905 20d7 898530FE 		movl	%eax, -464(%rbp)
 2905      FFFF
 694:main.c        **** 		if ( *fileName != ':' ) {
 2906              		.loc 1 694 8
 2907 20dd 488B8550 		movq	-432(%rbp), %rax
 2907      FEFFFF
 2908 20e4 0FB600   		movzbl	(%rax), %eax
 2909              		.loc 1 694 6
 2910 20e7 3C3A     		cmpb	$58, %al
 2911 20e9 7434     		je	.L148
 695:main.c        **** 			fprintf(stderr, "%s: invalid argument to option --backup=<kbitSize:fw.iic>\n", progName);
 2912              		.loc 1 695 4
 2913 20eb 488B0500 		movq	stderr(%rip), %rax
 2913      000000
 2914 20f2 488B95E0 		movq	-288(%rbp), %rdx
 2914      FEFFFF
 2915 20f9 488D0D00 		leaq	.LC109(%rip), %rcx
 2915      000000
 2916 2100 4889CE   		movq	%rcx, %rsi
 2917 2103 4889C7   		movq	%rax, %rdi
 2918 2106 B8000000 		movl	$0, %eax
 2918      00
 2919 210b E8000000 		call	fprintf@PLT
 2919      00
 696:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 2920              		.loc 1 696 4
 2921 2110 C7851CFE 		movl	$12, -484(%rbp)
 2921      FFFF0C00 
 2921      0000
 2922 211a E9B00C00 		jmp	.L129
 2922      00
 2923              	.L148:
 697:main.c        **** 		}
 698:main.c        **** 		fileName++;
 2924              		.loc 1 698 11
 2925 211f 488B8550 		movq	-432(%rbp), %rax
 2925      FEFFFF
 2926 2126 4883C001 		addq	$1, %rax
 2927 212a 48898550 		movq	%rax, -432(%rbp)
 2927      FEFFFF
 699:main.c        **** 		printf("Saving a backup of %d kbit from the FX2's EEPROM to %s...\n", kbitSize, fileName);
 2928              		.loc 1 699 3
 2929 2131 488B9550 		movq	-432(%rbp), %rdx
 2929      FEFFFF
 2930 2138 8B8530FE 		movl	-464(%rbp), %eax
 2930      FFFF
 2931 213e 89C6     		movl	%eax, %esi
 2932 2140 488D0500 		leaq	.LC110(%rip), %rax
 2932      000000
 2933 2147 4889C7   		movq	%rax, %rdi
 2934 214a B8000000 		movl	$0, %eax
 2934      00
 2935 214f E8000000 		call	printf@PLT
 2935      00
 700:main.c        **** 		fStatus = flSaveFirmware(handle, kbitSize, fileName, &error);
 2936              		.loc 1 700 13
 2937 2154 488B9550 		movq	-432(%rbp), %rdx
 2937      FEFFFF
 2938 215b 488B8538 		movq	-456(%rbp), %rax
 2938      FEFFFF
 2939 2162 488D8D40 		leaq	-448(%rbp), %rcx
 2939      FEFFFF
 2940 2169 8BB530FE 		movl	-464(%rbp), %esi
 2940      FFFF
 2941 216f 4889C7   		movq	%rax, %rdi
 2942 2172 E8000000 		call	flSaveFirmware@PLT
 2942      00
 2943 2177 898520FE 		movl	%eax, -480(%rbp)
 2943      FFFF
 701:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 2944              		.loc 1 701 3
 2945 217d 83BD20FE 		cmpl	$0, -480(%rbp)
 2945      FFFF00
 2946 2184 740F     		je	.L147
 2947              		.loc 1 701 3 is_stmt 0 discriminator 1
 2948 2186 C7851CFE 		movl	$1, -484(%rbp)
 2948      FFFF0100 
 2948      0000
 2949 2190 E93A0C00 		jmp	.L129
 2949      00
 2950              	.L147:
 2951              	.LBE15:
 702:main.c        **** 	}
 703:main.c        **** 
 704:main.c        **** 	if ( rstOpt->count ) {
 2952              		.loc 1 704 13 is_stmt 1
 2953 2195 488B85B0 		movq	-336(%rbp), %rax
 2953      FEFFFF
 2954 219c 8B4060   		movl	96(%rax), %eax
 2955              		.loc 1 704 5
 2956 219f 85C0     		testl	%eax, %eax
 2957 21a1 7437     		je	.L151
 705:main.c        **** 		// Reset the bulk endpoints (only needed in some virtualised environments)
 706:main.c        **** 		fStatus = flResetToggle(handle, &error);
 2958              		.loc 1 706 13
 2959 21a3 488B8538 		movq	-456(%rbp), %rax
 2959      FEFFFF
 2960 21aa 488D9540 		leaq	-448(%rbp), %rdx
 2960      FEFFFF
 2961 21b1 4889D6   		movq	%rdx, %rsi
 2962 21b4 4889C7   		movq	%rax, %rdi
 2963 21b7 E8000000 		call	flResetToggle@PLT
 2963      00
 2964 21bc 898520FE 		movl	%eax, -480(%rbp)
 2964      FFFF
 707:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 2965              		.loc 1 707 3
 2966 21c2 83BD20FE 		cmpl	$0, -480(%rbp)
 2966      FFFF00
 2967 21c9 740F     		je	.L151
 2968              		.loc 1 707 3 is_stmt 0 discriminator 1
 2969 21cb C7851CFE 		movl	$1, -484(%rbp)
 2969      FFFF0100 
 2969      0000
 2970 21d5 E9F50B00 		jmp	.L129
 2970      00
 2971              	.L151:
 708:main.c        **** 	}
 709:main.c        **** 
 710:main.c        **** 	if ( conOpt->count ) {
 2972              		.loc 1 710 13 is_stmt 1
 2973 21da 488B8590 		movq	-368(%rbp), %rax
 2973      FEFFFF
 2974 21e1 8B4060   		movl	96(%rax), %eax
 2975              		.loc 1 710 5
 2976 21e4 85C0     		testl	%eax, %eax
 2977 21e6 7413     		je	.L152
 711:main.c        **** 		conduit = (uint8)conOpt->ival[0];
 2978              		.loc 1 711 26
 2979 21e8 488B8590 		movq	-368(%rbp), %rax
 2979      FEFFFF
 2980 21ef 488B4068 		movq	104(%rax), %rax
 2981              		.loc 1 711 32
 2982 21f3 8B00     		movl	(%rax), %eax
 2983              		.loc 1 711 11
 2984 21f5 888511FE 		movb	%al, -495(%rbp)
 2984      FFFF
 2985              	.L152:
 712:main.c        **** 	}
 713:main.c        **** 
 714:main.c        **** 	isNeroCapable = flIsNeroCapable(handle);
 2986              		.loc 1 714 18
 2987 21fb 488B8538 		movq	-456(%rbp), %rax
 2987      FEFFFF
 2988 2202 4889C7   		movq	%rax, %rdi
 2989 2205 E8000000 		call	flIsNeroCapable@PLT
 2989      00
 2990              		.loc 1 714 16
 2991 220a 84C0     		testb	%al, %al
 2992 220c 0F95C0   		setne	%al
 2993 220f 888512FE 		movb	%al, -494(%rbp)
 2993      FFFF
 715:main.c        **** 	isCommCapable = flIsCommCapable(handle, conduit);
 2994              		.loc 1 715 18
 2995 2215 0FB69511 		movzbl	-495(%rbp), %edx
 2995      FEFFFF
 2996 221c 488B8538 		movq	-456(%rbp), %rax
 2996      FEFFFF
 2997 2223 89D6     		movl	%edx, %esi
 2998 2225 4889C7   		movq	%rax, %rdi
 2999 2228 E8000000 		call	flIsCommCapable@PLT
 2999      00
 3000              		.loc 1 715 16
 3001 222d 84C0     		testb	%al, %al
 3002 222f 0F95C0   		setne	%al
 3003 2232 888513FE 		movb	%al, -493(%rbp)
 3003      FFFF
 716:main.c        **** 
 717:main.c        **** 	if ( portOpt->count ) {
 3004              		.loc 1 717 14
 3005 2238 488B8578 		movq	-392(%rbp), %rax
 3005      FEFFFF
 3006 223f 8B4060   		movl	96(%rax), %eax
 3007              		.loc 1 717 5
 3008 2242 85C0     		testl	%eax, %eax
 3009 2244 0F84C602 		je	.L153
 3009      0000
 3010              	.LBB16:
 718:main.c        **** 		uint32 readState;
 719:main.c        **** 		char hex[9];
 720:main.c        **** 		const uint8 *p = (const uint8 *)hex;
 3011              		.loc 1 720 16
 3012 224a 488D45DF 		leaq	-33(%rbp), %rax
 3013 224e 488985F8 		movq	%rax, -264(%rbp)
 3013      FEFFFF
 721:main.c        **** 		printf("Configuring ports...\n");
 3014              		.loc 1 721 3
 3015 2255 488D0500 		leaq	.LC111(%rip), %rax
 3015      000000
 3016 225c 4889C7   		movq	%rax, %rdi
 3017 225f E8000000 		call	puts@PLT
 3017      00
 722:main.c        **** 		fStatus = flMultiBitPortAccess(handle, portOpt->sval[0], &readState, &error);
 3018              		.loc 1 722 49
 3019 2264 488B8578 		movq	-392(%rbp), %rax
 3019      FEFFFF
 3020 226b 488B4068 		movq	104(%rax), %rax
 3021              		.loc 1 722 13
 3022 226f 488B30   		movq	(%rax), %rsi
 3023 2272 488B8538 		movq	-456(%rbp), %rax
 3023      FEFFFF
 3024 2279 488D8D40 		leaq	-448(%rbp), %rcx
 3024      FEFFFF
 3025 2280 488D9550 		leaq	-432(%rbp), %rdx
 3025      FEFFFF
 3026 2287 4889C7   		movq	%rax, %rdi
 3027 228a E8000000 		call	flMultiBitPortAccess@PLT
 3027      00
 3028 228f 898520FE 		movl	%eax, -480(%rbp)
 3028      FFFF
 723:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3029              		.loc 1 723 3
 3030 2295 83BD20FE 		cmpl	$0, -480(%rbp)
 3030      FFFF00
 3031 229c 740F     		je	.L154
 3032              		.loc 1 723 3 is_stmt 0 discriminator 1
 3033 229e C7851CFE 		movl	$1, -484(%rbp)
 3033      FFFF0100 
 3033      0000
 3034 22a8 E9220B00 		jmp	.L129
 3034      00
 3035              	.L154:
 724:main.c        **** 		sprintf(hex, "%08X", readState);
 3036              		.loc 1 724 3 is_stmt 1
 3037 22ad 8B9550FE 		movl	-432(%rbp), %edx
 3037      FFFF
 3038 22b3 488D45DF 		leaq	-33(%rbp), %rax
 3039 22b7 488D0D00 		leaq	.LC112(%rip), %rcx
 3039      000000
 3040 22be 4889CE   		movq	%rcx, %rsi
 3041 22c1 4889C7   		movq	%rax, %rdi
 3042 22c4 B8000000 		movl	$0, %eax
 3042      00
 3043 22c9 E8000000 		call	sprintf@PLT
 3043      00
 725:main.c        **** 		printf("Readback:   28   24   20   16    12    8    4    0\n          %s", nibbles[*p++ - '0']);
 3044              		.loc 1 725 88
 3045 22ce 488B85F8 		movq	-264(%rbp), %rax
 3045      FEFFFF
 3046 22d5 488D5001 		leaq	1(%rax), %rdx
 3047 22d9 488995F8 		movq	%rdx, -264(%rbp)
 3047      FEFFFF
 3048              		.loc 1 725 86
 3049 22e0 0FB600   		movzbl	(%rax), %eax
 3050 22e3 0FB6C0   		movzbl	%al, %eax
 3051              		.loc 1 725 91
 3052 22e6 83E830   		subl	$48, %eax
 3053              		.loc 1 725 3
 3054 22e9 4898     		cltq
 3055 22eb 488D14C5 		leaq	0(,%rax,8), %rdx
 3055      00000000 
 3056 22f3 488D0500 		leaq	nibbles(%rip), %rax
 3056      000000
 3057 22fa 488B0402 		movq	(%rdx,%rax), %rax
 3058 22fe 4889C6   		movq	%rax, %rsi
 3059 2301 488D0500 		leaq	.LC113(%rip), %rax
 3059      000000
 3060 2308 4889C7   		movq	%rax, %rdi
 3061 230b B8000000 		movl	$0, %eax
 3061      00
 3062 2310 E8000000 		call	printf@PLT
 3062      00
 726:main.c        **** 		printf(" %s", nibbles[*p++ - '0']);
 3063              		.loc 1 726 27
 3064 2315 488B85F8 		movq	-264(%rbp), %rax
 3064      FEFFFF
 3065 231c 488D5001 		leaq	1(%rax), %rdx
 3066 2320 488995F8 		movq	%rdx, -264(%rbp)
 3066      FEFFFF
 3067              		.loc 1 726 25
 3068 2327 0FB600   		movzbl	(%rax), %eax
 3069 232a 0FB6C0   		movzbl	%al, %eax
 3070              		.loc 1 726 30
 3071 232d 83E830   		subl	$48, %eax
 3072              		.loc 1 726 3
 3073 2330 4898     		cltq
 3074 2332 488D14C5 		leaq	0(,%rax,8), %rdx
 3074      00000000 
 3075 233a 488D0500 		leaq	nibbles(%rip), %rax
 3075      000000
 3076 2341 488B0402 		movq	(%rdx,%rax), %rax
 3077 2345 4889C6   		movq	%rax, %rsi
 3078 2348 488D0500 		leaq	.LC114(%rip), %rax
 3078      000000
 3079 234f 4889C7   		movq	%rax, %rdi
 3080 2352 B8000000 		movl	$0, %eax
 3080      00
 3081 2357 E8000000 		call	printf@PLT
 3081      00
 727:main.c        **** 		printf(" %s", nibbles[*p++ - '0']);
 3082              		.loc 1 727 27
 3083 235c 488B85F8 		movq	-264(%rbp), %rax
 3083      FEFFFF
 3084 2363 488D5001 		leaq	1(%rax), %rdx
 3085 2367 488995F8 		movq	%rdx, -264(%rbp)
 3085      FEFFFF
 3086              		.loc 1 727 25
 3087 236e 0FB600   		movzbl	(%rax), %eax
 3088 2371 0FB6C0   		movzbl	%al, %eax
 3089              		.loc 1 727 30
 3090 2374 83E830   		subl	$48, %eax
 3091              		.loc 1 727 3
 3092 2377 4898     		cltq
 3093 2379 488D14C5 		leaq	0(,%rax,8), %rdx
 3093      00000000 
 3094 2381 488D0500 		leaq	nibbles(%rip), %rax
 3094      000000
 3095 2388 488B0402 		movq	(%rdx,%rax), %rax
 3096 238c 4889C6   		movq	%rax, %rsi
 3097 238f 488D0500 		leaq	.LC114(%rip), %rax
 3097      000000
 3098 2396 4889C7   		movq	%rax, %rdi
 3099 2399 B8000000 		movl	$0, %eax
 3099      00
 3100 239e E8000000 		call	printf@PLT
 3100      00
 728:main.c        **** 		printf(" %s", nibbles[*p++ - '0']);
 3101              		.loc 1 728 27
 3102 23a3 488B85F8 		movq	-264(%rbp), %rax
 3102      FEFFFF
 3103 23aa 488D5001 		leaq	1(%rax), %rdx
 3104 23ae 488995F8 		movq	%rdx, -264(%rbp)
 3104      FEFFFF
 3105              		.loc 1 728 25
 3106 23b5 0FB600   		movzbl	(%rax), %eax
 3107 23b8 0FB6C0   		movzbl	%al, %eax
 3108              		.loc 1 728 30
 3109 23bb 83E830   		subl	$48, %eax
 3110              		.loc 1 728 3
 3111 23be 4898     		cltq
 3112 23c0 488D14C5 		leaq	0(,%rax,8), %rdx
 3112      00000000 
 3113 23c8 488D0500 		leaq	nibbles(%rip), %rax
 3113      000000
 3114 23cf 488B0402 		movq	(%rdx,%rax), %rax
 3115 23d3 4889C6   		movq	%rax, %rsi
 3116 23d6 488D0500 		leaq	.LC114(%rip), %rax
 3116      000000
 3117 23dd 4889C7   		movq	%rax, %rdi
 3118 23e0 B8000000 		movl	$0, %eax
 3118      00
 3119 23e5 E8000000 		call	printf@PLT
 3119      00
 729:main.c        **** 		printf("  %s", nibbles[*p++ - '0']);
 3120              		.loc 1 729 28
 3121 23ea 488B85F8 		movq	-264(%rbp), %rax
 3121      FEFFFF
 3122 23f1 488D5001 		leaq	1(%rax), %rdx
 3123 23f5 488995F8 		movq	%rdx, -264(%rbp)
 3123      FEFFFF
 3124              		.loc 1 729 26
 3125 23fc 0FB600   		movzbl	(%rax), %eax
 3126 23ff 0FB6C0   		movzbl	%al, %eax
 3127              		.loc 1 729 31
 3128 2402 83E830   		subl	$48, %eax
 3129              		.loc 1 729 3
 3130 2405 4898     		cltq
 3131 2407 488D14C5 		leaq	0(,%rax,8), %rdx
 3131      00000000 
 3132 240f 488D0500 		leaq	nibbles(%rip), %rax
 3132      000000
 3133 2416 488B0402 		movq	(%rdx,%rax), %rax
 3134 241a 4889C6   		movq	%rax, %rsi
 3135 241d 488D0500 		leaq	.LC115(%rip), %rax
 3135      000000
 3136 2424 4889C7   		movq	%rax, %rdi
 3137 2427 B8000000 		movl	$0, %eax
 3137      00
 3138 242c E8000000 		call	printf@PLT
 3138      00
 730:main.c        **** 		printf(" %s", nibbles[*p++ - '0']);
 3139              		.loc 1 730 27
 3140 2431 488B85F8 		movq	-264(%rbp), %rax
 3140      FEFFFF
 3141 2438 488D5001 		leaq	1(%rax), %rdx
 3142 243c 488995F8 		movq	%rdx, -264(%rbp)
 3142      FEFFFF
 3143              		.loc 1 730 25
 3144 2443 0FB600   		movzbl	(%rax), %eax
 3145 2446 0FB6C0   		movzbl	%al, %eax
 3146              		.loc 1 730 30
 3147 2449 83E830   		subl	$48, %eax
 3148              		.loc 1 730 3
 3149 244c 4898     		cltq
 3150 244e 488D14C5 		leaq	0(,%rax,8), %rdx
 3150      00000000 
 3151 2456 488D0500 		leaq	nibbles(%rip), %rax
 3151      000000
 3152 245d 488B0402 		movq	(%rdx,%rax), %rax
 3153 2461 4889C6   		movq	%rax, %rsi
 3154 2464 488D0500 		leaq	.LC114(%rip), %rax
 3154      000000
 3155 246b 4889C7   		movq	%rax, %rdi
 3156 246e B8000000 		movl	$0, %eax
 3156      00
 3157 2473 E8000000 		call	printf@PLT
 3157      00
 731:main.c        **** 		printf(" %s", nibbles[*p++ - '0']);
 3158              		.loc 1 731 27
 3159 2478 488B85F8 		movq	-264(%rbp), %rax
 3159      FEFFFF
 3160 247f 488D5001 		leaq	1(%rax), %rdx
 3161 2483 488995F8 		movq	%rdx, -264(%rbp)
 3161      FEFFFF
 3162              		.loc 1 731 25
 3163 248a 0FB600   		movzbl	(%rax), %eax
 3164 248d 0FB6C0   		movzbl	%al, %eax
 3165              		.loc 1 731 30
 3166 2490 83E830   		subl	$48, %eax
 3167              		.loc 1 731 3
 3168 2493 4898     		cltq
 3169 2495 488D14C5 		leaq	0(,%rax,8), %rdx
 3169      00000000 
 3170 249d 488D0500 		leaq	nibbles(%rip), %rax
 3170      000000
 3171 24a4 488B0402 		movq	(%rdx,%rax), %rax
 3172 24a8 4889C6   		movq	%rax, %rsi
 3173 24ab 488D0500 		leaq	.LC114(%rip), %rax
 3173      000000
 3174 24b2 4889C7   		movq	%rax, %rdi
 3175 24b5 B8000000 		movl	$0, %eax
 3175      00
 3176 24ba E8000000 		call	printf@PLT
 3176      00
 732:main.c        **** 		printf(" %s\n", nibbles[*p++ - '0']);
 3177              		.loc 1 732 29
 3178 24bf 488B85F8 		movq	-264(%rbp), %rax
 3178      FEFFFF
 3179 24c6 488D5001 		leaq	1(%rax), %rdx
 3180 24ca 488995F8 		movq	%rdx, -264(%rbp)
 3180      FEFFFF
 3181              		.loc 1 732 27
 3182 24d1 0FB600   		movzbl	(%rax), %eax
 3183 24d4 0FB6C0   		movzbl	%al, %eax
 3184              		.loc 1 732 32
 3185 24d7 83E830   		subl	$48, %eax
 3186              		.loc 1 732 3
 3187 24da 4898     		cltq
 3188 24dc 488D14C5 		leaq	0(,%rax,8), %rdx
 3188      00000000 
 3189 24e4 488D0500 		leaq	nibbles(%rip), %rax
 3189      000000
 3190 24eb 488B0402 		movq	(%rdx,%rax), %rax
 3191 24ef 4889C6   		movq	%rax, %rsi
 3192 24f2 488D0500 		leaq	.LC116(%rip), %rax
 3192      000000
 3193 24f9 4889C7   		movq	%rax, %rdi
 3194 24fc B8000000 		movl	$0, %eax
 3194      00
 3195 2501 E8000000 		call	printf@PLT
 3195      00
 733:main.c        **** 		flSleep(100);
 3196              		.loc 1 733 3
 3197 2506 BF640000 		movl	$100, %edi
 3197      00
 3198 250b E8000000 		call	flSleep@PLT
 3198      00
 3199              	.L153:
 3200              	.LBE16:
 734:main.c        **** 	}
 735:main.c        **** 
 736:main.c        **** 	if ( queryOpt->count ) {
 3201              		.loc 1 736 15
 3202 2510 488B8580 		movq	-384(%rbp), %rax
 3202      FEFFFF
 3203 2517 8B4060   		movl	96(%rax), %eax
 3204              		.loc 1 736 5
 3205 251a 85C0     		testl	%eax, %eax
 3206 251c 0F846101 		je	.L155
 3206      0000
 737:main.c        **** 		if ( isNeroCapable ) {
 3207              		.loc 1 737 6
 3208 2522 80BD12FE 		cmpb	$0, -494(%rbp)
 3208      FFFF00
 3209 2529 0F842001 		je	.L156
 3209      0000
 738:main.c        **** 			fStatus = flSelectConduit(handle, 0x00, &error);
 3210              		.loc 1 738 14
 3211 252f 488B8538 		movq	-456(%rbp), %rax
 3211      FEFFFF
 3212 2536 488D9540 		leaq	-448(%rbp), %rdx
 3212      FEFFFF
 3213 253d BE000000 		movl	$0, %esi
 3213      00
 3214 2542 4889C7   		movq	%rax, %rdi
 3215 2545 E8000000 		call	flSelectConduit@PLT
 3215      00
 3216 254a 898520FE 		movl	%eax, -480(%rbp)
 3216      FFFF
 739:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3217              		.loc 1 739 4
 3218 2550 83BD20FE 		cmpl	$0, -480(%rbp)
 3218      FFFF00
 3219 2557 740F     		je	.L157
 3220              		.loc 1 739 4 is_stmt 0 discriminator 1
 3221 2559 C7851CFE 		movl	$1, -484(%rbp)
 3221      FFFF0100 
 3221      0000
 3222 2563 E9670800 		jmp	.L129
 3222      00
 3223              	.L157:
 740:main.c        **** 			fStatus = jtagScanChain(handle, queryOpt->sval[0], &numDevices, scanChain, 16, &error);
 3224              		.loc 1 740 44 is_stmt 1
 3225 2568 488B8580 		movq	-384(%rbp), %rax
 3225      FEFFFF
 3226 256f 488B4068 		movq	104(%rax), %rax
 3227              		.loc 1 740 14
 3228 2573 488B30   		movq	(%rax), %rsi
 3229 2576 488B8538 		movq	-456(%rbp), %rax
 3229      FEFFFF
 3230 257d 488DBD40 		leaq	-448(%rbp), %rdi
 3230      FEFFFF
 3231 2584 488D8D10 		leaq	-240(%rbp), %rcx
 3231      FFFFFF
 3232 258b 488D9514 		leaq	-492(%rbp), %rdx
 3232      FEFFFF
 3233 2592 4989F9   		movq	%rdi, %r9
 3234 2595 41B81000 		movl	$16, %r8d
 3234      0000
 3235 259b 4889C7   		movq	%rax, %rdi
 3236 259e E8000000 		call	jtagScanChain@PLT
 3236      00
 3237 25a3 898520FE 		movl	%eax, -480(%rbp)
 3237      FFFF
 741:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3238              		.loc 1 741 4
 3239 25a9 83BD20FE 		cmpl	$0, -480(%rbp)
 3239      FFFF00
 3240 25b0 740F     		je	.L158
 3241              		.loc 1 741 4 is_stmt 0 discriminator 1
 3242 25b2 C7851CFE 		movl	$1, -484(%rbp)
 3242      FFFF0100 
 3242      0000
 3243 25bc E90E0800 		jmp	.L129
 3243      00
 3244              	.L158:
 742:main.c        **** 			if ( numDevices ) {
 3245              		.loc 1 742 9 is_stmt 1
 3246 25c1 8B8514FE 		movl	-492(%rbp), %eax
 3246      FFFF
 3247              		.loc 1 742 7
 3248 25c7 85C0     		testl	%eax, %eax
 3249 25c9 7464     		je	.L159
 743:main.c        **** 				printf("The FPGALink device at %s scanned its JTAG chain, yielding:\n", vp);
 3250              		.loc 1 743 5
 3251 25cb 488B85F0 		movq	-272(%rbp), %rax
 3251      FEFFFF
 3252 25d2 4889C6   		movq	%rax, %rsi
 3253 25d5 488D0500 		leaq	.LC117(%rip), %rax
 3253      000000
 3254 25dc 4889C7   		movq	%rax, %rdi
 3255 25df B8000000 		movl	$0, %eax
 3255      00
 3256 25e4 E8000000 		call	printf@PLT
 3256      00
 744:main.c        **** 				for ( i = 0; i < numDevices; i++ ) {
 3257              		.loc 1 744 13
 3258 25e9 C78524FE 		movl	$0, -476(%rbp)
 3258      FFFF0000 
 3258      0000
 3259              		.loc 1 744 5
 3260 25f3 EB2A     		jmp	.L160
 3261              	.L161:
 745:main.c        **** 					printf("  0x%08X\n", scanChain[i]);
 3262              		.loc 1 745 6 discriminator 3
 3263 25f5 8B8524FE 		movl	-476(%rbp), %eax
 3263      FFFF
 3264 25fb 8B848510 		movl	-240(%rbp,%rax,4), %eax
 3264      FFFFFF
 3265 2602 89C6     		movl	%eax, %esi
 3266 2604 488D0500 		leaq	.LC118(%rip), %rax
 3266      000000
 3267 260b 4889C7   		movq	%rax, %rdi
 3268 260e B8000000 		movl	$0, %eax
 3268      00
 3269 2613 E8000000 		call	printf@PLT
 3269      00
 744:main.c        **** 				for ( i = 0; i < numDevices; i++ ) {
 3270              		.loc 1 744 35 discriminator 3
 3271 2618 838524FE 		addl	$1, -476(%rbp)
 3271      FFFF01
 3272              	.L160:
 744:main.c        **** 				for ( i = 0; i < numDevices; i++ ) {
 3273              		.loc 1 744 20 discriminator 1
 3274 261f 8B8514FE 		movl	-492(%rbp), %eax
 3274      FFFF
 3275 2625 398524FE 		cmpl	%eax, -476(%rbp)
 3275      FFFF
 3276 262b 72C8     		jb	.L161
 3277 262d EB54     		jmp	.L155
 3278              	.L159:
 746:main.c        **** 				}
 747:main.c        **** 			} else {
 748:main.c        **** 				printf("The FPGALink device at %s scanned its JTAG chain but did not find any attached devices\
 3279              		.loc 1 748 5
 3280 262f 488B85F0 		movq	-272(%rbp), %rax
 3280      FEFFFF
 3281 2636 4889C6   		movq	%rax, %rsi
 3282 2639 488D0500 		leaq	.LC119(%rip), %rax
 3282      000000
 3283 2640 4889C7   		movq	%rax, %rdi
 3284 2643 B8000000 		movl	$0, %eax
 3284      00
 3285 2648 E8000000 		call	printf@PLT
 3285      00
 3286 264d EB34     		jmp	.L155
 3287              	.L156:
 749:main.c        **** 			}
 750:main.c        **** 		} else {
 751:main.c        **** 			fprintf(stderr, "JTAG chain scan requested but FPGALink device at %s does not support NeroProg\n
 3288              		.loc 1 751 4
 3289 264f 488B0500 		movq	stderr(%rip), %rax
 3289      000000
 3290 2656 488B95F0 		movq	-272(%rbp), %rdx
 3290      FEFFFF
 3291 265d 488D0D00 		leaq	.LC120(%rip), %rcx
 3291      000000
 3292 2664 4889CE   		movq	%rcx, %rsi
 3293 2667 4889C7   		movq	%rax, %rdi
 3294 266a B8000000 		movl	$0, %eax
 3294      00
 3295 266f E8000000 		call	fprintf@PLT
 3295      00
 752:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 3296              		.loc 1 752 4
 3297 2674 C7851CFE 		movl	$12, -484(%rbp)
 3297      FFFF0C00 
 3297      0000
 3298 267e E94C0700 		jmp	.L129
 3298      00
 3299              	.L155:
 753:main.c        **** 		}
 754:main.c        **** 	}
 755:main.c        **** 
 756:main.c        **** 	if ( progOpt->count ) {
 3300              		.loc 1 756 14
 3301 2683 488B8588 		movq	-376(%rbp), %rax
 3301      FEFFFF
 3302 268a 8B4060   		movl	96(%rax), %eax
 3303              		.loc 1 756 5
 3304 268d 85C0     		testl	%eax, %eax
 3305 268f 0F84D300 		je	.L162
 3305      0000
 757:main.c        **** 		printf("Programming device...\n");
 3306              		.loc 1 757 3
 3307 2695 488D0500 		leaq	.LC121(%rip), %rax
 3307      000000
 3308 269c 4889C7   		movq	%rax, %rdi
 3309 269f E8000000 		call	puts@PLT
 3309      00
 758:main.c        **** 		if ( isNeroCapable ) {
 3310              		.loc 1 758 6
 3311 26a4 80BD12FE 		cmpb	$0, -494(%rbp)
 3311      FFFF00
 3312 26ab 0F848300 		je	.L163
 3312      0000
 759:main.c        **** 			fStatus = flSelectConduit(handle, 0x00, &error);
 3313              		.loc 1 759 14
 3314 26b1 488B8538 		movq	-456(%rbp), %rax
 3314      FEFFFF
 3315 26b8 488D9540 		leaq	-448(%rbp), %rdx
 3315      FEFFFF
 3316 26bf BE000000 		movl	$0, %esi
 3316      00
 3317 26c4 4889C7   		movq	%rax, %rdi
 3318 26c7 E8000000 		call	flSelectConduit@PLT
 3318      00
 3319 26cc 898520FE 		movl	%eax, -480(%rbp)
 3319      FFFF
 760:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3320              		.loc 1 760 4
 3321 26d2 83BD20FE 		cmpl	$0, -480(%rbp)
 3321      FFFF00
 3322 26d9 740F     		je	.L164
 3323              		.loc 1 760 4 is_stmt 0 discriminator 1
 3324 26db C7851CFE 		movl	$1, -484(%rbp)
 3324      FFFF0100 
 3324      0000
 3325 26e5 E9E50600 		jmp	.L129
 3325      00
 3326              	.L164:
 761:main.c        **** 			fStatus = flProgram(handle, progOpt->sval[0], NULL, &error);
 3327              		.loc 1 761 39 is_stmt 1
 3328 26ea 488B8588 		movq	-376(%rbp), %rax
 3328      FEFFFF
 3329 26f1 488B4068 		movq	104(%rax), %rax
 3330              		.loc 1 761 14
 3331 26f5 488B30   		movq	(%rax), %rsi
 3332 26f8 488B8538 		movq	-456(%rbp), %rax
 3332      FEFFFF
 3333 26ff 488D9540 		leaq	-448(%rbp), %rdx
 3333      FEFFFF
 3334 2706 4889D1   		movq	%rdx, %rcx
 3335 2709 BA000000 		movl	$0, %edx
 3335      00
 3336 270e 4889C7   		movq	%rax, %rdi
 3337 2711 E8000000 		call	flProgram@PLT
 3337      00
 3338 2716 898520FE 		movl	%eax, -480(%rbp)
 3338      FFFF
 762:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3339              		.loc 1 762 4
 3340 271c 83BD20FE 		cmpl	$0, -480(%rbp)
 3340      FFFF00
 3341 2723 7443     		je	.L162
 3342              		.loc 1 762 4 is_stmt 0 discriminator 1
 3343 2725 C7851CFE 		movl	$1, -484(%rbp)
 3343      FFFF0100 
 3343      0000
 3344 272f E99B0600 		jmp	.L129
 3344      00
 3345              	.L163:
 763:main.c        **** 		} else {
 764:main.c        **** 			fprintf(stderr, "Program operation requested but device at %s does not support NeroProg\n", vp);
 3346              		.loc 1 764 4 is_stmt 1
 3347 2734 488B0500 		movq	stderr(%rip), %rax
 3347      000000
 3348 273b 488B95F0 		movq	-272(%rbp), %rdx
 3348      FEFFFF
 3349 2742 488D0D00 		leaq	.LC122(%rip), %rcx
 3349      000000
 3350 2749 4889CE   		movq	%rcx, %rsi
 3351 274c 4889C7   		movq	%rax, %rdi
 3352 274f B8000000 		movl	$0, %eax
 3352      00
 3353 2754 E8000000 		call	fprintf@PLT
 3353      00
 765:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 3354              		.loc 1 765 4
 3355 2759 C7851CFE 		movl	$12, -484(%rbp)
 3355      FFFF0C00 
 3355      0000
 3356 2763 E9670600 		jmp	.L129
 3356      00
 3357              	.L162:
 766:main.c        **** 		}
 767:main.c        **** 	}
 768:main.c        **** 
 769:main.c        **** 	if ( benOpt->count ) {
 3358              		.loc 1 769 13
 3359 2768 488B85A8 		movq	-344(%rbp), %rax
 3359      FEFFFF
 3360 276f 8B4060   		movl	96(%rax), %eax
 3361              		.loc 1 769 5
 3362 2772 85C0     		testl	%eax, %eax
 3363 2774 7407     		je	.L165
 770:main.c        **** 		enableBenchmarking = true;
 3364              		.loc 1 770 22
 3365 2776 C6050000 		movb	$1, enableBenchmarking(%rip)
 3365      000001
 3366              	.L165:
 771:main.c        **** 	}
 772:main.c        **** 	
 773:main.c        **** 	if ( actOpt->count ) {
 3367              		.loc 1 773 13
 3368 277d 488B8598 		movq	-360(%rbp), %rax
 3368      FEFFFF
 3369 2784 8B4060   		movl	96(%rax), %eax
 3370              		.loc 1 773 5
 3371 2787 85C0     		testl	%eax, %eax
 3372 2789 0F846001 		je	.L166
 3372      0000
 774:main.c        **** 		printf("Executing CommFPGA actions on FPGALink device %s...\n", vp);
 3373              		.loc 1 774 3
 3374 278f 488B85F0 		movq	-272(%rbp), %rax
 3374      FEFFFF
 3375 2796 4889C6   		movq	%rax, %rsi
 3376 2799 488D0500 		leaq	.LC123(%rip), %rax
 3376      000000
 3377 27a0 4889C7   		movq	%rax, %rdi
 3378 27a3 B8000000 		movl	$0, %eax
 3378      00
 3379 27a8 E8000000 		call	printf@PLT
 3379      00
 775:main.c        **** 		if ( isCommCapable ) {
 3380              		.loc 1 775 6
 3381 27ad 80BD13FE 		cmpb	$0, -493(%rbp)
 3381      FFFF00
 3382 27b4 0F840101 		je	.L167
 3382      0000
 3383              	.LBB17:
 776:main.c        **** 			uint8 isRunning;
 777:main.c        **** 			fStatus = flSelectConduit(handle, conduit, &error);
 3384              		.loc 1 777 14
 3385 27ba 0FB68D11 		movzbl	-495(%rbp), %ecx
 3385      FEFFFF
 3386 27c1 488B8538 		movq	-456(%rbp), %rax
 3386      FEFFFF
 3387 27c8 488D9540 		leaq	-448(%rbp), %rdx
 3387      FEFFFF
 3388 27cf 89CE     		movl	%ecx, %esi
 3389 27d1 4889C7   		movq	%rax, %rdi
 3390 27d4 E8000000 		call	flSelectConduit@PLT
 3390      00
 3391 27d9 898520FE 		movl	%eax, -480(%rbp)
 3391      FFFF
 778:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3392              		.loc 1 778 4
 3393 27df 83BD20FE 		cmpl	$0, -480(%rbp)
 3393      FFFF00
 3394 27e6 740F     		je	.L168
 3395              		.loc 1 778 4 is_stmt 0 discriminator 1
 3396 27e8 C7851CFE 		movl	$1, -484(%rbp)
 3396      FFFF0100 
 3396      0000
 3397 27f2 E9D80500 		jmp	.L129
 3397      00
 3398              	.L168:
 779:main.c        **** 			fStatus = flIsFPGARunning(handle, &isRunning, &error);
 3399              		.loc 1 779 14 is_stmt 1
 3400 27f7 488B8538 		movq	-456(%rbp), %rax
 3400      FEFFFF
 3401 27fe 488D9540 		leaq	-448(%rbp), %rdx
 3401      FEFFFF
 3402 2805 488D8D50 		leaq	-432(%rbp), %rcx
 3402      FEFFFF
 3403 280c 4889CE   		movq	%rcx, %rsi
 3404 280f 4889C7   		movq	%rax, %rdi
 3405 2812 E8000000 		call	flIsFPGARunning@PLT
 3405      00
 3406 2817 898520FE 		movl	%eax, -480(%rbp)
 3406      FFFF
 780:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3407              		.loc 1 780 4
 3408 281d 83BD20FE 		cmpl	$0, -480(%rbp)
 3408      FFFF00
 3409 2824 740F     		je	.L170
 3410              		.loc 1 780 4 is_stmt 0 discriminator 1
 3411 2826 C7851CFE 		movl	$1, -484(%rbp)
 3411      FFFF0100 
 3411      0000
 3412 2830 E99A0500 		jmp	.L129
 3412      00
 3413              	.L170:
 781:main.c        **** 			if ( isRunning ) {
 3414              		.loc 1 781 9 is_stmt 1
 3415 2835 0FB68550 		movzbl	-432(%rbp), %eax
 3415      FEFFFF
 3416              		.loc 1 781 7
 3417 283c 84C0     		testb	%al, %al
 3418 283e 7447     		je	.L171
 782:main.c        **** 				pStatus = parseLine(handle, actOpt->sval[0], &error);
 3419              		.loc 1 782 39
 3420 2840 488B8598 		movq	-360(%rbp), %rax
 3420      FEFFFF
 3421 2847 488B4068 		movq	104(%rax), %rax
 3422              		.loc 1 782 15
 3423 284b 488B08   		movq	(%rax), %rcx
 3424 284e 488B8538 		movq	-456(%rbp), %rax
 3424      FEFFFF
 3425 2855 488D9540 		leaq	-448(%rbp), %rdx
 3425      FEFFFF
 3426 285c 4889CE   		movq	%rcx, %rsi
 3427 285f 4889C7   		movq	%rax, %rdi
 3428 2862 E81CDEFF 		call	parseLine
 3428      FF
 3429              		.loc 1 782 13
 3430 2867 898534FE 		movl	%eax, -460(%rbp)
 3430      FFFF
 783:main.c        **** 				CHECK_STATUS(pStatus, pStatus, cleanup);
 3431              		.loc 1 783 5
 3432 286d 83BD34FE 		cmpl	$0, -460(%rbp)
 3432      FFFF00
 3433 2874 7479     		je	.L166
 3434              		.loc 1 783 5 is_stmt 0 discriminator 1
 3435 2876 8B8534FE 		movl	-460(%rbp), %eax
 3435      FFFF
 3436 287c 89851CFE 		movl	%eax, -484(%rbp)
 3436      FFFF
 3437 2882 E9480500 		jmp	.L129
 3437      00
 3438              	.L171:
 784:main.c        **** 			} else {
 785:main.c        **** 				fprintf(stderr, "The FPGALink device at %s is not ready to talk - did you forget --program?\n",
 3439              		.loc 1 785 5 is_stmt 1
 3440 2887 488B0500 		movq	stderr(%rip), %rax
 3440      000000
 3441 288e 488B95F0 		movq	-272(%rbp), %rdx
 3441      FEFFFF
 3442 2895 488D0D00 		leaq	.LC124(%rip), %rcx
 3442      000000
 3443 289c 4889CE   		movq	%rcx, %rsi
 3444 289f 4889C7   		movq	%rax, %rdi
 3445 28a2 B8000000 		movl	$0, %eax
 3445      00
 3446 28a7 E8000000 		call	fprintf@PLT
 3446      00
 786:main.c        **** 				FAIL(FLP_ARGS, cleanup);
 3447              		.loc 1 786 5
 3448 28ac C7851CFE 		movl	$12, -484(%rbp)
 3448      FFFF0C00 
 3448      0000
 3449 28b6 E9140500 		jmp	.L129
 3449      00
 3450              	.L167:
 3451              	.LBE17:
 787:main.c        **** 			}
 788:main.c        **** 		} else {
 789:main.c        **** 			fprintf(stderr, "Action requested but device at %s does not support CommFPGA\n", vp);
 3452              		.loc 1 789 4
 3453 28bb 488B0500 		movq	stderr(%rip), %rax
 3453      000000
 3454 28c2 488B95F0 		movq	-272(%rbp), %rdx
 3454      FEFFFF
 3455 28c9 488D0D00 		leaq	.LC125(%rip), %rcx
 3455      000000
 3456 28d0 4889CE   		movq	%rcx, %rsi
 3457 28d3 4889C7   		movq	%rax, %rdi
 3458 28d6 B8000000 		movl	$0, %eax
 3458      00
 3459 28db E8000000 		call	fprintf@PLT
 3459      00
 790:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 3460              		.loc 1 790 4
 3461 28e0 C7851CFE 		movl	$12, -484(%rbp)
 3461      FFFF0C00 
 3461      0000
 3462 28ea E9E00400 		jmp	.L129
 3462      00
 3463              	.L166:
 791:main.c        **** 		}
 792:main.c        **** 	}
 793:main.c        **** 
 794:main.c        **** 	if ( dumpOpt->count ) {
 3464              		.loc 1 794 14
 3465 28ef 488B85B8 		movq	-328(%rbp), %rax
 3465      FEFFFF
 3466 28f6 8B4060   		movl	96(%rax), %eax
 3467              		.loc 1 794 5
 3468 28f9 85C0     		testl	%eax, %eax
 3469 28fb 0F84E302 		je	.L173
 3469      0000
 3470              	.LBB18:
 795:main.c        **** 		const char *fileName;
 796:main.c        **** 		unsigned long chan = strtoul(dumpOpt->sval[0], (char**)&fileName, 10);
 3471              		.loc 1 796 39
 3472 2901 488B85B8 		movq	-328(%rbp), %rax
 3472      FEFFFF
 3473 2908 488B4068 		movq	104(%rax), %rax
 3474              		.loc 1 796 24
 3475 290c 488B00   		movq	(%rax), %rax
 3476 290f 488D8D48 		leaq	-440(%rbp), %rcx
 3476      FEFFFF
 3477 2916 BA0A0000 		movl	$10, %edx
 3477      00
 3478 291b 4889CE   		movq	%rcx, %rsi
 3479 291e 4889C7   		movq	%rax, %rdi
 3480 2921 E8000000 		call	strtoul@PLT
 3480      00
 3481 2926 48898500 		movq	%rax, -256(%rbp)
 3481      FFFFFF
 797:main.c        **** 		FILE *file = NULL;
 3482              		.loc 1 797 9
 3483 292d 48C78508 		movq	$0, -248(%rbp)
 3483      FFFFFF00 
 3483      000000
 798:main.c        **** 		const uint8 *recvData;
 799:main.c        **** 		uint32 actualLength;
 800:main.c        **** 		if ( *fileName != ':' ) {
 3484              		.loc 1 800 8
 3485 2938 488B8548 		movq	-440(%rbp), %rax
 3485      FEFFFF
 3486 293f 0FB600   		movzbl	(%rax), %eax
 3487              		.loc 1 800 6
 3488 2942 3C3A     		cmpb	$58, %al
 3489 2944 7434     		je	.L174
 801:main.c        **** 			fprintf(stderr, "%s: invalid argument to option -l|--dumploop=<ch:file.bin>\n", progName);
 3490              		.loc 1 801 4
 3491 2946 488B0500 		movq	stderr(%rip), %rax
 3491      000000
 3492 294d 488B95E0 		movq	-288(%rbp), %rdx
 3492      FEFFFF
 3493 2954 488D0D00 		leaq	.LC126(%rip), %rcx
 3493      000000
 3494 295b 4889CE   		movq	%rcx, %rsi
 3495 295e 4889C7   		movq	%rax, %rdi
 3496 2961 B8000000 		movl	$0, %eax
 3496      00
 3497 2966 E8000000 		call	fprintf@PLT
 3497      00
 802:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 3498              		.loc 1 802 4
 3499 296b C7851CFE 		movl	$12, -484(%rbp)
 3499      FFFF0C00 
 3499      0000
 3500 2975 E9550400 		jmp	.L129
 3500      00
 3501              	.L174:
 803:main.c        **** 		}
 804:main.c        **** 		fileName++;
 3502              		.loc 1 804 11
 3503 297a 488B8548 		movq	-440(%rbp), %rax
 3503      FEFFFF
 3504 2981 4883C001 		addq	$1, %rax
 3505 2985 48898548 		movq	%rax, -440(%rbp)
 3505      FEFFFF
 805:main.c        **** 		printf("Copying from channel %lu to %s", chan, fileName);
 3506              		.loc 1 805 3
 3507 298c 488B9548 		movq	-440(%rbp), %rdx
 3507      FEFFFF
 3508 2993 488B8500 		movq	-256(%rbp), %rax
 3508      FFFFFF
 3509 299a 4889C6   		movq	%rax, %rsi
 3510 299d 488D0500 		leaq	.LC127(%rip), %rax
 3510      000000
 3511 29a4 4889C7   		movq	%rax, %rdi
 3512 29a7 B8000000 		movl	$0, %eax
 3512      00
 3513 29ac E8000000 		call	printf@PLT
 3513      00
 806:main.c        **** 		file = fopen(fileName, "wb");
 3514              		.loc 1 806 10
 3515 29b1 488B8548 		movq	-440(%rbp), %rax
 3515      FEFFFF
 3516 29b8 488D1500 		leaq	.LC13(%rip), %rdx
 3516      000000
 3517 29bf 4889D6   		movq	%rdx, %rsi
 3518 29c2 4889C7   		movq	%rax, %rdi
 3519 29c5 E8000000 		call	fopen@PLT
 3519      00
 3520 29ca 48898508 		movq	%rax, -248(%rbp)
 3520      FFFFFF
 807:main.c        **** 		CHECK_STATUS(!file, FLP_CANNOT_SAVE, cleanup);
 3521              		.loc 1 807 3
 3522 29d1 4883BD08 		cmpq	$0, -248(%rbp)
 3522      FFFFFF00 
 3523 29d9 750F     		jne	.L176
 3524              		.loc 1 807 3 is_stmt 0 discriminator 1
 3525 29db C7851CFE 		movl	$11, -484(%rbp)
 3525      FFFF0B00 
 3525      0000
 3526 29e5 E9E50300 		jmp	.L129
 3526      00
 3527              	.L176:
 808:main.c        **** 		sigRegisterHandler();
 3528              		.loc 1 808 3 is_stmt 1
 3529 29ea E8000000 		call	sigRegisterHandler@PLT
 3529      00
 809:main.c        **** 		fStatus = flSelectConduit(handle, conduit, &error);
 3530              		.loc 1 809 13
 3531 29ef 0FB68D11 		movzbl	-495(%rbp), %ecx
 3531      FEFFFF
 3532 29f6 488B8538 		movq	-456(%rbp), %rax
 3532      FEFFFF
 3533 29fd 488D9540 		leaq	-448(%rbp), %rdx
 3533      FEFFFF
 3534 2a04 89CE     		movl	%ecx, %esi
 3535 2a06 4889C7   		movq	%rax, %rdi
 3536 2a09 E8000000 		call	flSelectConduit@PLT
 3536      00
 3537 2a0e 898520FE 		movl	%eax, -480(%rbp)
 3537      FFFF
 810:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3538              		.loc 1 810 3
 3539 2a14 83BD20FE 		cmpl	$0, -480(%rbp)
 3539      FFFF00
 3540 2a1b 740F     		je	.L177
 3541              		.loc 1 810 3 is_stmt 0 discriminator 1
 3542 2a1d C7851CFE 		movl	$1, -484(%rbp)
 3542      FFFF0100 
 3542      0000
 3543 2a27 E9A30300 		jmp	.L129
 3543      00
 3544              	.L177:
 811:main.c        **** 		fStatus = flReadChannelAsyncSubmit(handle, (uint8)chan, 22528, NULL, &error);
 3545              		.loc 1 811 46 is_stmt 1
 3546 2a2c 488B8500 		movq	-256(%rbp), %rax
 3546      FFFFFF
 3547              		.loc 1 811 13
 3548 2a33 0FB6F0   		movzbl	%al, %esi
 3549 2a36 488B8538 		movq	-456(%rbp), %rax
 3549      FEFFFF
 3550 2a3d 488D9540 		leaq	-448(%rbp), %rdx
 3550      FEFFFF
 3551 2a44 4989D0   		movq	%rdx, %r8
 3552 2a47 B9000000 		movl	$0, %ecx
 3552      00
 3553 2a4c BA005800 		movl	$22528, %edx
 3553      00
 3554 2a51 4889C7   		movq	%rax, %rdi
 3555 2a54 E8000000 		call	flReadChannelAsyncSubmit@PLT
 3555      00
 3556 2a59 898520FE 		movl	%eax, -480(%rbp)
 3556      FFFF
 812:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3557              		.loc 1 812 3
 3558 2a5f 83BD20FE 		cmpl	$0, -480(%rbp)
 3558      FFFF00
 3559 2a66 740F     		je	.L178
 3560              		.loc 1 812 3 is_stmt 0 discriminator 1
 3561 2a68 C7851CFE 		movl	$1, -484(%rbp)
 3561      FFFF0100 
 3561      0000
 3562 2a72 E9580300 		jmp	.L129
 3562      00
 3563              	.L178:
 813:main.c        **** 		do {
 814:main.c        **** 			fStatus = flReadChannelAsyncSubmit(handle, (uint8)chan, 22528, NULL, &error);
 3564              		.loc 1 814 47 is_stmt 1
 3565 2a77 488B8500 		movq	-256(%rbp), %rax
 3565      FFFFFF
 3566              		.loc 1 814 14
 3567 2a7e 0FB6F0   		movzbl	%al, %esi
 3568 2a81 488B8538 		movq	-456(%rbp), %rax
 3568      FEFFFF
 3569 2a88 488D9540 		leaq	-448(%rbp), %rdx
 3569      FEFFFF
 3570 2a8f 4989D0   		movq	%rdx, %r8
 3571 2a92 B9000000 		movl	$0, %ecx
 3571      00
 3572 2a97 BA005800 		movl	$22528, %edx
 3572      00
 3573 2a9c 4889C7   		movq	%rax, %rdi
 3574 2a9f E8000000 		call	flReadChannelAsyncSubmit@PLT
 3574      00
 3575 2aa4 898520FE 		movl	%eax, -480(%rbp)
 3575      FFFF
 815:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3576              		.loc 1 815 4
 3577 2aaa 83BD20FE 		cmpl	$0, -480(%rbp)
 3577      FFFF00
 3578 2ab1 740F     		je	.L179
 3579              		.loc 1 815 4 is_stmt 0 discriminator 1
 3580 2ab3 C7851CFE 		movl	$1, -484(%rbp)
 3580      FFFF0100 
 3580      0000
 3581 2abd E90D0300 		jmp	.L129
 3581      00
 3582              	.L179:
 816:main.c        **** 			fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, &error);
 3583              		.loc 1 816 14 is_stmt 1
 3584 2ac2 488B8538 		movq	-456(%rbp), %rax
 3584      FEFFFF
 3585 2ac9 488DBD40 		leaq	-448(%rbp), %rdi
 3585      FEFFFF
 3586 2ad0 488D8D18 		leaq	-488(%rbp), %rcx
 3586      FEFFFF
 3587 2ad7 488D9518 		leaq	-488(%rbp), %rdx
 3587      FEFFFF
 3588 2ade 488DB550 		leaq	-432(%rbp), %rsi
 3588      FEFFFF
 3589 2ae5 4989F8   		movq	%rdi, %r8
 3590 2ae8 4889C7   		movq	%rax, %rdi
 3591 2aeb E8000000 		call	flReadChannelAsyncAwait@PLT
 3591      00
 3592 2af0 898520FE 		movl	%eax, -480(%rbp)
 3592      FFFF
 817:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3593              		.loc 1 817 4
 3594 2af6 83BD20FE 		cmpl	$0, -480(%rbp)
 3594      FFFF00
 3595 2afd 740F     		je	.L180
 3596              		.loc 1 817 4 is_stmt 0 discriminator 1
 3597 2aff C7851CFE 		movl	$1, -484(%rbp)
 3597      FFFF0100 
 3597      0000
 3598 2b09 E9C10200 		jmp	.L129
 3598      00
 3599              	.L180:
 818:main.c        **** 			fwrite(recvData, 1, actualLength, file);
 3600              		.loc 1 818 4 is_stmt 1
 3601 2b0e 8B8518FE 		movl	-488(%rbp), %eax
 3601      FFFF
 3602 2b14 89C6     		movl	%eax, %esi
 3603 2b16 488B8550 		movq	-432(%rbp), %rax
 3603      FEFFFF
 3604 2b1d 488B9508 		movq	-248(%rbp), %rdx
 3604      FFFFFF
 3605 2b24 4889D1   		movq	%rdx, %rcx
 3606 2b27 4889F2   		movq	%rsi, %rdx
 3607 2b2a BE010000 		movl	$1, %esi
 3607      00
 3608 2b2f 4889C7   		movq	%rax, %rdi
 3609 2b32 E8000000 		call	fwrite@PLT
 3609      00
 819:main.c        **** 			printf(".");
 3610              		.loc 1 819 4
 3611 2b37 BF2E0000 		movl	$46, %edi
 3611      00
 3612 2b3c E8000000 		call	putchar@PLT
 3612      00
 820:main.c        **** 		} while ( !sigIsRaised() );
 3613              		.loc 1 820 14
 3614 2b41 E8000000 		call	sigIsRaised@PLT
 3614      00
 3615              		.loc 1 820 13
 3616 2b46 83F001   		xorl	$1, %eax
 3617 2b49 84C0     		testb	%al, %al
 3618 2b4b 0F8526FF 		jne	.L178
 3618      FFFF
 821:main.c        **** 		printf("\nCaught SIGINT, quitting...\n");
 3619              		.loc 1 821 3
 3620 2b51 488D0500 		leaq	.LC128(%rip), %rax
 3620      000000
 3621 2b58 4889C7   		movq	%rax, %rdi
 3622 2b5b E8000000 		call	puts@PLT
 3622      00
 822:main.c        **** 		fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, &error);
 3623              		.loc 1 822 13
 3624 2b60 488B8538 		movq	-456(%rbp), %rax
 3624      FEFFFF
 3625 2b67 488DBD40 		leaq	-448(%rbp), %rdi
 3625      FEFFFF
 3626 2b6e 488D8D18 		leaq	-488(%rbp), %rcx
 3626      FEFFFF
 3627 2b75 488D9518 		leaq	-488(%rbp), %rdx
 3627      FEFFFF
 3628 2b7c 488DB550 		leaq	-432(%rbp), %rsi
 3628      FEFFFF
 3629 2b83 4989F8   		movq	%rdi, %r8
 3630 2b86 4889C7   		movq	%rax, %rdi
 3631 2b89 E8000000 		call	flReadChannelAsyncAwait@PLT
 3631      00
 3632 2b8e 898520FE 		movl	%eax, -480(%rbp)
 3632      FFFF
 823:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3633              		.loc 1 823 3
 3634 2b94 83BD20FE 		cmpl	$0, -480(%rbp)
 3634      FFFF00
 3635 2b9b 740F     		je	.L181
 3636              		.loc 1 823 3 is_stmt 0 discriminator 1
 3637 2b9d C7851CFE 		movl	$1, -484(%rbp)
 3637      FFFF0100 
 3637      0000
 3638 2ba7 E9230200 		jmp	.L129
 3638      00
 3639              	.L181:
 824:main.c        **** 		fwrite(recvData, 1, actualLength, file);
 3640              		.loc 1 824 3 is_stmt 1
 3641 2bac 8B8518FE 		movl	-488(%rbp), %eax
 3641      FFFF
 3642 2bb2 89C6     		movl	%eax, %esi
 3643 2bb4 488B8550 		movq	-432(%rbp), %rax
 3643      FEFFFF
 3644 2bbb 488B9508 		movq	-248(%rbp), %rdx
 3644      FFFFFF
 3645 2bc2 4889D1   		movq	%rdx, %rcx
 3646 2bc5 4889F2   		movq	%rsi, %rdx
 3647 2bc8 BE010000 		movl	$1, %esi
 3647      00
 3648 2bcd 4889C7   		movq	%rax, %rdi
 3649 2bd0 E8000000 		call	fwrite@PLT
 3649      00
 825:main.c        **** 		fclose(file);
 3650              		.loc 1 825 3
 3651 2bd5 488B8508 		movq	-248(%rbp), %rax
 3651      FFFFFF
 3652 2bdc 4889C7   		movq	%rax, %rdi
 3653 2bdf E8000000 		call	fclose@PLT
 3653      00
 3654              	.L173:
 3655              	.LBE18:
 826:main.c        **** 	}
 827:main.c        **** 
 828:main.c        **** 	if ( shellOpt->count ) {
 3656              		.loc 1 828 15
 3657 2be4 488B85A0 		movq	-352(%rbp), %rax
 3657      FEFFFF
 3658 2beb 8B4060   		movl	96(%rax), %eax
 3659              		.loc 1 828 5
 3660 2bee 85C0     		testl	%eax, %eax
 3661 2bf0 0F84D801 		je	.L195
 3661      0000
 829:main.c        **** 		printf("\nEntering CommFPGA command-line mode:\n");
 3662              		.loc 1 829 3
 3663 2bf6 488D0500 		leaq	.LC129(%rip), %rax
 3663      000000
 3664 2bfd 4889C7   		movq	%rax, %rdi
 3665 2c00 E8000000 		call	puts@PLT
 3665      00
 830:main.c        **** 		if ( isCommCapable ) {
 3666              		.loc 1 830 6
 3667 2c05 80BD13FE 		cmpb	$0, -493(%rbp)
 3667      FFFF00
 3668 2c0c 0F848B01 		je	.L182
 3668      0000
 3669              	.LBB19:
 831:main.c        **** 		   uint8 isRunning;
 832:main.c        **** 			fStatus = flSelectConduit(handle, conduit, &error);
 3670              		.loc 1 832 14
 3671 2c12 0FB68D11 		movzbl	-495(%rbp), %ecx
 3671      FEFFFF
 3672 2c19 488B8538 		movq	-456(%rbp), %rax
 3672      FEFFFF
 3673 2c20 488D9540 		leaq	-448(%rbp), %rdx
 3673      FEFFFF
 3674 2c27 89CE     		movl	%ecx, %esi
 3675 2c29 4889C7   		movq	%rax, %rdi
 3676 2c2c E8000000 		call	flSelectConduit@PLT
 3676      00
 3677 2c31 898520FE 		movl	%eax, -480(%rbp)
 3677      FFFF
 833:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3678              		.loc 1 833 4
 3679 2c37 83BD20FE 		cmpl	$0, -480(%rbp)
 3679      FFFF00
 3680 2c3e 740F     		je	.L183
 3681              		.loc 1 833 4 is_stmt 0 discriminator 1
 3682 2c40 C7851CFE 		movl	$1, -484(%rbp)
 3682      FFFF0100 
 3682      0000
 3683 2c4a E9800100 		jmp	.L129
 3683      00
 3684              	.L183:
 834:main.c        **** 			fStatus = flIsFPGARunning(handle, &isRunning, &error);
 3685              		.loc 1 834 14 is_stmt 1
 3686 2c4f 488B8538 		movq	-456(%rbp), %rax
 3686      FEFFFF
 3687 2c56 488D9540 		leaq	-448(%rbp), %rdx
 3687      FEFFFF
 3688 2c5d 488D8D50 		leaq	-432(%rbp), %rcx
 3688      FEFFFF
 3689 2c64 4889CE   		movq	%rcx, %rsi
 3690 2c67 4889C7   		movq	%rax, %rdi
 3691 2c6a E8000000 		call	flIsFPGARunning@PLT
 3691      00
 3692 2c6f 898520FE 		movl	%eax, -480(%rbp)
 3692      FFFF
 835:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3693              		.loc 1 835 4
 3694 2c75 83BD20FE 		cmpl	$0, -480(%rbp)
 3694      FFFF00
 3695 2c7c 740F     		je	.L185
 3696              		.loc 1 835 4 is_stmt 0 discriminator 1
 3697 2c7e C7851CFE 		movl	$1, -484(%rbp)
 3697      FFFF0100 
 3697      0000
 3698 2c88 E9420100 		jmp	.L129
 3698      00
 3699              	.L185:
 836:main.c        **** 			if ( isRunning ) {
 3700              		.loc 1 836 9 is_stmt 1
 3701 2c8d 0FB68550 		movzbl	-432(%rbp), %eax
 3701      FEFFFF
 3702              		.loc 1 836 7
 3703 2c94 84C0     		testb	%al, %al
 3704 2c96 0F84D000 		je	.L186
 3704      0000
 3705              	.L188:
 837:main.c        **** 				do {
 838:main.c        **** 					do {
 839:main.c        **** 						line = readline("> ");
 3706              		.loc 1 839 14 discriminator 2
 3707 2c9c 488D0500 		leaq	.LC130(%rip), %rax
 3707      000000
 3708 2ca3 4889C7   		movq	%rax, %rdi
 3709 2ca6 E8000000 		call	readline@PLT
 3709      00
 3710 2cab 48898558 		movq	%rax, -424(%rbp)
 3710      FEFFFF
 840:main.c        **** 					} while ( line && !line[0] );
 3711              		.loc 1 840 21 discriminator 2
 3712 2cb2 4883BD58 		cmpq	$0, -424(%rbp)
 3712      FEFFFF00 
 3713 2cba 740E     		je	.L187
 3714              		.loc 1 840 29 discriminator 1
 3715 2cbc 488B8558 		movq	-424(%rbp), %rax
 3715      FEFFFF
 3716 2cc3 0FB600   		movzbl	(%rax), %eax
 3717              		.loc 1 840 21 discriminator 1
 3718 2cc6 84C0     		testb	%al, %al
 3719 2cc8 74D2     		je	.L188
 3720              	.L187:
 841:main.c        **** 					if ( line && line[0] && line[0] != 'q' ) {
 3721              		.loc 1 841 9
 3722 2cca 4883BD58 		cmpq	$0, -424(%rbp)
 3722      FEFFFF00 
 3723 2cd2 747A     		je	.L189
 3724              		.loc 1 841 23 discriminator 1
 3725 2cd4 488B8558 		movq	-424(%rbp), %rax
 3725      FEFFFF
 3726 2cdb 0FB600   		movzbl	(%rax), %eax
 3727              		.loc 1 841 16 discriminator 1
 3728 2cde 84C0     		testb	%al, %al
 3729 2ce0 746C     		je	.L189
 3730              		.loc 1 841 34 discriminator 2
 3731 2ce2 488B8558 		movq	-424(%rbp), %rax
 3731      FEFFFF
 3732 2ce9 0FB600   		movzbl	(%rax), %eax
 3733              		.loc 1 841 27 discriminator 2
 3734 2cec 3C71     		cmpb	$113, %al
 3735 2cee 745E     		je	.L189
 842:main.c        **** 						add_history(line);
 3736              		.loc 1 842 7
 3737 2cf0 488B8558 		movq	-424(%rbp), %rax
 3737      FEFFFF
 3738 2cf7 4889C7   		movq	%rax, %rdi
 3739 2cfa E8000000 		call	add_history@PLT
 3739      00
 843:main.c        **** 						pStatus = parseLine(handle, line, &error);
 3740              		.loc 1 843 17
 3741 2cff 488B8538 		movq	-456(%rbp), %rax
 3741      FEFFFF
 3742 2d06 488D9540 		leaq	-448(%rbp), %rdx
 3742      FEFFFF
 3743 2d0d 488B8D58 		movq	-424(%rbp), %rcx
 3743      FEFFFF
 3744 2d14 4889CE   		movq	%rcx, %rsi
 3745 2d17 4889C7   		movq	%rax, %rdi
 3746 2d1a E864D9FF 		call	parseLine
 3746      FF
 3747              		.loc 1 843 15
 3748 2d1f 898534FE 		movl	%eax, -460(%rbp)
 3748      FFFF
 844:main.c        **** 						CHECK_STATUS(pStatus, pStatus, cleanup);
 3749              		.loc 1 844 7
 3750 2d25 83BD34FE 		cmpl	$0, -460(%rbp)
 3750      FFFF00
 3751 2d2c 7411     		je	.L190
 3752              		.loc 1 844 7 is_stmt 0 discriminator 1
 3753 2d2e 8B8534FE 		movl	-460(%rbp), %eax
 3753      FFFF
 3754 2d34 89851CFE 		movl	%eax, -484(%rbp)
 3754      FFFF
 3755 2d3a E9900000 		jmp	.L129
 3755      00
 3756              	.L190:
 845:main.c        **** 						free((void*)line);
 3757              		.loc 1 845 7 is_stmt 1
 3758 2d3f 488B8558 		movq	-424(%rbp), %rax
 3758      FEFFFF
 3759 2d46 4889C7   		movq	%rax, %rdi
 3760 2d49 E8000000 		call	free@PLT
 3760      00
 3761              	.L189:
 846:main.c        **** 					}
 847:main.c        **** 				} while ( line && line[0] != 'q' );
 3762              		.loc 1 847 20
 3763 2d4e 4883BD58 		cmpq	$0, -424(%rbp)
 3763      FEFFFF00 
 3764 2d56 7477     		je	.L129
 3765              		.loc 1 847 27 discriminator 1
 3766 2d58 488B8558 		movq	-424(%rbp), %rax
 3766      FEFFFF
 3767 2d5f 0FB600   		movzbl	(%rax), %eax
 3768              		.loc 1 847 20 discriminator 1
 3769 2d62 3C71     		cmpb	$113, %al
 3770 2d64 0F8532FF 		jne	.L188
 3770      FFFF
 3771 2d6a EB63     		jmp	.L129
 3772              	.L186:
 848:main.c        **** 			} else {
 849:main.c        **** 				fprintf(stderr, "The FPGALink device at %s is not ready to talk - did you forget --xsvf?\n", vp
 3773              		.loc 1 849 5
 3774 2d6c 488B0500 		movq	stderr(%rip), %rax
 3774      000000
 3775 2d73 488B95F0 		movq	-272(%rbp), %rdx
 3775      FEFFFF
 3776 2d7a 488D0D00 		leaq	.LC131(%rip), %rcx
 3776      000000
 3777 2d81 4889CE   		movq	%rcx, %rsi
 3778 2d84 4889C7   		movq	%rax, %rdi
 3779 2d87 B8000000 		movl	$0, %eax
 3779      00
 3780 2d8c E8000000 		call	fprintf@PLT
 3780      00
 850:main.c        **** 				FAIL(FLP_ARGS, cleanup);
 3781              		.loc 1 850 5
 3782 2d91 C7851CFE 		movl	$12, -484(%rbp)
 3782      FFFF0C00 
 3782      0000
 3783 2d9b EB32     		jmp	.L129
 3784              	.L182:
 3785              	.LBE19:
 851:main.c        **** 			}
 852:main.c        **** 		} else {
 853:main.c        **** 			fprintf(stderr, "Shell requested but device at %s does not support CommFPGA\n", vp);
 3786              		.loc 1 853 4
 3787 2d9d 488B0500 		movq	stderr(%rip), %rax
 3787      000000
 3788 2da4 488B95F0 		movq	-272(%rbp), %rdx
 3788      FEFFFF
 3789 2dab 488D0D00 		leaq	.LC132(%rip), %rcx
 3789      000000
 3790 2db2 4889CE   		movq	%rcx, %rsi
 3791 2db5 4889C7   		movq	%rax, %rdi
 3792 2db8 B8000000 		movl	$0, %eax
 3792      00
 3793 2dbd E8000000 		call	fprintf@PLT
 3793      00
 854:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 3794              		.loc 1 854 4
 3795 2dc2 C7851CFE 		movl	$12, -484(%rbp)
 3795      FFFF0C00 
 3795      0000
 3796 2dcc EB01     		jmp	.L129
 3797              	.L195:
 855:main.c        **** 		}
 856:main.c        **** 	}
 857:main.c        **** 
 858:main.c        **** cleanup:
 3798              		.loc 1 858 1
 3799 2dce 90       		nop
 3800              	.L129:
 859:main.c        **** 	free((void*)line);
 3801              		.loc 1 859 2
 3802 2dcf 488B8558 		movq	-424(%rbp), %rax
 3802      FEFFFF
 3803 2dd6 4889C7   		movq	%rax, %rdi
 3804 2dd9 E8000000 		call	free@PLT
 3804      00
 860:main.c        **** 	flClose(handle);
 3805              		.loc 1 860 2
 3806 2dde 488B8538 		movq	-456(%rbp), %rax
 3806      FEFFFF
 3807 2de5 4889C7   		movq	%rax, %rdi
 3808 2de8 E8000000 		call	flClose@PLT
 3808      00
 861:main.c        **** 	if ( error ) {
 3809              		.loc 1 861 7
 3810 2ded 488B8540 		movq	-448(%rbp), %rax
 3810      FEFFFF
 3811              		.loc 1 861 5
 3812 2df4 4885C0   		testq	%rax, %rax
 3813 2df7 7434     		je	.L192
 862:main.c        **** 		fprintf(stderr, "%s\n", error);
 3814              		.loc 1 862 3
 3815 2df9 488B9540 		movq	-448(%rbp), %rdx
 3815      FEFFFF
 3816 2e00 488B0500 		movq	stderr(%rip), %rax
 3816      000000
 3817 2e07 488D0D00 		leaq	.LC133(%rip), %rcx
 3817      000000
 3818 2e0e 4889CE   		movq	%rcx, %rsi
 3819 2e11 4889C7   		movq	%rax, %rdi
 3820 2e14 B8000000 		movl	$0, %eax
 3820      00
 3821 2e19 E8000000 		call	fprintf@PLT
 3821      00
 863:main.c        **** 		flFreeError(error);
 3822              		.loc 1 863 3
 3823 2e1e 488B8540 		movq	-448(%rbp), %rax
 3823      FEFFFF
 3824 2e25 4889C7   		movq	%rax, %rdi
 3825 2e28 E8000000 		call	flFreeError@PLT
 3825      00
 3826              	.L192:
 864:main.c        **** 	}
 865:main.c        **** 	return retVal;
 3827              		.loc 1 865 9
 3828 2e2d 8B851CFE 		movl	-484(%rbp), %eax
 3828      FFFF
 866:main.c        **** }
 3829              		.loc 1 866 1
 3830 2e33 488B55E8 		movq	-24(%rbp), %rdx
 3831 2e37 64482B14 		subq	%fs:40, %rdx
 3831      25280000 
 3831      00
 3832 2e40 7405     		je	.L194
 3833 2e42 E8000000 		call	__stack_chk_fail@PLT
 3833      00
 3834              	.L194:
 3835 2e47 488B5DF8 		movq	-8(%rbp), %rbx
 3836 2e4b C9       		leave
 3837              		.cfi_def_cfa 7, 8
 3838 2e4c C3       		ret
 3839              		.cfi_endproc
 3840              	.LFE11:
 3842              		.section	.rodata
 3843              		.align 8
 3844              	.LC14:
 3845 0cd0 00000000 		.long	0
 3846 0cd4 80842E41 		.long	1093567616
 3847              		.align 8
 3848              	.LC15:
 3849 0cd8 00000000 		.long	0
 3850 0cdc 00003041 		.long	1093664768
 3851              		.text
 3852              	.Letext0:
 3853              		.file 2 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h"
 3854              		.file 3 "/usr/include/x86_64-linux-gnu/bits/types.h"
 3855              		.file 4 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h"
 3856              		.file 5 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h"
 3857              		.file 6 "/usr/include/stdio.h"
 3858              		.file 7 "/home/pong/FPGALink/makestuff/common/makestuff.h"
 3859              		.file 8 "/home/pong/FPGALink/makestuff/libs/libfpgalink/libfpgalink.h"
 3860              		.file 9 "/home/pong/FPGALink/makestuff/libs/libbuffer/libbuffer.h"
 3861              		.file 10 "/home/pong/FPGALink/makestuff/libs/libargtable2/argtable2.h"
 3862              		.file 11 "/usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h"
 3863              		.file 12 "/usr/include/readline/history.h"
 3864              		.file 13 "/usr/include/readline/readline.h"
 3865              		.file 14 "/usr/include/string.h"
 3866              		.file 15 "/home/pong/FPGALink/makestuff/libs/libdump/libdump.h"
 3867              		.file 16 "/usr/include/x86_64-linux-gnu/sys/time.h"
 3868              		.file 17 "/usr/include/stdlib.h"
 3869              		.file 18 "/usr/include/errno.h"
 3870              		.file 19 "/home/pong/FPGALink/makestuff/libs/liberror/liberror.h"
 8218              		.section	.note.gnu.property,"a"
 8219              		.align 8
 8220 0000 04000000 		.long	1f - 0f
 8221 0004 10000000 		.long	4f - 1f
 8222 0008 05000000 		.long	5
 8223              	0:
 8224 000c 474E5500 		.string	"GNU"
 8225              	1:
 8226              		.align 8
 8227 0010 020000C0 		.long	0xc0000002
 8228 0014 04000000 		.long	3f - 2f
 8229              	2:
 8230 0018 03000000 		.long	0x3
 8231              	3:
 8232 001c 00000000 		.align 8
 8233              	4:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccIKrhX4.s:6      .bss:0000000000000000 ptr
     /tmp/ccIKrhX4.s:6      .bss:0000000000000008 enableBenchmarking
     /tmp/ccIKrhX4.s:10     .text:0000000000000000 isHexDigit
     /tmp/ccIKrhX4.s:61     .text:0000000000000042 calcChecksum
     /tmp/ccIKrhX4.s:105    .text:0000000000000087 getHexNibble
     /tmp/ccIKrhX4.s:177    .text:00000000000000ff getHexByte
     /tmp/ccIKrhX4.s:284    .data.rel.ro.local:0000000000000000 errMessages
     /tmp/ccIKrhX4.s:303    .text:00000000000001a7 doRead
     /tmp/ccIKrhX4.s:568    .text:000000000000046b doWrite
     /tmp/ccIKrhX4.s:729    .text:0000000000000683 parseLine
     /tmp/ccIKrhX4.s:2044   .data.rel.local:0000000000000000 nibbles
     /tmp/ccIKrhX4.s:2302   .text:0000000000001732 main

UNDEFINED SYMBOLS
__stack_chk_fail
flReadChannelAsyncSubmit
errPrefix
flReadChannelAsyncAwait
fwrite
fread
flWriteChannelAsync
flAwaitAsyncWrites
bufInitialise
__errno_location
strtoul
malloc
strncpy
fopen
free
gettimeofday
printf
fclose
bufAppendConst
flReadChannel
flWriteChannel
flSelectConduit
dump
bufDestroy
stderr
fprintf
fputc
arg_str0
arg_str1
arg_uint0
arg_lit0
arg_end
arg_nullcheck
arg_parse
stdout
arg_print_syntax
puts
arg_print_glossary
arg_print_errors
flInitialise
flOpen
flLoadCustomFirmware
flLoadStandardFirmware
flSleep
putchar
fflush
flIsDeviceAvailable
flGetFirmwareVersion
flGetFirmwareID
strcmp
flFlashStandardFirmware
flFlashCustomFirmware
flSaveFirmware
flResetToggle
flIsNeroCapable
flIsCommCapable
flMultiBitPortAccess
sprintf
jtagScanChain
flProgram
flIsFPGARunning
sigRegisterHandler
sigIsRaised
readline
add_history
flClose
flFreeError
